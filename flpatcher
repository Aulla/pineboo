#!/bin/bash
APP_DIR=$(dirname $(realpath $0))


SRC_PROJECT=""
SRC_START_COMMIT=""
SRC_END_COMMIT="HEAD"
DST_PROJECT=$(pwd)
DST_APPLY_COMMIT="HEAD"

show_help() {
    echo "  $(basename $0) [options]"
    echo
    echo " -- options --"
    echo 
    echo " --src="
    echo " --dst="
    echo " --start="
    echo " --end="
    echo " --apply="
    echo " --help      -- shows this help message"
    echo
    
}


process_argument() {
    local argname="$1"
    local value="$2"
    
    case $argname in
    src) SRC_PROJECT="$value" ;;
    dst) DST_PROJECT="$value" ;;
    start) SRC_START_COMMIT="$value" ;;
    end) SRC_END_COMMIT="$value" ;;
    apply) DST_APPLY_COMMIT="$value" ;;
    help) show_help; exit 0;;
    *) echo "Unexpected argument '$argname'"; return 1 ;;
    esac
    
    #echo "* $argname -> '$value'"
    return 0
}

let n=0

ARGS=()

for arg in "$@"; do
    let n+=1
    if [[ $arg == --* ]] ; then
        argname="${arg#--}"
        value=""
        
        if [[ $argname == *"="* ]] ; then
            value="${argname#*=}"
            argname="${argname%%=*}"
        fi
       
        process_argument "$argname" "$value" || exit 1
        
    else
        ARGS+=( "$arg" )
    fi
done 

let n=0
for arg in "${ARGS[@]}"; do
    let n+=1
    echo "Unexpected positional argument '$arg'"
    exit 1
done

is_valid_git_folder() {
    local gitfolder="$1"
    test -d "$gitfolder" || return 1
    (
        cd "$gitfolder" || exit 1
        test -d ".git" || exit 1
        local line=""
        
        while read line; do
            local status="${line%% *}"
            local filename="${line#* }"
            case $status in
            ??) continue ;;
            *) echo "Modified file in working directory '$filename' ($status)"; exit 1;;
            esac
            # echo "*$status* '$filename'"
        done < <(git status --porcelain)

    ) || return 1
    
}
is_valid_git_commit() {
    local gitfolder="$1"
    local commit="$2"
    (
        cd "$gitfolder" || exit 1
        [[ "$commit" ]] || exit 2
        git log "$commit" --pretty=oneline --abbrev-commit -1 >/dev/null 2>&1 || exit 3
    )
    return $?
}

# VALIDAR --------------
is_valid_git_folder "$SRC_PROJECT" || {
    echo "El proyecto de origen '$SRC_PROJECT' no es valido." >&2; 
    exit 1;
}

is_valid_git_folder "$DST_PROJECT" || {
    echo "El proyecto de destino '$DST_PROJECT' no es valido." >&2; 
    exit 1;
}

is_valid_git_commit "$SRC_PROJECT" "$SRC_START_COMMIT" || {
    echo "El commit inicial <$SRC_START_COMMIT> no es valido." >&2; 
    exit 1;
}
is_valid_git_commit "$SRC_PROJECT" "$SRC_END_COMMIT" || {
    echo "El commit final <$SRC_END_COMMIT> no es valido." >&2; 
    exit 1;
}
is_valid_git_commit "$DST_PROJECT" "$DST_APPLY_COMMIT" || {
    echo "El commit a aplicar <$DST_APPLY_COMMIT> no es valido." >&2; 
    exit 1;
}


# 1.- Calcular lista de ficheros que componen la diferencia en SRC

# 2.- Para cada fichero en la diferencia, extraer las versiones BASE y REMOTE

# 3.- Para cada fichero en la diferencia, extraer la versión LOCAL

# 4.- Para cada fichero en la diferencia, ejecutar el 
#     sistema de mezcla adecuado ** segun EXTENSION**

# 5.- Para cada mezcla finalizada, añadirla al proyecto DST (git add)

# 6.- Si todos los ficheros se mezclaron sin error:
#     hacer un commit, proponer un mensaje de commit.















