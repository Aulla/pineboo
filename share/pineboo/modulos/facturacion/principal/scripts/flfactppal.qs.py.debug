0007Source: begin-gen
0007 Class: begin-gen
0007  Class: line: 'class interna(object):'
0007<-Source: line: 'class interna(object):'
0008  Class: begin: 'block-class-interna'
0008<-Source: begin: 'block-class-interna'
0008  Source: begin-gen
0008   DeclarationBlock: begin-gen
0008    Variable: begin-gen
0008     Variable: expr: 'ctx'
0008     Variable: expr: '='
0008     Variable: expr: 'qsatype.Object()'
0008    Variable: end-gen
0008    DeclarationBlock: line: 'ctx = qsatype.Object()'
0008  <-Source: line: 'ctx = qsatype.Object()'
0008 <--Class: line: 'ctx = qsatype.Object()'
0008<---Source: line: 'ctx = qsatype.Object()'
0009   DeclarationBlock: end-gen
0009   Function: begin-gen
0009    Variable: begin-gen
0009     Variable: expr: 'context'
0009    Variable: end-gen
0009    Function: line: 'def __init__(self, context = None):'
0009  <-Source: line: 'def __init__(self, context = None):'
0009 <--Class: line: 'def __init__(self, context = None):'
0009<---Source: line: 'def __init__(self, context = None):'
0010    Function: begin: 'block-def-__init__'
0010  <-Source: begin: 'block-def-__init__'
0010 <--Class: begin: 'block-def-__init__'
0010<---Source: begin: 'block-def-__init__'
0010    Source: begin-gen
0010     InstructionUpdate: begin-gen
0010      Member: begin-gen
0010       Identifier: begin-gen
0010        Identifier: expr: 'self'
0010       Identifier: end-gen
0010       Identifier: begin-gen
0010        Identifier: expr: 'ctx'
0010       Identifier: end-gen
0010       Member: expr: 'self.ctx'
0010      Member: end-gen
0010      OpUpdate: begin-gen
0010       OpUpdate: expr: '='
0010      OpUpdate: end-gen
0010      Value: begin-gen
0010       Identifier: begin-gen
0010        Identifier: expr: 'context'
0010      <-Value: expr: 'context'
0010       Identifier: end-gen
0010      Value: end-gen
0010      InstructionUpdate: line: 'self.ctx = context'
0010    <-Source: line: 'self.ctx = context'
0010   <--Function: line: 'self.ctx = context'
0010  <---Source: line: 'self.ctx = context'
0010 <----Class: line: 'self.ctx = context'
0010<-----Source: line: 'self.ctx = context'
0011     InstructionUpdate: end-gen
0011    Source: end-gen
0011    Function: end: 'block-def-__init__'
0011  <-Source: end: 'block-def-__init__'
0011 <--Class: end: 'block-def-__init__'
0011<---Source: end: 'block-def-__init__'
0012   Function: end-gen
0012   Function: begin-gen
0012    Function: line: 'def init(self):'
0012  <-Source: line: 'def init(self):'
0012 <--Class: line: 'def init(self):'
0012<---Source: line: 'def init(self):'
0013    Function: begin: 'block-def-init'
0013  <-Source: begin: 'block-def-init'
0013 <--Class: begin: 'block-def-init'
0013<---Source: begin: 'block-def-init'
0013    Source: begin-gen
0013     InstructionCall: begin-gen
0013      Member: begin-gen
0013       Identifier: begin-gen
0013        Identifier: expr: 'self'
0013       Identifier: end-gen
0013       Identifier: begin-gen
0013        Identifier: expr: 'ctx'
0013       Identifier: end-gen
0013       FunctionCall: begin-gen
0013        FunctionCall: expr: 'interna_init()'
0013       FunctionCall: end-gen
0013       Member: expr: 'self.ctx.interna_init()'
0013      Member: end-gen
0013      InstructionCall: line: 'self.ctx.interna_init()'
0013    <-Source: line: 'self.ctx.interna_init()'
0013   <--Function: line: 'self.ctx.interna_init()'
0013  <---Source: line: 'self.ctx.interna_init()'
0013 <----Class: line: 'self.ctx.interna_init()'
0013<-----Source: line: 'self.ctx.interna_init()'
0014     InstructionCall: end-gen
0014    Source: end-gen
0014    Function: end: 'block-def-init'
0014  <-Source: end: 'block-def-init'
0014 <--Class: end: 'block-def-init'
0014<---Source: end: 'block-def-init'
0015   Function: end-gen
0015   Function: begin-gen
0015    Variable: begin-gen
0015     Variable: expr: 'curDirCli'
0015    Variable: end-gen
0015    Function: line: 'def afterCommit_dirclientes(self, curDirCli = None):'
0015  <-Source: line: 'def afterCommit_dirclientes(self, curDirCli = None):'
0015 <--Class: line: 'def afterCommit_dirclientes(self, curDirCli = None):'
0015<---Source: line: 'def afterCommit_dirclientes(self, curDirCli = None):'
0016    Function: begin: 'block-def-afterCommit_dirclientes'
0016  <-Source: begin: 'block-def-afterCommit_dirclientes'
0016 <--Class: begin: 'block-def-afterCommit_dirclientes'
0016<---Source: begin: 'block-def-afterCommit_dirclientes'
0016    Source: begin-gen
0016     InstructionFlow: begin-gen
0016      Value: begin-gen
0016       Member: begin-gen
0016        Identifier: begin-gen
0016         Identifier: expr: 'self'
0016        Identifier: end-gen
0016        Identifier: begin-gen
0016         Identifier: expr: 'ctx'
0016        Identifier: end-gen
0016        FunctionCall: begin-gen
0016         Value: begin-gen
0016          Identifier: begin-gen
0016           Identifier: expr: 'curDirCli'
0016         <-Value: expr: 'curDirCli'
0016          Identifier: end-gen
0016         Value: end-gen
0016         FunctionCall: expr: 'interna_afterCommit_dirclientes(curDirCli)'
0016        FunctionCall: end-gen
0016        Member: expr: 'self.ctx.interna_afterCommit_dirclientes(curDirCli)'
0016      <-Value: expr: 'self.ctx.interna_afterCommit_dirclientes(curDirCli)'
0016       Member: end-gen
0016      Value: end-gen
0016      InstructionFlow: line: 'return self.ctx.interna_afterCommit_dirclientes(curDirCli)'
0016    <-Source: line: 'return self.ctx.interna_afterCommit_dirclientes(curDirCli)'
0016   <--Function: line: 'return self.ctx.interna_afterCommit_dirclientes(curDirCli)'
0016  <---Source: line: 'return self.ctx.interna_afterCommit_dirclientes(curDirCli)'
0016 <----Class: line: 'return self.ctx.interna_afterCommit_dirclientes(curDirCli)'
0016<-----Source: line: 'return self.ctx.interna_afterCommit_dirclientes(curDirCli)'
0017     InstructionFlow: end-gen
0017    Source: end-gen
0017    Function: end: 'block-def-afterCommit_dirclientes'
0017  <-Source: end: 'block-def-afterCommit_dirclientes'
0017 <--Class: end: 'block-def-afterCommit_dirclientes'
0017<---Source: end: 'block-def-afterCommit_dirclientes'
0018   Function: end-gen
0018   Function: begin-gen
0018    Variable: begin-gen
0018     Variable: expr: 'curDirProv'
0018    Variable: end-gen
0018    Function: line: 'def afterCommit_dirproveedores(self, curDirProv = None):'
0018  <-Source: line: 'def afterCommit_dirproveedores(self, curDirProv = None):'
0018 <--Class: line: 'def afterCommit_dirproveedores(self, curDirProv = None):'
0018<---Source: line: 'def afterCommit_dirproveedores(self, curDirProv = None):'
0019    Function: begin: 'block-def-afterCommit_dirproveedores'
0019  <-Source: begin: 'block-def-afterCommit_dirproveedores'
0019 <--Class: begin: 'block-def-afterCommit_dirproveedores'
0019<---Source: begin: 'block-def-afterCommit_dirproveedores'
0019    Source: begin-gen
0019     InstructionFlow: begin-gen
0019      Value: begin-gen
0019       Member: begin-gen
0019        Identifier: begin-gen
0019         Identifier: expr: 'self'
0019        Identifier: end-gen
0019        Identifier: begin-gen
0019         Identifier: expr: 'ctx'
0019        Identifier: end-gen
0019        FunctionCall: begin-gen
0019         Value: begin-gen
0019          Identifier: begin-gen
0019           Identifier: expr: 'curDirProv'
0019         <-Value: expr: 'curDirProv'
0019          Identifier: end-gen
0019         Value: end-gen
0019         FunctionCall: expr: 'interna_afterCommit_dirproveedores(curDirProv)'
0019        FunctionCall: end-gen
0019        Member: expr: 'self.ctx.interna_afterCommit_dirproveedores(curDirProv)'
0019      <-Value: expr: 'self.ctx.interna_afterCommit_dirproveedores(curDirProv)'
0019       Member: end-gen
0019      Value: end-gen
0019      InstructionFlow: line: 'return self.ctx.interna_afterCommit_dirproveedores(curDirProv)'
0019    <-Source: line: 'return self.ctx.interna_afterCommit_dirproveedores(curDirProv)'
0019   <--Function: line: 'return self.ctx.interna_afterCommit_dirproveedores(curDirProv)'
0019  <---Source: line: 'return self.ctx.interna_afterCommit_dirproveedores(curDirProv)'
0019 <----Class: line: 'return self.ctx.interna_afterCommit_dirproveedores(curDirProv)'
0019<-----Source: line: 'return self.ctx.interna_afterCommit_dirproveedores(curDirProv)'
0020     InstructionFlow: end-gen
0020    Source: end-gen
0020    Function: end: 'block-def-afterCommit_dirproveedores'
0020  <-Source: end: 'block-def-afterCommit_dirproveedores'
0020 <--Class: end: 'block-def-afterCommit_dirproveedores'
0020<---Source: end: 'block-def-afterCommit_dirproveedores'
0021   Function: end-gen
0021   Function: begin-gen
0021    Variable: begin-gen
0021     Variable: expr: 'curCliente'
0021    Variable: end-gen
0021    Function: line: 'def afterCommit_clientes(self, curCliente = None):'
0021  <-Source: line: 'def afterCommit_clientes(self, curCliente = None):'
0021 <--Class: line: 'def afterCommit_clientes(self, curCliente = None):'
0021<---Source: line: 'def afterCommit_clientes(self, curCliente = None):'
0022    Function: begin: 'block-def-afterCommit_clientes'
0022  <-Source: begin: 'block-def-afterCommit_clientes'
0022 <--Class: begin: 'block-def-afterCommit_clientes'
0022<---Source: begin: 'block-def-afterCommit_clientes'
0022    Source: begin-gen
0022     InstructionFlow: begin-gen
0022      Value: begin-gen
0022       Member: begin-gen
0022        Identifier: begin-gen
0022         Identifier: expr: 'self'
0022        Identifier: end-gen
0022        Identifier: begin-gen
0022         Identifier: expr: 'ctx'
0022        Identifier: end-gen
0022        FunctionCall: begin-gen
0022         Value: begin-gen
0022          Identifier: begin-gen
0022           Identifier: expr: 'curCliente'
0022         <-Value: expr: 'curCliente'
0022          Identifier: end-gen
0022         Value: end-gen
0022         FunctionCall: expr: 'interna_afterCommit_clientes(curCliente)'
0022        FunctionCall: end-gen
0022        Member: expr: 'self.ctx.interna_afterCommit_clientes(curCliente)'
0022      <-Value: expr: 'self.ctx.interna_afterCommit_clientes(curCliente)'
0022       Member: end-gen
0022      Value: end-gen
0022      InstructionFlow: line: 'return self.ctx.interna_afterCommit_clientes(curCliente)'
0022    <-Source: line: 'return self.ctx.interna_afterCommit_clientes(curCliente)'
0022   <--Function: line: 'return self.ctx.interna_afterCommit_clientes(curCliente)'
0022  <---Source: line: 'return self.ctx.interna_afterCommit_clientes(curCliente)'
0022 <----Class: line: 'return self.ctx.interna_afterCommit_clientes(curCliente)'
0022<-----Source: line: 'return self.ctx.interna_afterCommit_clientes(curCliente)'
0023     InstructionFlow: end-gen
0023    Source: end-gen
0023    Function: end: 'block-def-afterCommit_clientes'
0023  <-Source: end: 'block-def-afterCommit_clientes'
0023 <--Class: end: 'block-def-afterCommit_clientes'
0023<---Source: end: 'block-def-afterCommit_clientes'
0024   Function: end-gen
0024   Function: begin-gen
0024    Variable: begin-gen
0024     Variable: expr: 'curCliente'
0024    Variable: end-gen
0024    Function: line: 'def beforeCommit_clientes(self, curCliente = None):'
0024  <-Source: line: 'def beforeCommit_clientes(self, curCliente = None):'
0024 <--Class: line: 'def beforeCommit_clientes(self, curCliente = None):'
0024<---Source: line: 'def beforeCommit_clientes(self, curCliente = None):'
0025    Function: begin: 'block-def-beforeCommit_clientes'
0025  <-Source: begin: 'block-def-beforeCommit_clientes'
0025 <--Class: begin: 'block-def-beforeCommit_clientes'
0025<---Source: begin: 'block-def-beforeCommit_clientes'
0025    Source: begin-gen
0025     InstructionFlow: begin-gen
0025      Value: begin-gen
0025       Member: begin-gen
0025        Identifier: begin-gen
0025         Identifier: expr: 'self'
0025        Identifier: end-gen
0025        Identifier: begin-gen
0025         Identifier: expr: 'ctx'
0025        Identifier: end-gen
0025        FunctionCall: begin-gen
0025         Value: begin-gen
0025          Identifier: begin-gen
0025           Identifier: expr: 'curCliente'
0025         <-Value: expr: 'curCliente'
0025          Identifier: end-gen
0025         Value: end-gen
0025         FunctionCall: expr: 'interna_beforeCommit_clientes(curCliente)'
0025        FunctionCall: end-gen
0025        Member: expr: 'self.ctx.interna_beforeCommit_clientes(curCliente)'
0025      <-Value: expr: 'self.ctx.interna_beforeCommit_clientes(curCliente)'
0025       Member: end-gen
0025      Value: end-gen
0025      InstructionFlow: line: 'return self.ctx.interna_beforeCommit_clientes(curCliente)'
0025    <-Source: line: 'return self.ctx.interna_beforeCommit_clientes(curCliente)'
0025   <--Function: line: 'return self.ctx.interna_beforeCommit_clientes(curCliente)'
0025  <---Source: line: 'return self.ctx.interna_beforeCommit_clientes(curCliente)'
0025 <----Class: line: 'return self.ctx.interna_beforeCommit_clientes(curCliente)'
0025<-----Source: line: 'return self.ctx.interna_beforeCommit_clientes(curCliente)'
0026     InstructionFlow: end-gen
0026    Source: end-gen
0026    Function: end: 'block-def-beforeCommit_clientes'
0026  <-Source: end: 'block-def-beforeCommit_clientes'
0026 <--Class: end: 'block-def-beforeCommit_clientes'
0026<---Source: end: 'block-def-beforeCommit_clientes'
0027   Function: end-gen
0027   Function: begin-gen
0027    Variable: begin-gen
0027     Variable: expr: 'curProveedor'
0027    Variable: end-gen
0027    Function: line: 'def afterCommit_proveedores(self, curProveedor = None):'
0027  <-Source: line: 'def afterCommit_proveedores(self, curProveedor = None):'
0027 <--Class: line: 'def afterCommit_proveedores(self, curProveedor = None):'
0027<---Source: line: 'def afterCommit_proveedores(self, curProveedor = None):'
0028    Function: begin: 'block-def-afterCommit_proveedores'
0028  <-Source: begin: 'block-def-afterCommit_proveedores'
0028 <--Class: begin: 'block-def-afterCommit_proveedores'
0028<---Source: begin: 'block-def-afterCommit_proveedores'
0028    Source: begin-gen
0028     InstructionFlow: begin-gen
0028      Value: begin-gen
0028       Member: begin-gen
0028        Identifier: begin-gen
0028         Identifier: expr: 'self'
0028        Identifier: end-gen
0028        Identifier: begin-gen
0028         Identifier: expr: 'ctx'
0028        Identifier: end-gen
0028        FunctionCall: begin-gen
0028         Value: begin-gen
0028          Identifier: begin-gen
0028           Identifier: expr: 'curProveedor'
0028         <-Value: expr: 'curProveedor'
0028          Identifier: end-gen
0028         Value: end-gen
0028         FunctionCall: expr: 'interna_afterCommit_proveedores(curProveedor)'
0028        FunctionCall: end-gen
0028        Member: expr: 'self.ctx.interna_afterCommit_proveedores(curProveedor)'
0028      <-Value: expr: 'self.ctx.interna_afterCommit_proveedores(curProveedor)'
0028       Member: end-gen
0028      Value: end-gen
0028      InstructionFlow: line: 'return self.ctx.interna_afterCommit_proveedores(curProveedor)'
0028    <-Source: line: 'return self.ctx.interna_afterCommit_proveedores(curProveedor)'
0028   <--Function: line: 'return self.ctx.interna_afterCommit_proveedores(curProveedor)'
0028  <---Source: line: 'return self.ctx.interna_afterCommit_proveedores(curProveedor)'
0028 <----Class: line: 'return self.ctx.interna_afterCommit_proveedores(curProveedor)'
0028<-----Source: line: 'return self.ctx.interna_afterCommit_proveedores(curProveedor)'
0029     InstructionFlow: end-gen
0029    Source: end-gen
0029    Function: end: 'block-def-afterCommit_proveedores'
0029  <-Source: end: 'block-def-afterCommit_proveedores'
0029 <--Class: end: 'block-def-afterCommit_proveedores'
0029<---Source: end: 'block-def-afterCommit_proveedores'
0030   Function: end-gen
0030   Function: begin-gen
0030    Variable: begin-gen
0030     Variable: expr: 'curProveedor'
0030    Variable: end-gen
0030    Function: line: 'def beforeCommit_proveedores(self, curProveedor = None):'
0030  <-Source: line: 'def beforeCommit_proveedores(self, curProveedor = None):'
0030 <--Class: line: 'def beforeCommit_proveedores(self, curProveedor = None):'
0030<---Source: line: 'def beforeCommit_proveedores(self, curProveedor = None):'
0031    Function: begin: 'block-def-beforeCommit_proveedores'
0031  <-Source: begin: 'block-def-beforeCommit_proveedores'
0031 <--Class: begin: 'block-def-beforeCommit_proveedores'
0031<---Source: begin: 'block-def-beforeCommit_proveedores'
0031    Source: begin-gen
0031     InstructionFlow: begin-gen
0031      Value: begin-gen
0031       Member: begin-gen
0031        Identifier: begin-gen
0031         Identifier: expr: 'self'
0031        Identifier: end-gen
0031        Identifier: begin-gen
0031         Identifier: expr: 'ctx'
0031        Identifier: end-gen
0031        FunctionCall: begin-gen
0031         Value: begin-gen
0031          Identifier: begin-gen
0031           Identifier: expr: 'curProveedor'
0031         <-Value: expr: 'curProveedor'
0031          Identifier: end-gen
0031         Value: end-gen
0031         FunctionCall: expr: 'interna_beforeCommit_proveedores(curProveedor)'
0031        FunctionCall: end-gen
0031        Member: expr: 'self.ctx.interna_beforeCommit_proveedores(curProveedor)'
0031      <-Value: expr: 'self.ctx.interna_beforeCommit_proveedores(curProveedor)'
0031       Member: end-gen
0031      Value: end-gen
0031      InstructionFlow: line: 'return self.ctx.interna_beforeCommit_proveedores(curProveedor)'
0031    <-Source: line: 'return self.ctx.interna_beforeCommit_proveedores(curProveedor)'
0031   <--Function: line: 'return self.ctx.interna_beforeCommit_proveedores(curProveedor)'
0031  <---Source: line: 'return self.ctx.interna_beforeCommit_proveedores(curProveedor)'
0031 <----Class: line: 'return self.ctx.interna_beforeCommit_proveedores(curProveedor)'
0031<-----Source: line: 'return self.ctx.interna_beforeCommit_proveedores(curProveedor)'
0032     InstructionFlow: end-gen
0032    Source: end-gen
0032    Function: end: 'block-def-beforeCommit_proveedores'
0032  <-Source: end: 'block-def-beforeCommit_proveedores'
0032 <--Class: end: 'block-def-beforeCommit_proveedores'
0032<---Source: end: 'block-def-beforeCommit_proveedores'
0033   Function: end-gen
0033   Function: begin-gen
0033    Variable: begin-gen
0033     Variable: expr: 'curEmpresa'
0033    Variable: end-gen
0033    Function: line: 'def afterCommit_empresa(self, curEmpresa = None):'
0033  <-Source: line: 'def afterCommit_empresa(self, curEmpresa = None):'
0033 <--Class: line: 'def afterCommit_empresa(self, curEmpresa = None):'
0033<---Source: line: 'def afterCommit_empresa(self, curEmpresa = None):'
0034    Function: begin: 'block-def-afterCommit_empresa'
0034  <-Source: begin: 'block-def-afterCommit_empresa'
0034 <--Class: begin: 'block-def-afterCommit_empresa'
0034<---Source: begin: 'block-def-afterCommit_empresa'
0034    Source: begin-gen
0034     InstructionFlow: begin-gen
0034      Value: begin-gen
0034       Member: begin-gen
0034        Identifier: begin-gen
0034         Identifier: expr: 'self'
0034        Identifier: end-gen
0034        Identifier: begin-gen
0034         Identifier: expr: 'ctx'
0034        Identifier: end-gen
0034        FunctionCall: begin-gen
0034         Value: begin-gen
0034          Identifier: begin-gen
0034           Identifier: expr: 'curEmpresa'
0034         <-Value: expr: 'curEmpresa'
0034          Identifier: end-gen
0034         Value: end-gen
0034         FunctionCall: expr: 'interna_afterCommit_empresa(curEmpresa)'
0034        FunctionCall: end-gen
0034        Member: expr: 'self.ctx.interna_afterCommit_empresa(curEmpresa)'
0034      <-Value: expr: 'self.ctx.interna_afterCommit_empresa(curEmpresa)'
0034       Member: end-gen
0034      Value: end-gen
0034      InstructionFlow: line: 'return self.ctx.interna_afterCommit_empresa(curEmpresa)'
0034    <-Source: line: 'return self.ctx.interna_afterCommit_empresa(curEmpresa)'
0034   <--Function: line: 'return self.ctx.interna_afterCommit_empresa(curEmpresa)'
0034  <---Source: line: 'return self.ctx.interna_afterCommit_empresa(curEmpresa)'
0034 <----Class: line: 'return self.ctx.interna_afterCommit_empresa(curEmpresa)'
0034<-----Source: line: 'return self.ctx.interna_afterCommit_empresa(curEmpresa)'
0035     InstructionFlow: end-gen
0035    Source: end-gen
0035    Function: end: 'block-def-afterCommit_empresa'
0035  <-Source: end: 'block-def-afterCommit_empresa'
0035 <--Class: end: 'block-def-afterCommit_empresa'
0035<---Source: end: 'block-def-afterCommit_empresa'
0036   Function: end-gen
0036   Function: begin-gen
0036    Variable: begin-gen
0036     Variable: expr: 'curCuenta'
0036    Variable: end-gen
0036    Function: line: 'def beforeCommit_cuentasbcocli(self, curCuenta = None):'
0036  <-Source: line: 'def beforeCommit_cuentasbcocli(self, curCuenta = None):'
0036 <--Class: line: 'def beforeCommit_cuentasbcocli(self, curCuenta = None):'
0036<---Source: line: 'def beforeCommit_cuentasbcocli(self, curCuenta = None):'
0037    Function: begin: 'block-def-beforeCommit_cuentasbcocli'
0037  <-Source: begin: 'block-def-beforeCommit_cuentasbcocli'
0037 <--Class: begin: 'block-def-beforeCommit_cuentasbcocli'
0037<---Source: begin: 'block-def-beforeCommit_cuentasbcocli'
0037    Source: begin-gen
0037     InstructionFlow: begin-gen
0037      Value: begin-gen
0037       Member: begin-gen
0037        Identifier: begin-gen
0037         Identifier: expr: 'self'
0037        Identifier: end-gen
0037        Identifier: begin-gen
0037         Identifier: expr: 'ctx'
0037        Identifier: end-gen
0037        FunctionCall: begin-gen
0037         Value: begin-gen
0037          Identifier: begin-gen
0037           Identifier: expr: 'curCuenta'
0037         <-Value: expr: 'curCuenta'
0037          Identifier: end-gen
0037         Value: end-gen
0037         FunctionCall: expr: 'interna_beforeCommit_cuentasbcocli(curCuenta)'
0037        FunctionCall: end-gen
0037        Member: expr: 'self.ctx.interna_beforeCommit_cuentasbcocli(curCuenta)'
0037      <-Value: expr: 'self.ctx.interna_beforeCommit_cuentasbcocli(curCuenta)'
0037       Member: end-gen
0037      Value: end-gen
0037      InstructionFlow: line: 'return self.ctx.interna_beforeCommit_cuentasbcocli(curCuenta)'
0037    <-Source: line: 'return self.ctx.interna_beforeCommit_cuentasbcocli(curCuenta)'
0037   <--Function: line: 'return self.ctx.interna_beforeCommit_cuentasbcocli(curCuenta)'
0037  <---Source: line: 'return self.ctx.interna_beforeCommit_cuentasbcocli(curCuenta)'
0037 <----Class: line: 'return self.ctx.interna_beforeCommit_cuentasbcocli(curCuenta)'
0037<-----Source: line: 'return self.ctx.interna_beforeCommit_cuentasbcocli(curCuenta)'
0038     InstructionFlow: end-gen
0038    Source: end-gen
0038    Function: end: 'block-def-beforeCommit_cuentasbcocli'
0038  <-Source: end: 'block-def-beforeCommit_cuentasbcocli'
0038 <--Class: end: 'block-def-beforeCommit_cuentasbcocli'
0038<---Source: end: 'block-def-beforeCommit_cuentasbcocli'
0039   Function: end-gen
0039  Source: end-gen
0039  Class: end: 'block-class-interna'
0039<-Source: end: 'block-class-interna'
0040 Class: end-gen
0040 Class: begin-gen
0040  Class: line: 'class oficial(interna):'
0040<-Source: line: 'class oficial(interna):'
0041  Class: begin: 'block-class-oficial'
0041<-Source: begin: 'block-class-oficial'
0041  Source: begin-gen
0041   Function: begin-gen
0041    Variable: begin-gen
0041     Variable: expr: 'context'
0041    Variable: end-gen
0041    Function: line: 'def __init__(self, context = None):'
0041  <-Source: line: 'def __init__(self, context = None):'
0041 <--Class: line: 'def __init__(self, context = None):'
0041<---Source: line: 'def __init__(self, context = None):'
0042    Function: begin: 'block-def-__init__'
0042  <-Source: begin: 'block-def-__init__'
0042 <--Class: begin: 'block-def-__init__'
0042<---Source: begin: 'block-def-__init__'
0042    Source: begin-gen
0042     InstructionCall: begin-gen
0042      FunctionCall: begin-gen
0042       Value: begin-gen
0042        Identifier: begin-gen
0042         Identifier: expr: 'context'
0042       <-Value: expr: 'context'
0042        Identifier: end-gen
0042       Value: end-gen
0042       FunctionCall: expr: 'super(oficial, self).__init__(context)'
0042      FunctionCall: end-gen
0042      InstructionCall: line: 'super(oficial, self).__init__(context)'
0042    <-Source: line: 'super(oficial, self).__init__(context)'
0042   <--Function: line: 'super(oficial, self).__init__(context)'
0042  <---Source: line: 'super(oficial, self).__init__(context)'
0042 <----Class: line: 'super(oficial, self).__init__(context)'
0042<-----Source: line: 'super(oficial, self).__init__(context)'
0043     InstructionCall: end-gen
0043    Source: end-gen
0043    Function: end: 'block-def-__init__'
0043  <-Source: end: 'block-def-__init__'
0043 <--Class: end: 'block-def-__init__'
0043<---Source: end: 'block-def-__init__'
0044   Function: end-gen
0044   Function: begin-gen
0044    Variable: begin-gen
0044     Variable: expr: 'nombreModulo'
0044    Variable: end-gen
0044    Function: line: 'def msgNoDisponible(self, nombreModulo = None):'
0044  <-Source: line: 'def msgNoDisponible(self, nombreModulo = None):'
0044 <--Class: line: 'def msgNoDisponible(self, nombreModulo = None):'
0044<---Source: line: 'def msgNoDisponible(self, nombreModulo = None):'
0045    Function: begin: 'block-def-msgNoDisponible'
0045  <-Source: begin: 'block-def-msgNoDisponible'
0045 <--Class: begin: 'block-def-msgNoDisponible'
0045<---Source: begin: 'block-def-msgNoDisponible'
0045    Source: begin-gen
0045     InstructionFlow: begin-gen
0045      Value: begin-gen
0045       Member: begin-gen
0045        Identifier: begin-gen
0045         Identifier: expr: 'self'
0045        Identifier: end-gen
0045        Identifier: begin-gen
0045         Identifier: expr: 'ctx'
0045        Identifier: end-gen
0045        FunctionCall: begin-gen
0045         Value: begin-gen
0045          Identifier: begin-gen
0045           Identifier: expr: 'nombreModulo'
0045         <-Value: expr: 'nombreModulo'
0045          Identifier: end-gen
0045         Value: end-gen
0045         FunctionCall: expr: 'oficial_msgNoDisponible(nombreModulo)'
0045        FunctionCall: end-gen
0045        Member: expr: 'self.ctx.oficial_msgNoDisponible(nombreModulo)'
0045      <-Value: expr: 'self.ctx.oficial_msgNoDisponible(nombreModulo)'
0045       Member: end-gen
0045      Value: end-gen
0045      InstructionFlow: line: 'return self.ctx.oficial_msgNoDisponible(nombreModulo)'
0045    <-Source: line: 'return self.ctx.oficial_msgNoDisponible(nombreModulo)'
0045   <--Function: line: 'return self.ctx.oficial_msgNoDisponible(nombreModulo)'
0045  <---Source: line: 'return self.ctx.oficial_msgNoDisponible(nombreModulo)'
0045 <----Class: line: 'return self.ctx.oficial_msgNoDisponible(nombreModulo)'
0045<-----Source: line: 'return self.ctx.oficial_msgNoDisponible(nombreModulo)'
0046     InstructionFlow: end-gen
0046    Source: end-gen
0046    Function: end: 'block-def-msgNoDisponible'
0046  <-Source: end: 'block-def-msgNoDisponible'
0046 <--Class: end: 'block-def-msgNoDisponible'
0046<---Source: end: 'block-def-msgNoDisponible'
0047   Function: end-gen
0047   Function: begin-gen
0047    Variable: begin-gen
0047     Variable: expr: 'tabla'
0047    Variable: end-gen
0047    Variable: begin-gen
0047     Variable: expr: 'campos'
0047    Variable: end-gen
0047    Variable: begin-gen
0047     Variable: expr: 'where'
0047    Variable: end-gen
0047    Variable: begin-gen
0047     Variable: expr: 'listaTablas'
0047    Variable: end-gen
0047    Function: line: 'def ejecutarQry(self, tabla = None, campos = None, where = None, listaTablas = None):'
0047  <-Source: line: 'def ejecutarQry(self, tabla = None, campos = None, where = None, listaTablas = None):'
0047 <--Class: line: 'def ejecutarQry(self, tabla = None, campos = None, where = None, listaTablas = None):'
0047<---Source: line: 'def ejecutarQry(self, tabla = None, campos = None, where = None, listaTablas = None):'
0048    Function: begin: 'block-def-ejecutarQry'
0048  <-Source: begin: 'block-def-ejecutarQry'
0048 <--Class: begin: 'block-def-ejecutarQry'
0048<---Source: begin: 'block-def-ejecutarQry'
0048    Source: begin-gen
0048     InstructionFlow: begin-gen
0048      Value: begin-gen
0048       Member: begin-gen
0048        Identifier: begin-gen
0048         Identifier: expr: 'self'
0048        Identifier: end-gen
0048        Identifier: begin-gen
0048         Identifier: expr: 'ctx'
0048        Identifier: end-gen
0048        FunctionCall: begin-gen
0048         Value: begin-gen
0048          Identifier: begin-gen
0048           Identifier: expr: 'tabla'
0048         <-Value: expr: 'tabla'
0048          Identifier: end-gen
0048         Value: end-gen
0048         Value: begin-gen
0048          Identifier: begin-gen
0048           Identifier: expr: 'campos'
0048         <-Value: expr: 'campos'
0048          Identifier: end-gen
0048         Value: end-gen
0048         Value: begin-gen
0048          Identifier: begin-gen
0048           Identifier: expr: 'where'
0048         <-Value: expr: 'where'
0048          Identifier: end-gen
0048         Value: end-gen
0048         Value: begin-gen
0048          Identifier: begin-gen
0048           Identifier: expr: 'listaTablas'
0048         <-Value: expr: 'listaTablas'
0048          Identifier: end-gen
0048         Value: end-gen
0048         FunctionCall: expr: 'oficial_ejecutarQry(tabla, campos, where, listaTablas)'
0048        FunctionCall: end-gen
0048        Member: expr: 'self.ctx.oficial_ejecutarQry(tabla, campos, where, listaTablas)'
0048      <-Value: expr: 'self.ctx.oficial_ejecutarQry(tabla, campos, where, listaTablas)'
0048       Member: end-gen
0048      Value: end-gen
0048      InstructionFlow: line: 'return self.ctx.oficial_ejecutarQry(tabla, campos, where, listaTablas)'
0048    <-Source: line: 'return self.ctx.oficial_ejecutarQry(tabla, campos, where, listaTablas)'
0048   <--Function: line: 'return self.ctx.oficial_ejecutarQry(tabla, campos, where, listaTablas)'
0048  <---Source: line: 'return self.ctx.oficial_ejecutarQry(tabla, campos, where, listaTablas)'
0048 <----Class: line: 'return self.ctx.oficial_ejecutarQry(tabla, campos, where, listaTablas)'
0048<-----Source: line: 'return self.ctx.oficial_ejecutarQry(tabla, campos, where, listaTablas)'
0049     InstructionFlow: end-gen
0049    Source: end-gen
0049    Function: end: 'block-def-ejecutarQry'
0049  <-Source: end: 'block-def-ejecutarQry'
0049 <--Class: end: 'block-def-ejecutarQry'
0049<---Source: end: 'block-def-ejecutarQry'
0050   Function: end-gen
0050   Function: begin-gen
0050    Variable: begin-gen
0050     Variable: expr: 'fN'
0050    Variable: end-gen
0050    Function: line: 'def valorDefectoEmpresa(self, fN = None):'
0050  <-Source: line: 'def valorDefectoEmpresa(self, fN = None):'
0050 <--Class: line: 'def valorDefectoEmpresa(self, fN = None):'
0050<---Source: line: 'def valorDefectoEmpresa(self, fN = None):'
0051    Function: begin: 'block-def-valorDefectoEmpresa'
0051  <-Source: begin: 'block-def-valorDefectoEmpresa'
0051 <--Class: begin: 'block-def-valorDefectoEmpresa'
0051<---Source: begin: 'block-def-valorDefectoEmpresa'
0051    Source: begin-gen
0051     InstructionFlow: begin-gen
0051      Value: begin-gen
0051       Member: begin-gen
0051        Identifier: begin-gen
0051         Identifier: expr: 'self'
0051        Identifier: end-gen
0051        Identifier: begin-gen
0051         Identifier: expr: 'ctx'
0051        Identifier: end-gen
0051        FunctionCall: begin-gen
0051         Value: begin-gen
0051          Identifier: begin-gen
0051           Identifier: expr: 'fN'
0051         <-Value: expr: 'fN'
0051          Identifier: end-gen
0051         Value: end-gen
0051         FunctionCall: expr: 'oficial_valorDefectoEmpresa(fN)'
0051        FunctionCall: end-gen
0051        Member: expr: 'self.ctx.oficial_valorDefectoEmpresa(fN)'
0051      <-Value: expr: 'self.ctx.oficial_valorDefectoEmpresa(fN)'
0051       Member: end-gen
0051      Value: end-gen
0051      InstructionFlow: line: 'return self.ctx.oficial_valorDefectoEmpresa(fN)'
0051    <-Source: line: 'return self.ctx.oficial_valorDefectoEmpresa(fN)'
0051   <--Function: line: 'return self.ctx.oficial_valorDefectoEmpresa(fN)'
0051  <---Source: line: 'return self.ctx.oficial_valorDefectoEmpresa(fN)'
0051 <----Class: line: 'return self.ctx.oficial_valorDefectoEmpresa(fN)'
0051<-----Source: line: 'return self.ctx.oficial_valorDefectoEmpresa(fN)'
0052     InstructionFlow: end-gen
0052    Source: end-gen
0052    Function: end: 'block-def-valorDefectoEmpresa'
0052  <-Source: end: 'block-def-valorDefectoEmpresa'
0052 <--Class: end: 'block-def-valorDefectoEmpresa'
0052<---Source: end: 'block-def-valorDefectoEmpresa'
0053   Function: end-gen
0053   Function: begin-gen
0053    Variable: begin-gen
0053     Variable: expr: 'numero'
0053    Variable: end-gen
0053    Variable: begin-gen
0053     Variable: expr: 'totalCifras'
0053    Variable: end-gen
0053    Function: line: 'def cerosIzquierda(self, numero = None, totalCifras = None):'
0053  <-Source: line: 'def cerosIzquierda(self, numero = None, totalCifras = None):'
0053 <--Class: line: 'def cerosIzquierda(self, numero = None, totalCifras = None):'
0053<---Source: line: 'def cerosIzquierda(self, numero = None, totalCifras = None):'
0054    Function: begin: 'block-def-cerosIzquierda'
0054  <-Source: begin: 'block-def-cerosIzquierda'
0054 <--Class: begin: 'block-def-cerosIzquierda'
0054<---Source: begin: 'block-def-cerosIzquierda'
0054    Source: begin-gen
0054     InstructionFlow: begin-gen
0054      Value: begin-gen
0054       Member: begin-gen
0054        Identifier: begin-gen
0054         Identifier: expr: 'self'
0054        Identifier: end-gen
0054        Identifier: begin-gen
0054         Identifier: expr: 'ctx'
0054        Identifier: end-gen
0054        FunctionCall: begin-gen
0054         Value: begin-gen
0054          Identifier: begin-gen
0054           Identifier: expr: 'numero'
0054         <-Value: expr: 'numero'
0054          Identifier: end-gen
0054         Value: end-gen
0054         Value: begin-gen
0054          Identifier: begin-gen
0054           Identifier: expr: 'totalCifras'
0054         <-Value: expr: 'totalCifras'
0054          Identifier: end-gen
0054         Value: end-gen
0054         FunctionCall: expr: 'oficial_cerosIzquierda(numero, totalCifras)'
0054        FunctionCall: end-gen
0054        Member: expr: 'self.ctx.oficial_cerosIzquierda(numero, totalCifras)'
0054      <-Value: expr: 'self.ctx.oficial_cerosIzquierda(numero, totalCifras)'
0054       Member: end-gen
0054      Value: end-gen
0054      InstructionFlow: line: 'return self.ctx.oficial_cerosIzquierda(numero, totalCifras)'
0054    <-Source: line: 'return self.ctx.oficial_cerosIzquierda(numero, totalCifras)'
0054   <--Function: line: 'return self.ctx.oficial_cerosIzquierda(numero, totalCifras)'
0054  <---Source: line: 'return self.ctx.oficial_cerosIzquierda(numero, totalCifras)'
0054 <----Class: line: 'return self.ctx.oficial_cerosIzquierda(numero, totalCifras)'
0054<-----Source: line: 'return self.ctx.oficial_cerosIzquierda(numero, totalCifras)'
0055     InstructionFlow: end-gen
0055    Source: end-gen
0055    Function: end: 'block-def-cerosIzquierda'
0055  <-Source: end: 'block-def-cerosIzquierda'
0055 <--Class: end: 'block-def-cerosIzquierda'
0055<---Source: end: 'block-def-cerosIzquierda'
0056   Function: end-gen
0056   Function: begin-gen
0056    Variable: begin-gen
0056     Variable: expr: 'texto'
0056    Variable: end-gen
0056    Variable: begin-gen
0056     Variable: expr: 'totalLongitud'
0056    Variable: end-gen
0056    Function: line: 'def espaciosDerecha(self, texto = None, totalLongitud = None):'
0056  <-Source: line: 'def espaciosDerecha(self, texto = None, totalLongitud = None):'
0056 <--Class: line: 'def espaciosDerecha(self, texto = None, totalLongitud = None):'
0056<---Source: line: 'def espaciosDerecha(self, texto = None, totalLongitud = None):'
0057    Function: begin: 'block-def-espaciosDerecha'
0057  <-Source: begin: 'block-def-espaciosDerecha'
0057 <--Class: begin: 'block-def-espaciosDerecha'
0057<---Source: begin: 'block-def-espaciosDerecha'
0057    Source: begin-gen
0057     InstructionFlow: begin-gen
0057      Value: begin-gen
0057       Member: begin-gen
0057        Identifier: begin-gen
0057         Identifier: expr: 'self'
0057        Identifier: end-gen
0057        Identifier: begin-gen
0057         Identifier: expr: 'ctx'
0057        Identifier: end-gen
0057        FunctionCall: begin-gen
0057         Value: begin-gen
0057          Identifier: begin-gen
0057           Identifier: expr: 'texto'
0057         <-Value: expr: 'texto'
0057          Identifier: end-gen
0057         Value: end-gen
0057         Value: begin-gen
0057          Identifier: begin-gen
0057           Identifier: expr: 'totalLongitud'
0057         <-Value: expr: 'totalLongitud'
0057          Identifier: end-gen
0057         Value: end-gen
0057         FunctionCall: expr: 'oficial_espaciosDerecha(texto, totalLongitud)'
0057        FunctionCall: end-gen
0057        Member: expr: 'self.ctx.oficial_espaciosDerecha(texto, totalLongitud)'
0057      <-Value: expr: 'self.ctx.oficial_espaciosDerecha(texto, totalLongitud)'
0057       Member: end-gen
0057      Value: end-gen
0057      InstructionFlow: line: 'return self.ctx.oficial_espaciosDerecha(texto, totalLongitud)'
0057    <-Source: line: 'return self.ctx.oficial_espaciosDerecha(texto, totalLongitud)'
0057   <--Function: line: 'return self.ctx.oficial_espaciosDerecha(texto, totalLongitud)'
0057  <---Source: line: 'return self.ctx.oficial_espaciosDerecha(texto, totalLongitud)'
0057 <----Class: line: 'return self.ctx.oficial_espaciosDerecha(texto, totalLongitud)'
0057<-----Source: line: 'return self.ctx.oficial_espaciosDerecha(texto, totalLongitud)'
0058     InstructionFlow: end-gen
0058    Source: end-gen
0058    Function: end: 'block-def-espaciosDerecha'
0058  <-Source: end: 'block-def-espaciosDerecha'
0058 <--Class: end: 'block-def-espaciosDerecha'
0058<---Source: end: 'block-def-espaciosDerecha'
0059   Function: end-gen
0059   Function: begin-gen
0059    Function: line: 'def valoresIniciales(self):'
0059  <-Source: line: 'def valoresIniciales(self):'
0059 <--Class: line: 'def valoresIniciales(self):'
0059<---Source: line: 'def valoresIniciales(self):'
0060    Function: begin: 'block-def-valoresIniciales'
0060  <-Source: begin: 'block-def-valoresIniciales'
0060 <--Class: begin: 'block-def-valoresIniciales'
0060<---Source: begin: 'block-def-valoresIniciales'
0060    Source: begin-gen
0060     InstructionFlow: begin-gen
0060      Value: begin-gen
0060       Member: begin-gen
0060        Identifier: begin-gen
0060         Identifier: expr: 'self'
0060        Identifier: end-gen
0060        Identifier: begin-gen
0060         Identifier: expr: 'ctx'
0060        Identifier: end-gen
0060        FunctionCall: begin-gen
0060         FunctionCall: expr: 'oficial_valoresIniciales()'
0060        FunctionCall: end-gen
0060        Member: expr: 'self.ctx.oficial_valoresIniciales()'
0060      <-Value: expr: 'self.ctx.oficial_valoresIniciales()'
0060       Member: end-gen
0060      Value: end-gen
0060      InstructionFlow: line: 'return self.ctx.oficial_valoresIniciales()'
0060    <-Source: line: 'return self.ctx.oficial_valoresIniciales()'
0060   <--Function: line: 'return self.ctx.oficial_valoresIniciales()'
0060  <---Source: line: 'return self.ctx.oficial_valoresIniciales()'
0060 <----Class: line: 'return self.ctx.oficial_valoresIniciales()'
0060<-----Source: line: 'return self.ctx.oficial_valoresIniciales()'
0061     InstructionFlow: end-gen
0061    Source: end-gen
0061    Function: end: 'block-def-valoresIniciales'
0061  <-Source: end: 'block-def-valoresIniciales'
0061 <--Class: end: 'block-def-valoresIniciales'
0061<---Source: end: 'block-def-valoresIniciales'
0062   Function: end-gen
0062   Function: begin-gen
0062    Variable: begin-gen
0062     Variable: expr: 'tablas'
0062    Variable: end-gen
0062    Variable: begin-gen
0062     Variable: expr: 'select'
0062    Variable: end-gen
0062    Variable: begin-gen
0062     Variable: expr: 'from_'
0062    Variable: end-gen
0062    Variable: begin-gen
0062     Variable: expr: 'where'
0062    Variable: end-gen
0062    Function: line: 'def valorQuery(self, tablas = None, select = None, from_ = None, where = None):'
0062  <-Source: line: 'def valorQuery(self, tablas = None, select = None, from_ = None, where = None):'
0062 <--Class: line: 'def valorQuery(self, tablas = None, select = None, from_ = None, where = None):'
0062<---Source: line: 'def valorQuery(self, tablas = None, select = None, from_ = None, where = None):'
0063    Function: begin: 'block-def-valorQuery'
0063  <-Source: begin: 'block-def-valorQuery'
0063 <--Class: begin: 'block-def-valorQuery'
0063<---Source: begin: 'block-def-valorQuery'
0063    Source: begin-gen
0063     InstructionFlow: begin-gen
0063      Value: begin-gen
0063       Member: begin-gen
0063        Identifier: begin-gen
0063         Identifier: expr: 'self'
0063        Identifier: end-gen
0063        Identifier: begin-gen
0063         Identifier: expr: 'ctx'
0063        Identifier: end-gen
0063        FunctionCall: begin-gen
0063         Value: begin-gen
0063          Identifier: begin-gen
0063           Identifier: expr: 'tablas'
0063         <-Value: expr: 'tablas'
0063          Identifier: end-gen
0063         Value: end-gen
0063         Value: begin-gen
0063          Identifier: begin-gen
0063           Identifier: expr: 'select'
0063         <-Value: expr: 'select'
0063          Identifier: end-gen
0063         Value: end-gen
0063         Value: begin-gen
0063          Identifier: begin-gen
0063           Identifier: expr: 'from_'
0063         <-Value: expr: 'from_'
0063          Identifier: end-gen
0063         Value: end-gen
0063         Value: begin-gen
0063          Identifier: begin-gen
0063           Identifier: expr: 'where'
0063         <-Value: expr: 'where'
0063          Identifier: end-gen
0063         Value: end-gen
0063         FunctionCall: expr: 'oficial_valorQuery(tablas, select, from_, where)'
0063        FunctionCall: end-gen
0063        Member: expr: 'self.ctx.oficial_valorQuery(tablas, select, from_, where)'
0063      <-Value: expr: 'self.ctx.oficial_valorQuery(tablas, select, from_, where)'
0063       Member: end-gen
0063      Value: end-gen
0063      InstructionFlow: line: 'return self.ctx.oficial_valorQuery(tablas, select, from_, where)'
0063    <-Source: line: 'return self.ctx.oficial_valorQuery(tablas, select, from_, where)'
0063   <--Function: line: 'return self.ctx.oficial_valorQuery(tablas, select, from_, where)'
0063  <---Source: line: 'return self.ctx.oficial_valorQuery(tablas, select, from_, where)'
0063 <----Class: line: 'return self.ctx.oficial_valorQuery(tablas, select, from_, where)'
0063<-----Source: line: 'return self.ctx.oficial_valorQuery(tablas, select, from_, where)'
0064     InstructionFlow: end-gen
0064    Source: end-gen
0064    Function: end: 'block-def-valorQuery'
0064  <-Source: end: 'block-def-valorQuery'
0064 <--Class: end: 'block-def-valorQuery'
0064<---Source: end: 'block-def-valorQuery'
0065   Function: end-gen
0065   Function: begin-gen
0065    Variable: begin-gen
0065     Variable: expr: 'codSubcuenta'
0065    Variable: end-gen
0065    Variable: begin-gen
0065     Variable: expr: 'descripcion'
0065    Variable: end-gen
0065    Variable: begin-gen
0065     Variable: expr: 'idCuentaEsp'
0065    Variable: end-gen
0065    Variable: begin-gen
0065     Variable: expr: 'codEjercicio'
0065    Variable: end-gen
0065    Function: line: 'def crearSubcuenta(self, codSubcuenta = None, descripcion = None, idCuentaEsp = None, codEjercicio = None):'
0065  <-Source: line: 'def crearSubcuenta(self, codSubcuenta = None, descripcion = None, idCuentaEsp = None, codEjercicio = None):'
0065 <--Class: line: 'def crearSubcuenta(self, codSubcuenta = None, descripcion = None, idCuentaEsp = None, codEjercicio = None):'
0065<---Source: line: 'def crearSubcuenta(self, codSubcuenta = None, descripcion = None, idCuentaEsp = None, codEjercicio = None):'
0066    Function: begin: 'block-def-crearSubcuenta'
0066  <-Source: begin: 'block-def-crearSubcuenta'
0066 <--Class: begin: 'block-def-crearSubcuenta'
0066<---Source: begin: 'block-def-crearSubcuenta'
0066    Source: begin-gen
0066     InstructionFlow: begin-gen
0066      Value: begin-gen
0066       Member: begin-gen
0066        Identifier: begin-gen
0066         Identifier: expr: 'self'
0066        Identifier: end-gen
0066        Identifier: begin-gen
0066         Identifier: expr: 'ctx'
0066        Identifier: end-gen
0066        FunctionCall: begin-gen
0066         Value: begin-gen
0066          Identifier: begin-gen
0066           Identifier: expr: 'codSubcuenta'
0066         <-Value: expr: 'codSubcuenta'
0066          Identifier: end-gen
0066         Value: end-gen
0066         Value: begin-gen
0066          Identifier: begin-gen
0066           Identifier: expr: 'descripcion'
0066         <-Value: expr: 'descripcion'
0066          Identifier: end-gen
0066         Value: end-gen
0066         Value: begin-gen
0066          Identifier: begin-gen
0066           Identifier: expr: 'idCuentaEsp'
0066         <-Value: expr: 'idCuentaEsp'
0066          Identifier: end-gen
0066         Value: end-gen
0066         Value: begin-gen
0066          Identifier: begin-gen
0066           Identifier: expr: 'codEjercicio'
0066         <-Value: expr: 'codEjercicio'
0066          Identifier: end-gen
0066         Value: end-gen
0066         FunctionCall: expr: 'oficial_crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0066        FunctionCall: end-gen
0066        Member: expr: 'self.ctx.oficial_crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0066      <-Value: expr: 'self.ctx.oficial_crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0066       Member: end-gen
0066      Value: end-gen
0066      InstructionFlow: line: 'return self.ctx.oficial_crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0066    <-Source: line: 'return self.ctx.oficial_crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0066   <--Function: line: 'return self.ctx.oficial_crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0066  <---Source: line: 'return self.ctx.oficial_crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0066 <----Class: line: 'return self.ctx.oficial_crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0066<-----Source: line: 'return self.ctx.oficial_crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0067     InstructionFlow: end-gen
0067    Source: end-gen
0067    Function: end: 'block-def-crearSubcuenta'
0067  <-Source: end: 'block-def-crearSubcuenta'
0067 <--Class: end: 'block-def-crearSubcuenta'
0067<---Source: end: 'block-def-crearSubcuenta'
0068   Function: end-gen
0068   Function: begin-gen
0068    Variable: begin-gen
0068     Variable: expr: 'idSubcuenta'
0068    Variable: end-gen
0068    Function: line: 'def borrarSubcuenta(self, idSubcuenta = None):'
0068  <-Source: line: 'def borrarSubcuenta(self, idSubcuenta = None):'
0068 <--Class: line: 'def borrarSubcuenta(self, idSubcuenta = None):'
0068<---Source: line: 'def borrarSubcuenta(self, idSubcuenta = None):'
0069    Function: begin: 'block-def-borrarSubcuenta'
0069  <-Source: begin: 'block-def-borrarSubcuenta'
0069 <--Class: begin: 'block-def-borrarSubcuenta'
0069<---Source: begin: 'block-def-borrarSubcuenta'
0069    Source: begin-gen
0069     InstructionFlow: begin-gen
0069      Value: begin-gen
0069       Member: begin-gen
0069        Identifier: begin-gen
0069         Identifier: expr: 'self'
0069        Identifier: end-gen
0069        Identifier: begin-gen
0069         Identifier: expr: 'ctx'
0069        Identifier: end-gen
0069        FunctionCall: begin-gen
0069         Value: begin-gen
0069          Identifier: begin-gen
0069           Identifier: expr: 'idSubcuenta'
0069         <-Value: expr: 'idSubcuenta'
0069          Identifier: end-gen
0069         Value: end-gen
0069         FunctionCall: expr: 'oficial_borrarSubcuenta(idSubcuenta)'
0069        FunctionCall: end-gen
0069        Member: expr: 'self.ctx.oficial_borrarSubcuenta(idSubcuenta)'
0069      <-Value: expr: 'self.ctx.oficial_borrarSubcuenta(idSubcuenta)'
0069       Member: end-gen
0069      Value: end-gen
0069      InstructionFlow: line: 'return self.ctx.oficial_borrarSubcuenta(idSubcuenta)'
0069    <-Source: line: 'return self.ctx.oficial_borrarSubcuenta(idSubcuenta)'
0069   <--Function: line: 'return self.ctx.oficial_borrarSubcuenta(idSubcuenta)'
0069  <---Source: line: 'return self.ctx.oficial_borrarSubcuenta(idSubcuenta)'
0069 <----Class: line: 'return self.ctx.oficial_borrarSubcuenta(idSubcuenta)'
0069<-----Source: line: 'return self.ctx.oficial_borrarSubcuenta(idSubcuenta)'
0070     InstructionFlow: end-gen
0070    Source: end-gen
0070    Function: end: 'block-def-borrarSubcuenta'
0070  <-Source: end: 'block-def-borrarSubcuenta'
0070 <--Class: end: 'block-def-borrarSubcuenta'
0070<---Source: end: 'block-def-borrarSubcuenta'
0071   Function: end-gen
0071   Function: begin-gen
0071    Function: line: 'def ejercicioActual(self):'
0071  <-Source: line: 'def ejercicioActual(self):'
0071 <--Class: line: 'def ejercicioActual(self):'
0071<---Source: line: 'def ejercicioActual(self):'
0072    Function: begin: 'block-def-ejercicioActual'
0072  <-Source: begin: 'block-def-ejercicioActual'
0072 <--Class: begin: 'block-def-ejercicioActual'
0072<---Source: begin: 'block-def-ejercicioActual'
0072    Source: begin-gen
0072     InstructionFlow: begin-gen
0072      Value: begin-gen
0072       Member: begin-gen
0072        Identifier: begin-gen
0072         Identifier: expr: 'self'
0072        Identifier: end-gen
0072        Identifier: begin-gen
0072         Identifier: expr: 'ctx'
0072        Identifier: end-gen
0072        FunctionCall: begin-gen
0072         FunctionCall: expr: 'oficial_ejercicioActual()'
0072        FunctionCall: end-gen
0072        Member: expr: 'self.ctx.oficial_ejercicioActual()'
0072      <-Value: expr: 'self.ctx.oficial_ejercicioActual()'
0072       Member: end-gen
0072      Value: end-gen
0072      InstructionFlow: line: 'return self.ctx.oficial_ejercicioActual()'
0072    <-Source: line: 'return self.ctx.oficial_ejercicioActual()'
0072   <--Function: line: 'return self.ctx.oficial_ejercicioActual()'
0072  <---Source: line: 'return self.ctx.oficial_ejercicioActual()'
0072 <----Class: line: 'return self.ctx.oficial_ejercicioActual()'
0072<-----Source: line: 'return self.ctx.oficial_ejercicioActual()'
0073     InstructionFlow: end-gen
0073    Source: end-gen
0073    Function: end: 'block-def-ejercicioActual'
0073  <-Source: end: 'block-def-ejercicioActual'
0073 <--Class: end: 'block-def-ejercicioActual'
0073<---Source: end: 'block-def-ejercicioActual'
0074   Function: end-gen
0074   Function: begin-gen
0074    Variable: begin-gen
0074     Variable: expr: 'codEjercicio'
0074    Variable: end-gen
0074    Function: line: 'def cambiarEjercicioActual(self, codEjercicio = None):'
0074  <-Source: line: 'def cambiarEjercicioActual(self, codEjercicio = None):'
0074 <--Class: line: 'def cambiarEjercicioActual(self, codEjercicio = None):'
0074<---Source: line: 'def cambiarEjercicioActual(self, codEjercicio = None):'
0075    Function: begin: 'block-def-cambiarEjercicioActual'
0075  <-Source: begin: 'block-def-cambiarEjercicioActual'
0075 <--Class: begin: 'block-def-cambiarEjercicioActual'
0075<---Source: begin: 'block-def-cambiarEjercicioActual'
0075    Source: begin-gen
0075     InstructionFlow: begin-gen
0075      Value: begin-gen
0075       Member: begin-gen
0075        Identifier: begin-gen
0075         Identifier: expr: 'self'
0075        Identifier: end-gen
0075        Identifier: begin-gen
0075         Identifier: expr: 'ctx'
0075        Identifier: end-gen
0075        FunctionCall: begin-gen
0075         Value: begin-gen
0075          Identifier: begin-gen
0075           Identifier: expr: 'codEjercicio'
0075         <-Value: expr: 'codEjercicio'
0075          Identifier: end-gen
0075         Value: end-gen
0075         FunctionCall: expr: 'oficial_cambiarEjercicioActual(codEjercicio)'
0075        FunctionCall: end-gen
0075        Member: expr: 'self.ctx.oficial_cambiarEjercicioActual(codEjercicio)'
0075      <-Value: expr: 'self.ctx.oficial_cambiarEjercicioActual(codEjercicio)'
0075       Member: end-gen
0075      Value: end-gen
0075      InstructionFlow: line: 'return self.ctx.oficial_cambiarEjercicioActual(codEjercicio)'
0075    <-Source: line: 'return self.ctx.oficial_cambiarEjercicioActual(codEjercicio)'
0075   <--Function: line: 'return self.ctx.oficial_cambiarEjercicioActual(codEjercicio)'
0075  <---Source: line: 'return self.ctx.oficial_cambiarEjercicioActual(codEjercicio)'
0075 <----Class: line: 'return self.ctx.oficial_cambiarEjercicioActual(codEjercicio)'
0075<-----Source: line: 'return self.ctx.oficial_cambiarEjercicioActual(codEjercicio)'
0076     InstructionFlow: end-gen
0076    Source: end-gen
0076    Function: end: 'block-def-cambiarEjercicioActual'
0076  <-Source: end: 'block-def-cambiarEjercicioActual'
0076 <--Class: end: 'block-def-cambiarEjercicioActual'
0076<---Source: end: 'block-def-cambiarEjercicioActual'
0077   Function: end-gen
0077   Function: begin-gen
0077    Variable: begin-gen
0077     Variable: expr: 'codCliente'
0077    Variable: end-gen
0077    Variable: begin-gen
0077     Variable: expr: 'valoresDefecto'
0077    Variable: end-gen
0077    Function: line: 'def datosCtaCliente(self, codCliente = None, valoresDefecto = None):'
0077  <-Source: line: 'def datosCtaCliente(self, codCliente = None, valoresDefecto = None):'
0077 <--Class: line: 'def datosCtaCliente(self, codCliente = None, valoresDefecto = None):'
0077<---Source: line: 'def datosCtaCliente(self, codCliente = None, valoresDefecto = None):'
0078    Function: begin: 'block-def-datosCtaCliente'
0078  <-Source: begin: 'block-def-datosCtaCliente'
0078 <--Class: begin: 'block-def-datosCtaCliente'
0078<---Source: begin: 'block-def-datosCtaCliente'
0078    Source: begin-gen
0078     InstructionFlow: begin-gen
0078      Value: begin-gen
0078       Member: begin-gen
0078        Identifier: begin-gen
0078         Identifier: expr: 'self'
0078        Identifier: end-gen
0078        Identifier: begin-gen
0078         Identifier: expr: 'ctx'
0078        Identifier: end-gen
0078        FunctionCall: begin-gen
0078         Value: begin-gen
0078          Identifier: begin-gen
0078           Identifier: expr: 'codCliente'
0078         <-Value: expr: 'codCliente'
0078          Identifier: end-gen
0078         Value: end-gen
0078         Value: begin-gen
0078          Identifier: begin-gen
0078           Identifier: expr: 'valoresDefecto'
0078         <-Value: expr: 'valoresDefecto'
0078          Identifier: end-gen
0078         Value: end-gen
0078         FunctionCall: expr: 'oficial_datosCtaCliente(codCliente, valoresDefecto)'
0078        FunctionCall: end-gen
0078        Member: expr: 'self.ctx.oficial_datosCtaCliente(codCliente, valoresDefecto)'
0078      <-Value: expr: 'self.ctx.oficial_datosCtaCliente(codCliente, valoresDefecto)'
0078       Member: end-gen
0078      Value: end-gen
0078      InstructionFlow: line: 'return self.ctx.oficial_datosCtaCliente(codCliente, valoresDefecto)'
0078    <-Source: line: 'return self.ctx.oficial_datosCtaCliente(codCliente, valoresDefecto)'
0078   <--Function: line: 'return self.ctx.oficial_datosCtaCliente(codCliente, valoresDefecto)'
0078  <---Source: line: 'return self.ctx.oficial_datosCtaCliente(codCliente, valoresDefecto)'
0078 <----Class: line: 'return self.ctx.oficial_datosCtaCliente(codCliente, valoresDefecto)'
0078<-----Source: line: 'return self.ctx.oficial_datosCtaCliente(codCliente, valoresDefecto)'
0079     InstructionFlow: end-gen
0079    Source: end-gen
0079    Function: end: 'block-def-datosCtaCliente'
0079  <-Source: end: 'block-def-datosCtaCliente'
0079 <--Class: end: 'block-def-datosCtaCliente'
0079<---Source: end: 'block-def-datosCtaCliente'
0080   Function: end-gen
0080   Function: begin-gen
0080    Variable: begin-gen
0080     Variable: expr: 'codProveedor'
0080    Variable: end-gen
0080    Variable: begin-gen
0080     Variable: expr: 'valoresDefecto'
0080    Variable: end-gen
0080    Function: line: 'def datosCtaProveedor(self, codProveedor = None, valoresDefecto = None):'
0080  <-Source: line: 'def datosCtaProveedor(self, codProveedor = None, valoresDefecto = None):'
0080 <--Class: line: 'def datosCtaProveedor(self, codProveedor = None, valoresDefecto = None):'
0080<---Source: line: 'def datosCtaProveedor(self, codProveedor = None, valoresDefecto = None):'
0081    Function: begin: 'block-def-datosCtaProveedor'
0081  <-Source: begin: 'block-def-datosCtaProveedor'
0081 <--Class: begin: 'block-def-datosCtaProveedor'
0081<---Source: begin: 'block-def-datosCtaProveedor'
0081    Source: begin-gen
0081     InstructionFlow: begin-gen
0081      Value: begin-gen
0081       Member: begin-gen
0081        Identifier: begin-gen
0081         Identifier: expr: 'self'
0081        Identifier: end-gen
0081        Identifier: begin-gen
0081         Identifier: expr: 'ctx'
0081        Identifier: end-gen
0081        FunctionCall: begin-gen
0081         Value: begin-gen
0081          Identifier: begin-gen
0081           Identifier: expr: 'codProveedor'
0081         <-Value: expr: 'codProveedor'
0081          Identifier: end-gen
0081         Value: end-gen
0081         Value: begin-gen
0081          Identifier: begin-gen
0081           Identifier: expr: 'valoresDefecto'
0081         <-Value: expr: 'valoresDefecto'
0081          Identifier: end-gen
0081         Value: end-gen
0081         FunctionCall: expr: 'oficial_datosCtaProveedor(codProveedor, valoresDefecto)'
0081        FunctionCall: end-gen
0081        Member: expr: 'self.ctx.oficial_datosCtaProveedor(codProveedor, valoresDefecto)'
0081      <-Value: expr: 'self.ctx.oficial_datosCtaProveedor(codProveedor, valoresDefecto)'
0081       Member: end-gen
0081      Value: end-gen
0081      InstructionFlow: line: 'return self.ctx.oficial_datosCtaProveedor(codProveedor, valoresDefecto)'
0081    <-Source: line: 'return self.ctx.oficial_datosCtaProveedor(codProveedor, valoresDefecto)'
0081   <--Function: line: 'return self.ctx.oficial_datosCtaProveedor(codProveedor, valoresDefecto)'
0081  <---Source: line: 'return self.ctx.oficial_datosCtaProveedor(codProveedor, valoresDefecto)'
0081 <----Class: line: 'return self.ctx.oficial_datosCtaProveedor(codProveedor, valoresDefecto)'
0081<-----Source: line: 'return self.ctx.oficial_datosCtaProveedor(codProveedor, valoresDefecto)'
0082     InstructionFlow: end-gen
0082    Source: end-gen
0082    Function: end: 'block-def-datosCtaProveedor'
0082  <-Source: end: 'block-def-datosCtaProveedor'
0082 <--Class: end: 'block-def-datosCtaProveedor'
0082<---Source: end: 'block-def-datosCtaProveedor'
0083   Function: end-gen
0083   Function: begin-gen
0083    Variable: begin-gen
0083     Variable: expr: 'codIntervalo'
0083    Variable: end-gen
0083    Function: line: 'def calcularIntervalo(self, codIntervalo = None):'
0083  <-Source: line: 'def calcularIntervalo(self, codIntervalo = None):'
0083 <--Class: line: 'def calcularIntervalo(self, codIntervalo = None):'
0083<---Source: line: 'def calcularIntervalo(self, codIntervalo = None):'
0084    Function: begin: 'block-def-calcularIntervalo'
0084  <-Source: begin: 'block-def-calcularIntervalo'
0084 <--Class: begin: 'block-def-calcularIntervalo'
0084<---Source: begin: 'block-def-calcularIntervalo'
0084    Source: begin-gen
0084     InstructionFlow: begin-gen
0084      Value: begin-gen
0084       Member: begin-gen
0084        Identifier: begin-gen
0084         Identifier: expr: 'self'
0084        Identifier: end-gen
0084        Identifier: begin-gen
0084         Identifier: expr: 'ctx'
0084        Identifier: end-gen
0084        FunctionCall: begin-gen
0084         Value: begin-gen
0084          Identifier: begin-gen
0084           Identifier: expr: 'codIntervalo'
0084         <-Value: expr: 'codIntervalo'
0084          Identifier: end-gen
0084         Value: end-gen
0084         FunctionCall: expr: 'oficial_calcularIntervalo(codIntervalo)'
0084        FunctionCall: end-gen
0084        Member: expr: 'self.ctx.oficial_calcularIntervalo(codIntervalo)'
0084      <-Value: expr: 'self.ctx.oficial_calcularIntervalo(codIntervalo)'
0084       Member: end-gen
0084      Value: end-gen
0084      InstructionFlow: line: 'return self.ctx.oficial_calcularIntervalo(codIntervalo)'
0084    <-Source: line: 'return self.ctx.oficial_calcularIntervalo(codIntervalo)'
0084   <--Function: line: 'return self.ctx.oficial_calcularIntervalo(codIntervalo)'
0084  <---Source: line: 'return self.ctx.oficial_calcularIntervalo(codIntervalo)'
0084 <----Class: line: 'return self.ctx.oficial_calcularIntervalo(codIntervalo)'
0084<-----Source: line: 'return self.ctx.oficial_calcularIntervalo(codIntervalo)'
0085     InstructionFlow: end-gen
0085    Source: end-gen
0085    Function: end: 'block-def-calcularIntervalo'
0085  <-Source: end: 'block-def-calcularIntervalo'
0085 <--Class: end: 'block-def-calcularIntervalo'
0085<---Source: end: 'block-def-calcularIntervalo'
0086   Function: end-gen
0086   Function: begin-gen
0086    Variable: begin-gen
0086     Variable: expr: 'codSubcuenta'
0086    Variable: end-gen
0086    Variable: begin-gen
0086     Variable: expr: 'idSubcuenta'
0086    Variable: end-gen
0086    Variable: begin-gen
0086     Variable: expr: 'codCliente'
0086    Variable: end-gen
0086    Variable: begin-gen
0086     Variable: expr: 'codEjercicio'
0086    Variable: end-gen
0086    Function: line: 'def crearSubcuentaCli(self, codSubcuenta = None, idSubcuenta = None, codCliente = None, codEjercicio = None):'
0086  <-Source: line: 'def crearSubcuentaCli(self, codSubcuenta = None, idSubcuenta = None, codCliente = None, codEjercicio = None):'
0086 <--Class: line: 'def crearSubcuentaCli(self, codSubcuenta = None, idSubcuenta = None, codCliente = None, codEjercicio = None):'
0086<---Source: line: 'def crearSubcuentaCli(self, codSubcuenta = None, idSubcuenta = None, codCliente = None, codEjercicio = None):'
0087    Function: begin: 'block-def-crearSubcuentaCli'
0087  <-Source: begin: 'block-def-crearSubcuentaCli'
0087 <--Class: begin: 'block-def-crearSubcuentaCli'
0087<---Source: begin: 'block-def-crearSubcuentaCli'
0087    Source: begin-gen
0087     InstructionFlow: begin-gen
0087      Value: begin-gen
0087       Member: begin-gen
0087        Identifier: begin-gen
0087         Identifier: expr: 'self'
0087        Identifier: end-gen
0087        Identifier: begin-gen
0087         Identifier: expr: 'ctx'
0087        Identifier: end-gen
0087        FunctionCall: begin-gen
0087         Value: begin-gen
0087          Identifier: begin-gen
0087           Identifier: expr: 'codSubcuenta'
0087         <-Value: expr: 'codSubcuenta'
0087          Identifier: end-gen
0087         Value: end-gen
0087         Value: begin-gen
0087          Identifier: begin-gen
0087           Identifier: expr: 'idSubcuenta'
0087         <-Value: expr: 'idSubcuenta'
0087          Identifier: end-gen
0087         Value: end-gen
0087         Value: begin-gen
0087          Identifier: begin-gen
0087           Identifier: expr: 'codCliente'
0087         <-Value: expr: 'codCliente'
0087          Identifier: end-gen
0087         Value: end-gen
0087         Value: begin-gen
0087          Identifier: begin-gen
0087           Identifier: expr: 'codEjercicio'
0087         <-Value: expr: 'codEjercicio'
0087          Identifier: end-gen
0087         Value: end-gen
0087         FunctionCall: expr: 'oficial_crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0087        FunctionCall: end-gen
0087        Member: expr: 'self.ctx.oficial_crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0087      <-Value: expr: 'self.ctx.oficial_crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0087       Member: end-gen
0087      Value: end-gen
0087      InstructionFlow: line: 'return self.ctx.oficial_crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0087    <-Source: line: 'return self.ctx.oficial_crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0087   <--Function: line: 'return self.ctx.oficial_crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0087  <---Source: line: 'return self.ctx.oficial_crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0087 <----Class: line: 'return self.ctx.oficial_crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0087<-----Source: line: 'return self.ctx.oficial_crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0088     InstructionFlow: end-gen
0088    Source: end-gen
0088    Function: end: 'block-def-crearSubcuentaCli'
0088  <-Source: end: 'block-def-crearSubcuentaCli'
0088 <--Class: end: 'block-def-crearSubcuentaCli'
0088<---Source: end: 'block-def-crearSubcuentaCli'
0089   Function: end-gen
0089   Function: begin-gen
0089    Variable: begin-gen
0089     Variable: expr: 'codCliente'
0089    Variable: end-gen
0089    Variable: begin-gen
0089     Variable: expr: 'codSubcuenta'
0089    Variable: end-gen
0089    Variable: begin-gen
0089     Variable: expr: 'nombre'
0089    Variable: end-gen
0089    Function: line: 'def rellenarSubcuentasCli(self, codCliente = None, codSubcuenta = None, nombre = None):'
0089  <-Source: line: 'def rellenarSubcuentasCli(self, codCliente = None, codSubcuenta = None, nombre = None):'
0089 <--Class: line: 'def rellenarSubcuentasCli(self, codCliente = None, codSubcuenta = None, nombre = None):'
0089<---Source: line: 'def rellenarSubcuentasCli(self, codCliente = None, codSubcuenta = None, nombre = None):'
0090    Function: begin: 'block-def-rellenarSubcuentasCli'
0090  <-Source: begin: 'block-def-rellenarSubcuentasCli'
0090 <--Class: begin: 'block-def-rellenarSubcuentasCli'
0090<---Source: begin: 'block-def-rellenarSubcuentasCli'
0090    Source: begin-gen
0090     InstructionFlow: begin-gen
0090      Value: begin-gen
0090       Member: begin-gen
0090        Identifier: begin-gen
0090         Identifier: expr: 'self'
0090        Identifier: end-gen
0090        Identifier: begin-gen
0090         Identifier: expr: 'ctx'
0090        Identifier: end-gen
0090        FunctionCall: begin-gen
0090         Value: begin-gen
0090          Identifier: begin-gen
0090           Identifier: expr: 'codCliente'
0090         <-Value: expr: 'codCliente'
0090          Identifier: end-gen
0090         Value: end-gen
0090         Value: begin-gen
0090          Identifier: begin-gen
0090           Identifier: expr: 'codSubcuenta'
0090         <-Value: expr: 'codSubcuenta'
0090          Identifier: end-gen
0090         Value: end-gen
0090         Value: begin-gen
0090          Identifier: begin-gen
0090           Identifier: expr: 'nombre'
0090         <-Value: expr: 'nombre'
0090          Identifier: end-gen
0090         Value: end-gen
0090         FunctionCall: expr: 'oficial_rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0090        FunctionCall: end-gen
0090        Member: expr: 'self.ctx.oficial_rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0090      <-Value: expr: 'self.ctx.oficial_rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0090       Member: end-gen
0090      Value: end-gen
0090      InstructionFlow: line: 'return self.ctx.oficial_rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0090    <-Source: line: 'return self.ctx.oficial_rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0090   <--Function: line: 'return self.ctx.oficial_rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0090  <---Source: line: 'return self.ctx.oficial_rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0090 <----Class: line: 'return self.ctx.oficial_rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0090<-----Source: line: 'return self.ctx.oficial_rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0091     InstructionFlow: end-gen
0091    Source: end-gen
0091    Function: end: 'block-def-rellenarSubcuentasCli'
0091  <-Source: end: 'block-def-rellenarSubcuentasCli'
0091 <--Class: end: 'block-def-rellenarSubcuentasCli'
0091<---Source: end: 'block-def-rellenarSubcuentasCli'
0092   Function: end-gen
0092   Function: begin-gen
0092    Variable: begin-gen
0092     Variable: expr: 'codSubcuenta'
0092    Variable: end-gen
0092    Variable: begin-gen
0092     Variable: expr: 'idSubcuenta'
0092    Variable: end-gen
0092    Variable: begin-gen
0092     Variable: expr: 'codProveedor'
0092    Variable: end-gen
0092    Variable: begin-gen
0092     Variable: expr: 'codEjercicio'
0092    Variable: end-gen
0092    Function: line: 'def crearSubcuentaProv(self, codSubcuenta = None, idSubcuenta = None, codProveedor = None, codEjercicio = None):'
0092  <-Source: line: 'def crearSubcuentaProv(self, codSubcuenta = None, idSubcuenta = None, codProveedor = None, codEjercicio = None):'
0092 <--Class: line: 'def crearSubcuentaProv(self, codSubcuenta = None, idSubcuenta = None, codProveedor = None, codEjercicio = None):'
0092<---Source: line: 'def crearSubcuentaProv(self, codSubcuenta = None, idSubcuenta = None, codProveedor = None, codEjercicio = None):'
0093    Function: begin: 'block-def-crearSubcuentaProv'
0093  <-Source: begin: 'block-def-crearSubcuentaProv'
0093 <--Class: begin: 'block-def-crearSubcuentaProv'
0093<---Source: begin: 'block-def-crearSubcuentaProv'
0093    Source: begin-gen
0093     InstructionFlow: begin-gen
0093      Value: begin-gen
0093       Member: begin-gen
0093        Identifier: begin-gen
0093         Identifier: expr: 'self'
0093        Identifier: end-gen
0093        Identifier: begin-gen
0093         Identifier: expr: 'ctx'
0093        Identifier: end-gen
0093        FunctionCall: begin-gen
0093         Value: begin-gen
0093          Identifier: begin-gen
0093           Identifier: expr: 'codSubcuenta'
0093         <-Value: expr: 'codSubcuenta'
0093          Identifier: end-gen
0093         Value: end-gen
0093         Value: begin-gen
0093          Identifier: begin-gen
0093           Identifier: expr: 'idSubcuenta'
0093         <-Value: expr: 'idSubcuenta'
0093          Identifier: end-gen
0093         Value: end-gen
0093         Value: begin-gen
0093          Identifier: begin-gen
0093           Identifier: expr: 'codProveedor'
0093         <-Value: expr: 'codProveedor'
0093          Identifier: end-gen
0093         Value: end-gen
0093         Value: begin-gen
0093          Identifier: begin-gen
0093           Identifier: expr: 'codEjercicio'
0093         <-Value: expr: 'codEjercicio'
0093          Identifier: end-gen
0093         Value: end-gen
0093         FunctionCall: expr: 'oficial_crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0093        FunctionCall: end-gen
0093        Member: expr: 'self.ctx.oficial_crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0093      <-Value: expr: 'self.ctx.oficial_crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0093       Member: end-gen
0093      Value: end-gen
0093      InstructionFlow: line: 'return self.ctx.oficial_crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0093    <-Source: line: 'return self.ctx.oficial_crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0093   <--Function: line: 'return self.ctx.oficial_crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0093  <---Source: line: 'return self.ctx.oficial_crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0093 <----Class: line: 'return self.ctx.oficial_crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0093<-----Source: line: 'return self.ctx.oficial_crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0094     InstructionFlow: end-gen
0094    Source: end-gen
0094    Function: end: 'block-def-crearSubcuentaProv'
0094  <-Source: end: 'block-def-crearSubcuentaProv'
0094 <--Class: end: 'block-def-crearSubcuentaProv'
0094<---Source: end: 'block-def-crearSubcuentaProv'
0095   Function: end-gen
0095   Function: begin-gen
0095    Variable: begin-gen
0095     Variable: expr: 'codProveedor'
0095    Variable: end-gen
0095    Variable: begin-gen
0095     Variable: expr: 'codSubcuenta'
0095    Variable: end-gen
0095    Variable: begin-gen
0095     Variable: expr: 'nombre'
0095    Variable: end-gen
0095    Function: line: 'def rellenarSubcuentasProv(self, codProveedor = None, codSubcuenta = None, nombre = None):'
0095  <-Source: line: 'def rellenarSubcuentasProv(self, codProveedor = None, codSubcuenta = None, nombre = None):'
0095 <--Class: line: 'def rellenarSubcuentasProv(self, codProveedor = None, codSubcuenta = None, nombre = None):'
0095<---Source: line: 'def rellenarSubcuentasProv(self, codProveedor = None, codSubcuenta = None, nombre = None):'
0096    Function: begin: 'block-def-rellenarSubcuentasProv'
0096  <-Source: begin: 'block-def-rellenarSubcuentasProv'
0096 <--Class: begin: 'block-def-rellenarSubcuentasProv'
0096<---Source: begin: 'block-def-rellenarSubcuentasProv'
0096    Source: begin-gen
0096     InstructionFlow: begin-gen
0096      Value: begin-gen
0096       Member: begin-gen
0096        Identifier: begin-gen
0096         Identifier: expr: 'self'
0096        Identifier: end-gen
0096        Identifier: begin-gen
0096         Identifier: expr: 'ctx'
0096        Identifier: end-gen
0096        FunctionCall: begin-gen
0096         Value: begin-gen
0096          Identifier: begin-gen
0096           Identifier: expr: 'codProveedor'
0096         <-Value: expr: 'codProveedor'
0096          Identifier: end-gen
0096         Value: end-gen
0096         Value: begin-gen
0096          Identifier: begin-gen
0096           Identifier: expr: 'codSubcuenta'
0096         <-Value: expr: 'codSubcuenta'
0096          Identifier: end-gen
0096         Value: end-gen
0096         Value: begin-gen
0096          Identifier: begin-gen
0096           Identifier: expr: 'nombre'
0096         <-Value: expr: 'nombre'
0096          Identifier: end-gen
0096         Value: end-gen
0096         FunctionCall: expr: 'oficial_rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0096        FunctionCall: end-gen
0096        Member: expr: 'self.ctx.oficial_rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0096      <-Value: expr: 'self.ctx.oficial_rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0096       Member: end-gen
0096      Value: end-gen
0096      InstructionFlow: line: 'return self.ctx.oficial_rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0096    <-Source: line: 'return self.ctx.oficial_rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0096   <--Function: line: 'return self.ctx.oficial_rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0096  <---Source: line: 'return self.ctx.oficial_rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0096 <----Class: line: 'return self.ctx.oficial_rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0096<-----Source: line: 'return self.ctx.oficial_rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0097     InstructionFlow: end-gen
0097    Source: end-gen
0097    Function: end: 'block-def-rellenarSubcuentasProv'
0097  <-Source: end: 'block-def-rellenarSubcuentasProv'
0097 <--Class: end: 'block-def-rellenarSubcuentasProv'
0097<---Source: end: 'block-def-rellenarSubcuentasProv'
0098   Function: end-gen
0098   Function: begin-gen
0098    Function: line: 'def automataActivado(self):'
0098  <-Source: line: 'def automataActivado(self):'
0098 <--Class: line: 'def automataActivado(self):'
0098<---Source: line: 'def automataActivado(self):'
0099    Function: begin: 'block-def-automataActivado'
0099  <-Source: begin: 'block-def-automataActivado'
0099 <--Class: begin: 'block-def-automataActivado'
0099<---Source: begin: 'block-def-automataActivado'
0099    Source: begin-gen
0099     InstructionFlow: begin-gen
0099      Value: begin-gen
0099       Member: begin-gen
0099        Identifier: begin-gen
0099         Identifier: expr: 'self'
0099        Identifier: end-gen
0099        Identifier: begin-gen
0099         Identifier: expr: 'ctx'
0099        Identifier: end-gen
0099        FunctionCall: begin-gen
0099         FunctionCall: expr: 'oficial_automataActivado()'
0099        FunctionCall: end-gen
0099        Member: expr: 'self.ctx.oficial_automataActivado()'
0099      <-Value: expr: 'self.ctx.oficial_automataActivado()'
0099       Member: end-gen
0099      Value: end-gen
0099      InstructionFlow: line: 'return self.ctx.oficial_automataActivado()'
0099    <-Source: line: 'return self.ctx.oficial_automataActivado()'
0099   <--Function: line: 'return self.ctx.oficial_automataActivado()'
0099  <---Source: line: 'return self.ctx.oficial_automataActivado()'
0099 <----Class: line: 'return self.ctx.oficial_automataActivado()'
0099<-----Source: line: 'return self.ctx.oficial_automataActivado()'
0100     InstructionFlow: end-gen
0100    Source: end-gen
0100    Function: end: 'block-def-automataActivado'
0100  <-Source: end: 'block-def-automataActivado'
0100 <--Class: end: 'block-def-automataActivado'
0100<---Source: end: 'block-def-automataActivado'
0101   Function: end-gen
0101   Function: begin-gen
0101    Variable: begin-gen
0101     Variable: expr: 'codCliente'
0101    Variable: end-gen
0101    Variable: begin-gen
0101     Variable: expr: 'fecha'
0101    Variable: end-gen
0101    Function: line: 'def clienteActivo(self, codCliente = None, fecha = None):'
0101  <-Source: line: 'def clienteActivo(self, codCliente = None, fecha = None):'
0101 <--Class: line: 'def clienteActivo(self, codCliente = None, fecha = None):'
0101<---Source: line: 'def clienteActivo(self, codCliente = None, fecha = None):'
0102    Function: begin: 'block-def-clienteActivo'
0102  <-Source: begin: 'block-def-clienteActivo'
0102 <--Class: begin: 'block-def-clienteActivo'
0102<---Source: begin: 'block-def-clienteActivo'
0102    Source: begin-gen
0102     InstructionFlow: begin-gen
0102      Value: begin-gen
0102       Member: begin-gen
0102        Identifier: begin-gen
0102         Identifier: expr: 'self'
0102        Identifier: end-gen
0102        Identifier: begin-gen
0102         Identifier: expr: 'ctx'
0102        Identifier: end-gen
0102        FunctionCall: begin-gen
0102         Value: begin-gen
0102          Identifier: begin-gen
0102           Identifier: expr: 'codCliente'
0102         <-Value: expr: 'codCliente'
0102          Identifier: end-gen
0102         Value: end-gen
0102         Value: begin-gen
0102          Identifier: begin-gen
0102           Identifier: expr: 'fecha'
0102         <-Value: expr: 'fecha'
0102          Identifier: end-gen
0102         Value: end-gen
0102         FunctionCall: expr: 'oficial_clienteActivo(codCliente, fecha)'
0102        FunctionCall: end-gen
0102        Member: expr: 'self.ctx.oficial_clienteActivo(codCliente, fecha)'
0102      <-Value: expr: 'self.ctx.oficial_clienteActivo(codCliente, fecha)'
0102       Member: end-gen
0102      Value: end-gen
0102      InstructionFlow: line: 'return self.ctx.oficial_clienteActivo(codCliente, fecha)'
0102    <-Source: line: 'return self.ctx.oficial_clienteActivo(codCliente, fecha)'
0102   <--Function: line: 'return self.ctx.oficial_clienteActivo(codCliente, fecha)'
0102  <---Source: line: 'return self.ctx.oficial_clienteActivo(codCliente, fecha)'
0102 <----Class: line: 'return self.ctx.oficial_clienteActivo(codCliente, fecha)'
0102<-----Source: line: 'return self.ctx.oficial_clienteActivo(codCliente, fecha)'
0103     InstructionFlow: end-gen
0103    Source: end-gen
0103    Function: end: 'block-def-clienteActivo'
0103  <-Source: end: 'block-def-clienteActivo'
0103 <--Class: end: 'block-def-clienteActivo'
0103<---Source: end: 'block-def-clienteActivo'
0104   Function: end-gen
0104   Function: begin-gen
0104    Variable: begin-gen
0104     Variable: expr: 'formulario'
0104    Variable: end-gen
0104    Variable: begin-gen
0104     Variable: expr: 'campoId'
0104    Variable: end-gen
0104    Variable: begin-gen
0104     Variable: expr: 'campoProvincia'
0104    Variable: end-gen
0104    Variable: begin-gen
0104     Variable: expr: 'campoPais'
0104    Variable: end-gen
0104    Function: line: 'def obtenerProvincia(self, formulario = None, campoId = None, campoProvincia = None, campoPais = None):'
0104  <-Source: line: 'def obtenerProvincia(self, formulario = None, campoId = None, campoProvincia = None, campoPais = None):'
0104 <--Class: line: 'def obtenerProvincia(self, formulario = None, campoId = None, campoProvincia = None, campoPais = None):'
0104<---Source: line: 'def obtenerProvincia(self, formulario = None, campoId = None, campoProvincia = None, campoPais = None):'
0105    Function: begin: 'block-def-obtenerProvincia'
0105  <-Source: begin: 'block-def-obtenerProvincia'
0105 <--Class: begin: 'block-def-obtenerProvincia'
0105<---Source: begin: 'block-def-obtenerProvincia'
0105    Source: begin-gen
0105     InstructionFlow: begin-gen
0105      Value: begin-gen
0105       Member: begin-gen
0105        Identifier: begin-gen
0105         Identifier: expr: 'self'
0105        Identifier: end-gen
0105        Identifier: begin-gen
0105         Identifier: expr: 'ctx'
0105        Identifier: end-gen
0105        FunctionCall: begin-gen
0105         Value: begin-gen
0105          Identifier: begin-gen
0105           Identifier: expr: 'formulario'
0105         <-Value: expr: 'formulario'
0105          Identifier: end-gen
0105         Value: end-gen
0105         Value: begin-gen
0105          Identifier: begin-gen
0105           Identifier: expr: 'campoId'
0105         <-Value: expr: 'campoId'
0105          Identifier: end-gen
0105         Value: end-gen
0105         Value: begin-gen
0105          Identifier: begin-gen
0105           Identifier: expr: 'campoProvincia'
0105         <-Value: expr: 'campoProvincia'
0105          Identifier: end-gen
0105         Value: end-gen
0105         Value: begin-gen
0105          Identifier: begin-gen
0105           Identifier: expr: 'campoPais'
0105         <-Value: expr: 'campoPais'
0105          Identifier: end-gen
0105         Value: end-gen
0105         FunctionCall: expr: 'oficial_obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0105        FunctionCall: end-gen
0105        Member: expr: 'self.ctx.oficial_obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0105      <-Value: expr: 'self.ctx.oficial_obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0105       Member: end-gen
0105      Value: end-gen
0105      InstructionFlow: line: 'return self.ctx.oficial_obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0105    <-Source: line: 'return self.ctx.oficial_obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0105   <--Function: line: 'return self.ctx.oficial_obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0105  <---Source: line: 'return self.ctx.oficial_obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0105 <----Class: line: 'return self.ctx.oficial_obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0105<-----Source: line: 'return self.ctx.oficial_obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0106     InstructionFlow: end-gen
0106    Source: end-gen
0106    Function: end: 'block-def-obtenerProvincia'
0106  <-Source: end: 'block-def-obtenerProvincia'
0106 <--Class: end: 'block-def-obtenerProvincia'
0106<---Source: end: 'block-def-obtenerProvincia'
0107   Function: end-gen
0107   Function: begin-gen
0107    Function: line: 'def actualizarContactos20070525(self):'
0107  <-Source: line: 'def actualizarContactos20070525(self):'
0107 <--Class: line: 'def actualizarContactos20070525(self):'
0107<---Source: line: 'def actualizarContactos20070525(self):'
0108    Function: begin: 'block-def-actualizarContactos20070525'
0108  <-Source: begin: 'block-def-actualizarContactos20070525'
0108 <--Class: begin: 'block-def-actualizarContactos20070525'
0108<---Source: begin: 'block-def-actualizarContactos20070525'
0108    Source: begin-gen
0108     InstructionFlow: begin-gen
0108      Value: begin-gen
0108       Member: begin-gen
0108        Identifier: begin-gen
0108         Identifier: expr: 'self'
0108        Identifier: end-gen
0108        Identifier: begin-gen
0108         Identifier: expr: 'ctx'
0108        Identifier: end-gen
0108        FunctionCall: begin-gen
0108         FunctionCall: expr: 'oficial_actualizarContactos20070525()'
0108        FunctionCall: end-gen
0108        Member: expr: 'self.ctx.oficial_actualizarContactos20070525()'
0108      <-Value: expr: 'self.ctx.oficial_actualizarContactos20070525()'
0108       Member: end-gen
0108      Value: end-gen
0108      InstructionFlow: line: 'return self.ctx.oficial_actualizarContactos20070525()'
0108    <-Source: line: 'return self.ctx.oficial_actualizarContactos20070525()'
0108   <--Function: line: 'return self.ctx.oficial_actualizarContactos20070525()'
0108  <---Source: line: 'return self.ctx.oficial_actualizarContactos20070525()'
0108 <----Class: line: 'return self.ctx.oficial_actualizarContactos20070525()'
0108<-----Source: line: 'return self.ctx.oficial_actualizarContactos20070525()'
0109     InstructionFlow: end-gen
0109    Source: end-gen
0109    Function: end: 'block-def-actualizarContactos20070525'
0109  <-Source: end: 'block-def-actualizarContactos20070525'
0109 <--Class: end: 'block-def-actualizarContactos20070525'
0109<---Source: end: 'block-def-actualizarContactos20070525'
0110   Function: end-gen
0110   Function: begin-gen
0110    Variable: begin-gen
0110     Variable: expr: 'cursor'
0110    Variable: end-gen
0110    Variable: begin-gen
0110     Variable: expr: 'evento'
0110    Variable: end-gen
0110    Function: line: 'def lanzarEvento(self, cursor = None, evento = None):'
0110  <-Source: line: 'def lanzarEvento(self, cursor = None, evento = None):'
0110 <--Class: line: 'def lanzarEvento(self, cursor = None, evento = None):'
0110<---Source: line: 'def lanzarEvento(self, cursor = None, evento = None):'
0111    Function: begin: 'block-def-lanzarEvento'
0111  <-Source: begin: 'block-def-lanzarEvento'
0111 <--Class: begin: 'block-def-lanzarEvento'
0111<---Source: begin: 'block-def-lanzarEvento'
0111    Source: begin-gen
0111     InstructionFlow: begin-gen
0111      Value: begin-gen
0111       Member: begin-gen
0111        Identifier: begin-gen
0111         Identifier: expr: 'self'
0111        Identifier: end-gen
0111        Identifier: begin-gen
0111         Identifier: expr: 'ctx'
0111        Identifier: end-gen
0111        FunctionCall: begin-gen
0111         Value: begin-gen
0111          Identifier: begin-gen
0111           Identifier: expr: 'cursor'
0111         <-Value: expr: 'cursor'
0111          Identifier: end-gen
0111         Value: end-gen
0111         Value: begin-gen
0111          Identifier: begin-gen
0111           Identifier: expr: 'evento'
0111         <-Value: expr: 'evento'
0111          Identifier: end-gen
0111         Value: end-gen
0111         FunctionCall: expr: 'oficial_lanzarEvento(cursor, evento)'
0111        FunctionCall: end-gen
0111        Member: expr: 'self.ctx.oficial_lanzarEvento(cursor, evento)'
0111      <-Value: expr: 'self.ctx.oficial_lanzarEvento(cursor, evento)'
0111       Member: end-gen
0111      Value: end-gen
0111      InstructionFlow: line: 'return self.ctx.oficial_lanzarEvento(cursor, evento)'
0111    <-Source: line: 'return self.ctx.oficial_lanzarEvento(cursor, evento)'
0111   <--Function: line: 'return self.ctx.oficial_lanzarEvento(cursor, evento)'
0111  <---Source: line: 'return self.ctx.oficial_lanzarEvento(cursor, evento)'
0111 <----Class: line: 'return self.ctx.oficial_lanzarEvento(cursor, evento)'
0111<-----Source: line: 'return self.ctx.oficial_lanzarEvento(cursor, evento)'
0112     InstructionFlow: end-gen
0112    Source: end-gen
0112    Function: end: 'block-def-lanzarEvento'
0112  <-Source: end: 'block-def-lanzarEvento'
0112 <--Class: end: 'block-def-lanzarEvento'
0112<---Source: end: 'block-def-lanzarEvento'
0113   Function: end-gen
0113   Function: begin-gen
0113    Variable: begin-gen
0113     Variable: expr: 'codCliente'
0113    Variable: end-gen
0113    Variable: begin-gen
0113     Variable: expr: 'codContacto'
0113    Variable: end-gen
0113    Variable: begin-gen
0113     Variable: expr: 'nombreCon'
0113    Variable: end-gen
0113    Variable: begin-gen
0113     Variable: expr: 'cargoCon'
0113    Variable: end-gen
0113    Variable: begin-gen
0113     Variable: expr: 'telefonoCon'
0113    Variable: end-gen
0113    Variable: begin-gen
0113     Variable: expr: 'faxCon'
0113    Variable: end-gen
0113    Variable: begin-gen
0113     Variable: expr: 'emailCon'
0113    Variable: end-gen
0113    Variable: begin-gen
0113     Variable: expr: 'idAgenda'
0113    Variable: end-gen
0113    Function: line: 'def actualizarContactosDeAgenda20070525(self, codCliente = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
0113  <-Source: line: 'def actualizarContactosDeAgenda20070525(self, codCliente = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
0113 <--Class: line: 'def actualizarContactosDeAgenda20070525(self, codCliente = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
0113<---Source: line: 'def actualizarContactosDeAgenda20070525(self, codCliente = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
0114    Function: begin: 'block-def-actualizarContactosDeAgenda20070525'
0114  <-Source: begin: 'block-def-actualizarContactosDeAgenda20070525'
0114 <--Class: begin: 'block-def-actualizarContactosDeAgenda20070525'
0114<---Source: begin: 'block-def-actualizarContactosDeAgenda20070525'
0114    Source: begin-gen
0114     InstructionFlow: begin-gen
0114      Value: begin-gen
0114       Member: begin-gen
0114        Identifier: begin-gen
0114         Identifier: expr: 'self'
0114        Identifier: end-gen
0114        Identifier: begin-gen
0114         Identifier: expr: 'ctx'
0114        Identifier: end-gen
0114        FunctionCall: begin-gen
0114         Value: begin-gen
0114          Identifier: begin-gen
0114           Identifier: expr: 'codCliente'
0114         <-Value: expr: 'codCliente'
0114          Identifier: end-gen
0114         Value: end-gen
0114         Value: begin-gen
0114          Identifier: begin-gen
0114           Identifier: expr: 'codContacto'
0114         <-Value: expr: 'codContacto'
0114          Identifier: end-gen
0114         Value: end-gen
0114         Value: begin-gen
0114          Identifier: begin-gen
0114           Identifier: expr: 'nombreCon'
0114         <-Value: expr: 'nombreCon'
0114          Identifier: end-gen
0114         Value: end-gen
0114         Value: begin-gen
0114          Identifier: begin-gen
0114           Identifier: expr: 'cargoCon'
0114         <-Value: expr: 'cargoCon'
0114          Identifier: end-gen
0114         Value: end-gen
0114         Value: begin-gen
0114          Identifier: begin-gen
0114           Identifier: expr: 'telefonoCon'
0114         <-Value: expr: 'telefonoCon'
0114          Identifier: end-gen
0114         Value: end-gen
0114         Value: begin-gen
0114          Identifier: begin-gen
0114           Identifier: expr: 'faxCon'
0114         <-Value: expr: 'faxCon'
0114          Identifier: end-gen
0114         Value: end-gen
0114         Value: begin-gen
0114          Identifier: begin-gen
0114           Identifier: expr: 'emailCon'
0114         <-Value: expr: 'emailCon'
0114          Identifier: end-gen
0114         Value: end-gen
0114         Value: begin-gen
0114          Identifier: begin-gen
0114           Identifier: expr: 'idAgenda'
0114         <-Value: expr: 'idAgenda'
0114          Identifier: end-gen
0114         Value: end-gen
0114         FunctionCall: expr: 'oficial_actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0114        FunctionCall: end-gen
0114        Member: expr: 'self.ctx.oficial_actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0114      <-Value: expr: 'self.ctx.oficial_actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0114       Member: end-gen
0114      Value: end-gen
0114      InstructionFlow: line: 'return self.ctx.oficial_actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0114    <-Source: line: 'return self.ctx.oficial_actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0114   <--Function: line: 'return self.ctx.oficial_actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0114  <---Source: line: 'return self.ctx.oficial_actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0114 <----Class: line: 'return self.ctx.oficial_actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0114<-----Source: line: 'return self.ctx.oficial_actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0115     InstructionFlow: end-gen
0115    Source: end-gen
0115    Function: end: 'block-def-actualizarContactosDeAgenda20070525'
0115  <-Source: end: 'block-def-actualizarContactosDeAgenda20070525'
0115 <--Class: end: 'block-def-actualizarContactosDeAgenda20070525'
0115<---Source: end: 'block-def-actualizarContactosDeAgenda20070525'
0116   Function: end-gen
0116   Function: begin-gen
0116    Function: line: 'def actualizarContactosProv20070702(self):'
0116  <-Source: line: 'def actualizarContactosProv20070702(self):'
0116 <--Class: line: 'def actualizarContactosProv20070702(self):'
0116<---Source: line: 'def actualizarContactosProv20070702(self):'
0117    Function: begin: 'block-def-actualizarContactosProv20070702'
0117  <-Source: begin: 'block-def-actualizarContactosProv20070702'
0117 <--Class: begin: 'block-def-actualizarContactosProv20070702'
0117<---Source: begin: 'block-def-actualizarContactosProv20070702'
0117    Source: begin-gen
0117     InstructionFlow: begin-gen
0117      Value: begin-gen
0117       Member: begin-gen
0117        Identifier: begin-gen
0117         Identifier: expr: 'self'
0117        Identifier: end-gen
0117        Identifier: begin-gen
0117         Identifier: expr: 'ctx'
0117        Identifier: end-gen
0117        FunctionCall: begin-gen
0117         FunctionCall: expr: 'oficial_actualizarContactosProv20070702()'
0117        FunctionCall: end-gen
0117        Member: expr: 'self.ctx.oficial_actualizarContactosProv20070702()'
0117      <-Value: expr: 'self.ctx.oficial_actualizarContactosProv20070702()'
0117       Member: end-gen
0117      Value: end-gen
0117      InstructionFlow: line: 'return self.ctx.oficial_actualizarContactosProv20070702()'
0117    <-Source: line: 'return self.ctx.oficial_actualizarContactosProv20070702()'
0117   <--Function: line: 'return self.ctx.oficial_actualizarContactosProv20070702()'
0117  <---Source: line: 'return self.ctx.oficial_actualizarContactosProv20070702()'
0117 <----Class: line: 'return self.ctx.oficial_actualizarContactosProv20070702()'
0117<-----Source: line: 'return self.ctx.oficial_actualizarContactosProv20070702()'
0118     InstructionFlow: end-gen
0118    Source: end-gen
0118    Function: end: 'block-def-actualizarContactosProv20070702'
0118  <-Source: end: 'block-def-actualizarContactosProv20070702'
0118 <--Class: end: 'block-def-actualizarContactosProv20070702'
0118<---Source: end: 'block-def-actualizarContactosProv20070702'
0119   Function: end-gen
0119   Function: begin-gen
0119    Variable: begin-gen
0119     Variable: expr: 'codProveedor'
0119    Variable: end-gen
0119    Variable: begin-gen
0119     Variable: expr: 'codContacto'
0119    Variable: end-gen
0119    Variable: begin-gen
0119     Variable: expr: 'nombreCon'
0119    Variable: end-gen
0119    Variable: begin-gen
0119     Variable: expr: 'cargoCon'
0119    Variable: end-gen
0119    Variable: begin-gen
0119     Variable: expr: 'telefonoCon'
0119    Variable: end-gen
0119    Variable: begin-gen
0119     Variable: expr: 'faxCon'
0119    Variable: end-gen
0119    Variable: begin-gen
0119     Variable: expr: 'emailCon'
0119    Variable: end-gen
0119    Variable: begin-gen
0119     Variable: expr: 'idAgenda'
0119    Variable: end-gen
0119    Function: line: 'def actualizarContactosDeAgendaProv20070702(self, codProveedor = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
0119  <-Source: line: 'def actualizarContactosDeAgendaProv20070702(self, codProveedor = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
0119 <--Class: line: 'def actualizarContactosDeAgendaProv20070702(self, codProveedor = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
0119<---Source: line: 'def actualizarContactosDeAgendaProv20070702(self, codProveedor = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
0120    Function: begin: 'block-def-actualizarContactosDeAgendaProv20070702'
0120  <-Source: begin: 'block-def-actualizarContactosDeAgendaProv20070702'
0120 <--Class: begin: 'block-def-actualizarContactosDeAgendaProv20070702'
0120<---Source: begin: 'block-def-actualizarContactosDeAgendaProv20070702'
0120    Source: begin-gen
0120     InstructionFlow: begin-gen
0120      Value: begin-gen
0120       Member: begin-gen
0120        Identifier: begin-gen
0120         Identifier: expr: 'self'
0120        Identifier: end-gen
0120        Identifier: begin-gen
0120         Identifier: expr: 'ctx'
0120        Identifier: end-gen
0120        FunctionCall: begin-gen
0120         Value: begin-gen
0120          Identifier: begin-gen
0120           Identifier: expr: 'codProveedor'
0120         <-Value: expr: 'codProveedor'
0120          Identifier: end-gen
0120         Value: end-gen
0120         Value: begin-gen
0120          Identifier: begin-gen
0120           Identifier: expr: 'codContacto'
0120         <-Value: expr: 'codContacto'
0120          Identifier: end-gen
0120         Value: end-gen
0120         Value: begin-gen
0120          Identifier: begin-gen
0120           Identifier: expr: 'nombreCon'
0120         <-Value: expr: 'nombreCon'
0120          Identifier: end-gen
0120         Value: end-gen
0120         Value: begin-gen
0120          Identifier: begin-gen
0120           Identifier: expr: 'cargoCon'
0120         <-Value: expr: 'cargoCon'
0120          Identifier: end-gen
0120         Value: end-gen
0120         Value: begin-gen
0120          Identifier: begin-gen
0120           Identifier: expr: 'telefonoCon'
0120         <-Value: expr: 'telefonoCon'
0120          Identifier: end-gen
0120         Value: end-gen
0120         Value: begin-gen
0120          Identifier: begin-gen
0120           Identifier: expr: 'faxCon'
0120         <-Value: expr: 'faxCon'
0120          Identifier: end-gen
0120         Value: end-gen
0120         Value: begin-gen
0120          Identifier: begin-gen
0120           Identifier: expr: 'emailCon'
0120         <-Value: expr: 'emailCon'
0120          Identifier: end-gen
0120         Value: end-gen
0120         Value: begin-gen
0120          Identifier: begin-gen
0120           Identifier: expr: 'idAgenda'
0120         <-Value: expr: 'idAgenda'
0120          Identifier: end-gen
0120         Value: end-gen
0120         FunctionCall: expr: 'oficial_actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0120        FunctionCall: end-gen
0120        Member: expr: 'self.ctx.oficial_actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0120      <-Value: expr: 'self.ctx.oficial_actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0120       Member: end-gen
0120      Value: end-gen
0120      InstructionFlow: line: 'return self.ctx.oficial_actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0120    <-Source: line: 'return self.ctx.oficial_actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0120   <--Function: line: 'return self.ctx.oficial_actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0120  <---Source: line: 'return self.ctx.oficial_actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0120 <----Class: line: 'return self.ctx.oficial_actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0120<-----Source: line: 'return self.ctx.oficial_actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
0121     InstructionFlow: end-gen
0121    Source: end-gen
0121    Function: end: 'block-def-actualizarContactosDeAgendaProv20070702'
0121  <-Source: end: 'block-def-actualizarContactosDeAgendaProv20070702'
0121 <--Class: end: 'block-def-actualizarContactosDeAgendaProv20070702'
0121<---Source: end: 'block-def-actualizarContactosDeAgendaProv20070702'
0122   Function: end-gen
0122   Function: begin-gen
0122    Variable: begin-gen
0122     Variable: expr: 'opciones'
0122    Variable: end-gen
0122    Variable: begin-gen
0122     Variable: expr: 'titulo'
0122    Variable: end-gen
0122    Function: line: 'def elegirOpcion(self, opciones = None, titulo = None):'
0122  <-Source: line: 'def elegirOpcion(self, opciones = None, titulo = None):'
0122 <--Class: line: 'def elegirOpcion(self, opciones = None, titulo = None):'
0122<---Source: line: 'def elegirOpcion(self, opciones = None, titulo = None):'
0123    Function: begin: 'block-def-elegirOpcion'
0123  <-Source: begin: 'block-def-elegirOpcion'
0123 <--Class: begin: 'block-def-elegirOpcion'
0123<---Source: begin: 'block-def-elegirOpcion'
0123    Source: begin-gen
0123     InstructionFlow: begin-gen
0123      Value: begin-gen
0123       Member: begin-gen
0123        Identifier: begin-gen
0123         Identifier: expr: 'self'
0123        Identifier: end-gen
0123        Identifier: begin-gen
0123         Identifier: expr: 'ctx'
0123        Identifier: end-gen
0123        FunctionCall: begin-gen
0123         Value: begin-gen
0123          Identifier: begin-gen
0123           Identifier: expr: 'opciones'
0123         <-Value: expr: 'opciones'
0123          Identifier: end-gen
0123         Value: end-gen
0123         Value: begin-gen
0123          Identifier: begin-gen
0123           Identifier: expr: 'titulo'
0123         <-Value: expr: 'titulo'
0123          Identifier: end-gen
0123         Value: end-gen
0123         FunctionCall: expr: 'oficial_elegirOpcion(opciones, titulo)'
0123        FunctionCall: end-gen
0123        Member: expr: 'self.ctx.oficial_elegirOpcion(opciones, titulo)'
0123      <-Value: expr: 'self.ctx.oficial_elegirOpcion(opciones, titulo)'
0123       Member: end-gen
0123      Value: end-gen
0123      InstructionFlow: line: 'return self.ctx.oficial_elegirOpcion(opciones, titulo)'
0123    <-Source: line: 'return self.ctx.oficial_elegirOpcion(opciones, titulo)'
0123   <--Function: line: 'return self.ctx.oficial_elegirOpcion(opciones, titulo)'
0123  <---Source: line: 'return self.ctx.oficial_elegirOpcion(opciones, titulo)'
0123 <----Class: line: 'return self.ctx.oficial_elegirOpcion(opciones, titulo)'
0123<-----Source: line: 'return self.ctx.oficial_elegirOpcion(opciones, titulo)'
0124     InstructionFlow: end-gen
0124    Source: end-gen
0124    Function: end: 'block-def-elegirOpcion'
0124  <-Source: end: 'block-def-elegirOpcion'
0124 <--Class: end: 'block-def-elegirOpcion'
0124<---Source: end: 'block-def-elegirOpcion'
0125   Function: end-gen
0125   Function: begin-gen
0125    Variable: begin-gen
0125     Variable: expr: 'codPais'
0125    Variable: end-gen
0125    Function: line: 'def crearProvinciasEsp(self, codPais = None):'
0125  <-Source: line: 'def crearProvinciasEsp(self, codPais = None):'
0125 <--Class: line: 'def crearProvinciasEsp(self, codPais = None):'
0125<---Source: line: 'def crearProvinciasEsp(self, codPais = None):'
0126    Function: begin: 'block-def-crearProvinciasEsp'
0126  <-Source: begin: 'block-def-crearProvinciasEsp'
0126 <--Class: begin: 'block-def-crearProvinciasEsp'
0126<---Source: begin: 'block-def-crearProvinciasEsp'
0126    Source: begin-gen
0126     InstructionFlow: begin-gen
0126      Value: begin-gen
0126       Member: begin-gen
0126        Identifier: begin-gen
0126         Identifier: expr: 'self'
0126        Identifier: end-gen
0126        Identifier: begin-gen
0126         Identifier: expr: 'ctx'
0126        Identifier: end-gen
0126        FunctionCall: begin-gen
0126         Value: begin-gen
0126          Identifier: begin-gen
0126           Identifier: expr: 'codPais'
0126         <-Value: expr: 'codPais'
0126          Identifier: end-gen
0126         Value: end-gen
0126         FunctionCall: expr: 'oficial_crearProvinciasEsp(codPais)'
0126        FunctionCall: end-gen
0126        Member: expr: 'self.ctx.oficial_crearProvinciasEsp(codPais)'
0126      <-Value: expr: 'self.ctx.oficial_crearProvinciasEsp(codPais)'
0126       Member: end-gen
0126      Value: end-gen
0126      InstructionFlow: line: 'return self.ctx.oficial_crearProvinciasEsp(codPais)'
0126    <-Source: line: 'return self.ctx.oficial_crearProvinciasEsp(codPais)'
0126   <--Function: line: 'return self.ctx.oficial_crearProvinciasEsp(codPais)'
0126  <---Source: line: 'return self.ctx.oficial_crearProvinciasEsp(codPais)'
0126 <----Class: line: 'return self.ctx.oficial_crearProvinciasEsp(codPais)'
0126<-----Source: line: 'return self.ctx.oficial_crearProvinciasEsp(codPais)'
0127     InstructionFlow: end-gen
0127    Source: end-gen
0127    Function: end: 'block-def-crearProvinciasEsp'
0127  <-Source: end: 'block-def-crearProvinciasEsp'
0127 <--Class: end: 'block-def-crearProvinciasEsp'
0127<---Source: end: 'block-def-crearProvinciasEsp'
0128   Function: end-gen
0128   Function: begin-gen
0128    Variable: begin-gen
0128     Variable: expr: 'fecha'
0128    Variable: end-gen
0128    Function: line: 'def textoFecha(self, fecha = None):'
0128  <-Source: line: 'def textoFecha(self, fecha = None):'
0128 <--Class: line: 'def textoFecha(self, fecha = None):'
0128<---Source: line: 'def textoFecha(self, fecha = None):'
0129    Function: begin: 'block-def-textoFecha'
0129  <-Source: begin: 'block-def-textoFecha'
0129 <--Class: begin: 'block-def-textoFecha'
0129<---Source: begin: 'block-def-textoFecha'
0129    Source: begin-gen
0129     InstructionFlow: begin-gen
0129      Value: begin-gen
0129       Member: begin-gen
0129        Identifier: begin-gen
0129         Identifier: expr: 'self'
0129        Identifier: end-gen
0129        Identifier: begin-gen
0129         Identifier: expr: 'ctx'
0129        Identifier: end-gen
0129        FunctionCall: begin-gen
0129         Value: begin-gen
0129          Identifier: begin-gen
0129           Identifier: expr: 'fecha'
0129         <-Value: expr: 'fecha'
0129          Identifier: end-gen
0129         Value: end-gen
0129         FunctionCall: expr: 'oficial_textoFecha(fecha)'
0129        FunctionCall: end-gen
0129        Member: expr: 'self.ctx.oficial_textoFecha(fecha)'
0129      <-Value: expr: 'self.ctx.oficial_textoFecha(fecha)'
0129       Member: end-gen
0129      Value: end-gen
0129      InstructionFlow: line: 'return self.ctx.oficial_textoFecha(fecha)'
0129    <-Source: line: 'return self.ctx.oficial_textoFecha(fecha)'
0129   <--Function: line: 'return self.ctx.oficial_textoFecha(fecha)'
0129  <---Source: line: 'return self.ctx.oficial_textoFecha(fecha)'
0129 <----Class: line: 'return self.ctx.oficial_textoFecha(fecha)'
0129<-----Source: line: 'return self.ctx.oficial_textoFecha(fecha)'
0130     InstructionFlow: end-gen
0130    Source: end-gen
0130    Function: end: 'block-def-textoFecha'
0130  <-Source: end: 'block-def-textoFecha'
0130 <--Class: end: 'block-def-textoFecha'
0130<---Source: end: 'block-def-textoFecha'
0131   Function: end-gen
0131   Function: begin-gen
0131    Variable: begin-gen
0131     Variable: expr: 'nifIva'
0131    Variable: end-gen
0131    Function: line: 'def validarNifIva(self, nifIva = None):'
0131  <-Source: line: 'def validarNifIva(self, nifIva = None):'
0131 <--Class: line: 'def validarNifIva(self, nifIva = None):'
0131<---Source: line: 'def validarNifIva(self, nifIva = None):'
0132    Function: begin: 'block-def-validarNifIva'
0132  <-Source: begin: 'block-def-validarNifIva'
0132 <--Class: begin: 'block-def-validarNifIva'
0132<---Source: begin: 'block-def-validarNifIva'
0132    Source: begin-gen
0132     InstructionFlow: begin-gen
0132      Value: begin-gen
0132       Member: begin-gen
0132        Identifier: begin-gen
0132         Identifier: expr: 'self'
0132        Identifier: end-gen
0132        Identifier: begin-gen
0132         Identifier: expr: 'ctx'
0132        Identifier: end-gen
0132        FunctionCall: begin-gen
0132         Value: begin-gen
0132          Identifier: begin-gen
0132           Identifier: expr: 'nifIva'
0132         <-Value: expr: 'nifIva'
0132          Identifier: end-gen
0132         Value: end-gen
0132         FunctionCall: expr: 'oficial_validarNifIva(nifIva)'
0132        FunctionCall: end-gen
0132        Member: expr: 'self.ctx.oficial_validarNifIva(nifIva)'
0132      <-Value: expr: 'self.ctx.oficial_validarNifIva(nifIva)'
0132       Member: end-gen
0132      Value: end-gen
0132      InstructionFlow: line: 'return self.ctx.oficial_validarNifIva(nifIva)'
0132    <-Source: line: 'return self.ctx.oficial_validarNifIva(nifIva)'
0132   <--Function: line: 'return self.ctx.oficial_validarNifIva(nifIva)'
0132  <---Source: line: 'return self.ctx.oficial_validarNifIva(nifIva)'
0132 <----Class: line: 'return self.ctx.oficial_validarNifIva(nifIva)'
0132<-----Source: line: 'return self.ctx.oficial_validarNifIva(nifIva)'
0133     InstructionFlow: end-gen
0133    Source: end-gen
0133    Function: end: 'block-def-validarNifIva'
0133  <-Source: end: 'block-def-validarNifIva'
0133 <--Class: end: 'block-def-validarNifIva'
0133<---Source: end: 'block-def-validarNifIva'
0134   Function: end-gen
0134   Function: begin-gen
0134    Variable: begin-gen
0134     Variable: expr: 'comando'
0134    Variable: end-gen
0134    Function: line: 'def ejecutarComandoAsincrono(self, comando = None):'
0134  <-Source: line: 'def ejecutarComandoAsincrono(self, comando = None):'
0134 <--Class: line: 'def ejecutarComandoAsincrono(self, comando = None):'
0134<---Source: line: 'def ejecutarComandoAsincrono(self, comando = None):'
0135    Function: begin: 'block-def-ejecutarComandoAsincrono'
0135  <-Source: begin: 'block-def-ejecutarComandoAsincrono'
0135 <--Class: begin: 'block-def-ejecutarComandoAsincrono'
0135<---Source: begin: 'block-def-ejecutarComandoAsincrono'
0135    Source: begin-gen
0135     InstructionFlow: begin-gen
0135      Value: begin-gen
0135       Member: begin-gen
0135        Identifier: begin-gen
0135         Identifier: expr: 'self'
0135        Identifier: end-gen
0135        Identifier: begin-gen
0135         Identifier: expr: 'ctx'
0135        Identifier: end-gen
0135        FunctionCall: begin-gen
0135         Value: begin-gen
0135          Identifier: begin-gen
0135           Identifier: expr: 'comando'
0135         <-Value: expr: 'comando'
0135          Identifier: end-gen
0135         Value: end-gen
0135         FunctionCall: expr: 'oficial_ejecutarComandoAsincrono(comando)'
0135        FunctionCall: end-gen
0135        Member: expr: 'self.ctx.oficial_ejecutarComandoAsincrono(comando)'
0135      <-Value: expr: 'self.ctx.oficial_ejecutarComandoAsincrono(comando)'
0135       Member: end-gen
0135      Value: end-gen
0135      InstructionFlow: line: 'return self.ctx.oficial_ejecutarComandoAsincrono(comando)'
0135    <-Source: line: 'return self.ctx.oficial_ejecutarComandoAsincrono(comando)'
0135   <--Function: line: 'return self.ctx.oficial_ejecutarComandoAsincrono(comando)'
0135  <---Source: line: 'return self.ctx.oficial_ejecutarComandoAsincrono(comando)'
0135 <----Class: line: 'return self.ctx.oficial_ejecutarComandoAsincrono(comando)'
0135<-----Source: line: 'return self.ctx.oficial_ejecutarComandoAsincrono(comando)'
0136     InstructionFlow: end-gen
0136    Source: end-gen
0136    Function: end: 'block-def-ejecutarComandoAsincrono'
0136  <-Source: end: 'block-def-ejecutarComandoAsincrono'
0136 <--Class: end: 'block-def-ejecutarComandoAsincrono'
0136<---Source: end: 'block-def-ejecutarComandoAsincrono'
0137   Function: end-gen
0137   Function: begin-gen
0137    Function: line: 'def globalInit(self):'
0137  <-Source: line: 'def globalInit(self):'
0137 <--Class: line: 'def globalInit(self):'
0137<---Source: line: 'def globalInit(self):'
0138    Function: begin: 'block-def-globalInit'
0138  <-Source: begin: 'block-def-globalInit'
0138 <--Class: begin: 'block-def-globalInit'
0138<---Source: begin: 'block-def-globalInit'
0138    Source: begin-gen
0138     InstructionFlow: begin-gen
0138      Value: begin-gen
0138       Member: begin-gen
0138        Identifier: begin-gen
0138         Identifier: expr: 'self'
0138        Identifier: end-gen
0138        Identifier: begin-gen
0138         Identifier: expr: 'ctx'
0138        Identifier: end-gen
0138        FunctionCall: begin-gen
0138         FunctionCall: expr: 'oficial_globalInit()'
0138        FunctionCall: end-gen
0138        Member: expr: 'self.ctx.oficial_globalInit()'
0138      <-Value: expr: 'self.ctx.oficial_globalInit()'
0138       Member: end-gen
0138      Value: end-gen
0138      InstructionFlow: line: 'return self.ctx.oficial_globalInit()'
0138    <-Source: line: 'return self.ctx.oficial_globalInit()'
0138   <--Function: line: 'return self.ctx.oficial_globalInit()'
0138  <---Source: line: 'return self.ctx.oficial_globalInit()'
0138 <----Class: line: 'return self.ctx.oficial_globalInit()'
0138<-----Source: line: 'return self.ctx.oficial_globalInit()'
0139     InstructionFlow: end-gen
0139    Source: end-gen
0139    Function: end: 'block-def-globalInit'
0139  <-Source: end: 'block-def-globalInit'
0139 <--Class: end: 'block-def-globalInit'
0139<---Source: end: 'block-def-globalInit'
0140   Function: end-gen
0140   Function: begin-gen
0140    Function: line: 'def existeEnvioMail(self):'
0140  <-Source: line: 'def existeEnvioMail(self):'
0140 <--Class: line: 'def existeEnvioMail(self):'
0140<---Source: line: 'def existeEnvioMail(self):'
0141    Function: begin: 'block-def-existeEnvioMail'
0141  <-Source: begin: 'block-def-existeEnvioMail'
0141 <--Class: begin: 'block-def-existeEnvioMail'
0141<---Source: begin: 'block-def-existeEnvioMail'
0141    Source: begin-gen
0141     InstructionFlow: begin-gen
0141      Value: begin-gen
0141       Member: begin-gen
0141        Identifier: begin-gen
0141         Identifier: expr: 'self'
0141        Identifier: end-gen
0141        Identifier: begin-gen
0141         Identifier: expr: 'ctx'
0141        Identifier: end-gen
0141        FunctionCall: begin-gen
0141         FunctionCall: expr: 'oficial_existeEnvioMail()'
0141        FunctionCall: end-gen
0141        Member: expr: 'self.ctx.oficial_existeEnvioMail()'
0141      <-Value: expr: 'self.ctx.oficial_existeEnvioMail()'
0141       Member: end-gen
0141      Value: end-gen
0141      InstructionFlow: line: 'return self.ctx.oficial_existeEnvioMail()'
0141    <-Source: line: 'return self.ctx.oficial_existeEnvioMail()'
0141   <--Function: line: 'return self.ctx.oficial_existeEnvioMail()'
0141  <---Source: line: 'return self.ctx.oficial_existeEnvioMail()'
0141 <----Class: line: 'return self.ctx.oficial_existeEnvioMail()'
0141<-----Source: line: 'return self.ctx.oficial_existeEnvioMail()'
0142     InstructionFlow: end-gen
0142    Source: end-gen
0142    Function: end: 'block-def-existeEnvioMail'
0142  <-Source: end: 'block-def-existeEnvioMail'
0142 <--Class: end: 'block-def-existeEnvioMail'
0142<---Source: end: 'block-def-existeEnvioMail'
0143   Function: end-gen
0143   Function: begin-gen
0143    Variable: begin-gen
0143     Variable: expr: 'cursor'
0143    Variable: end-gen
0143    Variable: begin-gen
0143     Variable: expr: 'mtd'
0143    Variable: end-gen
0143    Function: line: 'def validarProvincia(self, cursor = None, mtd = None):'
0143  <-Source: line: 'def validarProvincia(self, cursor = None, mtd = None):'
0143 <--Class: line: 'def validarProvincia(self, cursor = None, mtd = None):'
0143<---Source: line: 'def validarProvincia(self, cursor = None, mtd = None):'
0144    Function: begin: 'block-def-validarProvincia'
0144  <-Source: begin: 'block-def-validarProvincia'
0144 <--Class: begin: 'block-def-validarProvincia'
0144<---Source: begin: 'block-def-validarProvincia'
0144    Source: begin-gen
0144     InstructionFlow: begin-gen
0144      Value: begin-gen
0144       Member: begin-gen
0144        Identifier: begin-gen
0144         Identifier: expr: 'self'
0144        Identifier: end-gen
0144        Identifier: begin-gen
0144         Identifier: expr: 'ctx'
0144        Identifier: end-gen
0144        FunctionCall: begin-gen
0144         Value: begin-gen
0144          Identifier: begin-gen
0144           Identifier: expr: 'cursor'
0144         <-Value: expr: 'cursor'
0144          Identifier: end-gen
0144         Value: end-gen
0144         Value: begin-gen
0144          Identifier: begin-gen
0144           Identifier: expr: 'mtd'
0144         <-Value: expr: 'mtd'
0144          Identifier: end-gen
0144         Value: end-gen
0144         FunctionCall: expr: 'oficial_validarProvincia(cursor, mtd)'
0144        FunctionCall: end-gen
0144        Member: expr: 'self.ctx.oficial_validarProvincia(cursor, mtd)'
0144      <-Value: expr: 'self.ctx.oficial_validarProvincia(cursor, mtd)'
0144       Member: end-gen
0144      Value: end-gen
0144      InstructionFlow: line: 'return self.ctx.oficial_validarProvincia(cursor, mtd)'
0144    <-Source: line: 'return self.ctx.oficial_validarProvincia(cursor, mtd)'
0144   <--Function: line: 'return self.ctx.oficial_validarProvincia(cursor, mtd)'
0144  <---Source: line: 'return self.ctx.oficial_validarProvincia(cursor, mtd)'
0144 <----Class: line: 'return self.ctx.oficial_validarProvincia(cursor, mtd)'
0144<-----Source: line: 'return self.ctx.oficial_validarProvincia(cursor, mtd)'
0145     InstructionFlow: end-gen
0145    Source: end-gen
0145    Function: end: 'block-def-validarProvincia'
0145  <-Source: end: 'block-def-validarProvincia'
0145 <--Class: end: 'block-def-validarProvincia'
0145<---Source: end: 'block-def-validarProvincia'
0146   Function: end-gen
0146   Function: begin-gen
0146    Variable: begin-gen
0146     Variable: expr: 'str'
0146    Variable: end-gen
0146    Function: line: 'def simplify(self, str = None):'
0146  <-Source: line: 'def simplify(self, str = None):'
0146 <--Class: line: 'def simplify(self, str = None):'
0146<---Source: line: 'def simplify(self, str = None):'
0147    Function: begin: 'block-def-simplify'
0147  <-Source: begin: 'block-def-simplify'
0147 <--Class: begin: 'block-def-simplify'
0147<---Source: begin: 'block-def-simplify'
0147    Source: begin-gen
0147     InstructionFlow: begin-gen
0147      Value: begin-gen
0147       Member: begin-gen
0147        Identifier: begin-gen
0147         Identifier: expr: 'self'
0147        Identifier: end-gen
0147        Identifier: begin-gen
0147         Identifier: expr: 'ctx'
0147        Identifier: end-gen
0147        FunctionCall: begin-gen
0147         Value: begin-gen
0147          Identifier: begin-gen
0147           Identifier: expr: 'str'
0147         <-Value: expr: 'str'
0147          Identifier: end-gen
0147         Value: end-gen
0147         FunctionCall: expr: 'oficial_simplify(str)'
0147        FunctionCall: end-gen
0147        Member: expr: 'self.ctx.oficial_simplify(str)'
0147      <-Value: expr: 'self.ctx.oficial_simplify(str)'
0147       Member: end-gen
0147      Value: end-gen
0147      InstructionFlow: line: 'return self.ctx.oficial_simplify(str)'
0147    <-Source: line: 'return self.ctx.oficial_simplify(str)'
0147   <--Function: line: 'return self.ctx.oficial_simplify(str)'
0147  <---Source: line: 'return self.ctx.oficial_simplify(str)'
0147 <----Class: line: 'return self.ctx.oficial_simplify(str)'
0147<-----Source: line: 'return self.ctx.oficial_simplify(str)'
0148     InstructionFlow: end-gen
0148    Source: end-gen
0148    Function: end: 'block-def-simplify'
0148  <-Source: end: 'block-def-simplify'
0148 <--Class: end: 'block-def-simplify'
0148<---Source: end: 'block-def-simplify'
0149   Function: end-gen
0149   Function: begin-gen
0149    Variable: begin-gen
0149     Variable: expr: 'str'
0149    Variable: end-gen
0149    Function: line: 'def escapeQuote(self, str = None):'
0149  <-Source: line: 'def escapeQuote(self, str = None):'
0149 <--Class: line: 'def escapeQuote(self, str = None):'
0149<---Source: line: 'def escapeQuote(self, str = None):'
0150    Function: begin: 'block-def-escapeQuote'
0150  <-Source: begin: 'block-def-escapeQuote'
0150 <--Class: begin: 'block-def-escapeQuote'
0150<---Source: begin: 'block-def-escapeQuote'
0150    Source: begin-gen
0150     InstructionFlow: begin-gen
0150      Value: begin-gen
0150       Member: begin-gen
0150        Identifier: begin-gen
0150         Identifier: expr: 'self'
0150        Identifier: end-gen
0150        Identifier: begin-gen
0150         Identifier: expr: 'ctx'
0150        Identifier: end-gen
0150        FunctionCall: begin-gen
0150         Value: begin-gen
0150          Identifier: begin-gen
0150           Identifier: expr: 'str'
0150         <-Value: expr: 'str'
0150          Identifier: end-gen
0150         Value: end-gen
0150         FunctionCall: expr: 'oficial_escapeQuote(str)'
0150        FunctionCall: end-gen
0150        Member: expr: 'self.ctx.oficial_escapeQuote(str)'
0150      <-Value: expr: 'self.ctx.oficial_escapeQuote(str)'
0150       Member: end-gen
0150      Value: end-gen
0150      InstructionFlow: line: 'return self.ctx.oficial_escapeQuote(str)'
0150    <-Source: line: 'return self.ctx.oficial_escapeQuote(str)'
0150   <--Function: line: 'return self.ctx.oficial_escapeQuote(str)'
0150  <---Source: line: 'return self.ctx.oficial_escapeQuote(str)'
0150 <----Class: line: 'return self.ctx.oficial_escapeQuote(str)'
0150<-----Source: line: 'return self.ctx.oficial_escapeQuote(str)'
0151     InstructionFlow: end-gen
0151    Source: end-gen
0151    Function: end: 'block-def-escapeQuote'
0151  <-Source: end: 'block-def-escapeQuote'
0151 <--Class: end: 'block-def-escapeQuote'
0151<---Source: end: 'block-def-escapeQuote'
0152   Function: end-gen
0152   Function: begin-gen
0152    Variable: begin-gen
0152     Variable: expr: 'cuenta'
0152    Variable: end-gen
0152    Variable: begin-gen
0152     Variable: expr: 'codPais'
0152    Variable: end-gen
0152    Function: line: 'def calcularIBAN(self, cuenta = None, codPais = None):'
0152  <-Source: line: 'def calcularIBAN(self, cuenta = None, codPais = None):'
0152 <--Class: line: 'def calcularIBAN(self, cuenta = None, codPais = None):'
0152<---Source: line: 'def calcularIBAN(self, cuenta = None, codPais = None):'
0153    Function: begin: 'block-def-calcularIBAN'
0153  <-Source: begin: 'block-def-calcularIBAN'
0153 <--Class: begin: 'block-def-calcularIBAN'
0153<---Source: begin: 'block-def-calcularIBAN'
0153    Source: begin-gen
0153     InstructionFlow: begin-gen
0153      Value: begin-gen
0153       Member: begin-gen
0153        Identifier: begin-gen
0153         Identifier: expr: 'self'
0153        Identifier: end-gen
0153        Identifier: begin-gen
0153         Identifier: expr: 'ctx'
0153        Identifier: end-gen
0153        FunctionCall: begin-gen
0153         Value: begin-gen
0153          Identifier: begin-gen
0153           Identifier: expr: 'cuenta'
0153         <-Value: expr: 'cuenta'
0153          Identifier: end-gen
0153         Value: end-gen
0153         Value: begin-gen
0153          Identifier: begin-gen
0153           Identifier: expr: 'codPais'
0153         <-Value: expr: 'codPais'
0153          Identifier: end-gen
0153         Value: end-gen
0153         FunctionCall: expr: 'oficial_calcularIBAN(cuenta, codPais)'
0153        FunctionCall: end-gen
0153        Member: expr: 'self.ctx.oficial_calcularIBAN(cuenta, codPais)'
0153      <-Value: expr: 'self.ctx.oficial_calcularIBAN(cuenta, codPais)'
0153       Member: end-gen
0153      Value: end-gen
0153      InstructionFlow: line: 'return self.ctx.oficial_calcularIBAN(cuenta, codPais)'
0153    <-Source: line: 'return self.ctx.oficial_calcularIBAN(cuenta, codPais)'
0153   <--Function: line: 'return self.ctx.oficial_calcularIBAN(cuenta, codPais)'
0153  <---Source: line: 'return self.ctx.oficial_calcularIBAN(cuenta, codPais)'
0153 <----Class: line: 'return self.ctx.oficial_calcularIBAN(cuenta, codPais)'
0153<-----Source: line: 'return self.ctx.oficial_calcularIBAN(cuenta, codPais)'
0154     InstructionFlow: end-gen
0154    Source: end-gen
0154    Function: end: 'block-def-calcularIBAN'
0154  <-Source: end: 'block-def-calcularIBAN'
0154 <--Class: end: 'block-def-calcularIBAN'
0154<---Source: end: 'block-def-calcularIBAN'
0155   Function: end-gen
0155   Function: begin-gen
0155    Variable: begin-gen
0155     Variable: expr: 'numero'
0155    Variable: end-gen
0155    Variable: begin-gen
0155     Variable: expr: 'codPais'
0155    Variable: end-gen
0155    Function: line: 'def digitoControlMod97(self, numero = None, codPais = None):'
0155  <-Source: line: 'def digitoControlMod97(self, numero = None, codPais = None):'
0155 <--Class: line: 'def digitoControlMod97(self, numero = None, codPais = None):'
0155<---Source: line: 'def digitoControlMod97(self, numero = None, codPais = None):'
0156    Function: begin: 'block-def-digitoControlMod97'
0156  <-Source: begin: 'block-def-digitoControlMod97'
0156 <--Class: begin: 'block-def-digitoControlMod97'
0156<---Source: begin: 'block-def-digitoControlMod97'
0156    Source: begin-gen
0156     InstructionFlow: begin-gen
0156      Value: begin-gen
0156       Member: begin-gen
0156        Identifier: begin-gen
0156         Identifier: expr: 'self'
0156        Identifier: end-gen
0156        Identifier: begin-gen
0156         Identifier: expr: 'ctx'
0156        Identifier: end-gen
0156        FunctionCall: begin-gen
0156         Value: begin-gen
0156          Identifier: begin-gen
0156           Identifier: expr: 'numero'
0156         <-Value: expr: 'numero'
0156          Identifier: end-gen
0156         Value: end-gen
0156         Value: begin-gen
0156          Identifier: begin-gen
0156           Identifier: expr: 'codPais'
0156         <-Value: expr: 'codPais'
0156          Identifier: end-gen
0156         Value: end-gen
0156         FunctionCall: expr: 'oficial_digitoControlMod97(numero, codPais)'
0156        FunctionCall: end-gen
0156        Member: expr: 'self.ctx.oficial_digitoControlMod97(numero, codPais)'
0156      <-Value: expr: 'self.ctx.oficial_digitoControlMod97(numero, codPais)'
0156       Member: end-gen
0156      Value: end-gen
0156      InstructionFlow: line: 'return self.ctx.oficial_digitoControlMod97(numero, codPais)'
0156    <-Source: line: 'return self.ctx.oficial_digitoControlMod97(numero, codPais)'
0156   <--Function: line: 'return self.ctx.oficial_digitoControlMod97(numero, codPais)'
0156  <---Source: line: 'return self.ctx.oficial_digitoControlMod97(numero, codPais)'
0156 <----Class: line: 'return self.ctx.oficial_digitoControlMod97(numero, codPais)'
0156<-----Source: line: 'return self.ctx.oficial_digitoControlMod97(numero, codPais)'
0157     InstructionFlow: end-gen
0157    Source: end-gen
0157    Function: end: 'block-def-digitoControlMod97'
0157  <-Source: end: 'block-def-digitoControlMod97'
0157 <--Class: end: 'block-def-digitoControlMod97'
0157<---Source: end: 'block-def-digitoControlMod97'
0158   Function: end-gen
0158   Function: begin-gen
0158    Variable: begin-gen
0158     Variable: expr: 'num'
0158    Variable: end-gen
0158    Variable: begin-gen
0158     Variable: expr: 'div'
0158    Variable: end-gen
0158    Function: line: 'def moduloNumero(self, num = None, div = None):'
0158  <-Source: line: 'def moduloNumero(self, num = None, div = None):'
0158 <--Class: line: 'def moduloNumero(self, num = None, div = None):'
0158<---Source: line: 'def moduloNumero(self, num = None, div = None):'
0159    Function: begin: 'block-def-moduloNumero'
0159  <-Source: begin: 'block-def-moduloNumero'
0159 <--Class: begin: 'block-def-moduloNumero'
0159<---Source: begin: 'block-def-moduloNumero'
0159    Source: begin-gen
0159     InstructionFlow: begin-gen
0159      Value: begin-gen
0159       Member: begin-gen
0159        Identifier: begin-gen
0159         Identifier: expr: 'self'
0159        Identifier: end-gen
0159        Identifier: begin-gen
0159         Identifier: expr: 'ctx'
0159        Identifier: end-gen
0159        FunctionCall: begin-gen
0159         Value: begin-gen
0159          Identifier: begin-gen
0159           Identifier: expr: 'num'
0159         <-Value: expr: 'num'
0159          Identifier: end-gen
0159         Value: end-gen
0159         Value: begin-gen
0159          Identifier: begin-gen
0159           Identifier: expr: 'div'
0159         <-Value: expr: 'div'
0159          Identifier: end-gen
0159         Value: end-gen
0159         FunctionCall: expr: 'oficial_moduloNumero(num, div)'
0159        FunctionCall: end-gen
0159        Member: expr: 'self.ctx.oficial_moduloNumero(num, div)'
0159      <-Value: expr: 'self.ctx.oficial_moduloNumero(num, div)'
0159       Member: end-gen
0159      Value: end-gen
0159      InstructionFlow: line: 'return self.ctx.oficial_moduloNumero(num, div)'
0159    <-Source: line: 'return self.ctx.oficial_moduloNumero(num, div)'
0159   <--Function: line: 'return self.ctx.oficial_moduloNumero(num, div)'
0159  <---Source: line: 'return self.ctx.oficial_moduloNumero(num, div)'
0159 <----Class: line: 'return self.ctx.oficial_moduloNumero(num, div)'
0159<-----Source: line: 'return self.ctx.oficial_moduloNumero(num, div)'
0160     InstructionFlow: end-gen
0160    Source: end-gen
0160    Function: end: 'block-def-moduloNumero'
0160  <-Source: end: 'block-def-moduloNumero'
0160 <--Class: end: 'block-def-moduloNumero'
0160<---Source: end: 'block-def-moduloNumero'
0161   Function: end-gen
0161   Function: begin-gen
0161    Variable: begin-gen
0161     Variable: expr: 'cifEmpresa'
0161    Variable: end-gen
0161    Variable: begin-gen
0161     Variable: expr: 'codCuenta'
0161    Variable: end-gen
0161    Function: line: 'def calcularIdentificadorAcreedor(self, cifEmpresa = None, codCuenta = None):'
0161  <-Source: line: 'def calcularIdentificadorAcreedor(self, cifEmpresa = None, codCuenta = None):'
0161 <--Class: line: 'def calcularIdentificadorAcreedor(self, cifEmpresa = None, codCuenta = None):'
0161<---Source: line: 'def calcularIdentificadorAcreedor(self, cifEmpresa = None, codCuenta = None):'
0162    Function: begin: 'block-def-calcularIdentificadorAcreedor'
0162  <-Source: begin: 'block-def-calcularIdentificadorAcreedor'
0162 <--Class: begin: 'block-def-calcularIdentificadorAcreedor'
0162<---Source: begin: 'block-def-calcularIdentificadorAcreedor'
0162    Source: begin-gen
0162     InstructionFlow: begin-gen
0162      Value: begin-gen
0162       Member: begin-gen
0162        Identifier: begin-gen
0162         Identifier: expr: 'self'
0162        Identifier: end-gen
0162        Identifier: begin-gen
0162         Identifier: expr: 'ctx'
0162        Identifier: end-gen
0162        FunctionCall: begin-gen
0162         Value: begin-gen
0162          Identifier: begin-gen
0162           Identifier: expr: 'cifEmpresa'
0162         <-Value: expr: 'cifEmpresa'
0162          Identifier: end-gen
0162         Value: end-gen
0162         Value: begin-gen
0162          Identifier: begin-gen
0162           Identifier: expr: 'codCuenta'
0162         <-Value: expr: 'codCuenta'
0162          Identifier: end-gen
0162         Value: end-gen
0162         FunctionCall: expr: 'oficial_calcularIdentificadorAcreedor(cifEmpresa, codCuenta)'
0162        FunctionCall: end-gen
0162        Member: expr: 'self.ctx.oficial_calcularIdentificadorAcreedor(cifEmpresa, codCuenta)'
0162      <-Value: expr: 'self.ctx.oficial_calcularIdentificadorAcreedor(cifEmpresa, codCuenta)'
0162       Member: end-gen
0162      Value: end-gen
0162      InstructionFlow: line: 'return self.ctx.oficial_calcularIdentificadorAcreedor(cifEmpresa, codCuenta)'
0162    <-Source: line: 'return self.ctx.oficial_calcularIdentificadorAcreedor(cifEmpresa, codCuenta)'
0162   <--Function: line: 'return self.ctx.oficial_calcularIdentificadorAcreedor(cifEmpresa, codCuenta)'
0162  <---Source: line: 'return self.ctx.oficial_calcularIdentificadorAcreedor(cifEmpresa, codCuenta)'
0162 <----Class: line: 'return self.ctx.oficial_calcularIdentificadorAcreedor(cifEmpresa, codCuenta)'
0162<-----Source: line: 'return self.ctx.oficial_calcularIdentificadorAcreedor(cifEmpresa, codCuenta)'
0163     InstructionFlow: end-gen
0163    Source: end-gen
0163    Function: end: 'block-def-calcularIdentificadorAcreedor'
0163  <-Source: end: 'block-def-calcularIdentificadorAcreedor'
0163 <--Class: end: 'block-def-calcularIdentificadorAcreedor'
0163<---Source: end: 'block-def-calcularIdentificadorAcreedor'
0164   Function: end-gen
0164  Source: end-gen
0164  Class: end: 'block-class-oficial'
0164<-Source: end: 'block-class-oficial'
0165 Class: end-gen
0165 Class: begin-gen
0165  Class: line: 'class envioMail(oficial):'
0165<-Source: line: 'class envioMail(oficial):'
0166  Class: begin: 'block-class-envioMail'
0166<-Source: begin: 'block-class-envioMail'
0166  Source: begin-gen
0166   Function: begin-gen
0166    Variable: begin-gen
0166     Variable: expr: 'context'
0166    Variable: end-gen
0166    Function: line: 'def __init__(self, context = None):'
0166  <-Source: line: 'def __init__(self, context = None):'
0166 <--Class: line: 'def __init__(self, context = None):'
0166<---Source: line: 'def __init__(self, context = None):'
0167    Function: begin: 'block-def-__init__'
0167  <-Source: begin: 'block-def-__init__'
0167 <--Class: begin: 'block-def-__init__'
0167<---Source: begin: 'block-def-__init__'
0167    Source: begin-gen
0167     InstructionCall: begin-gen
0167      FunctionCall: begin-gen
0167       Value: begin-gen
0167        Identifier: begin-gen
0167         Identifier: expr: 'context'
0167       <-Value: expr: 'context'
0167        Identifier: end-gen
0167       Value: end-gen
0167       FunctionCall: expr: 'super(envioMail, self).__init__(context)'
0167      FunctionCall: end-gen
0167      InstructionCall: line: 'super(envioMail, self).__init__(context)'
0167    <-Source: line: 'super(envioMail, self).__init__(context)'
0167   <--Function: line: 'super(envioMail, self).__init__(context)'
0167  <---Source: line: 'super(envioMail, self).__init__(context)'
0167 <----Class: line: 'super(envioMail, self).__init__(context)'
0167<-----Source: line: 'super(envioMail, self).__init__(context)'
0168     InstructionCall: end-gen
0168    Source: end-gen
0168    Function: end: 'block-def-__init__'
0168  <-Source: end: 'block-def-__init__'
0168 <--Class: end: 'block-def-__init__'
0168<---Source: end: 'block-def-__init__'
0169   Function: end-gen
0169   Function: begin-gen
0169    Variable: begin-gen
0169     Variable: expr: 'cuerpo'
0169    Variable: end-gen
0169    Variable: begin-gen
0169     Variable: expr: 'asunto'
0169    Variable: end-gen
0169    Variable: begin-gen
0169     Variable: expr: 'arrayDest'
0169    Variable: end-gen
0169    Variable: begin-gen
0169     Variable: expr: 'arrayAttach'
0169    Variable: end-gen
0169    Function: line: 'def enviarCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
0169  <-Source: line: 'def enviarCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
0169 <--Class: line: 'def enviarCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
0169<---Source: line: 'def enviarCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
0170    Function: begin: 'block-def-enviarCorreo'
0170  <-Source: begin: 'block-def-enviarCorreo'
0170 <--Class: begin: 'block-def-enviarCorreo'
0170<---Source: begin: 'block-def-enviarCorreo'
0170    Source: begin-gen
0170     InstructionFlow: begin-gen
0170      Value: begin-gen
0170       Member: begin-gen
0170        Identifier: begin-gen
0170         Identifier: expr: 'self'
0170        Identifier: end-gen
0170        Identifier: begin-gen
0170         Identifier: expr: 'ctx'
0170        Identifier: end-gen
0170        FunctionCall: begin-gen
0170         Value: begin-gen
0170          Identifier: begin-gen
0170           Identifier: expr: 'cuerpo'
0170         <-Value: expr: 'cuerpo'
0170          Identifier: end-gen
0170         Value: end-gen
0170         Value: begin-gen
0170          Identifier: begin-gen
0170           Identifier: expr: 'asunto'
0170         <-Value: expr: 'asunto'
0170          Identifier: end-gen
0170         Value: end-gen
0170         Value: begin-gen
0170          Identifier: begin-gen
0170           Identifier: expr: 'arrayDest'
0170         <-Value: expr: 'arrayDest'
0170          Identifier: end-gen
0170         Value: end-gen
0170         Value: begin-gen
0170          Identifier: begin-gen
0170           Identifier: expr: 'arrayAttach'
0170         <-Value: expr: 'arrayAttach'
0170          Identifier: end-gen
0170         Value: end-gen
0170         FunctionCall: expr: 'envioMail_enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0170        FunctionCall: end-gen
0170        Member: expr: 'self.ctx.envioMail_enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0170      <-Value: expr: 'self.ctx.envioMail_enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0170       Member: end-gen
0170      Value: end-gen
0170      InstructionFlow: line: 'return self.ctx.envioMail_enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0170    <-Source: line: 'return self.ctx.envioMail_enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0170   <--Function: line: 'return self.ctx.envioMail_enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0170  <---Source: line: 'return self.ctx.envioMail_enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0170 <----Class: line: 'return self.ctx.envioMail_enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0170<-----Source: line: 'return self.ctx.envioMail_enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0171     InstructionFlow: end-gen
0171    Source: end-gen
0171    Function: end: 'block-def-enviarCorreo'
0171  <-Source: end: 'block-def-enviarCorreo'
0171 <--Class: end: 'block-def-enviarCorreo'
0171<---Source: end: 'block-def-enviarCorreo'
0172   Function: end-gen
0172   Function: begin-gen
0172    Variable: begin-gen
0172     Variable: expr: 'cuerpo'
0172    Variable: end-gen
0172    Variable: begin-gen
0172     Variable: expr: 'asunto'
0172    Variable: end-gen
0172    Variable: begin-gen
0172     Variable: expr: 'arrayDest'
0172    Variable: end-gen
0172    Variable: begin-gen
0172     Variable: expr: 'arrayAttach'
0172    Variable: end-gen
0172    Function: line: 'def componerCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
0172  <-Source: line: 'def componerCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
0172 <--Class: line: 'def componerCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
0172<---Source: line: 'def componerCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
0173    Function: begin: 'block-def-componerCorreo'
0173  <-Source: begin: 'block-def-componerCorreo'
0173 <--Class: begin: 'block-def-componerCorreo'
0173<---Source: begin: 'block-def-componerCorreo'
0173    Source: begin-gen
0173     InstructionFlow: begin-gen
0173      Value: begin-gen
0173       Member: begin-gen
0173        Identifier: begin-gen
0173         Identifier: expr: 'self'
0173        Identifier: end-gen
0173        Identifier: begin-gen
0173         Identifier: expr: 'ctx'
0173        Identifier: end-gen
0173        FunctionCall: begin-gen
0173         Value: begin-gen
0173          Identifier: begin-gen
0173           Identifier: expr: 'cuerpo'
0173         <-Value: expr: 'cuerpo'
0173          Identifier: end-gen
0173         Value: end-gen
0173         Value: begin-gen
0173          Identifier: begin-gen
0173           Identifier: expr: 'asunto'
0173         <-Value: expr: 'asunto'
0173          Identifier: end-gen
0173         Value: end-gen
0173         Value: begin-gen
0173          Identifier: begin-gen
0173           Identifier: expr: 'arrayDest'
0173         <-Value: expr: 'arrayDest'
0173          Identifier: end-gen
0173         Value: end-gen
0173         Value: begin-gen
0173          Identifier: begin-gen
0173           Identifier: expr: 'arrayAttach'
0173         <-Value: expr: 'arrayAttach'
0173          Identifier: end-gen
0173         Value: end-gen
0173         FunctionCall: expr: 'envioMail_componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0173        FunctionCall: end-gen
0173        Member: expr: 'self.ctx.envioMail_componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0173      <-Value: expr: 'self.ctx.envioMail_componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0173       Member: end-gen
0173      Value: end-gen
0173      InstructionFlow: line: 'return self.ctx.envioMail_componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0173    <-Source: line: 'return self.ctx.envioMail_componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0173   <--Function: line: 'return self.ctx.envioMail_componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0173  <---Source: line: 'return self.ctx.envioMail_componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0173 <----Class: line: 'return self.ctx.envioMail_componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0173<-----Source: line: 'return self.ctx.envioMail_componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0174     InstructionFlow: end-gen
0174    Source: end-gen
0174    Function: end: 'block-def-componerCorreo'
0174  <-Source: end: 'block-def-componerCorreo'
0174 <--Class: end: 'block-def-componerCorreo'
0174<---Source: end: 'block-def-componerCorreo'
0175   Function: end-gen
0175   Function: begin-gen
0175    Variable: begin-gen
0175     Variable: expr: 'codigo'
0175    Variable: end-gen
0175    Variable: begin-gen
0175     Variable: expr: 'tabla'
0175    Variable: end-gen
0175    Function: line: 'def componerListaDestinatarios(self, codigo = None, tabla = None):'
0175  <-Source: line: 'def componerListaDestinatarios(self, codigo = None, tabla = None):'
0175 <--Class: line: 'def componerListaDestinatarios(self, codigo = None, tabla = None):'
0175<---Source: line: 'def componerListaDestinatarios(self, codigo = None, tabla = None):'
0176    Function: begin: 'block-def-componerListaDestinatarios'
0176  <-Source: begin: 'block-def-componerListaDestinatarios'
0176 <--Class: begin: 'block-def-componerListaDestinatarios'
0176<---Source: begin: 'block-def-componerListaDestinatarios'
0176    Source: begin-gen
0176     InstructionFlow: begin-gen
0176      Value: begin-gen
0176       Member: begin-gen
0176        Identifier: begin-gen
0176         Identifier: expr: 'self'
0176        Identifier: end-gen
0176        Identifier: begin-gen
0176         Identifier: expr: 'ctx'
0176        Identifier: end-gen
0176        FunctionCall: begin-gen
0176         Value: begin-gen
0176          Identifier: begin-gen
0176           Identifier: expr: 'codigo'
0176         <-Value: expr: 'codigo'
0176          Identifier: end-gen
0176         Value: end-gen
0176         Value: begin-gen
0176          Identifier: begin-gen
0176           Identifier: expr: 'tabla'
0176         <-Value: expr: 'tabla'
0176          Identifier: end-gen
0176         Value: end-gen
0176         FunctionCall: expr: 'envioMail_componerListaDestinatarios(codigo, tabla)'
0176        FunctionCall: end-gen
0176        Member: expr: 'self.ctx.envioMail_componerListaDestinatarios(codigo, tabla)'
0176      <-Value: expr: 'self.ctx.envioMail_componerListaDestinatarios(codigo, tabla)'
0176       Member: end-gen
0176      Value: end-gen
0176      InstructionFlow: line: 'return self.ctx.envioMail_componerListaDestinatarios(codigo, tabla)'
0176    <-Source: line: 'return self.ctx.envioMail_componerListaDestinatarios(codigo, tabla)'
0176   <--Function: line: 'return self.ctx.envioMail_componerListaDestinatarios(codigo, tabla)'
0176  <---Source: line: 'return self.ctx.envioMail_componerListaDestinatarios(codigo, tabla)'
0176 <----Class: line: 'return self.ctx.envioMail_componerListaDestinatarios(codigo, tabla)'
0176<-----Source: line: 'return self.ctx.envioMail_componerListaDestinatarios(codigo, tabla)'
0177     InstructionFlow: end-gen
0177    Source: end-gen
0177    Function: end: 'block-def-componerListaDestinatarios'
0177  <-Source: end: 'block-def-componerListaDestinatarios'
0177 <--Class: end: 'block-def-componerListaDestinatarios'
0177<---Source: end: 'block-def-componerListaDestinatarios'
0178   Function: end-gen
0178   Function: begin-gen
0178    Function: line: 'def existeEnvioMail(self):'
0178  <-Source: line: 'def existeEnvioMail(self):'
0178 <--Class: line: 'def existeEnvioMail(self):'
0178<---Source: line: 'def existeEnvioMail(self):'
0179    Function: begin: 'block-def-existeEnvioMail'
0179  <-Source: begin: 'block-def-existeEnvioMail'
0179 <--Class: begin: 'block-def-existeEnvioMail'
0179<---Source: begin: 'block-def-existeEnvioMail'
0179    Source: begin-gen
0179     InstructionFlow: begin-gen
0179      Value: begin-gen
0179       Member: begin-gen
0179        Identifier: begin-gen
0179         Identifier: expr: 'self'
0179        Identifier: end-gen
0179        Identifier: begin-gen
0179         Identifier: expr: 'ctx'
0179        Identifier: end-gen
0179        FunctionCall: begin-gen
0179         FunctionCall: expr: 'envioMail_existeEnvioMail()'
0179        FunctionCall: end-gen
0179        Member: expr: 'self.ctx.envioMail_existeEnvioMail()'
0179      <-Value: expr: 'self.ctx.envioMail_existeEnvioMail()'
0179       Member: end-gen
0179      Value: end-gen
0179      InstructionFlow: line: 'return self.ctx.envioMail_existeEnvioMail()'
0179    <-Source: line: 'return self.ctx.envioMail_existeEnvioMail()'
0179   <--Function: line: 'return self.ctx.envioMail_existeEnvioMail()'
0179  <---Source: line: 'return self.ctx.envioMail_existeEnvioMail()'
0179 <----Class: line: 'return self.ctx.envioMail_existeEnvioMail()'
0179<-----Source: line: 'return self.ctx.envioMail_existeEnvioMail()'
0180     InstructionFlow: end-gen
0180    Source: end-gen
0180    Function: end: 'block-def-existeEnvioMail'
0180  <-Source: end: 'block-def-existeEnvioMail'
0180 <--Class: end: 'block-def-existeEnvioMail'
0180<---Source: end: 'block-def-existeEnvioMail'
0181   Function: end-gen
0181  Source: end-gen
0181  Class: end: 'block-class-envioMail'
0181<-Source: end: 'block-class-envioMail'
0182 Class: end-gen
0182 Class: begin-gen
0182  Class: line: 'class dtoEsp(envioMail):'
0182<-Source: line: 'class dtoEsp(envioMail):'
0183  Class: begin: 'block-class-dtoEsp'
0183<-Source: begin: 'block-class-dtoEsp'
0183  Source: begin-gen
0183   Function: begin-gen
0183    Variable: begin-gen
0183     Variable: expr: 'context'
0183    Variable: end-gen
0183    Function: line: 'def __init__(self, context = None):'
0183  <-Source: line: 'def __init__(self, context = None):'
0183 <--Class: line: 'def __init__(self, context = None):'
0183<---Source: line: 'def __init__(self, context = None):'
0184    Function: begin: 'block-def-__init__'
0184  <-Source: begin: 'block-def-__init__'
0184 <--Class: begin: 'block-def-__init__'
0184<---Source: begin: 'block-def-__init__'
0184    Source: begin-gen
0184     InstructionCall: begin-gen
0184      FunctionCall: begin-gen
0184       Value: begin-gen
0184        Identifier: begin-gen
0184         Identifier: expr: 'context'
0184       <-Value: expr: 'context'
0184        Identifier: end-gen
0184       Value: end-gen
0184       FunctionCall: expr: 'super(dtoEsp, self).__init__(context)'
0184      FunctionCall: end-gen
0184      InstructionCall: line: 'super(dtoEsp, self).__init__(context)'
0184    <-Source: line: 'super(dtoEsp, self).__init__(context)'
0184   <--Function: line: 'super(dtoEsp, self).__init__(context)'
0184  <---Source: line: 'super(dtoEsp, self).__init__(context)'
0184 <----Class: line: 'super(dtoEsp, self).__init__(context)'
0184<-----Source: line: 'super(dtoEsp, self).__init__(context)'
0185     InstructionCall: end-gen
0185    Source: end-gen
0185    Function: end: 'block-def-__init__'
0185  <-Source: end: 'block-def-__init__'
0185 <--Class: end: 'block-def-__init__'
0185<---Source: end: 'block-def-__init__'
0186   Function: end-gen
0186   Function: begin-gen
0186    Variable: begin-gen
0186     Variable: expr: 'codLiquidacion'
0186    Variable: end-gen
0186    Function: line: 'def calcularLiquidacionAgente(self, codLiquidacion = None):'
0186  <-Source: line: 'def calcularLiquidacionAgente(self, codLiquidacion = None):'
0186 <--Class: line: 'def calcularLiquidacionAgente(self, codLiquidacion = None):'
0186<---Source: line: 'def calcularLiquidacionAgente(self, codLiquidacion = None):'
0187    Function: begin: 'block-def-calcularLiquidacionAgente'
0187  <-Source: begin: 'block-def-calcularLiquidacionAgente'
0187 <--Class: begin: 'block-def-calcularLiquidacionAgente'
0187<---Source: begin: 'block-def-calcularLiquidacionAgente'
0187    Source: begin-gen
0187     InstructionFlow: begin-gen
0187      Value: begin-gen
0187       Member: begin-gen
0187        Identifier: begin-gen
0187         Identifier: expr: 'self'
0187        Identifier: end-gen
0187        Identifier: begin-gen
0187         Identifier: expr: 'ctx'
0187        Identifier: end-gen
0187        FunctionCall: begin-gen
0187         Value: begin-gen
0187          Identifier: begin-gen
0187           Identifier: expr: 'codLiquidacion'
0187         <-Value: expr: 'codLiquidacion'
0187          Identifier: end-gen
0187         Value: end-gen
0187         FunctionCall: expr: 'dtoEsp_calcularLiquidacionAgente(codLiquidacion)'
0187        FunctionCall: end-gen
0187        Member: expr: 'self.ctx.dtoEsp_calcularLiquidacionAgente(codLiquidacion)'
0187      <-Value: expr: 'self.ctx.dtoEsp_calcularLiquidacionAgente(codLiquidacion)'
0187       Member: end-gen
0187      Value: end-gen
0187      InstructionFlow: line: 'return self.ctx.dtoEsp_calcularLiquidacionAgente(codLiquidacion)'
0187    <-Source: line: 'return self.ctx.dtoEsp_calcularLiquidacionAgente(codLiquidacion)'
0187   <--Function: line: 'return self.ctx.dtoEsp_calcularLiquidacionAgente(codLiquidacion)'
0187  <---Source: line: 'return self.ctx.dtoEsp_calcularLiquidacionAgente(codLiquidacion)'
0187 <----Class: line: 'return self.ctx.dtoEsp_calcularLiquidacionAgente(codLiquidacion)'
0187<-----Source: line: 'return self.ctx.dtoEsp_calcularLiquidacionAgente(codLiquidacion)'
0188     InstructionFlow: end-gen
0188    Source: end-gen
0188    Function: end: 'block-def-calcularLiquidacionAgente'
0188  <-Source: end: 'block-def-calcularLiquidacionAgente'
0188 <--Class: end: 'block-def-calcularLiquidacionAgente'
0188<---Source: end: 'block-def-calcularLiquidacionAgente'
0189   Function: end-gen
0189  Source: end-gen
0189  Class: end: 'block-class-dtoEsp'
0189<-Source: end: 'block-class-dtoEsp'
0190 Class: end-gen
0190 Class: begin-gen
0190  Class: line: 'class pubEnvioMail(dtoEsp):'
0190<-Source: line: 'class pubEnvioMail(dtoEsp):'
0191  Class: begin: 'block-class-pubEnvioMail'
0191<-Source: begin: 'block-class-pubEnvioMail'
0191  Source: begin-gen
0191   Function: begin-gen
0191    Variable: begin-gen
0191     Variable: expr: 'context'
0191    Variable: end-gen
0191    Function: line: 'def __init__(self, context = None):'
0191  <-Source: line: 'def __init__(self, context = None):'
0191 <--Class: line: 'def __init__(self, context = None):'
0191<---Source: line: 'def __init__(self, context = None):'
0192    Function: begin: 'block-def-__init__'
0192  <-Source: begin: 'block-def-__init__'
0192 <--Class: begin: 'block-def-__init__'
0192<---Source: begin: 'block-def-__init__'
0192    Source: begin-gen
0192     InstructionCall: begin-gen
0192      FunctionCall: begin-gen
0192       Value: begin-gen
0192        Identifier: begin-gen
0192         Identifier: expr: 'context'
0192       <-Value: expr: 'context'
0192        Identifier: end-gen
0192       Value: end-gen
0192       FunctionCall: expr: 'super(pubEnvioMail, self).__init__(context)'
0192      FunctionCall: end-gen
0192      InstructionCall: line: 'super(pubEnvioMail, self).__init__(context)'
0192    <-Source: line: 'super(pubEnvioMail, self).__init__(context)'
0192   <--Function: line: 'super(pubEnvioMail, self).__init__(context)'
0192  <---Source: line: 'super(pubEnvioMail, self).__init__(context)'
0192 <----Class: line: 'super(pubEnvioMail, self).__init__(context)'
0192<-----Source: line: 'super(pubEnvioMail, self).__init__(context)'
0193     InstructionCall: end-gen
0193    Source: end-gen
0193    Function: end: 'block-def-__init__'
0193  <-Source: end: 'block-def-__init__'
0193 <--Class: end: 'block-def-__init__'
0193<---Source: end: 'block-def-__init__'
0194   Function: end-gen
0194   Function: begin-gen
0194    Variable: begin-gen
0194     Variable: expr: 'cuerpo'
0194    Variable: end-gen
0194    Variable: begin-gen
0194     Variable: expr: 'asunto'
0194    Variable: end-gen
0194    Variable: begin-gen
0194     Variable: expr: 'arrayDest'
0194    Variable: end-gen
0194    Variable: begin-gen
0194     Variable: expr: 'arrayAttach'
0194    Variable: end-gen
0194    Function: line: 'def pub_enviarCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
0194  <-Source: line: 'def pub_enviarCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
0194 <--Class: line: 'def pub_enviarCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
0194<---Source: line: 'def pub_enviarCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
0195    Function: begin: 'block-def-pub_enviarCorreo'
0195  <-Source: begin: 'block-def-pub_enviarCorreo'
0195 <--Class: begin: 'block-def-pub_enviarCorreo'
0195<---Source: begin: 'block-def-pub_enviarCorreo'
0195    Source: begin-gen
0195     InstructionFlow: begin-gen
0195      Value: begin-gen
0195       Member: begin-gen
0195        Identifier: begin-gen
0195         Identifier: expr: 'self'
0195        Identifier: end-gen
0195        FunctionCall: begin-gen
0195         Value: begin-gen
0195          Identifier: begin-gen
0195           Identifier: expr: 'cuerpo'
0195         <-Value: expr: 'cuerpo'
0195          Identifier: end-gen
0195         Value: end-gen
0195         Value: begin-gen
0195          Identifier: begin-gen
0195           Identifier: expr: 'asunto'
0195         <-Value: expr: 'asunto'
0195          Identifier: end-gen
0195         Value: end-gen
0195         Value: begin-gen
0195          Identifier: begin-gen
0195           Identifier: expr: 'arrayDest'
0195         <-Value: expr: 'arrayDest'
0195          Identifier: end-gen
0195         Value: end-gen
0195         Value: begin-gen
0195          Identifier: begin-gen
0195           Identifier: expr: 'arrayAttach'
0195         <-Value: expr: 'arrayAttach'
0195          Identifier: end-gen
0195         Value: end-gen
0195         FunctionCall: expr: 'enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0195        FunctionCall: end-gen
0195        Member: expr: 'self.enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0195      <-Value: expr: 'self.enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0195       Member: end-gen
0195      Value: end-gen
0195      InstructionFlow: line: 'return self.enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0195    <-Source: line: 'return self.enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0195   <--Function: line: 'return self.enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0195  <---Source: line: 'return self.enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0195 <----Class: line: 'return self.enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0195<-----Source: line: 'return self.enviarCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
0196     InstructionFlow: end-gen
0196    Source: end-gen
0196    Function: end: 'block-def-pub_enviarCorreo'
0196  <-Source: end: 'block-def-pub_enviarCorreo'
0196 <--Class: end: 'block-def-pub_enviarCorreo'
0196<---Source: end: 'block-def-pub_enviarCorreo'
0197   Function: end-gen
0197   Function: begin-gen
0197    Variable: begin-gen
0197     Variable: expr: 'codigo'
0197    Variable: end-gen
0197    Variable: begin-gen
0197     Variable: expr: 'tabla'
0197    Variable: end-gen
0197    Function: line: 'def pub_componerListaDestinatarios(self, codigo = None, tabla = None):'
0197  <-Source: line: 'def pub_componerListaDestinatarios(self, codigo = None, tabla = None):'
0197 <--Class: line: 'def pub_componerListaDestinatarios(self, codigo = None, tabla = None):'
0197<---Source: line: 'def pub_componerListaDestinatarios(self, codigo = None, tabla = None):'
0198    Function: begin: 'block-def-pub_componerListaDestinatarios'
0198  <-Source: begin: 'block-def-pub_componerListaDestinatarios'
0198 <--Class: begin: 'block-def-pub_componerListaDestinatarios'
0198<---Source: begin: 'block-def-pub_componerListaDestinatarios'
0198    Source: begin-gen
0198     InstructionFlow: begin-gen
0198      Value: begin-gen
0198       Member: begin-gen
0198        Identifier: begin-gen
0198         Identifier: expr: 'self'
0198        Identifier: end-gen
0198        FunctionCall: begin-gen
0198         Value: begin-gen
0198          Identifier: begin-gen
0198           Identifier: expr: 'codigo'
0198         <-Value: expr: 'codigo'
0198          Identifier: end-gen
0198         Value: end-gen
0198         Value: begin-gen
0198          Identifier: begin-gen
0198           Identifier: expr: 'tabla'
0198         <-Value: expr: 'tabla'
0198          Identifier: end-gen
0198         Value: end-gen
0198         FunctionCall: expr: 'componerListaDestinatarios(codigo, tabla)'
0198        FunctionCall: end-gen
0198        Member: expr: 'self.componerListaDestinatarios(codigo, tabla)'
0198      <-Value: expr: 'self.componerListaDestinatarios(codigo, tabla)'
0198       Member: end-gen
0198      Value: end-gen
0198      InstructionFlow: line: 'return self.componerListaDestinatarios(codigo, tabla)'
0198    <-Source: line: 'return self.componerListaDestinatarios(codigo, tabla)'
0198   <--Function: line: 'return self.componerListaDestinatarios(codigo, tabla)'
0198  <---Source: line: 'return self.componerListaDestinatarios(codigo, tabla)'
0198 <----Class: line: 'return self.componerListaDestinatarios(codigo, tabla)'
0198<-----Source: line: 'return self.componerListaDestinatarios(codigo, tabla)'
0199     InstructionFlow: end-gen
0199    Source: end-gen
0199    Function: end: 'block-def-pub_componerListaDestinatarios'
0199  <-Source: end: 'block-def-pub_componerListaDestinatarios'
0199 <--Class: end: 'block-def-pub_componerListaDestinatarios'
0199<---Source: end: 'block-def-pub_componerListaDestinatarios'
0200   Function: end-gen
0200   Function: begin-gen
0200    Function: line: 'def pub_existeEnvioMail(self):'
0200  <-Source: line: 'def pub_existeEnvioMail(self):'
0200 <--Class: line: 'def pub_existeEnvioMail(self):'
0200<---Source: line: 'def pub_existeEnvioMail(self):'
0201    Function: begin: 'block-def-pub_existeEnvioMail'
0201  <-Source: begin: 'block-def-pub_existeEnvioMail'
0201 <--Class: begin: 'block-def-pub_existeEnvioMail'
0201<---Source: begin: 'block-def-pub_existeEnvioMail'
0201    Source: begin-gen
0201     InstructionFlow: begin-gen
0201      Value: begin-gen
0201       Member: begin-gen
0201        Identifier: begin-gen
0201         Identifier: expr: 'self'
0201        Identifier: end-gen
0201        FunctionCall: begin-gen
0201         FunctionCall: expr: 'existeEnvioMail()'
0201        FunctionCall: end-gen
0201        Member: expr: 'self.existeEnvioMail()'
0201      <-Value: expr: 'self.existeEnvioMail()'
0201       Member: end-gen
0201      Value: end-gen
0201      InstructionFlow: line: 'return self.existeEnvioMail()'
0201    <-Source: line: 'return self.existeEnvioMail()'
0201   <--Function: line: 'return self.existeEnvioMail()'
0201  <---Source: line: 'return self.existeEnvioMail()'
0201 <----Class: line: 'return self.existeEnvioMail()'
0201<-----Source: line: 'return self.existeEnvioMail()'
0202     InstructionFlow: end-gen
0202    Source: end-gen
0202    Function: end: 'block-def-pub_existeEnvioMail'
0202  <-Source: end: 'block-def-pub_existeEnvioMail'
0202 <--Class: end: 'block-def-pub_existeEnvioMail'
0202<---Source: end: 'block-def-pub_existeEnvioMail'
0203   Function: end-gen
0203  Source: end-gen
0203  Class: end: 'block-class-pubEnvioMail'
0203<-Source: end: 'block-class-pubEnvioMail'
0204 Class: end-gen
0204 Class: begin-gen
0204  Class: line: 'class head(pubEnvioMail):'
0204<-Source: line: 'class head(pubEnvioMail):'
0205  Class: begin: 'block-class-head'
0205<-Source: begin: 'block-class-head'
0205  Source: begin-gen
0205   Function: begin-gen
0205    Variable: begin-gen
0205     Variable: expr: 'context'
0205    Variable: end-gen
0205    Function: line: 'def __init__(self, context = None):'
0205  <-Source: line: 'def __init__(self, context = None):'
0205 <--Class: line: 'def __init__(self, context = None):'
0205<---Source: line: 'def __init__(self, context = None):'
0206    Function: begin: 'block-def-__init__'
0206  <-Source: begin: 'block-def-__init__'
0206 <--Class: begin: 'block-def-__init__'
0206<---Source: begin: 'block-def-__init__'
0206    Source: begin-gen
0206     InstructionCall: begin-gen
0206      FunctionCall: begin-gen
0206       Value: begin-gen
0206        Identifier: begin-gen
0206         Identifier: expr: 'context'
0206       <-Value: expr: 'context'
0206        Identifier: end-gen
0206       Value: end-gen
0206       FunctionCall: expr: 'super(head, self).__init__(context)'
0206      FunctionCall: end-gen
0206      InstructionCall: line: 'super(head, self).__init__(context)'
0206    <-Source: line: 'super(head, self).__init__(context)'
0206   <--Function: line: 'super(head, self).__init__(context)'
0206  <---Source: line: 'super(head, self).__init__(context)'
0206 <----Class: line: 'super(head, self).__init__(context)'
0206<-----Source: line: 'super(head, self).__init__(context)'
0207     InstructionCall: end-gen
0207    Source: end-gen
0207    Function: end: 'block-def-__init__'
0207  <-Source: end: 'block-def-__init__'
0207 <--Class: end: 'block-def-__init__'
0207<---Source: end: 'block-def-__init__'
0208   Function: end-gen
0208  Source: end-gen
0208  Class: end: 'block-class-head'
0208<-Source: end: 'block-class-head'
0209 Class: end-gen
0209 Class: begin-gen
0209  Class: line: 'class ifaceCtx(head):'
0209<-Source: line: 'class ifaceCtx(head):'
0210  Class: begin: 'block-class-ifaceCtx'
0210<-Source: begin: 'block-class-ifaceCtx'
0210  Source: begin-gen
0210   Function: begin-gen
0210    Variable: begin-gen
0210     Variable: expr: 'context'
0210    Variable: end-gen
0210    Function: line: 'def __init__(self, context = None):'
0210  <-Source: line: 'def __init__(self, context = None):'
0210 <--Class: line: 'def __init__(self, context = None):'
0210<---Source: line: 'def __init__(self, context = None):'
0211    Function: begin: 'block-def-__init__'
0211  <-Source: begin: 'block-def-__init__'
0211 <--Class: begin: 'block-def-__init__'
0211<---Source: begin: 'block-def-__init__'
0211    Source: begin-gen
0211     InstructionCall: begin-gen
0211      FunctionCall: begin-gen
0211       Value: begin-gen
0211        Identifier: begin-gen
0211         Identifier: expr: 'context'
0211       <-Value: expr: 'context'
0211        Identifier: end-gen
0211       Value: end-gen
0211       FunctionCall: expr: 'super(ifaceCtx, self).__init__(context)'
0211      FunctionCall: end-gen
0211      InstructionCall: line: 'super(ifaceCtx, self).__init__(context)'
0211    <-Source: line: 'super(ifaceCtx, self).__init__(context)'
0211   <--Function: line: 'super(ifaceCtx, self).__init__(context)'
0211  <---Source: line: 'super(ifaceCtx, self).__init__(context)'
0211 <----Class: line: 'super(ifaceCtx, self).__init__(context)'
0211<-----Source: line: 'super(ifaceCtx, self).__init__(context)'
0212     InstructionCall: end-gen
0212    Source: end-gen
0212    Function: end: 'block-def-__init__'
0212  <-Source: end: 'block-def-__init__'
0212 <--Class: end: 'block-def-__init__'
0212<---Source: end: 'block-def-__init__'
0213   Function: end-gen
0213   Function: begin-gen
0213    Variable: begin-gen
0213     Variable: expr: 'modulo'
0213    Variable: end-gen
0213    Function: line: 'def pub_msgNoDisponible(self, modulo = None):'
0213  <-Source: line: 'def pub_msgNoDisponible(self, modulo = None):'
0213 <--Class: line: 'def pub_msgNoDisponible(self, modulo = None):'
0213<---Source: line: 'def pub_msgNoDisponible(self, modulo = None):'
0214    Function: begin: 'block-def-pub_msgNoDisponible'
0214  <-Source: begin: 'block-def-pub_msgNoDisponible'
0214 <--Class: begin: 'block-def-pub_msgNoDisponible'
0214<---Source: begin: 'block-def-pub_msgNoDisponible'
0214    Source: begin-gen
0214     InstructionFlow: begin-gen
0214      Value: begin-gen
0214       Member: begin-gen
0214        Identifier: begin-gen
0214         Identifier: expr: 'self'
0214        Identifier: end-gen
0214        FunctionCall: begin-gen
0214         Value: begin-gen
0214          Identifier: begin-gen
0214           Identifier: expr: 'modulo'
0214         <-Value: expr: 'modulo'
0214          Identifier: end-gen
0214         Value: end-gen
0214         FunctionCall: expr: 'msgNoDisponible(modulo)'
0214        FunctionCall: end-gen
0214        Member: expr: 'self.msgNoDisponible(modulo)'
0214      <-Value: expr: 'self.msgNoDisponible(modulo)'
0214       Member: end-gen
0214      Value: end-gen
0214      InstructionFlow: line: 'return self.msgNoDisponible(modulo)'
0214    <-Source: line: 'return self.msgNoDisponible(modulo)'
0214   <--Function: line: 'return self.msgNoDisponible(modulo)'
0214  <---Source: line: 'return self.msgNoDisponible(modulo)'
0214 <----Class: line: 'return self.msgNoDisponible(modulo)'
0214<-----Source: line: 'return self.msgNoDisponible(modulo)'
0215     InstructionFlow: end-gen
0215    Source: end-gen
0215    Function: end: 'block-def-pub_msgNoDisponible'
0215  <-Source: end: 'block-def-pub_msgNoDisponible'
0215 <--Class: end: 'block-def-pub_msgNoDisponible'
0215<---Source: end: 'block-def-pub_msgNoDisponible'
0216   Function: end-gen
0216   Function: begin-gen
0216    Variable: begin-gen
0216     Variable: expr: 'tabla'
0216    Variable: end-gen
0216    Variable: begin-gen
0216     Variable: expr: 'campos'
0216    Variable: end-gen
0216    Variable: begin-gen
0216     Variable: expr: 'where'
0216    Variable: end-gen
0216    Variable: begin-gen
0216     Variable: expr: 'listaTablas'
0216    Variable: end-gen
0216    Function: line: 'def pub_ejecutarQry(self, tabla = None, campos = None, where = None, listaTablas = None):'
0216  <-Source: line: 'def pub_ejecutarQry(self, tabla = None, campos = None, where = None, listaTablas = None):'
0216 <--Class: line: 'def pub_ejecutarQry(self, tabla = None, campos = None, where = None, listaTablas = None):'
0216<---Source: line: 'def pub_ejecutarQry(self, tabla = None, campos = None, where = None, listaTablas = None):'
0217    Function: begin: 'block-def-pub_ejecutarQry'
0217  <-Source: begin: 'block-def-pub_ejecutarQry'
0217 <--Class: begin: 'block-def-pub_ejecutarQry'
0217<---Source: begin: 'block-def-pub_ejecutarQry'
0217    Source: begin-gen
0217     InstructionFlow: begin-gen
0217      Value: begin-gen
0217       Member: begin-gen
0217        Identifier: begin-gen
0217         Identifier: expr: 'self'
0217        Identifier: end-gen
0217        FunctionCall: begin-gen
0217         Value: begin-gen
0217          Identifier: begin-gen
0217           Identifier: expr: 'tabla'
0217         <-Value: expr: 'tabla'
0217          Identifier: end-gen
0217         Value: end-gen
0217         Value: begin-gen
0217          Identifier: begin-gen
0217           Identifier: expr: 'campos'
0217         <-Value: expr: 'campos'
0217          Identifier: end-gen
0217         Value: end-gen
0217         Value: begin-gen
0217          Identifier: begin-gen
0217           Identifier: expr: 'where'
0217         <-Value: expr: 'where'
0217          Identifier: end-gen
0217         Value: end-gen
0217         Value: begin-gen
0217          Identifier: begin-gen
0217           Identifier: expr: 'listaTablas'
0217         <-Value: expr: 'listaTablas'
0217          Identifier: end-gen
0217         Value: end-gen
0217         FunctionCall: expr: 'ejecutarQry(tabla, campos, where, listaTablas)'
0217        FunctionCall: end-gen
0217        Member: expr: 'self.ejecutarQry(tabla, campos, where, listaTablas)'
0217      <-Value: expr: 'self.ejecutarQry(tabla, campos, where, listaTablas)'
0217       Member: end-gen
0217      Value: end-gen
0217      InstructionFlow: line: 'return self.ejecutarQry(tabla, campos, where, listaTablas)'
0217    <-Source: line: 'return self.ejecutarQry(tabla, campos, where, listaTablas)'
0217   <--Function: line: 'return self.ejecutarQry(tabla, campos, where, listaTablas)'
0217  <---Source: line: 'return self.ejecutarQry(tabla, campos, where, listaTablas)'
0217 <----Class: line: 'return self.ejecutarQry(tabla, campos, where, listaTablas)'
0217<-----Source: line: 'return self.ejecutarQry(tabla, campos, where, listaTablas)'
0218     InstructionFlow: end-gen
0218    Source: end-gen
0218    Function: end: 'block-def-pub_ejecutarQry'
0218  <-Source: end: 'block-def-pub_ejecutarQry'
0218 <--Class: end: 'block-def-pub_ejecutarQry'
0218<---Source: end: 'block-def-pub_ejecutarQry'
0219   Function: end-gen
0219   Function: begin-gen
0219    Variable: begin-gen
0219     Variable: expr: 'fN'
0219    Variable: end-gen
0219    Function: line: 'def pub_valorDefectoEmpresa(self, fN = None):'
0219  <-Source: line: 'def pub_valorDefectoEmpresa(self, fN = None):'
0219 <--Class: line: 'def pub_valorDefectoEmpresa(self, fN = None):'
0219<---Source: line: 'def pub_valorDefectoEmpresa(self, fN = None):'
0220    Function: begin: 'block-def-pub_valorDefectoEmpresa'
0220  <-Source: begin: 'block-def-pub_valorDefectoEmpresa'
0220 <--Class: begin: 'block-def-pub_valorDefectoEmpresa'
0220<---Source: begin: 'block-def-pub_valorDefectoEmpresa'
0220    Source: begin-gen
0220     InstructionFlow: begin-gen
0220      Value: begin-gen
0220       Member: begin-gen
0220        Identifier: begin-gen
0220         Identifier: expr: 'self'
0220        Identifier: end-gen
0220        FunctionCall: begin-gen
0220         Value: begin-gen
0220          Identifier: begin-gen
0220           Identifier: expr: 'fN'
0220         <-Value: expr: 'fN'
0220          Identifier: end-gen
0220         Value: end-gen
0220         FunctionCall: expr: 'valorDefectoEmpresa(fN)'
0220        FunctionCall: end-gen
0220        Member: expr: 'self.valorDefectoEmpresa(fN)'
0220      <-Value: expr: 'self.valorDefectoEmpresa(fN)'
0220       Member: end-gen
0220      Value: end-gen
0220      InstructionFlow: line: 'return self.valorDefectoEmpresa(fN)'
0220    <-Source: line: 'return self.valorDefectoEmpresa(fN)'
0220   <--Function: line: 'return self.valorDefectoEmpresa(fN)'
0220  <---Source: line: 'return self.valorDefectoEmpresa(fN)'
0220 <----Class: line: 'return self.valorDefectoEmpresa(fN)'
0220<-----Source: line: 'return self.valorDefectoEmpresa(fN)'
0221     InstructionFlow: end-gen
0221    Source: end-gen
0221    Function: end: 'block-def-pub_valorDefectoEmpresa'
0221  <-Source: end: 'block-def-pub_valorDefectoEmpresa'
0221 <--Class: end: 'block-def-pub_valorDefectoEmpresa'
0221<---Source: end: 'block-def-pub_valorDefectoEmpresa'
0222   Function: end-gen
0222   Function: begin-gen
0222    Variable: begin-gen
0222     Variable: expr: 'tablas'
0222    Variable: end-gen
0222    Variable: begin-gen
0222     Variable: expr: 'select'
0222    Variable: end-gen
0222    Variable: begin-gen
0222     Variable: expr: 'from_'
0222    Variable: end-gen
0222    Variable: begin-gen
0222     Variable: expr: 'where'
0222    Variable: end-gen
0222    Function: line: 'def pub_valorQuery(self, tablas = None, select = None, from_ = None, where = None):'
0222  <-Source: line: 'def pub_valorQuery(self, tablas = None, select = None, from_ = None, where = None):'
0222 <--Class: line: 'def pub_valorQuery(self, tablas = None, select = None, from_ = None, where = None):'
0222<---Source: line: 'def pub_valorQuery(self, tablas = None, select = None, from_ = None, where = None):'
0223    Function: begin: 'block-def-pub_valorQuery'
0223  <-Source: begin: 'block-def-pub_valorQuery'
0223 <--Class: begin: 'block-def-pub_valorQuery'
0223<---Source: begin: 'block-def-pub_valorQuery'
0223    Source: begin-gen
0223     InstructionFlow: begin-gen
0223      Value: begin-gen
0223       Member: begin-gen
0223        Identifier: begin-gen
0223         Identifier: expr: 'self'
0223        Identifier: end-gen
0223        FunctionCall: begin-gen
0223         Value: begin-gen
0223          Identifier: begin-gen
0223           Identifier: expr: 'tablas'
0223         <-Value: expr: 'tablas'
0223          Identifier: end-gen
0223         Value: end-gen
0223         Value: begin-gen
0223          Identifier: begin-gen
0223           Identifier: expr: 'select'
0223         <-Value: expr: 'select'
0223          Identifier: end-gen
0223         Value: end-gen
0223         Value: begin-gen
0223          Identifier: begin-gen
0223           Identifier: expr: 'from_'
0223         <-Value: expr: 'from_'
0223          Identifier: end-gen
0223         Value: end-gen
0223         Value: begin-gen
0223          Identifier: begin-gen
0223           Identifier: expr: 'where'
0223         <-Value: expr: 'where'
0223          Identifier: end-gen
0223         Value: end-gen
0223         FunctionCall: expr: 'valorQuery(tablas, select, from_, where)'
0223        FunctionCall: end-gen
0223        Member: expr: 'self.valorQuery(tablas, select, from_, where)'
0223      <-Value: expr: 'self.valorQuery(tablas, select, from_, where)'
0223       Member: end-gen
0223      Value: end-gen
0223      InstructionFlow: line: 'return self.valorQuery(tablas, select, from_, where)'
0223    <-Source: line: 'return self.valorQuery(tablas, select, from_, where)'
0223   <--Function: line: 'return self.valorQuery(tablas, select, from_, where)'
0223  <---Source: line: 'return self.valorQuery(tablas, select, from_, where)'
0223 <----Class: line: 'return self.valorQuery(tablas, select, from_, where)'
0223<-----Source: line: 'return self.valorQuery(tablas, select, from_, where)'
0224     InstructionFlow: end-gen
0224    Source: end-gen
0224    Function: end: 'block-def-pub_valorQuery'
0224  <-Source: end: 'block-def-pub_valorQuery'
0224 <--Class: end: 'block-def-pub_valorQuery'
0224<---Source: end: 'block-def-pub_valorQuery'
0225   Function: end-gen
0225   Function: begin-gen
0225    Variable: begin-gen
0225     Variable: expr: 'numero'
0225    Variable: end-gen
0225    Variable: begin-gen
0225     Variable: expr: 'totalCifras'
0225    Variable: end-gen
0225    Function: line: 'def pub_cerosIzquierda(self, numero = None, totalCifras = None):'
0225  <-Source: line: 'def pub_cerosIzquierda(self, numero = None, totalCifras = None):'
0225 <--Class: line: 'def pub_cerosIzquierda(self, numero = None, totalCifras = None):'
0225<---Source: line: 'def pub_cerosIzquierda(self, numero = None, totalCifras = None):'
0226    Function: begin: 'block-def-pub_cerosIzquierda'
0226  <-Source: begin: 'block-def-pub_cerosIzquierda'
0226 <--Class: begin: 'block-def-pub_cerosIzquierda'
0226<---Source: begin: 'block-def-pub_cerosIzquierda'
0226    Source: begin-gen
0226     InstructionFlow: begin-gen
0226      Value: begin-gen
0226       Member: begin-gen
0226        Identifier: begin-gen
0226         Identifier: expr: 'self'
0226        Identifier: end-gen
0226        FunctionCall: begin-gen
0226         Value: begin-gen
0226          Identifier: begin-gen
0226           Identifier: expr: 'numero'
0226         <-Value: expr: 'numero'
0226          Identifier: end-gen
0226         Value: end-gen
0226         Value: begin-gen
0226          Identifier: begin-gen
0226           Identifier: expr: 'totalCifras'
0226         <-Value: expr: 'totalCifras'
0226          Identifier: end-gen
0226         Value: end-gen
0226         FunctionCall: expr: 'cerosIzquierda(numero, totalCifras)'
0226        FunctionCall: end-gen
0226        Member: expr: 'self.cerosIzquierda(numero, totalCifras)'
0226      <-Value: expr: 'self.cerosIzquierda(numero, totalCifras)'
0226       Member: end-gen
0226      Value: end-gen
0226      InstructionFlow: line: 'return self.cerosIzquierda(numero, totalCifras)'
0226    <-Source: line: 'return self.cerosIzquierda(numero, totalCifras)'
0226   <--Function: line: 'return self.cerosIzquierda(numero, totalCifras)'
0226  <---Source: line: 'return self.cerosIzquierda(numero, totalCifras)'
0226 <----Class: line: 'return self.cerosIzquierda(numero, totalCifras)'
0226<-----Source: line: 'return self.cerosIzquierda(numero, totalCifras)'
0227     InstructionFlow: end-gen
0227    Source: end-gen
0227    Function: end: 'block-def-pub_cerosIzquierda'
0227  <-Source: end: 'block-def-pub_cerosIzquierda'
0227 <--Class: end: 'block-def-pub_cerosIzquierda'
0227<---Source: end: 'block-def-pub_cerosIzquierda'
0228   Function: end-gen
0228   Function: begin-gen
0228    Variable: begin-gen
0228     Variable: expr: 'texto'
0228    Variable: end-gen
0228    Variable: begin-gen
0228     Variable: expr: 'totalLongitud'
0228    Variable: end-gen
0228    Function: line: 'def pub_espaciosDerecha(self, texto = None, totalLongitud = None):'
0228  <-Source: line: 'def pub_espaciosDerecha(self, texto = None, totalLongitud = None):'
0228 <--Class: line: 'def pub_espaciosDerecha(self, texto = None, totalLongitud = None):'
0228<---Source: line: 'def pub_espaciosDerecha(self, texto = None, totalLongitud = None):'
0229    Function: begin: 'block-def-pub_espaciosDerecha'
0229  <-Source: begin: 'block-def-pub_espaciosDerecha'
0229 <--Class: begin: 'block-def-pub_espaciosDerecha'
0229<---Source: begin: 'block-def-pub_espaciosDerecha'
0229    Source: begin-gen
0229     InstructionFlow: begin-gen
0229      Value: begin-gen
0229       Member: begin-gen
0229        Identifier: begin-gen
0229         Identifier: expr: 'self'
0229        Identifier: end-gen
0229        FunctionCall: begin-gen
0229         Value: begin-gen
0229          Identifier: begin-gen
0229           Identifier: expr: 'texto'
0229         <-Value: expr: 'texto'
0229          Identifier: end-gen
0229         Value: end-gen
0229         Value: begin-gen
0229          Identifier: begin-gen
0229           Identifier: expr: 'totalLongitud'
0229         <-Value: expr: 'totalLongitud'
0229          Identifier: end-gen
0229         Value: end-gen
0229         FunctionCall: expr: 'espaciosDerecha(texto, totalLongitud)'
0229        FunctionCall: end-gen
0229        Member: expr: 'self.espaciosDerecha(texto, totalLongitud)'
0229      <-Value: expr: 'self.espaciosDerecha(texto, totalLongitud)'
0229       Member: end-gen
0229      Value: end-gen
0229      InstructionFlow: line: 'return self.espaciosDerecha(texto, totalLongitud)'
0229    <-Source: line: 'return self.espaciosDerecha(texto, totalLongitud)'
0229   <--Function: line: 'return self.espaciosDerecha(texto, totalLongitud)'
0229  <---Source: line: 'return self.espaciosDerecha(texto, totalLongitud)'
0229 <----Class: line: 'return self.espaciosDerecha(texto, totalLongitud)'
0229<-----Source: line: 'return self.espaciosDerecha(texto, totalLongitud)'
0230     InstructionFlow: end-gen
0230    Source: end-gen
0230    Function: end: 'block-def-pub_espaciosDerecha'
0230  <-Source: end: 'block-def-pub_espaciosDerecha'
0230 <--Class: end: 'block-def-pub_espaciosDerecha'
0230<---Source: end: 'block-def-pub_espaciosDerecha'
0231   Function: end-gen
0231   Function: begin-gen
0231    Function: line: 'def pub_ejercicioActual(self):'
0231  <-Source: line: 'def pub_ejercicioActual(self):'
0231 <--Class: line: 'def pub_ejercicioActual(self):'
0231<---Source: line: 'def pub_ejercicioActual(self):'
0232    Function: begin: 'block-def-pub_ejercicioActual'
0232  <-Source: begin: 'block-def-pub_ejercicioActual'
0232 <--Class: begin: 'block-def-pub_ejercicioActual'
0232<---Source: begin: 'block-def-pub_ejercicioActual'
0232    Source: begin-gen
0232     InstructionFlow: begin-gen
0232      Value: begin-gen
0232       Member: begin-gen
0232        Identifier: begin-gen
0232         Identifier: expr: 'self'
0232        Identifier: end-gen
0232        FunctionCall: begin-gen
0232         FunctionCall: expr: 'ejercicioActual()'
0232        FunctionCall: end-gen
0232        Member: expr: 'self.ejercicioActual()'
0232      <-Value: expr: 'self.ejercicioActual()'
0232       Member: end-gen
0232      Value: end-gen
0232      InstructionFlow: line: 'return self.ejercicioActual()'
0232    <-Source: line: 'return self.ejercicioActual()'
0232   <--Function: line: 'return self.ejercicioActual()'
0232  <---Source: line: 'return self.ejercicioActual()'
0232 <----Class: line: 'return self.ejercicioActual()'
0232<-----Source: line: 'return self.ejercicioActual()'
0233     InstructionFlow: end-gen
0233    Source: end-gen
0233    Function: end: 'block-def-pub_ejercicioActual'
0233  <-Source: end: 'block-def-pub_ejercicioActual'
0233 <--Class: end: 'block-def-pub_ejercicioActual'
0233<---Source: end: 'block-def-pub_ejercicioActual'
0234   Function: end-gen
0234   Function: begin-gen
0234    Variable: begin-gen
0234     Variable: expr: 'codEjercicio'
0234    Variable: end-gen
0234    Function: line: 'def pub_cambiarEjercicioActual(self, codEjercicio = None):'
0234  <-Source: line: 'def pub_cambiarEjercicioActual(self, codEjercicio = None):'
0234 <--Class: line: 'def pub_cambiarEjercicioActual(self, codEjercicio = None):'
0234<---Source: line: 'def pub_cambiarEjercicioActual(self, codEjercicio = None):'
0235    Function: begin: 'block-def-pub_cambiarEjercicioActual'
0235  <-Source: begin: 'block-def-pub_cambiarEjercicioActual'
0235 <--Class: begin: 'block-def-pub_cambiarEjercicioActual'
0235<---Source: begin: 'block-def-pub_cambiarEjercicioActual'
0235    Source: begin-gen
0235     InstructionFlow: begin-gen
0235      Value: begin-gen
0235       Member: begin-gen
0235        Identifier: begin-gen
0235         Identifier: expr: 'self'
0235        Identifier: end-gen
0235        FunctionCall: begin-gen
0235         Value: begin-gen
0235          Identifier: begin-gen
0235           Identifier: expr: 'codEjercicio'
0235         <-Value: expr: 'codEjercicio'
0235          Identifier: end-gen
0235         Value: end-gen
0235         FunctionCall: expr: 'cambiarEjercicioActual(codEjercicio)'
0235        FunctionCall: end-gen
0235        Member: expr: 'self.cambiarEjercicioActual(codEjercicio)'
0235      <-Value: expr: 'self.cambiarEjercicioActual(codEjercicio)'
0235       Member: end-gen
0235      Value: end-gen
0235      InstructionFlow: line: 'return self.cambiarEjercicioActual(codEjercicio)'
0235    <-Source: line: 'return self.cambiarEjercicioActual(codEjercicio)'
0235   <--Function: line: 'return self.cambiarEjercicioActual(codEjercicio)'
0235  <---Source: line: 'return self.cambiarEjercicioActual(codEjercicio)'
0235 <----Class: line: 'return self.cambiarEjercicioActual(codEjercicio)'
0235<-----Source: line: 'return self.cambiarEjercicioActual(codEjercicio)'
0236     InstructionFlow: end-gen
0236    Source: end-gen
0236    Function: end: 'block-def-pub_cambiarEjercicioActual'
0236  <-Source: end: 'block-def-pub_cambiarEjercicioActual'
0236 <--Class: end: 'block-def-pub_cambiarEjercicioActual'
0236<---Source: end: 'block-def-pub_cambiarEjercicioActual'
0237   Function: end-gen
0237   Function: begin-gen
0237    Variable: begin-gen
0237     Variable: expr: 'codCliente'
0237    Variable: end-gen
0237    Variable: begin-gen
0237     Variable: expr: 'valoresDefecto'
0237    Variable: end-gen
0237    Function: line: 'def pub_datosCtaCliente(self, codCliente = None, valoresDefecto = None):'
0237  <-Source: line: 'def pub_datosCtaCliente(self, codCliente = None, valoresDefecto = None):'
0237 <--Class: line: 'def pub_datosCtaCliente(self, codCliente = None, valoresDefecto = None):'
0237<---Source: line: 'def pub_datosCtaCliente(self, codCliente = None, valoresDefecto = None):'
0238    Function: begin: 'block-def-pub_datosCtaCliente'
0238  <-Source: begin: 'block-def-pub_datosCtaCliente'
0238 <--Class: begin: 'block-def-pub_datosCtaCliente'
0238<---Source: begin: 'block-def-pub_datosCtaCliente'
0238    Source: begin-gen
0238     InstructionFlow: begin-gen
0238      Value: begin-gen
0238       Member: begin-gen
0238        Identifier: begin-gen
0238         Identifier: expr: 'self'
0238        Identifier: end-gen
0238        FunctionCall: begin-gen
0238         Value: begin-gen
0238          Identifier: begin-gen
0238           Identifier: expr: 'codCliente'
0238         <-Value: expr: 'codCliente'
0238          Identifier: end-gen
0238         Value: end-gen
0238         Value: begin-gen
0238          Identifier: begin-gen
0238           Identifier: expr: 'valoresDefecto'
0238         <-Value: expr: 'valoresDefecto'
0238          Identifier: end-gen
0238         Value: end-gen
0238         FunctionCall: expr: 'datosCtaCliente(codCliente, valoresDefecto)'
0238        FunctionCall: end-gen
0238        Member: expr: 'self.datosCtaCliente(codCliente, valoresDefecto)'
0238      <-Value: expr: 'self.datosCtaCliente(codCliente, valoresDefecto)'
0238       Member: end-gen
0238      Value: end-gen
0238      InstructionFlow: line: 'return self.datosCtaCliente(codCliente, valoresDefecto)'
0238    <-Source: line: 'return self.datosCtaCliente(codCliente, valoresDefecto)'
0238   <--Function: line: 'return self.datosCtaCliente(codCliente, valoresDefecto)'
0238  <---Source: line: 'return self.datosCtaCliente(codCliente, valoresDefecto)'
0238 <----Class: line: 'return self.datosCtaCliente(codCliente, valoresDefecto)'
0238<-----Source: line: 'return self.datosCtaCliente(codCliente, valoresDefecto)'
0239     InstructionFlow: end-gen
0239    Source: end-gen
0239    Function: end: 'block-def-pub_datosCtaCliente'
0239  <-Source: end: 'block-def-pub_datosCtaCliente'
0239 <--Class: end: 'block-def-pub_datosCtaCliente'
0239<---Source: end: 'block-def-pub_datosCtaCliente'
0240   Function: end-gen
0240   Function: begin-gen
0240    Variable: begin-gen
0240     Variable: expr: 'codProveedor'
0240    Variable: end-gen
0240    Variable: begin-gen
0240     Variable: expr: 'valoresDefecto'
0240    Variable: end-gen
0240    Function: line: 'def pub_datosCtaProveedor(self, codProveedor = None, valoresDefecto = None):'
0240  <-Source: line: 'def pub_datosCtaProveedor(self, codProveedor = None, valoresDefecto = None):'
0240 <--Class: line: 'def pub_datosCtaProveedor(self, codProveedor = None, valoresDefecto = None):'
0240<---Source: line: 'def pub_datosCtaProveedor(self, codProveedor = None, valoresDefecto = None):'
0241    Function: begin: 'block-def-pub_datosCtaProveedor'
0241  <-Source: begin: 'block-def-pub_datosCtaProveedor'
0241 <--Class: begin: 'block-def-pub_datosCtaProveedor'
0241<---Source: begin: 'block-def-pub_datosCtaProveedor'
0241    Source: begin-gen
0241     InstructionFlow: begin-gen
0241      Value: begin-gen
0241       Member: begin-gen
0241        Identifier: begin-gen
0241         Identifier: expr: 'self'
0241        Identifier: end-gen
0241        FunctionCall: begin-gen
0241         Value: begin-gen
0241          Identifier: begin-gen
0241           Identifier: expr: 'codProveedor'
0241         <-Value: expr: 'codProveedor'
0241          Identifier: end-gen
0241         Value: end-gen
0241         Value: begin-gen
0241          Identifier: begin-gen
0241           Identifier: expr: 'valoresDefecto'
0241         <-Value: expr: 'valoresDefecto'
0241          Identifier: end-gen
0241         Value: end-gen
0241         FunctionCall: expr: 'datosCtaProveedor(codProveedor, valoresDefecto)'
0241        FunctionCall: end-gen
0241        Member: expr: 'self.datosCtaProveedor(codProveedor, valoresDefecto)'
0241      <-Value: expr: 'self.datosCtaProveedor(codProveedor, valoresDefecto)'
0241       Member: end-gen
0241      Value: end-gen
0241      InstructionFlow: line: 'return self.datosCtaProveedor(codProveedor, valoresDefecto)'
0241    <-Source: line: 'return self.datosCtaProveedor(codProveedor, valoresDefecto)'
0241   <--Function: line: 'return self.datosCtaProveedor(codProveedor, valoresDefecto)'
0241  <---Source: line: 'return self.datosCtaProveedor(codProveedor, valoresDefecto)'
0241 <----Class: line: 'return self.datosCtaProveedor(codProveedor, valoresDefecto)'
0241<-----Source: line: 'return self.datosCtaProveedor(codProveedor, valoresDefecto)'
0242     InstructionFlow: end-gen
0242    Source: end-gen
0242    Function: end: 'block-def-pub_datosCtaProveedor'
0242  <-Source: end: 'block-def-pub_datosCtaProveedor'
0242 <--Class: end: 'block-def-pub_datosCtaProveedor'
0242<---Source: end: 'block-def-pub_datosCtaProveedor'
0243   Function: end-gen
0243   Function: begin-gen
0243    Variable: begin-gen
0243     Variable: expr: 'codIntervalo'
0243    Variable: end-gen
0243    Function: line: 'def pub_calcularIntervalo(self, codIntervalo = None):'
0243  <-Source: line: 'def pub_calcularIntervalo(self, codIntervalo = None):'
0243 <--Class: line: 'def pub_calcularIntervalo(self, codIntervalo = None):'
0243<---Source: line: 'def pub_calcularIntervalo(self, codIntervalo = None):'
0244    Function: begin: 'block-def-pub_calcularIntervalo'
0244  <-Source: begin: 'block-def-pub_calcularIntervalo'
0244 <--Class: begin: 'block-def-pub_calcularIntervalo'
0244<---Source: begin: 'block-def-pub_calcularIntervalo'
0244    Source: begin-gen
0244     InstructionFlow: begin-gen
0244      Value: begin-gen
0244       Member: begin-gen
0244        Identifier: begin-gen
0244         Identifier: expr: 'self'
0244        Identifier: end-gen
0244        FunctionCall: begin-gen
0244         Value: begin-gen
0244          Identifier: begin-gen
0244           Identifier: expr: 'codIntervalo'
0244         <-Value: expr: 'codIntervalo'
0244          Identifier: end-gen
0244         Value: end-gen
0244         FunctionCall: expr: 'calcularIntervalo(codIntervalo)'
0244        FunctionCall: end-gen
0244        Member: expr: 'self.calcularIntervalo(codIntervalo)'
0244      <-Value: expr: 'self.calcularIntervalo(codIntervalo)'
0244       Member: end-gen
0244      Value: end-gen
0244      InstructionFlow: line: 'return self.calcularIntervalo(codIntervalo)'
0244    <-Source: line: 'return self.calcularIntervalo(codIntervalo)'
0244   <--Function: line: 'return self.calcularIntervalo(codIntervalo)'
0244  <---Source: line: 'return self.calcularIntervalo(codIntervalo)'
0244 <----Class: line: 'return self.calcularIntervalo(codIntervalo)'
0244<-----Source: line: 'return self.calcularIntervalo(codIntervalo)'
0245     InstructionFlow: end-gen
0245    Source: end-gen
0245    Function: end: 'block-def-pub_calcularIntervalo'
0245  <-Source: end: 'block-def-pub_calcularIntervalo'
0245 <--Class: end: 'block-def-pub_calcularIntervalo'
0245<---Source: end: 'block-def-pub_calcularIntervalo'
0246   Function: end-gen
0246   Function: begin-gen
0246    Variable: begin-gen
0246     Variable: expr: 'codSubcuenta'
0246    Variable: end-gen
0246    Variable: begin-gen
0246     Variable: expr: 'descripcion'
0246    Variable: end-gen
0246    Variable: begin-gen
0246     Variable: expr: 'idCuentaEsp'
0246    Variable: end-gen
0246    Variable: begin-gen
0246     Variable: expr: 'codEjercicio'
0246    Variable: end-gen
0246    Function: line: 'def pub_crearSubcuenta(self, codSubcuenta = None, descripcion = None, idCuentaEsp = None, codEjercicio = None):'
0246  <-Source: line: 'def pub_crearSubcuenta(self, codSubcuenta = None, descripcion = None, idCuentaEsp = None, codEjercicio = None):'
0246 <--Class: line: 'def pub_crearSubcuenta(self, codSubcuenta = None, descripcion = None, idCuentaEsp = None, codEjercicio = None):'
0246<---Source: line: 'def pub_crearSubcuenta(self, codSubcuenta = None, descripcion = None, idCuentaEsp = None, codEjercicio = None):'
0247    Function: begin: 'block-def-pub_crearSubcuenta'
0247  <-Source: begin: 'block-def-pub_crearSubcuenta'
0247 <--Class: begin: 'block-def-pub_crearSubcuenta'
0247<---Source: begin: 'block-def-pub_crearSubcuenta'
0247    Source: begin-gen
0247     InstructionFlow: begin-gen
0247      Value: begin-gen
0247       Member: begin-gen
0247        Identifier: begin-gen
0247         Identifier: expr: 'self'
0247        Identifier: end-gen
0247        FunctionCall: begin-gen
0247         Value: begin-gen
0247          Identifier: begin-gen
0247           Identifier: expr: 'codSubcuenta'
0247         <-Value: expr: 'codSubcuenta'
0247          Identifier: end-gen
0247         Value: end-gen
0247         Value: begin-gen
0247          Identifier: begin-gen
0247           Identifier: expr: 'descripcion'
0247         <-Value: expr: 'descripcion'
0247          Identifier: end-gen
0247         Value: end-gen
0247         Value: begin-gen
0247          Identifier: begin-gen
0247           Identifier: expr: 'idCuentaEsp'
0247         <-Value: expr: 'idCuentaEsp'
0247          Identifier: end-gen
0247         Value: end-gen
0247         Value: begin-gen
0247          Identifier: begin-gen
0247           Identifier: expr: 'codEjercicio'
0247         <-Value: expr: 'codEjercicio'
0247          Identifier: end-gen
0247         Value: end-gen
0247         FunctionCall: expr: 'crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0247        FunctionCall: end-gen
0247        Member: expr: 'self.crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0247      <-Value: expr: 'self.crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0247       Member: end-gen
0247      Value: end-gen
0247      InstructionFlow: line: 'return self.crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0247    <-Source: line: 'return self.crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0247   <--Function: line: 'return self.crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0247  <---Source: line: 'return self.crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0247 <----Class: line: 'return self.crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0247<-----Source: line: 'return self.crearSubcuenta(codSubcuenta, descripcion, idCuentaEsp, codEjercicio)'
0248     InstructionFlow: end-gen
0248    Source: end-gen
0248    Function: end: 'block-def-pub_crearSubcuenta'
0248  <-Source: end: 'block-def-pub_crearSubcuenta'
0248 <--Class: end: 'block-def-pub_crearSubcuenta'
0248<---Source: end: 'block-def-pub_crearSubcuenta'
0249   Function: end-gen
0249   Function: begin-gen
0249    Variable: begin-gen
0249     Variable: expr: 'codSubcuenta'
0249    Variable: end-gen
0249    Variable: begin-gen
0249     Variable: expr: 'idSubcuenta'
0249    Variable: end-gen
0249    Variable: begin-gen
0249     Variable: expr: 'codCliente'
0249    Variable: end-gen
0249    Variable: begin-gen
0249     Variable: expr: 'codEjercicio'
0249    Variable: end-gen
0249    Function: line: 'def pub_crearSubcuentaCli(self, codSubcuenta = None, idSubcuenta = None, codCliente = None, codEjercicio = None):'
0249  <-Source: line: 'def pub_crearSubcuentaCli(self, codSubcuenta = None, idSubcuenta = None, codCliente = None, codEjercicio = None):'
0249 <--Class: line: 'def pub_crearSubcuentaCli(self, codSubcuenta = None, idSubcuenta = None, codCliente = None, codEjercicio = None):'
0249<---Source: line: 'def pub_crearSubcuentaCli(self, codSubcuenta = None, idSubcuenta = None, codCliente = None, codEjercicio = None):'
0250    Function: begin: 'block-def-pub_crearSubcuentaCli'
0250  <-Source: begin: 'block-def-pub_crearSubcuentaCli'
0250 <--Class: begin: 'block-def-pub_crearSubcuentaCli'
0250<---Source: begin: 'block-def-pub_crearSubcuentaCli'
0250    Source: begin-gen
0250     InstructionFlow: begin-gen
0250      Value: begin-gen
0250       Member: begin-gen
0250        Identifier: begin-gen
0250         Identifier: expr: 'self'
0250        Identifier: end-gen
0250        FunctionCall: begin-gen
0250         Value: begin-gen
0250          Identifier: begin-gen
0250           Identifier: expr: 'codSubcuenta'
0250         <-Value: expr: 'codSubcuenta'
0250          Identifier: end-gen
0250         Value: end-gen
0250         Value: begin-gen
0250          Identifier: begin-gen
0250           Identifier: expr: 'idSubcuenta'
0250         <-Value: expr: 'idSubcuenta'
0250          Identifier: end-gen
0250         Value: end-gen
0250         Value: begin-gen
0250          Identifier: begin-gen
0250           Identifier: expr: 'codCliente'
0250         <-Value: expr: 'codCliente'
0250          Identifier: end-gen
0250         Value: end-gen
0250         Value: begin-gen
0250          Identifier: begin-gen
0250           Identifier: expr: 'codEjercicio'
0250         <-Value: expr: 'codEjercicio'
0250          Identifier: end-gen
0250         Value: end-gen
0250         FunctionCall: expr: 'crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0250        FunctionCall: end-gen
0250        Member: expr: 'self.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0250      <-Value: expr: 'self.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0250       Member: end-gen
0250      Value: end-gen
0250      InstructionFlow: line: 'return self.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0250    <-Source: line: 'return self.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0250   <--Function: line: 'return self.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0250  <---Source: line: 'return self.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0250 <----Class: line: 'return self.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0250<-----Source: line: 'return self.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
0251     InstructionFlow: end-gen
0251    Source: end-gen
0251    Function: end: 'block-def-pub_crearSubcuentaCli'
0251  <-Source: end: 'block-def-pub_crearSubcuentaCli'
0251 <--Class: end: 'block-def-pub_crearSubcuentaCli'
0251<---Source: end: 'block-def-pub_crearSubcuentaCli'
0252   Function: end-gen
0252   Function: begin-gen
0252    Variable: begin-gen
0252     Variable: expr: 'codSubcuenta'
0252    Variable: end-gen
0252    Variable: begin-gen
0252     Variable: expr: 'idSubcuenta'
0252    Variable: end-gen
0252    Variable: begin-gen
0252     Variable: expr: 'codProveedor'
0252    Variable: end-gen
0252    Variable: begin-gen
0252     Variable: expr: 'codEjercicio'
0252    Variable: end-gen
0252    Function: line: 'def pub_crearSubcuentaProv(self, codSubcuenta = None, idSubcuenta = None, codProveedor = None, codEjercicio = None):'
0252  <-Source: line: 'def pub_crearSubcuentaProv(self, codSubcuenta = None, idSubcuenta = None, codProveedor = None, codEjercicio = None):'
0252 <--Class: line: 'def pub_crearSubcuentaProv(self, codSubcuenta = None, idSubcuenta = None, codProveedor = None, codEjercicio = None):'
0252<---Source: line: 'def pub_crearSubcuentaProv(self, codSubcuenta = None, idSubcuenta = None, codProveedor = None, codEjercicio = None):'
0253    Function: begin: 'block-def-pub_crearSubcuentaProv'
0253  <-Source: begin: 'block-def-pub_crearSubcuentaProv'
0253 <--Class: begin: 'block-def-pub_crearSubcuentaProv'
0253<---Source: begin: 'block-def-pub_crearSubcuentaProv'
0253    Source: begin-gen
0253     InstructionFlow: begin-gen
0253      Value: begin-gen
0253       Member: begin-gen
0253        Identifier: begin-gen
0253         Identifier: expr: 'self'
0253        Identifier: end-gen
0253        FunctionCall: begin-gen
0253         Value: begin-gen
0253          Identifier: begin-gen
0253           Identifier: expr: 'codSubcuenta'
0253         <-Value: expr: 'codSubcuenta'
0253          Identifier: end-gen
0253         Value: end-gen
0253         Value: begin-gen
0253          Identifier: begin-gen
0253           Identifier: expr: 'idSubcuenta'
0253         <-Value: expr: 'idSubcuenta'
0253          Identifier: end-gen
0253         Value: end-gen
0253         Value: begin-gen
0253          Identifier: begin-gen
0253           Identifier: expr: 'codProveedor'
0253         <-Value: expr: 'codProveedor'
0253          Identifier: end-gen
0253         Value: end-gen
0253         Value: begin-gen
0253          Identifier: begin-gen
0253           Identifier: expr: 'codEjercicio'
0253         <-Value: expr: 'codEjercicio'
0253          Identifier: end-gen
0253         Value: end-gen
0253         FunctionCall: expr: 'crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0253        FunctionCall: end-gen
0253        Member: expr: 'self.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0253      <-Value: expr: 'self.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0253       Member: end-gen
0253      Value: end-gen
0253      InstructionFlow: line: 'return self.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0253    <-Source: line: 'return self.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0253   <--Function: line: 'return self.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0253  <---Source: line: 'return self.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0253 <----Class: line: 'return self.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0253<-----Source: line: 'return self.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
0254     InstructionFlow: end-gen
0254    Source: end-gen
0254    Function: end: 'block-def-pub_crearSubcuentaProv'
0254  <-Source: end: 'block-def-pub_crearSubcuentaProv'
0254 <--Class: end: 'block-def-pub_crearSubcuentaProv'
0254<---Source: end: 'block-def-pub_crearSubcuentaProv'
0255   Function: end-gen
0255   Function: begin-gen
0255    Variable: begin-gen
0255     Variable: expr: 'codCliente'
0255    Variable: end-gen
0255    Variable: begin-gen
0255     Variable: expr: 'codSubcuenta'
0255    Variable: end-gen
0255    Variable: begin-gen
0255     Variable: expr: 'nombre'
0255    Variable: end-gen
0255    Function: line: 'def pub_rellenarSubcuentasCli(self, codCliente = None, codSubcuenta = None, nombre = None):'
0255  <-Source: line: 'def pub_rellenarSubcuentasCli(self, codCliente = None, codSubcuenta = None, nombre = None):'
0255 <--Class: line: 'def pub_rellenarSubcuentasCli(self, codCliente = None, codSubcuenta = None, nombre = None):'
0255<---Source: line: 'def pub_rellenarSubcuentasCli(self, codCliente = None, codSubcuenta = None, nombre = None):'
0256    Function: begin: 'block-def-pub_rellenarSubcuentasCli'
0256  <-Source: begin: 'block-def-pub_rellenarSubcuentasCli'
0256 <--Class: begin: 'block-def-pub_rellenarSubcuentasCli'
0256<---Source: begin: 'block-def-pub_rellenarSubcuentasCli'
0256    Source: begin-gen
0256     InstructionFlow: begin-gen
0256      Value: begin-gen
0256       Member: begin-gen
0256        Identifier: begin-gen
0256         Identifier: expr: 'self'
0256        Identifier: end-gen
0256        FunctionCall: begin-gen
0256         Value: begin-gen
0256          Identifier: begin-gen
0256           Identifier: expr: 'codCliente'
0256         <-Value: expr: 'codCliente'
0256          Identifier: end-gen
0256         Value: end-gen
0256         Value: begin-gen
0256          Identifier: begin-gen
0256           Identifier: expr: 'codSubcuenta'
0256         <-Value: expr: 'codSubcuenta'
0256          Identifier: end-gen
0256         Value: end-gen
0256         Value: begin-gen
0256          Identifier: begin-gen
0256           Identifier: expr: 'nombre'
0256         <-Value: expr: 'nombre'
0256          Identifier: end-gen
0256         Value: end-gen
0256         FunctionCall: expr: 'rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0256        FunctionCall: end-gen
0256        Member: expr: 'self.rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0256      <-Value: expr: 'self.rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0256       Member: end-gen
0256      Value: end-gen
0256      InstructionFlow: line: 'return self.rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0256    <-Source: line: 'return self.rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0256   <--Function: line: 'return self.rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0256  <---Source: line: 'return self.rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0256 <----Class: line: 'return self.rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0256<-----Source: line: 'return self.rellenarSubcuentasCli(codCliente, codSubcuenta, nombre)'
0257     InstructionFlow: end-gen
0257    Source: end-gen
0257    Function: end: 'block-def-pub_rellenarSubcuentasCli'
0257  <-Source: end: 'block-def-pub_rellenarSubcuentasCli'
0257 <--Class: end: 'block-def-pub_rellenarSubcuentasCli'
0257<---Source: end: 'block-def-pub_rellenarSubcuentasCli'
0258   Function: end-gen
0258   Function: begin-gen
0258    Variable: begin-gen
0258     Variable: expr: 'codProveedor'
0258    Variable: end-gen
0258    Variable: begin-gen
0258     Variable: expr: 'codSubcuenta'
0258    Variable: end-gen
0258    Variable: begin-gen
0258     Variable: expr: 'nombre'
0258    Variable: end-gen
0258    Function: line: 'def pub_rellenarSubcuentasProv(self, codProveedor = None, codSubcuenta = None, nombre = None):'
0258  <-Source: line: 'def pub_rellenarSubcuentasProv(self, codProveedor = None, codSubcuenta = None, nombre = None):'
0258 <--Class: line: 'def pub_rellenarSubcuentasProv(self, codProveedor = None, codSubcuenta = None, nombre = None):'
0258<---Source: line: 'def pub_rellenarSubcuentasProv(self, codProveedor = None, codSubcuenta = None, nombre = None):'
0259    Function: begin: 'block-def-pub_rellenarSubcuentasProv'
0259  <-Source: begin: 'block-def-pub_rellenarSubcuentasProv'
0259 <--Class: begin: 'block-def-pub_rellenarSubcuentasProv'
0259<---Source: begin: 'block-def-pub_rellenarSubcuentasProv'
0259    Source: begin-gen
0259     InstructionFlow: begin-gen
0259      Value: begin-gen
0259       Member: begin-gen
0259        Identifier: begin-gen
0259         Identifier: expr: 'self'
0259        Identifier: end-gen
0259        FunctionCall: begin-gen
0259         Value: begin-gen
0259          Identifier: begin-gen
0259           Identifier: expr: 'codProveedor'
0259         <-Value: expr: 'codProveedor'
0259          Identifier: end-gen
0259         Value: end-gen
0259         Value: begin-gen
0259          Identifier: begin-gen
0259           Identifier: expr: 'codSubcuenta'
0259         <-Value: expr: 'codSubcuenta'
0259          Identifier: end-gen
0259         Value: end-gen
0259         Value: begin-gen
0259          Identifier: begin-gen
0259           Identifier: expr: 'nombre'
0259         <-Value: expr: 'nombre'
0259          Identifier: end-gen
0259         Value: end-gen
0259         FunctionCall: expr: 'rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0259        FunctionCall: end-gen
0259        Member: expr: 'self.rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0259      <-Value: expr: 'self.rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0259       Member: end-gen
0259      Value: end-gen
0259      InstructionFlow: line: 'return self.rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0259    <-Source: line: 'return self.rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0259   <--Function: line: 'return self.rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0259  <---Source: line: 'return self.rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0259 <----Class: line: 'return self.rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0259<-----Source: line: 'return self.rellenarSubcuentasProv(codProveedor, codSubcuenta, nombre)'
0260     InstructionFlow: end-gen
0260    Source: end-gen
0260    Function: end: 'block-def-pub_rellenarSubcuentasProv'
0260  <-Source: end: 'block-def-pub_rellenarSubcuentasProv'
0260 <--Class: end: 'block-def-pub_rellenarSubcuentasProv'
0260<---Source: end: 'block-def-pub_rellenarSubcuentasProv'
0261   Function: end-gen
0261   Function: begin-gen
0261    Function: line: 'def pub_automataActivado(self):'
0261  <-Source: line: 'def pub_automataActivado(self):'
0261 <--Class: line: 'def pub_automataActivado(self):'
0261<---Source: line: 'def pub_automataActivado(self):'
0262    Function: begin: 'block-def-pub_automataActivado'
0262  <-Source: begin: 'block-def-pub_automataActivado'
0262 <--Class: begin: 'block-def-pub_automataActivado'
0262<---Source: begin: 'block-def-pub_automataActivado'
0262    Source: begin-gen
0262     InstructionFlow: begin-gen
0262      Value: begin-gen
0262       Member: begin-gen
0262        Identifier: begin-gen
0262         Identifier: expr: 'self'
0262        Identifier: end-gen
0262        FunctionCall: begin-gen
0262         FunctionCall: expr: 'automataActivado()'
0262        FunctionCall: end-gen
0262        Member: expr: 'self.automataActivado()'
0262      <-Value: expr: 'self.automataActivado()'
0262       Member: end-gen
0262      Value: end-gen
0262      InstructionFlow: line: 'return self.automataActivado()'
0262    <-Source: line: 'return self.automataActivado()'
0262   <--Function: line: 'return self.automataActivado()'
0262  <---Source: line: 'return self.automataActivado()'
0262 <----Class: line: 'return self.automataActivado()'
0262<-----Source: line: 'return self.automataActivado()'
0263     InstructionFlow: end-gen
0263    Source: end-gen
0263    Function: end: 'block-def-pub_automataActivado'
0263  <-Source: end: 'block-def-pub_automataActivado'
0263 <--Class: end: 'block-def-pub_automataActivado'
0263<---Source: end: 'block-def-pub_automataActivado'
0264   Function: end-gen
0264   Function: begin-gen
0264    Variable: begin-gen
0264     Variable: expr: 'codCliente'
0264    Variable: end-gen
0264    Variable: begin-gen
0264     Variable: expr: 'fecha'
0264    Variable: end-gen
0264    Function: line: 'def pub_clienteActivo(self, codCliente = None, fecha = None):'
0264  <-Source: line: 'def pub_clienteActivo(self, codCliente = None, fecha = None):'
0264 <--Class: line: 'def pub_clienteActivo(self, codCliente = None, fecha = None):'
0264<---Source: line: 'def pub_clienteActivo(self, codCliente = None, fecha = None):'
0265    Function: begin: 'block-def-pub_clienteActivo'
0265  <-Source: begin: 'block-def-pub_clienteActivo'
0265 <--Class: begin: 'block-def-pub_clienteActivo'
0265<---Source: begin: 'block-def-pub_clienteActivo'
0265    Source: begin-gen
0265     InstructionFlow: begin-gen
0265      Value: begin-gen
0265       Member: begin-gen
0265        Identifier: begin-gen
0265         Identifier: expr: 'self'
0265        Identifier: end-gen
0265        FunctionCall: begin-gen
0265         Value: begin-gen
0265          Identifier: begin-gen
0265           Identifier: expr: 'codCliente'
0265         <-Value: expr: 'codCliente'
0265          Identifier: end-gen
0265         Value: end-gen
0265         Value: begin-gen
0265          Identifier: begin-gen
0265           Identifier: expr: 'fecha'
0265         <-Value: expr: 'fecha'
0265          Identifier: end-gen
0265         Value: end-gen
0265         FunctionCall: expr: 'clienteActivo(codCliente, fecha)'
0265        FunctionCall: end-gen
0265        Member: expr: 'self.clienteActivo(codCliente, fecha)'
0265      <-Value: expr: 'self.clienteActivo(codCliente, fecha)'
0265       Member: end-gen
0265      Value: end-gen
0265      InstructionFlow: line: 'return self.clienteActivo(codCliente, fecha)'
0265    <-Source: line: 'return self.clienteActivo(codCliente, fecha)'
0265   <--Function: line: 'return self.clienteActivo(codCliente, fecha)'
0265  <---Source: line: 'return self.clienteActivo(codCliente, fecha)'
0265 <----Class: line: 'return self.clienteActivo(codCliente, fecha)'
0265<-----Source: line: 'return self.clienteActivo(codCliente, fecha)'
0266     InstructionFlow: end-gen
0266    Source: end-gen
0266    Function: end: 'block-def-pub_clienteActivo'
0266  <-Source: end: 'block-def-pub_clienteActivo'
0266 <--Class: end: 'block-def-pub_clienteActivo'
0266<---Source: end: 'block-def-pub_clienteActivo'
0267   Function: end-gen
0267   Function: begin-gen
0267    Variable: begin-gen
0267     Variable: expr: 'formulario'
0267    Variable: end-gen
0267    Variable: begin-gen
0267     Variable: expr: 'campoId'
0267    Variable: end-gen
0267    Variable: begin-gen
0267     Variable: expr: 'campoProvincia'
0267    Variable: end-gen
0267    Variable: begin-gen
0267     Variable: expr: 'campoPais'
0267    Variable: end-gen
0267    Function: line: 'def pub_obtenerProvincia(self, formulario = None, campoId = None, campoProvincia = None, campoPais = None):'
0267  <-Source: line: 'def pub_obtenerProvincia(self, formulario = None, campoId = None, campoProvincia = None, campoPais = None):'
0267 <--Class: line: 'def pub_obtenerProvincia(self, formulario = None, campoId = None, campoProvincia = None, campoPais = None):'
0267<---Source: line: 'def pub_obtenerProvincia(self, formulario = None, campoId = None, campoProvincia = None, campoPais = None):'
0268    Function: begin: 'block-def-pub_obtenerProvincia'
0268  <-Source: begin: 'block-def-pub_obtenerProvincia'
0268 <--Class: begin: 'block-def-pub_obtenerProvincia'
0268<---Source: begin: 'block-def-pub_obtenerProvincia'
0268    Source: begin-gen
0268     InstructionFlow: begin-gen
0268      Value: begin-gen
0268       Member: begin-gen
0268        Identifier: begin-gen
0268         Identifier: expr: 'self'
0268        Identifier: end-gen
0268        FunctionCall: begin-gen
0268         Value: begin-gen
0268          Identifier: begin-gen
0268           Identifier: expr: 'formulario'
0268         <-Value: expr: 'formulario'
0268          Identifier: end-gen
0268         Value: end-gen
0268         Value: begin-gen
0268          Identifier: begin-gen
0268           Identifier: expr: 'campoId'
0268         <-Value: expr: 'campoId'
0268          Identifier: end-gen
0268         Value: end-gen
0268         Value: begin-gen
0268          Identifier: begin-gen
0268           Identifier: expr: 'campoProvincia'
0268         <-Value: expr: 'campoProvincia'
0268          Identifier: end-gen
0268         Value: end-gen
0268         Value: begin-gen
0268          Identifier: begin-gen
0268           Identifier: expr: 'campoPais'
0268         <-Value: expr: 'campoPais'
0268          Identifier: end-gen
0268         Value: end-gen
0268         FunctionCall: expr: 'obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0268        FunctionCall: end-gen
0268        Member: expr: 'self.obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0268      <-Value: expr: 'self.obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0268       Member: end-gen
0268      Value: end-gen
0268      InstructionFlow: line: 'return self.obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0268    <-Source: line: 'return self.obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0268   <--Function: line: 'return self.obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0268  <---Source: line: 'return self.obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0268 <----Class: line: 'return self.obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0268<-----Source: line: 'return self.obtenerProvincia(formulario, campoId, campoProvincia, campoPais)'
0269     InstructionFlow: end-gen
0269    Source: end-gen
0269    Function: end: 'block-def-pub_obtenerProvincia'
0269  <-Source: end: 'block-def-pub_obtenerProvincia'
0269 <--Class: end: 'block-def-pub_obtenerProvincia'
0269<---Source: end: 'block-def-pub_obtenerProvincia'
0270   Function: end-gen
0270   Function: begin-gen
0270    Variable: begin-gen
0270     Variable: expr: 'cursor'
0270    Variable: end-gen
0270    Variable: begin-gen
0270     Variable: expr: 'evento'
0270    Variable: end-gen
0270    Function: line: 'def pub_lanzarEvento(self, cursor = None, evento = None):'
0270  <-Source: line: 'def pub_lanzarEvento(self, cursor = None, evento = None):'
0270 <--Class: line: 'def pub_lanzarEvento(self, cursor = None, evento = None):'
0270<---Source: line: 'def pub_lanzarEvento(self, cursor = None, evento = None):'
0271    Function: begin: 'block-def-pub_lanzarEvento'
0271  <-Source: begin: 'block-def-pub_lanzarEvento'
0271 <--Class: begin: 'block-def-pub_lanzarEvento'
0271<---Source: begin: 'block-def-pub_lanzarEvento'
0271    Source: begin-gen
0271     InstructionFlow: begin-gen
0271      Value: begin-gen
0271       Member: begin-gen
0271        Identifier: begin-gen
0271         Identifier: expr: 'self'
0271        Identifier: end-gen
0271        FunctionCall: begin-gen
0271         Value: begin-gen
0271          Identifier: begin-gen
0271           Identifier: expr: 'cursor'
0271         <-Value: expr: 'cursor'
0271          Identifier: end-gen
0271         Value: end-gen
0271         Value: begin-gen
0271          Identifier: begin-gen
0271           Identifier: expr: 'evento'
0271         <-Value: expr: 'evento'
0271          Identifier: end-gen
0271         Value: end-gen
0271         FunctionCall: expr: 'lanzarEvento(cursor, evento)'
0271        FunctionCall: end-gen
0271        Member: expr: 'self.lanzarEvento(cursor, evento)'
0271      <-Value: expr: 'self.lanzarEvento(cursor, evento)'
0271       Member: end-gen
0271      Value: end-gen
0271      InstructionFlow: line: 'return self.lanzarEvento(cursor, evento)'
0271    <-Source: line: 'return self.lanzarEvento(cursor, evento)'
0271   <--Function: line: 'return self.lanzarEvento(cursor, evento)'
0271  <---Source: line: 'return self.lanzarEvento(cursor, evento)'
0271 <----Class: line: 'return self.lanzarEvento(cursor, evento)'
0271<-----Source: line: 'return self.lanzarEvento(cursor, evento)'
0272     InstructionFlow: end-gen
0272    Source: end-gen
0272    Function: end: 'block-def-pub_lanzarEvento'
0272  <-Source: end: 'block-def-pub_lanzarEvento'
0272 <--Class: end: 'block-def-pub_lanzarEvento'
0272<---Source: end: 'block-def-pub_lanzarEvento'
0273   Function: end-gen
0273   Function: begin-gen
0273    Variable: begin-gen
0273     Variable: expr: 'opciones'
0273    Variable: end-gen
0273    Variable: begin-gen
0273     Variable: expr: 'titulo'
0273    Variable: end-gen
0273    Function: line: 'def pub_elegirOpcion(self, opciones = None, titulo = None):'
0273  <-Source: line: 'def pub_elegirOpcion(self, opciones = None, titulo = None):'
0273 <--Class: line: 'def pub_elegirOpcion(self, opciones = None, titulo = None):'
0273<---Source: line: 'def pub_elegirOpcion(self, opciones = None, titulo = None):'
0274    Function: begin: 'block-def-pub_elegirOpcion'
0274  <-Source: begin: 'block-def-pub_elegirOpcion'
0274 <--Class: begin: 'block-def-pub_elegirOpcion'
0274<---Source: begin: 'block-def-pub_elegirOpcion'
0274    Source: begin-gen
0274     InstructionFlow: begin-gen
0274      Value: begin-gen
0274       Member: begin-gen
0274        Identifier: begin-gen
0274         Identifier: expr: 'self'
0274        Identifier: end-gen
0274        FunctionCall: begin-gen
0274         Value: begin-gen
0274          Identifier: begin-gen
0274           Identifier: expr: 'opciones'
0274         <-Value: expr: 'opciones'
0274          Identifier: end-gen
0274         Value: end-gen
0274         Value: begin-gen
0274          Identifier: begin-gen
0274           Identifier: expr: 'titulo'
0274         <-Value: expr: 'titulo'
0274          Identifier: end-gen
0274         Value: end-gen
0274         FunctionCall: expr: 'elegirOpcion(opciones, titulo)'
0274        FunctionCall: end-gen
0274        Member: expr: 'self.elegirOpcion(opciones, titulo)'
0274      <-Value: expr: 'self.elegirOpcion(opciones, titulo)'
0274       Member: end-gen
0274      Value: end-gen
0274      InstructionFlow: line: 'return self.elegirOpcion(opciones, titulo)'
0274    <-Source: line: 'return self.elegirOpcion(opciones, titulo)'
0274   <--Function: line: 'return self.elegirOpcion(opciones, titulo)'
0274  <---Source: line: 'return self.elegirOpcion(opciones, titulo)'
0274 <----Class: line: 'return self.elegirOpcion(opciones, titulo)'
0274<-----Source: line: 'return self.elegirOpcion(opciones, titulo)'
0275     InstructionFlow: end-gen
0275    Source: end-gen
0275    Function: end: 'block-def-pub_elegirOpcion'
0275  <-Source: end: 'block-def-pub_elegirOpcion'
0275 <--Class: end: 'block-def-pub_elegirOpcion'
0275<---Source: end: 'block-def-pub_elegirOpcion'
0276   Function: end-gen
0276   Function: begin-gen
0276    Variable: begin-gen
0276     Variable: expr: 'fecha'
0276    Variable: end-gen
0276    Function: line: 'def pub_textoFecha(self, fecha = None):'
0276  <-Source: line: 'def pub_textoFecha(self, fecha = None):'
0276 <--Class: line: 'def pub_textoFecha(self, fecha = None):'
0276<---Source: line: 'def pub_textoFecha(self, fecha = None):'
0277    Function: begin: 'block-def-pub_textoFecha'
0277  <-Source: begin: 'block-def-pub_textoFecha'
0277 <--Class: begin: 'block-def-pub_textoFecha'
0277<---Source: begin: 'block-def-pub_textoFecha'
0277    Source: begin-gen
0277     InstructionFlow: begin-gen
0277      Value: begin-gen
0277       Member: begin-gen
0277        Identifier: begin-gen
0277         Identifier: expr: 'self'
0277        Identifier: end-gen
0277        FunctionCall: begin-gen
0277         Value: begin-gen
0277          Identifier: begin-gen
0277           Identifier: expr: 'fecha'
0277         <-Value: expr: 'fecha'
0277          Identifier: end-gen
0277         Value: end-gen
0277         FunctionCall: expr: 'textoFecha(fecha)'
0277        FunctionCall: end-gen
0277        Member: expr: 'self.textoFecha(fecha)'
0277      <-Value: expr: 'self.textoFecha(fecha)'
0277       Member: end-gen
0277      Value: end-gen
0277      InstructionFlow: line: 'return self.textoFecha(fecha)'
0277    <-Source: line: 'return self.textoFecha(fecha)'
0277   <--Function: line: 'return self.textoFecha(fecha)'
0277  <---Source: line: 'return self.textoFecha(fecha)'
0277 <----Class: line: 'return self.textoFecha(fecha)'
0277<-----Source: line: 'return self.textoFecha(fecha)'
0278     InstructionFlow: end-gen
0278    Source: end-gen
0278    Function: end: 'block-def-pub_textoFecha'
0278  <-Source: end: 'block-def-pub_textoFecha'
0278 <--Class: end: 'block-def-pub_textoFecha'
0278<---Source: end: 'block-def-pub_textoFecha'
0279   Function: end-gen
0279   Function: begin-gen
0279    Variable: begin-gen
0279     Variable: expr: 'nifIva'
0279    Variable: end-gen
0279    Function: line: 'def pub_validarNifIva(self, nifIva = None):'
0279  <-Source: line: 'def pub_validarNifIva(self, nifIva = None):'
0279 <--Class: line: 'def pub_validarNifIva(self, nifIva = None):'
0279<---Source: line: 'def pub_validarNifIva(self, nifIva = None):'
0280    Function: begin: 'block-def-pub_validarNifIva'
0280  <-Source: begin: 'block-def-pub_validarNifIva'
0280 <--Class: begin: 'block-def-pub_validarNifIva'
0280<---Source: begin: 'block-def-pub_validarNifIva'
0280    Source: begin-gen
0280     InstructionFlow: begin-gen
0280      Value: begin-gen
0280       Member: begin-gen
0280        Identifier: begin-gen
0280         Identifier: expr: 'self'
0280        Identifier: end-gen
0280        FunctionCall: begin-gen
0280         Value: begin-gen
0280          Identifier: begin-gen
0280           Identifier: expr: 'nifIva'
0280         <-Value: expr: 'nifIva'
0280          Identifier: end-gen
0280         Value: end-gen
0280         FunctionCall: expr: 'validarNifIva(nifIva)'
0280        FunctionCall: end-gen
0280        Member: expr: 'self.validarNifIva(nifIva)'
0280      <-Value: expr: 'self.validarNifIva(nifIva)'
0280       Member: end-gen
0280      Value: end-gen
0280      InstructionFlow: line: 'return self.validarNifIva(nifIva)'
0280    <-Source: line: 'return self.validarNifIva(nifIva)'
0280   <--Function: line: 'return self.validarNifIva(nifIva)'
0280  <---Source: line: 'return self.validarNifIva(nifIva)'
0280 <----Class: line: 'return self.validarNifIva(nifIva)'
0280<-----Source: line: 'return self.validarNifIva(nifIva)'
0281     InstructionFlow: end-gen
0281    Source: end-gen
0281    Function: end: 'block-def-pub_validarNifIva'
0281  <-Source: end: 'block-def-pub_validarNifIva'
0281 <--Class: end: 'block-def-pub_validarNifIva'
0281<---Source: end: 'block-def-pub_validarNifIva'
0282   Function: end-gen
0282   Function: begin-gen
0282    Variable: begin-gen
0282     Variable: expr: 'comando'
0282    Variable: end-gen
0282    Function: line: 'def pub_ejecutarComandoAsincrono(self, comando = None):'
0282  <-Source: line: 'def pub_ejecutarComandoAsincrono(self, comando = None):'
0282 <--Class: line: 'def pub_ejecutarComandoAsincrono(self, comando = None):'
0282<---Source: line: 'def pub_ejecutarComandoAsincrono(self, comando = None):'
0283    Function: begin: 'block-def-pub_ejecutarComandoAsincrono'
0283  <-Source: begin: 'block-def-pub_ejecutarComandoAsincrono'
0283 <--Class: begin: 'block-def-pub_ejecutarComandoAsincrono'
0283<---Source: begin: 'block-def-pub_ejecutarComandoAsincrono'
0283    Source: begin-gen
0283     InstructionFlow: begin-gen
0283      Value: begin-gen
0283       Member: begin-gen
0283        Identifier: begin-gen
0283         Identifier: expr: 'self'
0283        Identifier: end-gen
0283        FunctionCall: begin-gen
0283         Value: begin-gen
0283          Identifier: begin-gen
0283           Identifier: expr: 'comando'
0283         <-Value: expr: 'comando'
0283          Identifier: end-gen
0283         Value: end-gen
0283         FunctionCall: expr: 'ejecutarComandoAsincrono(comando)'
0283        FunctionCall: end-gen
0283        Member: expr: 'self.ejecutarComandoAsincrono(comando)'
0283      <-Value: expr: 'self.ejecutarComandoAsincrono(comando)'
0283       Member: end-gen
0283      Value: end-gen
0283      InstructionFlow: line: 'return self.ejecutarComandoAsincrono(comando)'
0283    <-Source: line: 'return self.ejecutarComandoAsincrono(comando)'
0283   <--Function: line: 'return self.ejecutarComandoAsincrono(comando)'
0283  <---Source: line: 'return self.ejecutarComandoAsincrono(comando)'
0283 <----Class: line: 'return self.ejecutarComandoAsincrono(comando)'
0283<-----Source: line: 'return self.ejecutarComandoAsincrono(comando)'
0284     InstructionFlow: end-gen
0284    Source: end-gen
0284    Function: end: 'block-def-pub_ejecutarComandoAsincrono'
0284  <-Source: end: 'block-def-pub_ejecutarComandoAsincrono'
0284 <--Class: end: 'block-def-pub_ejecutarComandoAsincrono'
0284<---Source: end: 'block-def-pub_ejecutarComandoAsincrono'
0285   Function: end-gen
0285   Function: begin-gen
0285    Function: line: 'def pub_globalInit(self):'
0285  <-Source: line: 'def pub_globalInit(self):'
0285 <--Class: line: 'def pub_globalInit(self):'
0285<---Source: line: 'def pub_globalInit(self):'
0286    Function: begin: 'block-def-pub_globalInit'
0286  <-Source: begin: 'block-def-pub_globalInit'
0286 <--Class: begin: 'block-def-pub_globalInit'
0286<---Source: begin: 'block-def-pub_globalInit'
0286    Source: begin-gen
0286     InstructionFlow: begin-gen
0286      Value: begin-gen
0286       Member: begin-gen
0286        Identifier: begin-gen
0286         Identifier: expr: 'self'
0286        Identifier: end-gen
0286        FunctionCall: begin-gen
0286         FunctionCall: expr: 'globalInit()'
0286        FunctionCall: end-gen
0286        Member: expr: 'self.globalInit()'
0286      <-Value: expr: 'self.globalInit()'
0286       Member: end-gen
0286      Value: end-gen
0286      InstructionFlow: line: 'return self.globalInit()'
0286    <-Source: line: 'return self.globalInit()'
0286   <--Function: line: 'return self.globalInit()'
0286  <---Source: line: 'return self.globalInit()'
0286 <----Class: line: 'return self.globalInit()'
0286<-----Source: line: 'return self.globalInit()'
0287     InstructionFlow: end-gen
0287    Source: end-gen
0287    Function: end: 'block-def-pub_globalInit'
0287  <-Source: end: 'block-def-pub_globalInit'
0287 <--Class: end: 'block-def-pub_globalInit'
0287<---Source: end: 'block-def-pub_globalInit'
0288   Function: end-gen
0288   Function: begin-gen
0288    Function: line: 'def pub_existeEnvioMail(self):'
0288  <-Source: line: 'def pub_existeEnvioMail(self):'
0288 <--Class: line: 'def pub_existeEnvioMail(self):'
0288<---Source: line: 'def pub_existeEnvioMail(self):'
0289    Function: begin: 'block-def-pub_existeEnvioMail'
0289  <-Source: begin: 'block-def-pub_existeEnvioMail'
0289 <--Class: begin: 'block-def-pub_existeEnvioMail'
0289<---Source: begin: 'block-def-pub_existeEnvioMail'
0289    Source: begin-gen
0289     InstructionFlow: begin-gen
0289      Value: begin-gen
0289       Member: begin-gen
0289        Identifier: begin-gen
0289         Identifier: expr: 'self'
0289        Identifier: end-gen
0289        FunctionCall: begin-gen
0289         FunctionCall: expr: 'existeEnvioMail()'
0289        FunctionCall: end-gen
0289        Member: expr: 'self.existeEnvioMail()'
0289      <-Value: expr: 'self.existeEnvioMail()'
0289       Member: end-gen
0289      Value: end-gen
0289      InstructionFlow: line: 'return self.existeEnvioMail()'
0289    <-Source: line: 'return self.existeEnvioMail()'
0289   <--Function: line: 'return self.existeEnvioMail()'
0289  <---Source: line: 'return self.existeEnvioMail()'
0289 <----Class: line: 'return self.existeEnvioMail()'
0289<-----Source: line: 'return self.existeEnvioMail()'
0290     InstructionFlow: end-gen
0290    Source: end-gen
0290    Function: end: 'block-def-pub_existeEnvioMail'
0290  <-Source: end: 'block-def-pub_existeEnvioMail'
0290 <--Class: end: 'block-def-pub_existeEnvioMail'
0290<---Source: end: 'block-def-pub_existeEnvioMail'
0291   Function: end-gen
0291   Function: begin-gen
0291    Variable: begin-gen
0291     Variable: expr: 'codPais'
0291    Variable: end-gen
0291    Function: line: 'def pub_crearProvinciasEsp(self, codPais = None):'
0291  <-Source: line: 'def pub_crearProvinciasEsp(self, codPais = None):'
0291 <--Class: line: 'def pub_crearProvinciasEsp(self, codPais = None):'
0291<---Source: line: 'def pub_crearProvinciasEsp(self, codPais = None):'
0292    Function: begin: 'block-def-pub_crearProvinciasEsp'
0292  <-Source: begin: 'block-def-pub_crearProvinciasEsp'
0292 <--Class: begin: 'block-def-pub_crearProvinciasEsp'
0292<---Source: begin: 'block-def-pub_crearProvinciasEsp'
0292    Source: begin-gen
0292     InstructionFlow: begin-gen
0292      Value: begin-gen
0292       Member: begin-gen
0292        Identifier: begin-gen
0292         Identifier: expr: 'self'
0292        Identifier: end-gen
0292        FunctionCall: begin-gen
0292         Value: begin-gen
0292          Identifier: begin-gen
0292           Identifier: expr: 'codPais'
0292         <-Value: expr: 'codPais'
0292          Identifier: end-gen
0292         Value: end-gen
0292         FunctionCall: expr: 'crearProvinciasEsp(codPais)'
0292        FunctionCall: end-gen
0292        Member: expr: 'self.crearProvinciasEsp(codPais)'
0292      <-Value: expr: 'self.crearProvinciasEsp(codPais)'
0292       Member: end-gen
0292      Value: end-gen
0292      InstructionFlow: line: 'return self.crearProvinciasEsp(codPais)'
0292    <-Source: line: 'return self.crearProvinciasEsp(codPais)'
0292   <--Function: line: 'return self.crearProvinciasEsp(codPais)'
0292  <---Source: line: 'return self.crearProvinciasEsp(codPais)'
0292 <----Class: line: 'return self.crearProvinciasEsp(codPais)'
0292<-----Source: line: 'return self.crearProvinciasEsp(codPais)'
0293     InstructionFlow: end-gen
0293    Source: end-gen
0293    Function: end: 'block-def-pub_crearProvinciasEsp'
0293  <-Source: end: 'block-def-pub_crearProvinciasEsp'
0293 <--Class: end: 'block-def-pub_crearProvinciasEsp'
0293<---Source: end: 'block-def-pub_crearProvinciasEsp'
0294   Function: end-gen
0294   Function: begin-gen
0294    Variable: begin-gen
0294     Variable: expr: 'cursor'
0294    Variable: end-gen
0294    Variable: begin-gen
0294     Variable: expr: 'mtd'
0294    Variable: end-gen
0294    Function: line: 'def pub_validarProvincia(self, cursor = None, mtd = None):'
0294  <-Source: line: 'def pub_validarProvincia(self, cursor = None, mtd = None):'
0294 <--Class: line: 'def pub_validarProvincia(self, cursor = None, mtd = None):'
0294<---Source: line: 'def pub_validarProvincia(self, cursor = None, mtd = None):'
0295    Function: begin: 'block-def-pub_validarProvincia'
0295  <-Source: begin: 'block-def-pub_validarProvincia'
0295 <--Class: begin: 'block-def-pub_validarProvincia'
0295<---Source: begin: 'block-def-pub_validarProvincia'
0295    Source: begin-gen
0295     InstructionFlow: begin-gen
0295      Value: begin-gen
0295       Member: begin-gen
0295        Identifier: begin-gen
0295         Identifier: expr: 'self'
0295        Identifier: end-gen
0295        FunctionCall: begin-gen
0295         Value: begin-gen
0295          Identifier: begin-gen
0295           Identifier: expr: 'cursor'
0295         <-Value: expr: 'cursor'
0295          Identifier: end-gen
0295         Value: end-gen
0295         Value: begin-gen
0295          Identifier: begin-gen
0295           Identifier: expr: 'mtd'
0295         <-Value: expr: 'mtd'
0295          Identifier: end-gen
0295         Value: end-gen
0295         FunctionCall: expr: 'validarProvincia(cursor, mtd)'
0295        FunctionCall: end-gen
0295        Member: expr: 'self.validarProvincia(cursor, mtd)'
0295      <-Value: expr: 'self.validarProvincia(cursor, mtd)'
0295       Member: end-gen
0295      Value: end-gen
0295      InstructionFlow: line: 'return self.validarProvincia(cursor, mtd)'
0295    <-Source: line: 'return self.validarProvincia(cursor, mtd)'
0295   <--Function: line: 'return self.validarProvincia(cursor, mtd)'
0295  <---Source: line: 'return self.validarProvincia(cursor, mtd)'
0295 <----Class: line: 'return self.validarProvincia(cursor, mtd)'
0295<-----Source: line: 'return self.validarProvincia(cursor, mtd)'
0296     InstructionFlow: end-gen
0296    Source: end-gen
0296    Function: end: 'block-def-pub_validarProvincia'
0296  <-Source: end: 'block-def-pub_validarProvincia'
0296 <--Class: end: 'block-def-pub_validarProvincia'
0296<---Source: end: 'block-def-pub_validarProvincia'
0297   Function: end-gen
0297   Function: begin-gen
0297    Variable: begin-gen
0297     Variable: expr: 'str'
0297    Variable: end-gen
0297    Function: line: 'def pub_simplify(self, str = None):'
0297  <-Source: line: 'def pub_simplify(self, str = None):'
0297 <--Class: line: 'def pub_simplify(self, str = None):'
0297<---Source: line: 'def pub_simplify(self, str = None):'
0298    Function: begin: 'block-def-pub_simplify'
0298  <-Source: begin: 'block-def-pub_simplify'
0298 <--Class: begin: 'block-def-pub_simplify'
0298<---Source: begin: 'block-def-pub_simplify'
0298    Source: begin-gen
0298     InstructionFlow: begin-gen
0298      Value: begin-gen
0298       Member: begin-gen
0298        Identifier: begin-gen
0298         Identifier: expr: 'self'
0298        Identifier: end-gen
0298        FunctionCall: begin-gen
0298         Value: begin-gen
0298          Identifier: begin-gen
0298           Identifier: expr: 'str'
0298         <-Value: expr: 'str'
0298          Identifier: end-gen
0298         Value: end-gen
0298         FunctionCall: expr: 'simplify(str)'
0298        FunctionCall: end-gen
0298        Member: expr: 'self.simplify(str)'
0298      <-Value: expr: 'self.simplify(str)'
0298       Member: end-gen
0298      Value: end-gen
0298      InstructionFlow: line: 'return self.simplify(str)'
0298    <-Source: line: 'return self.simplify(str)'
0298   <--Function: line: 'return self.simplify(str)'
0298  <---Source: line: 'return self.simplify(str)'
0298 <----Class: line: 'return self.simplify(str)'
0298<-----Source: line: 'return self.simplify(str)'
0299     InstructionFlow: end-gen
0299    Source: end-gen
0299    Function: end: 'block-def-pub_simplify'
0299  <-Source: end: 'block-def-pub_simplify'
0299 <--Class: end: 'block-def-pub_simplify'
0299<---Source: end: 'block-def-pub_simplify'
0300   Function: end-gen
0300   Function: begin-gen
0300    Variable: begin-gen
0300     Variable: expr: 'str'
0300    Variable: end-gen
0300    Function: line: 'def pub_escapeQuote(self, str = None):'
0300  <-Source: line: 'def pub_escapeQuote(self, str = None):'
0300 <--Class: line: 'def pub_escapeQuote(self, str = None):'
0300<---Source: line: 'def pub_escapeQuote(self, str = None):'
0301    Function: begin: 'block-def-pub_escapeQuote'
0301  <-Source: begin: 'block-def-pub_escapeQuote'
0301 <--Class: begin: 'block-def-pub_escapeQuote'
0301<---Source: begin: 'block-def-pub_escapeQuote'
0301    Source: begin-gen
0301     InstructionFlow: begin-gen
0301      Value: begin-gen
0301       Member: begin-gen
0301        Identifier: begin-gen
0301         Identifier: expr: 'self'
0301        Identifier: end-gen
0301        FunctionCall: begin-gen
0301         Value: begin-gen
0301          Identifier: begin-gen
0301           Identifier: expr: 'str'
0301         <-Value: expr: 'str'
0301          Identifier: end-gen
0301         Value: end-gen
0301         FunctionCall: expr: 'escapeQuote(str)'
0301        FunctionCall: end-gen
0301        Member: expr: 'self.escapeQuote(str)'
0301      <-Value: expr: 'self.escapeQuote(str)'
0301       Member: end-gen
0301      Value: end-gen
0301      InstructionFlow: line: 'return self.escapeQuote(str)'
0301    <-Source: line: 'return self.escapeQuote(str)'
0301   <--Function: line: 'return self.escapeQuote(str)'
0301  <---Source: line: 'return self.escapeQuote(str)'
0301 <----Class: line: 'return self.escapeQuote(str)'
0301<-----Source: line: 'return self.escapeQuote(str)'
0302     InstructionFlow: end-gen
0302    Source: end-gen
0302    Function: end: 'block-def-pub_escapeQuote'
0302  <-Source: end: 'block-def-pub_escapeQuote'
0302 <--Class: end: 'block-def-pub_escapeQuote'
0302<---Source: end: 'block-def-pub_escapeQuote'
0303   Function: end-gen
0303   Function: begin-gen
0303    Variable: begin-gen
0303     Variable: expr: 'cuenta'
0303    Variable: end-gen
0303    Variable: begin-gen
0303     Variable: expr: 'codPais'
0303    Variable: end-gen
0303    Function: line: 'def pub_calcularIBAN(self, cuenta = None, codPais = None):'
0303  <-Source: line: 'def pub_calcularIBAN(self, cuenta = None, codPais = None):'
0303 <--Class: line: 'def pub_calcularIBAN(self, cuenta = None, codPais = None):'
0303<---Source: line: 'def pub_calcularIBAN(self, cuenta = None, codPais = None):'
0304    Function: begin: 'block-def-pub_calcularIBAN'
0304  <-Source: begin: 'block-def-pub_calcularIBAN'
0304 <--Class: begin: 'block-def-pub_calcularIBAN'
0304<---Source: begin: 'block-def-pub_calcularIBAN'
0304    Source: begin-gen
0304     InstructionFlow: begin-gen
0304      Value: begin-gen
0304       Member: begin-gen
0304        Identifier: begin-gen
0304         Identifier: expr: 'self'
0304        Identifier: end-gen
0304        FunctionCall: begin-gen
0304         Value: begin-gen
0304          Identifier: begin-gen
0304           Identifier: expr: 'cuenta'
0304         <-Value: expr: 'cuenta'
0304          Identifier: end-gen
0304         Value: end-gen
0304         Value: begin-gen
0304          Identifier: begin-gen
0304           Identifier: expr: 'codPais'
0304         <-Value: expr: 'codPais'
0304          Identifier: end-gen
0304         Value: end-gen
0304         FunctionCall: expr: 'calcularIBAN(cuenta, codPais)'
0304        FunctionCall: end-gen
0304        Member: expr: 'self.calcularIBAN(cuenta, codPais)'
0304      <-Value: expr: 'self.calcularIBAN(cuenta, codPais)'
0304       Member: end-gen
0304      Value: end-gen
0304      InstructionFlow: line: 'return self.calcularIBAN(cuenta, codPais)'
0304    <-Source: line: 'return self.calcularIBAN(cuenta, codPais)'
0304   <--Function: line: 'return self.calcularIBAN(cuenta, codPais)'
0304  <---Source: line: 'return self.calcularIBAN(cuenta, codPais)'
0304 <----Class: line: 'return self.calcularIBAN(cuenta, codPais)'
0304<-----Source: line: 'return self.calcularIBAN(cuenta, codPais)'
0305     InstructionFlow: end-gen
0305    Source: end-gen
0305    Function: end: 'block-def-pub_calcularIBAN'
0305  <-Source: end: 'block-def-pub_calcularIBAN'
0305 <--Class: end: 'block-def-pub_calcularIBAN'
0305<---Source: end: 'block-def-pub_calcularIBAN'
0306   Function: end-gen
0306   Function: begin-gen
0306    Variable: begin-gen
0306     Variable: expr: 'numero'
0306    Variable: end-gen
0306    Variable: begin-gen
0306     Variable: expr: 'codPais'
0306    Variable: end-gen
0306    Function: line: 'def pub_digitoControlMod97(self, numero = None, codPais = None):'
0306  <-Source: line: 'def pub_digitoControlMod97(self, numero = None, codPais = None):'
0306 <--Class: line: 'def pub_digitoControlMod97(self, numero = None, codPais = None):'
0306<---Source: line: 'def pub_digitoControlMod97(self, numero = None, codPais = None):'
0307    Function: begin: 'block-def-pub_digitoControlMod97'
0307  <-Source: begin: 'block-def-pub_digitoControlMod97'
0307 <--Class: begin: 'block-def-pub_digitoControlMod97'
0307<---Source: begin: 'block-def-pub_digitoControlMod97'
0307    Source: begin-gen
0307     InstructionFlow: begin-gen
0307      Value: begin-gen
0307       Member: begin-gen
0307        Identifier: begin-gen
0307         Identifier: expr: 'self'
0307        Identifier: end-gen
0307        FunctionCall: begin-gen
0307         Value: begin-gen
0307          Identifier: begin-gen
0307           Identifier: expr: 'numero'
0307         <-Value: expr: 'numero'
0307          Identifier: end-gen
0307         Value: end-gen
0307         Value: begin-gen
0307          Identifier: begin-gen
0307           Identifier: expr: 'codPais'
0307         <-Value: expr: 'codPais'
0307          Identifier: end-gen
0307         Value: end-gen
0307         FunctionCall: expr: 'digitoControlMod97(numero, codPais)'
0307        FunctionCall: end-gen
0307        Member: expr: 'self.digitoControlMod97(numero, codPais)'
0307      <-Value: expr: 'self.digitoControlMod97(numero, codPais)'
0307       Member: end-gen
0307      Value: end-gen
0307      InstructionFlow: line: 'return self.digitoControlMod97(numero, codPais)'
0307    <-Source: line: 'return self.digitoControlMod97(numero, codPais)'
0307   <--Function: line: 'return self.digitoControlMod97(numero, codPais)'
0307  <---Source: line: 'return self.digitoControlMod97(numero, codPais)'
0307 <----Class: line: 'return self.digitoControlMod97(numero, codPais)'
0307<-----Source: line: 'return self.digitoControlMod97(numero, codPais)'
0308     InstructionFlow: end-gen
0308    Source: end-gen
0308    Function: end: 'block-def-pub_digitoControlMod97'
0308  <-Source: end: 'block-def-pub_digitoControlMod97'
0308 <--Class: end: 'block-def-pub_digitoControlMod97'
0308<---Source: end: 'block-def-pub_digitoControlMod97'
0309   Function: end-gen
0309   Function: begin-gen
0309    Variable: begin-gen
0309     Variable: expr: 'num'
0309    Variable: end-gen
0309    Variable: begin-gen
0309     Variable: expr: 'div'
0309    Variable: end-gen
0309    Function: line: 'def pub_moduloNumero(self, num = None, div = None):'
0309  <-Source: line: 'def pub_moduloNumero(self, num = None, div = None):'
0309 <--Class: line: 'def pub_moduloNumero(self, num = None, div = None):'
0309<---Source: line: 'def pub_moduloNumero(self, num = None, div = None):'
0310    Function: begin: 'block-def-pub_moduloNumero'
0310  <-Source: begin: 'block-def-pub_moduloNumero'
0310 <--Class: begin: 'block-def-pub_moduloNumero'
0310<---Source: begin: 'block-def-pub_moduloNumero'
0310    Source: begin-gen
0310     InstructionFlow: begin-gen
0310      Value: begin-gen
0310       Member: begin-gen
0310        Identifier: begin-gen
0310         Identifier: expr: 'self'
0310        Identifier: end-gen
0310        FunctionCall: begin-gen
0310         Value: begin-gen
0310          Identifier: begin-gen
0310           Identifier: expr: 'num'
0310         <-Value: expr: 'num'
0310          Identifier: end-gen
0310         Value: end-gen
0310         Value: begin-gen
0310          Identifier: begin-gen
0310           Identifier: expr: 'div'
0310         <-Value: expr: 'div'
0310          Identifier: end-gen
0310         Value: end-gen
0310         FunctionCall: expr: 'moduloNumero(num, div)'
0310        FunctionCall: end-gen
0310        Member: expr: 'self.moduloNumero(num, div)'
0310      <-Value: expr: 'self.moduloNumero(num, div)'
0310       Member: end-gen
0310      Value: end-gen
0310      InstructionFlow: line: 'return self.moduloNumero(num, div)'
0310    <-Source: line: 'return self.moduloNumero(num, div)'
0310   <--Function: line: 'return self.moduloNumero(num, div)'
0310  <---Source: line: 'return self.moduloNumero(num, div)'
0310 <----Class: line: 'return self.moduloNumero(num, div)'
0310<-----Source: line: 'return self.moduloNumero(num, div)'
0311     InstructionFlow: end-gen
0311    Source: end-gen
0311    Function: end: 'block-def-pub_moduloNumero'
0311  <-Source: end: 'block-def-pub_moduloNumero'
0311 <--Class: end: 'block-def-pub_moduloNumero'
0311<---Source: end: 'block-def-pub_moduloNumero'
0312   Function: end-gen
0312  Source: end-gen
0312  Class: end: 'block-class-ifaceCtx'
0312<-Source: end: 'block-class-ifaceCtx'
0313 Class: end-gen
0313 Class: begin-gen
0313  Class: line: 'class FormInternalObj(qsatype.FormDBWidget):'
0313<-Source: line: 'class FormInternalObj(qsatype.FormDBWidget):'
0314  Class: begin: 'block-class-FormInternalObj'
0314<-Source: begin: 'block-class-FormInternalObj'
0314  Source: begin-gen
0314   Function: begin-gen
0314    Function: line: 'def _class_init(self):'
0314  <-Source: line: 'def _class_init(self):'
0314 <--Class: line: 'def _class_init(self):'
0314<---Source: line: 'def _class_init(self):'
0315    Function: begin: 'block-def-_class_init'
0315  <-Source: begin: 'block-def-_class_init'
0315 <--Class: begin: 'block-def-_class_init'
0315<---Source: begin: 'block-def-_class_init'
0315    Source: begin-gen
0315     DeclarationBlock: begin-gen
0315      Variable: begin-gen
0315       Variable: expr: 'iface'
0315       Variable: expr: '='
0315       Value: begin-gen
0315        New: begin-gen
0315         FunctionCall: begin-gen
0315          Value: begin-gen
0315           Identifier: begin-gen
0315            Identifier: expr: 'self'
0315          <-Value: expr: 'self'
0315           Identifier: end-gen
0315          Value: end-gen
0315          FunctionCall: expr: 'ifaceCtx(self)'
0315        <-New: expr: 'ifaceCtx(self)'
0315       <--Value: expr: 'ifaceCtx(self)'
0315      <---Variable: expr: 'ifaceCtx(self)'
0315         FunctionCall: end-gen
0315        New: end-gen
0315       Value: end-gen
0315      Variable: end-gen
0315      DeclarationBlock: line: 'self.iface = ifaceCtx(self)'
0315    <-Source: line: 'self.iface = ifaceCtx(self)'
0315   <--Function: line: 'self.iface = ifaceCtx(self)'
0315  <---Source: line: 'self.iface = ifaceCtx(self)'
0315 <----Class: line: 'self.iface = ifaceCtx(self)'
0315<-----Source: line: 'self.iface = ifaceCtx(self)'
0316     DeclarationBlock: end-gen
0316    Source: end-gen
0316    Function: end: 'block-def-_class_init'
0316  <-Source: end: 'block-def-_class_init'
0316 <--Class: end: 'block-def-_class_init'
0316<---Source: end: 'block-def-_class_init'
0317   Function: end-gen
0317   Function: begin-gen
0317    Function: line: 'def interna_init(self):'
0317  <-Source: line: 'def interna_init(self):'
0317 <--Class: line: 'def interna_init(self):'
0317<---Source: line: 'def interna_init(self):'
0318    Function: begin: 'block-def-interna_init'
0318  <-Source: begin: 'block-def-interna_init'
0318 <--Class: begin: 'block-def-interna_init'
0318<---Source: begin: 'block-def-interna_init'
0318    Source: begin-gen
0318     DeclarationBlock: begin-gen
0318      Variable: begin-gen
0318       Variable: expr: 'util'
0318       Variable: expr: '='
0318       Value: begin-gen
0318        New: begin-gen
0318         FunctionCall: begin-gen
0318          FunctionCall: expr: 'FLUtil()'
0318        <-New: expr: 'qsatype.FLUtil()'
0318       <--Value: expr: 'qsatype.FLUtil()'
0318      <---Variable: expr: 'qsatype.FLUtil()'
0318         FunctionCall: end-gen
0318        New: end-gen
0318       Value: end-gen
0318      Variable: end-gen
0318      DeclarationBlock: line: 'util = qsatype.FLUtil()'
0318    <-Source: line: 'util = qsatype.FLUtil()'
0318   <--Function: line: 'util = qsatype.FLUtil()'
0318  <---Source: line: 'util = qsatype.FLUtil()'
0318 <----Class: line: 'util = qsatype.FLUtil()'
0318<-----Source: line: 'util = qsatype.FLUtil()'
0319     DeclarationBlock: end-gen
0319     DeclarationBlock: begin-gen
0319      Variable: begin-gen
0319       Variable: expr: 'condicion'
0319       Variable: expr: '='
0319       Value: begin-gen
0319        Member: begin-gen
0319         Identifier: begin-gen
0319          Identifier: expr: 'util'
0319         Identifier: end-gen
0319         FunctionCall: begin-gen
0319          Value: begin-gen
0319           Constant: begin-gen
0319            Constant: ctype: 'String' -> 'clientes'
0319            Constant: expr: 'u"clientes"'
0319          <-Value: expr: 'u"clientes"'
0319           Constant: end-gen
0319          Value: end-gen
0319          Value: begin-gen
0319           Constant: begin-gen
0319            Constant: ctype: 'String' -> 'codcliente'
0319            Constant: expr: 'u"codcliente"'
0319          <-Value: expr: 'u"codcliente"'
0319           Constant: end-gen
0319          Value: end-gen
0319          Value: begin-gen
0319           Constant: begin-gen
0319            Constant: ctype: 'String' -> "(codcontacto = '' OR codcontacto IS NULL) AND (contacto <> '' AND contacto IS NOT NULL)"
0319            Constant: expr: 'u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)"'
0319          <-Value: expr: 'u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)"'
0319           Constant: end-gen
0319          Value: end-gen
0319          FunctionCall: expr: 'sqlSelect(u"clientes", u"codcliente", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0319         FunctionCall: end-gen
0319         Member: expr: 'util.sqlSelect(u"clientes", u"codcliente", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0319       <-Value: expr: 'util.sqlSelect(u"clientes", u"codcliente", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0319      <--Variable: expr: 'util.sqlSelect(u"clientes", u"codcliente", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0319        Member: end-gen
0319       Value: end-gen
0319      Variable: end-gen
0319      DeclarationBlock: line: 'condicion = util.sqlSelect(u"clientes", u"codcliente", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0319    <-Source: line: 'condicion = util.sqlSelect(u"clientes", u"codcliente", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0319   <--Function: line: 'condicion = util.sqlSelect(u"clientes", u"codcliente", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0319  <---Source: line: 'condicion = util.sqlSelect(u"clientes", u"codcliente", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0319 <----Class: line: 'condicion = util.sqlSelect(u"clientes", u"codcliente", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0319<-----Source: line: 'condicion = util.sqlSelect(u"clientes", u"codcliente", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0320     DeclarationBlock: end-gen
0320     DeclarationBlock: begin-gen
0320      Variable: begin-gen
0320       Variable: expr: 'condicionProv'
0320       Variable: expr: '='
0320       Value: begin-gen
0320        Member: begin-gen
0320         Identifier: begin-gen
0320          Identifier: expr: 'util'
0320         Identifier: end-gen
0320         FunctionCall: begin-gen
0320          Value: begin-gen
0320           Constant: begin-gen
0320            Constant: ctype: 'String' -> 'proveedores'
0320            Constant: expr: 'u"proveedores"'
0320          <-Value: expr: 'u"proveedores"'
0320           Constant: end-gen
0320          Value: end-gen
0320          Value: begin-gen
0320           Constant: begin-gen
0320            Constant: ctype: 'String' -> 'codproveedor'
0320            Constant: expr: 'u"codproveedor"'
0320          <-Value: expr: 'u"codproveedor"'
0320           Constant: end-gen
0320          Value: end-gen
0320          Value: begin-gen
0320           Constant: begin-gen
0320            Constant: ctype: 'String' -> "(codcontacto = '' OR codcontacto IS NULL) AND (contacto <> '' AND contacto IS NOT NULL)"
0320            Constant: expr: 'u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)"'
0320          <-Value: expr: 'u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)"'
0320           Constant: end-gen
0320          Value: end-gen
0320          FunctionCall: expr: 'sqlSelect(u"proveedores", u"codproveedor", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0320         FunctionCall: end-gen
0320         Member: expr: 'util.sqlSelect(u"proveedores", u"codproveedor", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0320       <-Value: expr: 'util.sqlSelect(u"proveedores", u"codproveedor", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0320      <--Variable: expr: 'util.sqlSelect(u"proveedores", u"codproveedor", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0320        Member: end-gen
0320       Value: end-gen
0320      Variable: end-gen
0320      DeclarationBlock: line: 'condicionProv = util.sqlSelect(u"proveedores", u"codproveedor", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0320    <-Source: line: 'condicionProv = util.sqlSelect(u"proveedores", u"codproveedor", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0320   <--Function: line: 'condicionProv = util.sqlSelect(u"proveedores", u"codproveedor", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0320  <---Source: line: 'condicionProv = util.sqlSelect(u"proveedores", u"codproveedor", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0320 <----Class: line: 'condicionProv = util.sqlSelect(u"proveedores", u"codproveedor", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0320<-----Source: line: 'condicionProv = util.sqlSelect(u"proveedores", u"codproveedor", u"(codcontacto = \'\' OR codcontacto IS NULL) AND (contacto <> \'\' AND contacto IS NOT NULL)")'
0321     DeclarationBlock: end-gen
0321     If: begin-gen
0321      Value: begin-gen
0321       Identifier: begin-gen
0321        Identifier: expr: 'condicion'
0321      <-Value: expr: 'condicion'
0321       Identifier: end-gen
0321      Value: end-gen
0321      If: line: 'if condicion:'
0321    <-Source: line: 'if condicion:'
0321   <--Function: line: 'if condicion:'
0321  <---Source: line: 'if condicion:'
0321 <----Class: line: 'if condicion:'
0321<-----Source: line: 'if condicion:'
0322      If: begin: 'block-if'
0322    <-Source: begin: 'block-if'
0322   <--Function: begin: 'block-if'
0322  <---Source: begin: 'block-if'
0322 <----Class: begin: 'block-if'
0322<-----Source: begin: 'block-if'
0322      Source: begin-gen
0322       DeclarationBlock: begin-gen
0322        Variable: begin-gen
0322         Variable: expr: 'cursor'
0322         Variable: expr: '='
0322         Value: begin-gen
0322          New: begin-gen
0322           FunctionCall: begin-gen
0322            Value: begin-gen
0322             Constant: begin-gen
0322              Constant: ctype: 'String' -> 'clientes'
0322              Constant: expr: 'u"clientes"'
0322            <-Value: expr: 'u"clientes"'
0322             Constant: end-gen
0322            Value: end-gen
0322            FunctionCall: expr: 'FLSqlCursor(u"clientes")'
0322          <-New: expr: 'qsatype.FLSqlCursor(u"clientes")'
0322         <--Value: expr: 'qsatype.FLSqlCursor(u"clientes")'
0322        <---Variable: expr: 'qsatype.FLSqlCursor(u"clientes")'
0322           FunctionCall: end-gen
0322          New: end-gen
0322         Value: end-gen
0322        Variable: end-gen
0322        DeclarationBlock: line: 'cursor = qsatype.FLSqlCursor(u"clientes")'
0322      <-Source: line: 'cursor = qsatype.FLSqlCursor(u"clientes")'
0322     <--If: line: 'cursor = qsatype.FLSqlCursor(u"clientes")'
0322    <---Source: line: 'cursor = qsatype.FLSqlCursor(u"clientes")'
0322   <----Function: line: 'cursor = qsatype.FLSqlCursor(u"clientes")'
0322  <-----Source: line: 'cursor = qsatype.FLSqlCursor(u"clientes")'
0322 <------Class: line: 'cursor = qsatype.FLSqlCursor(u"clientes")'
0322<-------Source: line: 'cursor = qsatype.FLSqlCursor(u"clientes")'
0323       DeclarationBlock: end-gen
0323       InstructionCall: begin-gen
0323        Member: begin-gen
0323         Identifier: begin-gen
0323          Identifier: expr: 'cursor'
0323         Identifier: end-gen
0323         FunctionCall: begin-gen
0323          Value: begin-gen
0323           Identifier: begin-gen
0323            Identifier: expr: 'False'
0323          <-Value: expr: 'False'
0323           Identifier: end-gen
0323          Value: end-gen
0323          FunctionCall: expr: 'transaction(False)'
0323         FunctionCall: end-gen
0323         Member: expr: 'cursor.transaction(False)'
0323        Member: end-gen
0323        InstructionCall: line: 'cursor.transaction(False)'
0323      <-Source: line: 'cursor.transaction(False)'
0323     <--If: line: 'cursor.transaction(False)'
0323    <---Source: line: 'cursor.transaction(False)'
0323   <----Function: line: 'cursor.transaction(False)'
0323  <-----Source: line: 'cursor.transaction(False)'
0323 <------Class: line: 'cursor.transaction(False)'
0323<-------Source: line: 'cursor.transaction(False)'
0324       InstructionCall: end-gen
0324       TryCatch: begin-gen
0324        TryCatch: line: 'try:'
0324      <-Source: line: 'try:'
0324     <--If: line: 'try:'
0324    <---Source: line: 'try:'
0324   <----Function: line: 'try:'
0324  <-----Source: line: 'try:'
0324 <------Class: line: 'try:'
0324<-------Source: line: 'try:'
0325        TryCatch: begin: 'block-try'
0325      <-Source: begin: 'block-try'
0325     <--If: begin: 'block-try'
0325    <---Source: begin: 'block-try'
0325   <----Function: begin: 'block-try'
0325  <-----Source: begin: 'block-try'
0325 <------Class: begin: 'block-try'
0325<-------Source: begin: 'block-try'
0325        Source: begin-gen
0325         If: begin-gen
0325          Value: begin-gen
0325           Member: begin-gen
0325            Identifier: begin-gen
0325             Identifier: expr: 'self'
0325            Identifier: end-gen
0325            Identifier: begin-gen
0325             Identifier: expr: 'iface'
0325            Identifier: end-gen
0325            FunctionCall: begin-gen
0325             FunctionCall: expr: 'actualizarContactos20070525()'
0325            FunctionCall: end-gen
0325            Member: expr: 'self.iface.actualizarContactos20070525()'
0325          <-Value: expr: 'self.iface.actualizarContactos20070525()'
0325           Member: end-gen
0325          Value: end-gen
0325          If: line: 'if self.iface.actualizarContactos20070525():'
0325        <-Source: line: 'if self.iface.actualizarContactos20070525():'
0325       <--TryCatch: line: 'if self.iface.actualizarContactos20070525():'
0325      <---Source: line: 'if self.iface.actualizarContactos20070525():'
0325     <----If: line: 'if self.iface.actualizarContactos20070525():'
0325    <-----Source: line: 'if self.iface.actualizarContactos20070525():'
0325   <------Function: line: 'if self.iface.actualizarContactos20070525():'
0325  <-------Source: line: 'if self.iface.actualizarContactos20070525():'
0325 <--------Class: line: 'if self.iface.actualizarContactos20070525():'
0325<---------Source: line: 'if self.iface.actualizarContactos20070525():'
0326          If: begin: 'block-if'
0326        <-Source: begin: 'block-if'
0326       <--TryCatch: begin: 'block-if'
0326      <---Source: begin: 'block-if'
0326     <----If: begin: 'block-if'
0326    <-----Source: begin: 'block-if'
0326   <------Function: begin: 'block-if'
0326  <-------Source: begin: 'block-if'
0326 <--------Class: begin: 'block-if'
0326<---------Source: begin: 'block-if'
0326          Source: begin-gen
0326           InstructionCall: begin-gen
0326            Member: begin-gen
0326             Identifier: begin-gen
0326              Identifier: expr: 'cursor'
0326             Identifier: end-gen
0326             FunctionCall: begin-gen
0326              FunctionCall: expr: 'commit()'
0326             FunctionCall: end-gen
0326             Member: expr: 'cursor.commit()'
0326            Member: end-gen
0326            InstructionCall: line: 'cursor.commit()'
0326          <-Source: line: 'cursor.commit()'
0326         <--If: line: 'cursor.commit()'
0326        <---Source: line: 'cursor.commit()'
0326       <----TryCatch: line: 'cursor.commit()'
0326      <-----Source: line: 'cursor.commit()'
0326     <------If: line: 'cursor.commit()'
0326    <-------Source: line: 'cursor.commit()'
0326   <--------Function: line: 'cursor.commit()'
0326  <---------Source: line: 'cursor.commit()'
0326 <----------Class: line: 'cursor.commit()'
0326<-----------Source: line: 'cursor.commit()'
0327           InstructionCall: end-gen
0327          Source: end-gen
0327          If: end: 'block-if'
0327        <-Source: end: 'block-if'
0327       <--TryCatch: end: 'block-if'
0327      <---Source: end: 'block-if'
0327     <----If: end: 'block-if'
0327    <-----Source: end: 'block-if'
0327   <------Function: end: 'block-if'
0327  <-------Source: end: 'block-if'
0327 <--------Class: end: 'block-if'
0327<---------Source: end: 'block-if'
0327          If: line: 'else:'
0327        <-Source: line: 'else:'
0327       <--TryCatch: line: 'else:'
0327      <---Source: line: 'else:'
0327     <----If: line: 'else:'
0327    <-----Source: line: 'else:'
0327   <------Function: line: 'else:'
0327  <-------Source: line: 'else:'
0327 <--------Class: line: 'else:'
0327<---------Source: line: 'else:'
0328          If: begin: 'block-else'
0328        <-Source: begin: 'block-else'
0328       <--TryCatch: begin: 'block-else'
0328      <---Source: begin: 'block-else'
0328     <----If: begin: 'block-else'
0328    <-----Source: begin: 'block-else'
0328   <------Function: begin: 'block-else'
0328  <-------Source: begin: 'block-else'
0328 <--------Class: begin: 'block-else'
0328<---------Source: begin: 'block-else'
0328          Source: begin-gen
0328           InstructionCall: begin-gen
0328            Member: begin-gen
0328             Identifier: begin-gen
0328              Identifier: expr: 'cursor'
0328             Identifier: end-gen
0328             FunctionCall: begin-gen
0328              FunctionCall: expr: 'rollback()'
0328             FunctionCall: end-gen
0328             Member: expr: 'cursor.rollback()'
0328            Member: end-gen
0328            InstructionCall: line: 'cursor.rollback()'
0328          <-Source: line: 'cursor.rollback()'
0328         <--If: line: 'cursor.rollback()'
0328        <---Source: line: 'cursor.rollback()'
0328       <----TryCatch: line: 'cursor.rollback()'
0328      <-----Source: line: 'cursor.rollback()'
0328     <------If: line: 'cursor.rollback()'
0328    <-------Source: line: 'cursor.rollback()'
0328   <--------Function: line: 'cursor.rollback()'
0328  <---------Source: line: 'cursor.rollback()'
0328 <----------Class: line: 'cursor.rollback()'
0328<-----------Source: line: 'cursor.rollback()'
0329           InstructionCall: end-gen
0329          Source: end-gen
0329          If: end: 'block-else'
0329        <-Source: end: 'block-else'
0329       <--TryCatch: end: 'block-else'
0329      <---Source: end: 'block-else'
0329     <----If: end: 'block-else'
0329    <-----Source: end: 'block-else'
0329   <------Function: end: 'block-else'
0329  <-------Source: end: 'block-else'
0329 <--------Class: end: 'block-else'
0329<---------Source: end: 'block-else'
0330         If: end-gen
0330        Source: end-gen
0330        TryCatch: end: 'block-try'
0330      <-Source: end: 'block-try'
0330     <--If: end: 'block-try'
0330    <---Source: end: 'block-try'
0330   <----Function: end: 'block-try'
0330  <-----Source: end: 'block-try'
0330 <------Class: end: 'block-try'
0330<-------Source: end: 'block-try'
0330        Identifier: begin-gen
0330         Identifier: expr: 'e'
0330        Identifier: end-gen
0330        TryCatch: line: 'except Exception as e:'
0330      <-Source: line: 'except Exception as e:'
0330     <--If: line: 'except Exception as e:'
0330    <---Source: line: 'except Exception as e:'
0330   <----Function: line: 'except Exception as e:'
0330  <-----Source: line: 'except Exception as e:'
0330 <------Class: line: 'except Exception as e:'
0330<-------Source: line: 'except Exception as e:'
0332        TryCatch: begin: 'block-except'
0332      <-Source: begin: 'block-except'
0332     <--If: begin: 'block-except'
0332    <---Source: begin: 'block-except'
0332   <----Function: begin: 'block-except'
0332  <-----Source: begin: 'block-except'
0332 <------Class: begin: 'block-except'
0332<-------Source: begin: 'block-except'
0332        TryCatch: line: 'e = traceback.format_exc()'
0332      <-Source: line: 'e = traceback.format_exc()'
0332     <--If: line: 'e = traceback.format_exc()'
0332    <---Source: line: 'e = traceback.format_exc()'
0332   <----Function: line: 'e = traceback.format_exc()'
0332  <-----Source: line: 'e = traceback.format_exc()'
0332 <------Class: line: 'e = traceback.format_exc()'
0332<-------Source: line: 'e = traceback.format_exc()'
0333        Source: begin-gen
0333         InstructionCall: begin-gen
0333          Member: begin-gen
0333           Identifier: begin-gen
0333            Identifier: expr: 'cursor'
0333           Identifier: end-gen
0333           FunctionCall: begin-gen
0333            FunctionCall: expr: 'rollback()'
0333           FunctionCall: end-gen
0333           Member: expr: 'cursor.rollback()'
0333          Member: end-gen
0333          InstructionCall: line: 'cursor.rollback()'
0333        <-Source: line: 'cursor.rollback()'
0333       <--TryCatch: line: 'cursor.rollback()'
0333      <---Source: line: 'cursor.rollback()'
0333     <----If: line: 'cursor.rollback()'
0333    <-----Source: line: 'cursor.rollback()'
0333   <------Function: line: 'cursor.rollback()'
0333  <-------Source: line: 'cursor.rollback()'
0333 <--------Class: line: 'cursor.rollback()'
0333<---------Source: line: 'cursor.rollback()'
0334         InstructionCall: end-gen
0334         InstructionCall: begin-gen
0334          Member: begin-gen
0334           Identifier: begin-gen
0334            Identifier: expr: 'MessageBox'
0334           Identifier: end-gen
0334           FunctionCall: begin-gen
0334            Value: begin-gen
0334             Member: begin-gen
0334              Identifier: begin-gen
0334               Identifier: expr: 'util'
0334              Identifier: end-gen
0334              FunctionCall: begin-gen
0334               Value: begin-gen
0334                Constant: begin-gen
0334                 Constant: ctype: 'String' -> 'scripts'
0334                 Constant: expr: 'u"scripts"'
0334               <-Value: expr: 'u"scripts"'
0334                Constant: end-gen
0334               Value: end-gen
0334               Expression: begin-gen
0334                Expression: expr: 'ustr('
0334                Constant: begin-gen
0334                 Constant: ctype: 'String' -> 'Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n'
0334                 Constant: expr: 'u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n"'
0334               <-Expression: expr: 'u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n"'
0334                Constant: end-gen
0334                Expression: expr: ','
0334                Identifier: begin-gen
0334                 Identifier: expr: 'e'
0334               <-Expression: expr: 'e'
0334                Identifier: end-gen
0334                Expression: expr: ')'
0334               Expression: end-gen
0334               FunctionCall: expr: 'translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e ))'
0334              FunctionCall: end-gen
0334              Member: expr: 'util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e ))'
0334            <-Value: expr: 'util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e ))'
0334             Member: end-gen
0334            Value: end-gen
0334            Value: begin-gen
0334             Member: begin-gen
0334              Identifier: begin-gen
0334               Identifier: expr: 'MessageBox'
0334              Identifier: end-gen
0334              Identifier: begin-gen
0334               Identifier: expr: 'Ok'
0334              Identifier: end-gen
0334              Member: expr: 'MessageBox.Ok'
0334            <-Value: expr: 'MessageBox.Ok'
0334             Member: end-gen
0334            Value: end-gen
0334            Value: begin-gen
0334             Member: begin-gen
0334              Identifier: begin-gen
0334               Identifier: expr: 'MessageBox'
0334              Identifier: end-gen
0334              Identifier: begin-gen
0334               Identifier: expr: 'NoButton'
0334              Identifier: end-gen
0334              Member: expr: 'MessageBox.NoButton'
0334            <-Value: expr: 'MessageBox.NoButton'
0334             Member: end-gen
0334            Value: end-gen
0334            FunctionCall: expr: 'warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0334           FunctionCall: end-gen
0334           Member: expr: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0334          Member: end-gen
0334          InstructionCall: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0334        <-Source: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0334       <--TryCatch: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0334      <---Source: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0334     <----If: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0334    <-----Source: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0334   <------Function: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0334  <-------Source: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0334 <--------Class: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0334<---------Source: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0335         InstructionCall: end-gen
0335        Source: end-gen
0335        TryCatch: end: 'block-except'
0335      <-Source: end: 'block-except'
0335     <--If: end: 'block-except'
0335    <---Source: end: 'block-except'
0335   <----Function: end: 'block-except'
0335  <-----Source: end: 'block-except'
0335 <------Class: end: 'block-except'
0335<-------Source: end: 'block-except'
0336       TryCatch: end-gen
0336      Source: end-gen
0336      If: end: 'block-if'
0336    <-Source: end: 'block-if'
0336   <--Function: end: 'block-if'
0336  <---Source: end: 'block-if'
0336 <----Class: end: 'block-if'
0336<-----Source: end: 'block-if'
0336     If: end-gen
0336     If: begin-gen
0336      Value: begin-gen
0336       Identifier: begin-gen
0336        Identifier: expr: 'condicionProv'
0336      <-Value: expr: 'condicionProv'
0336       Identifier: end-gen
0336      Value: end-gen
0336      If: line: 'if condicionProv:'
0336    <-Source: line: 'if condicionProv:'
0336   <--Function: line: 'if condicionProv:'
0336  <---Source: line: 'if condicionProv:'
0336 <----Class: line: 'if condicionProv:'
0336<-----Source: line: 'if condicionProv:'
0338      If: begin: 'block-if'
0338    <-Source: begin: 'block-if'
0338   <--Function: begin: 'block-if'
0338  <---Source: begin: 'block-if'
0338 <----Class: begin: 'block-if'
0338<-----Source: begin: 'block-if'
0338      Source: begin-gen
0338       DeclarationBlock: begin-gen
0338        Variable: begin-gen
0338         Variable: expr: 'cursor'
0338         Variable: expr: '='
0338         Value: begin-gen
0338          New: begin-gen
0338           FunctionCall: begin-gen
0338            Value: begin-gen
0338             Constant: begin-gen
0338              Constant: ctype: 'String' -> 'proveedores'
0338              Constant: expr: 'u"proveedores"'
0338            <-Value: expr: 'u"proveedores"'
0338             Constant: end-gen
0338            Value: end-gen
0338            FunctionCall: expr: 'FLSqlCursor(u"proveedores")'
0338          <-New: expr: 'qsatype.FLSqlCursor(u"proveedores")'
0338         <--Value: expr: 'qsatype.FLSqlCursor(u"proveedores")'
0338        <---Variable: expr: 'qsatype.FLSqlCursor(u"proveedores")'
0338           FunctionCall: end-gen
0338          New: end-gen
0338         Value: end-gen
0338        Variable: end-gen
0338        DeclarationBlock: line: 'cursor = qsatype.FLSqlCursor(u"proveedores")'
0338      <-Source: line: 'cursor = qsatype.FLSqlCursor(u"proveedores")'
0338     <--If: line: 'cursor = qsatype.FLSqlCursor(u"proveedores")'
0338    <---Source: line: 'cursor = qsatype.FLSqlCursor(u"proveedores")'
0338   <----Function: line: 'cursor = qsatype.FLSqlCursor(u"proveedores")'
0338  <-----Source: line: 'cursor = qsatype.FLSqlCursor(u"proveedores")'
0338 <------Class: line: 'cursor = qsatype.FLSqlCursor(u"proveedores")'
0338<-------Source: line: 'cursor = qsatype.FLSqlCursor(u"proveedores")'
0339       DeclarationBlock: end-gen
0339       InstructionCall: begin-gen
0339        Member: begin-gen
0339         Identifier: begin-gen
0339          Identifier: expr: 'cursor'
0339         Identifier: end-gen
0339         FunctionCall: begin-gen
0339          Value: begin-gen
0339           Identifier: begin-gen
0339            Identifier: expr: 'False'
0339          <-Value: expr: 'False'
0339           Identifier: end-gen
0339          Value: end-gen
0339          FunctionCall: expr: 'transaction(False)'
0339         FunctionCall: end-gen
0339         Member: expr: 'cursor.transaction(False)'
0339        Member: end-gen
0339        InstructionCall: line: 'cursor.transaction(False)'
0339      <-Source: line: 'cursor.transaction(False)'
0339     <--If: line: 'cursor.transaction(False)'
0339    <---Source: line: 'cursor.transaction(False)'
0339   <----Function: line: 'cursor.transaction(False)'
0339  <-----Source: line: 'cursor.transaction(False)'
0339 <------Class: line: 'cursor.transaction(False)'
0339<-------Source: line: 'cursor.transaction(False)'
0340       InstructionCall: end-gen
0340       TryCatch: begin-gen
0340        TryCatch: line: 'try:'
0340      <-Source: line: 'try:'
0340     <--If: line: 'try:'
0340    <---Source: line: 'try:'
0340   <----Function: line: 'try:'
0340  <-----Source: line: 'try:'
0340 <------Class: line: 'try:'
0340<-------Source: line: 'try:'
0341        TryCatch: begin: 'block-try'
0341      <-Source: begin: 'block-try'
0341     <--If: begin: 'block-try'
0341    <---Source: begin: 'block-try'
0341   <----Function: begin: 'block-try'
0341  <-----Source: begin: 'block-try'
0341 <------Class: begin: 'block-try'
0341<-------Source: begin: 'block-try'
0341        Source: begin-gen
0341         If: begin-gen
0341          Value: begin-gen
0341           Member: begin-gen
0341            Identifier: begin-gen
0341             Identifier: expr: 'self'
0341            Identifier: end-gen
0341            Identifier: begin-gen
0341             Identifier: expr: 'iface'
0341            Identifier: end-gen
0341            FunctionCall: begin-gen
0341             FunctionCall: expr: 'actualizarContactosProv20070702()'
0341            FunctionCall: end-gen
0341            Member: expr: 'self.iface.actualizarContactosProv20070702()'
0341          <-Value: expr: 'self.iface.actualizarContactosProv20070702()'
0341           Member: end-gen
0341          Value: end-gen
0341          If: line: 'if self.iface.actualizarContactosProv20070702():'
0341        <-Source: line: 'if self.iface.actualizarContactosProv20070702():'
0341       <--TryCatch: line: 'if self.iface.actualizarContactosProv20070702():'
0341      <---Source: line: 'if self.iface.actualizarContactosProv20070702():'
0341     <----If: line: 'if self.iface.actualizarContactosProv20070702():'
0341    <-----Source: line: 'if self.iface.actualizarContactosProv20070702():'
0341   <------Function: line: 'if self.iface.actualizarContactosProv20070702():'
0341  <-------Source: line: 'if self.iface.actualizarContactosProv20070702():'
0341 <--------Class: line: 'if self.iface.actualizarContactosProv20070702():'
0341<---------Source: line: 'if self.iface.actualizarContactosProv20070702():'
0342          If: begin: 'block-if'
0342        <-Source: begin: 'block-if'
0342       <--TryCatch: begin: 'block-if'
0342      <---Source: begin: 'block-if'
0342     <----If: begin: 'block-if'
0342    <-----Source: begin: 'block-if'
0342   <------Function: begin: 'block-if'
0342  <-------Source: begin: 'block-if'
0342 <--------Class: begin: 'block-if'
0342<---------Source: begin: 'block-if'
0342          Source: begin-gen
0342           InstructionCall: begin-gen
0342            Member: begin-gen
0342             Identifier: begin-gen
0342              Identifier: expr: 'cursor'
0342             Identifier: end-gen
0342             FunctionCall: begin-gen
0342              FunctionCall: expr: 'commit()'
0342             FunctionCall: end-gen
0342             Member: expr: 'cursor.commit()'
0342            Member: end-gen
0342            InstructionCall: line: 'cursor.commit()'
0342          <-Source: line: 'cursor.commit()'
0342         <--If: line: 'cursor.commit()'
0342        <---Source: line: 'cursor.commit()'
0342       <----TryCatch: line: 'cursor.commit()'
0342      <-----Source: line: 'cursor.commit()'
0342     <------If: line: 'cursor.commit()'
0342    <-------Source: line: 'cursor.commit()'
0342   <--------Function: line: 'cursor.commit()'
0342  <---------Source: line: 'cursor.commit()'
0342 <----------Class: line: 'cursor.commit()'
0342<-----------Source: line: 'cursor.commit()'
0343           InstructionCall: end-gen
0343          Source: end-gen
0343          If: end: 'block-if'
0343        <-Source: end: 'block-if'
0343       <--TryCatch: end: 'block-if'
0343      <---Source: end: 'block-if'
0343     <----If: end: 'block-if'
0343    <-----Source: end: 'block-if'
0343   <------Function: end: 'block-if'
0343  <-------Source: end: 'block-if'
0343 <--------Class: end: 'block-if'
0343<---------Source: end: 'block-if'
0343          If: line: 'else:'
0343        <-Source: line: 'else:'
0343       <--TryCatch: line: 'else:'
0343      <---Source: line: 'else:'
0343     <----If: line: 'else:'
0343    <-----Source: line: 'else:'
0343   <------Function: line: 'else:'
0343  <-------Source: line: 'else:'
0343 <--------Class: line: 'else:'
0343<---------Source: line: 'else:'
0344          If: begin: 'block-else'
0344        <-Source: begin: 'block-else'
0344       <--TryCatch: begin: 'block-else'
0344      <---Source: begin: 'block-else'
0344     <----If: begin: 'block-else'
0344    <-----Source: begin: 'block-else'
0344   <------Function: begin: 'block-else'
0344  <-------Source: begin: 'block-else'
0344 <--------Class: begin: 'block-else'
0344<---------Source: begin: 'block-else'
0344          Source: begin-gen
0344           InstructionCall: begin-gen
0344            Member: begin-gen
0344             Identifier: begin-gen
0344              Identifier: expr: 'cursor'
0344             Identifier: end-gen
0344             FunctionCall: begin-gen
0344              FunctionCall: expr: 'rollback()'
0344             FunctionCall: end-gen
0344             Member: expr: 'cursor.rollback()'
0344            Member: end-gen
0344            InstructionCall: line: 'cursor.rollback()'
0344          <-Source: line: 'cursor.rollback()'
0344         <--If: line: 'cursor.rollback()'
0344        <---Source: line: 'cursor.rollback()'
0344       <----TryCatch: line: 'cursor.rollback()'
0344      <-----Source: line: 'cursor.rollback()'
0344     <------If: line: 'cursor.rollback()'
0344    <-------Source: line: 'cursor.rollback()'
0344   <--------Function: line: 'cursor.rollback()'
0344  <---------Source: line: 'cursor.rollback()'
0344 <----------Class: line: 'cursor.rollback()'
0344<-----------Source: line: 'cursor.rollback()'
0345           InstructionCall: end-gen
0345          Source: end-gen
0345          If: end: 'block-else'
0345        <-Source: end: 'block-else'
0345       <--TryCatch: end: 'block-else'
0345      <---Source: end: 'block-else'
0345     <----If: end: 'block-else'
0345    <-----Source: end: 'block-else'
0345   <------Function: end: 'block-else'
0345  <-------Source: end: 'block-else'
0345 <--------Class: end: 'block-else'
0345<---------Source: end: 'block-else'
0346         If: end-gen
0346        Source: end-gen
0346        TryCatch: end: 'block-try'
0346      <-Source: end: 'block-try'
0346     <--If: end: 'block-try'
0346    <---Source: end: 'block-try'
0346   <----Function: end: 'block-try'
0346  <-----Source: end: 'block-try'
0346 <------Class: end: 'block-try'
0346<-------Source: end: 'block-try'
0346        Identifier: begin-gen
0346         Identifier: expr: 'e'
0346        Identifier: end-gen
0346        TryCatch: line: 'except Exception as e:'
0346      <-Source: line: 'except Exception as e:'
0346     <--If: line: 'except Exception as e:'
0346    <---Source: line: 'except Exception as e:'
0346   <----Function: line: 'except Exception as e:'
0346  <-----Source: line: 'except Exception as e:'
0346 <------Class: line: 'except Exception as e:'
0346<-------Source: line: 'except Exception as e:'
0348        TryCatch: begin: 'block-except'
0348      <-Source: begin: 'block-except'
0348     <--If: begin: 'block-except'
0348    <---Source: begin: 'block-except'
0348   <----Function: begin: 'block-except'
0348  <-----Source: begin: 'block-except'
0348 <------Class: begin: 'block-except'
0348<-------Source: begin: 'block-except'
0348        TryCatch: line: 'e = traceback.format_exc()'
0348      <-Source: line: 'e = traceback.format_exc()'
0348     <--If: line: 'e = traceback.format_exc()'
0348    <---Source: line: 'e = traceback.format_exc()'
0348   <----Function: line: 'e = traceback.format_exc()'
0348  <-----Source: line: 'e = traceback.format_exc()'
0348 <------Class: line: 'e = traceback.format_exc()'
0348<-------Source: line: 'e = traceback.format_exc()'
0349        Source: begin-gen
0349         InstructionCall: begin-gen
0349          Member: begin-gen
0349           Identifier: begin-gen
0349            Identifier: expr: 'cursor'
0349           Identifier: end-gen
0349           FunctionCall: begin-gen
0349            FunctionCall: expr: 'rollback()'
0349           FunctionCall: end-gen
0349           Member: expr: 'cursor.rollback()'
0349          Member: end-gen
0349          InstructionCall: line: 'cursor.rollback()'
0349        <-Source: line: 'cursor.rollback()'
0349       <--TryCatch: line: 'cursor.rollback()'
0349      <---Source: line: 'cursor.rollback()'
0349     <----If: line: 'cursor.rollback()'
0349    <-----Source: line: 'cursor.rollback()'
0349   <------Function: line: 'cursor.rollback()'
0349  <-------Source: line: 'cursor.rollback()'
0349 <--------Class: line: 'cursor.rollback()'
0349<---------Source: line: 'cursor.rollback()'
0350         InstructionCall: end-gen
0350         InstructionCall: begin-gen
0350          Member: begin-gen
0350           Identifier: begin-gen
0350            Identifier: expr: 'MessageBox'
0350           Identifier: end-gen
0350           FunctionCall: begin-gen
0350            Value: begin-gen
0350             Member: begin-gen
0350              Identifier: begin-gen
0350               Identifier: expr: 'util'
0350              Identifier: end-gen
0350              FunctionCall: begin-gen
0350               Value: begin-gen
0350                Constant: begin-gen
0350                 Constant: ctype: 'String' -> 'scripts'
0350                 Constant: expr: 'u"scripts"'
0350               <-Value: expr: 'u"scripts"'
0350                Constant: end-gen
0350               Value: end-gen
0350               Expression: begin-gen
0350                Expression: expr: 'ustr('
0350                Constant: begin-gen
0350                 Constant: ctype: 'String' -> 'Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n'
0350                 Constant: expr: 'u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n"'
0350               <-Expression: expr: 'u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n"'
0350                Constant: end-gen
0350                Expression: expr: ','
0350                Identifier: begin-gen
0350                 Identifier: expr: 'e'
0350               <-Expression: expr: 'e'
0350                Identifier: end-gen
0350                Expression: expr: ')'
0350               Expression: end-gen
0350               FunctionCall: expr: 'translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e ))'
0350              FunctionCall: end-gen
0350              Member: expr: 'util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e ))'
0350            <-Value: expr: 'util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e ))'
0350             Member: end-gen
0350            Value: end-gen
0350            Value: begin-gen
0350             Member: begin-gen
0350              Identifier: begin-gen
0350               Identifier: expr: 'MessageBox'
0350              Identifier: end-gen
0350              Identifier: begin-gen
0350               Identifier: expr: 'Ok'
0350              Identifier: end-gen
0350              Member: expr: 'MessageBox.Ok'
0350            <-Value: expr: 'MessageBox.Ok'
0350             Member: end-gen
0350            Value: end-gen
0350            Value: begin-gen
0350             Member: begin-gen
0350              Identifier: begin-gen
0350               Identifier: expr: 'MessageBox'
0350              Identifier: end-gen
0350              Identifier: begin-gen
0350               Identifier: expr: 'NoButton'
0350              Identifier: end-gen
0350              Member: expr: 'MessageBox.NoButton'
0350            <-Value: expr: 'MessageBox.NoButton'
0350             Member: end-gen
0350            Value: end-gen
0350            FunctionCall: expr: 'warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0350           FunctionCall: end-gen
0350           Member: expr: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0350          Member: end-gen
0350          InstructionCall: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0350        <-Source: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0350       <--TryCatch: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0350      <---Source: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0350     <----If: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0350    <-----Source: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0350   <------Function: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0350  <-------Source: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0350 <--------Class: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0350<---------Source: line: 'MessageBox.warning(util.translate(u"scripts", ustr( u"Hubo un error al actualizar los datos de contactos del módulo de Facturación:\\n" , e )), MessageBox.Ok, MessageBox.NoButton)'
0351         InstructionCall: end-gen
0351        Source: end-gen
0351        TryCatch: end: 'block-except'
0351      <-Source: end: 'block-except'
0351     <--If: end: 'block-except'
0351    <---Source: end: 'block-except'
0351   <----Function: end: 'block-except'
0351  <-----Source: end: 'block-except'
0351 <------Class: end: 'block-except'
0351<-------Source: end: 'block-except'
0352       TryCatch: end-gen
0352      Source: end-gen
0352      If: end: 'block-if'
0352    <-Source: end: 'block-if'
0352   <--Function: end: 'block-if'
0352  <---Source: end: 'block-if'
0352 <----Class: end: 'block-if'
0352<-----Source: end: 'block-if'
0352     If: end-gen
0352     If: begin-gen
0352      Value: begin-gen
0352       Member: begin-gen
0352        Identifier: begin-gen
0352         Identifier: expr: 'util'
0352        Identifier: end-gen
0352        FunctionCall: begin-gen
0352         Value: begin-gen
0352          Constant: begin-gen
0352           Constant: ctype: 'String' -> 'empresa'
0352           Constant: expr: 'u"empresa"'
0352         <-Value: expr: 'u"empresa"'
0352          Constant: end-gen
0352         Value: end-gen
0352         Value: begin-gen
0352          Constant: begin-gen
0352           Constant: ctype: 'String' -> 'id'
0352           Constant: expr: 'u"id"'
0352         <-Value: expr: 'u"id"'
0352          Constant: end-gen
0352         Value: end-gen
0352         Value: begin-gen
0352          Constant: begin-gen
0352           Constant: ctype: 'String' -> '1 = 1'
0352           Constant: expr: 'u"1 = 1"'
0352         <-Value: expr: 'u"1 = 1"'
0352          Constant: end-gen
0352         Value: end-gen
0352         FunctionCall: expr: 'sqlSelect(u"empresa", u"id", u"1 = 1")'
0352        FunctionCall: end-gen
0352        Member: expr: 'util.sqlSelect(u"empresa", u"id", u"1 = 1")'
0352      <-Value: expr: 'util.sqlSelect(u"empresa", u"id", u"1 = 1")'
0352       Member: end-gen
0352      Value: end-gen
0352      If: line: 'if util.sqlSelect(u"empresa", u"id", u"1 = 1"):'
0352    <-Source: line: 'if util.sqlSelect(u"empresa", u"id", u"1 = 1"):'
0352   <--Function: line: 'if util.sqlSelect(u"empresa", u"id", u"1 = 1"):'
0352  <---Source: line: 'if util.sqlSelect(u"empresa", u"id", u"1 = 1"):'
0352 <----Class: line: 'if util.sqlSelect(u"empresa", u"id", u"1 = 1"):'
0352<-----Source: line: 'if util.sqlSelect(u"empresa", u"id", u"1 = 1"):'
0354      If: begin: 'block-if'
0354    <-Source: begin: 'block-if'
0354   <--Function: begin: 'block-if'
0354  <---Source: begin: 'block-if'
0354 <----Class: begin: 'block-if'
0354<-----Source: begin: 'block-if'
0354      Source: begin-gen
0354       InstructionFlow: begin-gen
0354        InstructionFlow: line: 'return '
0354      <-Source: line: 'return '
0354     <--If: line: 'return '
0354    <---Source: line: 'return '
0354   <----Function: line: 'return '
0354  <-----Source: line: 'return '
0354 <------Class: line: 'return '
0354<-------Source: line: 'return '
0355       InstructionFlow: end-gen
0355      Source: end-gen
0355      If: end: 'block-if'
0355    <-Source: end: 'block-if'
0355   <--Function: end: 'block-if'
0355  <---Source: end: 'block-if'
0355 <----Class: end: 'block-if'
0355<-----Source: end: 'block-if'
0355     If: end-gen
0355     DeclarationBlock: begin-gen
0355      Variable: begin-gen
0355       Variable: expr: 'cursor'
0355       Variable: expr: '='
0355       Value: begin-gen
0355        New: begin-gen
0355         FunctionCall: begin-gen
0355          Value: begin-gen
0355           Constant: begin-gen
0355            Constant: ctype: 'String' -> 'empresa'
0355            Constant: expr: 'u"empresa"'
0355          <-Value: expr: 'u"empresa"'
0355           Constant: end-gen
0355          Value: end-gen
0355          FunctionCall: expr: 'FLSqlCursor(u"empresa")'
0355        <-New: expr: 'qsatype.FLSqlCursor(u"empresa")'
0355       <--Value: expr: 'qsatype.FLSqlCursor(u"empresa")'
0355      <---Variable: expr: 'qsatype.FLSqlCursor(u"empresa")'
0355         FunctionCall: end-gen
0355        New: end-gen
0355       Value: end-gen
0355      Variable: end-gen
0355      DeclarationBlock: line: 'cursor = qsatype.FLSqlCursor(u"empresa")'
0355    <-Source: line: 'cursor = qsatype.FLSqlCursor(u"empresa")'
0355   <--Function: line: 'cursor = qsatype.FLSqlCursor(u"empresa")'
0355  <---Source: line: 'cursor = qsatype.FLSqlCursor(u"empresa")'
0355 <----Class: line: 'cursor = qsatype.FLSqlCursor(u"empresa")'
0355<-----Source: line: 'cursor = qsatype.FLSqlCursor(u"empresa")'
0356     DeclarationBlock: end-gen
0356     InstructionCall: begin-gen
0356      Member: begin-gen
0356       Identifier: begin-gen
0356        Identifier: expr: 'cursor'
0356       Identifier: end-gen
0356       FunctionCall: begin-gen
0356        FunctionCall: expr: 'select()'
0356       FunctionCall: end-gen
0356       Member: expr: 'cursor.select()'
0356      Member: end-gen
0356      InstructionCall: line: 'cursor.select()'
0356    <-Source: line: 'cursor.select()'
0356   <--Function: line: 'cursor.select()'
0356  <---Source: line: 'cursor.select()'
0356 <----Class: line: 'cursor.select()'
0356<-----Source: line: 'cursor.select()'
0357     InstructionCall: end-gen
0357     If: begin-gen
0357      Value: begin-gen
0357       OpUnary: begin-gen
0357        OpUnary: expr: 'not'
0357      <-Value: expr: 'not'
0357        Member: begin-gen
0357         Identifier: begin-gen
0357          Identifier: expr: 'cursor'
0357         Identifier: end-gen
0357         FunctionCall: begin-gen
0357          FunctionCall: expr: 'first()'
0357         FunctionCall: end-gen
0357         Member: expr: 'cursor.first()'
0357       <-OpUnary: expr: 'cursor.first()'
0357      <--Value: expr: 'cursor.first()'
0357        Member: end-gen
0357       OpUnary: end-gen
0357      Value: end-gen
0357      If: line: 'if not cursor.first():'
0357    <-Source: line: 'if not cursor.first():'
0357   <--Function: line: 'if not cursor.first():'
0357  <---Source: line: 'if not cursor.first():'
0357 <----Class: line: 'if not cursor.first():'
0357<-----Source: line: 'if not cursor.first():'
0358      If: begin: 'block-if'
0358    <-Source: begin: 'block-if'
0358   <--Function: begin: 'block-if'
0358  <---Source: begin: 'block-if'
0358 <----Class: begin: 'block-if'
0358<-----Source: begin: 'block-if'
0358      Source: begin-gen
0358       InstructionCall: begin-gen
0358        Member: begin-gen
0358         Identifier: begin-gen
0358          Identifier: expr: 'MessageBox'
0358         Identifier: end-gen
0358         FunctionCall: begin-gen
0358          Value: begin-gen
0358           Member: begin-gen
0358            Identifier: begin-gen
0358             Identifier: expr: 'util'
0358            Identifier: end-gen
0358            FunctionCall: begin-gen
0358             Value: begin-gen
0358              Constant: begin-gen
0358               Constant: ctype: 'String' -> 'scripts'
0358               Constant: expr: 'u"scripts"'
0358             <-Value: expr: 'u"scripts"'
0358              Constant: end-gen
0358             Value: end-gen
0358             Value: begin-gen
0358              Constant: begin-gen
0358               Constant: ctype: 'String' -> 'Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar.'
0358               Constant: expr: 'u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar."'
0358             <-Value: expr: 'u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar."'
0358              Constant: end-gen
0358             Value: end-gen
0358             FunctionCall: expr: 'translate(u"scripts", u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar.")'
0358            FunctionCall: end-gen
0358            Member: expr: 'util.translate(u"scripts", u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar.")'
0358          <-Value: expr: 'util.translate(u"scripts", u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar.")'
0358           Member: end-gen
0358          Value: end-gen
0358          Value: begin-gen
0358           Member: begin-gen
0358            Identifier: begin-gen
0358             Identifier: expr: 'MessageBox'
0358            Identifier: end-gen
0358            Identifier: begin-gen
0358             Identifier: expr: 'Ok'
0358            Identifier: end-gen
0358            Member: expr: 'MessageBox.Ok'
0358          <-Value: expr: 'MessageBox.Ok'
0358           Member: end-gen
0358          Value: end-gen
0358          Value: begin-gen
0358           Member: begin-gen
0358            Identifier: begin-gen
0358             Identifier: expr: 'MessageBox'
0358            Identifier: end-gen
0358            Identifier: begin-gen
0358             Identifier: expr: 'NoButton'
0358            Identifier: end-gen
0358            Member: expr: 'MessageBox.NoButton'
0358          <-Value: expr: 'MessageBox.NoButton'
0358           Member: end-gen
0358          Value: end-gen
0358          Value: begin-gen
0358           Member: begin-gen
0358            Identifier: begin-gen
0358             Identifier: expr: 'MessageBox'
0358            Identifier: end-gen
0358            Identifier: begin-gen
0358             Identifier: expr: 'NoButton'
0358            Identifier: end-gen
0358            Member: expr: 'MessageBox.NoButton'
0358          <-Value: expr: 'MessageBox.NoButton'
0358           Member: end-gen
0358          Value: end-gen
0358          FunctionCall: expr: 'information(util.translate(u"scripts", u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0358         FunctionCall: end-gen
0358         Member: expr: 'MessageBox.information(util.translate(u"scripts", u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0358        Member: end-gen
0358        InstructionCall: line: 'MessageBox.information(util.translate(u"scripts", u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0358      <-Source: line: 'MessageBox.information(util.translate(u"scripts", u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0358     <--If: line: 'MessageBox.information(util.translate(u"scripts", u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0358    <---Source: line: 'MessageBox.information(util.translate(u"scripts", u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0358   <----Function: line: 'MessageBox.information(util.translate(u"scripts", u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0358  <-----Source: line: 'MessageBox.information(util.translate(u"scripts", u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0358 <------Class: line: 'MessageBox.information(util.translate(u"scripts", u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0358<-------Source: line: 'MessageBox.information(util.translate(u"scripts", u"Se insertará una empresa por defecto y algunos valores iniciales para empezar a trabajar."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0359       InstructionCall: end-gen
0359       InstructionCall: begin-gen
0359        Member: begin-gen
0359         Identifier: begin-gen
0359          Identifier: expr: 'self'
0359         Identifier: end-gen
0359         Identifier: begin-gen
0359          Identifier: expr: 'iface'
0359         Identifier: end-gen
0359         FunctionCall: begin-gen
0359          FunctionCall: expr: 'valoresIniciales()'
0359         FunctionCall: end-gen
0359         Member: expr: 'self.iface.valoresIniciales()'
0359        Member: end-gen
0359        InstructionCall: line: 'self.iface.valoresIniciales()'
0359      <-Source: line: 'self.iface.valoresIniciales()'
0359     <--If: line: 'self.iface.valoresIniciales()'
0359    <---Source: line: 'self.iface.valoresIniciales()'
0359   <----Function: line: 'self.iface.valoresIniciales()'
0359  <-----Source: line: 'self.iface.valoresIniciales()'
0359 <------Class: line: 'self.iface.valoresIniciales()'
0359<-------Source: line: 'self.iface.valoresIniciales()'
0360       InstructionCall: end-gen
0360       InstructionCall: begin-gen
0360        Member: begin-gen
0360         Identifier: begin-gen
0360          Identifier: expr: 'self'
0360         Identifier: end-gen
0360         FunctionCall: begin-gen
0360          Value: begin-gen
0360           Constant: begin-gen
0360            Constant: ctype: 'String' -> 'empresa'
0360            Constant: expr: 'u"empresa"'
0360          <-Value: expr: 'u"empresa"'
0360           Constant: end-gen
0360          Value: end-gen
0360          FunctionCall: expr: 'execMainScript(u"empresa")'
0360         FunctionCall: end-gen
0360         Member: expr: 'self.execMainScript(u"empresa")'
0360        Member: end-gen
0360        InstructionCall: line: 'self.execMainScript(u"empresa")'
0360      <-Source: line: 'self.execMainScript(u"empresa")'
0360     <--If: line: 'self.execMainScript(u"empresa")'
0360    <---Source: line: 'self.execMainScript(u"empresa")'
0360   <----Function: line: 'self.execMainScript(u"empresa")'
0360  <-----Source: line: 'self.execMainScript(u"empresa")'
0360 <------Class: line: 'self.execMainScript(u"empresa")'
0360<-------Source: line: 'self.execMainScript(u"empresa")'
0361       InstructionCall: end-gen
0361      Source: end-gen
0361      If: end: 'block-if'
0361    <-Source: end: 'block-if'
0361   <--Function: end: 'block-if'
0361  <---Source: end: 'block-if'
0361 <----Class: end: 'block-if'
0361<-----Source: end: 'block-if'
0361     If: end-gen
0361    Source: end-gen
0361    Function: end: 'block-def-interna_init'
0361  <-Source: end: 'block-def-interna_init'
0361 <--Class: end: 'block-def-interna_init'
0361<---Source: end: 'block-def-interna_init'
0362   Function: end-gen
0362   Function: begin-gen
0362    Variable: begin-gen
0362     Variable: expr: 'curDirCli'
0362    Variable: end-gen
0362    Function: line: 'def interna_afterCommit_dirclientes(self, curDirCli = None):'
0362  <-Source: line: 'def interna_afterCommit_dirclientes(self, curDirCli = None):'
0362 <--Class: line: 'def interna_afterCommit_dirclientes(self, curDirCli = None):'
0362<---Source: line: 'def interna_afterCommit_dirclientes(self, curDirCli = None):'
0363    Function: begin: 'block-def-interna_afterCommit_dirclientes'
0363  <-Source: begin: 'block-def-interna_afterCommit_dirclientes'
0363 <--Class: begin: 'block-def-interna_afterCommit_dirclientes'
0363<---Source: begin: 'block-def-interna_afterCommit_dirclientes'
0363    Source: begin-gen
0363     If: begin-gen
0363      Expression: begin-gen
0363       Member: begin-gen
0363        Identifier: begin-gen
0363         Identifier: expr: 'curDirCli'
0363        Identifier: end-gen
0363        FunctionCall: begin-gen
0363         FunctionCall: expr: 'modeAccess()'
0363        FunctionCall: end-gen
0363        Member: expr: 'curDirCli.modeAccess()'
0363      <-Expression: expr: 'curDirCli.modeAccess()'
0363       Member: end-gen
0363       Compare: begin-gen
0363        Compare: expr: '=='
0363      <-Expression: expr: '=='
0363       Compare: end-gen
0363       Member: begin-gen
0363        Identifier: begin-gen
0363         Identifier: expr: 'curDirCli'
0363        Identifier: end-gen
0363        Identifier: begin-gen
0363         Identifier: expr: 'Del'
0363        Identifier: end-gen
0363        Member: expr: 'curDirCli.Del'
0363      <-Expression: expr: 'curDirCli.Del'
0363       Member: end-gen
0363      Expression: end-gen
0363      If: line: 'if curDirCli.modeAccess() == curDirCli.Del:'
0363    <-Source: line: 'if curDirCli.modeAccess() == curDirCli.Del:'
0363   <--Function: line: 'if curDirCli.modeAccess() == curDirCli.Del:'
0363  <---Source: line: 'if curDirCli.modeAccess() == curDirCli.Del:'
0363 <----Class: line: 'if curDirCli.modeAccess() == curDirCli.Del:'
0363<-----Source: line: 'if curDirCli.modeAccess() == curDirCli.Del:'
0364      If: begin: 'block-if'
0364    <-Source: begin: 'block-if'
0364   <--Function: begin: 'block-if'
0364  <---Source: begin: 'block-if'
0364 <----Class: begin: 'block-if'
0364<-----Source: begin: 'block-if'
0364      Source: begin-gen
0364       DeclarationBlock: begin-gen
0364        Variable: begin-gen
0364         Variable: expr: 'domFact'
0364         Variable: expr: '='
0364         Value: begin-gen
0364          Member: begin-gen
0364           Identifier: begin-gen
0364            Identifier: expr: 'curDirCli'
0364           Identifier: end-gen
0364           FunctionCall: begin-gen
0364            Value: begin-gen
0364             Constant: begin-gen
0364              Constant: ctype: 'String' -> 'domfacturacion'
0364              Constant: expr: 'u"domfacturacion"'
0364            <-Value: expr: 'u"domfacturacion"'
0364             Constant: end-gen
0364            Value: end-gen
0364            FunctionCall: expr: 'valueBuffer(u"domfacturacion")'
0364           FunctionCall: end-gen
0364           Member: expr: 'curDirCli.valueBuffer(u"domfacturacion")'
0364         <-Value: expr: 'curDirCli.valueBuffer(u"domfacturacion")'
0364        <--Variable: expr: 'curDirCli.valueBuffer(u"domfacturacion")'
0364          Member: end-gen
0364         Value: end-gen
0364        Variable: end-gen
0364        DeclarationBlock: line: 'domFact = curDirCli.valueBuffer(u"domfacturacion")'
0364      <-Source: line: 'domFact = curDirCli.valueBuffer(u"domfacturacion")'
0364     <--If: line: 'domFact = curDirCli.valueBuffer(u"domfacturacion")'
0364    <---Source: line: 'domFact = curDirCli.valueBuffer(u"domfacturacion")'
0364   <----Function: line: 'domFact = curDirCli.valueBuffer(u"domfacturacion")'
0364  <-----Source: line: 'domFact = curDirCli.valueBuffer(u"domfacturacion")'
0364 <------Class: line: 'domFact = curDirCli.valueBuffer(u"domfacturacion")'
0364<-------Source: line: 'domFact = curDirCli.valueBuffer(u"domfacturacion")'
0365       DeclarationBlock: end-gen
0365       DeclarationBlock: begin-gen
0365        Variable: begin-gen
0365         Variable: expr: 'domEnv'
0365         Variable: expr: '='
0365         Value: begin-gen
0365          Member: begin-gen
0365           Identifier: begin-gen
0365            Identifier: expr: 'curDirCli'
0365           Identifier: end-gen
0365           FunctionCall: begin-gen
0365            Value: begin-gen
0365             Constant: begin-gen
0365              Constant: ctype: 'String' -> 'domenvio'
0365              Constant: expr: 'u"domenvio"'
0365            <-Value: expr: 'u"domenvio"'
0365             Constant: end-gen
0365            Value: end-gen
0365            FunctionCall: expr: 'valueBuffer(u"domenvio")'
0365           FunctionCall: end-gen
0365           Member: expr: 'curDirCli.valueBuffer(u"domenvio")'
0365         <-Value: expr: 'curDirCli.valueBuffer(u"domenvio")'
0365        <--Variable: expr: 'curDirCli.valueBuffer(u"domenvio")'
0365          Member: end-gen
0365         Value: end-gen
0365        Variable: end-gen
0365        DeclarationBlock: line: 'domEnv = curDirCli.valueBuffer(u"domenvio")'
0365      <-Source: line: 'domEnv = curDirCli.valueBuffer(u"domenvio")'
0365     <--If: line: 'domEnv = curDirCli.valueBuffer(u"domenvio")'
0365    <---Source: line: 'domEnv = curDirCli.valueBuffer(u"domenvio")'
0365   <----Function: line: 'domEnv = curDirCli.valueBuffer(u"domenvio")'
0365  <-----Source: line: 'domEnv = curDirCli.valueBuffer(u"domenvio")'
0365 <------Class: line: 'domEnv = curDirCli.valueBuffer(u"domenvio")'
0365<-------Source: line: 'domEnv = curDirCli.valueBuffer(u"domenvio")'
0366       DeclarationBlock: end-gen
0366       If: begin-gen
0366        Expression: begin-gen
0366         Identifier: begin-gen
0366          Identifier: expr: 'domFact'
0366        <-Expression: expr: 'domFact'
0366         Identifier: end-gen
0366         Compare: begin-gen
0366          Compare: expr: '=='
0366        <-Expression: expr: '=='
0366         Compare: end-gen
0366         Identifier: begin-gen
0366          Identifier: expr: 'True'
0366        <-Expression: expr: 'True'
0366         Identifier: end-gen
0366         Compare: begin-gen
0366          Compare: expr: 'or'
0366        <-Expression: expr: 'or'
0366         Compare: end-gen
0366         Identifier: begin-gen
0366          Identifier: expr: 'domEnv'
0366        <-Expression: expr: 'domEnv'
0366         Identifier: end-gen
0366         Compare: begin-gen
0366          Compare: expr: '=='
0366        <-Expression: expr: '=='
0366         Compare: end-gen
0366         Identifier: begin-gen
0366          Identifier: expr: 'True'
0366        <-Expression: expr: 'True'
0366         Identifier: end-gen
0366        Expression: end-gen
0366        If: line: 'if domFact == True or domEnv == True:'
0366      <-Source: line: 'if domFact == True or domEnv == True:'
0366     <--If: line: 'if domFact == True or domEnv == True:'
0366    <---Source: line: 'if domFact == True or domEnv == True:'
0366   <----Function: line: 'if domFact == True or domEnv == True:'
0366  <-----Source: line: 'if domFact == True or domEnv == True:'
0366 <------Class: line: 'if domFact == True or domEnv == True:'
0366<-------Source: line: 'if domFact == True or domEnv == True:'
0367        If: begin: 'block-if'
0367      <-Source: begin: 'block-if'
0367     <--If: begin: 'block-if'
0367    <---Source: begin: 'block-if'
0367   <----Function: begin: 'block-if'
0367  <-----Source: begin: 'block-if'
0367 <------Class: begin: 'block-if'
0367<-------Source: begin: 'block-if'
0367        Source: begin-gen
0367         DeclarationBlock: begin-gen
0367          Variable: begin-gen
0367           Variable: expr: 'cursor'
0367           Variable: expr: '='
0367           Value: begin-gen
0367            New: begin-gen
0367             FunctionCall: begin-gen
0367              Value: begin-gen
0367               Constant: begin-gen
0367                Constant: ctype: 'String' -> 'dirclientes'
0367                Constant: expr: 'u"dirclientes"'
0367              <-Value: expr: 'u"dirclientes"'
0367               Constant: end-gen
0367              Value: end-gen
0367              FunctionCall: expr: 'FLSqlCursor(u"dirclientes")'
0367            <-New: expr: 'qsatype.FLSqlCursor(u"dirclientes")'
0367           <--Value: expr: 'qsatype.FLSqlCursor(u"dirclientes")'
0367          <---Variable: expr: 'qsatype.FLSqlCursor(u"dirclientes")'
0367             FunctionCall: end-gen
0367            New: end-gen
0367           Value: end-gen
0367          Variable: end-gen
0367          DeclarationBlock: line: 'cursor = qsatype.FLSqlCursor(u"dirclientes")'
0367        <-Source: line: 'cursor = qsatype.FLSqlCursor(u"dirclientes")'
0367       <--If: line: 'cursor = qsatype.FLSqlCursor(u"dirclientes")'
0367      <---Source: line: 'cursor = qsatype.FLSqlCursor(u"dirclientes")'
0367     <----If: line: 'cursor = qsatype.FLSqlCursor(u"dirclientes")'
0367    <-----Source: line: 'cursor = qsatype.FLSqlCursor(u"dirclientes")'
0367   <------Function: line: 'cursor = qsatype.FLSqlCursor(u"dirclientes")'
0367  <-------Source: line: 'cursor = qsatype.FLSqlCursor(u"dirclientes")'
0367 <--------Class: line: 'cursor = qsatype.FLSqlCursor(u"dirclientes")'
0367<---------Source: line: 'cursor = qsatype.FLSqlCursor(u"dirclientes")'
0368         DeclarationBlock: end-gen
0368         InstructionCall: begin-gen
0368          Member: begin-gen
0368           Identifier: begin-gen
0368            Identifier: expr: 'cursor'
0368           Identifier: end-gen
0368           FunctionCall: begin-gen
0368            Expression: begin-gen
0368             Expression: expr: 'ustr('
0368             Constant: begin-gen
0368              Constant: ctype: 'String' -> "codcliente = '"
0368              Constant: expr: 'u"codcliente = \'"'
0368            <-Expression: expr: 'u"codcliente = \'"'
0368             Constant: end-gen
0368             Expression: expr: ','
0368             Member: begin-gen
0368              Identifier: begin-gen
0368               Identifier: expr: 'curDirCli'
0368              Identifier: end-gen
0368              FunctionCall: begin-gen
0368               Value: begin-gen
0368                Constant: begin-gen
0368                 Constant: ctype: 'String' -> 'codcliente'
0368                 Constant: expr: 'u"codcliente"'
0368               <-Value: expr: 'u"codcliente"'
0368                Constant: end-gen
0368               Value: end-gen
0368               FunctionCall: expr: 'valueBuffer(u"codcliente")'
0368              FunctionCall: end-gen
0368              Member: expr: 'curDirCli.valueBuffer(u"codcliente")'
0368            <-Expression: expr: 'curDirCli.valueBuffer(u"codcliente")'
0368             Member: end-gen
0368             Expression: expr: ','
0368             Constant: begin-gen
0368              Constant: ctype: 'String' -> "' AND id <> "
0368              Constant: expr: 'u"\' AND id <> "'
0368            <-Expression: expr: 'u"\' AND id <> "'
0368             Constant: end-gen
0368             Expression: expr: ','
0368             Member: begin-gen
0368              Identifier: begin-gen
0368               Identifier: expr: 'curDirCli'
0368              Identifier: end-gen
0368              FunctionCall: begin-gen
0368               Value: begin-gen
0368                Constant: begin-gen
0368                 Constant: ctype: 'String' -> 'id'
0368                 Constant: expr: 'u"id"'
0368               <-Value: expr: 'u"id"'
0368                Constant: end-gen
0368               Value: end-gen
0368               FunctionCall: expr: 'valueBuffer(u"id")'
0368              FunctionCall: end-gen
0368              Member: expr: 'curDirCli.valueBuffer(u"id")'
0368            <-Expression: expr: 'curDirCli.valueBuffer(u"id")'
0368             Member: end-gen
0368             Expression: expr: ')'
0368            Expression: end-gen
0368            FunctionCall: expr: 'select(ustr( u"codcliente = \'" , curDirCli.valueBuffer(u"codcliente") , u"\' AND id <> " , curDirCli.valueBuffer(u"id") ))'
0368           FunctionCall: end-gen
0368           Member: expr: 'cursor.select(ustr( u"codcliente = \'" , curDirCli.valueBuffer(u"codcliente") , u"\' AND id <> " , curDirCli.valueBuffer(u"id") ))'
0368          Member: end-gen
0368          InstructionCall: line: 'cursor.select(ustr( u"codcliente = \'" , curDirCli.valueBuffer(u"codcliente") , u"\' AND id <> " , curDirCli.valueBuffer(u"id") ))'
0368        <-Source: line: 'cursor.select(ustr( u"codcliente = \'" , curDirCli.valueBuffer(u"codcliente") , u"\' AND id <> " , curDirCli.valueBuffer(u"id") ))'
0368       <--If: line: 'cursor.select(ustr( u"codcliente = \'" , curDirCli.valueBuffer(u"codcliente") , u"\' AND id <> " , curDirCli.valueBuffer(u"id") ))'
0368      <---Source: line: 'cursor.select(ustr( u"codcliente = \'" , curDirCli.valueBuffer(u"codcliente") , u"\' AND id <> " , curDirCli.valueBuffer(u"id") ))'
0368     <----If: line: 'cursor.select(ustr( u"codcliente = \'" , curDirCli.valueBuffer(u"codcliente") , u"\' AND id <> " , curDirCli.valueBuffer(u"id") ))'
0368    <-----Source: line: 'cursor.select(ustr( u"codcliente = \'" , curDirCli.valueBuffer(u"codcliente") , u"\' AND id <> " , curDirCli.valueBuffer(u"id") ))'
0368   <------Function: line: 'cursor.select(ustr( u"codcliente = \'" , curDirCli.valueBuffer(u"codcliente") , u"\' AND id <> " , curDirCli.valueBuffer(u"id") ))'
0368  <-------Source: line: 'cursor.select(ustr( u"codcliente = \'" , curDirCli.valueBuffer(u"codcliente") , u"\' AND id <> " , curDirCli.valueBuffer(u"id") ))'
0368 <--------Class: line: 'cursor.select(ustr( u"codcliente = \'" , curDirCli.valueBuffer(u"codcliente") , u"\' AND id <> " , curDirCli.valueBuffer(u"id") ))'
0368<---------Source: line: 'cursor.select(ustr( u"codcliente = \'" , curDirCli.valueBuffer(u"codcliente") , u"\' AND id <> " , curDirCli.valueBuffer(u"id") ))'
0369         InstructionCall: end-gen
0369         If: begin-gen
0369          Value: begin-gen
0369           Member: begin-gen
0369            Identifier: begin-gen
0369             Identifier: expr: 'cursor'
0369            Identifier: end-gen
0369            FunctionCall: begin-gen
0369             FunctionCall: expr: 'first()'
0369            FunctionCall: end-gen
0369            Member: expr: 'cursor.first()'
0369          <-Value: expr: 'cursor.first()'
0369           Member: end-gen
0369          Value: end-gen
0369          If: line: 'if cursor.first():'
0369        <-Source: line: 'if cursor.first():'
0369       <--If: line: 'if cursor.first():'
0369      <---Source: line: 'if cursor.first():'
0369     <----If: line: 'if cursor.first():'
0369    <-----Source: line: 'if cursor.first():'
0369   <------Function: line: 'if cursor.first():'
0369  <-------Source: line: 'if cursor.first():'
0369 <--------Class: line: 'if cursor.first():'
0369<---------Source: line: 'if cursor.first():'
0370          If: begin: 'block-if'
0370        <-Source: begin: 'block-if'
0370       <--If: begin: 'block-if'
0370      <---Source: begin: 'block-if'
0370     <----If: begin: 'block-if'
0370    <-----Source: begin: 'block-if'
0370   <------Function: begin: 'block-if'
0370  <-------Source: begin: 'block-if'
0370 <--------Class: begin: 'block-if'
0370<---------Source: begin: 'block-if'
0370          Source: begin-gen
0370           InstructionCall: begin-gen
0370            Member: begin-gen
0370             Identifier: begin-gen
0370              Identifier: expr: 'cursor'
0370             Identifier: end-gen
0370             FunctionCall: begin-gen
0370              Value: begin-gen
0370               Member: begin-gen
0370                Identifier: begin-gen
0370                 Identifier: expr: 'cursor'
0370                Identifier: end-gen
0370                Identifier: begin-gen
0370                 Identifier: expr: 'Edit'
0370                Identifier: end-gen
0370                Member: expr: 'cursor.Edit'
0370              <-Value: expr: 'cursor.Edit'
0370               Member: end-gen
0370              Value: end-gen
0370              FunctionCall: expr: 'setModeAccess(cursor.Edit)'
0370             FunctionCall: end-gen
0370             Member: expr: 'cursor.setModeAccess(cursor.Edit)'
0370            Member: end-gen
0370            InstructionCall: line: 'cursor.setModeAccess(cursor.Edit)'
0370          <-Source: line: 'cursor.setModeAccess(cursor.Edit)'
0370         <--If: line: 'cursor.setModeAccess(cursor.Edit)'
0370        <---Source: line: 'cursor.setModeAccess(cursor.Edit)'
0370       <----If: line: 'cursor.setModeAccess(cursor.Edit)'
0370      <-----Source: line: 'cursor.setModeAccess(cursor.Edit)'
0370     <------If: line: 'cursor.setModeAccess(cursor.Edit)'
0370    <-------Source: line: 'cursor.setModeAccess(cursor.Edit)'
0370   <--------Function: line: 'cursor.setModeAccess(cursor.Edit)'
0370  <---------Source: line: 'cursor.setModeAccess(cursor.Edit)'
0370 <----------Class: line: 'cursor.setModeAccess(cursor.Edit)'
0370<-----------Source: line: 'cursor.setModeAccess(cursor.Edit)'
0371           InstructionCall: end-gen
0371           InstructionCall: begin-gen
0371            Member: begin-gen
0371             Identifier: begin-gen
0371              Identifier: expr: 'cursor'
0371             Identifier: end-gen
0371             FunctionCall: begin-gen
0371              FunctionCall: expr: 'refreshBuffer()'
0371             FunctionCall: end-gen
0371             Member: expr: 'cursor.refreshBuffer()'
0371            Member: end-gen
0371            InstructionCall: line: 'cursor.refreshBuffer()'
0371          <-Source: line: 'cursor.refreshBuffer()'
0371         <--If: line: 'cursor.refreshBuffer()'
0371        <---Source: line: 'cursor.refreshBuffer()'
0371       <----If: line: 'cursor.refreshBuffer()'
0371      <-----Source: line: 'cursor.refreshBuffer()'
0371     <------If: line: 'cursor.refreshBuffer()'
0371    <-------Source: line: 'cursor.refreshBuffer()'
0371   <--------Function: line: 'cursor.refreshBuffer()'
0371  <---------Source: line: 'cursor.refreshBuffer()'
0371 <----------Class: line: 'cursor.refreshBuffer()'
0371<-----------Source: line: 'cursor.refreshBuffer()'
0372           InstructionCall: end-gen
0372           If: begin-gen
0372            Expression: begin-gen
0372             Identifier: begin-gen
0372              Identifier: expr: 'domFact'
0372            <-Expression: expr: 'domFact'
0372             Identifier: end-gen
0372             Compare: begin-gen
0372              Compare: expr: '=='
0372            <-Expression: expr: '=='
0372             Compare: end-gen
0372             Identifier: begin-gen
0372              Identifier: expr: 'True'
0372            <-Expression: expr: 'True'
0372             Identifier: end-gen
0372            Expression: end-gen
0372            If: line: 'if domFact == True:'
0372          <-Source: line: 'if domFact == True:'
0372         <--If: line: 'if domFact == True:'
0372        <---Source: line: 'if domFact == True:'
0372       <----If: line: 'if domFact == True:'
0372      <-----Source: line: 'if domFact == True:'
0372     <------If: line: 'if domFact == True:'
0372    <-------Source: line: 'if domFact == True:'
0372   <--------Function: line: 'if domFact == True:'
0372  <---------Source: line: 'if domFact == True:'
0372 <----------Class: line: 'if domFact == True:'
0372<-----------Source: line: 'if domFact == True:'
0373            If: begin: 'block-if'
0373          <-Source: begin: 'block-if'
0373         <--If: begin: 'block-if'
0373        <---Source: begin: 'block-if'
0373       <----If: begin: 'block-if'
0373      <-----Source: begin: 'block-if'
0373     <------If: begin: 'block-if'
0373    <-------Source: begin: 'block-if'
0373   <--------Function: begin: 'block-if'
0373  <---------Source: begin: 'block-if'
0373 <----------Class: begin: 'block-if'
0373<-----------Source: begin: 'block-if'
0373            Source: begin-gen
0373             InstructionCall: begin-gen
0373              Member: begin-gen
0373               Identifier: begin-gen
0373                Identifier: expr: 'cursor'
0373               Identifier: end-gen
0373               FunctionCall: begin-gen
0373                Value: begin-gen
0373                 Constant: begin-gen
0373                  Constant: ctype: 'String' -> 'domfacturacion'
0373                  Constant: expr: 'u"domfacturacion"'
0373                <-Value: expr: 'u"domfacturacion"'
0373                 Constant: end-gen
0373                Value: end-gen
0373                Value: begin-gen
0373                 Identifier: begin-gen
0373                  Identifier: expr: 'domFact'
0373                <-Value: expr: 'domFact'
0373                 Identifier: end-gen
0373                Value: end-gen
0373                FunctionCall: expr: 'setValueBuffer(u"domfacturacion", domFact)'
0373               FunctionCall: end-gen
0373               Member: expr: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0373              Member: end-gen
0373              InstructionCall: line: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0373            <-Source: line: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0373           <--If: line: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0373          <---Source: line: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0373         <----If: line: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0373        <-----Source: line: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0373       <------If: line: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0373      <-------Source: line: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0373     <--------If: line: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0373    <---------Source: line: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0373   <----------Function: line: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0373  <-----------Source: line: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0373 <------------Class: line: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0373<-------------Source: line: 'cursor.setValueBuffer(u"domfacturacion", domFact)'
0374             InstructionCall: end-gen
0374            Source: end-gen
0374            If: end: 'block-if'
0374          <-Source: end: 'block-if'
0374         <--If: end: 'block-if'
0374        <---Source: end: 'block-if'
0374       <----If: end: 'block-if'
0374      <-----Source: end: 'block-if'
0374     <------If: end: 'block-if'
0374    <-------Source: end: 'block-if'
0374   <--------Function: end: 'block-if'
0374  <---------Source: end: 'block-if'
0374 <----------Class: end: 'block-if'
0374<-----------Source: end: 'block-if'
0374           If: end-gen
0374           If: begin-gen
0374            Expression: begin-gen
0374             Identifier: begin-gen
0374              Identifier: expr: 'domEnv'
0374            <-Expression: expr: 'domEnv'
0374             Identifier: end-gen
0374             Compare: begin-gen
0374              Compare: expr: '=='
0374            <-Expression: expr: '=='
0374             Compare: end-gen
0374             Identifier: begin-gen
0374              Identifier: expr: 'True'
0374            <-Expression: expr: 'True'
0374             Identifier: end-gen
0374            Expression: end-gen
0374            If: line: 'if domEnv == True:'
0374          <-Source: line: 'if domEnv == True:'
0374         <--If: line: 'if domEnv == True:'
0374        <---Source: line: 'if domEnv == True:'
0374       <----If: line: 'if domEnv == True:'
0374      <-----Source: line: 'if domEnv == True:'
0374     <------If: line: 'if domEnv == True:'
0374    <-------Source: line: 'if domEnv == True:'
0374   <--------Function: line: 'if domEnv == True:'
0374  <---------Source: line: 'if domEnv == True:'
0374 <----------Class: line: 'if domEnv == True:'
0374<-----------Source: line: 'if domEnv == True:'
0375            If: begin: 'block-if'
0375          <-Source: begin: 'block-if'
0375         <--If: begin: 'block-if'
0375        <---Source: begin: 'block-if'
0375       <----If: begin: 'block-if'
0375      <-----Source: begin: 'block-if'
0375     <------If: begin: 'block-if'
0375    <-------Source: begin: 'block-if'
0375   <--------Function: begin: 'block-if'
0375  <---------Source: begin: 'block-if'
0375 <----------Class: begin: 'block-if'
0375<-----------Source: begin: 'block-if'
0375            Source: begin-gen
0375             InstructionCall: begin-gen
0375              Member: begin-gen
0375               Identifier: begin-gen
0375                Identifier: expr: 'cursor'
0375               Identifier: end-gen
0375               FunctionCall: begin-gen
0375                Value: begin-gen
0375                 Constant: begin-gen
0375                  Constant: ctype: 'String' -> 'domenvio'
0375                  Constant: expr: 'u"domenvio"'
0375                <-Value: expr: 'u"domenvio"'
0375                 Constant: end-gen
0375                Value: end-gen
0375                Value: begin-gen
0375                 Identifier: begin-gen
0375                  Identifier: expr: 'domEnv'
0375                <-Value: expr: 'domEnv'
0375                 Identifier: end-gen
0375                Value: end-gen
0375                FunctionCall: expr: 'setValueBuffer(u"domenvio", domEnv)'
0375               FunctionCall: end-gen
0375               Member: expr: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0375              Member: end-gen
0375              InstructionCall: line: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0375            <-Source: line: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0375           <--If: line: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0375          <---Source: line: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0375         <----If: line: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0375        <-----Source: line: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0375       <------If: line: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0375      <-------Source: line: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0375     <--------If: line: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0375    <---------Source: line: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0375   <----------Function: line: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0375  <-----------Source: line: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0375 <------------Class: line: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0375<-------------Source: line: 'cursor.setValueBuffer(u"domenvio", domEnv)'
0376             InstructionCall: end-gen
0376            Source: end-gen
0376            If: end: 'block-if'
0376          <-Source: end: 'block-if'
0376         <--If: end: 'block-if'
0376        <---Source: end: 'block-if'
0376       <----If: end: 'block-if'
0376      <-----Source: end: 'block-if'
0376     <------If: end: 'block-if'
0376    <-------Source: end: 'block-if'
0376   <--------Function: end: 'block-if'
0376  <---------Source: end: 'block-if'
0376 <----------Class: end: 'block-if'
0376<-----------Source: end: 'block-if'
0376           If: end-gen
0376           InstructionCall: begin-gen
0376            Member: begin-gen
0376             Identifier: begin-gen
0376              Identifier: expr: 'cursor'
0376             Identifier: end-gen
0376             FunctionCall: begin-gen
0376              FunctionCall: expr: 'commitBuffer()'
0376             FunctionCall: end-gen
0376             Member: expr: 'cursor.commitBuffer()'
0376            Member: end-gen
0376            InstructionCall: line: 'cursor.commitBuffer()'
0376          <-Source: line: 'cursor.commitBuffer()'
0376         <--If: line: 'cursor.commitBuffer()'
0376        <---Source: line: 'cursor.commitBuffer()'
0376       <----If: line: 'cursor.commitBuffer()'
0376      <-----Source: line: 'cursor.commitBuffer()'
0376     <------If: line: 'cursor.commitBuffer()'
0376    <-------Source: line: 'cursor.commitBuffer()'
0376   <--------Function: line: 'cursor.commitBuffer()'
0376  <---------Source: line: 'cursor.commitBuffer()'
0376 <----------Class: line: 'cursor.commitBuffer()'
0376<-----------Source: line: 'cursor.commitBuffer()'
0377           InstructionCall: end-gen
0377          Source: end-gen
0377          If: end: 'block-if'
0377        <-Source: end: 'block-if'
0377       <--If: end: 'block-if'
0377      <---Source: end: 'block-if'
0377     <----If: end: 'block-if'
0377    <-----Source: end: 'block-if'
0377   <------Function: end: 'block-if'
0377  <-------Source: end: 'block-if'
0377 <--------Class: end: 'block-if'
0377<---------Source: end: 'block-if'
0377         If: end-gen
0377        Source: end-gen
0377        If: end: 'block-if'
0377      <-Source: end: 'block-if'
0377     <--If: end: 'block-if'
0377    <---Source: end: 'block-if'
0377   <----Function: end: 'block-if'
0377  <-----Source: end: 'block-if'
0377 <------Class: end: 'block-if'
0377<-------Source: end: 'block-if'
0377       If: end-gen
0377      Source: end-gen
0377      If: end: 'block-if'
0377    <-Source: end: 'block-if'
0377   <--Function: end: 'block-if'
0377  <---Source: end: 'block-if'
0377 <----Class: end: 'block-if'
0377<-----Source: end: 'block-if'
0377     If: end-gen
0377     InstructionFlow: begin-gen
0377      Value: begin-gen
0377       Identifier: begin-gen
0377        Identifier: expr: 'True'
0377      <-Value: expr: 'True'
0377       Identifier: end-gen
0377      Value: end-gen
0377      InstructionFlow: line: 'return True'
0377    <-Source: line: 'return True'
0377   <--Function: line: 'return True'
0377  <---Source: line: 'return True'
0377 <----Class: line: 'return True'
0377<-----Source: line: 'return True'
0379     InstructionFlow: end-gen
0379    Source: end-gen
0379    Function: end: 'block-def-interna_afterCommit_dirclientes'
0379  <-Source: end: 'block-def-interna_afterCommit_dirclientes'
0379 <--Class: end: 'block-def-interna_afterCommit_dirclientes'
0379<---Source: end: 'block-def-interna_afterCommit_dirclientes'
0380   Function: end-gen
0380   Function: begin-gen
0380    Variable: begin-gen
0380     Variable: expr: 'curDirProv'
0380    Variable: end-gen
0380    Function: line: 'def interna_afterCommit_dirproveedores(self, curDirProv = None):'
0380  <-Source: line: 'def interna_afterCommit_dirproveedores(self, curDirProv = None):'
0380 <--Class: line: 'def interna_afterCommit_dirproveedores(self, curDirProv = None):'
0380<---Source: line: 'def interna_afterCommit_dirproveedores(self, curDirProv = None):'
0381    Function: begin: 'block-def-interna_afterCommit_dirproveedores'
0381  <-Source: begin: 'block-def-interna_afterCommit_dirproveedores'
0381 <--Class: begin: 'block-def-interna_afterCommit_dirproveedores'
0381<---Source: begin: 'block-def-interna_afterCommit_dirproveedores'
0381    Source: begin-gen
0381     If: begin-gen
0381      Expression: begin-gen
0381       Member: begin-gen
0381        Identifier: begin-gen
0381         Identifier: expr: 'curDirProv'
0381        Identifier: end-gen
0381        FunctionCall: begin-gen
0381         FunctionCall: expr: 'modeAccess()'
0381        FunctionCall: end-gen
0381        Member: expr: 'curDirProv.modeAccess()'
0381      <-Expression: expr: 'curDirProv.modeAccess()'
0381       Member: end-gen
0381       Compare: begin-gen
0381        Compare: expr: '=='
0381      <-Expression: expr: '=='
0381       Compare: end-gen
0381       Member: begin-gen
0381        Identifier: begin-gen
0381         Identifier: expr: 'curDirProv'
0381        Identifier: end-gen
0381        Identifier: begin-gen
0381         Identifier: expr: 'Del'
0381        Identifier: end-gen
0381        Member: expr: 'curDirProv.Del'
0381      <-Expression: expr: 'curDirProv.Del'
0381       Member: end-gen
0381      Expression: end-gen
0381      If: line: 'if curDirProv.modeAccess() == curDirProv.Del:'
0381    <-Source: line: 'if curDirProv.modeAccess() == curDirProv.Del:'
0381   <--Function: line: 'if curDirProv.modeAccess() == curDirProv.Del:'
0381  <---Source: line: 'if curDirProv.modeAccess() == curDirProv.Del:'
0381 <----Class: line: 'if curDirProv.modeAccess() == curDirProv.Del:'
0381<-----Source: line: 'if curDirProv.modeAccess() == curDirProv.Del:'
0382      If: begin: 'block-if'
0382    <-Source: begin: 'block-if'
0382   <--Function: begin: 'block-if'
0382  <---Source: begin: 'block-if'
0382 <----Class: begin: 'block-if'
0382<-----Source: begin: 'block-if'
0382      Source: begin-gen
0382       DeclarationBlock: begin-gen
0382        Variable: begin-gen
0382         Variable: expr: 'dirPpal'
0382         Variable: expr: '='
0382         Value: begin-gen
0382          Member: begin-gen
0382           Identifier: begin-gen
0382            Identifier: expr: 'curDirProv'
0382           Identifier: end-gen
0382           FunctionCall: begin-gen
0382            Value: begin-gen
0382             Constant: begin-gen
0382              Constant: ctype: 'String' -> 'direccionppal'
0382              Constant: expr: 'u"direccionppal"'
0382            <-Value: expr: 'u"direccionppal"'
0382             Constant: end-gen
0382            Value: end-gen
0382            FunctionCall: expr: 'valueBuffer(u"direccionppal")'
0382           FunctionCall: end-gen
0382           Member: expr: 'curDirProv.valueBuffer(u"direccionppal")'
0382         <-Value: expr: 'curDirProv.valueBuffer(u"direccionppal")'
0382        <--Variable: expr: 'curDirProv.valueBuffer(u"direccionppal")'
0382          Member: end-gen
0382         Value: end-gen
0382        Variable: end-gen
0382        DeclarationBlock: line: 'dirPpal = curDirProv.valueBuffer(u"direccionppal")'
0382      <-Source: line: 'dirPpal = curDirProv.valueBuffer(u"direccionppal")'
0382     <--If: line: 'dirPpal = curDirProv.valueBuffer(u"direccionppal")'
0382    <---Source: line: 'dirPpal = curDirProv.valueBuffer(u"direccionppal")'
0382   <----Function: line: 'dirPpal = curDirProv.valueBuffer(u"direccionppal")'
0382  <-----Source: line: 'dirPpal = curDirProv.valueBuffer(u"direccionppal")'
0382 <------Class: line: 'dirPpal = curDirProv.valueBuffer(u"direccionppal")'
0382<-------Source: line: 'dirPpal = curDirProv.valueBuffer(u"direccionppal")'
0383       DeclarationBlock: end-gen
0383       If: begin-gen
0383        Expression: begin-gen
0383         Identifier: begin-gen
0383          Identifier: expr: 'dirPpal'
0383        <-Expression: expr: 'dirPpal'
0383         Identifier: end-gen
0383         Compare: begin-gen
0383          Compare: expr: '=='
0383        <-Expression: expr: '=='
0383         Compare: end-gen
0383         Identifier: begin-gen
0383          Identifier: expr: 'True'
0383        <-Expression: expr: 'True'
0383         Identifier: end-gen
0383        Expression: end-gen
0383        If: line: 'if dirPpal == True:'
0383      <-Source: line: 'if dirPpal == True:'
0383     <--If: line: 'if dirPpal == True:'
0383    <---Source: line: 'if dirPpal == True:'
0383   <----Function: line: 'if dirPpal == True:'
0383  <-----Source: line: 'if dirPpal == True:'
0383 <------Class: line: 'if dirPpal == True:'
0383<-------Source: line: 'if dirPpal == True:'
0384        If: begin: 'block-if'
0384      <-Source: begin: 'block-if'
0384     <--If: begin: 'block-if'
0384    <---Source: begin: 'block-if'
0384   <----Function: begin: 'block-if'
0384  <-----Source: begin: 'block-if'
0384 <------Class: begin: 'block-if'
0384<-------Source: begin: 'block-if'
0384        Source: begin-gen
0384         DeclarationBlock: begin-gen
0384          Variable: begin-gen
0384           Variable: expr: 'cursor'
0384           Variable: expr: '='
0384           Value: begin-gen
0384            New: begin-gen
0384             FunctionCall: begin-gen
0384              Value: begin-gen
0384               Constant: begin-gen
0384                Constant: ctype: 'String' -> 'dirproveedores'
0384                Constant: expr: 'u"dirproveedores"'
0384              <-Value: expr: 'u"dirproveedores"'
0384               Constant: end-gen
0384              Value: end-gen
0384              FunctionCall: expr: 'FLSqlCursor(u"dirproveedores")'
0384            <-New: expr: 'qsatype.FLSqlCursor(u"dirproveedores")'
0384           <--Value: expr: 'qsatype.FLSqlCursor(u"dirproveedores")'
0384          <---Variable: expr: 'qsatype.FLSqlCursor(u"dirproveedores")'
0384             FunctionCall: end-gen
0384            New: end-gen
0384           Value: end-gen
0384          Variable: end-gen
0384          DeclarationBlock: line: 'cursor = qsatype.FLSqlCursor(u"dirproveedores")'
0384        <-Source: line: 'cursor = qsatype.FLSqlCursor(u"dirproveedores")'
0384       <--If: line: 'cursor = qsatype.FLSqlCursor(u"dirproveedores")'
0384      <---Source: line: 'cursor = qsatype.FLSqlCursor(u"dirproveedores")'
0384     <----If: line: 'cursor = qsatype.FLSqlCursor(u"dirproveedores")'
0384    <-----Source: line: 'cursor = qsatype.FLSqlCursor(u"dirproveedores")'
0384   <------Function: line: 'cursor = qsatype.FLSqlCursor(u"dirproveedores")'
0384  <-------Source: line: 'cursor = qsatype.FLSqlCursor(u"dirproveedores")'
0384 <--------Class: line: 'cursor = qsatype.FLSqlCursor(u"dirproveedores")'
0384<---------Source: line: 'cursor = qsatype.FLSqlCursor(u"dirproveedores")'
0385         DeclarationBlock: end-gen
0385         InstructionCall: begin-gen
0385          Member: begin-gen
0385           Identifier: begin-gen
0385            Identifier: expr: 'cursor'
0385           Identifier: end-gen
0385           FunctionCall: begin-gen
0385            Expression: begin-gen
0385             Expression: expr: 'ustr('
0385             Constant: begin-gen
0385              Constant: ctype: 'String' -> "codproveedor = '"
0385              Constant: expr: 'u"codproveedor = \'"'
0385            <-Expression: expr: 'u"codproveedor = \'"'
0385             Constant: end-gen
0385             Expression: expr: ','
0385             Member: begin-gen
0385              Identifier: begin-gen
0385               Identifier: expr: 'curDirProv'
0385              Identifier: end-gen
0385              FunctionCall: begin-gen
0385               Value: begin-gen
0385                Constant: begin-gen
0385                 Constant: ctype: 'String' -> 'codproveedor'
0385                 Constant: expr: 'u"codproveedor"'
0385               <-Value: expr: 'u"codproveedor"'
0385                Constant: end-gen
0385               Value: end-gen
0385               FunctionCall: expr: 'valueBuffer(u"codproveedor")'
0385              FunctionCall: end-gen
0385              Member: expr: 'curDirProv.valueBuffer(u"codproveedor")'
0385            <-Expression: expr: 'curDirProv.valueBuffer(u"codproveedor")'
0385             Member: end-gen
0385             Expression: expr: ','
0385             Constant: begin-gen
0385              Constant: ctype: 'String' -> "' AND id <> "
0385              Constant: expr: 'u"\' AND id <> "'
0385            <-Expression: expr: 'u"\' AND id <> "'
0385             Constant: end-gen
0385             Expression: expr: ','
0385             Member: begin-gen
0385              Identifier: begin-gen
0385               Identifier: expr: 'curDirProv'
0385              Identifier: end-gen
0385              FunctionCall: begin-gen
0385               Value: begin-gen
0385                Constant: begin-gen
0385                 Constant: ctype: 'String' -> 'id'
0385                 Constant: expr: 'u"id"'
0385               <-Value: expr: 'u"id"'
0385                Constant: end-gen
0385               Value: end-gen
0385               FunctionCall: expr: 'valueBuffer(u"id")'
0385              FunctionCall: end-gen
0385              Member: expr: 'curDirProv.valueBuffer(u"id")'
0385            <-Expression: expr: 'curDirProv.valueBuffer(u"id")'
0385             Member: end-gen
0385             Expression: expr: ')'
0385            Expression: end-gen
0385            FunctionCall: expr: 'select(ustr( u"codproveedor = \'" , curDirProv.valueBuffer(u"codproveedor") , u"\' AND id <> " , curDirProv.valueBuffer(u"id") ))'
0385           FunctionCall: end-gen
0385           Member: expr: 'cursor.select(ustr( u"codproveedor = \'" , curDirProv.valueBuffer(u"codproveedor") , u"\' AND id <> " , curDirProv.valueBuffer(u"id") ))'
0385          Member: end-gen
0385          InstructionCall: line: 'cursor.select(ustr( u"codproveedor = \'" , curDirProv.valueBuffer(u"codproveedor") , u"\' AND id <> " , curDirProv.valueBuffer(u"id") ))'
0385        <-Source: line: 'cursor.select(ustr( u"codproveedor = \'" , curDirProv.valueBuffer(u"codproveedor") , u"\' AND id <> " , curDirProv.valueBuffer(u"id") ))'
0385       <--If: line: 'cursor.select(ustr( u"codproveedor = \'" , curDirProv.valueBuffer(u"codproveedor") , u"\' AND id <> " , curDirProv.valueBuffer(u"id") ))'
0385      <---Source: line: 'cursor.select(ustr( u"codproveedor = \'" , curDirProv.valueBuffer(u"codproveedor") , u"\' AND id <> " , curDirProv.valueBuffer(u"id") ))'
0385     <----If: line: 'cursor.select(ustr( u"codproveedor = \'" , curDirProv.valueBuffer(u"codproveedor") , u"\' AND id <> " , curDirProv.valueBuffer(u"id") ))'
0385    <-----Source: line: 'cursor.select(ustr( u"codproveedor = \'" , curDirProv.valueBuffer(u"codproveedor") , u"\' AND id <> " , curDirProv.valueBuffer(u"id") ))'
0385   <------Function: line: 'cursor.select(ustr( u"codproveedor = \'" , curDirProv.valueBuffer(u"codproveedor") , u"\' AND id <> " , curDirProv.valueBuffer(u"id") ))'
0385  <-------Source: line: 'cursor.select(ustr( u"codproveedor = \'" , curDirProv.valueBuffer(u"codproveedor") , u"\' AND id <> " , curDirProv.valueBuffer(u"id") ))'
0385 <--------Class: line: 'cursor.select(ustr( u"codproveedor = \'" , curDirProv.valueBuffer(u"codproveedor") , u"\' AND id <> " , curDirProv.valueBuffer(u"id") ))'
0385<---------Source: line: 'cursor.select(ustr( u"codproveedor = \'" , curDirProv.valueBuffer(u"codproveedor") , u"\' AND id <> " , curDirProv.valueBuffer(u"id") ))'
0386         InstructionCall: end-gen
0386         If: begin-gen
0386          Value: begin-gen
0386           Member: begin-gen
0386            Identifier: begin-gen
0386             Identifier: expr: 'cursor'
0386            Identifier: end-gen
0386            FunctionCall: begin-gen
0386             FunctionCall: expr: 'first()'
0386            FunctionCall: end-gen
0386            Member: expr: 'cursor.first()'
0386          <-Value: expr: 'cursor.first()'
0386           Member: end-gen
0386          Value: end-gen
0386          If: line: 'if cursor.first():'
0386        <-Source: line: 'if cursor.first():'
0386       <--If: line: 'if cursor.first():'
0386      <---Source: line: 'if cursor.first():'
0386     <----If: line: 'if cursor.first():'
0386    <-----Source: line: 'if cursor.first():'
0386   <------Function: line: 'if cursor.first():'
0386  <-------Source: line: 'if cursor.first():'
0386 <--------Class: line: 'if cursor.first():'
0386<---------Source: line: 'if cursor.first():'
0387          If: begin: 'block-if'
0387        <-Source: begin: 'block-if'
0387       <--If: begin: 'block-if'
0387      <---Source: begin: 'block-if'
0387     <----If: begin: 'block-if'
0387    <-----Source: begin: 'block-if'
0387   <------Function: begin: 'block-if'
0387  <-------Source: begin: 'block-if'
0387 <--------Class: begin: 'block-if'
0387<---------Source: begin: 'block-if'
0387          Source: begin-gen
0387           InstructionCall: begin-gen
0387            Member: begin-gen
0387             Identifier: begin-gen
0387              Identifier: expr: 'cursor'
0387             Identifier: end-gen
0387             FunctionCall: begin-gen
0387              Value: begin-gen
0387               Member: begin-gen
0387                Identifier: begin-gen
0387                 Identifier: expr: 'cursor'
0387                Identifier: end-gen
0387                Identifier: begin-gen
0387                 Identifier: expr: 'Edit'
0387                Identifier: end-gen
0387                Member: expr: 'cursor.Edit'
0387              <-Value: expr: 'cursor.Edit'
0387               Member: end-gen
0387              Value: end-gen
0387              FunctionCall: expr: 'setModeAccess(cursor.Edit)'
0387             FunctionCall: end-gen
0387             Member: expr: 'cursor.setModeAccess(cursor.Edit)'
0387            Member: end-gen
0387            InstructionCall: line: 'cursor.setModeAccess(cursor.Edit)'
0387          <-Source: line: 'cursor.setModeAccess(cursor.Edit)'
0387         <--If: line: 'cursor.setModeAccess(cursor.Edit)'
0387        <---Source: line: 'cursor.setModeAccess(cursor.Edit)'
0387       <----If: line: 'cursor.setModeAccess(cursor.Edit)'
0387      <-----Source: line: 'cursor.setModeAccess(cursor.Edit)'
0387     <------If: line: 'cursor.setModeAccess(cursor.Edit)'
0387    <-------Source: line: 'cursor.setModeAccess(cursor.Edit)'
0387   <--------Function: line: 'cursor.setModeAccess(cursor.Edit)'
0387  <---------Source: line: 'cursor.setModeAccess(cursor.Edit)'
0387 <----------Class: line: 'cursor.setModeAccess(cursor.Edit)'
0387<-----------Source: line: 'cursor.setModeAccess(cursor.Edit)'
0388           InstructionCall: end-gen
0388           InstructionCall: begin-gen
0388            Member: begin-gen
0388             Identifier: begin-gen
0388              Identifier: expr: 'cursor'
0388             Identifier: end-gen
0388             FunctionCall: begin-gen
0388              FunctionCall: expr: 'refreshBuffer()'
0388             FunctionCall: end-gen
0388             Member: expr: 'cursor.refreshBuffer()'
0388            Member: end-gen
0388            InstructionCall: line: 'cursor.refreshBuffer()'
0388          <-Source: line: 'cursor.refreshBuffer()'
0388         <--If: line: 'cursor.refreshBuffer()'
0388        <---Source: line: 'cursor.refreshBuffer()'
0388       <----If: line: 'cursor.refreshBuffer()'
0388      <-----Source: line: 'cursor.refreshBuffer()'
0388     <------If: line: 'cursor.refreshBuffer()'
0388    <-------Source: line: 'cursor.refreshBuffer()'
0388   <--------Function: line: 'cursor.refreshBuffer()'
0388  <---------Source: line: 'cursor.refreshBuffer()'
0388 <----------Class: line: 'cursor.refreshBuffer()'
0388<-----------Source: line: 'cursor.refreshBuffer()'
0389           InstructionCall: end-gen
0389           InstructionCall: begin-gen
0389            Member: begin-gen
0389             Identifier: begin-gen
0389              Identifier: expr: 'cursor'
0389             Identifier: end-gen
0389             FunctionCall: begin-gen
0389              Value: begin-gen
0389               Constant: begin-gen
0389                Constant: ctype: 'String' -> 'direccionppal'
0389                Constant: expr: 'u"direccionppal"'
0389              <-Value: expr: 'u"direccionppal"'
0389               Constant: end-gen
0389              Value: end-gen
0389              Value: begin-gen
0389               Identifier: begin-gen
0389                Identifier: expr: 'dirPpal'
0389              <-Value: expr: 'dirPpal'
0389               Identifier: end-gen
0389              Value: end-gen
0389              FunctionCall: expr: 'setValueBuffer(u"direccionppal", dirPpal)'
0389             FunctionCall: end-gen
0389             Member: expr: 'cursor.setValueBuffer(u"direccionppal", dirPpal)'
0389            Member: end-gen
0389            InstructionCall: line: 'cursor.setValueBuffer(u"direccionppal", dirPpal)'
0389          <-Source: line: 'cursor.setValueBuffer(u"direccionppal", dirPpal)'
0389         <--If: line: 'cursor.setValueBuffer(u"direccionppal", dirPpal)'
0389        <---Source: line: 'cursor.setValueBuffer(u"direccionppal", dirPpal)'
0389       <----If: line: 'cursor.setValueBuffer(u"direccionppal", dirPpal)'
0389      <-----Source: line: 'cursor.setValueBuffer(u"direccionppal", dirPpal)'
0389     <------If: line: 'cursor.setValueBuffer(u"direccionppal", dirPpal)'
0389    <-------Source: line: 'cursor.setValueBuffer(u"direccionppal", dirPpal)'
0389   <--------Function: line: 'cursor.setValueBuffer(u"direccionppal", dirPpal)'
0389  <---------Source: line: 'cursor.setValueBuffer(u"direccionppal", dirPpal)'
0389 <----------Class: line: 'cursor.setValueBuffer(u"direccionppal", dirPpal)'
0389<-----------Source: line: 'cursor.setValueBuffer(u"direccionppal", dirPpal)'
0390           InstructionCall: end-gen
0390           InstructionCall: begin-gen
0390            Member: begin-gen
0390             Identifier: begin-gen
0390              Identifier: expr: 'cursor'
0390             Identifier: end-gen
0390             FunctionCall: begin-gen
0390              FunctionCall: expr: 'commitBuffer()'
0390             FunctionCall: end-gen
0390             Member: expr: 'cursor.commitBuffer()'
0390            Member: end-gen
0390            InstructionCall: line: 'cursor.commitBuffer()'
0390          <-Source: line: 'cursor.commitBuffer()'
0390         <--If: line: 'cursor.commitBuffer()'
0390        <---Source: line: 'cursor.commitBuffer()'
0390       <----If: line: 'cursor.commitBuffer()'
0390      <-----Source: line: 'cursor.commitBuffer()'
0390     <------If: line: 'cursor.commitBuffer()'
0390    <-------Source: line: 'cursor.commitBuffer()'
0390   <--------Function: line: 'cursor.commitBuffer()'
0390  <---------Source: line: 'cursor.commitBuffer()'
0390 <----------Class: line: 'cursor.commitBuffer()'
0390<-----------Source: line: 'cursor.commitBuffer()'
0391           InstructionCall: end-gen
0391          Source: end-gen
0391          If: end: 'block-if'
0391        <-Source: end: 'block-if'
0391       <--If: end: 'block-if'
0391      <---Source: end: 'block-if'
0391     <----If: end: 'block-if'
0391    <-----Source: end: 'block-if'
0391   <------Function: end: 'block-if'
0391  <-------Source: end: 'block-if'
0391 <--------Class: end: 'block-if'
0391<---------Source: end: 'block-if'
0391         If: end-gen
0391        Source: end-gen
0391        If: end: 'block-if'
0391      <-Source: end: 'block-if'
0391     <--If: end: 'block-if'
0391    <---Source: end: 'block-if'
0391   <----Function: end: 'block-if'
0391  <-----Source: end: 'block-if'
0391 <------Class: end: 'block-if'
0391<-------Source: end: 'block-if'
0391       If: end-gen
0391      Source: end-gen
0391      If: end: 'block-if'
0391    <-Source: end: 'block-if'
0391   <--Function: end: 'block-if'
0391  <---Source: end: 'block-if'
0391 <----Class: end: 'block-if'
0391<-----Source: end: 'block-if'
0391     If: end-gen
0391     InstructionFlow: begin-gen
0391      Value: begin-gen
0391       Identifier: begin-gen
0391        Identifier: expr: 'True'
0391      <-Value: expr: 'True'
0391       Identifier: end-gen
0391      Value: end-gen
0391      InstructionFlow: line: 'return True'
0391    <-Source: line: 'return True'
0391   <--Function: line: 'return True'
0391  <---Source: line: 'return True'
0391 <----Class: line: 'return True'
0391<-----Source: line: 'return True'
0393     InstructionFlow: end-gen
0393    Source: end-gen
0393    Function: end: 'block-def-interna_afterCommit_dirproveedores'
0393  <-Source: end: 'block-def-interna_afterCommit_dirproveedores'
0393 <--Class: end: 'block-def-interna_afterCommit_dirproveedores'
0393<---Source: end: 'block-def-interna_afterCommit_dirproveedores'
0394   Function: end-gen
0394   Function: begin-gen
0394    Variable: begin-gen
0394     Variable: expr: 'curCliente'
0394    Variable: end-gen
0394    Function: line: 'def interna_afterCommit_clientes(self, curCliente = None):'
0394  <-Source: line: 'def interna_afterCommit_clientes(self, curCliente = None):'
0394 <--Class: line: 'def interna_afterCommit_clientes(self, curCliente = None):'
0394<---Source: line: 'def interna_afterCommit_clientes(self, curCliente = None):'
0395    Function: begin: 'block-def-interna_afterCommit_clientes'
0395  <-Source: begin: 'block-def-interna_afterCommit_clientes'
0395 <--Class: begin: 'block-def-interna_afterCommit_clientes'
0395<---Source: begin: 'block-def-interna_afterCommit_clientes'
0395    Source: begin-gen
0395     DeclarationBlock: begin-gen
0395      Variable: begin-gen
0395       Variable: expr: 'util'
0395       Variable: expr: '='
0395       Value: begin-gen
0395        New: begin-gen
0395         FunctionCall: begin-gen
0395          FunctionCall: expr: 'FLUtil()'
0395        <-New: expr: 'qsatype.FLUtil()'
0395       <--Value: expr: 'qsatype.FLUtil()'
0395      <---Variable: expr: 'qsatype.FLUtil()'
0395         FunctionCall: end-gen
0395        New: end-gen
0395       Value: end-gen
0395      Variable: end-gen
0395      DeclarationBlock: line: 'util = qsatype.FLUtil()'
0395    <-Source: line: 'util = qsatype.FLUtil()'
0395   <--Function: line: 'util = qsatype.FLUtil()'
0395  <---Source: line: 'util = qsatype.FLUtil()'
0395 <----Class: line: 'util = qsatype.FLUtil()'
0395<-----Source: line: 'util = qsatype.FLUtil()'
0396     DeclarationBlock: end-gen
0396     If: begin-gen
0396      Value: begin-gen
0396       OpUnary: begin-gen
0396        OpUnary: expr: 'not'
0396      <-Value: expr: 'not'
0396        Member: begin-gen
0396         Identifier: begin-gen
0396          Identifier: expr: 'sys'
0396         Identifier: end-gen
0396         FunctionCall: begin-gen
0396          Value: begin-gen
0396           Constant: begin-gen
0396            Constant: ctype: 'String' -> 'flcontppal'
0396            Constant: expr: 'u"flcontppal"'
0396          <-Value: expr: 'u"flcontppal"'
0396           Constant: end-gen
0396          Value: end-gen
0396          FunctionCall: expr: 'isLoadedModule(u"flcontppal")'
0396         FunctionCall: end-gen
0396         Member: expr: 'sys.isLoadedModule(u"flcontppal")'
0396       <-OpUnary: expr: 'sys.isLoadedModule(u"flcontppal")'
0396      <--Value: expr: 'sys.isLoadedModule(u"flcontppal")'
0396        Member: end-gen
0396       OpUnary: end-gen
0396      Value: end-gen
0396      If: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0396    <-Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0396   <--Function: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0396  <---Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0396 <----Class: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0396<-----Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0397      If: begin: 'block-if'
0397    <-Source: begin: 'block-if'
0397   <--Function: begin: 'block-if'
0397  <---Source: begin: 'block-if'
0397 <----Class: begin: 'block-if'
0397<-----Source: begin: 'block-if'
0397      Source: begin-gen
0397       InstructionFlow: begin-gen
0397        Value: begin-gen
0397         Identifier: begin-gen
0397          Identifier: expr: 'True'
0397        <-Value: expr: 'True'
0397         Identifier: end-gen
0397        Value: end-gen
0397        InstructionFlow: line: 'return True'
0397      <-Source: line: 'return True'
0397     <--If: line: 'return True'
0397    <---Source: line: 'return True'
0397   <----Function: line: 'return True'
0397  <-----Source: line: 'return True'
0397 <------Class: line: 'return True'
0397<-------Source: line: 'return True'
0398       InstructionFlow: end-gen
0398      Source: end-gen
0398      If: end: 'block-if'
0398    <-Source: end: 'block-if'
0398   <--Function: end: 'block-if'
0398  <---Source: end: 'block-if'
0398 <----Class: end: 'block-if'
0398<-----Source: end: 'block-if'
0398     If: end-gen
0398     DeclarationBlock: begin-gen
0398      Variable: begin-gen
0398       Variable: expr: 'codSubcuenta'
0398       Variable: expr: '='
0398       Value: begin-gen
0398        Member: begin-gen
0398         Identifier: begin-gen
0398          Identifier: expr: 'curCliente'
0398         Identifier: end-gen
0398         FunctionCall: begin-gen
0398          Value: begin-gen
0398           Constant: begin-gen
0398            Constant: ctype: 'String' -> 'codsubcuenta'
0398            Constant: expr: 'u"codsubcuenta"'
0398          <-Value: expr: 'u"codsubcuenta"'
0398           Constant: end-gen
0398          Value: end-gen
0398          FunctionCall: expr: 'valueBuffer(u"codsubcuenta")'
0398         FunctionCall: end-gen
0398         Member: expr: 'curCliente.valueBuffer(u"codsubcuenta")'
0398       <-Value: expr: 'curCliente.valueBuffer(u"codsubcuenta")'
0398      <--Variable: expr: 'curCliente.valueBuffer(u"codsubcuenta")'
0398        Member: end-gen
0398       Value: end-gen
0398      Variable: end-gen
0398      DeclarationBlock: line: 'codSubcuenta = curCliente.valueBuffer(u"codsubcuenta")'
0398    <-Source: line: 'codSubcuenta = curCliente.valueBuffer(u"codsubcuenta")'
0398   <--Function: line: 'codSubcuenta = curCliente.valueBuffer(u"codsubcuenta")'
0398  <---Source: line: 'codSubcuenta = curCliente.valueBuffer(u"codsubcuenta")'
0398 <----Class: line: 'codSubcuenta = curCliente.valueBuffer(u"codsubcuenta")'
0398<-----Source: line: 'codSubcuenta = curCliente.valueBuffer(u"codsubcuenta")'
0399     DeclarationBlock: end-gen
0399     DeclarationBlock: begin-gen
0399      Variable: begin-gen
0399       Variable: expr: 'idSubcuenta'
0399       Variable: expr: '='
0399       Value: begin-gen
0399        FunctionCall: begin-gen
0399         Value: begin-gen
0399          Member: begin-gen
0399           Identifier: begin-gen
0399            Identifier: expr: 'curCliente'
0399           Identifier: end-gen
0399           FunctionCall: begin-gen
0399            Value: begin-gen
0399             Constant: begin-gen
0399              Constant: ctype: 'String' -> 'idsubcuenta'
0399              Constant: expr: 'u"idsubcuenta"'
0399            <-Value: expr: 'u"idsubcuenta"'
0399             Constant: end-gen
0399            Value: end-gen
0399            FunctionCall: expr: 'valueBuffer(u"idsubcuenta")'
0399           FunctionCall: end-gen
0399           Member: expr: 'curCliente.valueBuffer(u"idsubcuenta")'
0399         <-Value: expr: 'curCliente.valueBuffer(u"idsubcuenta")'
0399          Member: end-gen
0399         Value: end-gen
0399         FunctionCall: expr: 'parseFloat(curCliente.valueBuffer(u"idsubcuenta"))'
0399       <-Value: expr: 'parseFloat(curCliente.valueBuffer(u"idsubcuenta"))'
0399      <--Variable: expr: 'parseFloat(curCliente.valueBuffer(u"idsubcuenta"))'
0399        FunctionCall: end-gen
0399       Value: end-gen
0399      Variable: end-gen
0399      DeclarationBlock: line: 'idSubcuenta = parseFloat(curCliente.valueBuffer(u"idsubcuenta"))'
0399    <-Source: line: 'idSubcuenta = parseFloat(curCliente.valueBuffer(u"idsubcuenta"))'
0399   <--Function: line: 'idSubcuenta = parseFloat(curCliente.valueBuffer(u"idsubcuenta"))'
0399  <---Source: line: 'idSubcuenta = parseFloat(curCliente.valueBuffer(u"idsubcuenta"))'
0399 <----Class: line: 'idSubcuenta = parseFloat(curCliente.valueBuffer(u"idsubcuenta"))'
0399<-----Source: line: 'idSubcuenta = parseFloat(curCliente.valueBuffer(u"idsubcuenta"))'
0400     DeclarationBlock: end-gen
0400     DeclarationBlock: begin-gen
0400      Variable: begin-gen
0400       Variable: expr: 'codCliente'
0400       Variable: expr: '='
0400       Value: begin-gen
0400        Member: begin-gen
0400         Identifier: begin-gen
0400          Identifier: expr: 'curCliente'
0400         Identifier: end-gen
0400         FunctionCall: begin-gen
0400          Value: begin-gen
0400           Constant: begin-gen
0400            Constant: ctype: 'String' -> 'codcliente'
0400            Constant: expr: 'u"codcliente"'
0400          <-Value: expr: 'u"codcliente"'
0400           Constant: end-gen
0400          Value: end-gen
0400          FunctionCall: expr: 'valueBuffer(u"codcliente")'
0400         FunctionCall: end-gen
0400         Member: expr: 'curCliente.valueBuffer(u"codcliente")'
0400       <-Value: expr: 'curCliente.valueBuffer(u"codcliente")'
0400      <--Variable: expr: 'curCliente.valueBuffer(u"codcliente")'
0400        Member: end-gen
0400       Value: end-gen
0400      Variable: end-gen
0400      DeclarationBlock: line: 'codCliente = curCliente.valueBuffer(u"codcliente")'
0400    <-Source: line: 'codCliente = curCliente.valueBuffer(u"codcliente")'
0400   <--Function: line: 'codCliente = curCliente.valueBuffer(u"codcliente")'
0400  <---Source: line: 'codCliente = curCliente.valueBuffer(u"codcliente")'
0400 <----Class: line: 'codCliente = curCliente.valueBuffer(u"codcliente")'
0400<-----Source: line: 'codCliente = curCliente.valueBuffer(u"codcliente")'
0401     DeclarationBlock: end-gen
0401     DeclarationBlock: begin-gen
0401      Variable: begin-gen
0401       Variable: expr: 'idSubcuentaPrevia'
0401       Variable: expr: '='
0401       Value: begin-gen
0401        FunctionCall: begin-gen
0401         Value: begin-gen
0401          Member: begin-gen
0401           Identifier: begin-gen
0401            Identifier: expr: 'curCliente'
0401           Identifier: end-gen
0401           FunctionCall: begin-gen
0401            Value: begin-gen
0401             Constant: begin-gen
0401              Constant: ctype: 'String' -> 'idsubcuenta'
0401              Constant: expr: 'u"idsubcuenta"'
0401            <-Value: expr: 'u"idsubcuenta"'
0401             Constant: end-gen
0401            Value: end-gen
0401            FunctionCall: expr: 'valueBufferCopy(u"idsubcuenta")'
0401           FunctionCall: end-gen
0401           Member: expr: 'curCliente.valueBufferCopy(u"idsubcuenta")'
0401         <-Value: expr: 'curCliente.valueBufferCopy(u"idsubcuenta")'
0401          Member: end-gen
0401         Value: end-gen
0401         FunctionCall: expr: 'parseFloat(curCliente.valueBufferCopy(u"idsubcuenta"))'
0401       <-Value: expr: 'parseFloat(curCliente.valueBufferCopy(u"idsubcuenta"))'
0401      <--Variable: expr: 'parseFloat(curCliente.valueBufferCopy(u"idsubcuenta"))'
0401        FunctionCall: end-gen
0401       Value: end-gen
0401      Variable: end-gen
0401      DeclarationBlock: line: 'idSubcuentaPrevia = parseFloat(curCliente.valueBufferCopy(u"idsubcuenta"))'
0401    <-Source: line: 'idSubcuentaPrevia = parseFloat(curCliente.valueBufferCopy(u"idsubcuenta"))'
0401   <--Function: line: 'idSubcuentaPrevia = parseFloat(curCliente.valueBufferCopy(u"idsubcuenta"))'
0401  <---Source: line: 'idSubcuentaPrevia = parseFloat(curCliente.valueBufferCopy(u"idsubcuenta"))'
0401 <----Class: line: 'idSubcuentaPrevia = parseFloat(curCliente.valueBufferCopy(u"idsubcuenta"))'
0401<-----Source: line: 'idSubcuentaPrevia = parseFloat(curCliente.valueBufferCopy(u"idsubcuenta"))'
0402     DeclarationBlock: end-gen
0402     Switch: begin-gen
0402      Value: begin-gen
0402       Member: begin-gen
0402        Identifier: begin-gen
0402         Identifier: expr: 'curCliente'
0402        Identifier: end-gen
0402        FunctionCall: begin-gen
0402         FunctionCall: expr: 'modeAccess()'
0402        FunctionCall: end-gen
0402        Member: expr: 'curCliente.modeAccess()'
0402      <-Value: expr: 'curCliente.modeAccess()'
0402       Member: end-gen
0402      Value: end-gen
0402      Switch: line: 's21_when = curCliente.modeAccess()'
0402    <-Source: line: 's21_when = curCliente.modeAccess()'
0402   <--Function: line: 's21_when = curCliente.modeAccess()'
0402  <---Source: line: 's21_when = curCliente.modeAccess()'
0402 <----Class: line: 's21_when = curCliente.modeAccess()'
0402<-----Source: line: 's21_when = curCliente.modeAccess()'
0403      Switch: line: 's21_do_work,s21_work_done = False,False'
0403    <-Source: line: 's21_do_work,s21_work_done = False,False'
0403   <--Function: line: 's21_do_work,s21_work_done = False,False'
0403  <---Source: line: 's21_do_work,s21_work_done = False,False'
0403 <----Class: line: 's21_do_work,s21_work_done = False,False'
0403<-----Source: line: 's21_do_work,s21_work_done = False,False'
0404      Value: begin-gen
0404       Member: begin-gen
0404        Identifier: begin-gen
0404         Identifier: expr: 'curCliente'
0404        Identifier: end-gen
0404        Identifier: begin-gen
0404         Identifier: expr: 'Insert'
0404        Identifier: end-gen
0404        Member: expr: 'curCliente.Insert'
0404      <-Value: expr: 'curCliente.Insert'
0404       Member: end-gen
0404      Value: end-gen
0404      Switch: line: 'if s21_when == curCliente.Insert: s21_do_work,s21_work_done = True,True'
0404    <-Source: line: 'if s21_when == curCliente.Insert: s21_do_work,s21_work_done = True,True'
0404   <--Function: line: 'if s21_when == curCliente.Insert: s21_do_work,s21_work_done = True,True'
0404  <---Source: line: 'if s21_when == curCliente.Insert: s21_do_work,s21_work_done = True,True'
0404 <----Class: line: 'if s21_when == curCliente.Insert: s21_do_work,s21_work_done = True,True'
0404<-----Source: line: 'if s21_when == curCliente.Insert: s21_do_work,s21_work_done = True,True'
0405      Switch: line: 'if s21_do_work:'
0405    <-Source: line: 'if s21_do_work:'
0405   <--Function: line: 'if s21_do_work:'
0405  <---Source: line: 'if s21_do_work:'
0405 <----Class: line: 'if s21_do_work:'
0405<-----Source: line: 'if s21_do_work:'
0406      Switch: begin: 'block-if'
0406    <-Source: begin: 'block-if'
0406   <--Function: begin: 'block-if'
0406  <---Source: begin: 'block-if'
0406 <----Class: begin: 'block-if'
0406<-----Source: begin: 'block-if'
0406      Source: begin-gen
0406       If: begin-gen
0406        Value: begin-gen
0406         OpUnary: begin-gen
0406          OpUnary: expr: 'not'
0406        <-Value: expr: 'not'
0406          Member: begin-gen
0406           Identifier: begin-gen
0406            Identifier: expr: 'self'
0406           Identifier: end-gen
0406           Identifier: begin-gen
0406            Identifier: expr: 'iface'
0406           Identifier: end-gen
0406           FunctionCall: begin-gen
0406            Value: begin-gen
0406             Identifier: begin-gen
0406              Identifier: expr: 'codCliente'
0406            <-Value: expr: 'codCliente'
0406             Identifier: end-gen
0406            Value: end-gen
0406            Value: begin-gen
0406             Identifier: begin-gen
0406              Identifier: expr: 'codSubcuenta'
0406            <-Value: expr: 'codSubcuenta'
0406             Identifier: end-gen
0406            Value: end-gen
0406            Value: begin-gen
0406             Member: begin-gen
0406              Identifier: begin-gen
0406               Identifier: expr: 'curCliente'
0406              Identifier: end-gen
0406              FunctionCall: begin-gen
0406               Value: begin-gen
0406                Constant: begin-gen
0406                 Constant: ctype: 'String' -> 'nombre'
0406                 Constant: expr: 'u"nombre"'
0406               <-Value: expr: 'u"nombre"'
0406                Constant: end-gen
0406               Value: end-gen
0406               FunctionCall: expr: 'valueBuffer(u"nombre")'
0406              FunctionCall: end-gen
0406              Member: expr: 'curCliente.valueBuffer(u"nombre")'
0406            <-Value: expr: 'curCliente.valueBuffer(u"nombre")'
0406             Member: end-gen
0406            Value: end-gen
0406            FunctionCall: expr: 'rellenarSubcuentasCli(codCliente, codSubcuenta, curCliente.valueBuffer(u"nombre"))'
0406           FunctionCall: end-gen
0406           Member: expr: 'self.iface.rellenarSubcuentasCli(codCliente, codSubcuenta, curCliente.valueBuffer(u"nombre"))'
0406         <-OpUnary: expr: 'self.iface.rellenarSubcuentasCli(codCliente, codSubcuenta, curCliente.valueBuffer(u"nombre"))'
0406        <--Value: expr: 'self.iface.rellenarSubcuentasCli(codCliente, codSubcuenta, curCliente.valueBuffer(u"nombre"))'
0406          Member: end-gen
0406         OpUnary: end-gen
0406        Value: end-gen
0406        If: line: 'if not self.iface.rellenarSubcuentasCli(codCliente, codSubcuenta, curCliente.valueBuffer(u"nombre")):'
0406      <-Source: line: 'if not self.iface.rellenarSubcuentasCli(codCliente, codSubcuenta, curCliente.valueBuffer(u"nombre")):'
0406     <--Switch: line: 'if not self.iface.rellenarSubcuentasCli(codCliente, codSubcuenta, curCliente.valueBuffer(u"nombre")):'
0406    <---Source: line: 'if not self.iface.rellenarSubcuentasCli(codCliente, codSubcuenta, curCliente.valueBuffer(u"nombre")):'
0406   <----Function: line: 'if not self.iface.rellenarSubcuentasCli(codCliente, codSubcuenta, curCliente.valueBuffer(u"nombre")):'
0406  <-----Source: line: 'if not self.iface.rellenarSubcuentasCli(codCliente, codSubcuenta, curCliente.valueBuffer(u"nombre")):'
0406 <------Class: line: 'if not self.iface.rellenarSubcuentasCli(codCliente, codSubcuenta, curCliente.valueBuffer(u"nombre")):'
0406<-------Source: line: 'if not self.iface.rellenarSubcuentasCli(codCliente, codSubcuenta, curCliente.valueBuffer(u"nombre")):'
0407        If: begin: 'block-if'
0407      <-Source: begin: 'block-if'
0407     <--Switch: begin: 'block-if'
0407    <---Source: begin: 'block-if'
0407   <----Function: begin: 'block-if'
0407  <-----Source: begin: 'block-if'
0407 <------Class: begin: 'block-if'
0407<-------Source: begin: 'block-if'
0407        Source: begin-gen
0407         InstructionFlow: begin-gen
0407          Value: begin-gen
0407           Identifier: begin-gen
0407            Identifier: expr: 'False'
0407          <-Value: expr: 'False'
0407           Identifier: end-gen
0407          Value: end-gen
0407          InstructionFlow: line: 'return False'
0407        <-Source: line: 'return False'
0407       <--If: line: 'return False'
0407      <---Source: line: 'return False'
0407     <----Switch: line: 'return False'
0407    <-----Source: line: 'return False'
0407   <------Function: line: 'return False'
0407  <-------Source: line: 'return False'
0407 <--------Class: line: 'return False'
0407<---------Source: line: 'return False'
0408         InstructionFlow: end-gen
0408        Source: end-gen
0408        If: end: 'block-if'
0408      <-Source: end: 'block-if'
0408     <--Switch: end: 'block-if'
0408    <---Source: end: 'block-if'
0408   <----Function: end: 'block-if'
0408  <-----Source: end: 'block-if'
0408 <------Class: end: 'block-if'
0408<-------Source: end: 'block-if'
0408       If: end-gen
0408       InstructionFlow: begin-gen
0408        InstructionFlow: break: 'break '
0408      <-Source: break: 'break '
0408     <--Switch: line: 's21_do_work = False # BREAK'
0408    <---Source: line: 's21_do_work = False # BREAK'
0408   <----Function: line: 's21_do_work = False # BREAK'
0408  <-----Source: line: 's21_do_work = False # BREAK'
0408 <------Class: line: 's21_do_work = False # BREAK'
0408<-------Source: line: 's21_do_work = False # BREAK'
0409       InstructionFlow: end-gen
0409      Source: end-gen
0409      Switch: end: 'block-if'
0409    <-Source: end: 'block-if'
0409   <--Function: end: 'block-if'
0409  <---Source: end: 'block-if'
0409 <----Class: end: 'block-if'
0409<-----Source: end: 'block-if'
0409     Switch: end-gen
0409     InstructionFlow: begin-gen
0409      Value: begin-gen
0409       Identifier: begin-gen
0409        Identifier: expr: 'True'
0409      <-Value: expr: 'True'
0409       Identifier: end-gen
0409      Value: end-gen
0409      InstructionFlow: line: 'return True'
0409    <-Source: line: 'return True'
0409   <--Function: line: 'return True'
0409  <---Source: line: 'return True'
0409 <----Class: line: 'return True'
0409<-----Source: line: 'return True'
0410     InstructionFlow: end-gen
0410    Source: end-gen
0410    Function: end: 'block-def-interna_afterCommit_clientes'
0410  <-Source: end: 'block-def-interna_afterCommit_clientes'
0410 <--Class: end: 'block-def-interna_afterCommit_clientes'
0410<---Source: end: 'block-def-interna_afterCommit_clientes'
0411   Function: end-gen
0411   Function: begin-gen
0411    Variable: begin-gen
0411     Variable: expr: 'curProveedor'
0411    Variable: end-gen
0411    Function: line: 'def interna_afterCommit_proveedores(self, curProveedor = None):'
0411  <-Source: line: 'def interna_afterCommit_proveedores(self, curProveedor = None):'
0411 <--Class: line: 'def interna_afterCommit_proveedores(self, curProveedor = None):'
0411<---Source: line: 'def interna_afterCommit_proveedores(self, curProveedor = None):'
0412    Function: begin: 'block-def-interna_afterCommit_proveedores'
0412  <-Source: begin: 'block-def-interna_afterCommit_proveedores'
0412 <--Class: begin: 'block-def-interna_afterCommit_proveedores'
0412<---Source: begin: 'block-def-interna_afterCommit_proveedores'
0412    Source: begin-gen
0412     DeclarationBlock: begin-gen
0412      Variable: begin-gen
0412       Variable: expr: 'util'
0412       Variable: expr: '='
0412       Value: begin-gen
0412        New: begin-gen
0412         FunctionCall: begin-gen
0412          FunctionCall: expr: 'FLUtil()'
0412        <-New: expr: 'qsatype.FLUtil()'
0412       <--Value: expr: 'qsatype.FLUtil()'
0412      <---Variable: expr: 'qsatype.FLUtil()'
0412         FunctionCall: end-gen
0412        New: end-gen
0412       Value: end-gen
0412      Variable: end-gen
0412      DeclarationBlock: line: 'util = qsatype.FLUtil()'
0412    <-Source: line: 'util = qsatype.FLUtil()'
0412   <--Function: line: 'util = qsatype.FLUtil()'
0412  <---Source: line: 'util = qsatype.FLUtil()'
0412 <----Class: line: 'util = qsatype.FLUtil()'
0412<-----Source: line: 'util = qsatype.FLUtil()'
0413     DeclarationBlock: end-gen
0413     If: begin-gen
0413      Value: begin-gen
0413       OpUnary: begin-gen
0413        OpUnary: expr: 'not'
0413      <-Value: expr: 'not'
0413        Member: begin-gen
0413         Identifier: begin-gen
0413          Identifier: expr: 'sys'
0413         Identifier: end-gen
0413         FunctionCall: begin-gen
0413          Value: begin-gen
0413           Constant: begin-gen
0413            Constant: ctype: 'String' -> 'flcontppal'
0413            Constant: expr: 'u"flcontppal"'
0413          <-Value: expr: 'u"flcontppal"'
0413           Constant: end-gen
0413          Value: end-gen
0413          FunctionCall: expr: 'isLoadedModule(u"flcontppal")'
0413         FunctionCall: end-gen
0413         Member: expr: 'sys.isLoadedModule(u"flcontppal")'
0413       <-OpUnary: expr: 'sys.isLoadedModule(u"flcontppal")'
0413      <--Value: expr: 'sys.isLoadedModule(u"flcontppal")'
0413        Member: end-gen
0413       OpUnary: end-gen
0413      Value: end-gen
0413      If: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0413    <-Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0413   <--Function: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0413  <---Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0413 <----Class: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0413<-----Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0414      If: begin: 'block-if'
0414    <-Source: begin: 'block-if'
0414   <--Function: begin: 'block-if'
0414  <---Source: begin: 'block-if'
0414 <----Class: begin: 'block-if'
0414<-----Source: begin: 'block-if'
0414      Source: begin-gen
0414       InstructionFlow: begin-gen
0414        Value: begin-gen
0414         Identifier: begin-gen
0414          Identifier: expr: 'True'
0414        <-Value: expr: 'True'
0414         Identifier: end-gen
0414        Value: end-gen
0414        InstructionFlow: line: 'return True'
0414      <-Source: line: 'return True'
0414     <--If: line: 'return True'
0414    <---Source: line: 'return True'
0414   <----Function: line: 'return True'
0414  <-----Source: line: 'return True'
0414 <------Class: line: 'return True'
0414<-------Source: line: 'return True'
0415       InstructionFlow: end-gen
0415      Source: end-gen
0415      If: end: 'block-if'
0415    <-Source: end: 'block-if'
0415   <--Function: end: 'block-if'
0415  <---Source: end: 'block-if'
0415 <----Class: end: 'block-if'
0415<-----Source: end: 'block-if'
0415     If: end-gen
0415     DeclarationBlock: begin-gen
0415      Variable: begin-gen
0415       Variable: expr: 'codSubcuenta'
0415       Variable: expr: '='
0415       Value: begin-gen
0415        Member: begin-gen
0415         Identifier: begin-gen
0415          Identifier: expr: 'curProveedor'
0415         Identifier: end-gen
0415         FunctionCall: begin-gen
0415          Value: begin-gen
0415           Constant: begin-gen
0415            Constant: ctype: 'String' -> 'codsubcuenta'
0415            Constant: expr: 'u"codsubcuenta"'
0415          <-Value: expr: 'u"codsubcuenta"'
0415           Constant: end-gen
0415          Value: end-gen
0415          FunctionCall: expr: 'valueBuffer(u"codsubcuenta")'
0415         FunctionCall: end-gen
0415         Member: expr: 'curProveedor.valueBuffer(u"codsubcuenta")'
0415       <-Value: expr: 'curProveedor.valueBuffer(u"codsubcuenta")'
0415      <--Variable: expr: 'curProveedor.valueBuffer(u"codsubcuenta")'
0415        Member: end-gen
0415       Value: end-gen
0415      Variable: end-gen
0415      DeclarationBlock: line: 'codSubcuenta = curProveedor.valueBuffer(u"codsubcuenta")'
0415    <-Source: line: 'codSubcuenta = curProveedor.valueBuffer(u"codsubcuenta")'
0415   <--Function: line: 'codSubcuenta = curProveedor.valueBuffer(u"codsubcuenta")'
0415  <---Source: line: 'codSubcuenta = curProveedor.valueBuffer(u"codsubcuenta")'
0415 <----Class: line: 'codSubcuenta = curProveedor.valueBuffer(u"codsubcuenta")'
0415<-----Source: line: 'codSubcuenta = curProveedor.valueBuffer(u"codsubcuenta")'
0416     DeclarationBlock: end-gen
0416     DeclarationBlock: begin-gen
0416      Variable: begin-gen
0416       Variable: expr: 'idSubcuenta'
0416       Variable: expr: '='
0416       Value: begin-gen
0416        FunctionCall: begin-gen
0416         Value: begin-gen
0416          Member: begin-gen
0416           Identifier: begin-gen
0416            Identifier: expr: 'curProveedor'
0416           Identifier: end-gen
0416           FunctionCall: begin-gen
0416            Value: begin-gen
0416             Constant: begin-gen
0416              Constant: ctype: 'String' -> 'idsubcuenta'
0416              Constant: expr: 'u"idsubcuenta"'
0416            <-Value: expr: 'u"idsubcuenta"'
0416             Constant: end-gen
0416            Value: end-gen
0416            FunctionCall: expr: 'valueBuffer(u"idsubcuenta")'
0416           FunctionCall: end-gen
0416           Member: expr: 'curProveedor.valueBuffer(u"idsubcuenta")'
0416         <-Value: expr: 'curProveedor.valueBuffer(u"idsubcuenta")'
0416          Member: end-gen
0416         Value: end-gen
0416         FunctionCall: expr: 'parseFloat(curProveedor.valueBuffer(u"idsubcuenta"))'
0416       <-Value: expr: 'parseFloat(curProveedor.valueBuffer(u"idsubcuenta"))'
0416      <--Variable: expr: 'parseFloat(curProveedor.valueBuffer(u"idsubcuenta"))'
0416        FunctionCall: end-gen
0416       Value: end-gen
0416      Variable: end-gen
0416      DeclarationBlock: line: 'idSubcuenta = parseFloat(curProveedor.valueBuffer(u"idsubcuenta"))'
0416    <-Source: line: 'idSubcuenta = parseFloat(curProveedor.valueBuffer(u"idsubcuenta"))'
0416   <--Function: line: 'idSubcuenta = parseFloat(curProveedor.valueBuffer(u"idsubcuenta"))'
0416  <---Source: line: 'idSubcuenta = parseFloat(curProveedor.valueBuffer(u"idsubcuenta"))'
0416 <----Class: line: 'idSubcuenta = parseFloat(curProveedor.valueBuffer(u"idsubcuenta"))'
0416<-----Source: line: 'idSubcuenta = parseFloat(curProveedor.valueBuffer(u"idsubcuenta"))'
0417     DeclarationBlock: end-gen
0417     DeclarationBlock: begin-gen
0417      Variable: begin-gen
0417       Variable: expr: 'codProveedor'
0417       Variable: expr: '='
0417       Value: begin-gen
0417        Member: begin-gen
0417         Identifier: begin-gen
0417          Identifier: expr: 'curProveedor'
0417         Identifier: end-gen
0417         FunctionCall: begin-gen
0417          Value: begin-gen
0417           Constant: begin-gen
0417            Constant: ctype: 'String' -> 'codproveedor'
0417            Constant: expr: 'u"codproveedor"'
0417          <-Value: expr: 'u"codproveedor"'
0417           Constant: end-gen
0417          Value: end-gen
0417          FunctionCall: expr: 'valueBuffer(u"codproveedor")'
0417         FunctionCall: end-gen
0417         Member: expr: 'curProveedor.valueBuffer(u"codproveedor")'
0417       <-Value: expr: 'curProveedor.valueBuffer(u"codproveedor")'
0417      <--Variable: expr: 'curProveedor.valueBuffer(u"codproveedor")'
0417        Member: end-gen
0417       Value: end-gen
0417      Variable: end-gen
0417      DeclarationBlock: line: 'codProveedor = curProveedor.valueBuffer(u"codproveedor")'
0417    <-Source: line: 'codProveedor = curProveedor.valueBuffer(u"codproveedor")'
0417   <--Function: line: 'codProveedor = curProveedor.valueBuffer(u"codproveedor")'
0417  <---Source: line: 'codProveedor = curProveedor.valueBuffer(u"codproveedor")'
0417 <----Class: line: 'codProveedor = curProveedor.valueBuffer(u"codproveedor")'
0417<-----Source: line: 'codProveedor = curProveedor.valueBuffer(u"codproveedor")'
0418     DeclarationBlock: end-gen
0418     DeclarationBlock: begin-gen
0418      Variable: begin-gen
0418       Variable: expr: 'idSubcuentaPrevia'
0418       Variable: expr: '='
0418       Value: begin-gen
0418        FunctionCall: begin-gen
0418         Value: begin-gen
0418          Member: begin-gen
0418           Identifier: begin-gen
0418            Identifier: expr: 'curProveedor'
0418           Identifier: end-gen
0418           FunctionCall: begin-gen
0418            Value: begin-gen
0418             Constant: begin-gen
0418              Constant: ctype: 'String' -> 'idsubcuenta'
0418              Constant: expr: 'u"idsubcuenta"'
0418            <-Value: expr: 'u"idsubcuenta"'
0418             Constant: end-gen
0418            Value: end-gen
0418            FunctionCall: expr: 'valueBufferCopy(u"idsubcuenta")'
0418           FunctionCall: end-gen
0418           Member: expr: 'curProveedor.valueBufferCopy(u"idsubcuenta")'
0418         <-Value: expr: 'curProveedor.valueBufferCopy(u"idsubcuenta")'
0418          Member: end-gen
0418         Value: end-gen
0418         FunctionCall: expr: 'parseFloat(curProveedor.valueBufferCopy(u"idsubcuenta"))'
0418       <-Value: expr: 'parseFloat(curProveedor.valueBufferCopy(u"idsubcuenta"))'
0418      <--Variable: expr: 'parseFloat(curProveedor.valueBufferCopy(u"idsubcuenta"))'
0418        FunctionCall: end-gen
0418       Value: end-gen
0418      Variable: end-gen
0418      DeclarationBlock: line: 'idSubcuentaPrevia = parseFloat(curProveedor.valueBufferCopy(u"idsubcuenta"))'
0418    <-Source: line: 'idSubcuentaPrevia = parseFloat(curProveedor.valueBufferCopy(u"idsubcuenta"))'
0418   <--Function: line: 'idSubcuentaPrevia = parseFloat(curProveedor.valueBufferCopy(u"idsubcuenta"))'
0418  <---Source: line: 'idSubcuentaPrevia = parseFloat(curProveedor.valueBufferCopy(u"idsubcuenta"))'
0418 <----Class: line: 'idSubcuentaPrevia = parseFloat(curProveedor.valueBufferCopy(u"idsubcuenta"))'
0418<-----Source: line: 'idSubcuentaPrevia = parseFloat(curProveedor.valueBufferCopy(u"idsubcuenta"))'
0419     DeclarationBlock: end-gen
0419     Switch: begin-gen
0419      Value: begin-gen
0419       Member: begin-gen
0419        Identifier: begin-gen
0419         Identifier: expr: 'curProveedor'
0419        Identifier: end-gen
0419        FunctionCall: begin-gen
0419         FunctionCall: expr: 'modeAccess()'
0419        FunctionCall: end-gen
0419        Member: expr: 'curProveedor.modeAccess()'
0419      <-Value: expr: 'curProveedor.modeAccess()'
0419       Member: end-gen
0419      Value: end-gen
0419      Switch: line: 's9f_when = curProveedor.modeAccess()'
0419    <-Source: line: 's9f_when = curProveedor.modeAccess()'
0419   <--Function: line: 's9f_when = curProveedor.modeAccess()'
0419  <---Source: line: 's9f_when = curProveedor.modeAccess()'
0419 <----Class: line: 's9f_when = curProveedor.modeAccess()'
0419<-----Source: line: 's9f_when = curProveedor.modeAccess()'
0420      Switch: line: 's9f_do_work,s9f_work_done = False,False'
0420    <-Source: line: 's9f_do_work,s9f_work_done = False,False'
0420   <--Function: line: 's9f_do_work,s9f_work_done = False,False'
0420  <---Source: line: 's9f_do_work,s9f_work_done = False,False'
0420 <----Class: line: 's9f_do_work,s9f_work_done = False,False'
0420<-----Source: line: 's9f_do_work,s9f_work_done = False,False'
0421      Value: begin-gen
0421       Member: begin-gen
0421        Identifier: begin-gen
0421         Identifier: expr: 'curProveedor'
0421        Identifier: end-gen
0421        Identifier: begin-gen
0421         Identifier: expr: 'Insert'
0421        Identifier: end-gen
0421        Member: expr: 'curProveedor.Insert'
0421      <-Value: expr: 'curProveedor.Insert'
0421       Member: end-gen
0421      Value: end-gen
0421      Switch: line: 'if s9f_when == curProveedor.Insert: s9f_do_work,s9f_work_done = True,True'
0421    <-Source: line: 'if s9f_when == curProveedor.Insert: s9f_do_work,s9f_work_done = True,True'
0421   <--Function: line: 'if s9f_when == curProveedor.Insert: s9f_do_work,s9f_work_done = True,True'
0421  <---Source: line: 'if s9f_when == curProveedor.Insert: s9f_do_work,s9f_work_done = True,True'
0421 <----Class: line: 'if s9f_when == curProveedor.Insert: s9f_do_work,s9f_work_done = True,True'
0421<-----Source: line: 'if s9f_when == curProveedor.Insert: s9f_do_work,s9f_work_done = True,True'
0422      Switch: line: 'if s9f_do_work:'
0422    <-Source: line: 'if s9f_do_work:'
0422   <--Function: line: 'if s9f_do_work:'
0422  <---Source: line: 'if s9f_do_work:'
0422 <----Class: line: 'if s9f_do_work:'
0422<-----Source: line: 'if s9f_do_work:'
0423      Switch: begin: 'block-if'
0423    <-Source: begin: 'block-if'
0423   <--Function: begin: 'block-if'
0423  <---Source: begin: 'block-if'
0423 <----Class: begin: 'block-if'
0423<-----Source: begin: 'block-if'
0423      Source: begin-gen
0423       If: begin-gen
0423        Value: begin-gen
0423         OpUnary: begin-gen
0423          OpUnary: expr: 'not'
0423        <-Value: expr: 'not'
0423          Member: begin-gen
0423           Identifier: begin-gen
0423            Identifier: expr: 'self'
0423           Identifier: end-gen
0423           Identifier: begin-gen
0423            Identifier: expr: 'iface'
0423           Identifier: end-gen
0423           FunctionCall: begin-gen
0423            Value: begin-gen
0423             Identifier: begin-gen
0423              Identifier: expr: 'codProveedor'
0423            <-Value: expr: 'codProveedor'
0423             Identifier: end-gen
0423            Value: end-gen
0423            Value: begin-gen
0423             Identifier: begin-gen
0423              Identifier: expr: 'codSubcuenta'
0423            <-Value: expr: 'codSubcuenta'
0423             Identifier: end-gen
0423            Value: end-gen
0423            Value: begin-gen
0423             Member: begin-gen
0423              Identifier: begin-gen
0423               Identifier: expr: 'curProveedor'
0423              Identifier: end-gen
0423              FunctionCall: begin-gen
0423               Value: begin-gen
0423                Constant: begin-gen
0423                 Constant: ctype: 'String' -> 'nombre'
0423                 Constant: expr: 'u"nombre"'
0423               <-Value: expr: 'u"nombre"'
0423                Constant: end-gen
0423               Value: end-gen
0423               FunctionCall: expr: 'valueBuffer(u"nombre")'
0423              FunctionCall: end-gen
0423              Member: expr: 'curProveedor.valueBuffer(u"nombre")'
0423            <-Value: expr: 'curProveedor.valueBuffer(u"nombre")'
0423             Member: end-gen
0423            Value: end-gen
0423            FunctionCall: expr: 'rellenarSubcuentasProv(codProveedor, codSubcuenta, curProveedor.valueBuffer(u"nombre"))'
0423           FunctionCall: end-gen
0423           Member: expr: 'self.iface.rellenarSubcuentasProv(codProveedor, codSubcuenta, curProveedor.valueBuffer(u"nombre"))'
0423         <-OpUnary: expr: 'self.iface.rellenarSubcuentasProv(codProveedor, codSubcuenta, curProveedor.valueBuffer(u"nombre"))'
0423        <--Value: expr: 'self.iface.rellenarSubcuentasProv(codProveedor, codSubcuenta, curProveedor.valueBuffer(u"nombre"))'
0423          Member: end-gen
0423         OpUnary: end-gen
0423        Value: end-gen
0423        If: line: 'if not self.iface.rellenarSubcuentasProv(codProveedor, codSubcuenta, curProveedor.valueBuffer(u"nombre")):'
0423      <-Source: line: 'if not self.iface.rellenarSubcuentasProv(codProveedor, codSubcuenta, curProveedor.valueBuffer(u"nombre")):'
0423     <--Switch: line: 'if not self.iface.rellenarSubcuentasProv(codProveedor, codSubcuenta, curProveedor.valueBuffer(u"nombre")):'
0423    <---Source: line: 'if not self.iface.rellenarSubcuentasProv(codProveedor, codSubcuenta, curProveedor.valueBuffer(u"nombre")):'
0423   <----Function: line: 'if not self.iface.rellenarSubcuentasProv(codProveedor, codSubcuenta, curProveedor.valueBuffer(u"nombre")):'
0423  <-----Source: line: 'if not self.iface.rellenarSubcuentasProv(codProveedor, codSubcuenta, curProveedor.valueBuffer(u"nombre")):'
0423 <------Class: line: 'if not self.iface.rellenarSubcuentasProv(codProveedor, codSubcuenta, curProveedor.valueBuffer(u"nombre")):'
0423<-------Source: line: 'if not self.iface.rellenarSubcuentasProv(codProveedor, codSubcuenta, curProveedor.valueBuffer(u"nombre")):'
0424        If: begin: 'block-if'
0424      <-Source: begin: 'block-if'
0424     <--Switch: begin: 'block-if'
0424    <---Source: begin: 'block-if'
0424   <----Function: begin: 'block-if'
0424  <-----Source: begin: 'block-if'
0424 <------Class: begin: 'block-if'
0424<-------Source: begin: 'block-if'
0424        Source: begin-gen
0424         InstructionFlow: begin-gen
0424          Value: begin-gen
0424           Identifier: begin-gen
0424            Identifier: expr: 'False'
0424          <-Value: expr: 'False'
0424           Identifier: end-gen
0424          Value: end-gen
0424          InstructionFlow: line: 'return False'
0424        <-Source: line: 'return False'
0424       <--If: line: 'return False'
0424      <---Source: line: 'return False'
0424     <----Switch: line: 'return False'
0424    <-----Source: line: 'return False'
0424   <------Function: line: 'return False'
0424  <-------Source: line: 'return False'
0424 <--------Class: line: 'return False'
0424<---------Source: line: 'return False'
0425         InstructionFlow: end-gen
0425        Source: end-gen
0425        If: end: 'block-if'
0425      <-Source: end: 'block-if'
0425     <--Switch: end: 'block-if'
0425    <---Source: end: 'block-if'
0425   <----Function: end: 'block-if'
0425  <-----Source: end: 'block-if'
0425 <------Class: end: 'block-if'
0425<-------Source: end: 'block-if'
0425       If: end-gen
0425       InstructionFlow: begin-gen
0425        InstructionFlow: break: 'break '
0425      <-Source: break: 'break '
0425     <--Switch: line: 's9f_do_work = False # BREAK'
0425    <---Source: line: 's9f_do_work = False # BREAK'
0425   <----Function: line: 's9f_do_work = False # BREAK'
0425  <-----Source: line: 's9f_do_work = False # BREAK'
0425 <------Class: line: 's9f_do_work = False # BREAK'
0425<-------Source: line: 's9f_do_work = False # BREAK'
0426       InstructionFlow: end-gen
0426      Source: end-gen
0426      Switch: end: 'block-if'
0426    <-Source: end: 'block-if'
0426   <--Function: end: 'block-if'
0426  <---Source: end: 'block-if'
0426 <----Class: end: 'block-if'
0426<-----Source: end: 'block-if'
0426     Switch: end-gen
0426     InstructionFlow: begin-gen
0426      Value: begin-gen
0426       Identifier: begin-gen
0426        Identifier: expr: 'True'
0426      <-Value: expr: 'True'
0426       Identifier: end-gen
0426      Value: end-gen
0426      InstructionFlow: line: 'return True'
0426    <-Source: line: 'return True'
0426   <--Function: line: 'return True'
0426  <---Source: line: 'return True'
0426 <----Class: line: 'return True'
0426<-----Source: line: 'return True'
0427     InstructionFlow: end-gen
0427    Source: end-gen
0427    Function: end: 'block-def-interna_afterCommit_proveedores'
0427  <-Source: end: 'block-def-interna_afterCommit_proveedores'
0427 <--Class: end: 'block-def-interna_afterCommit_proveedores'
0427<---Source: end: 'block-def-interna_afterCommit_proveedores'
0428   Function: end-gen
0428   Function: begin-gen
0428    Variable: begin-gen
0428     Variable: expr: 'curProveedor'
0428    Variable: end-gen
0428    Function: line: 'def interna_beforeCommit_proveedores(self, curProveedor = None):'
0428  <-Source: line: 'def interna_beforeCommit_proveedores(self, curProveedor = None):'
0428 <--Class: line: 'def interna_beforeCommit_proveedores(self, curProveedor = None):'
0428<---Source: line: 'def interna_beforeCommit_proveedores(self, curProveedor = None):'
0429    Function: begin: 'block-def-interna_beforeCommit_proveedores'
0429  <-Source: begin: 'block-def-interna_beforeCommit_proveedores'
0429 <--Class: begin: 'block-def-interna_beforeCommit_proveedores'
0429<---Source: begin: 'block-def-interna_beforeCommit_proveedores'
0429    Source: begin-gen
0429     DeclarationBlock: begin-gen
0429      Variable: begin-gen
0429       Variable: expr: 'util'
0429       Variable: expr: '='
0429       Value: begin-gen
0429        New: begin-gen
0429         FunctionCall: begin-gen
0429          FunctionCall: expr: 'FLUtil()'
0429        <-New: expr: 'qsatype.FLUtil()'
0429       <--Value: expr: 'qsatype.FLUtil()'
0429      <---Variable: expr: 'qsatype.FLUtil()'
0429         FunctionCall: end-gen
0429        New: end-gen
0429       Value: end-gen
0429      Variable: end-gen
0429      DeclarationBlock: line: 'util = qsatype.FLUtil()'
0429    <-Source: line: 'util = qsatype.FLUtil()'
0429   <--Function: line: 'util = qsatype.FLUtil()'
0429  <---Source: line: 'util = qsatype.FLUtil()'
0429 <----Class: line: 'util = qsatype.FLUtil()'
0429<-----Source: line: 'util = qsatype.FLUtil()'
0430     DeclarationBlock: end-gen
0430     If: begin-gen
0430      Value: begin-gen
0430       OpUnary: begin-gen
0430        OpUnary: expr: 'not'
0430      <-Value: expr: 'not'
0430        Member: begin-gen
0430         Identifier: begin-gen
0430          Identifier: expr: 'sys'
0430         Identifier: end-gen
0430         FunctionCall: begin-gen
0430          Value: begin-gen
0430           Constant: begin-gen
0430            Constant: ctype: 'String' -> 'flcontppal'
0430            Constant: expr: 'u"flcontppal"'
0430          <-Value: expr: 'u"flcontppal"'
0430           Constant: end-gen
0430          Value: end-gen
0430          FunctionCall: expr: 'isLoadedModule(u"flcontppal")'
0430         FunctionCall: end-gen
0430         Member: expr: 'sys.isLoadedModule(u"flcontppal")'
0430       <-OpUnary: expr: 'sys.isLoadedModule(u"flcontppal")'
0430      <--Value: expr: 'sys.isLoadedModule(u"flcontppal")'
0430        Member: end-gen
0430       OpUnary: end-gen
0430      Value: end-gen
0430      If: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0430    <-Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0430   <--Function: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0430  <---Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0430 <----Class: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0430<-----Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0431      If: begin: 'block-if'
0431    <-Source: begin: 'block-if'
0431   <--Function: begin: 'block-if'
0431  <---Source: begin: 'block-if'
0431 <----Class: begin: 'block-if'
0431<-----Source: begin: 'block-if'
0431      Source: begin-gen
0431       InstructionFlow: begin-gen
0431        Value: begin-gen
0431         Identifier: begin-gen
0431          Identifier: expr: 'True'
0431        <-Value: expr: 'True'
0431         Identifier: end-gen
0431        Value: end-gen
0431        InstructionFlow: line: 'return True'
0431      <-Source: line: 'return True'
0431     <--If: line: 'return True'
0431    <---Source: line: 'return True'
0431   <----Function: line: 'return True'
0431  <-----Source: line: 'return True'
0431 <------Class: line: 'return True'
0431<-------Source: line: 'return True'
0432       InstructionFlow: end-gen
0432      Source: end-gen
0432      If: end: 'block-if'
0432    <-Source: end: 'block-if'
0432   <--Function: end: 'block-if'
0432  <---Source: end: 'block-if'
0432 <----Class: end: 'block-if'
0432<-----Source: end: 'block-if'
0432     If: end-gen
0432     Switch: begin-gen
0432      Value: begin-gen
0432       Member: begin-gen
0432        Identifier: begin-gen
0432         Identifier: expr: 'curProveedor'
0432        Identifier: end-gen
0432        FunctionCall: begin-gen
0432         FunctionCall: expr: 'modeAccess()'
0432        FunctionCall: end-gen
0432        Member: expr: 'curProveedor.modeAccess()'
0432      <-Value: expr: 'curProveedor.modeAccess()'
0432       Member: end-gen
0432      Value: end-gen
0432      Switch: line: 's77_when = curProveedor.modeAccess()'
0432    <-Source: line: 's77_when = curProveedor.modeAccess()'
0432   <--Function: line: 's77_when = curProveedor.modeAccess()'
0432  <---Source: line: 's77_when = curProveedor.modeAccess()'
0432 <----Class: line: 's77_when = curProveedor.modeAccess()'
0432<-----Source: line: 's77_when = curProveedor.modeAccess()'
0433      Switch: line: 's77_do_work,s77_work_done = False,False'
0433    <-Source: line: 's77_do_work,s77_work_done = False,False'
0433   <--Function: line: 's77_do_work,s77_work_done = False,False'
0433  <---Source: line: 's77_do_work,s77_work_done = False,False'
0433 <----Class: line: 's77_do_work,s77_work_done = False,False'
0433<-----Source: line: 's77_do_work,s77_work_done = False,False'
0434      Value: begin-gen
0434       Member: begin-gen
0434        Identifier: begin-gen
0434         Identifier: expr: 'curProveedor'
0434        Identifier: end-gen
0434        Identifier: begin-gen
0434         Identifier: expr: 'Del'
0434        Identifier: end-gen
0434        Member: expr: 'curProveedor.Del'
0434      <-Value: expr: 'curProveedor.Del'
0434       Member: end-gen
0434      Value: end-gen
0434      Switch: line: 'if s77_when == curProveedor.Del: s77_do_work,s77_work_done = True,True'
0434    <-Source: line: 'if s77_when == curProveedor.Del: s77_do_work,s77_work_done = True,True'
0434   <--Function: line: 'if s77_when == curProveedor.Del: s77_do_work,s77_work_done = True,True'
0434  <---Source: line: 'if s77_when == curProveedor.Del: s77_do_work,s77_work_done = True,True'
0434 <----Class: line: 'if s77_when == curProveedor.Del: s77_do_work,s77_work_done = True,True'
0434<-----Source: line: 'if s77_when == curProveedor.Del: s77_do_work,s77_work_done = True,True'
0435      Switch: line: 'if s77_do_work:'
0435    <-Source: line: 'if s77_do_work:'
0435   <--Function: line: 'if s77_do_work:'
0435  <---Source: line: 'if s77_do_work:'
0435 <----Class: line: 'if s77_do_work:'
0435<-----Source: line: 'if s77_do_work:'
0436      Switch: begin: 'block-if'
0436    <-Source: begin: 'block-if'
0436   <--Function: begin: 'block-if'
0436  <---Source: begin: 'block-if'
0436 <----Class: begin: 'block-if'
0436<-----Source: begin: 'block-if'
0436      Source: begin-gen
0436       DeclarationBlock: begin-gen
0436        Variable: begin-gen
0436         Variable: expr: 'qrySubcuentas'
0436         Variable: expr: '='
0436         Value: begin-gen
0436          New: begin-gen
0436           FunctionCall: begin-gen
0436            FunctionCall: expr: 'FLSqlQuery()'
0436          <-New: expr: 'qsatype.FLSqlQuery()'
0436         <--Value: expr: 'qsatype.FLSqlQuery()'
0436        <---Variable: expr: 'qsatype.FLSqlQuery()'
0436           FunctionCall: end-gen
0436          New: end-gen
0436         Value: end-gen
0436        Variable: end-gen
0436        DeclarationBlock: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0436      <-Source: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0436     <--Switch: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0436    <---Source: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0436   <----Function: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0436  <-----Source: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0436 <------Class: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0436<-------Source: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0437       DeclarationBlock: end-gen
0437       InstructionCall: begin-gen
0437        Member: begin-gen
0437         Identifier: begin-gen
0437          Identifier: expr: 'qrySubcuentas'
0437         Identifier: end-gen
0437         FunctionCall: begin-gen
0437          Value: begin-gen
0437           Constant: begin-gen
0437            Constant: ctype: 'String' -> 'co_subcuentasprov,co_subcuentas'
0437            Constant: expr: 'u"co_subcuentasprov,co_subcuentas"'
0437          <-Value: expr: 'u"co_subcuentasprov,co_subcuentas"'
0437           Constant: end-gen
0437          Value: end-gen
0437          FunctionCall: expr: 'setTablesList(u"co_subcuentasprov,co_subcuentas")'
0437         FunctionCall: end-gen
0437         Member: expr: 'qrySubcuentas.setTablesList(u"co_subcuentasprov,co_subcuentas")'
0437        Member: end-gen
0437        InstructionCall: line: 'qrySubcuentas.setTablesList(u"co_subcuentasprov,co_subcuentas")'
0437      <-Source: line: 'qrySubcuentas.setTablesList(u"co_subcuentasprov,co_subcuentas")'
0437     <--Switch: line: 'qrySubcuentas.setTablesList(u"co_subcuentasprov,co_subcuentas")'
0437    <---Source: line: 'qrySubcuentas.setTablesList(u"co_subcuentasprov,co_subcuentas")'
0437   <----Function: line: 'qrySubcuentas.setTablesList(u"co_subcuentasprov,co_subcuentas")'
0437  <-----Source: line: 'qrySubcuentas.setTablesList(u"co_subcuentasprov,co_subcuentas")'
0437 <------Class: line: 'qrySubcuentas.setTablesList(u"co_subcuentasprov,co_subcuentas")'
0437<-------Source: line: 'qrySubcuentas.setTablesList(u"co_subcuentasprov,co_subcuentas")'
0438       InstructionCall: end-gen
0438       InstructionCall: begin-gen
0438        Member: begin-gen
0438         Identifier: begin-gen
0438          Identifier: expr: 'qrySubcuentas'
0438         Identifier: end-gen
0438         FunctionCall: begin-gen
0438          Value: begin-gen
0438           Constant: begin-gen
0438            Constant: ctype: 'String' -> 's.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta'
0438            Constant: expr: 'u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta"'
0438          <-Value: expr: 'u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta"'
0438           Constant: end-gen
0438          Value: end-gen
0438          FunctionCall: expr: 'setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0438         FunctionCall: end-gen
0438         Member: expr: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0438        Member: end-gen
0438        InstructionCall: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0438      <-Source: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0438     <--Switch: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0438    <---Source: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0438   <----Function: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0438  <-----Source: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0438 <------Class: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0438<-------Source: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0439       InstructionCall: end-gen
0439       InstructionCall: begin-gen
0439        Member: begin-gen
0439         Identifier: begin-gen
0439          Identifier: expr: 'qrySubcuentas'
0439         Identifier: end-gen
0439         FunctionCall: begin-gen
0439          Value: begin-gen
0439           Constant: begin-gen
0439            Constant: ctype: 'String' -> 'co_subcuentasprov sp INNER JOIN co_subcuentas s ON sp.idsubcuenta = s.idsubcuenta'
0439            Constant: expr: 'u"co_subcuentasprov sp INNER JOIN co_subcuentas s ON sp.idsubcuenta = s.idsubcuenta"'
0439          <-Value: expr: 'u"co_subcuentasprov sp INNER JOIN co_subcuentas s ON sp.idsubcuenta = s.idsubcuenta"'
0439           Constant: end-gen
0439          Value: end-gen
0439          FunctionCall: expr: 'setFrom(u"co_subcuentasprov sp INNER JOIN co_subcuentas s ON sp.idsubcuenta = s.idsubcuenta")'
0439         FunctionCall: end-gen
0439         Member: expr: 'qrySubcuentas.setFrom(u"co_subcuentasprov sp INNER JOIN co_subcuentas s ON sp.idsubcuenta = s.idsubcuenta")'
0439        Member: end-gen
0439        InstructionCall: line: 'qrySubcuentas.setFrom(u"co_subcuentasprov sp INNER JOIN co_subcuentas s ON sp.idsubcuenta = s.idsubcuenta")'
0439      <-Source: line: 'qrySubcuentas.setFrom(u"co_subcuentasprov sp INNER JOIN co_subcuentas s ON sp.idsubcuenta = s.idsubcuenta")'
0439     <--Switch: line: 'qrySubcuentas.setFrom(u"co_subcuentasprov sp INNER JOIN co_subcuentas s ON sp.idsubcuenta = s.idsubcuenta")'
0439    <---Source: line: 'qrySubcuentas.setFrom(u"co_subcuentasprov sp INNER JOIN co_subcuentas s ON sp.idsubcuenta = s.idsubcuenta")'
0439   <----Function: line: 'qrySubcuentas.setFrom(u"co_subcuentasprov sp INNER JOIN co_subcuentas s ON sp.idsubcuenta = s.idsubcuenta")'
0439  <-----Source: line: 'qrySubcuentas.setFrom(u"co_subcuentasprov sp INNER JOIN co_subcuentas s ON sp.idsubcuenta = s.idsubcuenta")'
0439 <------Class: line: 'qrySubcuentas.setFrom(u"co_subcuentasprov sp INNER JOIN co_subcuentas s ON sp.idsubcuenta = s.idsubcuenta")'
0439<-------Source: line: 'qrySubcuentas.setFrom(u"co_subcuentasprov sp INNER JOIN co_subcuentas s ON sp.idsubcuenta = s.idsubcuenta")'
0440       InstructionCall: end-gen
0440       InstructionCall: begin-gen
0440        Member: begin-gen
0440         Identifier: begin-gen
0440          Identifier: expr: 'qrySubcuentas'
0440         Identifier: end-gen
0440         FunctionCall: begin-gen
0440          Expression: begin-gen
0440           Expression: expr: 'ustr('
0440           Constant: begin-gen
0440            Constant: ctype: 'String' -> "sp.codproveedor = '"
0440            Constant: expr: 'u"sp.codproveedor = \'"'
0440          <-Expression: expr: 'u"sp.codproveedor = \'"'
0440           Constant: end-gen
0440           Expression: expr: ','
0440           Member: begin-gen
0440            Identifier: begin-gen
0440             Identifier: expr: 'curProveedor'
0440            Identifier: end-gen
0440            FunctionCall: begin-gen
0440             Value: begin-gen
0440              Constant: begin-gen
0440               Constant: ctype: 'String' -> 'codproveedor'
0440               Constant: expr: 'u"codproveedor"'
0440             <-Value: expr: 'u"codproveedor"'
0440              Constant: end-gen
0440             Value: end-gen
0440             FunctionCall: expr: 'valueBuffer(u"codproveedor")'
0440            FunctionCall: end-gen
0440            Member: expr: 'curProveedor.valueBuffer(u"codproveedor")'
0440          <-Expression: expr: 'curProveedor.valueBuffer(u"codproveedor")'
0440           Member: end-gen
0440           Expression: expr: ','
0440           Constant: begin-gen
0440            Constant: ctype: 'String' -> "'"
0440            Constant: expr: 'u"\'"'
0440          <-Expression: expr: 'u"\'"'
0440           Constant: end-gen
0440           Expression: expr: ')'
0440          Expression: end-gen
0440          FunctionCall: expr: 'setWhere(ustr( u"sp.codproveedor = \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" ))'
0440         FunctionCall: end-gen
0440         Member: expr: 'qrySubcuentas.setWhere(ustr( u"sp.codproveedor = \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" ))'
0440        Member: end-gen
0440        InstructionCall: line: 'qrySubcuentas.setWhere(ustr( u"sp.codproveedor = \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" ))'
0440      <-Source: line: 'qrySubcuentas.setWhere(ustr( u"sp.codproveedor = \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" ))'
0440     <--Switch: line: 'qrySubcuentas.setWhere(ustr( u"sp.codproveedor = \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" ))'
0440    <---Source: line: 'qrySubcuentas.setWhere(ustr( u"sp.codproveedor = \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" ))'
0440   <----Function: line: 'qrySubcuentas.setWhere(ustr( u"sp.codproveedor = \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" ))'
0440  <-----Source: line: 'qrySubcuentas.setWhere(ustr( u"sp.codproveedor = \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" ))'
0440 <------Class: line: 'qrySubcuentas.setWhere(ustr( u"sp.codproveedor = \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" ))'
0440<-------Source: line: 'qrySubcuentas.setWhere(ustr( u"sp.codproveedor = \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" ))'
0441       InstructionCall: end-gen
0441       TryCatch: begin-gen
0441        TryCatch: line: 'try:'
0441      <-Source: line: 'try:'
0441     <--Switch: line: 'try:'
0441    <---Source: line: 'try:'
0441   <----Function: line: 'try:'
0441  <-----Source: line: 'try:'
0441 <------Class: line: 'try:'
0441<-------Source: line: 'try:'
0442        TryCatch: begin: 'block-try'
0442      <-Source: begin: 'block-try'
0442     <--Switch: begin: 'block-try'
0442    <---Source: begin: 'block-try'
0442   <----Function: begin: 'block-try'
0442  <-----Source: begin: 'block-try'
0442 <------Class: begin: 'block-try'
0442<-------Source: begin: 'block-try'
0442        Source: begin-gen
0442         InstructionCall: begin-gen
0442          Member: begin-gen
0442           Identifier: begin-gen
0442            Identifier: expr: 'qrySubcuentas'
0442           Identifier: end-gen
0442           FunctionCall: begin-gen
0442            Value: begin-gen
0442             Identifier: begin-gen
0442              Identifier: expr: 'True'
0442            <-Value: expr: 'True'
0442             Identifier: end-gen
0442            Value: end-gen
0442            FunctionCall: expr: 'setForwardOnly(True)'
0442           FunctionCall: end-gen
0442           Member: expr: 'qrySubcuentas.setForwardOnly(True)'
0442          Member: end-gen
0442          InstructionCall: line: 'qrySubcuentas.setForwardOnly(True)'
0442        <-Source: line: 'qrySubcuentas.setForwardOnly(True)'
0442       <--TryCatch: line: 'qrySubcuentas.setForwardOnly(True)'
0442      <---Source: line: 'qrySubcuentas.setForwardOnly(True)'
0442     <----Switch: line: 'qrySubcuentas.setForwardOnly(True)'
0442    <-----Source: line: 'qrySubcuentas.setForwardOnly(True)'
0442   <------Function: line: 'qrySubcuentas.setForwardOnly(True)'
0442  <-------Source: line: 'qrySubcuentas.setForwardOnly(True)'
0442 <--------Class: line: 'qrySubcuentas.setForwardOnly(True)'
0442<---------Source: line: 'qrySubcuentas.setForwardOnly(True)'
0443         InstructionCall: end-gen
0443        Source: end-gen
0443        TryCatch: end: 'block-try'
0443      <-Source: end: 'block-try'
0443     <--Switch: end: 'block-try'
0443    <---Source: end: 'block-try'
0443   <----Function: end: 'block-try'
0443  <-----Source: end: 'block-try'
0443 <------Class: end: 'block-try'
0443<-------Source: end: 'block-try'
0443        Identifier: begin-gen
0443         Identifier: expr: 'e'
0443        Identifier: end-gen
0443        TryCatch: line: 'except Exception as e:'
0443      <-Source: line: 'except Exception as e:'
0443     <--Switch: line: 'except Exception as e:'
0443    <---Source: line: 'except Exception as e:'
0443   <----Function: line: 'except Exception as e:'
0443  <-----Source: line: 'except Exception as e:'
0443 <------Class: line: 'except Exception as e:'
0443<-------Source: line: 'except Exception as e:'
0444        TryCatch: begin: 'block-except'
0444      <-Source: begin: 'block-except'
0444     <--Switch: begin: 'block-except'
0444    <---Source: begin: 'block-except'
0444   <----Function: begin: 'block-except'
0444  <-----Source: begin: 'block-except'
0444 <------Class: begin: 'block-except'
0444<-------Source: begin: 'block-except'
0444        TryCatch: line: 'e = traceback.format_exc()'
0444      <-Source: line: 'e = traceback.format_exc()'
0444     <--Switch: line: 'e = traceback.format_exc()'
0444    <---Source: line: 'e = traceback.format_exc()'
0444   <----Function: line: 'e = traceback.format_exc()'
0444  <-----Source: line: 'e = traceback.format_exc()'
0444 <------Class: line: 'e = traceback.format_exc()'
0444<-------Source: line: 'e = traceback.format_exc()'
0445        Source: begin-gen
0445        Source: end-gen
0445        TryCatch: end: 'block-except'
0445      <-Source: end: 'block-except'
0445     <--Switch: end: 'block-except'
0445    <---Source: end: 'block-except'
0445   <----Function: end: 'block-except'
0445  <-----Source: end: 'block-except'
0445 <------Class: end: 'block-except'
0445<-------Source: end: 'block-except'
0446       TryCatch: end-gen
0446       If: begin-gen
0446        Value: begin-gen
0446         OpUnary: begin-gen
0446          OpUnary: expr: 'not'
0446        <-Value: expr: 'not'
0446          Member: begin-gen
0446           Identifier: begin-gen
0446            Identifier: expr: 'qrySubcuentas'
0446           Identifier: end-gen
0446           FunctionCall: begin-gen
0446            FunctionCall: expr: 'exec_()'
0446           FunctionCall: end-gen
0446           Member: expr: 'qrySubcuentas.exec_()'
0446         <-OpUnary: expr: 'qrySubcuentas.exec_()'
0446        <--Value: expr: 'qrySubcuentas.exec_()'
0446          Member: end-gen
0446         OpUnary: end-gen
0446        Value: end-gen
0446        If: line: 'if not qrySubcuentas.exec_():'
0446      <-Source: line: 'if not qrySubcuentas.exec_():'
0446     <--Switch: line: 'if not qrySubcuentas.exec_():'
0446    <---Source: line: 'if not qrySubcuentas.exec_():'
0446   <----Function: line: 'if not qrySubcuentas.exec_():'
0446  <-----Source: line: 'if not qrySubcuentas.exec_():'
0446 <------Class: line: 'if not qrySubcuentas.exec_():'
0446<-------Source: line: 'if not qrySubcuentas.exec_():'
0447        If: begin: 'block-if'
0447      <-Source: begin: 'block-if'
0447     <--Switch: begin: 'block-if'
0447    <---Source: begin: 'block-if'
0447   <----Function: begin: 'block-if'
0447  <-----Source: begin: 'block-if'
0447 <------Class: begin: 'block-if'
0447<-------Source: begin: 'block-if'
0447        Source: begin-gen
0447         InstructionFlow: begin-gen
0447          Value: begin-gen
0447           Identifier: begin-gen
0447            Identifier: expr: 'False'
0447          <-Value: expr: 'False'
0447           Identifier: end-gen
0447          Value: end-gen
0447          InstructionFlow: line: 'return False'
0447        <-Source: line: 'return False'
0447       <--If: line: 'return False'
0447      <---Source: line: 'return False'
0447     <----Switch: line: 'return False'
0447    <-----Source: line: 'return False'
0447   <------Function: line: 'return False'
0447  <-------Source: line: 'return False'
0447 <--------Class: line: 'return False'
0447<---------Source: line: 'return False'
0448         InstructionFlow: end-gen
0448        Source: end-gen
0448        If: end: 'block-if'
0448      <-Source: end: 'block-if'
0448     <--Switch: end: 'block-if'
0448    <---Source: end: 'block-if'
0448   <----Function: end: 'block-if'
0448  <-----Source: end: 'block-if'
0448 <------Class: end: 'block-if'
0448<-------Source: end: 'block-if'
0448       If: end-gen
0448       DeclarationBlock: begin-gen
0448        Variable: begin-gen
0448         Variable: expr: 'idSubcuenta'
0448         Variable: expr: '='
0448         Variable: expr: '""'
0448        Variable: end-gen
0448        DeclarationBlock: line: 'idSubcuenta = ""'
0448      <-Source: line: 'idSubcuenta = ""'
0448     <--Switch: line: 'idSubcuenta = ""'
0448    <---Source: line: 'idSubcuenta = ""'
0448   <----Function: line: 'idSubcuenta = ""'
0448  <-----Source: line: 'idSubcuenta = ""'
0448 <------Class: line: 'idSubcuenta = ""'
0448<-------Source: line: 'idSubcuenta = ""'
0449       DeclarationBlock: end-gen
0449       While: begin-gen
0449        Value: begin-gen
0449         Member: begin-gen
0449          Identifier: begin-gen
0449           Identifier: expr: 'qrySubcuentas'
0449          Identifier: end-gen
0449          FunctionCall: begin-gen
0449           FunctionCall: expr: 'next()'
0449          FunctionCall: end-gen
0449          Member: expr: 'qrySubcuentas.next()'
0449        <-Value: expr: 'qrySubcuentas.next()'
0449         Member: end-gen
0449        Value: end-gen
0449        While: line: 'while qrySubcuentas.next():'
0449      <-Source: line: 'while qrySubcuentas.next():'
0449     <--Switch: line: 'while qrySubcuentas.next():'
0449    <---Source: line: 'while qrySubcuentas.next():'
0449   <----Function: line: 'while qrySubcuentas.next():'
0449  <-----Source: line: 'while qrySubcuentas.next():'
0449 <------Class: line: 'while qrySubcuentas.next():'
0449<-------Source: line: 'while qrySubcuentas.next():'
0450        While: begin: 'block-while'
0450      <-Source: begin: 'block-while'
0450     <--Switch: begin: 'block-while'
0450    <---Source: begin: 'block-while'
0450   <----Function: begin: 'block-while'
0450  <-----Source: begin: 'block-while'
0450 <------Class: begin: 'block-while'
0450<-------Source: begin: 'block-while'
0450        Source: begin-gen
0450         InstructionUpdate: begin-gen
0450          Identifier: begin-gen
0450           Identifier: expr: 'idSubcuenta'
0450          Identifier: end-gen
0450          OpUpdate: begin-gen
0450           OpUpdate: expr: '='
0450          OpUpdate: end-gen
0450          Value: begin-gen
0450           Member: begin-gen
0450            Identifier: begin-gen
0450             Identifier: expr: 'qrySubcuentas'
0450            Identifier: end-gen
0450            FunctionCall: begin-gen
0450             Value: begin-gen
0450              Constant: begin-gen
0450               Constant: ctype: 'String' -> 's.idsubcuenta'
0450               Constant: expr: 'u"s.idsubcuenta"'
0450             <-Value: expr: 'u"s.idsubcuenta"'
0450              Constant: end-gen
0450             Value: end-gen
0450             FunctionCall: expr: 'value(u"s.idsubcuenta")'
0450            FunctionCall: end-gen
0450            Member: expr: 'qrySubcuentas.value(u"s.idsubcuenta")'
0450          <-Value: expr: 'qrySubcuentas.value(u"s.idsubcuenta")'
0450           Member: end-gen
0450          Value: end-gen
0450          InstructionUpdate: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0450        <-Source: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0450       <--While: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0450      <---Source: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0450     <----Switch: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0450    <-----Source: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0450   <------Function: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0450  <-------Source: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0450 <--------Class: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0450<---------Source: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0451         InstructionUpdate: end-gen
0451         If: begin-gen
0451          Expression: begin-gen
0451           FunctionCall: begin-gen
0451            Value: begin-gen
0451             Member: begin-gen
0451              Identifier: begin-gen
0451               Identifier: expr: 'qrySubcuentas'
0451              Identifier: end-gen
0451              FunctionCall: begin-gen
0451               Value: begin-gen
0451                Constant: begin-gen
0451                 Constant: ctype: 'String' -> 's.saldo'
0451                 Constant: expr: 'u"s.saldo"'
0451               <-Value: expr: 'u"s.saldo"'
0451                Constant: end-gen
0451               Value: end-gen
0451               FunctionCall: expr: 'value(u"s.saldo")'
0451              FunctionCall: end-gen
0451              Member: expr: 'qrySubcuentas.value(u"s.saldo")'
0451            <-Value: expr: 'qrySubcuentas.value(u"s.saldo")'
0451             Member: end-gen
0451            Value: end-gen
0451            FunctionCall: expr: 'parseFloat(qrySubcuentas.value(u"s.saldo"))'
0451          <-Expression: expr: 'parseFloat(qrySubcuentas.value(u"s.saldo"))'
0451           FunctionCall: end-gen
0451           Compare: begin-gen
0451            Compare: expr: '!='
0451          <-Expression: expr: '!='
0451           Compare: end-gen
0451           Constant: begin-gen
0451            Constant: ctype: 'Number' -> '0'
0451            Constant: expr: '0'
0451          <-Expression: expr: '0'
0451           Constant: end-gen
0451          Expression: end-gen
0451          If: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0451        <-Source: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0451       <--While: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0451      <---Source: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0451     <----Switch: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0451    <-----Source: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0451   <------Function: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0451  <-------Source: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0451 <--------Class: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0451<---------Source: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0452          If: begin: 'block-if'
0452        <-Source: begin: 'block-if'
0452       <--While: begin: 'block-if'
0452      <---Source: begin: 'block-if'
0452     <----Switch: begin: 'block-if'
0452    <-----Source: begin: 'block-if'
0452   <------Function: begin: 'block-if'
0452  <-------Source: begin: 'block-if'
0452 <--------Class: begin: 'block-if'
0452<---------Source: begin: 'block-if'
0452          Source: begin-gen
0452           InstructionFlow: begin-gen
0452            InstructionFlow: line: 'continue '
0452          <-Source: line: 'continue '
0452         <--If: line: 'continue '
0452        <---Source: line: 'continue '
0452       <----While: line: 'continue '
0452      <-----Source: line: 'continue '
0452     <------Switch: line: 'continue '
0452    <-------Source: line: 'continue '
0452   <--------Function: line: 'continue '
0452  <---------Source: line: 'continue '
0452 <----------Class: line: 'continue '
0452<-----------Source: line: 'continue '
0453           InstructionFlow: end-gen
0453          Source: end-gen
0453          If: end: 'block-if'
0453        <-Source: end: 'block-if'
0453       <--While: end: 'block-if'
0453      <---Source: end: 'block-if'
0453     <----Switch: end: 'block-if'
0453    <-----Source: end: 'block-if'
0453   <------Function: end: 'block-if'
0453  <-------Source: end: 'block-if'
0453 <--------Class: end: 'block-if'
0453<---------Source: end: 'block-if'
0453         If: end-gen
0453         If: begin-gen
0453          Value: begin-gen
0453           Member: begin-gen
0453            Identifier: begin-gen
0453             Identifier: expr: 'util'
0453            Identifier: end-gen
0453            FunctionCall: begin-gen
0453             Value: begin-gen
0453              Constant: begin-gen
0453               Constant: ctype: 'String' -> 'co_partidas'
0453               Constant: expr: 'u"co_partidas"'
0453             <-Value: expr: 'u"co_partidas"'
0453              Constant: end-gen
0453             Value: end-gen
0453             Value: begin-gen
0453              Constant: begin-gen
0453               Constant: ctype: 'String' -> 'idpartida'
0453               Constant: expr: 'u"idpartida"'
0453             <-Value: expr: 'u"idpartida"'
0453              Constant: end-gen
0453             Value: end-gen
0453             Expression: begin-gen
0453              Expression: expr: 'ustr('
0453              Constant: begin-gen
0453               Constant: ctype: 'String' -> 'idsubcuenta = '
0453               Constant: expr: 'u"idsubcuenta = "'
0453             <-Expression: expr: 'u"idsubcuenta = "'
0453              Constant: end-gen
0453              Expression: expr: ','
0453              Identifier: begin-gen
0453               Identifier: expr: 'idSubcuenta'
0453             <-Expression: expr: 'idSubcuenta'
0453              Identifier: end-gen
0453              Expression: expr: ')'
0453             Expression: end-gen
0453             FunctionCall: expr: 'sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta ))'
0453            FunctionCall: end-gen
0453            Member: expr: 'util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta ))'
0453          <-Value: expr: 'util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta ))'
0453           Member: end-gen
0453          Value: end-gen
0453          If: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0453        <-Source: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0453       <--While: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0453      <---Source: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0453     <----Switch: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0453    <-----Source: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0453   <------Function: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0453  <-------Source: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0453 <--------Class: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0453<---------Source: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0454          If: begin: 'block-if'
0454        <-Source: begin: 'block-if'
0454       <--While: begin: 'block-if'
0454      <---Source: begin: 'block-if'
0454     <----Switch: begin: 'block-if'
0454    <-----Source: begin: 'block-if'
0454   <------Function: begin: 'block-if'
0454  <-------Source: begin: 'block-if'
0454 <--------Class: begin: 'block-if'
0454<---------Source: begin: 'block-if'
0454          Source: begin-gen
0454           InstructionFlow: begin-gen
0454            InstructionFlow: line: 'continue '
0454          <-Source: line: 'continue '
0454         <--If: line: 'continue '
0454        <---Source: line: 'continue '
0454       <----While: line: 'continue '
0454      <-----Source: line: 'continue '
0454     <------Switch: line: 'continue '
0454    <-------Source: line: 'continue '
0454   <--------Function: line: 'continue '
0454  <---------Source: line: 'continue '
0454 <----------Class: line: 'continue '
0454<-----------Source: line: 'continue '
0455           InstructionFlow: end-gen
0455          Source: end-gen
0455          If: end: 'block-if'
0455        <-Source: end: 'block-if'
0455       <--While: end: 'block-if'
0455      <---Source: end: 'block-if'
0455     <----Switch: end: 'block-if'
0455    <-----Source: end: 'block-if'
0455   <------Function: end: 'block-if'
0455  <-------Source: end: 'block-if'
0455 <--------Class: end: 'block-if'
0455<---------Source: end: 'block-if'
0455         If: end-gen
0455         If: begin-gen
0455          Value: begin-gen
0455           Member: begin-gen
0455            Identifier: begin-gen
0455             Identifier: expr: 'util'
0455            Identifier: end-gen
0455            FunctionCall: begin-gen
0455             Value: begin-gen
0455              Constant: begin-gen
0455               Constant: ctype: 'String' -> 'co_subcuentasprov'
0455               Constant: expr: 'u"co_subcuentasprov"'
0455             <-Value: expr: 'u"co_subcuentasprov"'
0455              Constant: end-gen
0455             Value: end-gen
0455             Value: begin-gen
0455              Constant: begin-gen
0455               Constant: ctype: 'String' -> 'idsubcuenta'
0455               Constant: expr: 'u"idsubcuenta"'
0455             <-Value: expr: 'u"idsubcuenta"'
0455              Constant: end-gen
0455             Value: end-gen
0455             Expression: begin-gen
0455              Expression: expr: 'ustr('
0455              Constant: begin-gen
0455               Constant: ctype: 'String' -> 'idsubcuenta = '
0455               Constant: expr: 'u"idsubcuenta = "'
0455             <-Expression: expr: 'u"idsubcuenta = "'
0455              Constant: end-gen
0455              Expression: expr: ','
0455              Identifier: begin-gen
0455               Identifier: expr: 'idSubcuenta'
0455             <-Expression: expr: 'idSubcuenta'
0455              Identifier: end-gen
0455              Expression: expr: ','
0455              Constant: begin-gen
0455               Constant: ctype: 'String' -> " AND codproveedor <> '"
0455               Constant: expr: 'u" AND codproveedor <> \'"'
0455             <-Expression: expr: 'u" AND codproveedor <> \'"'
0455              Constant: end-gen
0455              Expression: expr: ','
0455              Member: begin-gen
0455               Identifier: begin-gen
0455                Identifier: expr: 'curProveedor'
0455               Identifier: end-gen
0455               FunctionCall: begin-gen
0455                Value: begin-gen
0455                 Constant: begin-gen
0455                  Constant: ctype: 'String' -> 'codproveedor'
0455                  Constant: expr: 'u"codproveedor"'
0455                <-Value: expr: 'u"codproveedor"'
0455                 Constant: end-gen
0455                Value: end-gen
0455                FunctionCall: expr: 'valueBuffer(u"codproveedor")'
0455               FunctionCall: end-gen
0455               Member: expr: 'curProveedor.valueBuffer(u"codproveedor")'
0455             <-Expression: expr: 'curProveedor.valueBuffer(u"codproveedor")'
0455              Member: end-gen
0455              Expression: expr: ','
0455              Constant: begin-gen
0455               Constant: ctype: 'String' -> "'"
0455               Constant: expr: 'u"\'"'
0455             <-Expression: expr: 'u"\'"'
0455              Constant: end-gen
0455              Expression: expr: ')'
0455             Expression: end-gen
0455             FunctionCall: expr: 'sqlSelect(u"co_subcuentasprov", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codproveedor <> \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" ))'
0455            FunctionCall: end-gen
0455            Member: expr: 'util.sqlSelect(u"co_subcuentasprov", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codproveedor <> \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" ))'
0455          <-Value: expr: 'util.sqlSelect(u"co_subcuentasprov", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codproveedor <> \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" ))'
0455           Member: end-gen
0455          Value: end-gen
0455          If: line: 'if util.sqlSelect(u"co_subcuentasprov", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codproveedor <> \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" )):'
0455        <-Source: line: 'if util.sqlSelect(u"co_subcuentasprov", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codproveedor <> \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" )):'
0455       <--While: line: 'if util.sqlSelect(u"co_subcuentasprov", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codproveedor <> \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" )):'
0455      <---Source: line: 'if util.sqlSelect(u"co_subcuentasprov", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codproveedor <> \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" )):'
0455     <----Switch: line: 'if util.sqlSelect(u"co_subcuentasprov", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codproveedor <> \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" )):'
0455    <-----Source: line: 'if util.sqlSelect(u"co_subcuentasprov", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codproveedor <> \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" )):'
0455   <------Function: line: 'if util.sqlSelect(u"co_subcuentasprov", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codproveedor <> \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" )):'
0455  <-------Source: line: 'if util.sqlSelect(u"co_subcuentasprov", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codproveedor <> \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" )):'
0455 <--------Class: line: 'if util.sqlSelect(u"co_subcuentasprov", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codproveedor <> \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" )):'
0455<---------Source: line: 'if util.sqlSelect(u"co_subcuentasprov", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codproveedor <> \'" , curProveedor.valueBuffer(u"codproveedor") , u"\'" )):'
0456          If: begin: 'block-if'
0456        <-Source: begin: 'block-if'
0456       <--While: begin: 'block-if'
0456      <---Source: begin: 'block-if'
0456     <----Switch: begin: 'block-if'
0456    <-----Source: begin: 'block-if'
0456   <------Function: begin: 'block-if'
0456  <-------Source: begin: 'block-if'
0456 <--------Class: begin: 'block-if'
0456<---------Source: begin: 'block-if'
0456          Source: begin-gen
0456           InstructionFlow: begin-gen
0456            InstructionFlow: line: 'continue '
0456          <-Source: line: 'continue '
0456         <--If: line: 'continue '
0456        <---Source: line: 'continue '
0456       <----While: line: 'continue '
0456      <-----Source: line: 'continue '
0456     <------Switch: line: 'continue '
0456    <-------Source: line: 'continue '
0456   <--------Function: line: 'continue '
0456  <---------Source: line: 'continue '
0456 <----------Class: line: 'continue '
0456<-----------Source: line: 'continue '
0457           InstructionFlow: end-gen
0457          Source: end-gen
0457          If: end: 'block-if'
0457        <-Source: end: 'block-if'
0457       <--While: end: 'block-if'
0457      <---Source: end: 'block-if'
0457     <----Switch: end: 'block-if'
0457    <-----Source: end: 'block-if'
0457   <------Function: end: 'block-if'
0457  <-------Source: end: 'block-if'
0457 <--------Class: end: 'block-if'
0457<---------Source: end: 'block-if'
0457         If: end-gen
0457         If: begin-gen
0457          Value: begin-gen
0457           OpUnary: begin-gen
0457            OpUnary: expr: 'not'
0457          <-Value: expr: 'not'
0457            Member: begin-gen
0457             Identifier: begin-gen
0457              Identifier: expr: 'util'
0457             Identifier: end-gen
0457             FunctionCall: begin-gen
0457              Value: begin-gen
0457               Constant: begin-gen
0457                Constant: ctype: 'String' -> 'co_subcuentas'
0457                Constant: expr: 'u"co_subcuentas"'
0457              <-Value: expr: 'u"co_subcuentas"'
0457               Constant: end-gen
0457              Value: end-gen
0457              Expression: begin-gen
0457               Expression: expr: 'ustr('
0457               Constant: begin-gen
0457                Constant: ctype: 'String' -> 'idsubcuenta = '
0457                Constant: expr: 'u"idsubcuenta = "'
0457              <-Expression: expr: 'u"idsubcuenta = "'
0457               Constant: end-gen
0457               Expression: expr: ','
0457               Identifier: begin-gen
0457                Identifier: expr: 'idSubcuenta'
0457              <-Expression: expr: 'idSubcuenta'
0457               Identifier: end-gen
0457               Expression: expr: ')'
0457              Expression: end-gen
0457              FunctionCall: expr: 'sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta ))'
0457             FunctionCall: end-gen
0457             Member: expr: 'util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta ))'
0457           <-OpUnary: expr: 'util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta ))'
0457          <--Value: expr: 'util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta ))'
0457            Member: end-gen
0457           OpUnary: end-gen
0457          Value: end-gen
0457          If: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0457        <-Source: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0457       <--While: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0457      <---Source: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0457     <----Switch: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0457    <-----Source: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0457   <------Function: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0457  <-------Source: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0457 <--------Class: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0457<---------Source: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0458          If: begin: 'block-if'
0458        <-Source: begin: 'block-if'
0458       <--While: begin: 'block-if'
0458      <---Source: begin: 'block-if'
0458     <----Switch: begin: 'block-if'
0458    <-----Source: begin: 'block-if'
0458   <------Function: begin: 'block-if'
0458  <-------Source: begin: 'block-if'
0458 <--------Class: begin: 'block-if'
0458<---------Source: begin: 'block-if'
0458          Source: begin-gen
0458           InstructionFlow: begin-gen
0458            Value: begin-gen
0458             Identifier: begin-gen
0458              Identifier: expr: 'False'
0458            <-Value: expr: 'False'
0458             Identifier: end-gen
0458            Value: end-gen
0458            InstructionFlow: line: 'return False'
0458          <-Source: line: 'return False'
0458         <--If: line: 'return False'
0458        <---Source: line: 'return False'
0458       <----While: line: 'return False'
0458      <-----Source: line: 'return False'
0458     <------Switch: line: 'return False'
0458    <-------Source: line: 'return False'
0458   <--------Function: line: 'return False'
0458  <---------Source: line: 'return False'
0458 <----------Class: line: 'return False'
0458<-----------Source: line: 'return False'
0459           InstructionFlow: end-gen
0459          Source: end-gen
0459          If: end: 'block-if'
0459        <-Source: end: 'block-if'
0459       <--While: end: 'block-if'
0459      <---Source: end: 'block-if'
0459     <----Switch: end: 'block-if'
0459    <-----Source: end: 'block-if'
0459   <------Function: end: 'block-if'
0459  <-------Source: end: 'block-if'
0459 <--------Class: end: 'block-if'
0459<---------Source: end: 'block-if'
0459         If: end-gen
0459        Source: end-gen
0459        While: end: 'block-while'
0459      <-Source: end: 'block-while'
0459     <--Switch: end: 'block-while'
0459    <---Source: end: 'block-while'
0459   <----Function: end: 'block-while'
0459  <-----Source: end: 'block-while'
0459 <------Class: end: 'block-while'
0459<-------Source: end: 'block-while'
0459       While: end-gen
0459      Source: end-gen
0459      Switch: end: 'block-if'
0459    <-Source: end: 'block-if'
0459   <--Function: end: 'block-if'
0459  <---Source: end: 'block-if'
0459 <----Class: end: 'block-if'
0459<-----Source: end: 'block-if'
0459     Switch: end-gen
0459     InstructionFlow: begin-gen
0459      Value: begin-gen
0459       Identifier: begin-gen
0459        Identifier: expr: 'True'
0459      <-Value: expr: 'True'
0459       Identifier: end-gen
0459      Value: end-gen
0459      InstructionFlow: line: 'return True'
0459    <-Source: line: 'return True'
0459   <--Function: line: 'return True'
0459  <---Source: line: 'return True'
0459 <----Class: line: 'return True'
0459<-----Source: line: 'return True'
0461     InstructionFlow: end-gen
0461    Source: end-gen
0461    Function: end: 'block-def-interna_beforeCommit_proveedores'
0461  <-Source: end: 'block-def-interna_beforeCommit_proveedores'
0461 <--Class: end: 'block-def-interna_beforeCommit_proveedores'
0461<---Source: end: 'block-def-interna_beforeCommit_proveedores'
0462   Function: end-gen
0462   Function: begin-gen
0462    Variable: begin-gen
0462     Variable: expr: 'curCliente'
0462    Variable: end-gen
0462    Function: line: 'def interna_beforeCommit_clientes(self, curCliente = None):'
0462  <-Source: line: 'def interna_beforeCommit_clientes(self, curCliente = None):'
0462 <--Class: line: 'def interna_beforeCommit_clientes(self, curCliente = None):'
0462<---Source: line: 'def interna_beforeCommit_clientes(self, curCliente = None):'
0463    Function: begin: 'block-def-interna_beforeCommit_clientes'
0463  <-Source: begin: 'block-def-interna_beforeCommit_clientes'
0463 <--Class: begin: 'block-def-interna_beforeCommit_clientes'
0463<---Source: begin: 'block-def-interna_beforeCommit_clientes'
0463    Source: begin-gen
0463     DeclarationBlock: begin-gen
0463      Variable: begin-gen
0463       Variable: expr: 'util'
0463       Variable: expr: '='
0463       Value: begin-gen
0463        New: begin-gen
0463         FunctionCall: begin-gen
0463          FunctionCall: expr: 'FLUtil()'
0463        <-New: expr: 'qsatype.FLUtil()'
0463       <--Value: expr: 'qsatype.FLUtil()'
0463      <---Variable: expr: 'qsatype.FLUtil()'
0463         FunctionCall: end-gen
0463        New: end-gen
0463       Value: end-gen
0463      Variable: end-gen
0463      DeclarationBlock: line: 'util = qsatype.FLUtil()'
0463    <-Source: line: 'util = qsatype.FLUtil()'
0463   <--Function: line: 'util = qsatype.FLUtil()'
0463  <---Source: line: 'util = qsatype.FLUtil()'
0463 <----Class: line: 'util = qsatype.FLUtil()'
0463<-----Source: line: 'util = qsatype.FLUtil()'
0464     DeclarationBlock: end-gen
0464     If: begin-gen
0464      Value: begin-gen
0464       OpUnary: begin-gen
0464        OpUnary: expr: 'not'
0464      <-Value: expr: 'not'
0464        Member: begin-gen
0464         Identifier: begin-gen
0464          Identifier: expr: 'sys'
0464         Identifier: end-gen
0464         FunctionCall: begin-gen
0464          Value: begin-gen
0464           Constant: begin-gen
0464            Constant: ctype: 'String' -> 'flcontppal'
0464            Constant: expr: 'u"flcontppal"'
0464          <-Value: expr: 'u"flcontppal"'
0464           Constant: end-gen
0464          Value: end-gen
0464          FunctionCall: expr: 'isLoadedModule(u"flcontppal")'
0464         FunctionCall: end-gen
0464         Member: expr: 'sys.isLoadedModule(u"flcontppal")'
0464       <-OpUnary: expr: 'sys.isLoadedModule(u"flcontppal")'
0464      <--Value: expr: 'sys.isLoadedModule(u"flcontppal")'
0464        Member: end-gen
0464       OpUnary: end-gen
0464      Value: end-gen
0464      If: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0464    <-Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0464   <--Function: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0464  <---Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0464 <----Class: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0464<-----Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
0465      If: begin: 'block-if'
0465    <-Source: begin: 'block-if'
0465   <--Function: begin: 'block-if'
0465  <---Source: begin: 'block-if'
0465 <----Class: begin: 'block-if'
0465<-----Source: begin: 'block-if'
0465      Source: begin-gen
0465       InstructionFlow: begin-gen
0465        Value: begin-gen
0465         Identifier: begin-gen
0465          Identifier: expr: 'True'
0465        <-Value: expr: 'True'
0465         Identifier: end-gen
0465        Value: end-gen
0465        InstructionFlow: line: 'return True'
0465      <-Source: line: 'return True'
0465     <--If: line: 'return True'
0465    <---Source: line: 'return True'
0465   <----Function: line: 'return True'
0465  <-----Source: line: 'return True'
0465 <------Class: line: 'return True'
0465<-------Source: line: 'return True'
0466       InstructionFlow: end-gen
0466      Source: end-gen
0466      If: end: 'block-if'
0466    <-Source: end: 'block-if'
0466   <--Function: end: 'block-if'
0466  <---Source: end: 'block-if'
0466 <----Class: end: 'block-if'
0466<-----Source: end: 'block-if'
0466     If: end-gen
0466     Switch: begin-gen
0466      Value: begin-gen
0466       Member: begin-gen
0466        Identifier: begin-gen
0466         Identifier: expr: 'curCliente'
0466        Identifier: end-gen
0466        FunctionCall: begin-gen
0466         FunctionCall: expr: 'modeAccess()'
0466        FunctionCall: end-gen
0466        Member: expr: 'curCliente.modeAccess()'
0466      <-Value: expr: 'curCliente.modeAccess()'
0466       Member: end-gen
0466      Value: end-gen
0466      Switch: line: 'se8_when = curCliente.modeAccess()'
0466    <-Source: line: 'se8_when = curCliente.modeAccess()'
0466   <--Function: line: 'se8_when = curCliente.modeAccess()'
0466  <---Source: line: 'se8_when = curCliente.modeAccess()'
0466 <----Class: line: 'se8_when = curCliente.modeAccess()'
0466<-----Source: line: 'se8_when = curCliente.modeAccess()'
0467      Switch: line: 'se8_do_work,se8_work_done = False,False'
0467    <-Source: line: 'se8_do_work,se8_work_done = False,False'
0467   <--Function: line: 'se8_do_work,se8_work_done = False,False'
0467  <---Source: line: 'se8_do_work,se8_work_done = False,False'
0467 <----Class: line: 'se8_do_work,se8_work_done = False,False'
0467<-----Source: line: 'se8_do_work,se8_work_done = False,False'
0468      Value: begin-gen
0468       Member: begin-gen
0468        Identifier: begin-gen
0468         Identifier: expr: 'curCliente'
0468        Identifier: end-gen
0468        Identifier: begin-gen
0468         Identifier: expr: 'Del'
0468        Identifier: end-gen
0468        Member: expr: 'curCliente.Del'
0468      <-Value: expr: 'curCliente.Del'
0468       Member: end-gen
0468      Value: end-gen
0468      Switch: line: 'if se8_when == curCliente.Del: se8_do_work,se8_work_done = True,True'
0468    <-Source: line: 'if se8_when == curCliente.Del: se8_do_work,se8_work_done = True,True'
0468   <--Function: line: 'if se8_when == curCliente.Del: se8_do_work,se8_work_done = True,True'
0468  <---Source: line: 'if se8_when == curCliente.Del: se8_do_work,se8_work_done = True,True'
0468 <----Class: line: 'if se8_when == curCliente.Del: se8_do_work,se8_work_done = True,True'
0468<-----Source: line: 'if se8_when == curCliente.Del: se8_do_work,se8_work_done = True,True'
0469      Switch: line: 'if se8_do_work:'
0469    <-Source: line: 'if se8_do_work:'
0469   <--Function: line: 'if se8_do_work:'
0469  <---Source: line: 'if se8_do_work:'
0469 <----Class: line: 'if se8_do_work:'
0469<-----Source: line: 'if se8_do_work:'
0470      Switch: begin: 'block-if'
0470    <-Source: begin: 'block-if'
0470   <--Function: begin: 'block-if'
0470  <---Source: begin: 'block-if'
0470 <----Class: begin: 'block-if'
0470<-----Source: begin: 'block-if'
0470      Source: begin-gen
0470       DeclarationBlock: begin-gen
0470        Variable: begin-gen
0470         Variable: expr: 'qrySubcuentas'
0470         Variable: expr: '='
0470         Value: begin-gen
0470          New: begin-gen
0470           FunctionCall: begin-gen
0470            FunctionCall: expr: 'FLSqlQuery()'
0470          <-New: expr: 'qsatype.FLSqlQuery()'
0470         <--Value: expr: 'qsatype.FLSqlQuery()'
0470        <---Variable: expr: 'qsatype.FLSqlQuery()'
0470           FunctionCall: end-gen
0470          New: end-gen
0470         Value: end-gen
0470        Variable: end-gen
0470        DeclarationBlock: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0470      <-Source: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0470     <--Switch: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0470    <---Source: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0470   <----Function: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0470  <-----Source: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0470 <------Class: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0470<-------Source: line: 'qrySubcuentas = qsatype.FLSqlQuery()'
0471       DeclarationBlock: end-gen
0471       InstructionCall: begin-gen
0471        Member: begin-gen
0471         Identifier: begin-gen
0471          Identifier: expr: 'qrySubcuentas'
0471         Identifier: end-gen
0471         FunctionCall: begin-gen
0471          Value: begin-gen
0471           Constant: begin-gen
0471            Constant: ctype: 'String' -> 'co_subcuentascli,co_subcuentas'
0471            Constant: expr: 'u"co_subcuentascli,co_subcuentas"'
0471          <-Value: expr: 'u"co_subcuentascli,co_subcuentas"'
0471           Constant: end-gen
0471          Value: end-gen
0471          FunctionCall: expr: 'setTablesList(u"co_subcuentascli,co_subcuentas")'
0471         FunctionCall: end-gen
0471         Member: expr: 'qrySubcuentas.setTablesList(u"co_subcuentascli,co_subcuentas")'
0471        Member: end-gen
0471        InstructionCall: line: 'qrySubcuentas.setTablesList(u"co_subcuentascli,co_subcuentas")'
0471      <-Source: line: 'qrySubcuentas.setTablesList(u"co_subcuentascli,co_subcuentas")'
0471     <--Switch: line: 'qrySubcuentas.setTablesList(u"co_subcuentascli,co_subcuentas")'
0471    <---Source: line: 'qrySubcuentas.setTablesList(u"co_subcuentascli,co_subcuentas")'
0471   <----Function: line: 'qrySubcuentas.setTablesList(u"co_subcuentascli,co_subcuentas")'
0471  <-----Source: line: 'qrySubcuentas.setTablesList(u"co_subcuentascli,co_subcuentas")'
0471 <------Class: line: 'qrySubcuentas.setTablesList(u"co_subcuentascli,co_subcuentas")'
0471<-------Source: line: 'qrySubcuentas.setTablesList(u"co_subcuentascli,co_subcuentas")'
0472       InstructionCall: end-gen
0472       InstructionCall: begin-gen
0472        Member: begin-gen
0472         Identifier: begin-gen
0472          Identifier: expr: 'qrySubcuentas'
0472         Identifier: end-gen
0472         FunctionCall: begin-gen
0472          Value: begin-gen
0472           Constant: begin-gen
0472            Constant: ctype: 'String' -> 's.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta'
0472            Constant: expr: 'u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta"'
0472          <-Value: expr: 'u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta"'
0472           Constant: end-gen
0472          Value: end-gen
0472          FunctionCall: expr: 'setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0472         FunctionCall: end-gen
0472         Member: expr: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0472        Member: end-gen
0472        InstructionCall: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0472      <-Source: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0472     <--Switch: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0472    <---Source: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0472   <----Function: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0472  <-----Source: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0472 <------Class: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0472<-------Source: line: 'qrySubcuentas.setSelect(u"s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta")'
0473       InstructionCall: end-gen
0473       InstructionCall: begin-gen
0473        Member: begin-gen
0473         Identifier: begin-gen
0473          Identifier: expr: 'qrySubcuentas'
0473         Identifier: end-gen
0473         FunctionCall: begin-gen
0473          Value: begin-gen
0473           Constant: begin-gen
0473            Constant: ctype: 'String' -> 'co_subcuentascli sc INNER JOIN co_subcuentas s ON sc.idsubcuenta = s.idsubcuenta'
0473            Constant: expr: 'u"co_subcuentascli sc INNER JOIN co_subcuentas s ON sc.idsubcuenta = s.idsubcuenta"'
0473          <-Value: expr: 'u"co_subcuentascli sc INNER JOIN co_subcuentas s ON sc.idsubcuenta = s.idsubcuenta"'
0473           Constant: end-gen
0473          Value: end-gen
0473          FunctionCall: expr: 'setFrom(u"co_subcuentascli sc INNER JOIN co_subcuentas s ON sc.idsubcuenta = s.idsubcuenta")'
0473         FunctionCall: end-gen
0473         Member: expr: 'qrySubcuentas.setFrom(u"co_subcuentascli sc INNER JOIN co_subcuentas s ON sc.idsubcuenta = s.idsubcuenta")'
0473        Member: end-gen
0473        InstructionCall: line: 'qrySubcuentas.setFrom(u"co_subcuentascli sc INNER JOIN co_subcuentas s ON sc.idsubcuenta = s.idsubcuenta")'
0473      <-Source: line: 'qrySubcuentas.setFrom(u"co_subcuentascli sc INNER JOIN co_subcuentas s ON sc.idsubcuenta = s.idsubcuenta")'
0473     <--Switch: line: 'qrySubcuentas.setFrom(u"co_subcuentascli sc INNER JOIN co_subcuentas s ON sc.idsubcuenta = s.idsubcuenta")'
0473    <---Source: line: 'qrySubcuentas.setFrom(u"co_subcuentascli sc INNER JOIN co_subcuentas s ON sc.idsubcuenta = s.idsubcuenta")'
0473   <----Function: line: 'qrySubcuentas.setFrom(u"co_subcuentascli sc INNER JOIN co_subcuentas s ON sc.idsubcuenta = s.idsubcuenta")'
0473  <-----Source: line: 'qrySubcuentas.setFrom(u"co_subcuentascli sc INNER JOIN co_subcuentas s ON sc.idsubcuenta = s.idsubcuenta")'
0473 <------Class: line: 'qrySubcuentas.setFrom(u"co_subcuentascli sc INNER JOIN co_subcuentas s ON sc.idsubcuenta = s.idsubcuenta")'
0473<-------Source: line: 'qrySubcuentas.setFrom(u"co_subcuentascli sc INNER JOIN co_subcuentas s ON sc.idsubcuenta = s.idsubcuenta")'
0474       InstructionCall: end-gen
0474       InstructionCall: begin-gen
0474        Member: begin-gen
0474         Identifier: begin-gen
0474          Identifier: expr: 'qrySubcuentas'
0474         Identifier: end-gen
0474         FunctionCall: begin-gen
0474          Expression: begin-gen
0474           Expression: expr: 'ustr('
0474           Constant: begin-gen
0474            Constant: ctype: 'String' -> "sc.codcliente = '"
0474            Constant: expr: 'u"sc.codcliente = \'"'
0474          <-Expression: expr: 'u"sc.codcliente = \'"'
0474           Constant: end-gen
0474           Expression: expr: ','
0474           Member: begin-gen
0474            Identifier: begin-gen
0474             Identifier: expr: 'curCliente'
0474            Identifier: end-gen
0474            FunctionCall: begin-gen
0474             Value: begin-gen
0474              Constant: begin-gen
0474               Constant: ctype: 'String' -> 'codcliente'
0474               Constant: expr: 'u"codcliente"'
0474             <-Value: expr: 'u"codcliente"'
0474              Constant: end-gen
0474             Value: end-gen
0474             FunctionCall: expr: 'valueBuffer(u"codcliente")'
0474            FunctionCall: end-gen
0474            Member: expr: 'curCliente.valueBuffer(u"codcliente")'
0474          <-Expression: expr: 'curCliente.valueBuffer(u"codcliente")'
0474           Member: end-gen
0474           Expression: expr: ','
0474           Constant: begin-gen
0474            Constant: ctype: 'String' -> "'"
0474            Constant: expr: 'u"\'"'
0474          <-Expression: expr: 'u"\'"'
0474           Constant: end-gen
0474           Expression: expr: ')'
0474          Expression: end-gen
0474          FunctionCall: expr: 'setWhere(ustr( u"sc.codcliente = \'" , curCliente.valueBuffer(u"codcliente") , u"\'" ))'
0474         FunctionCall: end-gen
0474         Member: expr: 'qrySubcuentas.setWhere(ustr( u"sc.codcliente = \'" , curCliente.valueBuffer(u"codcliente") , u"\'" ))'
0474        Member: end-gen
0474        InstructionCall: line: 'qrySubcuentas.setWhere(ustr( u"sc.codcliente = \'" , curCliente.valueBuffer(u"codcliente") , u"\'" ))'
0474      <-Source: line: 'qrySubcuentas.setWhere(ustr( u"sc.codcliente = \'" , curCliente.valueBuffer(u"codcliente") , u"\'" ))'
0474     <--Switch: line: 'qrySubcuentas.setWhere(ustr( u"sc.codcliente = \'" , curCliente.valueBuffer(u"codcliente") , u"\'" ))'
0474    <---Source: line: 'qrySubcuentas.setWhere(ustr( u"sc.codcliente = \'" , curCliente.valueBuffer(u"codcliente") , u"\'" ))'
0474   <----Function: line: 'qrySubcuentas.setWhere(ustr( u"sc.codcliente = \'" , curCliente.valueBuffer(u"codcliente") , u"\'" ))'
0474  <-----Source: line: 'qrySubcuentas.setWhere(ustr( u"sc.codcliente = \'" , curCliente.valueBuffer(u"codcliente") , u"\'" ))'
0474 <------Class: line: 'qrySubcuentas.setWhere(ustr( u"sc.codcliente = \'" , curCliente.valueBuffer(u"codcliente") , u"\'" ))'
0474<-------Source: line: 'qrySubcuentas.setWhere(ustr( u"sc.codcliente = \'" , curCliente.valueBuffer(u"codcliente") , u"\'" ))'
0475       InstructionCall: end-gen
0475       TryCatch: begin-gen
0475        TryCatch: line: 'try:'
0475      <-Source: line: 'try:'
0475     <--Switch: line: 'try:'
0475    <---Source: line: 'try:'
0475   <----Function: line: 'try:'
0475  <-----Source: line: 'try:'
0475 <------Class: line: 'try:'
0475<-------Source: line: 'try:'
0476        TryCatch: begin: 'block-try'
0476      <-Source: begin: 'block-try'
0476     <--Switch: begin: 'block-try'
0476    <---Source: begin: 'block-try'
0476   <----Function: begin: 'block-try'
0476  <-----Source: begin: 'block-try'
0476 <------Class: begin: 'block-try'
0476<-------Source: begin: 'block-try'
0476        Source: begin-gen
0476         InstructionCall: begin-gen
0476          Member: begin-gen
0476           Identifier: begin-gen
0476            Identifier: expr: 'qrySubcuentas'
0476           Identifier: end-gen
0476           FunctionCall: begin-gen
0476            Value: begin-gen
0476             Identifier: begin-gen
0476              Identifier: expr: 'True'
0476            <-Value: expr: 'True'
0476             Identifier: end-gen
0476            Value: end-gen
0476            FunctionCall: expr: 'setForwardOnly(True)'
0476           FunctionCall: end-gen
0476           Member: expr: 'qrySubcuentas.setForwardOnly(True)'
0476          Member: end-gen
0476          InstructionCall: line: 'qrySubcuentas.setForwardOnly(True)'
0476        <-Source: line: 'qrySubcuentas.setForwardOnly(True)'
0476       <--TryCatch: line: 'qrySubcuentas.setForwardOnly(True)'
0476      <---Source: line: 'qrySubcuentas.setForwardOnly(True)'
0476     <----Switch: line: 'qrySubcuentas.setForwardOnly(True)'
0476    <-----Source: line: 'qrySubcuentas.setForwardOnly(True)'
0476   <------Function: line: 'qrySubcuentas.setForwardOnly(True)'
0476  <-------Source: line: 'qrySubcuentas.setForwardOnly(True)'
0476 <--------Class: line: 'qrySubcuentas.setForwardOnly(True)'
0476<---------Source: line: 'qrySubcuentas.setForwardOnly(True)'
0477         InstructionCall: end-gen
0477        Source: end-gen
0477        TryCatch: end: 'block-try'
0477      <-Source: end: 'block-try'
0477     <--Switch: end: 'block-try'
0477    <---Source: end: 'block-try'
0477   <----Function: end: 'block-try'
0477  <-----Source: end: 'block-try'
0477 <------Class: end: 'block-try'
0477<-------Source: end: 'block-try'
0477        Identifier: begin-gen
0477         Identifier: expr: 'e'
0477        Identifier: end-gen
0477        TryCatch: line: 'except Exception as e:'
0477      <-Source: line: 'except Exception as e:'
0477     <--Switch: line: 'except Exception as e:'
0477    <---Source: line: 'except Exception as e:'
0477   <----Function: line: 'except Exception as e:'
0477  <-----Source: line: 'except Exception as e:'
0477 <------Class: line: 'except Exception as e:'
0477<-------Source: line: 'except Exception as e:'
0478        TryCatch: begin: 'block-except'
0478      <-Source: begin: 'block-except'
0478     <--Switch: begin: 'block-except'
0478    <---Source: begin: 'block-except'
0478   <----Function: begin: 'block-except'
0478  <-----Source: begin: 'block-except'
0478 <------Class: begin: 'block-except'
0478<-------Source: begin: 'block-except'
0478        TryCatch: line: 'e = traceback.format_exc()'
0478      <-Source: line: 'e = traceback.format_exc()'
0478     <--Switch: line: 'e = traceback.format_exc()'
0478    <---Source: line: 'e = traceback.format_exc()'
0478   <----Function: line: 'e = traceback.format_exc()'
0478  <-----Source: line: 'e = traceback.format_exc()'
0478 <------Class: line: 'e = traceback.format_exc()'
0478<-------Source: line: 'e = traceback.format_exc()'
0479        Source: begin-gen
0479        Source: end-gen
0479        TryCatch: end: 'block-except'
0479      <-Source: end: 'block-except'
0479     <--Switch: end: 'block-except'
0479    <---Source: end: 'block-except'
0479   <----Function: end: 'block-except'
0479  <-----Source: end: 'block-except'
0479 <------Class: end: 'block-except'
0479<-------Source: end: 'block-except'
0480       TryCatch: end-gen
0480       If: begin-gen
0480        Value: begin-gen
0480         OpUnary: begin-gen
0480          OpUnary: expr: 'not'
0480        <-Value: expr: 'not'
0480          Member: begin-gen
0480           Identifier: begin-gen
0480            Identifier: expr: 'qrySubcuentas'
0480           Identifier: end-gen
0480           FunctionCall: begin-gen
0480            FunctionCall: expr: 'exec_()'
0480           FunctionCall: end-gen
0480           Member: expr: 'qrySubcuentas.exec_()'
0480         <-OpUnary: expr: 'qrySubcuentas.exec_()'
0480        <--Value: expr: 'qrySubcuentas.exec_()'
0480          Member: end-gen
0480         OpUnary: end-gen
0480        Value: end-gen
0480        If: line: 'if not qrySubcuentas.exec_():'
0480      <-Source: line: 'if not qrySubcuentas.exec_():'
0480     <--Switch: line: 'if not qrySubcuentas.exec_():'
0480    <---Source: line: 'if not qrySubcuentas.exec_():'
0480   <----Function: line: 'if not qrySubcuentas.exec_():'
0480  <-----Source: line: 'if not qrySubcuentas.exec_():'
0480 <------Class: line: 'if not qrySubcuentas.exec_():'
0480<-------Source: line: 'if not qrySubcuentas.exec_():'
0481        If: begin: 'block-if'
0481      <-Source: begin: 'block-if'
0481     <--Switch: begin: 'block-if'
0481    <---Source: begin: 'block-if'
0481   <----Function: begin: 'block-if'
0481  <-----Source: begin: 'block-if'
0481 <------Class: begin: 'block-if'
0481<-------Source: begin: 'block-if'
0481        Source: begin-gen
0481         InstructionFlow: begin-gen
0481          Value: begin-gen
0481           Identifier: begin-gen
0481            Identifier: expr: 'False'
0481          <-Value: expr: 'False'
0481           Identifier: end-gen
0481          Value: end-gen
0481          InstructionFlow: line: 'return False'
0481        <-Source: line: 'return False'
0481       <--If: line: 'return False'
0481      <---Source: line: 'return False'
0481     <----Switch: line: 'return False'
0481    <-----Source: line: 'return False'
0481   <------Function: line: 'return False'
0481  <-------Source: line: 'return False'
0481 <--------Class: line: 'return False'
0481<---------Source: line: 'return False'
0482         InstructionFlow: end-gen
0482        Source: end-gen
0482        If: end: 'block-if'
0482      <-Source: end: 'block-if'
0482     <--Switch: end: 'block-if'
0482    <---Source: end: 'block-if'
0482   <----Function: end: 'block-if'
0482  <-----Source: end: 'block-if'
0482 <------Class: end: 'block-if'
0482<-------Source: end: 'block-if'
0482       If: end-gen
0482       DeclarationBlock: begin-gen
0482        Variable: begin-gen
0482         Variable: expr: 'idSubcuenta'
0482         Variable: expr: '='
0482         Variable: expr: '""'
0482        Variable: end-gen
0482        DeclarationBlock: line: 'idSubcuenta = ""'
0482      <-Source: line: 'idSubcuenta = ""'
0482     <--Switch: line: 'idSubcuenta = ""'
0482    <---Source: line: 'idSubcuenta = ""'
0482   <----Function: line: 'idSubcuenta = ""'
0482  <-----Source: line: 'idSubcuenta = ""'
0482 <------Class: line: 'idSubcuenta = ""'
0482<-------Source: line: 'idSubcuenta = ""'
0483       DeclarationBlock: end-gen
0483       While: begin-gen
0483        Value: begin-gen
0483         Member: begin-gen
0483          Identifier: begin-gen
0483           Identifier: expr: 'qrySubcuentas'
0483          Identifier: end-gen
0483          FunctionCall: begin-gen
0483           FunctionCall: expr: 'next()'
0483          FunctionCall: end-gen
0483          Member: expr: 'qrySubcuentas.next()'
0483        <-Value: expr: 'qrySubcuentas.next()'
0483         Member: end-gen
0483        Value: end-gen
0483        While: line: 'while qrySubcuentas.next():'
0483      <-Source: line: 'while qrySubcuentas.next():'
0483     <--Switch: line: 'while qrySubcuentas.next():'
0483    <---Source: line: 'while qrySubcuentas.next():'
0483   <----Function: line: 'while qrySubcuentas.next():'
0483  <-----Source: line: 'while qrySubcuentas.next():'
0483 <------Class: line: 'while qrySubcuentas.next():'
0483<-------Source: line: 'while qrySubcuentas.next():'
0484        While: begin: 'block-while'
0484      <-Source: begin: 'block-while'
0484     <--Switch: begin: 'block-while'
0484    <---Source: begin: 'block-while'
0484   <----Function: begin: 'block-while'
0484  <-----Source: begin: 'block-while'
0484 <------Class: begin: 'block-while'
0484<-------Source: begin: 'block-while'
0484        Source: begin-gen
0484         InstructionUpdate: begin-gen
0484          Identifier: begin-gen
0484           Identifier: expr: 'idSubcuenta'
0484          Identifier: end-gen
0484          OpUpdate: begin-gen
0484           OpUpdate: expr: '='
0484          OpUpdate: end-gen
0484          Value: begin-gen
0484           Member: begin-gen
0484            Identifier: begin-gen
0484             Identifier: expr: 'qrySubcuentas'
0484            Identifier: end-gen
0484            FunctionCall: begin-gen
0484             Value: begin-gen
0484              Constant: begin-gen
0484               Constant: ctype: 'String' -> 's.idsubcuenta'
0484               Constant: expr: 'u"s.idsubcuenta"'
0484             <-Value: expr: 'u"s.idsubcuenta"'
0484              Constant: end-gen
0484             Value: end-gen
0484             FunctionCall: expr: 'value(u"s.idsubcuenta")'
0484            FunctionCall: end-gen
0484            Member: expr: 'qrySubcuentas.value(u"s.idsubcuenta")'
0484          <-Value: expr: 'qrySubcuentas.value(u"s.idsubcuenta")'
0484           Member: end-gen
0484          Value: end-gen
0484          InstructionUpdate: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0484        <-Source: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0484       <--While: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0484      <---Source: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0484     <----Switch: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0484    <-----Source: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0484   <------Function: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0484  <-------Source: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0484 <--------Class: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0484<---------Source: line: 'idSubcuenta = qrySubcuentas.value(u"s.idsubcuenta")'
0485         InstructionUpdate: end-gen
0485         If: begin-gen
0485          Expression: begin-gen
0485           FunctionCall: begin-gen
0485            Value: begin-gen
0485             Member: begin-gen
0485              Identifier: begin-gen
0485               Identifier: expr: 'qrySubcuentas'
0485              Identifier: end-gen
0485              FunctionCall: begin-gen
0485               Value: begin-gen
0485                Constant: begin-gen
0485                 Constant: ctype: 'String' -> 's.saldo'
0485                 Constant: expr: 'u"s.saldo"'
0485               <-Value: expr: 'u"s.saldo"'
0485                Constant: end-gen
0485               Value: end-gen
0485               FunctionCall: expr: 'value(u"s.saldo")'
0485              FunctionCall: end-gen
0485              Member: expr: 'qrySubcuentas.value(u"s.saldo")'
0485            <-Value: expr: 'qrySubcuentas.value(u"s.saldo")'
0485             Member: end-gen
0485            Value: end-gen
0485            FunctionCall: expr: 'parseFloat(qrySubcuentas.value(u"s.saldo"))'
0485          <-Expression: expr: 'parseFloat(qrySubcuentas.value(u"s.saldo"))'
0485           FunctionCall: end-gen
0485           Compare: begin-gen
0485            Compare: expr: '!='
0485          <-Expression: expr: '!='
0485           Compare: end-gen
0485           Constant: begin-gen
0485            Constant: ctype: 'Number' -> '0'
0485            Constant: expr: '0'
0485          <-Expression: expr: '0'
0485           Constant: end-gen
0485          Expression: end-gen
0485          If: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0485        <-Source: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0485       <--While: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0485      <---Source: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0485     <----Switch: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0485    <-----Source: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0485   <------Function: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0485  <-------Source: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0485 <--------Class: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0485<---------Source: line: 'if parseFloat(qrySubcuentas.value(u"s.saldo")) != 0:'
0486          If: begin: 'block-if'
0486        <-Source: begin: 'block-if'
0486       <--While: begin: 'block-if'
0486      <---Source: begin: 'block-if'
0486     <----Switch: begin: 'block-if'
0486    <-----Source: begin: 'block-if'
0486   <------Function: begin: 'block-if'
0486  <-------Source: begin: 'block-if'
0486 <--------Class: begin: 'block-if'
0486<---------Source: begin: 'block-if'
0486          Source: begin-gen
0486           InstructionFlow: begin-gen
0486            InstructionFlow: line: 'continue '
0486          <-Source: line: 'continue '
0486         <--If: line: 'continue '
0486        <---Source: line: 'continue '
0486       <----While: line: 'continue '
0486      <-----Source: line: 'continue '
0486     <------Switch: line: 'continue '
0486    <-------Source: line: 'continue '
0486   <--------Function: line: 'continue '
0486  <---------Source: line: 'continue '
0486 <----------Class: line: 'continue '
0486<-----------Source: line: 'continue '
0487           InstructionFlow: end-gen
0487          Source: end-gen
0487          If: end: 'block-if'
0487        <-Source: end: 'block-if'
0487       <--While: end: 'block-if'
0487      <---Source: end: 'block-if'
0487     <----Switch: end: 'block-if'
0487    <-----Source: end: 'block-if'
0487   <------Function: end: 'block-if'
0487  <-------Source: end: 'block-if'
0487 <--------Class: end: 'block-if'
0487<---------Source: end: 'block-if'
0487         If: end-gen
0487         If: begin-gen
0487          Value: begin-gen
0487           Member: begin-gen
0487            Identifier: begin-gen
0487             Identifier: expr: 'util'
0487            Identifier: end-gen
0487            FunctionCall: begin-gen
0487             Value: begin-gen
0487              Constant: begin-gen
0487               Constant: ctype: 'String' -> 'co_partidas'
0487               Constant: expr: 'u"co_partidas"'
0487             <-Value: expr: 'u"co_partidas"'
0487              Constant: end-gen
0487             Value: end-gen
0487             Value: begin-gen
0487              Constant: begin-gen
0487               Constant: ctype: 'String' -> 'idpartida'
0487               Constant: expr: 'u"idpartida"'
0487             <-Value: expr: 'u"idpartida"'
0487              Constant: end-gen
0487             Value: end-gen
0487             Expression: begin-gen
0487              Expression: expr: 'ustr('
0487              Constant: begin-gen
0487               Constant: ctype: 'String' -> 'idsubcuenta = '
0487               Constant: expr: 'u"idsubcuenta = "'
0487             <-Expression: expr: 'u"idsubcuenta = "'
0487              Constant: end-gen
0487              Expression: expr: ','
0487              Identifier: begin-gen
0487               Identifier: expr: 'idSubcuenta'
0487             <-Expression: expr: 'idSubcuenta'
0487              Identifier: end-gen
0487              Expression: expr: ')'
0487             Expression: end-gen
0487             FunctionCall: expr: 'sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta ))'
0487            FunctionCall: end-gen
0487            Member: expr: 'util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta ))'
0487          <-Value: expr: 'util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta ))'
0487           Member: end-gen
0487          Value: end-gen
0487          If: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0487        <-Source: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0487       <--While: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0487      <---Source: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0487     <----Switch: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0487    <-----Source: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0487   <------Function: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0487  <-------Source: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0487 <--------Class: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0487<---------Source: line: 'if util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0488          If: begin: 'block-if'
0488        <-Source: begin: 'block-if'
0488       <--While: begin: 'block-if'
0488      <---Source: begin: 'block-if'
0488     <----Switch: begin: 'block-if'
0488    <-----Source: begin: 'block-if'
0488   <------Function: begin: 'block-if'
0488  <-------Source: begin: 'block-if'
0488 <--------Class: begin: 'block-if'
0488<---------Source: begin: 'block-if'
0488          Source: begin-gen
0488           InstructionFlow: begin-gen
0488            InstructionFlow: line: 'continue '
0488          <-Source: line: 'continue '
0488         <--If: line: 'continue '
0488        <---Source: line: 'continue '
0488       <----While: line: 'continue '
0488      <-----Source: line: 'continue '
0488     <------Switch: line: 'continue '
0488    <-------Source: line: 'continue '
0488   <--------Function: line: 'continue '
0488  <---------Source: line: 'continue '
0488 <----------Class: line: 'continue '
0488<-----------Source: line: 'continue '
0489           InstructionFlow: end-gen
0489          Source: end-gen
0489          If: end: 'block-if'
0489        <-Source: end: 'block-if'
0489       <--While: end: 'block-if'
0489      <---Source: end: 'block-if'
0489     <----Switch: end: 'block-if'
0489    <-----Source: end: 'block-if'
0489   <------Function: end: 'block-if'
0489  <-------Source: end: 'block-if'
0489 <--------Class: end: 'block-if'
0489<---------Source: end: 'block-if'
0489         If: end-gen
0489         If: begin-gen
0489          Value: begin-gen
0489           Member: begin-gen
0489            Identifier: begin-gen
0489             Identifier: expr: 'util'
0489            Identifier: end-gen
0489            FunctionCall: begin-gen
0489             Value: begin-gen
0489              Constant: begin-gen
0489               Constant: ctype: 'String' -> 'co_subcuentascli'
0489               Constant: expr: 'u"co_subcuentascli"'
0489             <-Value: expr: 'u"co_subcuentascli"'
0489              Constant: end-gen
0489             Value: end-gen
0489             Value: begin-gen
0489              Constant: begin-gen
0489               Constant: ctype: 'String' -> 'idsubcuenta'
0489               Constant: expr: 'u"idsubcuenta"'
0489             <-Value: expr: 'u"idsubcuenta"'
0489              Constant: end-gen
0489             Value: end-gen
0489             Expression: begin-gen
0489              Expression: expr: 'ustr('
0489              Constant: begin-gen
0489               Constant: ctype: 'String' -> 'idsubcuenta = '
0489               Constant: expr: 'u"idsubcuenta = "'
0489             <-Expression: expr: 'u"idsubcuenta = "'
0489              Constant: end-gen
0489              Expression: expr: ','
0489              Identifier: begin-gen
0489               Identifier: expr: 'idSubcuenta'
0489             <-Expression: expr: 'idSubcuenta'
0489              Identifier: end-gen
0489              Expression: expr: ','
0489              Constant: begin-gen
0489               Constant: ctype: 'String' -> " AND codcliente <> '"
0489               Constant: expr: 'u" AND codcliente <> \'"'
0489             <-Expression: expr: 'u" AND codcliente <> \'"'
0489              Constant: end-gen
0489              Expression: expr: ','
0489              Member: begin-gen
0489               Identifier: begin-gen
0489                Identifier: expr: 'curCliente'
0489               Identifier: end-gen
0489               FunctionCall: begin-gen
0489                Value: begin-gen
0489                 Constant: begin-gen
0489                  Constant: ctype: 'String' -> 'codcliente'
0489                  Constant: expr: 'u"codcliente"'
0489                <-Value: expr: 'u"codcliente"'
0489                 Constant: end-gen
0489                Value: end-gen
0489                FunctionCall: expr: 'valueBuffer(u"codcliente")'
0489               FunctionCall: end-gen
0489               Member: expr: 'curCliente.valueBuffer(u"codcliente")'
0489             <-Expression: expr: 'curCliente.valueBuffer(u"codcliente")'
0489              Member: end-gen
0489              Expression: expr: ','
0489              Constant: begin-gen
0489               Constant: ctype: 'String' -> "'"
0489               Constant: expr: 'u"\'"'
0489             <-Expression: expr: 'u"\'"'
0489              Constant: end-gen
0489              Expression: expr: ')'
0489             Expression: end-gen
0489             FunctionCall: expr: 'sqlSelect(u"co_subcuentascli", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codcliente <> \'" , curCliente.valueBuffer(u"codcliente") , u"\'" ))'
0489            FunctionCall: end-gen
0489            Member: expr: 'util.sqlSelect(u"co_subcuentascli", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codcliente <> \'" , curCliente.valueBuffer(u"codcliente") , u"\'" ))'
0489          <-Value: expr: 'util.sqlSelect(u"co_subcuentascli", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codcliente <> \'" , curCliente.valueBuffer(u"codcliente") , u"\'" ))'
0489           Member: end-gen
0489          Value: end-gen
0489          If: line: 'if util.sqlSelect(u"co_subcuentascli", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codcliente <> \'" , curCliente.valueBuffer(u"codcliente") , u"\'" )):'
0489        <-Source: line: 'if util.sqlSelect(u"co_subcuentascli", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codcliente <> \'" , curCliente.valueBuffer(u"codcliente") , u"\'" )):'
0489       <--While: line: 'if util.sqlSelect(u"co_subcuentascli", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codcliente <> \'" , curCliente.valueBuffer(u"codcliente") , u"\'" )):'
0489      <---Source: line: 'if util.sqlSelect(u"co_subcuentascli", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codcliente <> \'" , curCliente.valueBuffer(u"codcliente") , u"\'" )):'
0489     <----Switch: line: 'if util.sqlSelect(u"co_subcuentascli", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codcliente <> \'" , curCliente.valueBuffer(u"codcliente") , u"\'" )):'
0489    <-----Source: line: 'if util.sqlSelect(u"co_subcuentascli", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codcliente <> \'" , curCliente.valueBuffer(u"codcliente") , u"\'" )):'
0489   <------Function: line: 'if util.sqlSelect(u"co_subcuentascli", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codcliente <> \'" , curCliente.valueBuffer(u"codcliente") , u"\'" )):'
0489  <-------Source: line: 'if util.sqlSelect(u"co_subcuentascli", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codcliente <> \'" , curCliente.valueBuffer(u"codcliente") , u"\'" )):'
0489 <--------Class: line: 'if util.sqlSelect(u"co_subcuentascli", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codcliente <> \'" , curCliente.valueBuffer(u"codcliente") , u"\'" )):'
0489<---------Source: line: 'if util.sqlSelect(u"co_subcuentascli", u"idsubcuenta", ustr( u"idsubcuenta = " , idSubcuenta , u" AND codcliente <> \'" , curCliente.valueBuffer(u"codcliente") , u"\'" )):'
0490          If: begin: 'block-if'
0490        <-Source: begin: 'block-if'
0490       <--While: begin: 'block-if'
0490      <---Source: begin: 'block-if'
0490     <----Switch: begin: 'block-if'
0490    <-----Source: begin: 'block-if'
0490   <------Function: begin: 'block-if'
0490  <-------Source: begin: 'block-if'
0490 <--------Class: begin: 'block-if'
0490<---------Source: begin: 'block-if'
0490          Source: begin-gen
0490           InstructionFlow: begin-gen
0490            InstructionFlow: line: 'continue '
0490          <-Source: line: 'continue '
0490         <--If: line: 'continue '
0490        <---Source: line: 'continue '
0490       <----While: line: 'continue '
0490      <-----Source: line: 'continue '
0490     <------Switch: line: 'continue '
0490    <-------Source: line: 'continue '
0490   <--------Function: line: 'continue '
0490  <---------Source: line: 'continue '
0490 <----------Class: line: 'continue '
0490<-----------Source: line: 'continue '
0491           InstructionFlow: end-gen
0491          Source: end-gen
0491          If: end: 'block-if'
0491        <-Source: end: 'block-if'
0491       <--While: end: 'block-if'
0491      <---Source: end: 'block-if'
0491     <----Switch: end: 'block-if'
0491    <-----Source: end: 'block-if'
0491   <------Function: end: 'block-if'
0491  <-------Source: end: 'block-if'
0491 <--------Class: end: 'block-if'
0491<---------Source: end: 'block-if'
0491         If: end-gen
0491         If: begin-gen
0491          Value: begin-gen
0491           OpUnary: begin-gen
0491            OpUnary: expr: 'not'
0491          <-Value: expr: 'not'
0491            Member: begin-gen
0491             Identifier: begin-gen
0491              Identifier: expr: 'util'
0491             Identifier: end-gen
0491             FunctionCall: begin-gen
0491              Value: begin-gen
0491               Constant: begin-gen
0491                Constant: ctype: 'String' -> 'co_subcuentas'
0491                Constant: expr: 'u"co_subcuentas"'
0491              <-Value: expr: 'u"co_subcuentas"'
0491               Constant: end-gen
0491              Value: end-gen
0491              Expression: begin-gen
0491               Expression: expr: 'ustr('
0491               Constant: begin-gen
0491                Constant: ctype: 'String' -> 'idsubcuenta = '
0491                Constant: expr: 'u"idsubcuenta = "'
0491              <-Expression: expr: 'u"idsubcuenta = "'
0491               Constant: end-gen
0491               Expression: expr: ','
0491               Identifier: begin-gen
0491                Identifier: expr: 'idSubcuenta'
0491              <-Expression: expr: 'idSubcuenta'
0491               Identifier: end-gen
0491               Expression: expr: ')'
0491              Expression: end-gen
0491              FunctionCall: expr: 'sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta ))'
0491             FunctionCall: end-gen
0491             Member: expr: 'util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta ))'
0491           <-OpUnary: expr: 'util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta ))'
0491          <--Value: expr: 'util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta ))'
0491            Member: end-gen
0491           OpUnary: end-gen
0491          Value: end-gen
0491          If: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0491        <-Source: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0491       <--While: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0491      <---Source: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0491     <----Switch: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0491    <-----Source: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0491   <------Function: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0491  <-------Source: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0491 <--------Class: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0491<---------Source: line: 'if not util.sqlDelete(u"co_subcuentas", ustr( u"idsubcuenta = " , idSubcuenta )):'
0492          If: begin: 'block-if'
0492        <-Source: begin: 'block-if'
0492       <--While: begin: 'block-if'
0492      <---Source: begin: 'block-if'
0492     <----Switch: begin: 'block-if'
0492    <-----Source: begin: 'block-if'
0492   <------Function: begin: 'block-if'
0492  <-------Source: begin: 'block-if'
0492 <--------Class: begin: 'block-if'
0492<---------Source: begin: 'block-if'
0492          Source: begin-gen
0492           InstructionFlow: begin-gen
0492            Value: begin-gen
0492             Identifier: begin-gen
0492              Identifier: expr: 'False'
0492            <-Value: expr: 'False'
0492             Identifier: end-gen
0492            Value: end-gen
0492            InstructionFlow: line: 'return False'
0492          <-Source: line: 'return False'
0492         <--If: line: 'return False'
0492        <---Source: line: 'return False'
0492       <----While: line: 'return False'
0492      <-----Source: line: 'return False'
0492     <------Switch: line: 'return False'
0492    <-------Source: line: 'return False'
0492   <--------Function: line: 'return False'
0492  <---------Source: line: 'return False'
0492 <----------Class: line: 'return False'
0492<-----------Source: line: 'return False'
0493           InstructionFlow: end-gen
0493          Source: end-gen
0493          If: end: 'block-if'
0493        <-Source: end: 'block-if'
0493       <--While: end: 'block-if'
0493      <---Source: end: 'block-if'
0493     <----Switch: end: 'block-if'
0493    <-----Source: end: 'block-if'
0493   <------Function: end: 'block-if'
0493  <-------Source: end: 'block-if'
0493 <--------Class: end: 'block-if'
0493<---------Source: end: 'block-if'
0493         If: end-gen
0493        Source: end-gen
0493        While: end: 'block-while'
0493      <-Source: end: 'block-while'
0493     <--Switch: end: 'block-while'
0493    <---Source: end: 'block-while'
0493   <----Function: end: 'block-while'
0493  <-----Source: end: 'block-while'
0493 <------Class: end: 'block-while'
0493<-------Source: end: 'block-while'
0493       While: end-gen
0493      Source: end-gen
0493      Switch: end: 'block-if'
0493    <-Source: end: 'block-if'
0493   <--Function: end: 'block-if'
0493  <---Source: end: 'block-if'
0493 <----Class: end: 'block-if'
0493<-----Source: end: 'block-if'
0493     Switch: end-gen
0493     InstructionFlow: begin-gen
0493      Value: begin-gen
0493       Identifier: begin-gen
0493        Identifier: expr: 'True'
0493      <-Value: expr: 'True'
0493       Identifier: end-gen
0493      Value: end-gen
0493      InstructionFlow: line: 'return True'
0493    <-Source: line: 'return True'
0493   <--Function: line: 'return True'
0493  <---Source: line: 'return True'
0493 <----Class: line: 'return True'
0493<-----Source: line: 'return True'
0495     InstructionFlow: end-gen
0495    Source: end-gen
0495    Function: end: 'block-def-interna_beforeCommit_clientes'
0495  <-Source: end: 'block-def-interna_beforeCommit_clientes'
0495 <--Class: end: 'block-def-interna_beforeCommit_clientes'
0495<---Source: end: 'block-def-interna_beforeCommit_clientes'
0496   Function: end-gen
0496   Function: begin-gen
0496    Variable: begin-gen
0496     Variable: expr: 'curEmpresa'
0496    Variable: end-gen
0496    Function: line: 'def interna_afterCommit_empresa(self, curEmpresa = None):'
0496  <-Source: line: 'def interna_afterCommit_empresa(self, curEmpresa = None):'
0496 <--Class: line: 'def interna_afterCommit_empresa(self, curEmpresa = None):'
0496<---Source: line: 'def interna_afterCommit_empresa(self, curEmpresa = None):'
0497    Function: begin: 'block-def-interna_afterCommit_empresa'
0497  <-Source: begin: 'block-def-interna_afterCommit_empresa'
0497 <--Class: begin: 'block-def-interna_afterCommit_empresa'
0497<---Source: begin: 'block-def-interna_afterCommit_empresa'
0497    Function: end: 'block-def-interna_afterCommit_empresa'
0497  <-Source: end: 'block-def-interna_afterCommit_empresa'
0497 <--Class: end: 'block-def-interna_afterCommit_empresa'
0497<---Source: end: 'block-def-interna_afterCommit_empresa'
0499   Function: end-gen
0499   Function: begin-gen
0499    Variable: begin-gen
0499     Variable: expr: 'curCuenta'
0499    Variable: end-gen
0499    Function: line: 'def interna_beforeCommit_cuentasbcocli(self, curCuenta = None):'
0499  <-Source: line: 'def interna_beforeCommit_cuentasbcocli(self, curCuenta = None):'
0499 <--Class: line: 'def interna_beforeCommit_cuentasbcocli(self, curCuenta = None):'
0499<---Source: line: 'def interna_beforeCommit_cuentasbcocli(self, curCuenta = None):'
0500    Function: begin: 'block-def-interna_beforeCommit_cuentasbcocli'
0500  <-Source: begin: 'block-def-interna_beforeCommit_cuentasbcocli'
0500 <--Class: begin: 'block-def-interna_beforeCommit_cuentasbcocli'
0500<---Source: begin: 'block-def-interna_beforeCommit_cuentasbcocli'
0500    Source: begin-gen
0500     Switch: begin-gen
0500      Value: begin-gen
0500       Member: begin-gen
0500        Identifier: begin-gen
0500         Identifier: expr: 'curCuenta'
0500        Identifier: end-gen
0500        FunctionCall: begin-gen
0500         FunctionCall: expr: 'modeAccess()'
0500        FunctionCall: end-gen
0500        Member: expr: 'curCuenta.modeAccess()'
0500      <-Value: expr: 'curCuenta.modeAccess()'
0500       Member: end-gen
0500      Value: end-gen
0500      Switch: line: 'sbb_when = curCuenta.modeAccess()'
0500    <-Source: line: 'sbb_when = curCuenta.modeAccess()'
0500   <--Function: line: 'sbb_when = curCuenta.modeAccess()'
0500  <---Source: line: 'sbb_when = curCuenta.modeAccess()'
0500 <----Class: line: 'sbb_when = curCuenta.modeAccess()'
0500<-----Source: line: 'sbb_when = curCuenta.modeAccess()'
0501      Switch: line: 'sbb_do_work,sbb_work_done = False,False'
0501    <-Source: line: 'sbb_do_work,sbb_work_done = False,False'
0501   <--Function: line: 'sbb_do_work,sbb_work_done = False,False'
0501  <---Source: line: 'sbb_do_work,sbb_work_done = False,False'
0501 <----Class: line: 'sbb_do_work,sbb_work_done = False,False'
0501<-----Source: line: 'sbb_do_work,sbb_work_done = False,False'
0502      Value: begin-gen
0502       Member: begin-gen
0502        Identifier: begin-gen
0502         Identifier: expr: 'curCuenta'
0502        Identifier: end-gen
0502        Identifier: begin-gen
0502         Identifier: expr: 'Del'
0502        Identifier: end-gen
0502        Member: expr: 'curCuenta.Del'
0502      <-Value: expr: 'curCuenta.Del'
0502       Member: end-gen
0502      Value: end-gen
0502      Switch: line: 'if sbb_when == curCuenta.Del: sbb_do_work,sbb_work_done = True,True'
0502    <-Source: line: 'if sbb_when == curCuenta.Del: sbb_do_work,sbb_work_done = True,True'
0502   <--Function: line: 'if sbb_when == curCuenta.Del: sbb_do_work,sbb_work_done = True,True'
0502  <---Source: line: 'if sbb_when == curCuenta.Del: sbb_do_work,sbb_work_done = True,True'
0502 <----Class: line: 'if sbb_when == curCuenta.Del: sbb_do_work,sbb_work_done = True,True'
0502<-----Source: line: 'if sbb_when == curCuenta.Del: sbb_do_work,sbb_work_done = True,True'
0503      Switch: line: 'if sbb_do_work:'
0503    <-Source: line: 'if sbb_do_work:'
0503   <--Function: line: 'if sbb_do_work:'
0503  <---Source: line: 'if sbb_do_work:'
0503 <----Class: line: 'if sbb_do_work:'
0503<-----Source: line: 'if sbb_do_work:'
0504      Switch: begin: 'block-if'
0504    <-Source: begin: 'block-if'
0504   <--Function: begin: 'block-if'
0504  <---Source: begin: 'block-if'
0504 <----Class: begin: 'block-if'
0504<-----Source: begin: 'block-if'
0504      Source: begin-gen
0504       DeclarationBlock: begin-gen
0504        Variable: begin-gen
0504         Variable: expr: 'util'
0504         Variable: expr: '='
0504         Value: begin-gen
0504          New: begin-gen
0504           Identifier: begin-gen
0504            Identifier: expr: 'FLUtil'
0504          <-New: expr: 'qsatype.FLUtil()'
0504         <--Value: expr: 'qsatype.FLUtil()'
0504        <---Variable: expr: 'qsatype.FLUtil()'
0504           Identifier: end-gen
0504          New: end-gen
0504         Value: end-gen
0504        Variable: end-gen
0504        DeclarationBlock: line: 'util = qsatype.FLUtil()'
0504      <-Source: line: 'util = qsatype.FLUtil()'
0504     <--Switch: line: 'util = qsatype.FLUtil()'
0504    <---Source: line: 'util = qsatype.FLUtil()'
0504   <----Function: line: 'util = qsatype.FLUtil()'
0504  <-----Source: line: 'util = qsatype.FLUtil()'
0504 <------Class: line: 'util = qsatype.FLUtil()'
0504<-------Source: line: 'util = qsatype.FLUtil()'
0505       DeclarationBlock: end-gen
0505       DeclarationBlock: begin-gen
0505        Variable: begin-gen
0505         Variable: expr: 'codRecibo'
0505         Variable: expr: '='
0505         Value: begin-gen
0505          Member: begin-gen
0505           Identifier: begin-gen
0505            Identifier: expr: 'util'
0505           Identifier: end-gen
0505           FunctionCall: begin-gen
0505            Value: begin-gen
0505             Constant: begin-gen
0505              Constant: ctype: 'String' -> 'reciboscli'
0505              Constant: expr: 'u"reciboscli"'
0505            <-Value: expr: 'u"reciboscli"'
0505             Constant: end-gen
0505            Value: end-gen
0505            Value: begin-gen
0505             Constant: begin-gen
0505              Constant: ctype: 'String' -> 'codigo'
0505              Constant: expr: 'u"codigo"'
0505            <-Value: expr: 'u"codigo"'
0505             Constant: end-gen
0505            Value: end-gen
0505            Expression: begin-gen
0505             Expression: expr: 'ustr('
0505             Constant: begin-gen
0505              Constant: ctype: 'String' -> "codcliente = '"
0505              Constant: expr: 'u"codcliente = \'"'
0505            <-Expression: expr: 'u"codcliente = \'"'
0505             Constant: end-gen
0505             Expression: expr: ','
0505             Member: begin-gen
0505              Identifier: begin-gen
0505               Identifier: expr: 'curCuenta'
0505              Identifier: end-gen
0505              FunctionCall: begin-gen
0505               Value: begin-gen
0505                Constant: begin-gen
0505                 Constant: ctype: 'String' -> 'codcliente'
0505                 Constant: expr: 'u"codcliente"'
0505               <-Value: expr: 'u"codcliente"'
0505                Constant: end-gen
0505               Value: end-gen
0505               FunctionCall: expr: 'valueBuffer(u"codcliente")'
0505              FunctionCall: end-gen
0505              Member: expr: 'curCuenta.valueBuffer(u"codcliente")'
0505            <-Expression: expr: 'curCuenta.valueBuffer(u"codcliente")'
0505             Member: end-gen
0505             Expression: expr: ','
0505             Constant: begin-gen
0505              Constant: ctype: 'String' -> "' AND codcuenta = '"
0505              Constant: expr: 'u"\' AND codcuenta = \'"'
0505            <-Expression: expr: 'u"\' AND codcuenta = \'"'
0505             Constant: end-gen
0505             Expression: expr: ','
0505             Member: begin-gen
0505              Identifier: begin-gen
0505               Identifier: expr: 'curCuenta'
0505              Identifier: end-gen
0505              FunctionCall: begin-gen
0505               Value: begin-gen
0505                Constant: begin-gen
0505                 Constant: ctype: 'String' -> 'codcuenta'
0505                 Constant: expr: 'u"codcuenta"'
0505               <-Value: expr: 'u"codcuenta"'
0505                Constant: end-gen
0505               Value: end-gen
0505               FunctionCall: expr: 'valueBuffer(u"codcuenta")'
0505              FunctionCall: end-gen
0505              Member: expr: 'curCuenta.valueBuffer(u"codcuenta")'
0505            <-Expression: expr: 'curCuenta.valueBuffer(u"codcuenta")'
0505             Member: end-gen
0505             Expression: expr: ','
0505             Constant: begin-gen
0505              Constant: ctype: 'String' -> "' AND estado <> 'Pagado'"
0505              Constant: expr: 'u"\' AND estado <> \'Pagado\'"'
0505            <-Expression: expr: 'u"\' AND estado <> \'Pagado\'"'
0505             Constant: end-gen
0505             Expression: expr: ')'
0505            Expression: end-gen
0505            FunctionCall: expr: 'sqlSelect(u"reciboscli", u"codigo", ustr( u"codcliente = \'" , curCuenta.valueBuffer(u"codcliente") , u"\' AND codcuenta = \'" , curCuenta.valueBuffer(u"codcuenta") , u"\' AND estado <> \'Pagado\'" ))'
0505           FunctionCall: end-gen
0505           Member: expr: 'util.sqlSelect(u"reciboscli", u"codigo", ustr( u"codcliente = \'" , curCuenta.valueBuffer(u"codcliente") , u"\' AND codcuenta = \'" , curCuenta.valueBuffer(u"codcuenta") , u"\' AND estado <> \'Pagado\'" ))'
0505         <-Value: expr: 'util.sqlSelect(u"reciboscli", u"codigo", ustr( u"codcliente = \'" , curCuenta.valueBuffer(u"codcliente") , u"\' AND codcuenta = \'" , curCuenta.valueBuffer(u"codcuenta") , u"\' AND estado <> \'Pagado\'" ))'
0505        <--Variable: expr: 'util.sqlSelect(u"reciboscli", u"codigo", ustr( u"codcliente = \'" , curCuenta.valueBuffer(u"codcliente") , u"\' AND codcuenta = \'" , curCuenta.valueBuffer(u"codcuenta") , u"\' AND estado <> \'Pagado\'" ))'
0505          Member: end-gen
0505         Value: end-gen
0505        Variable: end-gen
0505        DeclarationBlock: line: 'codRecibo = util.sqlSelect(u"reciboscli", u"codigo", ustr( u"codcliente = \'" , curCuenta.valueBuffer(u"codcliente") , u"\' AND codcuenta = \'" , curCuenta.valueBuffer(u"codcuenta") , u"\' AND estado <> \'Pagado\'" ))'
0505      <-Source: line: 'codRecibo = util.sqlSelect(u"reciboscli", u"codigo", ustr( u"codcliente = \'" , curCuenta.valueBuffer(u"codcliente") , u"\' AND codcuenta = \'" , curCuenta.valueBuffer(u"codcuenta") , u"\' AND estado <> \'Pagado\'" ))'
0505     <--Switch: line: 'codRecibo = util.sqlSelect(u"reciboscli", u"codigo", ustr( u"codcliente = \'" , curCuenta.valueBuffer(u"codcliente") , u"\' AND codcuenta = \'" , curCuenta.valueBuffer(u"codcuenta") , u"\' AND estado <> \'Pagado\'" ))'
0505    <---Source: line: 'codRecibo = util.sqlSelect(u"reciboscli", u"codigo", ustr( u"codcliente = \'" , curCuenta.valueBuffer(u"codcliente") , u"\' AND codcuenta = \'" , curCuenta.valueBuffer(u"codcuenta") , u"\' AND estado <> \'Pagado\'" ))'
0505   <----Function: line: 'codRecibo = util.sqlSelect(u"reciboscli", u"codigo", ustr( u"codcliente = \'" , curCuenta.valueBuffer(u"codcliente") , u"\' AND codcuenta = \'" , curCuenta.valueBuffer(u"codcuenta") , u"\' AND estado <> \'Pagado\'" ))'
0505  <-----Source: line: 'codRecibo = util.sqlSelect(u"reciboscli", u"codigo", ustr( u"codcliente = \'" , curCuenta.valueBuffer(u"codcliente") , u"\' AND codcuenta = \'" , curCuenta.valueBuffer(u"codcuenta") , u"\' AND estado <> \'Pagado\'" ))'
0505 <------Class: line: 'codRecibo = util.sqlSelect(u"reciboscli", u"codigo", ustr( u"codcliente = \'" , curCuenta.valueBuffer(u"codcliente") , u"\' AND codcuenta = \'" , curCuenta.valueBuffer(u"codcuenta") , u"\' AND estado <> \'Pagado\'" ))'
0505<-------Source: line: 'codRecibo = util.sqlSelect(u"reciboscli", u"codigo", ustr( u"codcliente = \'" , curCuenta.valueBuffer(u"codcliente") , u"\' AND codcuenta = \'" , curCuenta.valueBuffer(u"codcuenta") , u"\' AND estado <> \'Pagado\'" ))'
0506       DeclarationBlock: end-gen
0506       If: begin-gen
0506        Expression: begin-gen
0506         Identifier: begin-gen
0506          Identifier: expr: 'codRecibo'
0506        <-Expression: expr: 'codRecibo'
0506         Identifier: end-gen
0506         Compare: begin-gen
0506          Compare: expr: 'and'
0506        <-Expression: expr: 'and'
0506         Compare: end-gen
0506         Identifier: begin-gen
0506          Identifier: expr: 'codRecibo'
0506        <-Expression: expr: 'codRecibo'
0506         Identifier: end-gen
0506         Compare: begin-gen
0506          Compare: expr: '!='
0506        <-Expression: expr: '!='
0506         Compare: end-gen
0506         Constant: begin-gen
0506          Constant: ctype: 'String' -> ''
0506          Constant: expr: 'u""'
0506        <-Expression: expr: 'u""'
0506         Constant: end-gen
0506        Expression: end-gen
0506        If: line: 'if codRecibo and codRecibo != u"":'
0506      <-Source: line: 'if codRecibo and codRecibo != u"":'
0506     <--Switch: line: 'if codRecibo and codRecibo != u"":'
0506    <---Source: line: 'if codRecibo and codRecibo != u"":'
0506   <----Function: line: 'if codRecibo and codRecibo != u"":'
0506  <-----Source: line: 'if codRecibo and codRecibo != u"":'
0506 <------Class: line: 'if codRecibo and codRecibo != u"":'
0506<-------Source: line: 'if codRecibo and codRecibo != u"":'
0507        If: begin: 'block-if'
0507      <-Source: begin: 'block-if'
0507     <--Switch: begin: 'block-if'
0507    <---Source: begin: 'block-if'
0507   <----Function: begin: 'block-if'
0507  <-----Source: begin: 'block-if'
0507 <------Class: begin: 'block-if'
0507<-------Source: begin: 'block-if'
0507        Source: begin-gen
0507         InstructionCall: begin-gen
0507          Member: begin-gen
0507           Identifier: begin-gen
0507            Identifier: expr: 'MessageBox'
0507           Identifier: end-gen
0507           FunctionCall: begin-gen
0507            Value: begin-gen
0507             Member: begin-gen
0507              Identifier: begin-gen
0507               Identifier: expr: 'util'
0507              Identifier: end-gen
0507              FunctionCall: begin-gen
0507               Value: begin-gen
0507                Constant: begin-gen
0507                 Constant: ctype: 'String' -> 'scripts'
0507                 Constant: expr: 'u"scripts"'
0507               <-Value: expr: 'u"scripts"'
0507                Constant: end-gen
0507               Value: end-gen
0507               Value: begin-gen
0507                Constant: begin-gen
0507                 Constant: ctype: 'String' -> 'No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.'
0507                 Constant: expr: 'u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla."'
0507               <-Value: expr: 'u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla."'
0507                Constant: end-gen
0507               Value: end-gen
0507               FunctionCall: expr: 'translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.")'
0507              FunctionCall: end-gen
0507              FunctionCall: begin-gen
0507               Value: begin-gen
0507                Identifier: begin-gen
0507                 Identifier: expr: 'codRecibo'
0507               <-Value: expr: 'codRecibo'
0507                Identifier: end-gen
0507               Value: end-gen
0507               FunctionCall: expr: 'arg(codRecibo)'
0507              FunctionCall: end-gen
0507              Member: expr: 'util.translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.").arg(codRecibo)'
0507            <-Value: expr: 'util.translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.").arg(codRecibo)'
0507             Member: end-gen
0507            Value: end-gen
0507            Value: begin-gen
0507             Member: begin-gen
0507              Identifier: begin-gen
0507               Identifier: expr: 'MessageBox'
0507              Identifier: end-gen
0507              Identifier: begin-gen
0507               Identifier: expr: 'Ok'
0507              Identifier: end-gen
0507              Member: expr: 'MessageBox.Ok'
0507            <-Value: expr: 'MessageBox.Ok'
0507             Member: end-gen
0507            Value: end-gen
0507            Value: begin-gen
0507             Member: begin-gen
0507              Identifier: begin-gen
0507               Identifier: expr: 'MessageBox'
0507              Identifier: end-gen
0507              Identifier: begin-gen
0507               Identifier: expr: 'NoButton'
0507              Identifier: end-gen
0507              Member: expr: 'MessageBox.NoButton'
0507            <-Value: expr: 'MessageBox.NoButton'
0507             Member: end-gen
0507            Value: end-gen
0507            FunctionCall: expr: 'warning(util.translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.").arg(codRecibo), MessageBox.Ok, MessageBox.NoButton)'
0507           FunctionCall: end-gen
0507           Member: expr: 'MessageBox.warning(util.translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.").arg(codRecibo), MessageBox.Ok, MessageBox.NoButton)'
0507          Member: end-gen
0507          InstructionCall: line: 'MessageBox.warning(util.translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.").arg(codRecibo), MessageBox.Ok, MessageBox.NoButton)'
0507        <-Source: line: 'MessageBox.warning(util.translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.").arg(codRecibo), MessageBox.Ok, MessageBox.NoButton)'
0507       <--If: line: 'MessageBox.warning(util.translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.").arg(codRecibo), MessageBox.Ok, MessageBox.NoButton)'
0507      <---Source: line: 'MessageBox.warning(util.translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.").arg(codRecibo), MessageBox.Ok, MessageBox.NoButton)'
0507     <----Switch: line: 'MessageBox.warning(util.translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.").arg(codRecibo), MessageBox.Ok, MessageBox.NoButton)'
0507    <-----Source: line: 'MessageBox.warning(util.translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.").arg(codRecibo), MessageBox.Ok, MessageBox.NoButton)'
0507   <------Function: line: 'MessageBox.warning(util.translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.").arg(codRecibo), MessageBox.Ok, MessageBox.NoButton)'
0507  <-------Source: line: 'MessageBox.warning(util.translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.").arg(codRecibo), MessageBox.Ok, MessageBox.NoButton)'
0507 <--------Class: line: 'MessageBox.warning(util.translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.").arg(codRecibo), MessageBox.Ok, MessageBox.NoButton)'
0507<---------Source: line: 'MessageBox.warning(util.translate(u"scripts", u"No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla.").arg(codRecibo), MessageBox.Ok, MessageBox.NoButton)'
0508         InstructionCall: end-gen
0508         InstructionFlow: begin-gen
0508          Value: begin-gen
0508           Identifier: begin-gen
0508            Identifier: expr: 'False'
0508          <-Value: expr: 'False'
0508           Identifier: end-gen
0508          Value: end-gen
0508          InstructionFlow: line: 'return False'
0508        <-Source: line: 'return False'
0508       <--If: line: 'return False'
0508      <---Source: line: 'return False'
0508     <----Switch: line: 'return False'
0508    <-----Source: line: 'return False'
0508   <------Function: line: 'return False'
0508  <-------Source: line: 'return False'
0508 <--------Class: line: 'return False'
0508<---------Source: line: 'return False'
0509         InstructionFlow: end-gen
0509        Source: end-gen
0509        If: end: 'block-if'
0509      <-Source: end: 'block-if'
0509     <--Switch: end: 'block-if'
0509    <---Source: end: 'block-if'
0509   <----Function: end: 'block-if'
0509  <-----Source: end: 'block-if'
0509 <------Class: end: 'block-if'
0509<-------Source: end: 'block-if'
0509       If: end-gen
0509       InstructionFlow: begin-gen
0509        InstructionFlow: break: 'break '
0509      <-Source: break: 'break '
0509     <--Switch: line: 'sbb_do_work = False # BREAK'
0509    <---Source: line: 'sbb_do_work = False # BREAK'
0509   <----Function: line: 'sbb_do_work = False # BREAK'
0509  <-----Source: line: 'sbb_do_work = False # BREAK'
0509 <------Class: line: 'sbb_do_work = False # BREAK'
0509<-------Source: line: 'sbb_do_work = False # BREAK'
0510       InstructionFlow: end-gen
0510      Source: end-gen
0510      Switch: end: 'block-if'
0510    <-Source: end: 'block-if'
0510   <--Function: end: 'block-if'
0510  <---Source: end: 'block-if'
0510 <----Class: end: 'block-if'
0510<-----Source: end: 'block-if'
0510     Switch: end-gen
0510     InstructionFlow: begin-gen
0510      Value: begin-gen
0510       Identifier: begin-gen
0510        Identifier: expr: 'True'
0510      <-Value: expr: 'True'
0510       Identifier: end-gen
0510      Value: end-gen
0510      InstructionFlow: line: 'return True'
0510    <-Source: line: 'return True'
0510   <--Function: line: 'return True'
0510  <---Source: line: 'return True'
0510 <----Class: line: 'return True'
0510<-----Source: line: 'return True'
0512     InstructionFlow: end-gen
0512    Source: end-gen
0512    Function: end: 'block-def-interna_beforeCommit_cuentasbcocli'
0512  <-Source: end: 'block-def-interna_beforeCommit_cuentasbcocli'
0512 <--Class: end: 'block-def-interna_beforeCommit_cuentasbcocli'
0512<---Source: end: 'block-def-interna_beforeCommit_cuentasbcocli'
0513   Function: end-gen
0513   Function: begin-gen
0513    Variable: begin-gen
0513     Variable: expr: 'nombreModulo'
0513    Variable: end-gen
0513    Function: line: 'def oficial_msgNoDisponible(self, nombreModulo = None):'
0513  <-Source: line: 'def oficial_msgNoDisponible(self, nombreModulo = None):'
0513 <--Class: line: 'def oficial_msgNoDisponible(self, nombreModulo = None):'
0513<---Source: line: 'def oficial_msgNoDisponible(self, nombreModulo = None):'
0514    Function: begin: 'block-def-oficial_msgNoDisponible'
0514  <-Source: begin: 'block-def-oficial_msgNoDisponible'
0514 <--Class: begin: 'block-def-oficial_msgNoDisponible'
0514<---Source: begin: 'block-def-oficial_msgNoDisponible'
0514    Source: begin-gen
0514     DeclarationBlock: begin-gen
0514      Variable: begin-gen
0514       Variable: expr: 'util'
0514       Variable: expr: '='
0514       Value: begin-gen
0514        New: begin-gen
0514         FunctionCall: begin-gen
0514          FunctionCall: expr: 'FLUtil()'
0514        <-New: expr: 'qsatype.FLUtil()'
0514       <--Value: expr: 'qsatype.FLUtil()'
0514      <---Variable: expr: 'qsatype.FLUtil()'
0514         FunctionCall: end-gen
0514        New: end-gen
0514       Value: end-gen
0514      Variable: end-gen
0514      DeclarationBlock: line: 'util = qsatype.FLUtil()'
0514    <-Source: line: 'util = qsatype.FLUtil()'
0514   <--Function: line: 'util = qsatype.FLUtil()'
0514  <---Source: line: 'util = qsatype.FLUtil()'
0514 <----Class: line: 'util = qsatype.FLUtil()'
0514<-----Source: line: 'util = qsatype.FLUtil()'
0515     DeclarationBlock: end-gen
0515     InstructionCall: begin-gen
0515      Member: begin-gen
0515       Identifier: begin-gen
0515        Identifier: expr: 'MessageBox'
0515       Identifier: end-gen
0515       FunctionCall: begin-gen
0515        Expression: begin-gen
0515         Member: begin-gen
0515          Identifier: begin-gen
0515           Identifier: expr: 'util'
0515          Identifier: end-gen
0515          FunctionCall: begin-gen
0515           Value: begin-gen
0515            Constant: begin-gen
0515             Constant: ctype: 'String' -> 'scripts'
0515             Constant: expr: 'u"scripts"'
0515           <-Value: expr: 'u"scripts"'
0515            Constant: end-gen
0515           Value: end-gen
0515           Value: begin-gen
0515            Constant: begin-gen
0515             Constant: ctype: 'String' -> "El módulo '"
0515             Constant: expr: 'u"El módulo \'"'
0515           <-Value: expr: 'u"El módulo \'"'
0515            Constant: end-gen
0515           Value: end-gen
0515           FunctionCall: expr: 'translate(u"scripts", u"El módulo \'")'
0515          FunctionCall: end-gen
0515          Member: expr: 'util.translate(u"scripts", u"El módulo \'")'
0515        <-Expression: expr: 'util.translate(u"scripts", u"El módulo \'")'
0515         Member: end-gen
0515         OpMath: begin-gen
0515          OpMath: expr: '+'
0515        <-Expression: expr: '+'
0515         OpMath: end-gen
0515         Identifier: begin-gen
0515          Identifier: expr: 'nombreModulo'
0515        <-Expression: expr: 'nombreModulo'
0515         Identifier: end-gen
0515         OpMath: begin-gen
0515          OpMath: expr: '+'
0515        <-Expression: expr: '+'
0515         OpMath: end-gen
0515         Member: begin-gen
0515          Identifier: begin-gen
0515           Identifier: expr: 'util'
0515          Identifier: end-gen
0515          FunctionCall: begin-gen
0515           Value: begin-gen
0515            Constant: begin-gen
0515             Constant: ctype: 'String' -> 'scripts'
0515             Constant: expr: 'u"scripts"'
0515           <-Value: expr: 'u"scripts"'
0515            Constant: end-gen
0515           Value: end-gen
0515           Value: begin-gen
0515            Constant: begin-gen
0515             Constant: ctype: 'String' -> "' no está disponible."
0515             Constant: expr: 'u"\' no está disponible."'
0515           <-Value: expr: 'u"\' no está disponible."'
0515            Constant: end-gen
0515           Value: end-gen
0515           FunctionCall: expr: 'translate(u"scripts", u"\' no está disponible.")'
0515          FunctionCall: end-gen
0515          Member: expr: 'util.translate(u"scripts", u"\' no está disponible.")'
0515        <-Expression: expr: 'util.translate(u"scripts", u"\' no está disponible.")'
0515         Member: end-gen
0515        Expression: end-gen
0515        Value: begin-gen
0515         Member: begin-gen
0515          Identifier: begin-gen
0515           Identifier: expr: 'MessageBox'
0515          Identifier: end-gen
0515          Identifier: begin-gen
0515           Identifier: expr: 'Ok'
0515          Identifier: end-gen
0515          Member: expr: 'MessageBox.Ok'
0515        <-Value: expr: 'MessageBox.Ok'
0515         Member: end-gen
0515        Value: end-gen
0515        Value: begin-gen
0515         Member: begin-gen
0515          Identifier: begin-gen
0515           Identifier: expr: 'MessageBox'
0515          Identifier: end-gen
0515          Identifier: begin-gen
0515           Identifier: expr: 'NoButton'
0515          Identifier: end-gen
0515          Member: expr: 'MessageBox.NoButton'
0515        <-Value: expr: 'MessageBox.NoButton'
0515         Member: end-gen
0515        Value: end-gen
0515        Value: begin-gen
0515         Member: begin-gen
0515          Identifier: begin-gen
0515           Identifier: expr: 'MessageBox'
0515          Identifier: end-gen
0515          Identifier: begin-gen
0515           Identifier: expr: 'NoButton'
0515          Identifier: end-gen
0515          Member: expr: 'MessageBox.NoButton'
0515        <-Value: expr: 'MessageBox.NoButton'
0515         Member: end-gen
0515        Value: end-gen
0515        FunctionCall: expr: 'information(util.translate(u"scripts", u"El módulo \'") + nombreModulo + util.translate(u"scripts", u"\' no está disponible."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0515       FunctionCall: end-gen
0515       Member: expr: 'MessageBox.information(util.translate(u"scripts", u"El módulo \'") + nombreModulo + util.translate(u"scripts", u"\' no está disponible."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0515      Member: end-gen
0515      InstructionCall: line: 'MessageBox.information(util.translate(u"scripts", u"El módulo \'") + nombreModulo + util.translate(u"scripts", u"\' no está disponible."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0515    <-Source: line: 'MessageBox.information(util.translate(u"scripts", u"El módulo \'") + nombreModulo + util.translate(u"scripts", u"\' no está disponible."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0515   <--Function: line: 'MessageBox.information(util.translate(u"scripts", u"El módulo \'") + nombreModulo + util.translate(u"scripts", u"\' no está disponible."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0515  <---Source: line: 'MessageBox.information(util.translate(u"scripts", u"El módulo \'") + nombreModulo + util.translate(u"scripts", u"\' no está disponible."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0515 <----Class: line: 'MessageBox.information(util.translate(u"scripts", u"El módulo \'") + nombreModulo + util.translate(u"scripts", u"\' no está disponible."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0515<-----Source: line: 'MessageBox.information(util.translate(u"scripts", u"El módulo \'") + nombreModulo + util.translate(u"scripts", u"\' no está disponible."), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0516     InstructionCall: end-gen
0516    Source: end-gen
0516    Function: end: 'block-def-oficial_msgNoDisponible'
0516  <-Source: end: 'block-def-oficial_msgNoDisponible'
0516 <--Class: end: 'block-def-oficial_msgNoDisponible'
0516<---Source: end: 'block-def-oficial_msgNoDisponible'
0517   Function: end-gen
0517   Function: begin-gen
0517    Variable: begin-gen
0517     Variable: expr: 'tabla'
0517    Variable: end-gen
0517    Variable: begin-gen
0517     Variable: expr: 'campos'
0517    Variable: end-gen
0517    Variable: begin-gen
0517     Variable: expr: 'where'
0517    Variable: end-gen
0517    Variable: begin-gen
0517     Variable: expr: 'listaTablas'
0517    Variable: end-gen
0517    Function: line: 'def oficial_ejecutarQry(self, tabla = None, campos = None, where = None, listaTablas = None):'
0517  <-Source: line: 'def oficial_ejecutarQry(self, tabla = None, campos = None, where = None, listaTablas = None):'
0517 <--Class: line: 'def oficial_ejecutarQry(self, tabla = None, campos = None, where = None, listaTablas = None):'
0517<---Source: line: 'def oficial_ejecutarQry(self, tabla = None, campos = None, where = None, listaTablas = None):'
0518    Function: begin: 'block-def-oficial_ejecutarQry'
0518  <-Source: begin: 'block-def-oficial_ejecutarQry'
0518 <--Class: begin: 'block-def-oficial_ejecutarQry'
0518<---Source: begin: 'block-def-oficial_ejecutarQry'
0518    Source: begin-gen
0518     DeclarationBlock: begin-gen
0518      Variable: begin-gen
0518       Variable: expr: 'util'
0518       Variable: expr: '='
0518       Value: begin-gen
0518        New: begin-gen
0518         Identifier: begin-gen
0518          Identifier: expr: 'FLUtil'
0518        <-New: expr: 'qsatype.FLUtil()'
0518       <--Value: expr: 'qsatype.FLUtil()'
0518      <---Variable: expr: 'qsatype.FLUtil()'
0518         Identifier: end-gen
0518        New: end-gen
0518       Value: end-gen
0518      Variable: end-gen
0518      DeclarationBlock: line: 'util = qsatype.FLUtil()'
0518    <-Source: line: 'util = qsatype.FLUtil()'
0518   <--Function: line: 'util = qsatype.FLUtil()'
0518  <---Source: line: 'util = qsatype.FLUtil()'
0518 <----Class: line: 'util = qsatype.FLUtil()'
0518<-----Source: line: 'util = qsatype.FLUtil()'
0519     DeclarationBlock: end-gen
0519     DeclarationBlock: begin-gen
0519      Variable: begin-gen
0519       Variable: expr: 'campo'
0519       Variable: expr: '='
0519       Value: begin-gen
0519        Member: begin-gen
0519         Identifier: begin-gen
0519          Identifier: expr: 'campos'
0519         Identifier: end-gen
0519         FunctionCall: begin-gen
0519          Value: begin-gen
0519           Constant: begin-gen
0519            Constant: ctype: 'String' -> ','
0519            Constant: expr: 'u","'
0519          <-Value: expr: 'u","'
0519           Constant: end-gen
0519          Value: end-gen
0519          FunctionCall: expr: 'split(u",")'
0519         FunctionCall: end-gen
0519         Member: expr: 'campos.split(u",")'
0519       <-Value: expr: 'campos.split(u",")'
0519      <--Variable: expr: 'campos.split(u",")'
0519        Member: end-gen
0519       Value: end-gen
0519      Variable: end-gen
0519      DeclarationBlock: line: 'campo = campos.split(u",")'
0519    <-Source: line: 'campo = campos.split(u",")'
0519   <--Function: line: 'campo = campos.split(u",")'
0519  <---Source: line: 'campo = campos.split(u",")'
0519 <----Class: line: 'campo = campos.split(u",")'
0519<-----Source: line: 'campo = campos.split(u",")'
0520     DeclarationBlock: end-gen
0520     DeclarationBlock: begin-gen
0520      Variable: begin-gen
0520       Variable: expr: 'valor'
0520       Variable: expr: '='
0520       Value: begin-gen
0520        Constant: begin-gen
0520         Constant: ctype: None -> None
0520         Constant: expr: '[]'
0520       <-Value: expr: '[]'
0520      <--Variable: expr: 'qsatype.Array()'
0520        Constant: end-gen
0520       Value: end-gen
0520      Variable: end-gen
0520      DeclarationBlock: line: 'valor = qsatype.Array()'
0520    <-Source: line: 'valor = qsatype.Array()'
0520   <--Function: line: 'valor = qsatype.Array()'
0520  <---Source: line: 'valor = qsatype.Array()'
0520 <----Class: line: 'valor = qsatype.Array()'
0520<-----Source: line: 'valor = qsatype.Array()'
0521     DeclarationBlock: end-gen
0521     InstructionUpdate: begin-gen
0521      ArrayMember: begin-gen
0521       Identifier: begin-gen
0521        Identifier: expr: 'valor'
0521       Identifier: end-gen
0521       Value: begin-gen
0521        Constant: begin-gen
0521         Constant: ctype: 'String' -> 'result'
0521         Constant: expr: 'u"result"'
0521       <-Value: expr: 'u"result"'
0521        Constant: end-gen
0521       Value: end-gen
0521       ArrayMember: expr: 'valor[u"result"]'
0521      ArrayMember: end-gen
0521      OpUpdate: begin-gen
0521       OpUpdate: expr: '='
0521      OpUpdate: end-gen
0521      Value: begin-gen
0521       Constant: begin-gen
0521        Constant: ctype: 'Number' -> '1'
0521        Constant: expr: '1'
0521      <-Value: expr: '1'
0521       Constant: end-gen
0521      Value: end-gen
0521      InstructionUpdate: line: 'valor[u"result"] = 1'
0521    <-Source: line: 'valor[u"result"] = 1'
0521   <--Function: line: 'valor[u"result"] = 1'
0521  <---Source: line: 'valor[u"result"] = 1'
0521 <----Class: line: 'valor[u"result"] = 1'
0521<-----Source: line: 'valor[u"result"] = 1'
0522     InstructionUpdate: end-gen
0522     DeclarationBlock: begin-gen
0522      Variable: begin-gen
0522       Variable: expr: 'query'
0522       Variable: expr: '='
0522       Value: begin-gen
0522        New: begin-gen
0522         FunctionCall: begin-gen
0522          FunctionCall: expr: 'FLSqlQuery()'
0522        <-New: expr: 'qsatype.FLSqlQuery()'
0522       <--Value: expr: 'qsatype.FLSqlQuery()'
0522      <---Variable: expr: 'qsatype.FLSqlQuery()'
0522         FunctionCall: end-gen
0522        New: end-gen
0522       Value: end-gen
0522      Variable: end-gen
0522      DeclarationBlock: line: 'query = qsatype.FLSqlQuery()'
0522    <-Source: line: 'query = qsatype.FLSqlQuery()'
0522   <--Function: line: 'query = qsatype.FLSqlQuery()'
0522  <---Source: line: 'query = qsatype.FLSqlQuery()'
0522 <----Class: line: 'query = qsatype.FLSqlQuery()'
0522<-----Source: line: 'query = qsatype.FLSqlQuery()'
0523     DeclarationBlock: end-gen
0523     If: begin-gen
0523      Value: begin-gen
0523       Identifier: begin-gen
0523        Identifier: expr: 'listaTablas'
0523      <-Value: expr: 'listaTablas'
0523       Identifier: end-gen
0523      Value: end-gen
0523      If: line: 'if listaTablas:'
0523    <-Source: line: 'if listaTablas:'
0523   <--Function: line: 'if listaTablas:'
0523  <---Source: line: 'if listaTablas:'
0523 <----Class: line: 'if listaTablas:'
0523<-----Source: line: 'if listaTablas:'
0524      If: begin: 'block-if'
0524    <-Source: begin: 'block-if'
0524   <--Function: begin: 'block-if'
0524  <---Source: begin: 'block-if'
0524 <----Class: begin: 'block-if'
0524<-----Source: begin: 'block-if'
0524      Source: begin-gen
0524       InstructionCall: begin-gen
0524        Member: begin-gen
0524         Identifier: begin-gen
0524          Identifier: expr: 'query'
0524         Identifier: end-gen
0524         FunctionCall: begin-gen
0524          Value: begin-gen
0524           Identifier: begin-gen
0524            Identifier: expr: 'listaTablas'
0524          <-Value: expr: 'listaTablas'
0524           Identifier: end-gen
0524          Value: end-gen
0524          FunctionCall: expr: 'setTablesList(listaTablas)'
0524         FunctionCall: end-gen
0524         Member: expr: 'query.setTablesList(listaTablas)'
0524        Member: end-gen
0524        InstructionCall: line: 'query.setTablesList(listaTablas)'
0524      <-Source: line: 'query.setTablesList(listaTablas)'
0524     <--If: line: 'query.setTablesList(listaTablas)'
0524    <---Source: line: 'query.setTablesList(listaTablas)'
0524   <----Function: line: 'query.setTablesList(listaTablas)'
0524  <-----Source: line: 'query.setTablesList(listaTablas)'
0524 <------Class: line: 'query.setTablesList(listaTablas)'
0524<-------Source: line: 'query.setTablesList(listaTablas)'
0525       InstructionCall: end-gen
0525      Source: end-gen
0525      If: end: 'block-if'
0525    <-Source: end: 'block-if'
0525   <--Function: end: 'block-if'
0525  <---Source: end: 'block-if'
0525 <----Class: end: 'block-if'
0525<-----Source: end: 'block-if'
0525      If: line: 'else:'
0525    <-Source: line: 'else:'
0525   <--Function: line: 'else:'
0525  <---Source: line: 'else:'
0525 <----Class: line: 'else:'
0525<-----Source: line: 'else:'
0526      If: begin: 'block-else'
0526    <-Source: begin: 'block-else'
0526   <--Function: begin: 'block-else'
0526  <---Source: begin: 'block-else'
0526 <----Class: begin: 'block-else'
0526<-----Source: begin: 'block-else'
0526      Source: begin-gen
0526       InstructionCall: begin-gen
0526        Member: begin-gen
0526         Identifier: begin-gen
0526          Identifier: expr: 'query'
0526         Identifier: end-gen
0526         FunctionCall: begin-gen
0526          Value: begin-gen
0526           Identifier: begin-gen
0526            Identifier: expr: 'tabla'
0526          <-Value: expr: 'tabla'
0526           Identifier: end-gen
0526          Value: end-gen
0526          FunctionCall: expr: 'setTablesList(tabla)'
0526         FunctionCall: end-gen
0526         Member: expr: 'query.setTablesList(tabla)'
0526        Member: end-gen
0526        InstructionCall: line: 'query.setTablesList(tabla)'
0526      <-Source: line: 'query.setTablesList(tabla)'
0526     <--If: line: 'query.setTablesList(tabla)'
0526    <---Source: line: 'query.setTablesList(tabla)'
0526   <----Function: line: 'query.setTablesList(tabla)'
0526  <-----Source: line: 'query.setTablesList(tabla)'
0526 <------Class: line: 'query.setTablesList(tabla)'
0526<-------Source: line: 'query.setTablesList(tabla)'
0527       InstructionCall: end-gen
0527      Source: end-gen
0527      If: end: 'block-else'
0527    <-Source: end: 'block-else'
0527   <--Function: end: 'block-else'
0527  <---Source: end: 'block-else'
0527 <----Class: end: 'block-else'
0527<-----Source: end: 'block-else'
0528     If: end-gen
0528     TryCatch: begin-gen
0528      TryCatch: line: 'try:'
0528    <-Source: line: 'try:'
0528   <--Function: line: 'try:'
0528  <---Source: line: 'try:'
0528 <----Class: line: 'try:'
0528<-----Source: line: 'try:'
0529      TryCatch: begin: 'block-try'
0529    <-Source: begin: 'block-try'
0529   <--Function: begin: 'block-try'
0529  <---Source: begin: 'block-try'
0529 <----Class: begin: 'block-try'
0529<-----Source: begin: 'block-try'
0529      Source: begin-gen
0529       InstructionCall: begin-gen
0529        Member: begin-gen
0529         Identifier: begin-gen
0529          Identifier: expr: 'query'
0529         Identifier: end-gen
0529         FunctionCall: begin-gen
0529          Value: begin-gen
0529           Identifier: begin-gen
0529            Identifier: expr: 'True'
0529          <-Value: expr: 'True'
0529           Identifier: end-gen
0529          Value: end-gen
0529          FunctionCall: expr: 'setForwardOnly(True)'
0529         FunctionCall: end-gen
0529         Member: expr: 'query.setForwardOnly(True)'
0529        Member: end-gen
0529        InstructionCall: line: 'query.setForwardOnly(True)'
0529      <-Source: line: 'query.setForwardOnly(True)'
0529     <--TryCatch: line: 'query.setForwardOnly(True)'
0529    <---Source: line: 'query.setForwardOnly(True)'
0529   <----Function: line: 'query.setForwardOnly(True)'
0529  <-----Source: line: 'query.setForwardOnly(True)'
0529 <------Class: line: 'query.setForwardOnly(True)'
0529<-------Source: line: 'query.setForwardOnly(True)'
0530       InstructionCall: end-gen
0530      Source: end-gen
0530      TryCatch: end: 'block-try'
0530    <-Source: end: 'block-try'
0530   <--Function: end: 'block-try'
0530  <---Source: end: 'block-try'
0530 <----Class: end: 'block-try'
0530<-----Source: end: 'block-try'
0530      Identifier: begin-gen
0530       Identifier: expr: 'e'
0530      Identifier: end-gen
0530      TryCatch: line: 'except Exception as e:'
0530    <-Source: line: 'except Exception as e:'
0530   <--Function: line: 'except Exception as e:'
0530  <---Source: line: 'except Exception as e:'
0530 <----Class: line: 'except Exception as e:'
0530<-----Source: line: 'except Exception as e:'
0531      TryCatch: begin: 'block-except'
0531    <-Source: begin: 'block-except'
0531   <--Function: begin: 'block-except'
0531  <---Source: begin: 'block-except'
0531 <----Class: begin: 'block-except'
0531<-----Source: begin: 'block-except'
0531      TryCatch: line: 'e = traceback.format_exc()'
0531    <-Source: line: 'e = traceback.format_exc()'
0531   <--Function: line: 'e = traceback.format_exc()'
0531  <---Source: line: 'e = traceback.format_exc()'
0531 <----Class: line: 'e = traceback.format_exc()'
0531<-----Source: line: 'e = traceback.format_exc()'
0532      Source: begin-gen
0532      Source: end-gen
0532      TryCatch: end: 'block-except'
0532    <-Source: end: 'block-except'
0532   <--Function: end: 'block-except'
0532  <---Source: end: 'block-except'
0532 <----Class: end: 'block-except'
0532<-----Source: end: 'block-except'
0533     TryCatch: end-gen
0533     InstructionCall: begin-gen
0533      Member: begin-gen
0533       Identifier: begin-gen
0533        Identifier: expr: 'query'
0533       Identifier: end-gen
0533       FunctionCall: begin-gen
0533        Value: begin-gen
0533         Identifier: begin-gen
0533          Identifier: expr: 'campo'
0533        <-Value: expr: 'campo'
0533         Identifier: end-gen
0533        Value: end-gen
0533        FunctionCall: expr: 'setSelect(campo)'
0533       FunctionCall: end-gen
0533       Member: expr: 'query.setSelect(campo)'
0533      Member: end-gen
0533      InstructionCall: line: 'query.setSelect(campo)'
0533    <-Source: line: 'query.setSelect(campo)'
0533   <--Function: line: 'query.setSelect(campo)'
0533  <---Source: line: 'query.setSelect(campo)'
0533 <----Class: line: 'query.setSelect(campo)'
0533<-----Source: line: 'query.setSelect(campo)'
0534     InstructionCall: end-gen
0534     InstructionCall: begin-gen
0534      Member: begin-gen
0534       Identifier: begin-gen
0534        Identifier: expr: 'query'
0534       Identifier: end-gen
0534       FunctionCall: begin-gen
0534        Value: begin-gen
0534         Identifier: begin-gen
0534          Identifier: expr: 'tabla'
0534        <-Value: expr: 'tabla'
0534         Identifier: end-gen
0534        Value: end-gen
0534        FunctionCall: expr: 'setFrom(tabla)'
0534       FunctionCall: end-gen
0534       Member: expr: 'query.setFrom(tabla)'
0534      Member: end-gen
0534      InstructionCall: line: 'query.setFrom(tabla)'
0534    <-Source: line: 'query.setFrom(tabla)'
0534   <--Function: line: 'query.setFrom(tabla)'
0534  <---Source: line: 'query.setFrom(tabla)'
0534 <----Class: line: 'query.setFrom(tabla)'
0534<-----Source: line: 'query.setFrom(tabla)'
0535     InstructionCall: end-gen
0535     InstructionCall: begin-gen
0535      Member: begin-gen
0535       Identifier: begin-gen
0535        Identifier: expr: 'query'
0535       Identifier: end-gen
0535       FunctionCall: begin-gen
0535        Value: begin-gen
0535         Identifier: begin-gen
0535          Identifier: expr: 'where'
0535        <-Value: expr: 'where'
0535         Identifier: end-gen
0535        Value: end-gen
0535        FunctionCall: expr: 'setWhere(where)'
0535       FunctionCall: end-gen
0535       Member: expr: 'query.setWhere(where)'
0535      Member: end-gen
0535      InstructionCall: line: 'query.setWhere(where)'
0535    <-Source: line: 'query.setWhere(where)'
0535   <--Function: line: 'query.setWhere(where)'
0535  <---Source: line: 'query.setWhere(where)'
0535 <----Class: line: 'query.setWhere(where)'
0535<-----Source: line: 'query.setWhere(where)'
0536     InstructionCall: end-gen
0536     If: begin-gen
0536      Value: begin-gen
0536       Member: begin-gen
0536        Identifier: begin-gen
0536         Identifier: expr: 'query'
0536        Identifier: end-gen
0536        FunctionCall: begin-gen
0536         FunctionCall: expr: 'exec_()'
0536        FunctionCall: end-gen
0536        Member: expr: 'query.exec_()'
0536      <-Value: expr: 'query.exec_()'
0536       Member: end-gen
0536      Value: end-gen
0536      If: line: 'if query.exec_():'
0536    <-Source: line: 'if query.exec_():'
0536   <--Function: line: 'if query.exec_():'
0536  <---Source: line: 'if query.exec_():'
0536 <----Class: line: 'if query.exec_():'
0536<-----Source: line: 'if query.exec_():'
0537      If: begin: 'block-if'
0537    <-Source: begin: 'block-if'
0537   <--Function: begin: 'block-if'
0537  <---Source: begin: 'block-if'
0537 <----Class: begin: 'block-if'
0537<-----Source: begin: 'block-if'
0537      Source: begin-gen
0537       If: begin-gen
0537        Value: begin-gen
0537         Member: begin-gen
0537          Identifier: begin-gen
0537           Identifier: expr: 'query'
0537          Identifier: end-gen
0537          FunctionCall: begin-gen
0537           FunctionCall: expr: 'next()'
0537          FunctionCall: end-gen
0537          Member: expr: 'query.next()'
0537        <-Value: expr: 'query.next()'
0537         Member: end-gen
0537        Value: end-gen
0537        If: line: 'if query.next():'
0537      <-Source: line: 'if query.next():'
0537     <--If: line: 'if query.next():'
0537    <---Source: line: 'if query.next():'
0537   <----Function: line: 'if query.next():'
0537  <-----Source: line: 'if query.next():'
0537 <------Class: line: 'if query.next():'
0537<-------Source: line: 'if query.next():'
0538        If: begin: 'block-if'
0538      <-Source: begin: 'block-if'
0538     <--If: begin: 'block-if'
0538    <---Source: begin: 'block-if'
0538   <----Function: begin: 'block-if'
0538  <-----Source: begin: 'block-if'
0538 <------Class: begin: 'block-if'
0538<-------Source: begin: 'block-if'
0538        Source: begin-gen
0538         For: begin-gen
0538          Variable: begin-gen
0538           Variable: expr: 'i'
0538           Variable: expr: '='
0538           Value: begin-gen
0538            Constant: begin-gen
0538             Constant: ctype: 'Number' -> '0'
0538             Constant: expr: '0'
0538           <-Value: expr: '0'
0538          <--Variable: expr: '0'
0538            Constant: end-gen
0538           Value: end-gen
0538          Variable: end-gen
0538          For: line: 'i = 0'
0538        <-Source: line: 'i = 0'
0538       <--If: line: 'i = 0'
0538      <---Source: line: 'i = 0'
0538     <----If: line: 'i = 0'
0538    <-----Source: line: 'i = 0'
0538   <------Function: line: 'i = 0'
0538  <-------Source: line: 'i = 0'
0538 <--------Class: line: 'i = 0'
0538<---------Source: line: 'i = 0'
0539          For: line: 'while_pass = True'
0539        <-Source: line: 'while_pass = True'
0539       <--If: line: 'while_pass = True'
0539      <---Source: line: 'while_pass = True'
0539     <----If: line: 'while_pass = True'
0539    <-----Source: line: 'while_pass = True'
0539   <------Function: line: 'while_pass = True'
0539  <-------Source: line: 'while_pass = True'
0539 <--------Class: line: 'while_pass = True'
0539<---------Source: line: 'while_pass = True'
0540          InlineUpdate: begin-gen
0540           Identifier: begin-gen
0540            Identifier: expr: 'i'
0540           Identifier: end-gen
0540           InlineUpdate: expr: 'i'
0540           InlineUpdate: line+1: 'i += 1'
0540          InlineUpdate: end-gen
0540          Expression: begin-gen
0540           Identifier: begin-gen
0540            Identifier: expr: 'i'
0540          <-Expression: expr: 'i'
0540           Identifier: end-gen
0540           Compare: begin-gen
0540            Compare: expr: '<'
0540          <-Expression: expr: '<'
0540           Compare: end-gen
0540           Member: begin-gen
0540            Identifier: begin-gen
0540             Identifier: expr: 'campo'
0540            Identifier: end-gen
0540            Identifier: begin-gen
0540             Identifier: expr: 'length'
0540            Identifier: end-gen
0540            Member: expr: 'len(campo)'
0540          <-Expression: expr: 'len(campo)'
0540           Member: end-gen
0540          Expression: end-gen
0540          For: line: 'while i < len(campo):'
0540        <-Source: line: 'while i < len(campo):'
0540       <--If: line: 'while i < len(campo):'
0540      <---Source: line: 'while i < len(campo):'
0540     <----If: line: 'while i < len(campo):'
0540    <-----Source: line: 'while i < len(campo):'
0540   <------Function: line: 'while i < len(campo):'
0540  <-------Source: line: 'while i < len(campo):'
0540 <--------Class: line: 'while i < len(campo):'
0540<---------Source: line: 'while i < len(campo):'
0541          For: begin: 'block-for'
0541        <-Source: begin: 'block-for'
0541       <--If: begin: 'block-for'
0541      <---Source: begin: 'block-for'
0541     <----If: begin: 'block-for'
0541    <-----Source: begin: 'block-for'
0541   <------Function: begin: 'block-for'
0541  <-------Source: begin: 'block-for'
0541 <--------Class: begin: 'block-for'
0541<---------Source: begin: 'block-for'
0541          For: line: 'if not while_pass:'
0541        <-Source: line: 'if not while_pass:'
0541       <--If: line: 'if not while_pass:'
0541      <---Source: line: 'if not while_pass:'
0541     <----If: line: 'if not while_pass:'
0541    <-----Source: line: 'if not while_pass:'
0541   <------Function: line: 'if not while_pass:'
0541  <-------Source: line: 'if not while_pass:'
0541 <--------Class: line: 'if not while_pass:'
0541<---------Source: line: 'if not while_pass:'
0542          For: begin: 'block-while_pass'
0542        <-Source: begin: 'block-while_pass'
0542       <--If: begin: 'block-while_pass'
0542      <---Source: begin: 'block-while_pass'
0542     <----If: begin: 'block-while_pass'
0542    <-----Source: begin: 'block-while_pass'
0542   <------Function: begin: 'block-while_pass'
0542  <-------Source: begin: 'block-while_pass'
0542 <--------Class: begin: 'block-while_pass'
0542<---------Source: begin: 'block-while_pass'
0542          For: line: 'i += 1'
0542        <-Source: line: 'i += 1'
0542       <--If: line: 'i += 1'
0542      <---Source: line: 'i += 1'
0542     <----If: line: 'i += 1'
0542    <-----Source: line: 'i += 1'
0542   <------Function: line: 'i += 1'
0542  <-------Source: line: 'i += 1'
0542 <--------Class: line: 'i += 1'
0542<---------Source: line: 'i += 1'
0543          For: line: 'while_pass = True'
0543        <-Source: line: 'while_pass = True'
0543       <--If: line: 'while_pass = True'
0543      <---Source: line: 'while_pass = True'
0543     <----If: line: 'while_pass = True'
0543    <-----Source: line: 'while_pass = True'
0543   <------Function: line: 'while_pass = True'
0543  <-------Source: line: 'while_pass = True'
0543 <--------Class: line: 'while_pass = True'
0543<---------Source: line: 'while_pass = True'
0544          For: line: 'continue'
0544        <-Source: line: 'continue'
0544       <--If: line: 'continue'
0544      <---Source: line: 'continue'
0544     <----If: line: 'continue'
0544    <-----Source: line: 'continue'
0544   <------Function: line: 'continue'
0544  <-------Source: line: 'continue'
0544 <--------Class: line: 'continue'
0544<---------Source: line: 'continue'
0545          For: end: 'block-while_pass'
0545        <-Source: end: 'block-while_pass'
0545       <--If: end: 'block-while_pass'
0545      <---Source: end: 'block-while_pass'
0545     <----If: end: 'block-while_pass'
0545    <-----Source: end: 'block-while_pass'
0545   <------Function: end: 'block-while_pass'
0545  <-------Source: end: 'block-while_pass'
0545 <--------Class: end: 'block-while_pass'
0545<---------Source: end: 'block-while_pass'
0545          For: line: 'while_pass = False'
0545        <-Source: line: 'while_pass = False'
0545       <--If: line: 'while_pass = False'
0545      <---Source: line: 'while_pass = False'
0545     <----If: line: 'while_pass = False'
0545    <-----Source: line: 'while_pass = False'
0545   <------Function: line: 'while_pass = False'
0545  <-------Source: line: 'while_pass = False'
0545 <--------Class: line: 'while_pass = False'
0545<---------Source: line: 'while_pass = False'
0546          Source: begin-gen
0546           InstructionUpdate: begin-gen
0546            ArrayMember: begin-gen
0546             Identifier: begin-gen
0546              Identifier: expr: 'valor'
0546             Identifier: end-gen
0546             Value: begin-gen
0546              ArrayMember: begin-gen
0546               Identifier: begin-gen
0546                Identifier: expr: 'campo'
0546               Identifier: end-gen
0546               Value: begin-gen
0546                Identifier: begin-gen
0546                 Identifier: expr: 'i'
0546               <-Value: expr: 'i'
0546                Identifier: end-gen
0546               Value: end-gen
0546               ArrayMember: expr: 'campo[i]'
0546             <-Value: expr: 'campo[i]'
0546              ArrayMember: end-gen
0546             Value: end-gen
0546             ArrayMember: expr: 'valor[campo[i]]'
0546            ArrayMember: end-gen
0546            OpUpdate: begin-gen
0546             OpUpdate: expr: '='
0546            OpUpdate: end-gen
0546            Value: begin-gen
0546             Member: begin-gen
0546              Identifier: begin-gen
0546               Identifier: expr: 'query'
0546              Identifier: end-gen
0546              FunctionCall: begin-gen
0546               Value: begin-gen
0546                Identifier: begin-gen
0546                 Identifier: expr: 'i'
0546               <-Value: expr: 'i'
0546                Identifier: end-gen
0546               Value: end-gen
0546               FunctionCall: expr: 'value(i)'
0546              FunctionCall: end-gen
0546              Member: expr: 'query.value(i)'
0546            <-Value: expr: 'query.value(i)'
0546             Member: end-gen
0546            Value: end-gen
0546            InstructionUpdate: line: 'valor[campo[i]] = query.value(i)'
0546          <-Source: line: 'valor[campo[i]] = query.value(i)'
0546         <--For: line: 'valor[campo[i]] = query.value(i)'
0546        <---Source: line: 'valor[campo[i]] = query.value(i)'
0546       <----If: line: 'valor[campo[i]] = query.value(i)'
0546      <-----Source: line: 'valor[campo[i]] = query.value(i)'
0546     <------If: line: 'valor[campo[i]] = query.value(i)'
0546    <-------Source: line: 'valor[campo[i]] = query.value(i)'
0546   <--------Function: line: 'valor[campo[i]] = query.value(i)'
0546  <---------Source: line: 'valor[campo[i]] = query.value(i)'
0546 <----------Class: line: 'valor[campo[i]] = query.value(i)'
0546<-----------Source: line: 'valor[campo[i]] = query.value(i)'
0547           InstructionUpdate: end-gen
0547          Source: end-gen
0547          For: line: 'i += 1'
0547        <-Source: line: 'i += 1'
0547       <--If: line: 'i += 1'
0547      <---Source: line: 'i += 1'
0547     <----If: line: 'i += 1'
0547    <-----Source: line: 'i += 1'
0547   <------Function: line: 'i += 1'
0547  <-------Source: line: 'i += 1'
0547 <--------Class: line: 'i += 1'
0547<---------Source: line: 'i += 1'
0548          For: line: 'while_pass = True'
0548        <-Source: line: 'while_pass = True'
0548       <--If: line: 'while_pass = True'
0548      <---Source: line: 'while_pass = True'
0548     <----If: line: 'while_pass = True'
0548    <-----Source: line: 'while_pass = True'
0548   <------Function: line: 'while_pass = True'
0548  <-------Source: line: 'while_pass = True'
0548 <--------Class: line: 'while_pass = True'
0548<---------Source: line: 'while_pass = True'
0549          For: line: 'try:'
0549        <-Source: line: 'try:'
0549       <--If: line: 'try:'
0549      <---Source: line: 'try:'
0549     <----If: line: 'try:'
0549    <-----Source: line: 'try:'
0549   <------Function: line: 'try:'
0549  <-------Source: line: 'try:'
0549 <--------Class: line: 'try:'
0549<---------Source: line: 'try:'
0550          For: begin: 'block-error-catch'
0550        <-Source: begin: 'block-error-catch'
0550       <--If: begin: 'block-error-catch'
0550      <---Source: begin: 'block-error-catch'
0550     <----If: begin: 'block-error-catch'
0550    <-----Source: begin: 'block-error-catch'
0550   <------Function: begin: 'block-error-catch'
0550  <-------Source: begin: 'block-error-catch'
0550 <--------Class: begin: 'block-error-catch'
0550<---------Source: begin: 'block-error-catch'
0550          For: line: 'i < len(campo)'
0550        <-Source: line: 'i < len(campo)'
0550       <--If: line: 'i < len(campo)'
0550      <---Source: line: 'i < len(campo)'
0550     <----If: line: 'i < len(campo)'
0550    <-----Source: line: 'i < len(campo)'
0550   <------Function: line: 'i < len(campo)'
0550  <-------Source: line: 'i < len(campo)'
0550 <--------Class: line: 'i < len(campo)'
0550<---------Source: line: 'i < len(campo)'
0551          For: end: 'block-error-catch'
0551        <-Source: end: 'block-error-catch'
0551       <--If: end: 'block-error-catch'
0551      <---Source: end: 'block-error-catch'
0551     <----If: end: 'block-error-catch'
0551    <-----Source: end: 'block-error-catch'
0551   <------Function: end: 'block-error-catch'
0551  <-------Source: end: 'block-error-catch'
0551 <--------Class: end: 'block-error-catch'
0551<---------Source: end: 'block-error-catch'
0551          For: line: 'except: break'
0551        <-Source: line: 'except: break'
0551       <--If: line: 'except: break'
0551      <---Source: line: 'except: break'
0551     <----If: line: 'except: break'
0551    <-----Source: line: 'except: break'
0551   <------Function: line: 'except: break'
0551  <-------Source: line: 'except: break'
0551 <--------Class: line: 'except: break'
0551<---------Source: line: 'except: break'
0552          For: end: 'block-for'
0552        <-Source: end: 'block-for'
0552       <--If: end: 'block-for'
0552      <---Source: end: 'block-for'
0552     <----If: end: 'block-for'
0552    <-----Source: end: 'block-for'
0552   <------Function: end: 'block-for'
0552  <-------Source: end: 'block-for'
0552 <--------Class: end: 'block-for'
0552<---------Source: end: 'block-for'
0552         For: end-gen
0552        Source: end-gen
0552        If: end: 'block-if'
0552      <-Source: end: 'block-if'
0552     <--If: end: 'block-if'
0552    <---Source: end: 'block-if'
0552   <----Function: end: 'block-if'
0552  <-----Source: end: 'block-if'
0552 <------Class: end: 'block-if'
0552<-------Source: end: 'block-if'
0552        If: line: 'else:'
0552      <-Source: line: 'else:'
0552     <--If: line: 'else:'
0552    <---Source: line: 'else:'
0552   <----Function: line: 'else:'
0552  <-----Source: line: 'else:'
0552 <------Class: line: 'else:'
0552<-------Source: line: 'else:'
0554        If: begin: 'block-else'
0554      <-Source: begin: 'block-else'
0554     <--If: begin: 'block-else'
0554    <---Source: begin: 'block-else'
0554   <----Function: begin: 'block-else'
0554  <-----Source: begin: 'block-else'
0554 <------Class: begin: 'block-else'
0554<-------Source: begin: 'block-else'
0554        Source: begin-gen
0554         InstructionUpdate: begin-gen
0554          Member: begin-gen
0554           Identifier: begin-gen
0554            Identifier: expr: 'valor'
0554           Identifier: end-gen
0554           Identifier: begin-gen
0554            Identifier: expr: 'result'
0554           Identifier: end-gen
0554           Member: expr: 'valor.result'
0554          Member: end-gen
0554          OpUpdate: begin-gen
0554           OpUpdate: expr: '='
0554          OpUpdate: end-gen
0554          Value: begin-gen
0554           OpUnary: begin-gen
0554            OpUnary: expr: '-'
0554          <-Value: expr: '-'
0554            Constant: begin-gen
0554             Constant: ctype: 'Number' -> '1'
0554             Constant: expr: '1'
0554           <-OpUnary: expr: '1'
0554          <--Value: expr: '1'
0554            Constant: end-gen
0554           OpUnary: end-gen
0554          Value: end-gen
0554          InstructionUpdate: line: 'valor.result = - 1'
0554        <-Source: line: 'valor.result = - 1'
0554       <--If: line: 'valor.result = - 1'
0554      <---Source: line: 'valor.result = - 1'
0554     <----If: line: 'valor.result = - 1'
0554    <-----Source: line: 'valor.result = - 1'
0554   <------Function: line: 'valor.result = - 1'
0554  <-------Source: line: 'valor.result = - 1'
0554 <--------Class: line: 'valor.result = - 1'
0554<---------Source: line: 'valor.result = - 1'
0555         InstructionUpdate: end-gen
0555        Source: end-gen
0555        If: end: 'block-else'
0555      <-Source: end: 'block-else'
0555     <--If: end: 'block-else'
0555    <---Source: end: 'block-else'
0555   <----Function: end: 'block-else'
0555  <-----Source: end: 'block-else'
0555 <------Class: end: 'block-else'
0555<-------Source: end: 'block-else'
0556       If: end-gen
0556      Source: end-gen
0556      If: end: 'block-if'
0556    <-Source: end: 'block-if'
0556   <--Function: end: 'block-if'
0556  <---Source: end: 'block-if'
0556 <----Class: end: 'block-if'
0556<-----Source: end: 'block-if'
0556      If: line: 'else:'
0556    <-Source: line: 'else:'
0556   <--Function: line: 'else:'
0556  <---Source: line: 'else:'
0556 <----Class: line: 'else:'
0556<-----Source: line: 'else:'
0558      If: begin: 'block-else'
0558    <-Source: begin: 'block-else'
0558   <--Function: begin: 'block-else'
0558  <---Source: begin: 'block-else'
0558 <----Class: begin: 'block-else'
0558<-----Source: begin: 'block-else'
0558      Source: begin-gen
0558       InstructionCall: begin-gen
0558        Member: begin-gen
0558         Identifier: begin-gen
0558          Identifier: expr: 'MessageBox'
0558         Identifier: end-gen
0558         FunctionCall: begin-gen
0558          Expression: begin-gen
0558           Member: begin-gen
0558            Identifier: begin-gen
0558             Identifier: expr: 'util'
0558            Identifier: end-gen
0558            FunctionCall: begin-gen
0558             Value: begin-gen
0558              Constant: begin-gen
0558               Constant: ctype: 'String' -> 'scripts'
0558               Constant: expr: 'u"scripts"'
0558             <-Value: expr: 'u"scripts"'
0558              Constant: end-gen
0558             Value: end-gen
0558             Value: begin-gen
0558              Constant: begin-gen
0558               Constant: ctype: 'String' -> 'Falló la consulta'
0558               Constant: expr: 'u"Falló la consulta"'
0558             <-Value: expr: 'u"Falló la consulta"'
0558              Constant: end-gen
0558             Value: end-gen
0558             FunctionCall: expr: 'translate(u"scripts", u"Falló la consulta")'
0558            FunctionCall: end-gen
0558            Member: expr: 'util.translate(u"scripts", u"Falló la consulta")'
0558          <-Expression: expr: 'util.translate(u"scripts", u"Falló la consulta")'
0558           Member: end-gen
0558           OpMath: begin-gen
0558            OpMath: expr: '+'
0558          <-Expression: expr: '+'
0558           OpMath: end-gen
0558           Member: begin-gen
0558            Identifier: begin-gen
0558             Identifier: expr: 'query'
0558            Identifier: end-gen
0558            FunctionCall: begin-gen
0558             FunctionCall: expr: 'sql()'
0558            FunctionCall: end-gen
0558            Member: expr: 'query.sql()'
0558          <-Expression: expr: 'query.sql()'
0558           Member: end-gen
0558          Expression: end-gen
0558          Value: begin-gen
0558           Member: begin-gen
0558            Identifier: begin-gen
0558             Identifier: expr: 'MessageBox'
0558            Identifier: end-gen
0558            Identifier: begin-gen
0558             Identifier: expr: 'Ok'
0558            Identifier: end-gen
0558            Member: expr: 'MessageBox.Ok'
0558          <-Value: expr: 'MessageBox.Ok'
0558           Member: end-gen
0558          Value: end-gen
0558          Value: begin-gen
0558           Member: begin-gen
0558            Identifier: begin-gen
0558             Identifier: expr: 'MessageBox'
0558            Identifier: end-gen
0558            Identifier: begin-gen
0558             Identifier: expr: 'NoButton'
0558            Identifier: end-gen
0558            Member: expr: 'MessageBox.NoButton'
0558          <-Value: expr: 'MessageBox.NoButton'
0558           Member: end-gen
0558          Value: end-gen
0558          Value: begin-gen
0558           Member: begin-gen
0558            Identifier: begin-gen
0558             Identifier: expr: 'MessageBox'
0558            Identifier: end-gen
0558            Identifier: begin-gen
0558             Identifier: expr: 'NoButton'
0558            Identifier: end-gen
0558            Member: expr: 'MessageBox.NoButton'
0558          <-Value: expr: 'MessageBox.NoButton'
0558           Member: end-gen
0558          Value: end-gen
0558          FunctionCall: expr: 'critical(util.translate(u"scripts", u"Falló la consulta") + query.sql(), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0558         FunctionCall: end-gen
0558         Member: expr: 'MessageBox.critical(util.translate(u"scripts", u"Falló la consulta") + query.sql(), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0558        Member: end-gen
0558        InstructionCall: line: 'MessageBox.critical(util.translate(u"scripts", u"Falló la consulta") + query.sql(), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0558      <-Source: line: 'MessageBox.critical(util.translate(u"scripts", u"Falló la consulta") + query.sql(), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0558     <--If: line: 'MessageBox.critical(util.translate(u"scripts", u"Falló la consulta") + query.sql(), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0558    <---Source: line: 'MessageBox.critical(util.translate(u"scripts", u"Falló la consulta") + query.sql(), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0558   <----Function: line: 'MessageBox.critical(util.translate(u"scripts", u"Falló la consulta") + query.sql(), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0558  <-----Source: line: 'MessageBox.critical(util.translate(u"scripts", u"Falló la consulta") + query.sql(), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0558 <------Class: line: 'MessageBox.critical(util.translate(u"scripts", u"Falló la consulta") + query.sql(), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0558<-------Source: line: 'MessageBox.critical(util.translate(u"scripts", u"Falló la consulta") + query.sql(), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
0559       InstructionCall: end-gen
0559       InstructionUpdate: begin-gen
0559        Member: begin-gen
0559         Identifier: begin-gen
0559          Identifier: expr: 'valor'
0559         Identifier: end-gen
0559         Identifier: begin-gen
0559          Identifier: expr: 'result'
0559         Identifier: end-gen
0559         Member: expr: 'valor.result'
0559        Member: end-gen
0559        OpUpdate: begin-gen
0559         OpUpdate: expr: '='
0559        OpUpdate: end-gen
0559        Value: begin-gen
0559         Constant: begin-gen
0559          Constant: ctype: 'Number' -> '0'
0559          Constant: expr: '0'
0559        <-Value: expr: '0'
0559         Constant: end-gen
0559        Value: end-gen
0559        InstructionUpdate: line: 'valor.result = 0'
0559      <-Source: line: 'valor.result = 0'
0559     <--If: line: 'valor.result = 0'
0559    <---Source: line: 'valor.result = 0'
0559   <----Function: line: 'valor.result = 0'
0559  <-----Source: line: 'valor.result = 0'
0559 <------Class: line: 'valor.result = 0'
0559<-------Source: line: 'valor.result = 0'
0560       InstructionUpdate: end-gen
0560      Source: end-gen
0560      If: end: 'block-else'
0560    <-Source: end: 'block-else'
0560   <--Function: end: 'block-else'
0560  <---Source: end: 'block-else'
0560 <----Class: end: 'block-else'
0560<-----Source: end: 'block-else'
0561     If: end-gen
0561     InstructionFlow: begin-gen
0561      Value: begin-gen
0561       Identifier: begin-gen
0561        Identifier: expr: 'valor'
0561      <-Value: expr: 'valor'
0561       Identifier: end-gen
0561      Value: end-gen
0561      InstructionFlow: line: 'return valor'
0561    <-Source: line: 'return valor'
0561   <--Function: line: 'return valor'
0561  <---Source: line: 'return valor'
0561 <----Class: line: 'return valor'
0561<-----Source: line: 'return valor'
0562     InstructionFlow: end-gen
0562    Source: end-gen
0562    Function: end: 'block-def-oficial_ejecutarQry'
0562  <-Source: end: 'block-def-oficial_ejecutarQry'
0562 <--Class: end: 'block-def-oficial_ejecutarQry'
0562<---Source: end: 'block-def-oficial_ejecutarQry'
0563   Function: end-gen
0563   Function: begin-gen
0563    Variable: begin-gen
0563     Variable: expr: 'fN'
0563    Variable: end-gen
0563    Function: line: 'def oficial_valorDefectoEmpresa(self, fN = None):'
0563  <-Source: line: 'def oficial_valorDefectoEmpresa(self, fN = None):'
0563 <--Class: line: 'def oficial_valorDefectoEmpresa(self, fN = None):'
0563<---Source: line: 'def oficial_valorDefectoEmpresa(self, fN = None):'
0564    Function: begin: 'block-def-oficial_valorDefectoEmpresa'
0564  <-Source: begin: 'block-def-oficial_valorDefectoEmpresa'
0564 <--Class: begin: 'block-def-oficial_valorDefectoEmpresa'
0564<---Source: begin: 'block-def-oficial_valorDefectoEmpresa'
0564    Source: begin-gen
0564     DeclarationBlock: begin-gen
0564      Variable: begin-gen
0564       Variable: expr: 'query'
0564       Variable: expr: '='
0564       Value: begin-gen
0564        New: begin-gen
0564         FunctionCall: begin-gen
0564          FunctionCall: expr: 'FLSqlQuery()'
0564        <-New: expr: 'qsatype.FLSqlQuery()'
0564       <--Value: expr: 'qsatype.FLSqlQuery()'
0564      <---Variable: expr: 'qsatype.FLSqlQuery()'
0564         FunctionCall: end-gen
0564        New: end-gen
0564       Value: end-gen
0564      Variable: end-gen
0564      DeclarationBlock: line: 'query = qsatype.FLSqlQuery()'
0564    <-Source: line: 'query = qsatype.FLSqlQuery()'
0564   <--Function: line: 'query = qsatype.FLSqlQuery()'
0564  <---Source: line: 'query = qsatype.FLSqlQuery()'
0564 <----Class: line: 'query = qsatype.FLSqlQuery()'
0564<-----Source: line: 'query = qsatype.FLSqlQuery()'
0565     DeclarationBlock: end-gen
0565     InstructionCall: begin-gen
0565      Member: begin-gen
0565       Identifier: begin-gen
0565        Identifier: expr: 'query'
0565       Identifier: end-gen
0565       FunctionCall: begin-gen
0565        Value: begin-gen
0565         Constant: begin-gen
0565          Constant: ctype: 'String' -> 'empresa'
0565          Constant: expr: 'u"empresa"'
0565        <-Value: expr: 'u"empresa"'
0565         Constant: end-gen
0565        Value: end-gen
0565        FunctionCall: expr: 'setTablesList(u"empresa")'
0565       FunctionCall: end-gen
0565       Member: expr: 'query.setTablesList(u"empresa")'
0565      Member: end-gen
0565      InstructionCall: line: 'query.setTablesList(u"empresa")'
0565    <-Source: line: 'query.setTablesList(u"empresa")'
0565   <--Function: line: 'query.setTablesList(u"empresa")'
0565  <---Source: line: 'query.setTablesList(u"empresa")'
0565 <----Class: line: 'query.setTablesList(u"empresa")'
0565<-----Source: line: 'query.setTablesList(u"empresa")'
0566     InstructionCall: end-gen
0566     TryCatch: begin-gen
0566      TryCatch: line: 'try:'
0566    <-Source: line: 'try:'
0566   <--Function: line: 'try:'
0566  <---Source: line: 'try:'
0566 <----Class: line: 'try:'
0566<-----Source: line: 'try:'
0567      TryCatch: begin: 'block-try'
0567    <-Source: begin: 'block-try'
0567   <--Function: begin: 'block-try'
0567  <---Source: begin: 'block-try'
0567 <----Class: begin: 'block-try'
0567<-----Source: begin: 'block-try'
0567      Source: begin-gen
0567       InstructionCall: begin-gen
0567        Member: begin-gen
0567         Identifier: begin-gen
0567          Identifier: expr: 'query'
0567         Identifier: end-gen
0567         FunctionCall: begin-gen
0567          Value: begin-gen
0567           Identifier: begin-gen
0567            Identifier: expr: 'True'
0567          <-Value: expr: 'True'
0567           Identifier: end-gen
0567          Value: end-gen
0567          FunctionCall: expr: 'setForwardOnly(True)'
0567         FunctionCall: end-gen
0567         Member: expr: 'query.setForwardOnly(True)'
0567        Member: end-gen
0567        InstructionCall: line: 'query.setForwardOnly(True)'
0567      <-Source: line: 'query.setForwardOnly(True)'
0567     <--TryCatch: line: 'query.setForwardOnly(True)'
0567    <---Source: line: 'query.setForwardOnly(True)'
0567   <----Function: line: 'query.setForwardOnly(True)'
0567  <-----Source: line: 'query.setForwardOnly(True)'
0567 <------Class: line: 'query.setForwardOnly(True)'
0567<-------Source: line: 'query.setForwardOnly(True)'
0568       InstructionCall: end-gen
0568      Source: end-gen
0568      TryCatch: end: 'block-try'
0568    <-Source: end: 'block-try'
0568   <--Function: end: 'block-try'
0568  <---Source: end: 'block-try'
0568 <----Class: end: 'block-try'
0568<-----Source: end: 'block-try'
0568      Identifier: begin-gen
0568       Identifier: expr: 'e'
0568      Identifier: end-gen
0568      TryCatch: line: 'except Exception as e:'
0568    <-Source: line: 'except Exception as e:'
0568   <--Function: line: 'except Exception as e:'
0568  <---Source: line: 'except Exception as e:'
0568 <----Class: line: 'except Exception as e:'
0568<-----Source: line: 'except Exception as e:'
0569      TryCatch: begin: 'block-except'
0569    <-Source: begin: 'block-except'
0569   <--Function: begin: 'block-except'
0569  <---Source: begin: 'block-except'
0569 <----Class: begin: 'block-except'
0569<-----Source: begin: 'block-except'
0569      TryCatch: line: 'e = traceback.format_exc()'
0569    <-Source: line: 'e = traceback.format_exc()'
0569   <--Function: line: 'e = traceback.format_exc()'
0569  <---Source: line: 'e = traceback.format_exc()'
0569 <----Class: line: 'e = traceback.format_exc()'
0569<-----Source: line: 'e = traceback.format_exc()'
0570      Source: begin-gen
0570      Source: end-gen
0570      TryCatch: end: 'block-except'
0570    <-Source: end: 'block-except'
0570   <--Function: end: 'block-except'
0570  <---Source: end: 'block-except'
0570 <----Class: end: 'block-except'
0570<-----Source: end: 'block-except'
0571     TryCatch: end-gen
0571     InstructionCall: begin-gen
0571      Member: begin-gen
0571       Identifier: begin-gen
0571        Identifier: expr: 'query'
0571       Identifier: end-gen
0571       FunctionCall: begin-gen
0571        Value: begin-gen
0571         Identifier: begin-gen
0571          Identifier: expr: 'fN'
0571        <-Value: expr: 'fN'
0571         Identifier: end-gen
0571        Value: end-gen
0571        FunctionCall: expr: 'setSelect(fN)'
0571       FunctionCall: end-gen
0571       Member: expr: 'query.setSelect(fN)'
0571      Member: end-gen
0571      InstructionCall: line: 'query.setSelect(fN)'
0571    <-Source: line: 'query.setSelect(fN)'
0571   <--Function: line: 'query.setSelect(fN)'
0571  <---Source: line: 'query.setSelect(fN)'
0571 <----Class: line: 'query.setSelect(fN)'
0571<-----Source: line: 'query.setSelect(fN)'
0572     InstructionCall: end-gen
0572     InstructionCall: begin-gen
0572      Member: begin-gen
0572       Identifier: begin-gen
0572        Identifier: expr: 'query'
0572       Identifier: end-gen
0572       FunctionCall: begin-gen
0572        Value: begin-gen
0572         Constant: begin-gen
0572          Constant: ctype: 'String' -> 'empresa'
0572          Constant: expr: 'u"empresa"'
0572        <-Value: expr: 'u"empresa"'
0572         Constant: end-gen
0572        Value: end-gen
0572        FunctionCall: expr: 'setFrom(u"empresa")'
0572       FunctionCall: end-gen
0572       Member: expr: 'query.setFrom(u"empresa")'
0572      Member: end-gen
0572      InstructionCall: line: 'query.setFrom(u"empresa")'
0572    <-Source: line: 'query.setFrom(u"empresa")'
0572   <--Function: line: 'query.setFrom(u"empresa")'
0572  <---Source: line: 'query.setFrom(u"empresa")'
0572 <----Class: line: 'query.setFrom(u"empresa")'
0572<-----Source: line: 'query.setFrom(u"empresa")'
0573     InstructionCall: end-gen
0573     If: begin-gen
0573      Value: begin-gen
0573       Member: begin-gen
0573        Identifier: begin-gen
0573         Identifier: expr: 'query'
0573        Identifier: end-gen
0573        FunctionCall: begin-gen
0573         FunctionCall: expr: 'exec_()'
0573        FunctionCall: end-gen
0573        Member: expr: 'query.exec_()'
0573      <-Value: expr: 'query.exec_()'
0573       Member: end-gen
0573      Value: end-gen
0573      If: line: 'if query.exec_():'
0573    <-Source: line: 'if query.exec_():'
0573   <--Function: line: 'if query.exec_():'
0573  <---Source: line: 'if query.exec_():'
0573 <----Class: line: 'if query.exec_():'
0573<-----Source: line: 'if query.exec_():'
0574      If: begin: 'block-if'
0574    <-Source: begin: 'block-if'
0574   <--Function: begin: 'block-if'
0574  <---Source: begin: 'block-if'
0574 <----Class: begin: 'block-if'
0574<-----Source: begin: 'block-if'
0574      Source: begin-gen
0574       If: begin-gen
0574        Value: begin-gen
0574         Member: begin-gen
0574          Identifier: begin-gen
0574           Identifier: expr: 'query'
0574          Identifier: end-gen
0574          FunctionCall: begin-gen
0574           FunctionCall: expr: 'next()'
0574          FunctionCall: end-gen
0574          Member: expr: 'query.next()'
0574        <-Value: expr: 'query.next()'
0574         Member: end-gen
0574        Value: end-gen
0574        If: line: 'if query.next():'
0574      <-Source: line: 'if query.next():'
0574     <--If: line: 'if query.next():'
0574    <---Source: line: 'if query.next():'
0574   <----Function: line: 'if query.next():'
0574  <-----Source: line: 'if query.next():'
0574 <------Class: line: 'if query.next():'
0574<-------Source: line: 'if query.next():'
0575        If: begin: 'block-if'
0575      <-Source: begin: 'block-if'
0575     <--If: begin: 'block-if'
0575    <---Source: begin: 'block-if'
0575   <----Function: begin: 'block-if'
0575  <-----Source: begin: 'block-if'
0575 <------Class: begin: 'block-if'
0575<-------Source: begin: 'block-if'
0575        Source: begin-gen
0575         InstructionFlow: begin-gen
0575          Value: begin-gen
0575           Member: begin-gen
0575            Identifier: begin-gen
0575             Identifier: expr: 'query'
0575            Identifier: end-gen
0575            FunctionCall: begin-gen
0575             Value: begin-gen
0575              Constant: begin-gen
0575               Constant: ctype: 'Number' -> '0'
0575               Constant: expr: '0'
0575             <-Value: expr: '0'
0575              Constant: end-gen
0575             Value: end-gen
0575             FunctionCall: expr: 'value(0)'
0575            FunctionCall: end-gen
0575            Member: expr: 'query.value(0)'
0575          <-Value: expr: 'query.value(0)'
0575           Member: end-gen
0575          Value: end-gen
0575          InstructionFlow: line: 'return query.value(0)'
0575        <-Source: line: 'return query.value(0)'
0575       <--If: line: 'return query.value(0)'
0575      <---Source: line: 'return query.value(0)'
0575     <----If: line: 'return query.value(0)'
0575    <-----Source: line: 'return query.value(0)'
0575   <------Function: line: 'return query.value(0)'
0575  <-------Source: line: 'return query.value(0)'
0575 <--------Class: line: 'return query.value(0)'
0575<---------Source: line: 'return query.value(0)'
0576         InstructionFlow: end-gen
0576        Source: end-gen
0576        If: end: 'block-if'
0576      <-Source: end: 'block-if'
0576     <--If: end: 'block-if'
0576    <---Source: end: 'block-if'
0576   <----Function: end: 'block-if'
0576  <-----Source: end: 'block-if'
0576 <------Class: end: 'block-if'
0576<-------Source: end: 'block-if'
0576       If: end-gen
0576      Source: end-gen
0576      If: end: 'block-if'
0576    <-Source: end: 'block-if'
0576   <--Function: end: 'block-if'
0576  <---Source: end: 'block-if'
0576 <----Class: end: 'block-if'
0576<-----Source: end: 'block-if'
0576     If: end-gen
0576     InstructionFlow: begin-gen
0576      Value: begin-gen
0576       Constant: begin-gen
0576        Constant: ctype: 'String' -> ''
0576        Constant: expr: 'u""'
0576      <-Value: expr: 'u""'
0576       Constant: end-gen
0576      Value: end-gen
0576      InstructionFlow: line: 'return u""'
0576    <-Source: line: 'return u""'
0576   <--Function: line: 'return u""'
0576  <---Source: line: 'return u""'
0576 <----Class: line: 'return u""'
0576<-----Source: line: 'return u""'
0577     InstructionFlow: end-gen
0577    Source: end-gen
0577    Function: end: 'block-def-oficial_valorDefectoEmpresa'
0577  <-Source: end: 'block-def-oficial_valorDefectoEmpresa'
0577 <--Class: end: 'block-def-oficial_valorDefectoEmpresa'
0577<---Source: end: 'block-def-oficial_valorDefectoEmpresa'
0578   Function: end-gen
0578   Function: begin-gen
0578    Function: line: 'def oficial_ejercicioActual(self):'
0578  <-Source: line: 'def oficial_ejercicioActual(self):'
0578 <--Class: line: 'def oficial_ejercicioActual(self):'
0578<---Source: line: 'def oficial_ejercicioActual(self):'
0579    Function: begin: 'block-def-oficial_ejercicioActual'
0579  <-Source: begin: 'block-def-oficial_ejercicioActual'
0579 <--Class: begin: 'block-def-oficial_ejercicioActual'
0579<---Source: begin: 'block-def-oficial_ejercicioActual'
0579    Source: begin-gen
0579     DeclarationBlock: begin-gen
0579      Variable: begin-gen
0579       Variable: expr: 'util'
0579       Variable: expr: '='
0579       Value: begin-gen
0579        New: begin-gen
0579         Identifier: begin-gen
0579          Identifier: expr: 'FLUtil'
0579        <-New: expr: 'qsatype.FLUtil()'
0579       <--Value: expr: 'qsatype.FLUtil()'
0579      <---Variable: expr: 'qsatype.FLUtil()'
0579         Identifier: end-gen
0579        New: end-gen
0579       Value: end-gen
0579      Variable: end-gen
0579      DeclarationBlock: line: 'util = qsatype.FLUtil()'
0579    <-Source: line: 'util = qsatype.FLUtil()'
0579   <--Function: line: 'util = qsatype.FLUtil()'
0579  <---Source: line: 'util = qsatype.FLUtil()'
0579 <----Class: line: 'util = qsatype.FLUtil()'
0579<-----Source: line: 'util = qsatype.FLUtil()'
0580     DeclarationBlock: end-gen
0580     DeclarationBlock: begin-gen
0580      Variable: begin-gen
0580       Variable: expr: 'codEjercicio'
0580       Variable: expr: '='
0580       Variable: expr: '""'
0580      Variable: end-gen
0580      DeclarationBlock: line: 'codEjercicio = ""'
0580    <-Source: line: 'codEjercicio = ""'
0580   <--Function: line: 'codEjercicio = ""'
0580  <---Source: line: 'codEjercicio = ""'
0580 <----Class: line: 'codEjercicio = ""'
0580<-----Source: line: 'codEjercicio = ""'
0581     DeclarationBlock: end-gen
0581     TryCatch: begin-gen
0581      TryCatch: line: 'try:'
0581    <-Source: line: 'try:'
0581   <--Function: line: 'try:'
0581  <---Source: line: 'try:'
0581 <----Class: line: 'try:'
0581<-----Source: line: 'try:'
0582      TryCatch: begin: 'block-try'
0582    <-Source: begin: 'block-try'
0582   <--Function: begin: 'block-try'
0582  <---Source: begin: 'block-try'
0582 <----Class: begin: 'block-try'
0582<-----Source: begin: 'block-try'
0582      Source: begin-gen
0582       DeclarationBlock: begin-gen
0582        Variable: begin-gen
0582         Variable: expr: 'settingKey'
0582         Variable: expr: '='
0582         Expression: begin-gen
0582          Expression: expr: 'ustr('
0582        <-Variable: expr: 'ustr('
0582          Constant: begin-gen
0582           Constant: ctype: 'String' -> 'ejerUsr_'
0582           Constant: expr: 'u"ejerUsr_"'
0582         <-Expression: expr: 'u"ejerUsr_"'
0582        <--Variable: expr: 'u"ejerUsr_"'
0582          Constant: end-gen
0582          Expression: expr: ','
0582        <-Variable: expr: ','
0582          Member: begin-gen
0582           Identifier: begin-gen
0582            Identifier: expr: 'sys'
0582           Identifier: end-gen
0582           FunctionCall: begin-gen
0582            FunctionCall: expr: 'nameUser()'
0582           FunctionCall: end-gen
0582           Member: expr: 'sys.nameUser()'
0582         <-Expression: expr: 'sys.nameUser()'
0582        <--Variable: expr: 'sys.nameUser()'
0582          Member: end-gen
0582          Expression: expr: ')'
0582        <-Variable: expr: ')'
0582         Expression: end-gen
0582        Variable: end-gen
0582        DeclarationBlock: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0582      <-Source: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0582     <--TryCatch: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0582    <---Source: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0582   <----Function: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0582  <-----Source: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0582 <------Class: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0582<-------Source: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0583       DeclarationBlock: end-gen
0583       InstructionUpdate: begin-gen
0583        Identifier: begin-gen
0583         Identifier: expr: 'codEjercicio'
0583        Identifier: end-gen
0583        OpUpdate: begin-gen
0583         OpUpdate: expr: '='
0583        OpUpdate: end-gen
0583        Value: begin-gen
0583         Member: begin-gen
0583          Identifier: begin-gen
0583           Identifier: expr: 'util'
0583          Identifier: end-gen
0583          FunctionCall: begin-gen
0583           Value: begin-gen
0583            Identifier: begin-gen
0583             Identifier: expr: 'settingKey'
0583           <-Value: expr: 'settingKey'
0583            Identifier: end-gen
0583           Value: end-gen
0583           FunctionCall: expr: 'readDBSettingEntry(settingKey)'
0583          FunctionCall: end-gen
0583          Member: expr: 'util.readDBSettingEntry(settingKey)'
0583        <-Value: expr: 'util.readDBSettingEntry(settingKey)'
0583         Member: end-gen
0583        Value: end-gen
0583        InstructionUpdate: line: 'codEjercicio = util.readDBSettingEntry(settingKey)'
0583      <-Source: line: 'codEjercicio = util.readDBSettingEntry(settingKey)'
0583     <--TryCatch: line: 'codEjercicio = util.readDBSettingEntry(settingKey)'
0583    <---Source: line: 'codEjercicio = util.readDBSettingEntry(settingKey)'
0583   <----Function: line: 'codEjercicio = util.readDBSettingEntry(settingKey)'
0583  <-----Source: line: 'codEjercicio = util.readDBSettingEntry(settingKey)'
0583 <------Class: line: 'codEjercicio = util.readDBSettingEntry(settingKey)'
0583<-------Source: line: 'codEjercicio = util.readDBSettingEntry(settingKey)'
0584       InstructionUpdate: end-gen
0584      Source: end-gen
0584      TryCatch: end: 'block-try'
0584    <-Source: end: 'block-try'
0584   <--Function: end: 'block-try'
0584  <---Source: end: 'block-try'
0584 <----Class: end: 'block-try'
0584<-----Source: end: 'block-try'
0584      Identifier: begin-gen
0584       Identifier: expr: 'e'
0584      Identifier: end-gen
0584      TryCatch: line: 'except Exception as e:'
0584    <-Source: line: 'except Exception as e:'
0584   <--Function: line: 'except Exception as e:'
0584  <---Source: line: 'except Exception as e:'
0584 <----Class: line: 'except Exception as e:'
0584<-----Source: line: 'except Exception as e:'
0585      TryCatch: begin: 'block-except'
0585    <-Source: begin: 'block-except'
0585   <--Function: begin: 'block-except'
0585  <---Source: begin: 'block-except'
0585 <----Class: begin: 'block-except'
0585<-----Source: begin: 'block-except'
0585      TryCatch: line: 'e = traceback.format_exc()'
0585    <-Source: line: 'e = traceback.format_exc()'
0585   <--Function: line: 'e = traceback.format_exc()'
0585  <---Source: line: 'e = traceback.format_exc()'
0585 <----Class: line: 'e = traceback.format_exc()'
0585<-----Source: line: 'e = traceback.format_exc()'
0586      Source: begin-gen
0586      Source: end-gen
0586      TryCatch: end: 'block-except'
0586    <-Source: end: 'block-except'
0586   <--Function: end: 'block-except'
0586  <---Source: end: 'block-except'
0586 <----Class: end: 'block-except'
0586<-----Source: end: 'block-except'
0587     TryCatch: end-gen
0587     If: begin-gen
0587      Value: begin-gen
0587       OpUnary: begin-gen
0587        OpUnary: expr: 'not'
0587      <-Value: expr: 'not'
0587        Identifier: begin-gen
0587         Identifier: expr: 'codEjercicio'
0587       <-OpUnary: expr: 'codEjercicio'
0587      <--Value: expr: 'codEjercicio'
0587        Identifier: end-gen
0587       OpUnary: end-gen
0587      Value: end-gen
0587      If: line: 'if not codEjercicio:'
0587    <-Source: line: 'if not codEjercicio:'
0587   <--Function: line: 'if not codEjercicio:'
0587  <---Source: line: 'if not codEjercicio:'
0587 <----Class: line: 'if not codEjercicio:'
0587<-----Source: line: 'if not codEjercicio:'
0588      If: begin: 'block-if'
0588    <-Source: begin: 'block-if'
0588   <--Function: begin: 'block-if'
0588  <---Source: begin: 'block-if'
0588 <----Class: begin: 'block-if'
0588<-----Source: begin: 'block-if'
0588      Source: begin-gen
0588       InstructionUpdate: begin-gen
0588        Identifier: begin-gen
0588         Identifier: expr: 'codEjercicio'
0588        Identifier: end-gen
0588        OpUpdate: begin-gen
0588         OpUpdate: expr: '='
0588        OpUpdate: end-gen
0588        Value: begin-gen
0588         Member: begin-gen
0588          Identifier: begin-gen
0588           Identifier: expr: 'self'
0588          Identifier: end-gen
0588          Identifier: begin-gen
0588           Identifier: expr: 'iface'
0588          Identifier: end-gen
0588          FunctionCall: begin-gen
0588           Value: begin-gen
0588            Constant: begin-gen
0588             Constant: ctype: 'String' -> 'codejercicio'
0588             Constant: expr: 'u"codejercicio"'
0588           <-Value: expr: 'u"codejercicio"'
0588            Constant: end-gen
0588           Value: end-gen
0588           FunctionCall: expr: 'valorDefectoEmpresa(u"codejercicio")'
0588          FunctionCall: end-gen
0588          Member: expr: 'self.iface.valorDefectoEmpresa(u"codejercicio")'
0588        <-Value: expr: 'self.iface.valorDefectoEmpresa(u"codejercicio")'
0588         Member: end-gen
0588        Value: end-gen
0588        InstructionUpdate: line: 'codEjercicio = self.iface.valorDefectoEmpresa(u"codejercicio")'
0588      <-Source: line: 'codEjercicio = self.iface.valorDefectoEmpresa(u"codejercicio")'
0588     <--If: line: 'codEjercicio = self.iface.valorDefectoEmpresa(u"codejercicio")'
0588    <---Source: line: 'codEjercicio = self.iface.valorDefectoEmpresa(u"codejercicio")'
0588   <----Function: line: 'codEjercicio = self.iface.valorDefectoEmpresa(u"codejercicio")'
0588  <-----Source: line: 'codEjercicio = self.iface.valorDefectoEmpresa(u"codejercicio")'
0588 <------Class: line: 'codEjercicio = self.iface.valorDefectoEmpresa(u"codejercicio")'
0588<-------Source: line: 'codEjercicio = self.iface.valorDefectoEmpresa(u"codejercicio")'
0589       InstructionUpdate: end-gen
0589      Source: end-gen
0589      If: end: 'block-if'
0589    <-Source: end: 'block-if'
0589   <--Function: end: 'block-if'
0589  <---Source: end: 'block-if'
0589 <----Class: end: 'block-if'
0589<-----Source: end: 'block-if'
0589     If: end-gen
0589     InstructionFlow: begin-gen
0589      Value: begin-gen
0589       Identifier: begin-gen
0589        Identifier: expr: 'codEjercicio'
0589      <-Value: expr: 'codEjercicio'
0589       Identifier: end-gen
0589      Value: end-gen
0589      InstructionFlow: line: 'return codEjercicio'
0589    <-Source: line: 'return codEjercicio'
0589   <--Function: line: 'return codEjercicio'
0589  <---Source: line: 'return codEjercicio'
0589 <----Class: line: 'return codEjercicio'
0589<-----Source: line: 'return codEjercicio'
0590     InstructionFlow: end-gen
0590    Source: end-gen
0590    Function: end: 'block-def-oficial_ejercicioActual'
0590  <-Source: end: 'block-def-oficial_ejercicioActual'
0590 <--Class: end: 'block-def-oficial_ejercicioActual'
0590<---Source: end: 'block-def-oficial_ejercicioActual'
0591   Function: end-gen
0591   Function: begin-gen
0591    Variable: begin-gen
0591     Variable: expr: 'codEjercicio'
0591    Variable: end-gen
0591    Function: line: 'def oficial_cambiarEjercicioActual(self, codEjercicio = None):'
0591  <-Source: line: 'def oficial_cambiarEjercicioActual(self, codEjercicio = None):'
0591 <--Class: line: 'def oficial_cambiarEjercicioActual(self, codEjercicio = None):'
0591<---Source: line: 'def oficial_cambiarEjercicioActual(self, codEjercicio = None):'
0592    Function: begin: 'block-def-oficial_cambiarEjercicioActual'
0592  <-Source: begin: 'block-def-oficial_cambiarEjercicioActual'
0592 <--Class: begin: 'block-def-oficial_cambiarEjercicioActual'
0592<---Source: begin: 'block-def-oficial_cambiarEjercicioActual'
0592    Source: begin-gen
0592     DeclarationBlock: begin-gen
0592      Variable: begin-gen
0592       Variable: expr: 'util'
0592       Variable: expr: '='
0592       Value: begin-gen
0592        New: begin-gen
0592         FunctionCall: begin-gen
0592          FunctionCall: expr: 'FLUtil()'
0592        <-New: expr: 'qsatype.FLUtil()'
0592       <--Value: expr: 'qsatype.FLUtil()'
0592      <---Variable: expr: 'qsatype.FLUtil()'
0592         FunctionCall: end-gen
0592        New: end-gen
0592       Value: end-gen
0592      Variable: end-gen
0592      DeclarationBlock: line: 'util = qsatype.FLUtil()'
0592    <-Source: line: 'util = qsatype.FLUtil()'
0592   <--Function: line: 'util = qsatype.FLUtil()'
0592  <---Source: line: 'util = qsatype.FLUtil()'
0592 <----Class: line: 'util = qsatype.FLUtil()'
0592<-----Source: line: 'util = qsatype.FLUtil()'
0593     DeclarationBlock: end-gen
0593     DeclarationBlock: begin-gen
0593      Variable: begin-gen
0593       Variable: expr: 'ok'
0593       Variable: expr: '='
0593       Value: begin-gen
0593        Identifier: begin-gen
0593         Identifier: expr: 'False'
0593       <-Value: expr: 'False'
0593      <--Variable: expr: 'False'
0593        Identifier: end-gen
0593       Value: end-gen
0593      Variable: end-gen
0593      DeclarationBlock: line: 'ok = False'
0593    <-Source: line: 'ok = False'
0593   <--Function: line: 'ok = False'
0593  <---Source: line: 'ok = False'
0593 <----Class: line: 'ok = False'
0593<-----Source: line: 'ok = False'
0594     DeclarationBlock: end-gen
0594     TryCatch: begin-gen
0594      TryCatch: line: 'try:'
0594    <-Source: line: 'try:'
0594   <--Function: line: 'try:'
0594  <---Source: line: 'try:'
0594 <----Class: line: 'try:'
0594<-----Source: line: 'try:'
0595      TryCatch: begin: 'block-try'
0595    <-Source: begin: 'block-try'
0595   <--Function: begin: 'block-try'
0595  <---Source: begin: 'block-try'
0595 <----Class: begin: 'block-try'
0595<-----Source: begin: 'block-try'
0595      Source: begin-gen
0595       DeclarationBlock: begin-gen
0595        Variable: begin-gen
0595         Variable: expr: 'settingKey'
0595         Variable: expr: '='
0595         Expression: begin-gen
0595          Expression: expr: 'ustr('
0595        <-Variable: expr: 'ustr('
0595          Constant: begin-gen
0595           Constant: ctype: 'String' -> 'ejerUsr_'
0595           Constant: expr: 'u"ejerUsr_"'
0595         <-Expression: expr: 'u"ejerUsr_"'
0595        <--Variable: expr: 'u"ejerUsr_"'
0595          Constant: end-gen
0595          Expression: expr: ','
0595        <-Variable: expr: ','
0595          Member: begin-gen
0595           Identifier: begin-gen
0595            Identifier: expr: 'sys'
0595           Identifier: end-gen
0595           FunctionCall: begin-gen
0595            FunctionCall: expr: 'nameUser()'
0595           FunctionCall: end-gen
0595           Member: expr: 'sys.nameUser()'
0595         <-Expression: expr: 'sys.nameUser()'
0595        <--Variable: expr: 'sys.nameUser()'
0595          Member: end-gen
0595          Expression: expr: ')'
0595        <-Variable: expr: ')'
0595         Expression: end-gen
0595        Variable: end-gen
0595        DeclarationBlock: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0595      <-Source: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0595     <--TryCatch: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0595    <---Source: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0595   <----Function: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0595  <-----Source: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0595 <------Class: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0595<-------Source: line: 'settingKey = ustr( u"ejerUsr_" , sys.nameUser() )'
0596       DeclarationBlock: end-gen
0596       InstructionUpdate: begin-gen
0596        Identifier: begin-gen
0596         Identifier: expr: 'ok'
0596        Identifier: end-gen
0596        OpUpdate: begin-gen
0596         OpUpdate: expr: '='
0596        OpUpdate: end-gen
0596        Value: begin-gen
0596         Member: begin-gen
0596          Identifier: begin-gen
0596           Identifier: expr: 'util'
0596          Identifier: end-gen
0596          FunctionCall: begin-gen
0596           Value: begin-gen
0596            Identifier: begin-gen
0596             Identifier: expr: 'settingKey'
0596           <-Value: expr: 'settingKey'
0596            Identifier: end-gen
0596           Value: end-gen
0596           Value: begin-gen
0596            Identifier: begin-gen
0596             Identifier: expr: 'codEjercicio'
0596           <-Value: expr: 'codEjercicio'
0596            Identifier: end-gen
0596           Value: end-gen
0596           FunctionCall: expr: 'writeDBSettingEntry(settingKey, codEjercicio)'
0596          FunctionCall: end-gen
0596          Member: expr: 'util.writeDBSettingEntry(settingKey, codEjercicio)'
0596        <-Value: expr: 'util.writeDBSettingEntry(settingKey, codEjercicio)'
0596         Member: end-gen
0596        Value: end-gen
0596        InstructionUpdate: line: 'ok = util.writeDBSettingEntry(settingKey, codEjercicio)'
0596      <-Source: line: 'ok = util.writeDBSettingEntry(settingKey, codEjercicio)'
0596     <--TryCatch: line: 'ok = util.writeDBSettingEntry(settingKey, codEjercicio)'
0596    <---Source: line: 'ok = util.writeDBSettingEntry(settingKey, codEjercicio)'
0596   <----Function: line: 'ok = util.writeDBSettingEntry(settingKey, codEjercicio)'
0596  <-----Source: line: 'ok = util.writeDBSettingEntry(settingKey, codEjercicio)'
0596 <------Class: line: 'ok = util.writeDBSettingEntry(settingKey, codEjercicio)'
0596<-------Source: line: 'ok = util.writeDBSettingEntry(settingKey, codEjercicio)'
0597       InstructionUpdate: end-gen
0597      Source: end-gen
0597      TryCatch: end: 'block-try'
0597    <-Source: end: 'block-try'
0597   <--Function: end: 'block-try'
0597  <---Source: end: 'block-try'
0597 <----Class: end: 'block-try'
0597<-----Source: end: 'block-try'
0597      Identifier: begin-gen
0597       Identifier: expr: 'e'
0597      Identifier: end-gen
0597      TryCatch: line: 'except Exception as e:'
0597    <-Source: line: 'except Exception as e:'
0597   <--Function: line: 'except Exception as e:'
0597  <---Source: line: 'except Exception as e:'
0597 <----Class: line: 'except Exception as e:'
0597<-----Source: line: 'except Exception as e:'
0598      TryCatch: begin: 'block-except'
0598    <-Source: begin: 'block-except'
0598   <--Function: begin: 'block-except'
0598  <---Source: begin: 'block-except'
0598 <----Class: begin: 'block-except'
0598<-----Source: begin: 'block-except'
0598      TryCatch: line: 'e = traceback.format_exc()'
0598    <-Source: line: 'e = traceback.format_exc()'
0598   <--Function: line: 'e = traceback.format_exc()'
0598  <---Source: line: 'e = traceback.format_exc()'
0598 <----Class: line: 'e = traceback.format_exc()'
0598<-----Source: line: 'e = traceback.format_exc()'
0599      Source: begin-gen
0599      Source: end-gen
0599      TryCatch: end: 'block-except'
0599    <-Source: end: 'block-except'
0599   <--Function: end: 'block-except'
0599  <---Source: end: 'block-except'
0599 <----Class: end: 'block-except'
0599<-----Source: end: 'block-except'
0600     TryCatch: end-gen
0600     InstructionFlow: begin-gen
0600      Value: begin-gen
0600       Identifier: begin-gen
0600        Identifier: expr: 'ok'
0600      <-Value: expr: 'ok'
0600       Identifier: end-gen
0600      Value: end-gen
0600      InstructionFlow: line: 'return ok'
0600    <-Source: line: 'return ok'
0600   <--Function: line: 'return ok'
0600  <---Source: line: 'return ok'
0600 <----Class: line: 'return ok'
0600<-----Source: line: 'return ok'
0601     InstructionFlow: end-gen
0601    Source: end-gen
0601    Function: end: 'block-def-oficial_cambiarEjercicioActual'
0601  <-Source: end: 'block-def-oficial_cambiarEjercicioActual'
0601 <--Class: end: 'block-def-oficial_cambiarEjercicioActual'
0601<---Source: end: 'block-def-oficial_cambiarEjercicioActual'
0602   Function: end-gen
0602   Function: begin-gen
0602    Variable: begin-gen
0602     Variable: expr: 'numero'
0602    Variable: end-gen
0602    Variable: begin-gen
0602     Variable: expr: 'totalCifras'
0602    Variable: end-gen
0602    Function: line: 'def oficial_cerosIzquierda(self, numero = None, totalCifras = None):'
0602  <-Source: line: 'def oficial_cerosIzquierda(self, numero = None, totalCifras = None):'
0602 <--Class: line: 'def oficial_cerosIzquierda(self, numero = None, totalCifras = None):'
0602<---Source: line: 'def oficial_cerosIzquierda(self, numero = None, totalCifras = None):'
0603    Function: begin: 'block-def-oficial_cerosIzquierda'
0603  <-Source: begin: 'block-def-oficial_cerosIzquierda'
0603 <--Class: begin: 'block-def-oficial_cerosIzquierda'
0603<---Source: begin: 'block-def-oficial_cerosIzquierda'
0603    Source: begin-gen
0603     DeclarationBlock: begin-gen
0603      Variable: begin-gen
0603       Variable: expr: 'ret'
0603       Variable: expr: '='
0603       Value: begin-gen
0603        Member: begin-gen
0603         Identifier: begin-gen
0603          Identifier: expr: 'numero'
0603         Identifier: end-gen
0603         FunctionCall: begin-gen
0603          FunctionCall: expr: 'toString()'
0603         FunctionCall: end-gen
0603         Member: expr: 'parseString(numero)'
0603       <-Value: expr: 'parseString(numero)'
0603      <--Variable: expr: 'parseString(numero)'
0603        Member: end-gen
0603       Value: end-gen
0603      Variable: end-gen
0603      DeclarationBlock: line: 'ret = parseString(numero)'
0603    <-Source: line: 'ret = parseString(numero)'
0603   <--Function: line: 'ret = parseString(numero)'
0603  <---Source: line: 'ret = parseString(numero)'
0603 <----Class: line: 'ret = parseString(numero)'
0603<-----Source: line: 'ret = parseString(numero)'
0604     DeclarationBlock: end-gen
0604     DeclarationBlock: begin-gen
0604      Variable: begin-gen
0604       Variable: expr: 'numCeros'
0604       Variable: expr: '='
0604       Expression: begin-gen
0604        Identifier: begin-gen
0604         Identifier: expr: 'totalCifras'
0604       <-Expression: expr: 'totalCifras'
0604      <--Variable: expr: 'totalCifras'
0604        Identifier: end-gen
0604        OpMath: begin-gen
0604         OpMath: expr: '-'
0604       <-Expression: expr: '-'
0604      <--Variable: expr: '-'
0604        OpMath: end-gen
0604        Member: begin-gen
0604         Identifier: begin-gen
0604          Identifier: expr: 'ret'
0604         Identifier: end-gen
0604         Identifier: begin-gen
0604          Identifier: expr: 'length'
0604         Identifier: end-gen
0604         Member: expr: 'len(ret)'
0604       <-Expression: expr: 'len(ret)'
0604      <--Variable: expr: 'len(ret)'
0604        Member: end-gen
0604       Expression: end-gen
0604      Variable: end-gen
0604      DeclarationBlock: line: 'numCeros = totalCifras - len(ret)'
0604    <-Source: line: 'numCeros = totalCifras - len(ret)'
0604   <--Function: line: 'numCeros = totalCifras - len(ret)'
0604  <---Source: line: 'numCeros = totalCifras - len(ret)'
0604 <----Class: line: 'numCeros = totalCifras - len(ret)'
0604<-----Source: line: 'numCeros = totalCifras - len(ret)'
0605     DeclarationBlock: end-gen
0605     For: begin-gen
0605      For: line: 'while_pass = True'
0605    <-Source: line: 'while_pass = True'
0605   <--Function: line: 'while_pass = True'
0605  <---Source: line: 'while_pass = True'
0605 <----Class: line: 'while_pass = True'
0605<-----Source: line: 'while_pass = True'
0606      InlineUpdate: begin-gen
0606       Identifier: begin-gen
0606        Identifier: expr: 'numCeros'
0606       Identifier: end-gen
0606       InlineUpdate: expr: 'numCeros'
0606       InlineUpdate: line: 'numCeros -= 1'
0606      InlineUpdate: end-gen
0606      Expression: begin-gen
0606       Identifier: begin-gen
0606        Identifier: expr: 'numCeros'
0606      <-Expression: expr: 'numCeros'
0606       Identifier: end-gen
0606       Compare: begin-gen
0606        Compare: expr: '>'
0606      <-Expression: expr: '>'
0606       Compare: end-gen
0606       Constant: begin-gen
0606        Constant: ctype: 'Number' -> '0'
0606        Constant: expr: '0'
0606      <-Expression: expr: '0'
0606       Constant: end-gen
0606      Expression: end-gen
0606      For: line: 'while numCeros > 0:'
0606    <-Source: line: 'while numCeros > 0:'
0606   <--Function: line: 'while numCeros > 0:'
0606  <---Source: line: 'while numCeros > 0:'
0606 <----Class: line: 'while numCeros > 0:'
0606<-----Source: line: 'while numCeros > 0:'
0607      For: begin: 'block-for'
0607    <-Source: begin: 'block-for'
0607   <--Function: begin: 'block-for'
0607  <---Source: begin: 'block-for'
0607 <----Class: begin: 'block-for'
0607<-----Source: begin: 'block-for'
0607      For: line: 'if not while_pass:'
0607    <-Source: line: 'if not while_pass:'
0607   <--Function: line: 'if not while_pass:'
0607  <---Source: line: 'if not while_pass:'
0607 <----Class: line: 'if not while_pass:'
0607<-----Source: line: 'if not while_pass:'
0608      For: begin: 'block-while_pass'
0608    <-Source: begin: 'block-while_pass'
0608   <--Function: begin: 'block-while_pass'
0608  <---Source: begin: 'block-while_pass'
0608 <----Class: begin: 'block-while_pass'
0608<-----Source: begin: 'block-while_pass'
0608      For: line: 'numCeros -= 1'
0608    <-Source: line: 'numCeros -= 1'
0608   <--Function: line: 'numCeros -= 1'
0608  <---Source: line: 'numCeros -= 1'
0608 <----Class: line: 'numCeros -= 1'
0608<-----Source: line: 'numCeros -= 1'
0609      For: line: 'while_pass = True'
0609    <-Source: line: 'while_pass = True'
0609   <--Function: line: 'while_pass = True'
0609  <---Source: line: 'while_pass = True'
0609 <----Class: line: 'while_pass = True'
0609<-----Source: line: 'while_pass = True'
0610      For: line: 'continue'
0610    <-Source: line: 'continue'
0610   <--Function: line: 'continue'
0610  <---Source: line: 'continue'
0610 <----Class: line: 'continue'
0610<-----Source: line: 'continue'
0611      For: end: 'block-while_pass'
0611    <-Source: end: 'block-while_pass'
0611   <--Function: end: 'block-while_pass'
0611  <---Source: end: 'block-while_pass'
0611 <----Class: end: 'block-while_pass'
0611<-----Source: end: 'block-while_pass'
0611      For: line: 'while_pass = False'
0611    <-Source: line: 'while_pass = False'
0611   <--Function: line: 'while_pass = False'
0611  <---Source: line: 'while_pass = False'
0611 <----Class: line: 'while_pass = False'
0611<-----Source: line: 'while_pass = False'
0612      Source: begin-gen
0612       InstructionUpdate: begin-gen
0612        Identifier: begin-gen
0612         Identifier: expr: 'ret'
0612        Identifier: end-gen
0612        OpUpdate: begin-gen
0612         OpUpdate: expr: '='
0612        OpUpdate: end-gen
0612        Expression: begin-gen
0612         Expression: expr: 'ustr('
0612         Constant: begin-gen
0612          Constant: ctype: 'String' -> '0'
0612          Constant: expr: 'u"0"'
0612        <-Expression: expr: 'u"0"'
0612         Constant: end-gen
0612         Expression: expr: ','
0612         Identifier: begin-gen
0612          Identifier: expr: 'ret'
0612        <-Expression: expr: 'ret'
0612         Identifier: end-gen
0612         Expression: expr: ')'
0612        Expression: end-gen
0612        InstructionUpdate: line: 'ret = ustr( u"0" , ret )'
0612      <-Source: line: 'ret = ustr( u"0" , ret )'
0612     <--For: line: 'ret = ustr( u"0" , ret )'
0612    <---Source: line: 'ret = ustr( u"0" , ret )'
0612   <----Function: line: 'ret = ustr( u"0" , ret )'
0612  <-----Source: line: 'ret = ustr( u"0" , ret )'
0612 <------Class: line: 'ret = ustr( u"0" , ret )'
0612<-------Source: line: 'ret = ustr( u"0" , ret )'
0613       InstructionUpdate: end-gen
0613      Source: end-gen
0613      For: line: 'numCeros -= 1'
0613    <-Source: line: 'numCeros -= 1'
0613   <--Function: line: 'numCeros -= 1'
0613  <---Source: line: 'numCeros -= 1'
0613 <----Class: line: 'numCeros -= 1'
0613<-----Source: line: 'numCeros -= 1'
0614      For: line: 'while_pass = True'
0614    <-Source: line: 'while_pass = True'
0614   <--Function: line: 'while_pass = True'
0614  <---Source: line: 'while_pass = True'
0614 <----Class: line: 'while_pass = True'
0614<-----Source: line: 'while_pass = True'
0615      For: line: 'try:'
0615    <-Source: line: 'try:'
0615   <--Function: line: 'try:'
0615  <---Source: line: 'try:'
0615 <----Class: line: 'try:'
0615<-----Source: line: 'try:'
0616      For: begin: 'block-error-catch'
0616    <-Source: begin: 'block-error-catch'
0616   <--Function: begin: 'block-error-catch'
0616  <---Source: begin: 'block-error-catch'
0616 <----Class: begin: 'block-error-catch'
0616<-----Source: begin: 'block-error-catch'
0616      For: line: 'numCeros > 0'
0616    <-Source: line: 'numCeros > 0'
0616   <--Function: line: 'numCeros > 0'
0616  <---Source: line: 'numCeros > 0'
0616 <----Class: line: 'numCeros > 0'
0616<-----Source: line: 'numCeros > 0'
0617      For: end: 'block-error-catch'
0617    <-Source: end: 'block-error-catch'
0617   <--Function: end: 'block-error-catch'
0617  <---Source: end: 'block-error-catch'
0617 <----Class: end: 'block-error-catch'
0617<-----Source: end: 'block-error-catch'
0617      For: line: 'except: break'
0617    <-Source: line: 'except: break'
0617   <--Function: line: 'except: break'
0617  <---Source: line: 'except: break'
0617 <----Class: line: 'except: break'
0617<-----Source: line: 'except: break'
0618      For: end: 'block-for'
0618    <-Source: end: 'block-for'
0618   <--Function: end: 'block-for'
0618  <---Source: end: 'block-for'
0618 <----Class: end: 'block-for'
0618<-----Source: end: 'block-for'
0618     For: end-gen
0618     InstructionFlow: begin-gen
0618      Value: begin-gen
0618       Identifier: begin-gen
0618        Identifier: expr: 'ret'
0618      <-Value: expr: 'ret'
0618       Identifier: end-gen
0618      Value: end-gen
0618      InstructionFlow: line: 'return ret'
0618    <-Source: line: 'return ret'
0618   <--Function: line: 'return ret'
0618  <---Source: line: 'return ret'
0618 <----Class: line: 'return ret'
0618<-----Source: line: 'return ret'
0620     InstructionFlow: end-gen
0620    Source: end-gen
0620    Function: end: 'block-def-oficial_cerosIzquierda'
0620  <-Source: end: 'block-def-oficial_cerosIzquierda'
0620 <--Class: end: 'block-def-oficial_cerosIzquierda'
0620<---Source: end: 'block-def-oficial_cerosIzquierda'
0621   Function: end-gen
0621   Function: begin-gen
0621    Variable: begin-gen
0621     Variable: expr: 'texto'
0621    Variable: end-gen
0621    Variable: begin-gen
0621     Variable: expr: 'totalLongitud'
0621    Variable: end-gen
0621    Function: line: 'def oficial_espaciosDerecha(self, texto = None, totalLongitud = None):'
0621  <-Source: line: 'def oficial_espaciosDerecha(self, texto = None, totalLongitud = None):'
0621 <--Class: line: 'def oficial_espaciosDerecha(self, texto = None, totalLongitud = None):'
0621<---Source: line: 'def oficial_espaciosDerecha(self, texto = None, totalLongitud = None):'
0622    Function: begin: 'block-def-oficial_espaciosDerecha'
0622  <-Source: begin: 'block-def-oficial_espaciosDerecha'
0622 <--Class: begin: 'block-def-oficial_espaciosDerecha'
0622<---Source: begin: 'block-def-oficial_espaciosDerecha'
0622    Source: begin-gen
0622     DeclarationBlock: begin-gen
0622      Variable: begin-gen
0622       Variable: expr: 'ret'
0622       Variable: expr: '='
0622       Value: begin-gen
0622        Member: begin-gen
0622         Identifier: begin-gen
0622          Identifier: expr: 'texto'
0622         Identifier: end-gen
0622         FunctionCall: begin-gen
0622          FunctionCall: expr: 'toString()'
0622         FunctionCall: end-gen
0622         Member: expr: 'parseString(texto)'
0622       <-Value: expr: 'parseString(texto)'
0622      <--Variable: expr: 'parseString(texto)'
0622        Member: end-gen
0622       Value: end-gen
0622      Variable: end-gen
0622      DeclarationBlock: line: 'ret = parseString(texto)'
0622    <-Source: line: 'ret = parseString(texto)'
0622   <--Function: line: 'ret = parseString(texto)'
0622  <---Source: line: 'ret = parseString(texto)'
0622 <----Class: line: 'ret = parseString(texto)'
0622<-----Source: line: 'ret = parseString(texto)'
0623     DeclarationBlock: end-gen
0623     DeclarationBlock: begin-gen
0623      Variable: begin-gen
0623       Variable: expr: 'numEspacios'
0623       Variable: expr: '='
0623       Expression: begin-gen
0623        Identifier: begin-gen
0623         Identifier: expr: 'totalLongitud'
0623       <-Expression: expr: 'totalLongitud'
0623      <--Variable: expr: 'totalLongitud'
0623        Identifier: end-gen
0623        OpMath: begin-gen
0623         OpMath: expr: '-'
0623       <-Expression: expr: '-'
0623      <--Variable: expr: '-'
0623        OpMath: end-gen
0623        Member: begin-gen
0623         Identifier: begin-gen
0623          Identifier: expr: 'ret'
0623         Identifier: end-gen
0623         Identifier: begin-gen
0623          Identifier: expr: 'length'
0623         Identifier: end-gen
0623         Member: expr: 'len(ret)'
0623       <-Expression: expr: 'len(ret)'
0623      <--Variable: expr: 'len(ret)'
0623        Member: end-gen
0623       Expression: end-gen
0623      Variable: end-gen
0623      DeclarationBlock: line: 'numEspacios = totalLongitud - len(ret)'
0623    <-Source: line: 'numEspacios = totalLongitud - len(ret)'
0623   <--Function: line: 'numEspacios = totalLongitud - len(ret)'
0623  <---Source: line: 'numEspacios = totalLongitud - len(ret)'
0623 <----Class: line: 'numEspacios = totalLongitud - len(ret)'
0623<-----Source: line: 'numEspacios = totalLongitud - len(ret)'
0624     DeclarationBlock: end-gen
0624     For: begin-gen
0624      For: line: 'while_pass = True'
0624    <-Source: line: 'while_pass = True'
0624   <--Function: line: 'while_pass = True'
0624  <---Source: line: 'while_pass = True'
0624 <----Class: line: 'while_pass = True'
0624<-----Source: line: 'while_pass = True'
0625      InlineUpdate: begin-gen
0625       Identifier: begin-gen
0625        Identifier: expr: 'numEspacios'
0625       Identifier: end-gen
0625       InlineUpdate: expr: 'numEspacios'
0625       InlineUpdate: line: 'numEspacios -= 1'
0625      InlineUpdate: end-gen
0625      Expression: begin-gen
0625       Identifier: begin-gen
0625        Identifier: expr: 'numEspacios'
0625      <-Expression: expr: 'numEspacios'
0625       Identifier: end-gen
0625       Compare: begin-gen
0625        Compare: expr: '>'
0625      <-Expression: expr: '>'
0625       Compare: end-gen
0625       Constant: begin-gen
0625        Constant: ctype: 'Number' -> '0'
0625        Constant: expr: '0'
0625      <-Expression: expr: '0'
0625       Constant: end-gen
0625      Expression: end-gen
0625      For: line: 'while numEspacios > 0:'
0625    <-Source: line: 'while numEspacios > 0:'
0625   <--Function: line: 'while numEspacios > 0:'
0625  <---Source: line: 'while numEspacios > 0:'
0625 <----Class: line: 'while numEspacios > 0:'
0625<-----Source: line: 'while numEspacios > 0:'
0626      For: begin: 'block-for'
0626    <-Source: begin: 'block-for'
0626   <--Function: begin: 'block-for'
0626  <---Source: begin: 'block-for'
0626 <----Class: begin: 'block-for'
0626<-----Source: begin: 'block-for'
0626      For: line: 'if not while_pass:'
0626    <-Source: line: 'if not while_pass:'
0626   <--Function: line: 'if not while_pass:'
0626  <---Source: line: 'if not while_pass:'
0626 <----Class: line: 'if not while_pass:'
0626<-----Source: line: 'if not while_pass:'
0627      For: begin: 'block-while_pass'
0627    <-Source: begin: 'block-while_pass'
0627   <--Function: begin: 'block-while_pass'
0627  <---Source: begin: 'block-while_pass'
0627 <----Class: begin: 'block-while_pass'
0627<-----Source: begin: 'block-while_pass'
0627      For: line: 'numEspacios -= 1'
0627    <-Source: line: 'numEspacios -= 1'
0627   <--Function: line: 'numEspacios -= 1'
0627  <---Source: line: 'numEspacios -= 1'
0627 <----Class: line: 'numEspacios -= 1'
0627<-----Source: line: 'numEspacios -= 1'
0628      For: line: 'while_pass = True'
0628    <-Source: line: 'while_pass = True'
0628   <--Function: line: 'while_pass = True'
0628  <---Source: line: 'while_pass = True'
0628 <----Class: line: 'while_pass = True'
0628<-----Source: line: 'while_pass = True'
0629      For: line: 'continue'
0629    <-Source: line: 'continue'
0629   <--Function: line: 'continue'
0629  <---Source: line: 'continue'
0629 <----Class: line: 'continue'
0629<-----Source: line: 'continue'
0630      For: end: 'block-while_pass'
0630    <-Source: end: 'block-while_pass'
0630   <--Function: end: 'block-while_pass'
0630  <---Source: end: 'block-while_pass'
0630 <----Class: end: 'block-while_pass'
0630<-----Source: end: 'block-while_pass'
0630      For: line: 'while_pass = False'
0630    <-Source: line: 'while_pass = False'
0630   <--Function: line: 'while_pass = False'
0630  <---Source: line: 'while_pass = False'
0630 <----Class: line: 'while_pass = False'
0630<-----Source: line: 'while_pass = False'
0631      Source: begin-gen
0631       InstructionUpdate: begin-gen
0631        Identifier: begin-gen
0631         Identifier: expr: 'ret'
0631        Identifier: end-gen
0631        OpUpdate: begin-gen
0631         OpUpdate: expr: '+='
0631        OpUpdate: end-gen
0631        Value: begin-gen
0631         Constant: begin-gen
0631          Constant: ctype: 'String' -> ' '
0631          Constant: expr: 'u" "'
0631        <-Value: expr: 'u" "'
0631         Constant: end-gen
0631        Value: end-gen
0631        InstructionUpdate: line: 'ret += u" "'
0631      <-Source: line: 'ret += u" "'
0631     <--For: line: 'ret += u" "'
0631    <---Source: line: 'ret += u" "'
0631   <----Function: line: 'ret += u" "'
0631  <-----Source: line: 'ret += u" "'
0631 <------Class: line: 'ret += u" "'
0631<-------Source: line: 'ret += u" "'
0632       InstructionUpdate: end-gen
0632      Source: end-gen
0632      For: line: 'numEspacios -= 1'
0632    <-Source: line: 'numEspacios -= 1'
0632   <--Function: line: 'numEspacios -= 1'
0632  <---Source: line: 'numEspacios -= 1'
0632 <----Class: line: 'numEspacios -= 1'
0632<-----Source: line: 'numEspacios -= 1'
0633      For: line: 'while_pass = True'
0633    <-Source: line: 'while_pass = True'
0633   <--Function: line: 'while_pass = True'
0633  <---Source: line: 'while_pass = True'
0633 <----Class: line: 'while_pass = True'
0633<-----Source: line: 'while_pass = True'
0634      For: line: 'try:'
0634    <-Source: line: 'try:'
0634   <--Function: line: 'try:'
0634  <---Source: line: 'try:'
0634 <----Class: line: 'try:'
0634<-----Source: line: 'try:'
0635      For: begin: 'block-error-catch'
0635    <-Source: begin: 'block-error-catch'
0635   <--Function: begin: 'block-error-catch'
0635  <---Source: begin: 'block-error-catch'
0635 <----Class: begin: 'block-error-catch'
0635<-----Source: begin: 'block-error-catch'
0635      For: line: 'numEspacios > 0'
0635    <-Source: line: 'numEspacios > 0'
0635   <--Function: line: 'numEspacios > 0'
0635  <---Source: line: 'numEspacios > 0'
0635 <----Class: line: 'numEspacios > 0'
0635<-----Source: line: 'numEspacios > 0'
0636      For: end: 'block-error-catch'
0636    <-Source: end: 'block-error-catch'
0636   <--Function: end: 'block-error-catch'
0636  <---Source: end: 'block-error-catch'
0636 <----Class: end: 'block-error-catch'
0636<-----Source: end: 'block-error-catch'
0636      For: line: 'except: break'
0636    <-Source: line: 'except: break'
0636   <--Function: line: 'except: break'
0636  <---Source: line: 'except: break'
0636 <----Class: line: 'except: break'
0636<-----Source: line: 'except: break'
0637      For: end: 'block-for'
0637    <-Source: end: 'block-for'
0637   <--Function: end: 'block-for'
0637  <---Source: end: 'block-for'
0637 <----Class: end: 'block-for'
0637<-----Source: end: 'block-for'
0637     For: end-gen
0637     InstructionFlow: begin-gen
0637      Value: begin-gen
0637       Identifier: begin-gen
0637        Identifier: expr: 'ret'
0637      <-Value: expr: 'ret'
0637       Identifier: end-gen
0637      Value: end-gen
0637      InstructionFlow: line: 'return ret'
0637    <-Source: line: 'return ret'
0637   <--Function: line: 'return ret'
0637  <---Source: line: 'return ret'
0637 <----Class: line: 'return ret'
0637<-----Source: line: 'return ret'
0639     InstructionFlow: end-gen
0639    Source: end-gen
0639    Function: end: 'block-def-oficial_espaciosDerecha'
0639  <-Source: end: 'block-def-oficial_espaciosDerecha'
0639 <--Class: end: 'block-def-oficial_espaciosDerecha'
0639<---Source: end: 'block-def-oficial_espaciosDerecha'
0640   Function: end-gen
0640   Function: begin-gen
0640    Function: line: 'def oficial_valoresIniciales(self):'
0640  <-Source: line: 'def oficial_valoresIniciales(self):'
0640 <--Class: line: 'def oficial_valoresIniciales(self):'
0640<---Source: line: 'def oficial_valoresIniciales(self):'
0641    Function: begin: 'block-def-oficial_valoresIniciales'
0641  <-Source: begin: 'block-def-oficial_valoresIniciales'
0641 <--Class: begin: 'block-def-oficial_valoresIniciales'
0641<---Source: begin: 'block-def-oficial_valoresIniciales'
0641    Source: begin-gen
0641     DeclarationBlock: begin-gen
0641      Variable: begin-gen
0641       Variable: expr: 'cursor'
0641       Variable: expr: '='
0641       Value: begin-gen
0641        New: begin-gen
0641         FunctionCall: begin-gen
0641          Value: begin-gen
0641           Constant: begin-gen
0641            Constant: ctype: 'String' -> 'bancos'
0641            Constant: expr: 'u"bancos"'
0641          <-Value: expr: 'u"bancos"'
0641           Constant: end-gen
0641          Value: end-gen
0641          FunctionCall: expr: 'FLSqlCursor(u"bancos")'
0641        <-New: expr: 'qsatype.FLSqlCursor(u"bancos")'
0641       <--Value: expr: 'qsatype.FLSqlCursor(u"bancos")'
0641      <---Variable: expr: 'qsatype.FLSqlCursor(u"bancos")'
0641         FunctionCall: end-gen
0641        New: end-gen
0641       Value: end-gen
0641      Variable: end-gen
0641      DeclarationBlock: line: 'cursor = qsatype.FLSqlCursor(u"bancos")'
0641    <-Source: line: 'cursor = qsatype.FLSqlCursor(u"bancos")'
0641   <--Function: line: 'cursor = qsatype.FLSqlCursor(u"bancos")'
0641  <---Source: line: 'cursor = qsatype.FLSqlCursor(u"bancos")'
0641 <----Class: line: 'cursor = qsatype.FLSqlCursor(u"bancos")'
0641<-----Source: line: 'cursor = qsatype.FLSqlCursor(u"bancos")'
0642     DeclarationBlock: end-gen
0642     DeclarationBlock: begin-gen
0642      Variable: begin-gen
0642       Variable: expr: 'bancos'
0642       Variable: expr: '='
0642       Value: begin-gen
0642        Constant: begin-gen
0642         Constant: ctype: None -> None
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0030'
0642             Constant: expr: 'u"0030"'
0642           <-Value: expr: 'u"0030"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANESTO'
0642             Constant: expr: 'u"BANESTO"'
0642           <-Value: expr: 'u"BANESTO"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0030", u"BANESTO"])'
0642         <-Value: expr: 'qsatype.Array([u"0030", u"BANESTO"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0112'
0642             Constant: expr: 'u"0112"'
0642           <-Value: expr: 'u"0112"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANCO URQUIJO'
0642             Constant: expr: 'u"BANCO URQUIJO"'
0642           <-Value: expr: 'u"BANCO URQUIJO"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0112", u"BANCO URQUIJO"])'
0642         <-Value: expr: 'qsatype.Array([u"0112", u"BANCO URQUIJO"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '2085'
0642             Constant: expr: 'u"2085"'
0642           <-Value: expr: 'u"2085"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'IBERCAJA'
0642             Constant: expr: 'u"IBERCAJA"'
0642           <-Value: expr: 'u"IBERCAJA"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"2085", u"IBERCAJA"])'
0642         <-Value: expr: 'qsatype.Array([u"2085", u"IBERCAJA"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0093'
0642             Constant: expr: 'u"0093"'
0642           <-Value: expr: 'u"0093"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANCO DE VALENCIA'
0642             Constant: expr: 'u"BANCO DE VALENCIA"'
0642           <-Value: expr: 'u"BANCO DE VALENCIA"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0093", u"BANCO DE VALENCIA"])'
0642         <-Value: expr: 'qsatype.Array([u"0093", u"BANCO DE VALENCIA"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '2059'
0642             Constant: expr: 'u"2059"'
0642           <-Value: expr: 'u"2059"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'CAIXA SABADELL'
0642             Constant: expr: 'u"CAIXA SABADELL"'
0642           <-Value: expr: 'u"CAIXA SABADELL"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"2059", u"CAIXA SABADELL"])'
0642         <-Value: expr: 'qsatype.Array([u"2059", u"CAIXA SABADELL"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '2073'
0642             Constant: expr: 'u"2073"'
0642           <-Value: expr: 'u"2073"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'CAIXA TARRAGONA'
0642             Constant: expr: 'u"CAIXA TARRAGONA"'
0642           <-Value: expr: 'u"CAIXA TARRAGONA"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"2073", u"CAIXA TARRAGONA"])'
0642         <-Value: expr: 'qsatype.Array([u"2073", u"CAIXA TARRAGONA"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '2038'
0642             Constant: expr: 'u"2038"'
0642           <-Value: expr: 'u"2038"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'CAJA MADRID'
0642             Constant: expr: 'u"CAJA MADRID"'
0642           <-Value: expr: 'u"CAJA MADRID"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"2038", u"CAJA MADRID"])'
0642         <-Value: expr: 'qsatype.Array([u"2038", u"CAJA MADRID"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '2091'
0642             Constant: expr: 'u"2091"'
0642           <-Value: expr: 'u"2091"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'CAIXA GALICIA'
0642             Constant: expr: 'u"CAIXA GALICIA"'
0642           <-Value: expr: 'u"CAIXA GALICIA"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"2091", u"CAIXA GALICIA"])'
0642         <-Value: expr: 'qsatype.Array([u"2091", u"CAIXA GALICIA"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0019'
0642             Constant: expr: 'u"0019"'
0642           <-Value: expr: 'u"0019"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'DEUTSCHE BANK'
0642             Constant: expr: 'u"DEUTSCHE BANK"'
0642           <-Value: expr: 'u"DEUTSCHE BANK"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0019", u"DEUTSCHE BANK"])'
0642         <-Value: expr: 'qsatype.Array([u"0019", u"DEUTSCHE BANK"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0081'
0642             Constant: expr: 'u"0081"'
0642           <-Value: expr: 'u"0081"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANCO DE SABADELL'
0642             Constant: expr: 'u"BANCO DE SABADELL"'
0642           <-Value: expr: 'u"BANCO DE SABADELL"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0081", u"BANCO DE SABADELL"])'
0642         <-Value: expr: 'qsatype.Array([u"0081", u"BANCO DE SABADELL"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0049'
0642             Constant: expr: 'u"0049"'
0642           <-Value: expr: 'u"0049"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANCO SANTANDER CENTRAL HISPANO'
0642             Constant: expr: 'u"BANCO SANTANDER CENTRAL HISPANO"'
0642           <-Value: expr: 'u"BANCO SANTANDER CENTRAL HISPANO"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0049", u"BANCO SANTANDER CENTRAL HISPANO"])'
0642         <-Value: expr: 'qsatype.Array([u"0049", u"BANCO SANTANDER CENTRAL HISPANO"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0072'
0642             Constant: expr: 'u"0072"'
0642           <-Value: expr: 'u"0072"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANCO PASTOR'
0642             Constant: expr: 'u"BANCO PASTOR"'
0642           <-Value: expr: 'u"BANCO PASTOR"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0072", u"BANCO PASTOR"])'
0642         <-Value: expr: 'qsatype.Array([u"0072", u"BANCO PASTOR"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0075'
0642             Constant: expr: 'u"0075"'
0642           <-Value: expr: 'u"0075"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANCO POPULAR'
0642             Constant: expr: 'u"BANCO POPULAR"'
0642           <-Value: expr: 'u"BANCO POPULAR"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0075", u"BANCO POPULAR"])'
0642         <-Value: expr: 'qsatype.Array([u"0075", u"BANCO POPULAR"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0182'
0642             Constant: expr: 'u"0182"'
0642           <-Value: expr: 'u"0182"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANCO BILBAO VIZCAYA ARGENTARIA'
0642             Constant: expr: 'u"BANCO BILBAO VIZCAYA ARGENTARIA"'
0642           <-Value: expr: 'u"BANCO BILBAO VIZCAYA ARGENTARIA"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0182", u"BANCO BILBAO VIZCAYA ARGENTARIA"])'
0642         <-Value: expr: 'qsatype.Array([u"0182", u"BANCO BILBAO VIZCAYA ARGENTARIA"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0128'
0642             Constant: expr: 'u"0128"'
0642           <-Value: expr: 'u"0128"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANKINTER'
0642             Constant: expr: 'u"BANKINTER"'
0642           <-Value: expr: 'u"BANKINTER"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0128", u"BANKINTER"])'
0642         <-Value: expr: 'qsatype.Array([u"0128", u"BANKINTER"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '2090'
0642             Constant: expr: 'u"2090"'
0642           <-Value: expr: 'u"2090"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'C.A.M.'
0642             Constant: expr: 'u"C.A.M."'
0642           <-Value: expr: 'u"C.A.M."'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"2090", u"C.A.M."])'
0642         <-Value: expr: 'qsatype.Array([u"2090", u"C.A.M."])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '2100'
0642             Constant: expr: 'u"2100"'
0642           <-Value: expr: 'u"2100"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'LA CAIXA'
0642             Constant: expr: 'u"LA CAIXA"'
0642           <-Value: expr: 'u"LA CAIXA"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"2100", u"LA CAIXA"])'
0642         <-Value: expr: 'qsatype.Array([u"2100", u"LA CAIXA"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '2077'
0642             Constant: expr: 'u"2077"'
0642           <-Value: expr: 'u"2077"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANCAJA'
0642             Constant: expr: 'u"BANCAJA"'
0642           <-Value: expr: 'u"BANCAJA"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"2077", u"BANCAJA"])'
0642         <-Value: expr: 'qsatype.Array([u"2077", u"BANCAJA"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0008'
0642             Constant: expr: 'u"0008"'
0642           <-Value: expr: 'u"0008"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANCO ATLANTICO'
0642             Constant: expr: 'u"BANCO ATLANTICO"'
0642           <-Value: expr: 'u"BANCO ATLANTICO"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0008", u"BANCO ATLANTICO"])'
0642         <-Value: expr: 'qsatype.Array([u"0008", u"BANCO ATLANTICO"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0061'
0642             Constant: expr: 'u"0061"'
0642           <-Value: expr: 'u"0061"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANCA MARCH'
0642             Constant: expr: 'u"BANCA MARCH"'
0642           <-Value: expr: 'u"BANCA MARCH"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0061", u"BANCA MARCH"])'
0642         <-Value: expr: 'qsatype.Array([u"0061", u"BANCA MARCH"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0065'
0642             Constant: expr: 'u"0065"'
0642           <-Value: expr: 'u"0065"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BARCLAYS BANK'
0642             Constant: expr: 'u"BARCLAYS BANK"'
0642           <-Value: expr: 'u"BARCLAYS BANK"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0065", u"BARCLAYS BANK"])'
0642         <-Value: expr: 'qsatype.Array([u"0065", u"BARCLAYS BANK"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0073'
0642             Constant: expr: 'u"0073"'
0642           <-Value: expr: 'u"0073"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'PATAGON INTERNET BANK'
0642             Constant: expr: 'u"PATAGON INTERNET BANK"'
0642           <-Value: expr: 'u"PATAGON INTERNET BANK"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0073", u"PATAGON INTERNET BANK"])'
0642         <-Value: expr: 'qsatype.Array([u"0073", u"PATAGON INTERNET BANK"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0103'
0642             Constant: expr: 'u"0103"'
0642           <-Value: expr: 'u"0103"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANCO ZARAGOZANO'
0642             Constant: expr: 'u"BANCO ZARAGOZANO"'
0642           <-Value: expr: 'u"BANCO ZARAGOZANO"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0103", u"BANCO ZARAGOZANO"])'
0642         <-Value: expr: 'qsatype.Array([u"0103", u"BANCO ZARAGOZANO"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '2013'
0642             Constant: expr: 'u"2013"'
0642           <-Value: expr: 'u"2013"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'CAIXA CATALUNYA'
0642             Constant: expr: 'u"CAIXA CATALUNYA"'
0642           <-Value: expr: 'u"CAIXA CATALUNYA"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"2013", u"CAIXA CATALUNYA"])'
0642         <-Value: expr: 'qsatype.Array([u"2013", u"CAIXA CATALUNYA"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '2043'
0642             Constant: expr: 'u"2043"'
0642           <-Value: expr: 'u"2043"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'CAJA MURCIA'
0642             Constant: expr: 'u"CAJA MURCIA"'
0642           <-Value: expr: 'u"CAJA MURCIA"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"2043", u"CAJA MURCIA"])'
0642         <-Value: expr: 'qsatype.Array([u"2043", u"CAJA MURCIA"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '2103'
0642             Constant: expr: 'u"2103"'
0642           <-Value: expr: 'u"2103"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'UNICAJA'
0642             Constant: expr: 'u"UNICAJA"'
0642           <-Value: expr: 'u"UNICAJA"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"2103", u"UNICAJA"])'
0642         <-Value: expr: 'qsatype.Array([u"2103", u"UNICAJA"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '2105'
0642             Constant: expr: 'u"2105"'
0642           <-Value: expr: 'u"2105"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'CAJA DE CASTILLA LA MANCHA'
0642             Constant: expr: 'u"CAJA DE CASTILLA LA MANCHA"'
0642           <-Value: expr: 'u"CAJA DE CASTILLA LA MANCHA"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"2105", u"CAJA DE CASTILLA LA MANCHA"])'
0642         <-Value: expr: 'qsatype.Array([u"2105", u"CAJA DE CASTILLA LA MANCHA"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0042'
0642             Constant: expr: 'u"0042"'
0642           <-Value: expr: 'u"0042"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANCO GUIPUZCOANO'
0642             Constant: expr: 'u"BANCO GUIPUZCOANO"'
0642           <-Value: expr: 'u"BANCO GUIPUZCOANO"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0042", u"BANCO GUIPUZCOANO"])'
0642         <-Value: expr: 'qsatype.Array([u"0042", u"BANCO GUIPUZCOANO"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '0138'
0642             Constant: expr: 'u"0138"'
0642           <-Value: expr: 'u"0138"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'BANKOA'
0642             Constant: expr: 'u"BANKOA"'
0642           <-Value: expr: 'u"BANKOA"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"0138", u"BANKOA"])'
0642         <-Value: expr: 'qsatype.Array([u"0138", u"BANKOA"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Value: begin-gen
0642          Constant: begin-gen
0642           Constant: ctype: None -> None
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> '3056'
0642             Constant: expr: 'u"3056"'
0642           <-Value: expr: 'u"3056"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Value: begin-gen
0642            Constant: begin-gen
0642             Constant: ctype: 'String' -> 'CAJA RURAL DE ALBACETE'
0642             Constant: expr: 'u"CAJA RURAL DE ALBACETE"'
0642           <-Value: expr: 'u"CAJA RURAL DE ALBACETE"'
0642            Constant: end-gen
0642           Value: end-gen
0642           Constant: expr: 'qsatype.Array([u"3056", u"CAJA RURAL DE ALBACETE"])'
0642         <-Value: expr: 'qsatype.Array([u"3056", u"CAJA RURAL DE ALBACETE"])'
0642          Constant: end-gen
0642         Value: end-gen
0642         Constant: expr: 'qsatype.Array([qsatype.Array([u"0030", u"BANESTO"]), qsatype.Array([u"0112", u"BANCO URQUIJO"]), qsatype.Array([u"2085", u"IBERCAJA"]), qsatype.Array([u"0093", u"BANCO DE VALENCIA"]), qsatype.Array([u"2059", u"CAIXA SABADELL"]), qsatype.Array([u"2073", u"CAIXA TARRAGONA"]), qsatype.Array([u"2038", u"CAJA MADRID"]), qsatype.Array([u"2091", u"CAIXA GALICIA"]), qsatype.Array([u"0019", u"DEUTSCHE BANK"]), qsatype.Array([u"0081", u"BANCO DE SABADELL"]), qsatype.Array([u"0049", u"BANCO SANTANDER CENTRAL HISPANO"]), qsatype.Array([u"0072", u"BANCO PASTOR"]), qsatype.Array([u"0075", u"BANCO POPULAR"]), qsatype.Array([u"0182", u"BANCO BILBAO VIZCAYA ARGENTARIA"]), qsatype.Array([u"0128", u"BANKINTER"]), qsatype.Array([u"2090", u"C.A.M."]), qsatype.Array([u"2100", u"LA CAIXA"]), qsatype.Array([u"2077", u"BANCAJA"]), qsatype.Array([u"0008", u"BANCO ATLANTICO"]), qsatype.Array([u"0061", u"BANCA MARCH"]), qsatype.Array([u"0065", u"BARCLAYS BANK"]), qsatype.Array([u"0073", u"PATAGON INTERNET BANK"]), qsatype.Array([u"0103", u"BANCO ZARAGOZANO"]), qsatype.Array([u"2013", u"CAIXA CATALUNYA"]), qsatype.Array([u"2043", u"CAJA MURCIA"]), qsatype.Array([u"2103", u"UNICAJA"]), qsatype.Array([u"2105", u"CAJA DE CASTILLA LA MANCHA"]), qsatype.Array([u"0042", u"BANCO GUIPUZCOANO"]), qsatype.Array([u"0138", u"BANKOA"]), qsatype.Array([u"3056", u"CAJA RURAL DE ALBACETE"])])'
0642       <-Value: expr: 'qsatype.Array([qsatype.Array([u"0030", u"BANESTO"]), qsatype.Array([u"0112", u"BANCO URQUIJO"]), qsatype.Array([u"2085", u"IBERCAJA"]), qsatype.Array([u"0093", u"BANCO DE VALENCIA"]), qsatype.Array([u"2059", u"CAIXA SABADELL"]), qsatype.Array([u"2073", u"CAIXA TARRAGONA"]), qsatype.Array([u"2038", u"CAJA MADRID"]), qsatype.Array([u"2091", u"CAIXA GALICIA"]), qsatype.Array([u"0019", u"DEUTSCHE BANK"]), qsatype.Array([u"0081", u"BANCO DE SABADELL"]), qsatype.Array([u"0049", u"BANCO SANTANDER CENTRAL HISPANO"]), qsatype.Array([u"0072", u"BANCO PASTOR"]), qsatype.Array([u"0075", u"BANCO POPULAR"]), qsatype.Array([u"0182", u"BANCO BILBAO VIZCAYA ARGENTARIA"]), qsatype.Array([u"0128", u"BANKINTER"]), qsatype.Array([u"2090", u"C.A.M."]), qsatype.Array([u"2100", u"LA CAIXA"]), qsatype.Array([u"2077", u"BANCAJA"]), qsatype.Array([u"0008", u"BANCO ATLANTICO"]), qsatype.Array([u"0061", u"BANCA MARCH"]), qsatype.Array([u"0065", u"BARCLAYS BANK"]), qsatype.Array([u"0073", u"PATAGON INTERNET BANK"]), qsatype.Array([u"0103", u"BANCO ZARAGOZANO"]), qsatype.Array([u"2013", u"CAIXA CATALUNYA"]), qsatype.Array([u"2043", u"CAJA MURCIA"]), qsatype.Array([u"2103", u"UNICAJA"]), qsatype.Array([u"2105", u"CAJA DE CASTILLA LA MANCHA"]), qsatype.Array([u"0042", u"BANCO GUIPUZCOANO"]), qsatype.Array([u"0138", u"BANKOA"]), qsatype.Array([u"3056", u"CAJA RURAL DE ALBACETE"])])'
0642      <--Variable: expr: 'qsatype.Array([qsatype.Array([u"0030", u"BANESTO"]), qsatype.Array([u"0112", u"BANCO URQUIJO"]), qsatype.Array([u"2085", u"IBERCAJA"]), qsatype.Array([u"0093", u"BANCO DE VALENCIA"]), qsatype.Array([u"2059", u"CAIXA SABADELL"]), qsatype.Array([u"2073", u"CAIXA TARRAGONA"]), qsatype.Array([u"2038", u"CAJA MADRID"]), qsatype.Array([u"2091", u"CAIXA GALICIA"]), qsatype.Array([u"0019", u"DEUTSCHE BANK"]), qsatype.Array([u"0081", u"BANCO DE SABADELL"]), qsatype.Array([u"0049", u"BANCO SANTANDER CENTRAL HISPANO"]), qsatype.Array([u"0072", u"BANCO PASTOR"]), qsatype.Array([u"0075", u"BANCO POPULAR"]), qsatype.Array([u"0182", u"BANCO BILBAO VIZCAYA ARGENTARIA"]), qsatype.Array([u"0128", u"BANKINTER"]), qsatype.Array([u"2090", u"C.A.M."]), qsatype.Array([u"2100", u"LA CAIXA"]), qsatype.Array([u"2077", u"BANCAJA"]), qsatype.Array([u"0008", u"BANCO ATLANTICO"]), qsatype.Array([u"0061", u"BANCA MARCH"]), qsatype.Array([u"0065", u"BARCLAYS BANK"]), qsatype.Array([u"0073", u"PATAGON INTERNET BANK"]), qsatype.Array([u"0103", u"BANCO ZARAGOZANO"]), qsatype.Array([u"2013", u"CAIXA CATALUNYA"]), qsatype.Array([u"2043", u"CAJA MURCIA"]), qsatype.Array([u"2103", u"UNICAJA"]), qsatype.Array([u"2105", u"CAJA DE CASTILLA LA MANCHA"]), qsatype.Array([u"0042", u"BANCO GUIPUZCOANO"]), qsatype.Array([u"0138", u"BANKOA"]), qsatype.Array([u"3056", u"CAJA RURAL DE ALBACETE"])])'
0642        Constant: end-gen
0642       Value: end-gen
0642      Variable: end-gen
0642      DeclarationBlock: line: 'bancos = qsatype.Array([qsatype.Array([u"0030", u"BANESTO"]), qsatype.Array([u"0112", u"BANCO URQUIJO"]), qsatype.Array([u"2085", u"IBERCAJA"]), qsatype.Array([u"0093", u"BANCO DE VALENCIA"]), qsatype.Array([u"2059", u"CAIXA SABADELL"]), qsatype.Array([u"2073", u"CAIXA TARRAGONA"]), qsatype.Array([u"2038", u"CAJA MADRID"]), qsatype.Array([u"2091", u"CAIXA GALICIA"]), qsatype.Array([u"0019", u"DEUTSCHE BANK"]), qsatype.Array([u"0081", u"BANCO DE SABADELL"]), qsatype.Array([u"0049", u"BANCO SANTANDER CENTRAL HISPANO"]), qsatype.Array([u"0072", u"BANCO PASTOR"]), qsatype.Array([u"0075", u"BANCO POPULAR"]), qsatype.Array([u"0182", u"BANCO BILBAO VIZCAYA ARGENTARIA"]), qsatype.Array([u"0128", u"BANKINTER"]), qsatype.Array([u"2090", u"C.A.M."]), qsatype.Array([u"2100", u"LA CAIXA"]), qsatype.Array([u"2077", u"BANCAJA"]), qsatype.Array([u"0008", u"BANCO ATLANTICO"]), qsatype.Array([u"0061", u"BANCA MARCH"]), qsatype.Array([u"0065", u"BARCLAYS BANK"]), qsatype.Array([u"0073", u"PATAGON INTERNET BANK"]), qsatype.Array([u"0103", u"BANCO ZARAGOZANO"]), qsatype.Array([u"2013", u"CAIXA CATALUNYA"]), qsatype.Array([u"2043", u"CAJA MURCIA"]), qsatype.Array([u"2103", u"UNICAJA"]), qsatype.Array([u"2105", u"CAJA DE CASTILLA LA MANCHA"]), qsatype.Array([u"0042", u"BANCO GUIPUZCOANO"]), qsatype.Array([u"0138", u"BANKOA"]), qsatype.Array([u"3056", u"CAJA RURAL DE ALBACETE"])])'
0642    <-Source: line: 'bancos = qsatype.Array([qsatype.Array([u"0030", u"BANESTO"]), qsatype.Array([u"0112", u"BANCO URQUIJO"]), qsatype.Array([u"2085", u"IBERCAJA"]), qsatype.Array([u"0093", u"BANCO DE VALENCIA"]), qsatype.Array([u"2059", u"CAIXA SABADELL"]), qsatype.Array([u"2073", u"CAIXA TARRAGONA"]), qsatype.Array([u"2038", u"CAJA MADRID"]), qsatype.Array([u"2091", u"CAIXA GALICIA"]), qsatype.Array([u"0019", u"DEUTSCHE BANK"]), qsatype.Array([u"0081", u"BANCO DE SABADELL"]), qsatype.Array([u"0049", u"BANCO SANTANDER CENTRAL HISPANO"]), qsatype.Array([u"0072", u"BANCO PASTOR"]), qsatype.Array([u"0075", u"BANCO POPULAR"]), qsatype.Array([u"0182", u"BANCO BILBAO VIZCAYA ARGENTARIA"]), qsatype.Array([u"0128", u"BANKINTER"]), qsatype.Array([u"2090", u"C.A.M."]), qsatype.Array([u"2100", u"LA CAIXA"]), qsatype.Array([u"2077", u"BANCAJA"]), qsatype.Array([u"0008", u"BANCO ATLANTICO"]), qsatype.Array([u"0061", u"BANCA MARCH"]), qsatype.Array([u"0065", u"BARCLAYS BANK"]), qsatype.Array([u"0073", u"PATAGON INTERNET BANK"]), qsatype.Array([u"0103", u"BANCO ZARAGOZANO"]), qsatype.Array([u"2013", u"CAIXA CATALUNYA"]), qsatype.Array([u"2043", u"CAJA MURCIA"]), qsatype.Array([u"2103", u"UNICAJA"]), qsatype.Array([u"2105", u"CAJA DE CASTILLA LA MANCHA"]), qsatype.Array([u"0042", u"BANCO GUIPUZCOANO"]), qsatype.Array([u"0138", u"BANKOA"]), qsatype.Array([u"3056", u"CAJA RURAL DE ALBACETE"])])'
0642   <--Function: line: 'bancos = qsatype.Array([qsatype.Array([u"0030", u"BANESTO"]), qsatype.Array([u"0112", u"BANCO URQUIJO"]), qsatype.Array([u"2085", u"IBERCAJA"]), qsatype.Array([u"0093", u"BANCO DE VALENCIA"]), qsatype.Array([u"2059", u"CAIXA SABADELL"]), qsatype.Array([u"2073", u"CAIXA TARRAGONA"]), qsatype.Array([u"2038", u"CAJA MADRID"]), qsatype.Array([u"2091", u"CAIXA GALICIA"]), qsatype.Array([u"0019", u"DEUTSCHE BANK"]), qsatype.Array([u"0081", u"BANCO DE SABADELL"]), qsatype.Array([u"0049", u"BANCO SANTANDER CENTRAL HISPANO"]), qsatype.Array([u"0072", u"BANCO PASTOR"]), qsatype.Array([u"0075", u"BANCO POPULAR"]), qsatype.Array([u"0182", u"BANCO BILBAO VIZCAYA ARGENTARIA"]), qsatype.Array([u"0128", u"BANKINTER"]), qsatype.Array([u"2090", u"C.A.M."]), qsatype.Array([u"2100", u"LA CAIXA"]), qsatype.Array([u"2077", u"BANCAJA"]), qsatype.Array([u"0008", u"BANCO ATLANTICO"]), qsatype.Array([u"0061", u"BANCA MARCH"]), qsatype.Array([u"0065", u"BARCLAYS BANK"]), qsatype.Array([u"0073", u"PATAGON INTERNET BANK"]), qsatype.Array([u"0103", u"BANCO ZARAGOZANO"]), qsatype.Array([u"2013", u"CAIXA CATALUNYA"]), qsatype.Array([u"2043", u"CAJA MURCIA"]), qsatype.Array([u"2103", u"UNICAJA"]), qsatype.Array([u"2105", u"CAJA DE CASTILLA LA MANCHA"]), qsatype.Array([u"0042", u"BANCO GUIPUZCOANO"]), qsatype.Array([u"0138", u"BANKOA"]), qsatype.Array([u"3056", u"CAJA RURAL DE ALBACETE"])])'
0642  <---Source: line: 'bancos = qsatype.Array([qsatype.Array([u"0030", u"BANESTO"]), qsatype.Array([u"0112", u"BANCO URQUIJO"]), qsatype.Array([u"2085", u"IBERCAJA"]), qsatype.Array([u"0093", u"BANCO DE VALENCIA"]), qsatype.Array([u"2059", u"CAIXA SABADELL"]), qsatype.Array([u"2073", u"CAIXA TARRAGONA"]), qsatype.Array([u"2038", u"CAJA MADRID"]), qsatype.Array([u"2091", u"CAIXA GALICIA"]), qsatype.Array([u"0019", u"DEUTSCHE BANK"]), qsatype.Array([u"0081", u"BANCO DE SABADELL"]), qsatype.Array([u"0049", u"BANCO SANTANDER CENTRAL HISPANO"]), qsatype.Array([u"0072", u"BANCO PASTOR"]), qsatype.Array([u"0075", u"BANCO POPULAR"]), qsatype.Array([u"0182", u"BANCO BILBAO VIZCAYA ARGENTARIA"]), qsatype.Array([u"0128", u"BANKINTER"]), qsatype.Array([u"2090", u"C.A.M."]), qsatype.Array([u"2100", u"LA CAIXA"]), qsatype.Array([u"2077", u"BANCAJA"]), qsatype.Array([u"0008", u"BANCO ATLANTICO"]), qsatype.Array([u"0061", u"BANCA MARCH"]), qsatype.Array([u"0065", u"BARCLAYS BANK"]), qsatype.Array([u"0073", u"PATAGON INTERNET BANK"]), qsatype.Array([u"0103", u"BANCO ZARAGOZANO"]), qsatype.Array([u"2013", u"CAIXA CATALUNYA"]), qsatype.Array([u"2043", u"CAJA MURCIA"]), qsatype.Array([u"2103", u"UNICAJA"]), qsatype.Array([u"2105", u"CAJA DE CASTILLA LA MANCHA"]), qsatype.Array([u"0042", u"BANCO GUIPUZCOANO"]), qsatype.Array([u"0138", u"BANKOA"]), qsatype.Array([u"3056", u"CAJA RURAL DE ALBACETE"])])'
0642 <----Class: line: 'bancos = qsatype.Array([qsatype.Array([u"0030", u"BANESTO"]), qsatype.Array([u"0112", u"BANCO URQUIJO"]), qsatype.Array([u"2085", u"IBERCAJA"]), qsatype.Array([u"0093", u"BANCO DE VALENCIA"]), qsatype.Array([u"2059", u"CAIXA SABADELL"]), qsatype.Array([u"2073", u"CAIXA TARRAGONA"]), qsatype.Array([u"2038", u"CAJA MADRID"]), qsatype.Array([u"2091", u"CAIXA GALICIA"]), qsatype.Array([u"0019", u"DEUTSCHE BANK"]), qsatype.Array([u"0081", u"BANCO DE SABADELL"]), qsatype.Array([u"0049", u"BANCO SANTANDER CENTRAL HISPANO"]), qsatype.Array([u"0072", u"BANCO PASTOR"]), qsatype.Array([u"0075", u"BANCO POPULAR"]), qsatype.Array([u"0182", u"BANCO BILBAO VIZCAYA ARGENTARIA"]), qsatype.Array([u"0128", u"BANKINTER"]), qsatype.Array([u"2090", u"C.A.M."]), qsatype.Array([u"2100", u"LA CAIXA"]), qsatype.Array([u"2077", u"BANCAJA"]), qsatype.Array([u"0008", u"BANCO ATLANTICO"]), qsatype.Array([u"0061", u"BANCA MARCH"]), qsatype.Array([u"0065", u"BARCLAYS BANK"]), qsatype.Array([u"0073", u"PATAGON INTERNET BANK"]), qsatype.Array([u"0103", u"BANCO ZARAGOZANO"]), qsatype.Array([u"2013", u"CAIXA CATALUNYA"]), qsatype.Array([u"2043", u"CAJA MURCIA"]), qsatype.Array([u"2103", u"UNICAJA"]), qsatype.Array([u"2105", u"CAJA DE CASTILLA LA MANCHA"]), qsatype.Array([u"0042", u"BANCO GUIPUZCOANO"]), qsatype.Array([u"0138", u"BANKOA"]), qsatype.Array([u"3056", u"CAJA RURAL DE ALBACETE"])])'
0642<-----Source: line: 'bancos = qsatype.Array([qsatype.Array([u"0030", u"BANESTO"]), qsatype.Array([u"0112", u"BANCO URQUIJO"]), qsatype.Array([u"2085", u"IBERCAJA"]), qsatype.Array([u"0093", u"BANCO DE VALENCIA"]), qsatype.Array([u"2059", u"CAIXA SABADELL"]), qsatype.Array([u"2073", u"CAIXA TARRAGONA"]), qsatype.Array([u"2038", u"CAJA MADRID"]), qsatype.Array([u"2091", u"CAIXA GALICIA"]), qsatype.Array([u"0019", u"DEUTSCHE BANK"]), qsatype.Array([u"0081", u"BANCO DE SABADELL"]), qsatype.Array([u"0049", u"BANCO SANTANDER CENTRAL HISPANO"]), qsatype.Array([u"0072", u"BANCO PASTOR"]), qsatype.Array([u"0075", u"BANCO POPULAR"]), qsatype.Array([u"0182", u"BANCO BILBAO VIZCAYA ARGENTARIA"]), qsatype.Array([u"0128", u"BANKINTER"]), qsatype.Array([u"2090", u"C.A.M."]), qsatype.Array([u"2100", u"LA CAIXA"]), qsatype.Array([u"2077", u"BANCAJA"]), qsatype.Array([u"0008", u"BANCO ATLANTICO"]), qsatype.Array([u"0061", u"BANCA MARCH"]), qsatype.Array([u"0065", u"BARCLAYS BANK"]), qsatype.Array([u"0073", u"PATAGON INTERNET BANK"]), qsatype.Array([u"0103", u"BANCO ZARAGOZANO"]), qsatype.Array([u"2013", u"CAIXA CATALUNYA"]), qsatype.Array([u"2043", u"CAJA MURCIA"]), qsatype.Array([u"2103", u"UNICAJA"]), qsatype.Array([u"2105", u"CAJA DE CASTILLA LA MANCHA"]), qsatype.Array([u"0042", u"BANCO GUIPUZCOANO"]), qsatype.Array([u"0138", u"BANKOA"]), qsatype.Array([u"3056", u"CAJA RURAL DE ALBACETE"])])'
0643     DeclarationBlock: end-gen
0643     For: begin-gen
0643      Variable: begin-gen
0643       Variable: expr: 'i'
0643       Variable: expr: '='
0643       Value: begin-gen
0643        Constant: begin-gen
0643         Constant: ctype: 'Number' -> '0'
0643         Constant: expr: '0'
0643       <-Value: expr: '0'
0643      <--Variable: expr: '0'
0643        Constant: end-gen
0643       Value: end-gen
0643      Variable: end-gen
0643      For: line: 'i = 0'
0643    <-Source: line: 'i = 0'
0643   <--Function: line: 'i = 0'
0643  <---Source: line: 'i = 0'
0643 <----Class: line: 'i = 0'
0643<-----Source: line: 'i = 0'
0644      For: line: 'while_pass = True'
0644    <-Source: line: 'while_pass = True'
0644   <--Function: line: 'while_pass = True'
0644  <---Source: line: 'while_pass = True'
0644 <----Class: line: 'while_pass = True'
0644<-----Source: line: 'while_pass = True'
0645      InlineUpdate: begin-gen
0645       Identifier: begin-gen
0645        Identifier: expr: 'i'
0645       Identifier: end-gen
0645       InlineUpdate: expr: 'i'
0645       InlineUpdate: line+1: 'i += 1'
0645      InlineUpdate: end-gen
0645      Expression: begin-gen
0645       Identifier: begin-gen
0645        Identifier: expr: 'i'
0645      <-Expression: expr: 'i'
0645       Identifier: end-gen
0645       Compare: begin-gen
0645        Compare: expr: '<'
0645      <-Expression: expr: '<'
0645       Compare: end-gen
0645       Member: begin-gen
0645        Identifier: begin-gen
0645         Identifier: expr: 'bancos'
0645        Identifier: end-gen
0645        Identifier: begin-gen
0645         Identifier: expr: 'length'
0645        Identifier: end-gen
0645        Member: expr: 'len(bancos)'
0645      <-Expression: expr: 'len(bancos)'
0645       Member: end-gen
0645      Expression: end-gen
0645      For: line: 'while i < len(bancos):'
0645    <-Source: line: 'while i < len(bancos):'
0645   <--Function: line: 'while i < len(bancos):'
0645  <---Source: line: 'while i < len(bancos):'
0645 <----Class: line: 'while i < len(bancos):'
0645<-----Source: line: 'while i < len(bancos):'
0646      For: begin: 'block-for'
0646    <-Source: begin: 'block-for'
0646   <--Function: begin: 'block-for'
0646  <---Source: begin: 'block-for'
0646 <----Class: begin: 'block-for'
0646<-----Source: begin: 'block-for'
0646      For: line: 'if not while_pass:'
0646    <-Source: line: 'if not while_pass:'
0646   <--Function: line: 'if not while_pass:'
0646  <---Source: line: 'if not while_pass:'
0646 <----Class: line: 'if not while_pass:'
0646<-----Source: line: 'if not while_pass:'
0647      For: begin: 'block-while_pass'
0647    <-Source: begin: 'block-while_pass'
0647   <--Function: begin: 'block-while_pass'
0647  <---Source: begin: 'block-while_pass'
0647 <----Class: begin: 'block-while_pass'
0647<-----Source: begin: 'block-while_pass'
0647      For: line: 'i += 1'
0647    <-Source: line: 'i += 1'
0647   <--Function: line: 'i += 1'
0647  <---Source: line: 'i += 1'
0647 <----Class: line: 'i += 1'
0647<-----Source: line: 'i += 1'
0648      For: line: 'while_pass = True'
0648    <-Source: line: 'while_pass = True'
0648   <--Function: line: 'while_pass = True'
0648  <---Source: line: 'while_pass = True'
0648 <----Class: line: 'while_pass = True'
0648<-----Source: line: 'while_pass = True'
0649      For: line: 'continue'
0649    <-Source: line: 'continue'
0649   <--Function: line: 'continue'
0649  <---Source: line: 'continue'
0649 <----Class: line: 'continue'
0649<-----Source: line: 'continue'
0650      For: end: 'block-while_pass'
0650    <-Source: end: 'block-while_pass'
0650   <--Function: end: 'block-while_pass'
0650  <---Source: end: 'block-while_pass'
0650 <----Class: end: 'block-while_pass'
0650<-----Source: end: 'block-while_pass'
0650      For: line: 'while_pass = False'
0650    <-Source: line: 'while_pass = False'
0650   <--Function: line: 'while_pass = False'
0650  <---Source: line: 'while_pass = False'
0650 <----Class: line: 'while_pass = False'
0650<-----Source: line: 'while_pass = False'
0651      Source: begin-gen
0651       With: begin-gen
0651        Identifier: begin-gen
0651         Identifier: expr: 'cursor'
0651        Identifier: end-gen
0651        With: line: ' #WITH_START'
0651      <-Source: line: ' #WITH_START'
0651     <--For: line: ' #WITH_START'
0651    <---Source: line: ' #WITH_START'
0651   <----Function: line: ' #WITH_START'
0651  <-----Source: line: ' #WITH_START'
0651 <------Class: line: ' #WITH_START'
0651<-------Source: line: ' #WITH_START'
0652        Source: begin-gen
0652         InstructionCall: begin-gen
0652          FunctionCall: begin-gen
0652           Value: begin-gen
0652            Member: begin-gen
0652             Identifier: begin-gen
0652              Identifier: expr: 'cursor'
0652             Identifier: end-gen
0652             Identifier: begin-gen
0652              Identifier: expr: 'Insert'
0652             Identifier: end-gen
0652             Member: expr: 'cursor.Insert'
0652           <-Value: expr: 'cursor.Insert'
0652            Member: end-gen
0652           Value: end-gen
0652           FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0652          FunctionCall: end-gen
0652          InstructionCall: line: 'setModeAccess(cursor.Insert)'
0652        <-Source: line: 'setModeAccess(cursor.Insert)'
0652       <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0652      <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0652     <----For: line: 'cursor.setModeAccess(cursor.Insert)'
0652    <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0652   <------Function: line: 'cursor.setModeAccess(cursor.Insert)'
0652  <-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0652 <--------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0652<---------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0653         InstructionCall: end-gen
0653         InstructionCall: begin-gen
0653          FunctionCall: begin-gen
0653           FunctionCall: expr: 'refreshBuffer()'
0653          FunctionCall: end-gen
0653          InstructionCall: line: 'refreshBuffer()'
0653        <-Source: line: 'refreshBuffer()'
0653       <--With: line: 'cursor.refreshBuffer()'
0653      <---Source: line: 'cursor.refreshBuffer()'
0653     <----For: line: 'cursor.refreshBuffer()'
0653    <-----Source: line: 'cursor.refreshBuffer()'
0653   <------Function: line: 'cursor.refreshBuffer()'
0653  <-------Source: line: 'cursor.refreshBuffer()'
0653 <--------Class: line: 'cursor.refreshBuffer()'
0653<---------Source: line: 'cursor.refreshBuffer()'
0654         InstructionCall: end-gen
0654         InstructionCall: begin-gen
0654          FunctionCall: begin-gen
0654           Value: begin-gen
0654            Constant: begin-gen
0654             Constant: ctype: 'String' -> 'entidad'
0654             Constant: expr: 'u"entidad"'
0654           <-Value: expr: 'u"entidad"'
0654            Constant: end-gen
0654           Value: end-gen
0654           Value: begin-gen
0654            ArrayMember: begin-gen
0654             ArrayMember: begin-gen
0654              Identifier: begin-gen
0654               Identifier: expr: 'bancos'
0654              Identifier: end-gen
0654              Value: begin-gen
0654               Identifier: begin-gen
0654                Identifier: expr: 'i'
0654              <-Value: expr: 'i'
0654               Identifier: end-gen
0654              Value: end-gen
0654              ArrayMember: expr: 'bancos[i]'
0654             ArrayMember: end-gen
0654             Value: begin-gen
0654              Constant: begin-gen
0654               Constant: ctype: 'Number' -> '0'
0654               Constant: expr: '0'
0654             <-Value: expr: '0'
0654              Constant: end-gen
0654             Value: end-gen
0654             ArrayMember: expr: 'bancos[i][0]'
0654           <-Value: expr: 'bancos[i][0]'
0654            ArrayMember: end-gen
0654           Value: end-gen
0654           FunctionCall: expr: 'setValueBuffer(u"entidad", bancos[i][0])'
0654          FunctionCall: end-gen
0654          InstructionCall: line: 'setValueBuffer(u"entidad", bancos[i][0])'
0654        <-Source: line: 'setValueBuffer(u"entidad", bancos[i][0])'
0654       <--With: line: 'cursor.setValueBuffer(u"entidad", bancos[i][0])'
0654      <---Source: line: 'cursor.setValueBuffer(u"entidad", bancos[i][0])'
0654     <----For: line: 'cursor.setValueBuffer(u"entidad", bancos[i][0])'
0654    <-----Source: line: 'cursor.setValueBuffer(u"entidad", bancos[i][0])'
0654   <------Function: line: 'cursor.setValueBuffer(u"entidad", bancos[i][0])'
0654  <-------Source: line: 'cursor.setValueBuffer(u"entidad", bancos[i][0])'
0654 <--------Class: line: 'cursor.setValueBuffer(u"entidad", bancos[i][0])'
0654<---------Source: line: 'cursor.setValueBuffer(u"entidad", bancos[i][0])'
0655         InstructionCall: end-gen
0655         InstructionCall: begin-gen
0655          FunctionCall: begin-gen
0655           Value: begin-gen
0655            Constant: begin-gen
0655             Constant: ctype: 'String' -> 'nombre'
0655             Constant: expr: 'u"nombre"'
0655           <-Value: expr: 'u"nombre"'
0655            Constant: end-gen
0655           Value: end-gen
0655           Value: begin-gen
0655            ArrayMember: begin-gen
0655             ArrayMember: begin-gen
0655              Identifier: begin-gen
0655               Identifier: expr: 'bancos'
0655              Identifier: end-gen
0655              Value: begin-gen
0655               Identifier: begin-gen
0655                Identifier: expr: 'i'
0655              <-Value: expr: 'i'
0655               Identifier: end-gen
0655              Value: end-gen
0655              ArrayMember: expr: 'bancos[i]'
0655             ArrayMember: end-gen
0655             Value: begin-gen
0655              Constant: begin-gen
0655               Constant: ctype: 'Number' -> '1'
0655               Constant: expr: '1'
0655             <-Value: expr: '1'
0655              Constant: end-gen
0655             Value: end-gen
0655             ArrayMember: expr: 'bancos[i][1]'
0655           <-Value: expr: 'bancos[i][1]'
0655            ArrayMember: end-gen
0655           Value: end-gen
0655           FunctionCall: expr: 'setValueBuffer(u"nombre", bancos[i][1])'
0655          FunctionCall: end-gen
0655          InstructionCall: line: 'setValueBuffer(u"nombre", bancos[i][1])'
0655        <-Source: line: 'setValueBuffer(u"nombre", bancos[i][1])'
0655       <--With: line: 'cursor.setValueBuffer(u"nombre", bancos[i][1])'
0655      <---Source: line: 'cursor.setValueBuffer(u"nombre", bancos[i][1])'
0655     <----For: line: 'cursor.setValueBuffer(u"nombre", bancos[i][1])'
0655    <-----Source: line: 'cursor.setValueBuffer(u"nombre", bancos[i][1])'
0655   <------Function: line: 'cursor.setValueBuffer(u"nombre", bancos[i][1])'
0655  <-------Source: line: 'cursor.setValueBuffer(u"nombre", bancos[i][1])'
0655 <--------Class: line: 'cursor.setValueBuffer(u"nombre", bancos[i][1])'
0655<---------Source: line: 'cursor.setValueBuffer(u"nombre", bancos[i][1])'
0656         InstructionCall: end-gen
0656         InstructionCall: begin-gen
0656          FunctionCall: begin-gen
0656           FunctionCall: expr: 'commitBuffer()'
0656          FunctionCall: end-gen
0656          InstructionCall: line: 'commitBuffer()'
0656        <-Source: line: 'commitBuffer()'
0656       <--With: line: 'cursor.commitBuffer()'
0656      <---Source: line: 'cursor.commitBuffer()'
0656     <----For: line: 'cursor.commitBuffer()'
0656    <-----Source: line: 'cursor.commitBuffer()'
0656   <------Function: line: 'cursor.commitBuffer()'
0656  <-------Source: line: 'cursor.commitBuffer()'
0656 <--------Class: line: 'cursor.commitBuffer()'
0656<---------Source: line: 'cursor.commitBuffer()'
0657         InstructionCall: end-gen
0657        Source: end-gen
0657        With: line: ' #WITH_END'
0657      <-Source: line: ' #WITH_END'
0657     <--For: line: ' #WITH_END'
0657    <---Source: line: ' #WITH_END'
0657   <----Function: line: ' #WITH_END'
0657  <-----Source: line: ' #WITH_END'
0657 <------Class: line: ' #WITH_END'
0657<-------Source: line: ' #WITH_END'
0658       With: end-gen
0658      Source: end-gen
0658      For: line: 'i += 1'
0658    <-Source: line: 'i += 1'
0658   <--Function: line: 'i += 1'
0658  <---Source: line: 'i += 1'
0658 <----Class: line: 'i += 1'
0658<-----Source: line: 'i += 1'
0659      For: line: 'while_pass = True'
0659    <-Source: line: 'while_pass = True'
0659   <--Function: line: 'while_pass = True'
0659  <---Source: line: 'while_pass = True'
0659 <----Class: line: 'while_pass = True'
0659<-----Source: line: 'while_pass = True'
0660      For: line: 'try:'
0660    <-Source: line: 'try:'
0660   <--Function: line: 'try:'
0660  <---Source: line: 'try:'
0660 <----Class: line: 'try:'
0660<-----Source: line: 'try:'
0661      For: begin: 'block-error-catch'
0661    <-Source: begin: 'block-error-catch'
0661   <--Function: begin: 'block-error-catch'
0661  <---Source: begin: 'block-error-catch'
0661 <----Class: begin: 'block-error-catch'
0661<-----Source: begin: 'block-error-catch'
0661      For: line: 'i < len(bancos)'
0661    <-Source: line: 'i < len(bancos)'
0661   <--Function: line: 'i < len(bancos)'
0661  <---Source: line: 'i < len(bancos)'
0661 <----Class: line: 'i < len(bancos)'
0661<-----Source: line: 'i < len(bancos)'
0662      For: end: 'block-error-catch'
0662    <-Source: end: 'block-error-catch'
0662   <--Function: end: 'block-error-catch'
0662  <---Source: end: 'block-error-catch'
0662 <----Class: end: 'block-error-catch'
0662<-----Source: end: 'block-error-catch'
0662      For: line: 'except: break'
0662    <-Source: line: 'except: break'
0662   <--Function: line: 'except: break'
0662  <---Source: line: 'except: break'
0662 <----Class: line: 'except: break'
0662<-----Source: line: 'except: break'
0663      For: end: 'block-for'
0663    <-Source: end: 'block-for'
0663   <--Function: end: 'block-for'
0663  <---Source: end: 'block-for'
0663 <----Class: end: 'block-for'
0663<-----Source: end: 'block-for'
0663     For: end-gen
0663     Delete: begin-gen
0663      Delete: expr: 'del'
0663    <-Source: expr: 'del'
0663   <--Function: expr: 'del'
0663  <---Source: expr: 'del'
0663 <----Class: expr: 'del'
0663<-----Source: expr: 'del'
0664      Identifier: begin-gen
0664       Identifier: expr: 'cursor'
0664     <-Delete: expr: 'cursor'
0664    <--Source: expr: 'cursor'
0664   <---Function: expr: 'cursor'
0664  <----Source: expr: 'cursor'
0664 <-----Class: expr: 'cursor'
0664<------Source: expr: 'cursor'
0665      Identifier: end-gen
0665     Delete: end-gen
0665     InstructionUpdate: begin-gen
0665      Identifier: begin-gen
0665       Identifier: expr: 'cursor'
0665      Identifier: end-gen
0665      OpUpdate: begin-gen
0665       OpUpdate: expr: '='
0665      OpUpdate: end-gen
0665      Value: begin-gen
0665       New: begin-gen
0665        FunctionCall: begin-gen
0665         Value: begin-gen
0665          Constant: begin-gen
0665           Constant: ctype: 'String' -> 'impuestos'
0665           Constant: expr: 'u"impuestos"'
0665         <-Value: expr: 'u"impuestos"'
0665          Constant: end-gen
0665         Value: end-gen
0665         FunctionCall: expr: 'FLSqlCursor(u"impuestos")'
0665       <-New: expr: 'qsatype.FLSqlCursor(u"impuestos")'
0665      <--Value: expr: 'qsatype.FLSqlCursor(u"impuestos")'
0665        FunctionCall: end-gen
0665       New: end-gen
0665      Value: end-gen
0665      InstructionUpdate: line: 'cursor = qsatype.FLSqlCursor(u"impuestos")'
0665    <-Source: line: 'cursor = qsatype.FLSqlCursor(u"impuestos")'
0665   <--Function: line: 'cursor = qsatype.FLSqlCursor(u"impuestos")'
0665  <---Source: line: 'cursor = qsatype.FLSqlCursor(u"impuestos")'
0665 <----Class: line: 'cursor = qsatype.FLSqlCursor(u"impuestos")'
0665<-----Source: line: 'cursor = qsatype.FLSqlCursor(u"impuestos")'
0667     InstructionUpdate: end-gen
0667     With: begin-gen
0667      Identifier: begin-gen
0667       Identifier: expr: 'cursor'
0667      Identifier: end-gen
0667      With: line: ' #WITH_START'
0667    <-Source: line: ' #WITH_START'
0667   <--Function: line: ' #WITH_START'
0667  <---Source: line: ' #WITH_START'
0667 <----Class: line: ' #WITH_START'
0667<-----Source: line: ' #WITH_START'
0668      Source: begin-gen
0668       InstructionCall: begin-gen
0668        FunctionCall: begin-gen
0668         Value: begin-gen
0668          Member: begin-gen
0668           Identifier: begin-gen
0668            Identifier: expr: 'cursor'
0668           Identifier: end-gen
0668           Identifier: begin-gen
0668            Identifier: expr: 'Insert'
0668           Identifier: end-gen
0668           Member: expr: 'cursor.Insert'
0668         <-Value: expr: 'cursor.Insert'
0668          Member: end-gen
0668         Value: end-gen
0668         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0668        FunctionCall: end-gen
0668        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0668      <-Source: line: 'setModeAccess(cursor.Insert)'
0668     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0668    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0668   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0668  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0668 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0668<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0669       InstructionCall: end-gen
0669       InstructionCall: begin-gen
0669        FunctionCall: begin-gen
0669         FunctionCall: expr: 'refreshBuffer()'
0669        FunctionCall: end-gen
0669        InstructionCall: line: 'refreshBuffer()'
0669      <-Source: line: 'refreshBuffer()'
0669     <--With: line: 'cursor.refreshBuffer()'
0669    <---Source: line: 'cursor.refreshBuffer()'
0669   <----Function: line: 'cursor.refreshBuffer()'
0669  <-----Source: line: 'cursor.refreshBuffer()'
0669 <------Class: line: 'cursor.refreshBuffer()'
0669<-------Source: line: 'cursor.refreshBuffer()'
0670       InstructionCall: end-gen
0670       InstructionCall: begin-gen
0670        FunctionCall: begin-gen
0670         Value: begin-gen
0670          Constant: begin-gen
0670           Constant: ctype: 'String' -> 'codimpuesto'
0670           Constant: expr: 'u"codimpuesto"'
0670         <-Value: expr: 'u"codimpuesto"'
0670          Constant: end-gen
0670         Value: end-gen
0670         Value: begin-gen
0670          Constant: begin-gen
0670           Constant: ctype: 'String' -> 'GEN'
0670           Constant: expr: 'u"GEN"'
0670         <-Value: expr: 'u"GEN"'
0670          Constant: end-gen
0670         Value: end-gen
0670         FunctionCall: expr: 'setValueBuffer(u"codimpuesto", u"GEN")'
0670        FunctionCall: end-gen
0670        InstructionCall: line: 'setValueBuffer(u"codimpuesto", u"GEN")'
0670      <-Source: line: 'setValueBuffer(u"codimpuesto", u"GEN")'
0670     <--With: line: 'cursor.setValueBuffer(u"codimpuesto", u"GEN")'
0670    <---Source: line: 'cursor.setValueBuffer(u"codimpuesto", u"GEN")'
0670   <----Function: line: 'cursor.setValueBuffer(u"codimpuesto", u"GEN")'
0670  <-----Source: line: 'cursor.setValueBuffer(u"codimpuesto", u"GEN")'
0670 <------Class: line: 'cursor.setValueBuffer(u"codimpuesto", u"GEN")'
0670<-------Source: line: 'cursor.setValueBuffer(u"codimpuesto", u"GEN")'
0671       InstructionCall: end-gen
0671       InstructionCall: begin-gen
0671        FunctionCall: begin-gen
0671         Value: begin-gen
0671          Constant: begin-gen
0671           Constant: ctype: 'String' -> 'descripcion'
0671           Constant: expr: 'u"descripcion"'
0671         <-Value: expr: 'u"descripcion"'
0671          Constant: end-gen
0671         Value: end-gen
0671         Value: begin-gen
0671          Constant: begin-gen
0671           Constant: ctype: 'String' -> 'I.V.A. General'
0671           Constant: expr: 'u"I.V.A. General"'
0671         <-Value: expr: 'u"I.V.A. General"'
0671          Constant: end-gen
0671         Value: end-gen
0671         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"I.V.A. General")'
0671        FunctionCall: end-gen
0671        InstructionCall: line: 'setValueBuffer(u"descripcion", u"I.V.A. General")'
0671      <-Source: line: 'setValueBuffer(u"descripcion", u"I.V.A. General")'
0671     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. General")'
0671    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. General")'
0671   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. General")'
0671  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. General")'
0671 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. General")'
0671<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. General")'
0672       InstructionCall: end-gen
0672       InstructionCall: begin-gen
0672        FunctionCall: begin-gen
0672         Value: begin-gen
0672          Constant: begin-gen
0672           Constant: ctype: 'String' -> 'iva'
0672           Constant: expr: 'u"iva"'
0672         <-Value: expr: 'u"iva"'
0672          Constant: end-gen
0672         Value: end-gen
0672         Value: begin-gen
0672          Constant: begin-gen
0672           Constant: ctype: 'String' -> '21'
0672           Constant: expr: 'u"21"'
0672         <-Value: expr: 'u"21"'
0672          Constant: end-gen
0672         Value: end-gen
0672         FunctionCall: expr: 'setValueBuffer(u"iva", u"21")'
0672        FunctionCall: end-gen
0672        InstructionCall: line: 'setValueBuffer(u"iva", u"21")'
0672      <-Source: line: 'setValueBuffer(u"iva", u"21")'
0672     <--With: line: 'cursor.setValueBuffer(u"iva", u"21")'
0672    <---Source: line: 'cursor.setValueBuffer(u"iva", u"21")'
0672   <----Function: line: 'cursor.setValueBuffer(u"iva", u"21")'
0672  <-----Source: line: 'cursor.setValueBuffer(u"iva", u"21")'
0672 <------Class: line: 'cursor.setValueBuffer(u"iva", u"21")'
0672<-------Source: line: 'cursor.setValueBuffer(u"iva", u"21")'
0673       InstructionCall: end-gen
0673       InstructionCall: begin-gen
0673        FunctionCall: begin-gen
0673         Value: begin-gen
0673          Constant: begin-gen
0673           Constant: ctype: 'String' -> 'recargo'
0673           Constant: expr: 'u"recargo"'
0673         <-Value: expr: 'u"recargo"'
0673          Constant: end-gen
0673         Value: end-gen
0673         Value: begin-gen
0673          Constant: begin-gen
0673           Constant: ctype: 'String' -> '5.2'
0673           Constant: expr: 'u"5.2"'
0673         <-Value: expr: 'u"5.2"'
0673          Constant: end-gen
0673         Value: end-gen
0673         FunctionCall: expr: 'setValueBuffer(u"recargo", u"5.2")'
0673        FunctionCall: end-gen
0673        InstructionCall: line: 'setValueBuffer(u"recargo", u"5.2")'
0673      <-Source: line: 'setValueBuffer(u"recargo", u"5.2")'
0673     <--With: line: 'cursor.setValueBuffer(u"recargo", u"5.2")'
0673    <---Source: line: 'cursor.setValueBuffer(u"recargo", u"5.2")'
0673   <----Function: line: 'cursor.setValueBuffer(u"recargo", u"5.2")'
0673  <-----Source: line: 'cursor.setValueBuffer(u"recargo", u"5.2")'
0673 <------Class: line: 'cursor.setValueBuffer(u"recargo", u"5.2")'
0673<-------Source: line: 'cursor.setValueBuffer(u"recargo", u"5.2")'
0674       InstructionCall: end-gen
0674       InstructionCall: begin-gen
0674        FunctionCall: begin-gen
0674         FunctionCall: expr: 'commitBuffer()'
0674        FunctionCall: end-gen
0674        InstructionCall: line: 'commitBuffer()'
0674      <-Source: line: 'commitBuffer()'
0674     <--With: line: 'cursor.commitBuffer()'
0674    <---Source: line: 'cursor.commitBuffer()'
0674   <----Function: line: 'cursor.commitBuffer()'
0674  <-----Source: line: 'cursor.commitBuffer()'
0674 <------Class: line: 'cursor.commitBuffer()'
0674<-------Source: line: 'cursor.commitBuffer()'
0675       InstructionCall: end-gen
0675       InstructionCall: begin-gen
0675        FunctionCall: begin-gen
0675         Value: begin-gen
0675          Member: begin-gen
0675           Identifier: begin-gen
0675            Identifier: expr: 'cursor'
0675           Identifier: end-gen
0675           Identifier: begin-gen
0675            Identifier: expr: 'Insert'
0675           Identifier: end-gen
0675           Member: expr: 'cursor.Insert'
0675         <-Value: expr: 'cursor.Insert'
0675          Member: end-gen
0675         Value: end-gen
0675         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0675        FunctionCall: end-gen
0675        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0675      <-Source: line: 'setModeAccess(cursor.Insert)'
0675     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0675    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0675   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0675  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0675 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0675<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0676       InstructionCall: end-gen
0676       InstructionCall: begin-gen
0676        FunctionCall: begin-gen
0676         FunctionCall: expr: 'refreshBuffer()'
0676        FunctionCall: end-gen
0676        InstructionCall: line: 'refreshBuffer()'
0676      <-Source: line: 'refreshBuffer()'
0676     <--With: line: 'cursor.refreshBuffer()'
0676    <---Source: line: 'cursor.refreshBuffer()'
0676   <----Function: line: 'cursor.refreshBuffer()'
0676  <-----Source: line: 'cursor.refreshBuffer()'
0676 <------Class: line: 'cursor.refreshBuffer()'
0676<-------Source: line: 'cursor.refreshBuffer()'
0677       InstructionCall: end-gen
0677       InstructionCall: begin-gen
0677        FunctionCall: begin-gen
0677         Value: begin-gen
0677          Constant: begin-gen
0677           Constant: ctype: 'String' -> 'codimpuesto'
0677           Constant: expr: 'u"codimpuesto"'
0677         <-Value: expr: 'u"codimpuesto"'
0677          Constant: end-gen
0677         Value: end-gen
0677         Value: begin-gen
0677          Constant: begin-gen
0677           Constant: ctype: 'String' -> 'RED'
0677           Constant: expr: 'u"RED"'
0677         <-Value: expr: 'u"RED"'
0677          Constant: end-gen
0677         Value: end-gen
0677         FunctionCall: expr: 'setValueBuffer(u"codimpuesto", u"RED")'
0677        FunctionCall: end-gen
0677        InstructionCall: line: 'setValueBuffer(u"codimpuesto", u"RED")'
0677      <-Source: line: 'setValueBuffer(u"codimpuesto", u"RED")'
0677     <--With: line: 'cursor.setValueBuffer(u"codimpuesto", u"RED")'
0677    <---Source: line: 'cursor.setValueBuffer(u"codimpuesto", u"RED")'
0677   <----Function: line: 'cursor.setValueBuffer(u"codimpuesto", u"RED")'
0677  <-----Source: line: 'cursor.setValueBuffer(u"codimpuesto", u"RED")'
0677 <------Class: line: 'cursor.setValueBuffer(u"codimpuesto", u"RED")'
0677<-------Source: line: 'cursor.setValueBuffer(u"codimpuesto", u"RED")'
0678       InstructionCall: end-gen
0678       InstructionCall: begin-gen
0678        FunctionCall: begin-gen
0678         Value: begin-gen
0678          Constant: begin-gen
0678           Constant: ctype: 'String' -> 'descripcion'
0678           Constant: expr: 'u"descripcion"'
0678         <-Value: expr: 'u"descripcion"'
0678          Constant: end-gen
0678         Value: end-gen
0678         Value: begin-gen
0678          Constant: begin-gen
0678           Constant: ctype: 'String' -> 'I.V.A. Reducido'
0678           Constant: expr: 'u"I.V.A. Reducido"'
0678         <-Value: expr: 'u"I.V.A. Reducido"'
0678          Constant: end-gen
0678         Value: end-gen
0678         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"I.V.A. Reducido")'
0678        FunctionCall: end-gen
0678        InstructionCall: line: 'setValueBuffer(u"descripcion", u"I.V.A. Reducido")'
0678      <-Source: line: 'setValueBuffer(u"descripcion", u"I.V.A. Reducido")'
0678     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. Reducido")'
0678    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. Reducido")'
0678   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. Reducido")'
0678  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. Reducido")'
0678 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. Reducido")'
0678<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. Reducido")'
0679       InstructionCall: end-gen
0679       InstructionCall: begin-gen
0679        FunctionCall: begin-gen
0679         Value: begin-gen
0679          Constant: begin-gen
0679           Constant: ctype: 'String' -> 'iva'
0679           Constant: expr: 'u"iva"'
0679         <-Value: expr: 'u"iva"'
0679          Constant: end-gen
0679         Value: end-gen
0679         Value: begin-gen
0679          Constant: begin-gen
0679           Constant: ctype: 'String' -> '10'
0679           Constant: expr: 'u"10"'
0679         <-Value: expr: 'u"10"'
0679          Constant: end-gen
0679         Value: end-gen
0679         FunctionCall: expr: 'setValueBuffer(u"iva", u"10")'
0679        FunctionCall: end-gen
0679        InstructionCall: line: 'setValueBuffer(u"iva", u"10")'
0679      <-Source: line: 'setValueBuffer(u"iva", u"10")'
0679     <--With: line: 'cursor.setValueBuffer(u"iva", u"10")'
0679    <---Source: line: 'cursor.setValueBuffer(u"iva", u"10")'
0679   <----Function: line: 'cursor.setValueBuffer(u"iva", u"10")'
0679  <-----Source: line: 'cursor.setValueBuffer(u"iva", u"10")'
0679 <------Class: line: 'cursor.setValueBuffer(u"iva", u"10")'
0679<-------Source: line: 'cursor.setValueBuffer(u"iva", u"10")'
0680       InstructionCall: end-gen
0680       InstructionCall: begin-gen
0680        FunctionCall: begin-gen
0680         Value: begin-gen
0680          Constant: begin-gen
0680           Constant: ctype: 'String' -> 'recargo'
0680           Constant: expr: 'u"recargo"'
0680         <-Value: expr: 'u"recargo"'
0680          Constant: end-gen
0680         Value: end-gen
0680         Value: begin-gen
0680          Constant: begin-gen
0680           Constant: ctype: 'String' -> '1.4'
0680           Constant: expr: 'u"1.4"'
0680         <-Value: expr: 'u"1.4"'
0680          Constant: end-gen
0680         Value: end-gen
0680         FunctionCall: expr: 'setValueBuffer(u"recargo", u"1.4")'
0680        FunctionCall: end-gen
0680        InstructionCall: line: 'setValueBuffer(u"recargo", u"1.4")'
0680      <-Source: line: 'setValueBuffer(u"recargo", u"1.4")'
0680     <--With: line: 'cursor.setValueBuffer(u"recargo", u"1.4")'
0680    <---Source: line: 'cursor.setValueBuffer(u"recargo", u"1.4")'
0680   <----Function: line: 'cursor.setValueBuffer(u"recargo", u"1.4")'
0680  <-----Source: line: 'cursor.setValueBuffer(u"recargo", u"1.4")'
0680 <------Class: line: 'cursor.setValueBuffer(u"recargo", u"1.4")'
0680<-------Source: line: 'cursor.setValueBuffer(u"recargo", u"1.4")'
0681       InstructionCall: end-gen
0681       InstructionCall: begin-gen
0681        FunctionCall: begin-gen
0681         FunctionCall: expr: 'commitBuffer()'
0681        FunctionCall: end-gen
0681        InstructionCall: line: 'commitBuffer()'
0681      <-Source: line: 'commitBuffer()'
0681     <--With: line: 'cursor.commitBuffer()'
0681    <---Source: line: 'cursor.commitBuffer()'
0681   <----Function: line: 'cursor.commitBuffer()'
0681  <-----Source: line: 'cursor.commitBuffer()'
0681 <------Class: line: 'cursor.commitBuffer()'
0681<-------Source: line: 'cursor.commitBuffer()'
0682       InstructionCall: end-gen
0682       InstructionCall: begin-gen
0682        FunctionCall: begin-gen
0682         Value: begin-gen
0682          Member: begin-gen
0682           Identifier: begin-gen
0682            Identifier: expr: 'cursor'
0682           Identifier: end-gen
0682           Identifier: begin-gen
0682            Identifier: expr: 'Insert'
0682           Identifier: end-gen
0682           Member: expr: 'cursor.Insert'
0682         <-Value: expr: 'cursor.Insert'
0682          Member: end-gen
0682         Value: end-gen
0682         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0682        FunctionCall: end-gen
0682        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0682      <-Source: line: 'setModeAccess(cursor.Insert)'
0682     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0682    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0682   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0682  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0682 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0682<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0683       InstructionCall: end-gen
0683       InstructionCall: begin-gen
0683        FunctionCall: begin-gen
0683         FunctionCall: expr: 'refreshBuffer()'
0683        FunctionCall: end-gen
0683        InstructionCall: line: 'refreshBuffer()'
0683      <-Source: line: 'refreshBuffer()'
0683     <--With: line: 'cursor.refreshBuffer()'
0683    <---Source: line: 'cursor.refreshBuffer()'
0683   <----Function: line: 'cursor.refreshBuffer()'
0683  <-----Source: line: 'cursor.refreshBuffer()'
0683 <------Class: line: 'cursor.refreshBuffer()'
0683<-------Source: line: 'cursor.refreshBuffer()'
0684       InstructionCall: end-gen
0684       InstructionCall: begin-gen
0684        FunctionCall: begin-gen
0684         Value: begin-gen
0684          Constant: begin-gen
0684           Constant: ctype: 'String' -> 'codimpuesto'
0684           Constant: expr: 'u"codimpuesto"'
0684         <-Value: expr: 'u"codimpuesto"'
0684          Constant: end-gen
0684         Value: end-gen
0684         Value: begin-gen
0684          Constant: begin-gen
0684           Constant: ctype: 'String' -> 'SRED'
0684           Constant: expr: 'u"SRED"'
0684         <-Value: expr: 'u"SRED"'
0684          Constant: end-gen
0684         Value: end-gen
0684         FunctionCall: expr: 'setValueBuffer(u"codimpuesto", u"SRED")'
0684        FunctionCall: end-gen
0684        InstructionCall: line: 'setValueBuffer(u"codimpuesto", u"SRED")'
0684      <-Source: line: 'setValueBuffer(u"codimpuesto", u"SRED")'
0684     <--With: line: 'cursor.setValueBuffer(u"codimpuesto", u"SRED")'
0684    <---Source: line: 'cursor.setValueBuffer(u"codimpuesto", u"SRED")'
0684   <----Function: line: 'cursor.setValueBuffer(u"codimpuesto", u"SRED")'
0684  <-----Source: line: 'cursor.setValueBuffer(u"codimpuesto", u"SRED")'
0684 <------Class: line: 'cursor.setValueBuffer(u"codimpuesto", u"SRED")'
0684<-------Source: line: 'cursor.setValueBuffer(u"codimpuesto", u"SRED")'
0685       InstructionCall: end-gen
0685       InstructionCall: begin-gen
0685        FunctionCall: begin-gen
0685         Value: begin-gen
0685          Constant: begin-gen
0685           Constant: ctype: 'String' -> 'descripcion'
0685           Constant: expr: 'u"descripcion"'
0685         <-Value: expr: 'u"descripcion"'
0685          Constant: end-gen
0685         Value: end-gen
0685         Value: begin-gen
0685          Constant: begin-gen
0685           Constant: ctype: 'String' -> 'I.V.A. Superreducido'
0685           Constant: expr: 'u"I.V.A. Superreducido"'
0685         <-Value: expr: 'u"I.V.A. Superreducido"'
0685          Constant: end-gen
0685         Value: end-gen
0685         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"I.V.A. Superreducido")'
0685        FunctionCall: end-gen
0685        InstructionCall: line: 'setValueBuffer(u"descripcion", u"I.V.A. Superreducido")'
0685      <-Source: line: 'setValueBuffer(u"descripcion", u"I.V.A. Superreducido")'
0685     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. Superreducido")'
0685    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. Superreducido")'
0685   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. Superreducido")'
0685  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. Superreducido")'
0685 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. Superreducido")'
0685<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"I.V.A. Superreducido")'
0686       InstructionCall: end-gen
0686       InstructionCall: begin-gen
0686        FunctionCall: begin-gen
0686         Value: begin-gen
0686          Constant: begin-gen
0686           Constant: ctype: 'String' -> 'iva'
0686           Constant: expr: 'u"iva"'
0686         <-Value: expr: 'u"iva"'
0686          Constant: end-gen
0686         Value: end-gen
0686         Value: begin-gen
0686          Constant: begin-gen
0686           Constant: ctype: 'String' -> '4'
0686           Constant: expr: 'u"4"'
0686         <-Value: expr: 'u"4"'
0686          Constant: end-gen
0686         Value: end-gen
0686         FunctionCall: expr: 'setValueBuffer(u"iva", u"4")'
0686        FunctionCall: end-gen
0686        InstructionCall: line: 'setValueBuffer(u"iva", u"4")'
0686      <-Source: line: 'setValueBuffer(u"iva", u"4")'
0686     <--With: line: 'cursor.setValueBuffer(u"iva", u"4")'
0686    <---Source: line: 'cursor.setValueBuffer(u"iva", u"4")'
0686   <----Function: line: 'cursor.setValueBuffer(u"iva", u"4")'
0686  <-----Source: line: 'cursor.setValueBuffer(u"iva", u"4")'
0686 <------Class: line: 'cursor.setValueBuffer(u"iva", u"4")'
0686<-------Source: line: 'cursor.setValueBuffer(u"iva", u"4")'
0687       InstructionCall: end-gen
0687       InstructionCall: begin-gen
0687        FunctionCall: begin-gen
0687         Value: begin-gen
0687          Constant: begin-gen
0687           Constant: ctype: 'String' -> 'recargo'
0687           Constant: expr: 'u"recargo"'
0687         <-Value: expr: 'u"recargo"'
0687          Constant: end-gen
0687         Value: end-gen
0687         Value: begin-gen
0687          Constant: begin-gen
0687           Constant: ctype: 'String' -> '0.5'
0687           Constant: expr: 'u"0.5"'
0687         <-Value: expr: 'u"0.5"'
0687          Constant: end-gen
0687         Value: end-gen
0687         FunctionCall: expr: 'setValueBuffer(u"recargo", u"0.5")'
0687        FunctionCall: end-gen
0687        InstructionCall: line: 'setValueBuffer(u"recargo", u"0.5")'
0687      <-Source: line: 'setValueBuffer(u"recargo", u"0.5")'
0687     <--With: line: 'cursor.setValueBuffer(u"recargo", u"0.5")'
0687    <---Source: line: 'cursor.setValueBuffer(u"recargo", u"0.5")'
0687   <----Function: line: 'cursor.setValueBuffer(u"recargo", u"0.5")'
0687  <-----Source: line: 'cursor.setValueBuffer(u"recargo", u"0.5")'
0687 <------Class: line: 'cursor.setValueBuffer(u"recargo", u"0.5")'
0687<-------Source: line: 'cursor.setValueBuffer(u"recargo", u"0.5")'
0688       InstructionCall: end-gen
0688       InstructionCall: begin-gen
0688        FunctionCall: begin-gen
0688         FunctionCall: expr: 'commitBuffer()'
0688        FunctionCall: end-gen
0688        InstructionCall: line: 'commitBuffer()'
0688      <-Source: line: 'commitBuffer()'
0688     <--With: line: 'cursor.commitBuffer()'
0688    <---Source: line: 'cursor.commitBuffer()'
0688   <----Function: line: 'cursor.commitBuffer()'
0688  <-----Source: line: 'cursor.commitBuffer()'
0688 <------Class: line: 'cursor.commitBuffer()'
0688<-------Source: line: 'cursor.commitBuffer()'
0689       InstructionCall: end-gen
0689      Source: end-gen
0689      With: line: ' #WITH_END'
0689    <-Source: line: ' #WITH_END'
0689   <--Function: line: ' #WITH_END'
0689  <---Source: line: ' #WITH_END'
0689 <----Class: line: ' #WITH_END'
0689<-----Source: line: ' #WITH_END'
0690     With: end-gen
0690     Delete: begin-gen
0690      Delete: expr: 'del'
0690    <-Source: expr: 'del'
0690   <--Function: expr: 'del'
0690  <---Source: expr: 'del'
0690 <----Class: expr: 'del'
0690<-----Source: expr: 'del'
0691      Identifier: begin-gen
0691       Identifier: expr: 'cursor'
0691     <-Delete: expr: 'cursor'
0691    <--Source: expr: 'cursor'
0691   <---Function: expr: 'cursor'
0691  <----Source: expr: 'cursor'
0691 <-----Class: expr: 'cursor'
0691<------Source: expr: 'cursor'
0692      Identifier: end-gen
0692     Delete: end-gen
0692     InstructionUpdate: begin-gen
0692      Identifier: begin-gen
0692       Identifier: expr: 'cursor'
0692      Identifier: end-gen
0692      OpUpdate: begin-gen
0692       OpUpdate: expr: '='
0692      OpUpdate: end-gen
0692      Value: begin-gen
0692       New: begin-gen
0692        FunctionCall: begin-gen
0692         Value: begin-gen
0692          Constant: begin-gen
0692           Constant: ctype: 'String' -> 'paises'
0692           Constant: expr: 'u"paises"'
0692         <-Value: expr: 'u"paises"'
0692          Constant: end-gen
0692         Value: end-gen
0692         FunctionCall: expr: 'FLSqlCursor(u"paises")'
0692       <-New: expr: 'qsatype.FLSqlCursor(u"paises")'
0692      <--Value: expr: 'qsatype.FLSqlCursor(u"paises")'
0692        FunctionCall: end-gen
0692       New: end-gen
0692      Value: end-gen
0692      InstructionUpdate: line: 'cursor = qsatype.FLSqlCursor(u"paises")'
0692    <-Source: line: 'cursor = qsatype.FLSqlCursor(u"paises")'
0692   <--Function: line: 'cursor = qsatype.FLSqlCursor(u"paises")'
0692  <---Source: line: 'cursor = qsatype.FLSqlCursor(u"paises")'
0692 <----Class: line: 'cursor = qsatype.FLSqlCursor(u"paises")'
0692<-----Source: line: 'cursor = qsatype.FLSqlCursor(u"paises")'
0693     InstructionUpdate: end-gen
0693     With: begin-gen
0693      Identifier: begin-gen
0693       Identifier: expr: 'cursor'
0693      Identifier: end-gen
0693      With: line: ' #WITH_START'
0693    <-Source: line: ' #WITH_START'
0693   <--Function: line: ' #WITH_START'
0693  <---Source: line: ' #WITH_START'
0693 <----Class: line: ' #WITH_START'
0693<-----Source: line: ' #WITH_START'
0694      Source: begin-gen
0694       InstructionCall: begin-gen
0694        FunctionCall: begin-gen
0694         Value: begin-gen
0694          Member: begin-gen
0694           Identifier: begin-gen
0694            Identifier: expr: 'cursor'
0694           Identifier: end-gen
0694           Identifier: begin-gen
0694            Identifier: expr: 'Insert'
0694           Identifier: end-gen
0694           Member: expr: 'cursor.Insert'
0694         <-Value: expr: 'cursor.Insert'
0694          Member: end-gen
0694         Value: end-gen
0694         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0694        FunctionCall: end-gen
0694        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0694      <-Source: line: 'setModeAccess(cursor.Insert)'
0694     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0694    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0694   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0694  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0694 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0694<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0695       InstructionCall: end-gen
0695       InstructionCall: begin-gen
0695        FunctionCall: begin-gen
0695         FunctionCall: expr: 'refreshBuffer()'
0695        FunctionCall: end-gen
0695        InstructionCall: line: 'refreshBuffer()'
0695      <-Source: line: 'refreshBuffer()'
0695     <--With: line: 'cursor.refreshBuffer()'
0695    <---Source: line: 'cursor.refreshBuffer()'
0695   <----Function: line: 'cursor.refreshBuffer()'
0695  <-----Source: line: 'cursor.refreshBuffer()'
0695 <------Class: line: 'cursor.refreshBuffer()'
0695<-------Source: line: 'cursor.refreshBuffer()'
0696       InstructionCall: end-gen
0696       InstructionCall: begin-gen
0696        FunctionCall: begin-gen
0696         Value: begin-gen
0696          Constant: begin-gen
0696           Constant: ctype: 'String' -> 'codpais'
0696           Constant: expr: 'u"codpais"'
0696         <-Value: expr: 'u"codpais"'
0696          Constant: end-gen
0696         Value: end-gen
0696         Value: begin-gen
0696          Constant: begin-gen
0696           Constant: ctype: 'String' -> 'ES'
0696           Constant: expr: 'u"ES"'
0696         <-Value: expr: 'u"ES"'
0696          Constant: end-gen
0696         Value: end-gen
0696         FunctionCall: expr: 'setValueBuffer(u"codpais", u"ES")'
0696        FunctionCall: end-gen
0696        InstructionCall: line: 'setValueBuffer(u"codpais", u"ES")'
0696      <-Source: line: 'setValueBuffer(u"codpais", u"ES")'
0696     <--With: line: 'cursor.setValueBuffer(u"codpais", u"ES")'
0696    <---Source: line: 'cursor.setValueBuffer(u"codpais", u"ES")'
0696   <----Function: line: 'cursor.setValueBuffer(u"codpais", u"ES")'
0696  <-----Source: line: 'cursor.setValueBuffer(u"codpais", u"ES")'
0696 <------Class: line: 'cursor.setValueBuffer(u"codpais", u"ES")'
0696<-------Source: line: 'cursor.setValueBuffer(u"codpais", u"ES")'
0697       InstructionCall: end-gen
0697       InstructionCall: begin-gen
0697        FunctionCall: begin-gen
0697         Value: begin-gen
0697          Constant: begin-gen
0697           Constant: ctype: 'String' -> 'nombre'
0697           Constant: expr: 'u"nombre"'
0697         <-Value: expr: 'u"nombre"'
0697          Constant: end-gen
0697         Value: end-gen
0697         Value: begin-gen
0697          Constant: begin-gen
0697           Constant: ctype: 'String' -> 'ESPAÑA'
0697           Constant: expr: 'u"ESPAÑA"'
0697         <-Value: expr: 'u"ESPAÑA"'
0697          Constant: end-gen
0697         Value: end-gen
0697         FunctionCall: expr: 'setValueBuffer(u"nombre", u"ESPAÑA")'
0697        FunctionCall: end-gen
0697        InstructionCall: line: 'setValueBuffer(u"nombre", u"ESPAÑA")'
0697      <-Source: line: 'setValueBuffer(u"nombre", u"ESPAÑA")'
0697     <--With: line: 'cursor.setValueBuffer(u"nombre", u"ESPAÑA")'
0697    <---Source: line: 'cursor.setValueBuffer(u"nombre", u"ESPAÑA")'
0697   <----Function: line: 'cursor.setValueBuffer(u"nombre", u"ESPAÑA")'
0697  <-----Source: line: 'cursor.setValueBuffer(u"nombre", u"ESPAÑA")'
0697 <------Class: line: 'cursor.setValueBuffer(u"nombre", u"ESPAÑA")'
0697<-------Source: line: 'cursor.setValueBuffer(u"nombre", u"ESPAÑA")'
0698       InstructionCall: end-gen
0698       InstructionCall: begin-gen
0698        FunctionCall: begin-gen
0698         Value: begin-gen
0698          Constant: begin-gen
0698           Constant: ctype: 'String' -> 'bandera'
0698           Constant: expr: 'u"bandera"'
0698         <-Value: expr: 'u"bandera"'
0698          Constant: end-gen
0698         Value: end-gen
0698         Value: begin-gen
0698          Constant: begin-gen
0698           Constant: ctype: 'String' -> '/* XPM */\\nstatic char * esp_xpm[] = {\\n\\"30 16 16 1\\",\\n\\"  c #6C1E04\\",\\n\\".\tc #B78B19\\",\\n\\"+\tc #E4D31A\\",\\n\\"@\tc #8E4F09\\",\\n\\"#\tc #FBFC05\\",\\n\\"$\tc #EF0406\\",\\n\\"%\tc #F9978D\\",\\n\\"&\tc #FCFA36\\",\\n\\"*\tc #FC595C\\",\\n\\"=\tc #E1B025\\",\\n\\"-\tc #FB3634\\",\\n\\";\tc #E67559\\",\\n\\">\tc #A26E13\\",\\n\\",\tc #FCACAC\\",\\n\\"\'\tc #B29F19\\",\\n\\")\tc #9D0204\\",\\n\\",,%%%%%%%%%%%%%%%%%%%%%%%%%%;$\\",\\n\\";;**************************$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"&&####&#&++&################+\'\\",\\"&&####&=.>..&###############+\'\\",\\n\\"&&####@=@@@=>=##############+\'\\",\\n\\"&&####=\'>;>%=+&#############+\'\\",\\n\\"&&####@@@ @>>.##############+\'\\",\\n\\"&&####.=>@;;#;##############+\'\\",\\"&&+###>..>..>=##############+\'\\",\\n\\"&&####.+===+.+&#############+.\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"$$$)$)$)$))$)$)$)$)$)$)$)$)$))\\",\\n\\"))))))))))))))))))))))))))))))\\"};\\n'
0698           Constant: expr: 'u"/* XPM */\\nstatic char * esp_xpm[] = {\\n\\"30 16 16 1\\",\\n\\"  c #6C1E04\\",\\n\\".\tc #B78B19\\",\\n\\"+\tc #E4D31A\\",\\n\\"@\tc #8E4F09\\",\\n\\"#\tc #FBFC05\\",\\n\\"$\tc #EF0406\\",\\n\\"%\tc #F9978D\\",\\n\\"&\tc #FCFA36\\",\\n\\"*\tc #FC595C\\",\\n\\"=\tc #E1B025\\",\\n\\"-\tc #FB3634\\",\\n\\";\tc #E67559\\",\\n\\">\tc #A26E13\\",\\n\\",\tc #FCACAC\\",\\n\\"\'\tc #B29F19\\",\\n\\")\tc #9D0204\\",\\n\\",,%%%%%%%%%%%%%%%%%%%%%%%%%%;$\\",\\n\\";;**************************$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"&&####&#&++&################+\'\\",\\"&&####&=.>..&###############+\'\\",\\n\\"&&####@=@@@=>=##############+\'\\",\\n\\"&&####=\'>;>%=+&#############+\'\\",\\n\\"&&####@@@ @>>.##############+\'\\",\\n\\"&&####.=>@;;#;##############+\'\\",\\"&&+###>..>..>=##############+\'\\",\\n\\"&&####.+===+.+&#############+.\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"$$$)$)$)$))$)$)$)$)$)$)$)$)$))\\",\\n\\"))))))))))))))))))))))))))))))\\"};\\n"'
0698         <-Value: expr: 'u"/* XPM */\\nstatic char * esp_xpm[] = {\\n\\"30 16 16 1\\",\\n\\"  c #6C1E04\\",\\n\\".\tc #B78B19\\",\\n\\"+\tc #E4D31A\\",\\n\\"@\tc #8E4F09\\",\\n\\"#\tc #FBFC05\\",\\n\\"$\tc #EF0406\\",\\n\\"%\tc #F9978D\\",\\n\\"&\tc #FCFA36\\",\\n\\"*\tc #FC595C\\",\\n\\"=\tc #E1B025\\",\\n\\"-\tc #FB3634\\",\\n\\";\tc #E67559\\",\\n\\">\tc #A26E13\\",\\n\\",\tc #FCACAC\\",\\n\\"\'\tc #B29F19\\",\\n\\")\tc #9D0204\\",\\n\\",,%%%%%%%%%%%%%%%%%%%%%%%%%%;$\\",\\n\\";;**************************$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"&&####&#&++&################+\'\\",\\"&&####&=.>..&###############+\'\\",\\n\\"&&####@=@@@=>=##############+\'\\",\\n\\"&&####=\'>;>%=+&#############+\'\\",\\n\\"&&####@@@ @>>.##############+\'\\",\\n\\"&&####.=>@;;#;##############+\'\\",\\"&&+###>..>..>=##############+\'\\",\\n\\"&&####.+===+.+&#############+.\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"$$$)$)$)$))$)$)$)$)$)$)$)$)$))\\",\\n\\"))))))))))))))))))))))))))))))\\"};\\n"'
0698          Constant: end-gen
0698         Value: end-gen
0698         FunctionCall: expr: 'setValueBuffer(u"bandera", u"/* XPM */\\nstatic char * esp_xpm[] = {\\n\\"30 16 16 1\\",\\n\\"  c #6C1E04\\",\\n\\".\tc #B78B19\\",\\n\\"+\tc #E4D31A\\",\\n\\"@\tc #8E4F09\\",\\n\\"#\tc #FBFC05\\",\\n\\"$\tc #EF0406\\",\\n\\"%\tc #F9978D\\",\\n\\"&\tc #FCFA36\\",\\n\\"*\tc #FC595C\\",\\n\\"=\tc #E1B025\\",\\n\\"-\tc #FB3634\\",\\n\\";\tc #E67559\\",\\n\\">\tc #A26E13\\",\\n\\",\tc #FCACAC\\",\\n\\"\'\tc #B29F19\\",\\n\\")\tc #9D0204\\",\\n\\",,%%%%%%%%%%%%%%%%%%%%%%%%%%;$\\",\\n\\";;**************************$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"&&####&#&++&################+\'\\",\\"&&####&=.>..&###############+\'\\",\\n\\"&&####@=@@@=>=##############+\'\\",\\n\\"&&####=\'>;>%=+&#############+\'\\",\\n\\"&&####@@@ @>>.##############+\'\\",\\n\\"&&####.=>@;;#;##############+\'\\",\\"&&+###>..>..>=##############+\'\\",\\n\\"&&####.+===+.+&#############+.\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"$$$)$)$)$))$)$)$)$)$)$)$)$)$))\\",\\n\\"))))))))))))))))))))))))))))))\\"};\\n")'
0698        FunctionCall: end-gen
0698        InstructionCall: line: 'setValueBuffer(u"bandera", u"/* XPM */\\nstatic char * esp_xpm[] = {\\n\\"30 16 16 1\\",\\n\\"  c #6C1E04\\",\\n\\".\tc #B78B19\\",\\n\\"+\tc #E4D31A\\",\\n\\"@\tc #8E4F09\\",\\n\\"#\tc #FBFC05\\",\\n\\"$\tc #EF0406\\",\\n\\"%\tc #F9978D\\",\\n\\"&\tc #FCFA36\\",\\n\\"*\tc #FC595C\\",\\n\\"=\tc #E1B025\\",\\n\\"-\tc #FB3634\\",\\n\\";\tc #E67559\\",\\n\\">\tc #A26E13\\",\\n\\",\tc #FCACAC\\",\\n\\"\'\tc #B29F19\\",\\n\\")\tc #9D0204\\",\\n\\",,%%%%%%%%%%%%%%%%%%%%%%%%%%;$\\",\\n\\";;**************************$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"&&####&#&++&################+\'\\",\\"&&####&=.>..&###############+\'\\",\\n\\"&&####@=@@@=>=##############+\'\\",\\n\\"&&####=\'>;>%=+&#############+\'\\",\\n\\"&&####@@@ @>>.##############+\'\\",\\n\\"&&####.=>@;;#;##############+\'\\",\\"&&+###>..>..>=##############+\'\\",\\n\\"&&####.+===+.+&#############+.\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"$$$)$)$)$))$)$)$)$)$)$)$)$)$))\\",\\n\\"))))))))))))))))))))))))))))))\\"};\\n")'
0698      <-Source: line: 'setValueBuffer(u"bandera", u"/* XPM */\\nstatic char * esp_xpm[] = {\\n\\"30 16 16 1\\",\\n\\"  c #6C1E04\\",\\n\\".\tc #B78B19\\",\\n\\"+\tc #E4D31A\\",\\n\\"@\tc #8E4F09\\",\\n\\"#\tc #FBFC05\\",\\n\\"$\tc #EF0406\\",\\n\\"%\tc #F9978D\\",\\n\\"&\tc #FCFA36\\",\\n\\"*\tc #FC595C\\",\\n\\"=\tc #E1B025\\",\\n\\"-\tc #FB3634\\",\\n\\";\tc #E67559\\",\\n\\">\tc #A26E13\\",\\n\\",\tc #FCACAC\\",\\n\\"\'\tc #B29F19\\",\\n\\")\tc #9D0204\\",\\n\\",,%%%%%%%%%%%%%%%%%%%%%%%%%%;$\\",\\n\\";;**************************$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"&&####&#&++&################+\'\\",\\"&&####&=.>..&###############+\'\\",\\n\\"&&####@=@@@=>=##############+\'\\",\\n\\"&&####=\'>;>%=+&#############+\'\\",\\n\\"&&####@@@ @>>.##############+\'\\",\\n\\"&&####.=>@;;#;##############+\'\\",\\"&&+###>..>..>=##############+\'\\",\\n\\"&&####.+===+.+&#############+.\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"$$$)$)$)$))$)$)$)$)$)$)$)$)$))\\",\\n\\"))))))))))))))))))))))))))))))\\"};\\n")'
0698     <--With: line: 'cursor.setValueBuffer(u"bandera", u"/* XPM */\\nstatic char * esp_xpm[] = {\\n\\"30 16 16 1\\",\\n\\"  c #6C1E04\\",\\n\\".\tc #B78B19\\",\\n\\"+\tc #E4D31A\\",\\n\\"@\tc #8E4F09\\",\\n\\"#\tc #FBFC05\\",\\n\\"$\tc #EF0406\\",\\n\\"%\tc #F9978D\\",\\n\\"&\tc #FCFA36\\",\\n\\"*\tc #FC595C\\",\\n\\"=\tc #E1B025\\",\\n\\"-\tc #FB3634\\",\\n\\";\tc #E67559\\",\\n\\">\tc #A26E13\\",\\n\\",\tc #FCACAC\\",\\n\\"\'\tc #B29F19\\",\\n\\")\tc #9D0204\\",\\n\\",,%%%%%%%%%%%%%%%%%%%%%%%%%%;$\\",\\n\\";;**************************$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"&&####&#&++&################+\'\\",\\"&&####&=.>..&###############+\'\\",\\n\\"&&####@=@@@=>=##############+\'\\",\\n\\"&&####=\'>;>%=+&#############+\'\\",\\n\\"&&####@@@ @>>.##############+\'\\",\\n\\"&&####.=>@;;#;##############+\'\\",\\"&&+###>..>..>=##############+\'\\",\\n\\"&&####.+===+.+&#############+.\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"$$$)$)$)$))$)$)$)$)$)$)$)$)$))\\",\\n\\"))))))))))))))))))))))))))))))\\"};\\n")'
0698    <---Source: line: 'cursor.setValueBuffer(u"bandera", u"/* XPM */\\nstatic char * esp_xpm[] = {\\n\\"30 16 16 1\\",\\n\\"  c #6C1E04\\",\\n\\".\tc #B78B19\\",\\n\\"+\tc #E4D31A\\",\\n\\"@\tc #8E4F09\\",\\n\\"#\tc #FBFC05\\",\\n\\"$\tc #EF0406\\",\\n\\"%\tc #F9978D\\",\\n\\"&\tc #FCFA36\\",\\n\\"*\tc #FC595C\\",\\n\\"=\tc #E1B025\\",\\n\\"-\tc #FB3634\\",\\n\\";\tc #E67559\\",\\n\\">\tc #A26E13\\",\\n\\",\tc #FCACAC\\",\\n\\"\'\tc #B29F19\\",\\n\\")\tc #9D0204\\",\\n\\",,%%%%%%%%%%%%%%%%%%%%%%%%%%;$\\",\\n\\";;**************************$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"&&####&#&++&################+\'\\",\\"&&####&=.>..&###############+\'\\",\\n\\"&&####@=@@@=>=##############+\'\\",\\n\\"&&####=\'>;>%=+&#############+\'\\",\\n\\"&&####@@@ @>>.##############+\'\\",\\n\\"&&####.=>@;;#;##############+\'\\",\\"&&+###>..>..>=##############+\'\\",\\n\\"&&####.+===+.+&#############+.\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"$$$)$)$)$))$)$)$)$)$)$)$)$)$))\\",\\n\\"))))))))))))))))))))))))))))))\\"};\\n")'
0698   <----Function: line: 'cursor.setValueBuffer(u"bandera", u"/* XPM */\\nstatic char * esp_xpm[] = {\\n\\"30 16 16 1\\",\\n\\"  c #6C1E04\\",\\n\\".\tc #B78B19\\",\\n\\"+\tc #E4D31A\\",\\n\\"@\tc #8E4F09\\",\\n\\"#\tc #FBFC05\\",\\n\\"$\tc #EF0406\\",\\n\\"%\tc #F9978D\\",\\n\\"&\tc #FCFA36\\",\\n\\"*\tc #FC595C\\",\\n\\"=\tc #E1B025\\",\\n\\"-\tc #FB3634\\",\\n\\";\tc #E67559\\",\\n\\">\tc #A26E13\\",\\n\\",\tc #FCACAC\\",\\n\\"\'\tc #B29F19\\",\\n\\")\tc #9D0204\\",\\n\\",,%%%%%%%%%%%%%%%%%%%%%%%%%%;$\\",\\n\\";;**************************$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"&&####&#&++&################+\'\\",\\"&&####&=.>..&###############+\'\\",\\n\\"&&####@=@@@=>=##############+\'\\",\\n\\"&&####=\'>;>%=+&#############+\'\\",\\n\\"&&####@@@ @>>.##############+\'\\",\\n\\"&&####.=>@;;#;##############+\'\\",\\"&&+###>..>..>=##############+\'\\",\\n\\"&&####.+===+.+&#############+.\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"$$$)$)$)$))$)$)$)$)$)$)$)$)$))\\",\\n\\"))))))))))))))))))))))))))))))\\"};\\n")'
0698  <-----Source: line: 'cursor.setValueBuffer(u"bandera", u"/* XPM */\\nstatic char * esp_xpm[] = {\\n\\"30 16 16 1\\",\\n\\"  c #6C1E04\\",\\n\\".\tc #B78B19\\",\\n\\"+\tc #E4D31A\\",\\n\\"@\tc #8E4F09\\",\\n\\"#\tc #FBFC05\\",\\n\\"$\tc #EF0406\\",\\n\\"%\tc #F9978D\\",\\n\\"&\tc #FCFA36\\",\\n\\"*\tc #FC595C\\",\\n\\"=\tc #E1B025\\",\\n\\"-\tc #FB3634\\",\\n\\";\tc #E67559\\",\\n\\">\tc #A26E13\\",\\n\\",\tc #FCACAC\\",\\n\\"\'\tc #B29F19\\",\\n\\")\tc #9D0204\\",\\n\\",,%%%%%%%%%%%%%%%%%%%%%%%%%%;$\\",\\n\\";;**************************$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"&&####&#&++&################+\'\\",\\"&&####&=.>..&###############+\'\\",\\n\\"&&####@=@@@=>=##############+\'\\",\\n\\"&&####=\'>;>%=+&#############+\'\\",\\n\\"&&####@@@ @>>.##############+\'\\",\\n\\"&&####.=>@;;#;##############+\'\\",\\"&&+###>..>..>=##############+\'\\",\\n\\"&&####.+===+.+&#############+.\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"$$$)$)$)$))$)$)$)$)$)$)$)$)$))\\",\\n\\"))))))))))))))))))))))))))))))\\"};\\n")'
0698 <------Class: line: 'cursor.setValueBuffer(u"bandera", u"/* XPM */\\nstatic char * esp_xpm[] = {\\n\\"30 16 16 1\\",\\n\\"  c #6C1E04\\",\\n\\".\tc #B78B19\\",\\n\\"+\tc #E4D31A\\",\\n\\"@\tc #8E4F09\\",\\n\\"#\tc #FBFC05\\",\\n\\"$\tc #EF0406\\",\\n\\"%\tc #F9978D\\",\\n\\"&\tc #FCFA36\\",\\n\\"*\tc #FC595C\\",\\n\\"=\tc #E1B025\\",\\n\\"-\tc #FB3634\\",\\n\\";\tc #E67559\\",\\n\\">\tc #A26E13\\",\\n\\",\tc #FCACAC\\",\\n\\"\'\tc #B29F19\\",\\n\\")\tc #9D0204\\",\\n\\",,%%%%%%%%%%%%%%%%%%%%%%%%%%;$\\",\\n\\";;**************************$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"&&####&#&++&################+\'\\",\\"&&####&=.>..&###############+\'\\",\\n\\"&&####@=@@@=>=##############+\'\\",\\n\\"&&####=\'>;>%=+&#############+\'\\",\\n\\"&&####@@@ @>>.##############+\'\\",\\n\\"&&####.=>@;;#;##############+\'\\",\\"&&+###>..>..>=##############+\'\\",\\n\\"&&####.+===+.+&#############+.\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"$$$)$)$)$))$)$)$)$)$)$)$)$)$))\\",\\n\\"))))))))))))))))))))))))))))))\\"};\\n")'
0698<-------Source: line: 'cursor.setValueBuffer(u"bandera", u"/* XPM */\\nstatic char * esp_xpm[] = {\\n\\"30 16 16 1\\",\\n\\"  c #6C1E04\\",\\n\\".\tc #B78B19\\",\\n\\"+\tc #E4D31A\\",\\n\\"@\tc #8E4F09\\",\\n\\"#\tc #FBFC05\\",\\n\\"$\tc #EF0406\\",\\n\\"%\tc #F9978D\\",\\n\\"&\tc #FCFA36\\",\\n\\"*\tc #FC595C\\",\\n\\"=\tc #E1B025\\",\\n\\"-\tc #FB3634\\",\\n\\";\tc #E67559\\",\\n\\">\tc #A26E13\\",\\n\\",\tc #FCACAC\\",\\n\\"\'\tc #B29F19\\",\\n\\")\tc #9D0204\\",\\n\\",,%%%%%%%%%%%%%%%%%%%%%%%%%%;$\\",\\n\\";;**************************$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"&&####&#&++&################+\'\\",\\"&&####&=.>..&###############+\'\\",\\n\\"&&####@=@@@=>=##############+\'\\",\\n\\"&&####=\'>;>%=+&#############+\'\\",\\n\\"&&####@@@ @>>.##############+\'\\",\\n\\"&&####.=>@;;#;##############+\'\\",\\"&&+###>..>..>=##############+\'\\",\\n\\"&&####.+===+.+&#############+.\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\\",\\n\\"$$$)$)$)$))$)$)$)$)$)$)$)$)$))\\",\\n\\"))))))))))))))))))))))))))))))\\"};\\n")'
0699       InstructionCall: end-gen
0699       InstructionCall: begin-gen
0699        FunctionCall: begin-gen
0699         Value: begin-gen
0699          Constant: begin-gen
0699           Constant: ctype: 'String' -> 'codiso'
0699           Constant: expr: 'u"codiso"'
0699         <-Value: expr: 'u"codiso"'
0699          Constant: end-gen
0699         Value: end-gen
0699         Value: begin-gen
0699          Constant: begin-gen
0699           Constant: ctype: 'String' -> 'ES'
0699           Constant: expr: 'u"ES"'
0699         <-Value: expr: 'u"ES"'
0699          Constant: end-gen
0699         Value: end-gen
0699         FunctionCall: expr: 'setValueBuffer(u"codiso", u"ES")'
0699        FunctionCall: end-gen
0699        InstructionCall: line: 'setValueBuffer(u"codiso", u"ES")'
0699      <-Source: line: 'setValueBuffer(u"codiso", u"ES")'
0699     <--With: line: 'cursor.setValueBuffer(u"codiso", u"ES")'
0699    <---Source: line: 'cursor.setValueBuffer(u"codiso", u"ES")'
0699   <----Function: line: 'cursor.setValueBuffer(u"codiso", u"ES")'
0699  <-----Source: line: 'cursor.setValueBuffer(u"codiso", u"ES")'
0699 <------Class: line: 'cursor.setValueBuffer(u"codiso", u"ES")'
0699<-------Source: line: 'cursor.setValueBuffer(u"codiso", u"ES")'
0700       InstructionCall: end-gen
0700       InstructionCall: begin-gen
0700        FunctionCall: begin-gen
0700         FunctionCall: expr: 'commitBuffer()'
0700        FunctionCall: end-gen
0700        InstructionCall: line: 'commitBuffer()'
0700      <-Source: line: 'commitBuffer()'
0700     <--With: line: 'cursor.commitBuffer()'
0700    <---Source: line: 'cursor.commitBuffer()'
0700   <----Function: line: 'cursor.commitBuffer()'
0700  <-----Source: line: 'cursor.commitBuffer()'
0700 <------Class: line: 'cursor.commitBuffer()'
0700<-------Source: line: 'cursor.commitBuffer()'
0701       InstructionCall: end-gen
0701      Source: end-gen
0701      With: line: ' #WITH_END'
0701    <-Source: line: ' #WITH_END'
0701   <--Function: line: ' #WITH_END'
0701  <---Source: line: ' #WITH_END'
0701 <----Class: line: ' #WITH_END'
0701<-----Source: line: ' #WITH_END'
0702     With: end-gen
0702     Delete: begin-gen
0702      Delete: expr: 'del'
0702    <-Source: expr: 'del'
0702   <--Function: expr: 'del'
0702  <---Source: expr: 'del'
0702 <----Class: expr: 'del'
0702<-----Source: expr: 'del'
0703      Identifier: begin-gen
0703       Identifier: expr: 'cursor'
0703     <-Delete: expr: 'cursor'
0703    <--Source: expr: 'cursor'
0703   <---Function: expr: 'cursor'
0703  <----Source: expr: 'cursor'
0703 <-----Class: expr: 'cursor'
0703<------Source: expr: 'cursor'
0704      Identifier: end-gen
0704     Delete: end-gen
0704     InstructionUpdate: begin-gen
0704      Identifier: begin-gen
0704       Identifier: expr: 'cursor'
0704      Identifier: end-gen
0704      OpUpdate: begin-gen
0704       OpUpdate: expr: '='
0704      OpUpdate: end-gen
0704      Value: begin-gen
0704       New: begin-gen
0704        FunctionCall: begin-gen
0704         Value: begin-gen
0704          Constant: begin-gen
0704           Constant: ctype: 'String' -> 'divisas'
0704           Constant: expr: 'u"divisas"'
0704         <-Value: expr: 'u"divisas"'
0704          Constant: end-gen
0704         Value: end-gen
0704         FunctionCall: expr: 'FLSqlCursor(u"divisas")'
0704       <-New: expr: 'qsatype.FLSqlCursor(u"divisas")'
0704      <--Value: expr: 'qsatype.FLSqlCursor(u"divisas")'
0704        FunctionCall: end-gen
0704       New: end-gen
0704      Value: end-gen
0704      InstructionUpdate: line: 'cursor = qsatype.FLSqlCursor(u"divisas")'
0704    <-Source: line: 'cursor = qsatype.FLSqlCursor(u"divisas")'
0704   <--Function: line: 'cursor = qsatype.FLSqlCursor(u"divisas")'
0704  <---Source: line: 'cursor = qsatype.FLSqlCursor(u"divisas")'
0704 <----Class: line: 'cursor = qsatype.FLSqlCursor(u"divisas")'
0704<-----Source: line: 'cursor = qsatype.FLSqlCursor(u"divisas")'
0705     InstructionUpdate: end-gen
0705     With: begin-gen
0705      Identifier: begin-gen
0705       Identifier: expr: 'cursor'
0705      Identifier: end-gen
0705      With: line: ' #WITH_START'
0705    <-Source: line: ' #WITH_START'
0705   <--Function: line: ' #WITH_START'
0705  <---Source: line: ' #WITH_START'
0705 <----Class: line: ' #WITH_START'
0705<-----Source: line: ' #WITH_START'
0706      Source: begin-gen
0706       InstructionCall: begin-gen
0706        FunctionCall: begin-gen
0706         Value: begin-gen
0706          Member: begin-gen
0706           Identifier: begin-gen
0706            Identifier: expr: 'cursor'
0706           Identifier: end-gen
0706           Identifier: begin-gen
0706            Identifier: expr: 'Insert'
0706           Identifier: end-gen
0706           Member: expr: 'cursor.Insert'
0706         <-Value: expr: 'cursor.Insert'
0706          Member: end-gen
0706         Value: end-gen
0706         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0706        FunctionCall: end-gen
0706        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0706      <-Source: line: 'setModeAccess(cursor.Insert)'
0706     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0706    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0706   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0706  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0706 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0706<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0707       InstructionCall: end-gen
0707       InstructionCall: begin-gen
0707        FunctionCall: begin-gen
0707         FunctionCall: expr: 'refreshBuffer()'
0707        FunctionCall: end-gen
0707        InstructionCall: line: 'refreshBuffer()'
0707      <-Source: line: 'refreshBuffer()'
0707     <--With: line: 'cursor.refreshBuffer()'
0707    <---Source: line: 'cursor.refreshBuffer()'
0707   <----Function: line: 'cursor.refreshBuffer()'
0707  <-----Source: line: 'cursor.refreshBuffer()'
0707 <------Class: line: 'cursor.refreshBuffer()'
0707<-------Source: line: 'cursor.refreshBuffer()'
0708       InstructionCall: end-gen
0708       InstructionCall: begin-gen
0708        FunctionCall: begin-gen
0708         Value: begin-gen
0708          Constant: begin-gen
0708           Constant: ctype: 'String' -> 'coddivisa'
0708           Constant: expr: 'u"coddivisa"'
0708         <-Value: expr: 'u"coddivisa"'
0708          Constant: end-gen
0708         Value: end-gen
0708         Value: begin-gen
0708          Constant: begin-gen
0708           Constant: ctype: 'String' -> 'EUR'
0708           Constant: expr: 'u"EUR"'
0708         <-Value: expr: 'u"EUR"'
0708          Constant: end-gen
0708         Value: end-gen
0708         FunctionCall: expr: 'setValueBuffer(u"coddivisa", u"EUR")'
0708        FunctionCall: end-gen
0708        InstructionCall: line: 'setValueBuffer(u"coddivisa", u"EUR")'
0708      <-Source: line: 'setValueBuffer(u"coddivisa", u"EUR")'
0708     <--With: line: 'cursor.setValueBuffer(u"coddivisa", u"EUR")'
0708    <---Source: line: 'cursor.setValueBuffer(u"coddivisa", u"EUR")'
0708   <----Function: line: 'cursor.setValueBuffer(u"coddivisa", u"EUR")'
0708  <-----Source: line: 'cursor.setValueBuffer(u"coddivisa", u"EUR")'
0708 <------Class: line: 'cursor.setValueBuffer(u"coddivisa", u"EUR")'
0708<-------Source: line: 'cursor.setValueBuffer(u"coddivisa", u"EUR")'
0709       InstructionCall: end-gen
0709       InstructionCall: begin-gen
0709        FunctionCall: begin-gen
0709         Value: begin-gen
0709          Constant: begin-gen
0709           Constant: ctype: 'String' -> 'descripcion'
0709           Constant: expr: 'u"descripcion"'
0709         <-Value: expr: 'u"descripcion"'
0709          Constant: end-gen
0709         Value: end-gen
0709         Value: begin-gen
0709          Constant: begin-gen
0709           Constant: ctype: 'String' -> 'EUROS'
0709           Constant: expr: 'u"EUROS"'
0709         <-Value: expr: 'u"EUROS"'
0709          Constant: end-gen
0709         Value: end-gen
0709         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"EUROS")'
0709        FunctionCall: end-gen
0709        InstructionCall: line: 'setValueBuffer(u"descripcion", u"EUROS")'
0709      <-Source: line: 'setValueBuffer(u"descripcion", u"EUROS")'
0709     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"EUROS")'
0709    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"EUROS")'
0709   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"EUROS")'
0709  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"EUROS")'
0709 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"EUROS")'
0709<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"EUROS")'
0710       InstructionCall: end-gen
0710       InstructionCall: begin-gen
0710        FunctionCall: begin-gen
0710         Value: begin-gen
0710          Constant: begin-gen
0710           Constant: ctype: 'String' -> 'tasaconv'
0710           Constant: expr: 'u"tasaconv"'
0710         <-Value: expr: 'u"tasaconv"'
0710          Constant: end-gen
0710         Value: end-gen
0710         Value: begin-gen
0710          Constant: begin-gen
0710           Constant: ctype: 'String' -> '1'
0710           Constant: expr: 'u"1"'
0710         <-Value: expr: 'u"1"'
0710          Constant: end-gen
0710         Value: end-gen
0710         FunctionCall: expr: 'setValueBuffer(u"tasaconv", u"1")'
0710        FunctionCall: end-gen
0710        InstructionCall: line: 'setValueBuffer(u"tasaconv", u"1")'
0710      <-Source: line: 'setValueBuffer(u"tasaconv", u"1")'
0710     <--With: line: 'cursor.setValueBuffer(u"tasaconv", u"1")'
0710    <---Source: line: 'cursor.setValueBuffer(u"tasaconv", u"1")'
0710   <----Function: line: 'cursor.setValueBuffer(u"tasaconv", u"1")'
0710  <-----Source: line: 'cursor.setValueBuffer(u"tasaconv", u"1")'
0710 <------Class: line: 'cursor.setValueBuffer(u"tasaconv", u"1")'
0710<-------Source: line: 'cursor.setValueBuffer(u"tasaconv", u"1")'
0711       InstructionCall: end-gen
0711       InstructionCall: begin-gen
0711        FunctionCall: begin-gen
0711         Value: begin-gen
0711          Constant: begin-gen
0711           Constant: ctype: 'String' -> 'codiso'
0711           Constant: expr: 'u"codiso"'
0711         <-Value: expr: 'u"codiso"'
0711          Constant: end-gen
0711         Value: end-gen
0711         Value: begin-gen
0711          Constant: begin-gen
0711           Constant: ctype: 'String' -> '978'
0711           Constant: expr: 'u"978"'
0711         <-Value: expr: 'u"978"'
0711          Constant: end-gen
0711         Value: end-gen
0711         FunctionCall: expr: 'setValueBuffer(u"codiso", u"978")'
0711        FunctionCall: end-gen
0711        InstructionCall: line: 'setValueBuffer(u"codiso", u"978")'
0711      <-Source: line: 'setValueBuffer(u"codiso", u"978")'
0711     <--With: line: 'cursor.setValueBuffer(u"codiso", u"978")'
0711    <---Source: line: 'cursor.setValueBuffer(u"codiso", u"978")'
0711   <----Function: line: 'cursor.setValueBuffer(u"codiso", u"978")'
0711  <-----Source: line: 'cursor.setValueBuffer(u"codiso", u"978")'
0711 <------Class: line: 'cursor.setValueBuffer(u"codiso", u"978")'
0711<-------Source: line: 'cursor.setValueBuffer(u"codiso", u"978")'
0712       InstructionCall: end-gen
0712       InstructionCall: begin-gen
0712        FunctionCall: begin-gen
0712         FunctionCall: expr: 'commitBuffer()'
0712        FunctionCall: end-gen
0712        InstructionCall: line: 'commitBuffer()'
0712      <-Source: line: 'commitBuffer()'
0712     <--With: line: 'cursor.commitBuffer()'
0712    <---Source: line: 'cursor.commitBuffer()'
0712   <----Function: line: 'cursor.commitBuffer()'
0712  <-----Source: line: 'cursor.commitBuffer()'
0712 <------Class: line: 'cursor.commitBuffer()'
0712<-------Source: line: 'cursor.commitBuffer()'
0713       InstructionCall: end-gen
0713       InstructionCall: begin-gen
0713        FunctionCall: begin-gen
0713         Value: begin-gen
0713          Member: begin-gen
0713           Identifier: begin-gen
0713            Identifier: expr: 'cursor'
0713           Identifier: end-gen
0713           Identifier: begin-gen
0713            Identifier: expr: 'Insert'
0713           Identifier: end-gen
0713           Member: expr: 'cursor.Insert'
0713         <-Value: expr: 'cursor.Insert'
0713          Member: end-gen
0713         Value: end-gen
0713         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0713        FunctionCall: end-gen
0713        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0713      <-Source: line: 'setModeAccess(cursor.Insert)'
0713     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0713    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0713   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0713  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0713 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0713<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0714       InstructionCall: end-gen
0714       InstructionCall: begin-gen
0714        FunctionCall: begin-gen
0714         FunctionCall: expr: 'refreshBuffer()'
0714        FunctionCall: end-gen
0714        InstructionCall: line: 'refreshBuffer()'
0714      <-Source: line: 'refreshBuffer()'
0714     <--With: line: 'cursor.refreshBuffer()'
0714    <---Source: line: 'cursor.refreshBuffer()'
0714   <----Function: line: 'cursor.refreshBuffer()'
0714  <-----Source: line: 'cursor.refreshBuffer()'
0714 <------Class: line: 'cursor.refreshBuffer()'
0714<-------Source: line: 'cursor.refreshBuffer()'
0715       InstructionCall: end-gen
0715       InstructionCall: begin-gen
0715        FunctionCall: begin-gen
0715         Value: begin-gen
0715          Constant: begin-gen
0715           Constant: ctype: 'String' -> 'coddivisa'
0715           Constant: expr: 'u"coddivisa"'
0715         <-Value: expr: 'u"coddivisa"'
0715          Constant: end-gen
0715         Value: end-gen
0715         Value: begin-gen
0715          Constant: begin-gen
0715           Constant: ctype: 'String' -> 'USD'
0715           Constant: expr: 'u"USD"'
0715         <-Value: expr: 'u"USD"'
0715          Constant: end-gen
0715         Value: end-gen
0715         FunctionCall: expr: 'setValueBuffer(u"coddivisa", u"USD")'
0715        FunctionCall: end-gen
0715        InstructionCall: line: 'setValueBuffer(u"coddivisa", u"USD")'
0715      <-Source: line: 'setValueBuffer(u"coddivisa", u"USD")'
0715     <--With: line: 'cursor.setValueBuffer(u"coddivisa", u"USD")'
0715    <---Source: line: 'cursor.setValueBuffer(u"coddivisa", u"USD")'
0715   <----Function: line: 'cursor.setValueBuffer(u"coddivisa", u"USD")'
0715  <-----Source: line: 'cursor.setValueBuffer(u"coddivisa", u"USD")'
0715 <------Class: line: 'cursor.setValueBuffer(u"coddivisa", u"USD")'
0715<-------Source: line: 'cursor.setValueBuffer(u"coddivisa", u"USD")'
0716       InstructionCall: end-gen
0716       InstructionCall: begin-gen
0716        FunctionCall: begin-gen
0716         Value: begin-gen
0716          Constant: begin-gen
0716           Constant: ctype: 'String' -> 'descripcion'
0716           Constant: expr: 'u"descripcion"'
0716         <-Value: expr: 'u"descripcion"'
0716          Constant: end-gen
0716         Value: end-gen
0716         Value: begin-gen
0716          Constant: begin-gen
0716           Constant: ctype: 'String' -> 'DÓLARES USA'
0716           Constant: expr: 'u"DÓLARES USA"'
0716         <-Value: expr: 'u"DÓLARES USA"'
0716          Constant: end-gen
0716         Value: end-gen
0716         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"DÓLARES USA")'
0716        FunctionCall: end-gen
0716        InstructionCall: line: 'setValueBuffer(u"descripcion", u"DÓLARES USA")'
0716      <-Source: line: 'setValueBuffer(u"descripcion", u"DÓLARES USA")'
0716     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES USA")'
0716    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES USA")'
0716   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES USA")'
0716  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES USA")'
0716 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES USA")'
0716<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES USA")'
0717       InstructionCall: end-gen
0717       InstructionCall: begin-gen
0717        FunctionCall: begin-gen
0717         Value: begin-gen
0717          Constant: begin-gen
0717           Constant: ctype: 'String' -> 'tasaconv'
0717           Constant: expr: 'u"tasaconv"'
0717         <-Value: expr: 'u"tasaconv"'
0717          Constant: end-gen
0717         Value: end-gen
0717         Value: begin-gen
0717          Constant: begin-gen
0717           Constant: ctype: 'String' -> '0.845'
0717           Constant: expr: 'u"0.845"'
0717         <-Value: expr: 'u"0.845"'
0717          Constant: end-gen
0717         Value: end-gen
0717         FunctionCall: expr: 'setValueBuffer(u"tasaconv", u"0.845")'
0717        FunctionCall: end-gen
0717        InstructionCall: line: 'setValueBuffer(u"tasaconv", u"0.845")'
0717      <-Source: line: 'setValueBuffer(u"tasaconv", u"0.845")'
0717     <--With: line: 'cursor.setValueBuffer(u"tasaconv", u"0.845")'
0717    <---Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.845")'
0717   <----Function: line: 'cursor.setValueBuffer(u"tasaconv", u"0.845")'
0717  <-----Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.845")'
0717 <------Class: line: 'cursor.setValueBuffer(u"tasaconv", u"0.845")'
0717<-------Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.845")'
0718       InstructionCall: end-gen
0718       InstructionCall: begin-gen
0718        FunctionCall: begin-gen
0718         Value: begin-gen
0718          Constant: begin-gen
0718           Constant: ctype: 'String' -> 'codiso'
0718           Constant: expr: 'u"codiso"'
0718         <-Value: expr: 'u"codiso"'
0718          Constant: end-gen
0718         Value: end-gen
0718         Value: begin-gen
0718          Constant: begin-gen
0718           Constant: ctype: 'String' -> '849'
0718           Constant: expr: 'u"849"'
0718         <-Value: expr: 'u"849"'
0718          Constant: end-gen
0718         Value: end-gen
0718         FunctionCall: expr: 'setValueBuffer(u"codiso", u"849")'
0718        FunctionCall: end-gen
0718        InstructionCall: line: 'setValueBuffer(u"codiso", u"849")'
0718      <-Source: line: 'setValueBuffer(u"codiso", u"849")'
0718     <--With: line: 'cursor.setValueBuffer(u"codiso", u"849")'
0718    <---Source: line: 'cursor.setValueBuffer(u"codiso", u"849")'
0718   <----Function: line: 'cursor.setValueBuffer(u"codiso", u"849")'
0718  <-----Source: line: 'cursor.setValueBuffer(u"codiso", u"849")'
0718 <------Class: line: 'cursor.setValueBuffer(u"codiso", u"849")'
0718<-------Source: line: 'cursor.setValueBuffer(u"codiso", u"849")'
0719       InstructionCall: end-gen
0719       InstructionCall: begin-gen
0719        FunctionCall: begin-gen
0719         FunctionCall: expr: 'commitBuffer()'
0719        FunctionCall: end-gen
0719        InstructionCall: line: 'commitBuffer()'
0719      <-Source: line: 'commitBuffer()'
0719     <--With: line: 'cursor.commitBuffer()'
0719    <---Source: line: 'cursor.commitBuffer()'
0719   <----Function: line: 'cursor.commitBuffer()'
0719  <-----Source: line: 'cursor.commitBuffer()'
0719 <------Class: line: 'cursor.commitBuffer()'
0719<-------Source: line: 'cursor.commitBuffer()'
0720       InstructionCall: end-gen
0720       InstructionCall: begin-gen
0720        FunctionCall: begin-gen
0720         Value: begin-gen
0720          Member: begin-gen
0720           Identifier: begin-gen
0720            Identifier: expr: 'cursor'
0720           Identifier: end-gen
0720           Identifier: begin-gen
0720            Identifier: expr: 'Insert'
0720           Identifier: end-gen
0720           Member: expr: 'cursor.Insert'
0720         <-Value: expr: 'cursor.Insert'
0720          Member: end-gen
0720         Value: end-gen
0720         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0720        FunctionCall: end-gen
0720        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0720      <-Source: line: 'setModeAccess(cursor.Insert)'
0720     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0720    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0720   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0720  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0720 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0720<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0721       InstructionCall: end-gen
0721       InstructionCall: begin-gen
0721        FunctionCall: begin-gen
0721         FunctionCall: expr: 'refreshBuffer()'
0721        FunctionCall: end-gen
0721        InstructionCall: line: 'refreshBuffer()'
0721      <-Source: line: 'refreshBuffer()'
0721     <--With: line: 'cursor.refreshBuffer()'
0721    <---Source: line: 'cursor.refreshBuffer()'
0721   <----Function: line: 'cursor.refreshBuffer()'
0721  <-----Source: line: 'cursor.refreshBuffer()'
0721 <------Class: line: 'cursor.refreshBuffer()'
0721<-------Source: line: 'cursor.refreshBuffer()'
0722       InstructionCall: end-gen
0722       InstructionCall: begin-gen
0722        FunctionCall: begin-gen
0722         Value: begin-gen
0722          Constant: begin-gen
0722           Constant: ctype: 'String' -> 'coddivisa'
0722           Constant: expr: 'u"coddivisa"'
0722         <-Value: expr: 'u"coddivisa"'
0722          Constant: end-gen
0722         Value: end-gen
0722         Value: begin-gen
0722          Constant: begin-gen
0722           Constant: ctype: 'String' -> 'GBP'
0722           Constant: expr: 'u"GBP"'
0722         <-Value: expr: 'u"GBP"'
0722          Constant: end-gen
0722         Value: end-gen
0722         FunctionCall: expr: 'setValueBuffer(u"coddivisa", u"GBP")'
0722        FunctionCall: end-gen
0722        InstructionCall: line: 'setValueBuffer(u"coddivisa", u"GBP")'
0722      <-Source: line: 'setValueBuffer(u"coddivisa", u"GBP")'
0722     <--With: line: 'cursor.setValueBuffer(u"coddivisa", u"GBP")'
0722    <---Source: line: 'cursor.setValueBuffer(u"coddivisa", u"GBP")'
0722   <----Function: line: 'cursor.setValueBuffer(u"coddivisa", u"GBP")'
0722  <-----Source: line: 'cursor.setValueBuffer(u"coddivisa", u"GBP")'
0722 <------Class: line: 'cursor.setValueBuffer(u"coddivisa", u"GBP")'
0722<-------Source: line: 'cursor.setValueBuffer(u"coddivisa", u"GBP")'
0723       InstructionCall: end-gen
0723       InstructionCall: begin-gen
0723        FunctionCall: begin-gen
0723         Value: begin-gen
0723          Constant: begin-gen
0723           Constant: ctype: 'String' -> 'descripcion'
0723           Constant: expr: 'u"descripcion"'
0723         <-Value: expr: 'u"descripcion"'
0723          Constant: end-gen
0723         Value: end-gen
0723         Value: begin-gen
0723          Constant: begin-gen
0723           Constant: ctype: 'String' -> 'LIBRAS ESTERLINAS'
0723           Constant: expr: 'u"LIBRAS ESTERLINAS"'
0723         <-Value: expr: 'u"LIBRAS ESTERLINAS"'
0723          Constant: end-gen
0723         Value: end-gen
0723         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"LIBRAS ESTERLINAS")'
0723        FunctionCall: end-gen
0723        InstructionCall: line: 'setValueBuffer(u"descripcion", u"LIBRAS ESTERLINAS")'
0723      <-Source: line: 'setValueBuffer(u"descripcion", u"LIBRAS ESTERLINAS")'
0723     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"LIBRAS ESTERLINAS")'
0723    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"LIBRAS ESTERLINAS")'
0723   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"LIBRAS ESTERLINAS")'
0723  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"LIBRAS ESTERLINAS")'
0723 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"LIBRAS ESTERLINAS")'
0723<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"LIBRAS ESTERLINAS")'
0724       InstructionCall: end-gen
0724       InstructionCall: begin-gen
0724        FunctionCall: begin-gen
0724         Value: begin-gen
0724          Constant: begin-gen
0724           Constant: ctype: 'String' -> 'tasaconv'
0724           Constant: expr: 'u"tasaconv"'
0724         <-Value: expr: 'u"tasaconv"'
0724          Constant: end-gen
0724         Value: end-gen
0724         Value: begin-gen
0724          Constant: begin-gen
0724           Constant: ctype: 'String' -> '1.48'
0724           Constant: expr: 'u"1.48"'
0724         <-Value: expr: 'u"1.48"'
0724          Constant: end-gen
0724         Value: end-gen
0724         FunctionCall: expr: 'setValueBuffer(u"tasaconv", u"1.48")'
0724        FunctionCall: end-gen
0724        InstructionCall: line: 'setValueBuffer(u"tasaconv", u"1.48")'
0724      <-Source: line: 'setValueBuffer(u"tasaconv", u"1.48")'
0724     <--With: line: 'cursor.setValueBuffer(u"tasaconv", u"1.48")'
0724    <---Source: line: 'cursor.setValueBuffer(u"tasaconv", u"1.48")'
0724   <----Function: line: 'cursor.setValueBuffer(u"tasaconv", u"1.48")'
0724  <-----Source: line: 'cursor.setValueBuffer(u"tasaconv", u"1.48")'
0724 <------Class: line: 'cursor.setValueBuffer(u"tasaconv", u"1.48")'
0724<-------Source: line: 'cursor.setValueBuffer(u"tasaconv", u"1.48")'
0725       InstructionCall: end-gen
0725       InstructionCall: begin-gen
0725        FunctionCall: begin-gen
0725         Value: begin-gen
0725          Constant: begin-gen
0725           Constant: ctype: 'String' -> 'codiso'
0725           Constant: expr: 'u"codiso"'
0725         <-Value: expr: 'u"codiso"'
0725          Constant: end-gen
0725         Value: end-gen
0725         Value: begin-gen
0725          Constant: begin-gen
0725           Constant: ctype: 'String' -> '826'
0725           Constant: expr: 'u"826"'
0725         <-Value: expr: 'u"826"'
0725          Constant: end-gen
0725         Value: end-gen
0725         FunctionCall: expr: 'setValueBuffer(u"codiso", u"826")'
0725        FunctionCall: end-gen
0725        InstructionCall: line: 'setValueBuffer(u"codiso", u"826")'
0725      <-Source: line: 'setValueBuffer(u"codiso", u"826")'
0725     <--With: line: 'cursor.setValueBuffer(u"codiso", u"826")'
0725    <---Source: line: 'cursor.setValueBuffer(u"codiso", u"826")'
0725   <----Function: line: 'cursor.setValueBuffer(u"codiso", u"826")'
0725  <-----Source: line: 'cursor.setValueBuffer(u"codiso", u"826")'
0725 <------Class: line: 'cursor.setValueBuffer(u"codiso", u"826")'
0725<-------Source: line: 'cursor.setValueBuffer(u"codiso", u"826")'
0726       InstructionCall: end-gen
0726       InstructionCall: begin-gen
0726        FunctionCall: begin-gen
0726         FunctionCall: expr: 'commitBuffer()'
0726        FunctionCall: end-gen
0726        InstructionCall: line: 'commitBuffer()'
0726      <-Source: line: 'commitBuffer()'
0726     <--With: line: 'cursor.commitBuffer()'
0726    <---Source: line: 'cursor.commitBuffer()'
0726   <----Function: line: 'cursor.commitBuffer()'
0726  <-----Source: line: 'cursor.commitBuffer()'
0726 <------Class: line: 'cursor.commitBuffer()'
0726<-------Source: line: 'cursor.commitBuffer()'
0727       InstructionCall: end-gen
0727       InstructionCall: begin-gen
0727        FunctionCall: begin-gen
0727         Value: begin-gen
0727          Member: begin-gen
0727           Identifier: begin-gen
0727            Identifier: expr: 'cursor'
0727           Identifier: end-gen
0727           Identifier: begin-gen
0727            Identifier: expr: 'Insert'
0727           Identifier: end-gen
0727           Member: expr: 'cursor.Insert'
0727         <-Value: expr: 'cursor.Insert'
0727          Member: end-gen
0727         Value: end-gen
0727         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0727        FunctionCall: end-gen
0727        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0727      <-Source: line: 'setModeAccess(cursor.Insert)'
0727     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0727    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0727   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0727  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0727 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0727<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0728       InstructionCall: end-gen
0728       InstructionCall: begin-gen
0728        FunctionCall: begin-gen
0728         FunctionCall: expr: 'refreshBuffer()'
0728        FunctionCall: end-gen
0728        InstructionCall: line: 'refreshBuffer()'
0728      <-Source: line: 'refreshBuffer()'
0728     <--With: line: 'cursor.refreshBuffer()'
0728    <---Source: line: 'cursor.refreshBuffer()'
0728   <----Function: line: 'cursor.refreshBuffer()'
0728  <-----Source: line: 'cursor.refreshBuffer()'
0728 <------Class: line: 'cursor.refreshBuffer()'
0728<-------Source: line: 'cursor.refreshBuffer()'
0729       InstructionCall: end-gen
0729       InstructionCall: begin-gen
0729        FunctionCall: begin-gen
0729         Value: begin-gen
0729          Constant: begin-gen
0729           Constant: ctype: 'String' -> 'coddivisa'
0729           Constant: expr: 'u"coddivisa"'
0729         <-Value: expr: 'u"coddivisa"'
0729          Constant: end-gen
0729         Value: end-gen
0729         Value: begin-gen
0729          Constant: begin-gen
0729           Constant: ctype: 'String' -> 'CHF'
0729           Constant: expr: 'u"CHF"'
0729         <-Value: expr: 'u"CHF"'
0729          Constant: end-gen
0729         Value: end-gen
0729         FunctionCall: expr: 'setValueBuffer(u"coddivisa", u"CHF")'
0729        FunctionCall: end-gen
0729        InstructionCall: line: 'setValueBuffer(u"coddivisa", u"CHF")'
0729      <-Source: line: 'setValueBuffer(u"coddivisa", u"CHF")'
0729     <--With: line: 'cursor.setValueBuffer(u"coddivisa", u"CHF")'
0729    <---Source: line: 'cursor.setValueBuffer(u"coddivisa", u"CHF")'
0729   <----Function: line: 'cursor.setValueBuffer(u"coddivisa", u"CHF")'
0729  <-----Source: line: 'cursor.setValueBuffer(u"coddivisa", u"CHF")'
0729 <------Class: line: 'cursor.setValueBuffer(u"coddivisa", u"CHF")'
0729<-------Source: line: 'cursor.setValueBuffer(u"coddivisa", u"CHF")'
0730       InstructionCall: end-gen
0730       InstructionCall: begin-gen
0730        FunctionCall: begin-gen
0730         Value: begin-gen
0730          Constant: begin-gen
0730           Constant: ctype: 'String' -> 'descripcion'
0730           Constant: expr: 'u"descripcion"'
0730         <-Value: expr: 'u"descripcion"'
0730          Constant: end-gen
0730         Value: end-gen
0730         Value: begin-gen
0730          Constant: begin-gen
0730           Constant: ctype: 'String' -> 'FRANCOS SUIZOS'
0730           Constant: expr: 'u"FRANCOS SUIZOS"'
0730         <-Value: expr: 'u"FRANCOS SUIZOS"'
0730          Constant: end-gen
0730         Value: end-gen
0730         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"FRANCOS SUIZOS")'
0730        FunctionCall: end-gen
0730        InstructionCall: line: 'setValueBuffer(u"descripcion", u"FRANCOS SUIZOS")'
0730      <-Source: line: 'setValueBuffer(u"descripcion", u"FRANCOS SUIZOS")'
0730     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"FRANCOS SUIZOS")'
0730    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"FRANCOS SUIZOS")'
0730   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"FRANCOS SUIZOS")'
0730  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"FRANCOS SUIZOS")'
0730 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"FRANCOS SUIZOS")'
0730<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"FRANCOS SUIZOS")'
0731       InstructionCall: end-gen
0731       InstructionCall: begin-gen
0731        FunctionCall: begin-gen
0731         Value: begin-gen
0731          Constant: begin-gen
0731           Constant: ctype: 'String' -> 'tasaconv'
0731           Constant: expr: 'u"tasaconv"'
0731         <-Value: expr: 'u"tasaconv"'
0731          Constant: end-gen
0731         Value: end-gen
0731         Value: begin-gen
0731          Constant: begin-gen
0731           Constant: ctype: 'String' -> '0.648'
0731           Constant: expr: 'u"0.648"'
0731         <-Value: expr: 'u"0.648"'
0731          Constant: end-gen
0731         Value: end-gen
0731         FunctionCall: expr: 'setValueBuffer(u"tasaconv", u"0.648")'
0731        FunctionCall: end-gen
0731        InstructionCall: line: 'setValueBuffer(u"tasaconv", u"0.648")'
0731      <-Source: line: 'setValueBuffer(u"tasaconv", u"0.648")'
0731     <--With: line: 'cursor.setValueBuffer(u"tasaconv", u"0.648")'
0731    <---Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.648")'
0731   <----Function: line: 'cursor.setValueBuffer(u"tasaconv", u"0.648")'
0731  <-----Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.648")'
0731 <------Class: line: 'cursor.setValueBuffer(u"tasaconv", u"0.648")'
0731<-------Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.648")'
0732       InstructionCall: end-gen
0732       InstructionCall: begin-gen
0732        FunctionCall: begin-gen
0732         Value: begin-gen
0732          Constant: begin-gen
0732           Constant: ctype: 'String' -> 'codiso'
0732           Constant: expr: 'u"codiso"'
0732         <-Value: expr: 'u"codiso"'
0732          Constant: end-gen
0732         Value: end-gen
0732         Value: begin-gen
0732          Constant: begin-gen
0732           Constant: ctype: 'String' -> '756'
0732           Constant: expr: 'u"756"'
0732         <-Value: expr: 'u"756"'
0732          Constant: end-gen
0732         Value: end-gen
0732         FunctionCall: expr: 'setValueBuffer(u"codiso", u"756")'
0732        FunctionCall: end-gen
0732        InstructionCall: line: 'setValueBuffer(u"codiso", u"756")'
0732      <-Source: line: 'setValueBuffer(u"codiso", u"756")'
0732     <--With: line: 'cursor.setValueBuffer(u"codiso", u"756")'
0732    <---Source: line: 'cursor.setValueBuffer(u"codiso", u"756")'
0732   <----Function: line: 'cursor.setValueBuffer(u"codiso", u"756")'
0732  <-----Source: line: 'cursor.setValueBuffer(u"codiso", u"756")'
0732 <------Class: line: 'cursor.setValueBuffer(u"codiso", u"756")'
0732<-------Source: line: 'cursor.setValueBuffer(u"codiso", u"756")'
0733       InstructionCall: end-gen
0733       InstructionCall: begin-gen
0733        FunctionCall: begin-gen
0733         FunctionCall: expr: 'commitBuffer()'
0733        FunctionCall: end-gen
0733        InstructionCall: line: 'commitBuffer()'
0733      <-Source: line: 'commitBuffer()'
0733     <--With: line: 'cursor.commitBuffer()'
0733    <---Source: line: 'cursor.commitBuffer()'
0733   <----Function: line: 'cursor.commitBuffer()'
0733  <-----Source: line: 'cursor.commitBuffer()'
0733 <------Class: line: 'cursor.commitBuffer()'
0733<-------Source: line: 'cursor.commitBuffer()'
0734       InstructionCall: end-gen
0734       InstructionCall: begin-gen
0734        FunctionCall: begin-gen
0734         Value: begin-gen
0734          Member: begin-gen
0734           Identifier: begin-gen
0734            Identifier: expr: 'cursor'
0734           Identifier: end-gen
0734           Identifier: begin-gen
0734            Identifier: expr: 'Insert'
0734           Identifier: end-gen
0734           Member: expr: 'cursor.Insert'
0734         <-Value: expr: 'cursor.Insert'
0734          Member: end-gen
0734         Value: end-gen
0734         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0734        FunctionCall: end-gen
0734        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0734      <-Source: line: 'setModeAccess(cursor.Insert)'
0734     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0734    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0734   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0734  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0734 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0734<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0735       InstructionCall: end-gen
0735       InstructionCall: begin-gen
0735        FunctionCall: begin-gen
0735         FunctionCall: expr: 'refreshBuffer()'
0735        FunctionCall: end-gen
0735        InstructionCall: line: 'refreshBuffer()'
0735      <-Source: line: 'refreshBuffer()'
0735     <--With: line: 'cursor.refreshBuffer()'
0735    <---Source: line: 'cursor.refreshBuffer()'
0735   <----Function: line: 'cursor.refreshBuffer()'
0735  <-----Source: line: 'cursor.refreshBuffer()'
0735 <------Class: line: 'cursor.refreshBuffer()'
0735<-------Source: line: 'cursor.refreshBuffer()'
0736       InstructionCall: end-gen
0736       InstructionCall: begin-gen
0736        FunctionCall: begin-gen
0736         Value: begin-gen
0736          Constant: begin-gen
0736           Constant: ctype: 'String' -> 'coddivisa'
0736           Constant: expr: 'u"coddivisa"'
0736         <-Value: expr: 'u"coddivisa"'
0736          Constant: end-gen
0736         Value: end-gen
0736         Value: begin-gen
0736          Constant: begin-gen
0736           Constant: ctype: 'String' -> 'SEK'
0736           Constant: expr: 'u"SEK"'
0736         <-Value: expr: 'u"SEK"'
0736          Constant: end-gen
0736         Value: end-gen
0736         FunctionCall: expr: 'setValueBuffer(u"coddivisa", u"SEK")'
0736        FunctionCall: end-gen
0736        InstructionCall: line: 'setValueBuffer(u"coddivisa", u"SEK")'
0736      <-Source: line: 'setValueBuffer(u"coddivisa", u"SEK")'
0736     <--With: line: 'cursor.setValueBuffer(u"coddivisa", u"SEK")'
0736    <---Source: line: 'cursor.setValueBuffer(u"coddivisa", u"SEK")'
0736   <----Function: line: 'cursor.setValueBuffer(u"coddivisa", u"SEK")'
0736  <-----Source: line: 'cursor.setValueBuffer(u"coddivisa", u"SEK")'
0736 <------Class: line: 'cursor.setValueBuffer(u"coddivisa", u"SEK")'
0736<-------Source: line: 'cursor.setValueBuffer(u"coddivisa", u"SEK")'
0737       InstructionCall: end-gen
0737       InstructionCall: begin-gen
0737        FunctionCall: begin-gen
0737         Value: begin-gen
0737          Constant: begin-gen
0737           Constant: ctype: 'String' -> 'descripcion'
0737           Constant: expr: 'u"descripcion"'
0737         <-Value: expr: 'u"descripcion"'
0737          Constant: end-gen
0737         Value: end-gen
0737         Value: begin-gen
0737          Constant: begin-gen
0737           Constant: ctype: 'String' -> 'CORONAS SUECAS'
0737           Constant: expr: 'u"CORONAS SUECAS"'
0737         <-Value: expr: 'u"CORONAS SUECAS"'
0737          Constant: end-gen
0737         Value: end-gen
0737         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"CORONAS SUECAS")'
0737        FunctionCall: end-gen
0737        InstructionCall: line: 'setValueBuffer(u"descripcion", u"CORONAS SUECAS")'
0737      <-Source: line: 'setValueBuffer(u"descripcion", u"CORONAS SUECAS")'
0737     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS SUECAS")'
0737    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS SUECAS")'
0737   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS SUECAS")'
0737  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS SUECAS")'
0737 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS SUECAS")'
0737<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS SUECAS")'
0738       InstructionCall: end-gen
0738       InstructionCall: begin-gen
0738        FunctionCall: begin-gen
0738         Value: begin-gen
0738          Constant: begin-gen
0738           Constant: ctype: 'String' -> 'tasaconv'
0738           Constant: expr: 'u"tasaconv"'
0738         <-Value: expr: 'u"tasaconv"'
0738          Constant: end-gen
0738         Value: end-gen
0738         Value: begin-gen
0738          Constant: begin-gen
0738           Constant: ctype: 'String' -> '0.106'
0738           Constant: expr: 'u"0.106"'
0738         <-Value: expr: 'u"0.106"'
0738          Constant: end-gen
0738         Value: end-gen
0738         FunctionCall: expr: 'setValueBuffer(u"tasaconv", u"0.106")'
0738        FunctionCall: end-gen
0738        InstructionCall: line: 'setValueBuffer(u"tasaconv", u"0.106")'
0738      <-Source: line: 'setValueBuffer(u"tasaconv", u"0.106")'
0738     <--With: line: 'cursor.setValueBuffer(u"tasaconv", u"0.106")'
0738    <---Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.106")'
0738   <----Function: line: 'cursor.setValueBuffer(u"tasaconv", u"0.106")'
0738  <-----Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.106")'
0738 <------Class: line: 'cursor.setValueBuffer(u"tasaconv", u"0.106")'
0738<-------Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.106")'
0739       InstructionCall: end-gen
0739       InstructionCall: begin-gen
0739        FunctionCall: begin-gen
0739         Value: begin-gen
0739          Constant: begin-gen
0739           Constant: ctype: 'String' -> 'codiso'
0739           Constant: expr: 'u"codiso"'
0739         <-Value: expr: 'u"codiso"'
0739          Constant: end-gen
0739         Value: end-gen
0739         Value: begin-gen
0739          Constant: begin-gen
0739           Constant: ctype: 'String' -> '752'
0739           Constant: expr: 'u"752"'
0739         <-Value: expr: 'u"752"'
0739          Constant: end-gen
0739         Value: end-gen
0739         FunctionCall: expr: 'setValueBuffer(u"codiso", u"752")'
0739        FunctionCall: end-gen
0739        InstructionCall: line: 'setValueBuffer(u"codiso", u"752")'
0739      <-Source: line: 'setValueBuffer(u"codiso", u"752")'
0739     <--With: line: 'cursor.setValueBuffer(u"codiso", u"752")'
0739    <---Source: line: 'cursor.setValueBuffer(u"codiso", u"752")'
0739   <----Function: line: 'cursor.setValueBuffer(u"codiso", u"752")'
0739  <-----Source: line: 'cursor.setValueBuffer(u"codiso", u"752")'
0739 <------Class: line: 'cursor.setValueBuffer(u"codiso", u"752")'
0739<-------Source: line: 'cursor.setValueBuffer(u"codiso", u"752")'
0740       InstructionCall: end-gen
0740       InstructionCall: begin-gen
0740        FunctionCall: begin-gen
0740         FunctionCall: expr: 'commitBuffer()'
0740        FunctionCall: end-gen
0740        InstructionCall: line: 'commitBuffer()'
0740      <-Source: line: 'commitBuffer()'
0740     <--With: line: 'cursor.commitBuffer()'
0740    <---Source: line: 'cursor.commitBuffer()'
0740   <----Function: line: 'cursor.commitBuffer()'
0740  <-----Source: line: 'cursor.commitBuffer()'
0740 <------Class: line: 'cursor.commitBuffer()'
0740<-------Source: line: 'cursor.commitBuffer()'
0741       InstructionCall: end-gen
0741       InstructionCall: begin-gen
0741        FunctionCall: begin-gen
0741         Value: begin-gen
0741          Member: begin-gen
0741           Identifier: begin-gen
0741            Identifier: expr: 'cursor'
0741           Identifier: end-gen
0741           Identifier: begin-gen
0741            Identifier: expr: 'Insert'
0741           Identifier: end-gen
0741           Member: expr: 'cursor.Insert'
0741         <-Value: expr: 'cursor.Insert'
0741          Member: end-gen
0741         Value: end-gen
0741         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0741        FunctionCall: end-gen
0741        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0741      <-Source: line: 'setModeAccess(cursor.Insert)'
0741     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0741    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0741   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0741  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0741 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0741<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0742       InstructionCall: end-gen
0742       InstructionCall: begin-gen
0742        FunctionCall: begin-gen
0742         FunctionCall: expr: 'refreshBuffer()'
0742        FunctionCall: end-gen
0742        InstructionCall: line: 'refreshBuffer()'
0742      <-Source: line: 'refreshBuffer()'
0742     <--With: line: 'cursor.refreshBuffer()'
0742    <---Source: line: 'cursor.refreshBuffer()'
0742   <----Function: line: 'cursor.refreshBuffer()'
0742  <-----Source: line: 'cursor.refreshBuffer()'
0742 <------Class: line: 'cursor.refreshBuffer()'
0742<-------Source: line: 'cursor.refreshBuffer()'
0743       InstructionCall: end-gen
0743       InstructionCall: begin-gen
0743        FunctionCall: begin-gen
0743         Value: begin-gen
0743          Constant: begin-gen
0743           Constant: ctype: 'String' -> 'coddivisa'
0743           Constant: expr: 'u"coddivisa"'
0743         <-Value: expr: 'u"coddivisa"'
0743          Constant: end-gen
0743         Value: end-gen
0743         Value: begin-gen
0743          Constant: begin-gen
0743           Constant: ctype: 'String' -> 'NOK'
0743           Constant: expr: 'u"NOK"'
0743         <-Value: expr: 'u"NOK"'
0743          Constant: end-gen
0743         Value: end-gen
0743         FunctionCall: expr: 'setValueBuffer(u"coddivisa", u"NOK")'
0743        FunctionCall: end-gen
0743        InstructionCall: line: 'setValueBuffer(u"coddivisa", u"NOK")'
0743      <-Source: line: 'setValueBuffer(u"coddivisa", u"NOK")'
0743     <--With: line: 'cursor.setValueBuffer(u"coddivisa", u"NOK")'
0743    <---Source: line: 'cursor.setValueBuffer(u"coddivisa", u"NOK")'
0743   <----Function: line: 'cursor.setValueBuffer(u"coddivisa", u"NOK")'
0743  <-----Source: line: 'cursor.setValueBuffer(u"coddivisa", u"NOK")'
0743 <------Class: line: 'cursor.setValueBuffer(u"coddivisa", u"NOK")'
0743<-------Source: line: 'cursor.setValueBuffer(u"coddivisa", u"NOK")'
0744       InstructionCall: end-gen
0744       InstructionCall: begin-gen
0744        FunctionCall: begin-gen
0744         Value: begin-gen
0744          Constant: begin-gen
0744           Constant: ctype: 'String' -> 'descripcion'
0744           Constant: expr: 'u"descripcion"'
0744         <-Value: expr: 'u"descripcion"'
0744          Constant: end-gen
0744         Value: end-gen
0744         Value: begin-gen
0744          Constant: begin-gen
0744           Constant: ctype: 'String' -> 'CORONAS NORUEGAS'
0744           Constant: expr: 'u"CORONAS NORUEGAS"'
0744         <-Value: expr: 'u"CORONAS NORUEGAS"'
0744          Constant: end-gen
0744         Value: end-gen
0744         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"CORONAS NORUEGAS")'
0744        FunctionCall: end-gen
0744        InstructionCall: line: 'setValueBuffer(u"descripcion", u"CORONAS NORUEGAS")'
0744      <-Source: line: 'setValueBuffer(u"descripcion", u"CORONAS NORUEGAS")'
0744     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS NORUEGAS")'
0744    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS NORUEGAS")'
0744   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS NORUEGAS")'
0744  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS NORUEGAS")'
0744 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS NORUEGAS")'
0744<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS NORUEGAS")'
0745       InstructionCall: end-gen
0745       InstructionCall: begin-gen
0745        FunctionCall: begin-gen
0745         Value: begin-gen
0745          Constant: begin-gen
0745           Constant: ctype: 'String' -> 'tasaconv'
0745           Constant: expr: 'u"tasaconv"'
0745         <-Value: expr: 'u"tasaconv"'
0745          Constant: end-gen
0745         Value: end-gen
0745         Value: begin-gen
0745          Constant: begin-gen
0745           Constant: ctype: 'String' -> '0.126'
0745           Constant: expr: 'u"0.126"'
0745         <-Value: expr: 'u"0.126"'
0745          Constant: end-gen
0745         Value: end-gen
0745         FunctionCall: expr: 'setValueBuffer(u"tasaconv", u"0.126")'
0745        FunctionCall: end-gen
0745        InstructionCall: line: 'setValueBuffer(u"tasaconv", u"0.126")'
0745      <-Source: line: 'setValueBuffer(u"tasaconv", u"0.126")'
0745     <--With: line: 'cursor.setValueBuffer(u"tasaconv", u"0.126")'
0745    <---Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.126")'
0745   <----Function: line: 'cursor.setValueBuffer(u"tasaconv", u"0.126")'
0745  <-----Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.126")'
0745 <------Class: line: 'cursor.setValueBuffer(u"tasaconv", u"0.126")'
0745<-------Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.126")'
0746       InstructionCall: end-gen
0746       InstructionCall: begin-gen
0746        FunctionCall: begin-gen
0746         Value: begin-gen
0746          Constant: begin-gen
0746           Constant: ctype: 'String' -> 'codiso'
0746           Constant: expr: 'u"codiso"'
0746         <-Value: expr: 'u"codiso"'
0746          Constant: end-gen
0746         Value: end-gen
0746         Value: begin-gen
0746          Constant: begin-gen
0746           Constant: ctype: 'String' -> '578'
0746           Constant: expr: 'u"578"'
0746         <-Value: expr: 'u"578"'
0746          Constant: end-gen
0746         Value: end-gen
0746         FunctionCall: expr: 'setValueBuffer(u"codiso", u"578")'
0746        FunctionCall: end-gen
0746        InstructionCall: line: 'setValueBuffer(u"codiso", u"578")'
0746      <-Source: line: 'setValueBuffer(u"codiso", u"578")'
0746     <--With: line: 'cursor.setValueBuffer(u"codiso", u"578")'
0746    <---Source: line: 'cursor.setValueBuffer(u"codiso", u"578")'
0746   <----Function: line: 'cursor.setValueBuffer(u"codiso", u"578")'
0746  <-----Source: line: 'cursor.setValueBuffer(u"codiso", u"578")'
0746 <------Class: line: 'cursor.setValueBuffer(u"codiso", u"578")'
0746<-------Source: line: 'cursor.setValueBuffer(u"codiso", u"578")'
0747       InstructionCall: end-gen
0747       InstructionCall: begin-gen
0747        FunctionCall: begin-gen
0747         FunctionCall: expr: 'commitBuffer()'
0747        FunctionCall: end-gen
0747        InstructionCall: line: 'commitBuffer()'
0747      <-Source: line: 'commitBuffer()'
0747     <--With: line: 'cursor.commitBuffer()'
0747    <---Source: line: 'cursor.commitBuffer()'
0747   <----Function: line: 'cursor.commitBuffer()'
0747  <-----Source: line: 'cursor.commitBuffer()'
0747 <------Class: line: 'cursor.commitBuffer()'
0747<-------Source: line: 'cursor.commitBuffer()'
0748       InstructionCall: end-gen
0748       InstructionCall: begin-gen
0748        FunctionCall: begin-gen
0748         Value: begin-gen
0748          Member: begin-gen
0748           Identifier: begin-gen
0748            Identifier: expr: 'cursor'
0748           Identifier: end-gen
0748           Identifier: begin-gen
0748            Identifier: expr: 'Insert'
0748           Identifier: end-gen
0748           Member: expr: 'cursor.Insert'
0748         <-Value: expr: 'cursor.Insert'
0748          Member: end-gen
0748         Value: end-gen
0748         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0748        FunctionCall: end-gen
0748        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0748      <-Source: line: 'setModeAccess(cursor.Insert)'
0748     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0748    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0748   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0748  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0748 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0748<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0749       InstructionCall: end-gen
0749       InstructionCall: begin-gen
0749        FunctionCall: begin-gen
0749         FunctionCall: expr: 'refreshBuffer()'
0749        FunctionCall: end-gen
0749        InstructionCall: line: 'refreshBuffer()'
0749      <-Source: line: 'refreshBuffer()'
0749     <--With: line: 'cursor.refreshBuffer()'
0749    <---Source: line: 'cursor.refreshBuffer()'
0749   <----Function: line: 'cursor.refreshBuffer()'
0749  <-----Source: line: 'cursor.refreshBuffer()'
0749 <------Class: line: 'cursor.refreshBuffer()'
0749<-------Source: line: 'cursor.refreshBuffer()'
0750       InstructionCall: end-gen
0750       InstructionCall: begin-gen
0750        FunctionCall: begin-gen
0750         Value: begin-gen
0750          Constant: begin-gen
0750           Constant: ctype: 'String' -> 'coddivisa'
0750           Constant: expr: 'u"coddivisa"'
0750         <-Value: expr: 'u"coddivisa"'
0750          Constant: end-gen
0750         Value: end-gen
0750         Value: begin-gen
0750          Constant: begin-gen
0750           Constant: ctype: 'String' -> 'NZD'
0750           Constant: expr: 'u"NZD"'
0750         <-Value: expr: 'u"NZD"'
0750          Constant: end-gen
0750         Value: end-gen
0750         FunctionCall: expr: 'setValueBuffer(u"coddivisa", u"NZD")'
0750        FunctionCall: end-gen
0750        InstructionCall: line: 'setValueBuffer(u"coddivisa", u"NZD")'
0750      <-Source: line: 'setValueBuffer(u"coddivisa", u"NZD")'
0750     <--With: line: 'cursor.setValueBuffer(u"coddivisa", u"NZD")'
0750    <---Source: line: 'cursor.setValueBuffer(u"coddivisa", u"NZD")'
0750   <----Function: line: 'cursor.setValueBuffer(u"coddivisa", u"NZD")'
0750  <-----Source: line: 'cursor.setValueBuffer(u"coddivisa", u"NZD")'
0750 <------Class: line: 'cursor.setValueBuffer(u"coddivisa", u"NZD")'
0750<-------Source: line: 'cursor.setValueBuffer(u"coddivisa", u"NZD")'
0751       InstructionCall: end-gen
0751       InstructionCall: begin-gen
0751        FunctionCall: begin-gen
0751         Value: begin-gen
0751          Constant: begin-gen
0751           Constant: ctype: 'String' -> 'descripcion'
0751           Constant: expr: 'u"descripcion"'
0751         <-Value: expr: 'u"descripcion"'
0751          Constant: end-gen
0751         Value: end-gen
0751         Value: begin-gen
0751          Constant: begin-gen
0751           Constant: ctype: 'String' -> 'DÓLARES NEOZELANDESES'
0751           Constant: expr: 'u"DÓLARES NEOZELANDESES"'
0751         <-Value: expr: 'u"DÓLARES NEOZELANDESES"'
0751          Constant: end-gen
0751         Value: end-gen
0751         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"DÓLARES NEOZELANDESES")'
0751        FunctionCall: end-gen
0751        InstructionCall: line: 'setValueBuffer(u"descripcion", u"DÓLARES NEOZELANDESES")'
0751      <-Source: line: 'setValueBuffer(u"descripcion", u"DÓLARES NEOZELANDESES")'
0751     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES NEOZELANDESES")'
0751    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES NEOZELANDESES")'
0751   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES NEOZELANDESES")'
0751  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES NEOZELANDESES")'
0751 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES NEOZELANDESES")'
0751<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES NEOZELANDESES")'
0752       InstructionCall: end-gen
0752       InstructionCall: begin-gen
0752        FunctionCall: begin-gen
0752         Value: begin-gen
0752          Constant: begin-gen
0752           Constant: ctype: 'String' -> 'tasaconv'
0752           Constant: expr: 'u"tasaconv"'
0752         <-Value: expr: 'u"tasaconv"'
0752          Constant: end-gen
0752         Value: end-gen
0752         Value: begin-gen
0752          Constant: begin-gen
0752           Constant: ctype: 'String' -> '0.608'
0752           Constant: expr: 'u"0.608"'
0752         <-Value: expr: 'u"0.608"'
0752          Constant: end-gen
0752         Value: end-gen
0752         FunctionCall: expr: 'setValueBuffer(u"tasaconv", u"0.608")'
0752        FunctionCall: end-gen
0752        InstructionCall: line: 'setValueBuffer(u"tasaconv", u"0.608")'
0752      <-Source: line: 'setValueBuffer(u"tasaconv", u"0.608")'
0752     <--With: line: 'cursor.setValueBuffer(u"tasaconv", u"0.608")'
0752    <---Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.608")'
0752   <----Function: line: 'cursor.setValueBuffer(u"tasaconv", u"0.608")'
0752  <-----Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.608")'
0752 <------Class: line: 'cursor.setValueBuffer(u"tasaconv", u"0.608")'
0752<-------Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.608")'
0753       InstructionCall: end-gen
0753       InstructionCall: begin-gen
0753        FunctionCall: begin-gen
0753         Value: begin-gen
0753          Constant: begin-gen
0753           Constant: ctype: 'String' -> 'codiso'
0753           Constant: expr: 'u"codiso"'
0753         <-Value: expr: 'u"codiso"'
0753          Constant: end-gen
0753         Value: end-gen
0753         Value: begin-gen
0753          Constant: begin-gen
0753           Constant: ctype: 'String' -> '554'
0753           Constant: expr: 'u"554"'
0753         <-Value: expr: 'u"554"'
0753          Constant: end-gen
0753         Value: end-gen
0753         FunctionCall: expr: 'setValueBuffer(u"codiso", u"554")'
0753        FunctionCall: end-gen
0753        InstructionCall: line: 'setValueBuffer(u"codiso", u"554")'
0753      <-Source: line: 'setValueBuffer(u"codiso", u"554")'
0753     <--With: line: 'cursor.setValueBuffer(u"codiso", u"554")'
0753    <---Source: line: 'cursor.setValueBuffer(u"codiso", u"554")'
0753   <----Function: line: 'cursor.setValueBuffer(u"codiso", u"554")'
0753  <-----Source: line: 'cursor.setValueBuffer(u"codiso", u"554")'
0753 <------Class: line: 'cursor.setValueBuffer(u"codiso", u"554")'
0753<-------Source: line: 'cursor.setValueBuffer(u"codiso", u"554")'
0754       InstructionCall: end-gen
0754       InstructionCall: begin-gen
0754        FunctionCall: begin-gen
0754         FunctionCall: expr: 'commitBuffer()'
0754        FunctionCall: end-gen
0754        InstructionCall: line: 'commitBuffer()'
0754      <-Source: line: 'commitBuffer()'
0754     <--With: line: 'cursor.commitBuffer()'
0754    <---Source: line: 'cursor.commitBuffer()'
0754   <----Function: line: 'cursor.commitBuffer()'
0754  <-----Source: line: 'cursor.commitBuffer()'
0754 <------Class: line: 'cursor.commitBuffer()'
0754<-------Source: line: 'cursor.commitBuffer()'
0755       InstructionCall: end-gen
0755       InstructionCall: begin-gen
0755        FunctionCall: begin-gen
0755         Value: begin-gen
0755          Member: begin-gen
0755           Identifier: begin-gen
0755            Identifier: expr: 'cursor'
0755           Identifier: end-gen
0755           Identifier: begin-gen
0755            Identifier: expr: 'Insert'
0755           Identifier: end-gen
0755           Member: expr: 'cursor.Insert'
0755         <-Value: expr: 'cursor.Insert'
0755          Member: end-gen
0755         Value: end-gen
0755         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0755        FunctionCall: end-gen
0755        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0755      <-Source: line: 'setModeAccess(cursor.Insert)'
0755     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0755    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0755   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0755  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0755 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0755<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0756       InstructionCall: end-gen
0756       InstructionCall: begin-gen
0756        FunctionCall: begin-gen
0756         FunctionCall: expr: 'refreshBuffer()'
0756        FunctionCall: end-gen
0756        InstructionCall: line: 'refreshBuffer()'
0756      <-Source: line: 'refreshBuffer()'
0756     <--With: line: 'cursor.refreshBuffer()'
0756    <---Source: line: 'cursor.refreshBuffer()'
0756   <----Function: line: 'cursor.refreshBuffer()'
0756  <-----Source: line: 'cursor.refreshBuffer()'
0756 <------Class: line: 'cursor.refreshBuffer()'
0756<-------Source: line: 'cursor.refreshBuffer()'
0757       InstructionCall: end-gen
0757       InstructionCall: begin-gen
0757        FunctionCall: begin-gen
0757         Value: begin-gen
0757          Constant: begin-gen
0757           Constant: ctype: 'String' -> 'coddivisa'
0757           Constant: expr: 'u"coddivisa"'
0757         <-Value: expr: 'u"coddivisa"'
0757          Constant: end-gen
0757         Value: end-gen
0757         Value: begin-gen
0757          Constant: begin-gen
0757           Constant: ctype: 'String' -> 'JPY'
0757           Constant: expr: 'u"JPY"'
0757         <-Value: expr: 'u"JPY"'
0757          Constant: end-gen
0757         Value: end-gen
0757         FunctionCall: expr: 'setValueBuffer(u"coddivisa", u"JPY")'
0757        FunctionCall: end-gen
0757        InstructionCall: line: 'setValueBuffer(u"coddivisa", u"JPY")'
0757      <-Source: line: 'setValueBuffer(u"coddivisa", u"JPY")'
0757     <--With: line: 'cursor.setValueBuffer(u"coddivisa", u"JPY")'
0757    <---Source: line: 'cursor.setValueBuffer(u"coddivisa", u"JPY")'
0757   <----Function: line: 'cursor.setValueBuffer(u"coddivisa", u"JPY")'
0757  <-----Source: line: 'cursor.setValueBuffer(u"coddivisa", u"JPY")'
0757 <------Class: line: 'cursor.setValueBuffer(u"coddivisa", u"JPY")'
0757<-------Source: line: 'cursor.setValueBuffer(u"coddivisa", u"JPY")'
0758       InstructionCall: end-gen
0758       InstructionCall: begin-gen
0758        FunctionCall: begin-gen
0758         Value: begin-gen
0758          Constant: begin-gen
0758           Constant: ctype: 'String' -> 'descripcion'
0758           Constant: expr: 'u"descripcion"'
0758         <-Value: expr: 'u"descripcion"'
0758          Constant: end-gen
0758         Value: end-gen
0758         Value: begin-gen
0758          Constant: begin-gen
0758           Constant: ctype: 'String' -> 'YENES JAPONESES'
0758           Constant: expr: 'u"YENES JAPONESES"'
0758         <-Value: expr: 'u"YENES JAPONESES"'
0758          Constant: end-gen
0758         Value: end-gen
0758         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"YENES JAPONESES")'
0758        FunctionCall: end-gen
0758        InstructionCall: line: 'setValueBuffer(u"descripcion", u"YENES JAPONESES")'
0758      <-Source: line: 'setValueBuffer(u"descripcion", u"YENES JAPONESES")'
0758     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"YENES JAPONESES")'
0758    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"YENES JAPONESES")'
0758   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"YENES JAPONESES")'
0758  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"YENES JAPONESES")'
0758 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"YENES JAPONESES")'
0758<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"YENES JAPONESES")'
0759       InstructionCall: end-gen
0759       InstructionCall: begin-gen
0759        FunctionCall: begin-gen
0759         Value: begin-gen
0759          Constant: begin-gen
0759           Constant: ctype: 'String' -> 'tasaconv'
0759           Constant: expr: 'u"tasaconv"'
0759         <-Value: expr: 'u"tasaconv"'
0759          Constant: end-gen
0759         Value: end-gen
0759         Value: begin-gen
0759          Constant: begin-gen
0759           Constant: ctype: 'String' -> '0.007'
0759           Constant: expr: 'u"0.007"'
0759         <-Value: expr: 'u"0.007"'
0759          Constant: end-gen
0759         Value: end-gen
0759         FunctionCall: expr: 'setValueBuffer(u"tasaconv", u"0.007")'
0759        FunctionCall: end-gen
0759        InstructionCall: line: 'setValueBuffer(u"tasaconv", u"0.007")'
0759      <-Source: line: 'setValueBuffer(u"tasaconv", u"0.007")'
0759     <--With: line: 'cursor.setValueBuffer(u"tasaconv", u"0.007")'
0759    <---Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.007")'
0759   <----Function: line: 'cursor.setValueBuffer(u"tasaconv", u"0.007")'
0759  <-----Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.007")'
0759 <------Class: line: 'cursor.setValueBuffer(u"tasaconv", u"0.007")'
0759<-------Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.007")'
0760       InstructionCall: end-gen
0760       InstructionCall: begin-gen
0760        FunctionCall: begin-gen
0760         Value: begin-gen
0760          Constant: begin-gen
0760           Constant: ctype: 'String' -> 'codiso'
0760           Constant: expr: 'u"codiso"'
0760         <-Value: expr: 'u"codiso"'
0760          Constant: end-gen
0760         Value: end-gen
0760         Value: begin-gen
0760          Constant: begin-gen
0760           Constant: ctype: 'String' -> '392'
0760           Constant: expr: 'u"392"'
0760         <-Value: expr: 'u"392"'
0760          Constant: end-gen
0760         Value: end-gen
0760         FunctionCall: expr: 'setValueBuffer(u"codiso", u"392")'
0760        FunctionCall: end-gen
0760        InstructionCall: line: 'setValueBuffer(u"codiso", u"392")'
0760      <-Source: line: 'setValueBuffer(u"codiso", u"392")'
0760     <--With: line: 'cursor.setValueBuffer(u"codiso", u"392")'
0760    <---Source: line: 'cursor.setValueBuffer(u"codiso", u"392")'
0760   <----Function: line: 'cursor.setValueBuffer(u"codiso", u"392")'
0760  <-----Source: line: 'cursor.setValueBuffer(u"codiso", u"392")'
0760 <------Class: line: 'cursor.setValueBuffer(u"codiso", u"392")'
0760<-------Source: line: 'cursor.setValueBuffer(u"codiso", u"392")'
0761       InstructionCall: end-gen
0761       InstructionCall: begin-gen
0761        FunctionCall: begin-gen
0761         FunctionCall: expr: 'commitBuffer()'
0761        FunctionCall: end-gen
0761        InstructionCall: line: 'commitBuffer()'
0761      <-Source: line: 'commitBuffer()'
0761     <--With: line: 'cursor.commitBuffer()'
0761    <---Source: line: 'cursor.commitBuffer()'
0761   <----Function: line: 'cursor.commitBuffer()'
0761  <-----Source: line: 'cursor.commitBuffer()'
0761 <------Class: line: 'cursor.commitBuffer()'
0761<-------Source: line: 'cursor.commitBuffer()'
0762       InstructionCall: end-gen
0762       InstructionCall: begin-gen
0762        FunctionCall: begin-gen
0762         Value: begin-gen
0762          Member: begin-gen
0762           Identifier: begin-gen
0762            Identifier: expr: 'cursor'
0762           Identifier: end-gen
0762           Identifier: begin-gen
0762            Identifier: expr: 'Insert'
0762           Identifier: end-gen
0762           Member: expr: 'cursor.Insert'
0762         <-Value: expr: 'cursor.Insert'
0762          Member: end-gen
0762         Value: end-gen
0762         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0762        FunctionCall: end-gen
0762        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0762      <-Source: line: 'setModeAccess(cursor.Insert)'
0762     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0762    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0762   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0762  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0762 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0762<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0763       InstructionCall: end-gen
0763       InstructionCall: begin-gen
0763        FunctionCall: begin-gen
0763         FunctionCall: expr: 'refreshBuffer()'
0763        FunctionCall: end-gen
0763        InstructionCall: line: 'refreshBuffer()'
0763      <-Source: line: 'refreshBuffer()'
0763     <--With: line: 'cursor.refreshBuffer()'
0763    <---Source: line: 'cursor.refreshBuffer()'
0763   <----Function: line: 'cursor.refreshBuffer()'
0763  <-----Source: line: 'cursor.refreshBuffer()'
0763 <------Class: line: 'cursor.refreshBuffer()'
0763<-------Source: line: 'cursor.refreshBuffer()'
0764       InstructionCall: end-gen
0764       InstructionCall: begin-gen
0764        FunctionCall: begin-gen
0764         Value: begin-gen
0764          Constant: begin-gen
0764           Constant: ctype: 'String' -> 'coddivisa'
0764           Constant: expr: 'u"coddivisa"'
0764         <-Value: expr: 'u"coddivisa"'
0764          Constant: end-gen
0764         Value: end-gen
0764         Value: begin-gen
0764          Constant: begin-gen
0764           Constant: ctype: 'String' -> 'DKK'
0764           Constant: expr: 'u"DKK"'
0764         <-Value: expr: 'u"DKK"'
0764          Constant: end-gen
0764         Value: end-gen
0764         FunctionCall: expr: 'setValueBuffer(u"coddivisa", u"DKK")'
0764        FunctionCall: end-gen
0764        InstructionCall: line: 'setValueBuffer(u"coddivisa", u"DKK")'
0764      <-Source: line: 'setValueBuffer(u"coddivisa", u"DKK")'
0764     <--With: line: 'cursor.setValueBuffer(u"coddivisa", u"DKK")'
0764    <---Source: line: 'cursor.setValueBuffer(u"coddivisa", u"DKK")'
0764   <----Function: line: 'cursor.setValueBuffer(u"coddivisa", u"DKK")'
0764  <-----Source: line: 'cursor.setValueBuffer(u"coddivisa", u"DKK")'
0764 <------Class: line: 'cursor.setValueBuffer(u"coddivisa", u"DKK")'
0764<-------Source: line: 'cursor.setValueBuffer(u"coddivisa", u"DKK")'
0765       InstructionCall: end-gen
0765       InstructionCall: begin-gen
0765        FunctionCall: begin-gen
0765         Value: begin-gen
0765          Constant: begin-gen
0765           Constant: ctype: 'String' -> 'descripcion'
0765           Constant: expr: 'u"descripcion"'
0765         <-Value: expr: 'u"descripcion"'
0765          Constant: end-gen
0765         Value: end-gen
0765         Value: begin-gen
0765          Constant: begin-gen
0765           Constant: ctype: 'String' -> 'CORONAS DANESAS'
0765           Constant: expr: 'u"CORONAS DANESAS"'
0765         <-Value: expr: 'u"CORONAS DANESAS"'
0765          Constant: end-gen
0765         Value: end-gen
0765         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"CORONAS DANESAS")'
0765        FunctionCall: end-gen
0765        InstructionCall: line: 'setValueBuffer(u"descripcion", u"CORONAS DANESAS")'
0765      <-Source: line: 'setValueBuffer(u"descripcion", u"CORONAS DANESAS")'
0765     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS DANESAS")'
0765    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS DANESAS")'
0765   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS DANESAS")'
0765  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS DANESAS")'
0765 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS DANESAS")'
0765<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"CORONAS DANESAS")'
0766       InstructionCall: end-gen
0766       InstructionCall: begin-gen
0766        FunctionCall: begin-gen
0766         Value: begin-gen
0766          Constant: begin-gen
0766           Constant: ctype: 'String' -> 'tasaconv'
0766           Constant: expr: 'u"tasaconv"'
0766         <-Value: expr: 'u"tasaconv"'
0766          Constant: end-gen
0766         Value: end-gen
0766         Value: begin-gen
0766          Constant: begin-gen
0766           Constant: ctype: 'String' -> '0.134'
0766           Constant: expr: 'u"0.134"'
0766         <-Value: expr: 'u"0.134"'
0766          Constant: end-gen
0766         Value: end-gen
0766         FunctionCall: expr: 'setValueBuffer(u"tasaconv", u"0.134")'
0766        FunctionCall: end-gen
0766        InstructionCall: line: 'setValueBuffer(u"tasaconv", u"0.134")'
0766      <-Source: line: 'setValueBuffer(u"tasaconv", u"0.134")'
0766     <--With: line: 'cursor.setValueBuffer(u"tasaconv", u"0.134")'
0766    <---Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.134")'
0766   <----Function: line: 'cursor.setValueBuffer(u"tasaconv", u"0.134")'
0766  <-----Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.134")'
0766 <------Class: line: 'cursor.setValueBuffer(u"tasaconv", u"0.134")'
0766<-------Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.134")'
0767       InstructionCall: end-gen
0767       InstructionCall: begin-gen
0767        FunctionCall: begin-gen
0767         Value: begin-gen
0767          Constant: begin-gen
0767           Constant: ctype: 'String' -> 'codiso'
0767           Constant: expr: 'u"codiso"'
0767         <-Value: expr: 'u"codiso"'
0767          Constant: end-gen
0767         Value: end-gen
0767         Value: begin-gen
0767          Constant: begin-gen
0767           Constant: ctype: 'String' -> '208'
0767           Constant: expr: 'u"208"'
0767         <-Value: expr: 'u"208"'
0767          Constant: end-gen
0767         Value: end-gen
0767         FunctionCall: expr: 'setValueBuffer(u"codiso", u"208")'
0767        FunctionCall: end-gen
0767        InstructionCall: line: 'setValueBuffer(u"codiso", u"208")'
0767      <-Source: line: 'setValueBuffer(u"codiso", u"208")'
0767     <--With: line: 'cursor.setValueBuffer(u"codiso", u"208")'
0767    <---Source: line: 'cursor.setValueBuffer(u"codiso", u"208")'
0767   <----Function: line: 'cursor.setValueBuffer(u"codiso", u"208")'
0767  <-----Source: line: 'cursor.setValueBuffer(u"codiso", u"208")'
0767 <------Class: line: 'cursor.setValueBuffer(u"codiso", u"208")'
0767<-------Source: line: 'cursor.setValueBuffer(u"codiso", u"208")'
0768       InstructionCall: end-gen
0768       InstructionCall: begin-gen
0768        FunctionCall: begin-gen
0768         FunctionCall: expr: 'commitBuffer()'
0768        FunctionCall: end-gen
0768        InstructionCall: line: 'commitBuffer()'
0768      <-Source: line: 'commitBuffer()'
0768     <--With: line: 'cursor.commitBuffer()'
0768    <---Source: line: 'cursor.commitBuffer()'
0768   <----Function: line: 'cursor.commitBuffer()'
0768  <-----Source: line: 'cursor.commitBuffer()'
0768 <------Class: line: 'cursor.commitBuffer()'
0768<-------Source: line: 'cursor.commitBuffer()'
0769       InstructionCall: end-gen
0769       InstructionCall: begin-gen
0769        FunctionCall: begin-gen
0769         Value: begin-gen
0769          Member: begin-gen
0769           Identifier: begin-gen
0769            Identifier: expr: 'cursor'
0769           Identifier: end-gen
0769           Identifier: begin-gen
0769            Identifier: expr: 'Insert'
0769           Identifier: end-gen
0769           Member: expr: 'cursor.Insert'
0769         <-Value: expr: 'cursor.Insert'
0769          Member: end-gen
0769         Value: end-gen
0769         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0769        FunctionCall: end-gen
0769        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0769      <-Source: line: 'setModeAccess(cursor.Insert)'
0769     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0769    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0769   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0769  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0769 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0769<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0770       InstructionCall: end-gen
0770       InstructionCall: begin-gen
0770        FunctionCall: begin-gen
0770         FunctionCall: expr: 'refreshBuffer()'
0770        FunctionCall: end-gen
0770        InstructionCall: line: 'refreshBuffer()'
0770      <-Source: line: 'refreshBuffer()'
0770     <--With: line: 'cursor.refreshBuffer()'
0770    <---Source: line: 'cursor.refreshBuffer()'
0770   <----Function: line: 'cursor.refreshBuffer()'
0770  <-----Source: line: 'cursor.refreshBuffer()'
0770 <------Class: line: 'cursor.refreshBuffer()'
0770<-------Source: line: 'cursor.refreshBuffer()'
0771       InstructionCall: end-gen
0771       InstructionCall: begin-gen
0771        FunctionCall: begin-gen
0771         Value: begin-gen
0771          Constant: begin-gen
0771           Constant: ctype: 'String' -> 'coddivisa'
0771           Constant: expr: 'u"coddivisa"'
0771         <-Value: expr: 'u"coddivisa"'
0771          Constant: end-gen
0771         Value: end-gen
0771         Value: begin-gen
0771          Constant: begin-gen
0771           Constant: ctype: 'String' -> 'CAD'
0771           Constant: expr: 'u"CAD"'
0771         <-Value: expr: 'u"CAD"'
0771          Constant: end-gen
0771         Value: end-gen
0771         FunctionCall: expr: 'setValueBuffer(u"coddivisa", u"CAD")'
0771        FunctionCall: end-gen
0771        InstructionCall: line: 'setValueBuffer(u"coddivisa", u"CAD")'
0771      <-Source: line: 'setValueBuffer(u"coddivisa", u"CAD")'
0771     <--With: line: 'cursor.setValueBuffer(u"coddivisa", u"CAD")'
0771    <---Source: line: 'cursor.setValueBuffer(u"coddivisa", u"CAD")'
0771   <----Function: line: 'cursor.setValueBuffer(u"coddivisa", u"CAD")'
0771  <-----Source: line: 'cursor.setValueBuffer(u"coddivisa", u"CAD")'
0771 <------Class: line: 'cursor.setValueBuffer(u"coddivisa", u"CAD")'
0771<-------Source: line: 'cursor.setValueBuffer(u"coddivisa", u"CAD")'
0772       InstructionCall: end-gen
0772       InstructionCall: begin-gen
0772        FunctionCall: begin-gen
0772         Value: begin-gen
0772          Constant: begin-gen
0772           Constant: ctype: 'String' -> 'descripcion'
0772           Constant: expr: 'u"descripcion"'
0772         <-Value: expr: 'u"descripcion"'
0772          Constant: end-gen
0772         Value: end-gen
0772         Value: begin-gen
0772          Constant: begin-gen
0772           Constant: ctype: 'String' -> 'DÓLARES CANADIENSES'
0772           Constant: expr: 'u"DÓLARES CANADIENSES"'
0772         <-Value: expr: 'u"DÓLARES CANADIENSES"'
0772          Constant: end-gen
0772         Value: end-gen
0772         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"DÓLARES CANADIENSES")'
0772        FunctionCall: end-gen
0772        InstructionCall: line: 'setValueBuffer(u"descripcion", u"DÓLARES CANADIENSES")'
0772      <-Source: line: 'setValueBuffer(u"descripcion", u"DÓLARES CANADIENSES")'
0772     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES CANADIENSES")'
0772    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES CANADIENSES")'
0772   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES CANADIENSES")'
0772  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES CANADIENSES")'
0772 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES CANADIENSES")'
0772<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES CANADIENSES")'
0773       InstructionCall: end-gen
0773       InstructionCall: begin-gen
0773        FunctionCall: begin-gen
0773         Value: begin-gen
0773          Constant: begin-gen
0773           Constant: ctype: 'String' -> 'tasaconv'
0773           Constant: expr: 'u"tasaconv"'
0773         <-Value: expr: 'u"tasaconv"'
0773          Constant: end-gen
0773         Value: end-gen
0773         Value: begin-gen
0773          Constant: begin-gen
0773           Constant: ctype: 'String' -> '0.735'
0773           Constant: expr: 'u"0.735"'
0773         <-Value: expr: 'u"0.735"'
0773          Constant: end-gen
0773         Value: end-gen
0773         FunctionCall: expr: 'setValueBuffer(u"tasaconv", u"0.735")'
0773        FunctionCall: end-gen
0773        InstructionCall: line: 'setValueBuffer(u"tasaconv", u"0.735")'
0773      <-Source: line: 'setValueBuffer(u"tasaconv", u"0.735")'
0773     <--With: line: 'cursor.setValueBuffer(u"tasaconv", u"0.735")'
0773    <---Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.735")'
0773   <----Function: line: 'cursor.setValueBuffer(u"tasaconv", u"0.735")'
0773  <-----Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.735")'
0773 <------Class: line: 'cursor.setValueBuffer(u"tasaconv", u"0.735")'
0773<-------Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.735")'
0774       InstructionCall: end-gen
0774       InstructionCall: begin-gen
0774        FunctionCall: begin-gen
0774         Value: begin-gen
0774          Constant: begin-gen
0774           Constant: ctype: 'String' -> 'codiso'
0774           Constant: expr: 'u"codiso"'
0774         <-Value: expr: 'u"codiso"'
0774          Constant: end-gen
0774         Value: end-gen
0774         Value: begin-gen
0774          Constant: begin-gen
0774           Constant: ctype: 'String' -> '124'
0774           Constant: expr: 'u"124"'
0774         <-Value: expr: 'u"124"'
0774          Constant: end-gen
0774         Value: end-gen
0774         FunctionCall: expr: 'setValueBuffer(u"codiso", u"124")'
0774        FunctionCall: end-gen
0774        InstructionCall: line: 'setValueBuffer(u"codiso", u"124")'
0774      <-Source: line: 'setValueBuffer(u"codiso", u"124")'
0774     <--With: line: 'cursor.setValueBuffer(u"codiso", u"124")'
0774    <---Source: line: 'cursor.setValueBuffer(u"codiso", u"124")'
0774   <----Function: line: 'cursor.setValueBuffer(u"codiso", u"124")'
0774  <-----Source: line: 'cursor.setValueBuffer(u"codiso", u"124")'
0774 <------Class: line: 'cursor.setValueBuffer(u"codiso", u"124")'
0774<-------Source: line: 'cursor.setValueBuffer(u"codiso", u"124")'
0775       InstructionCall: end-gen
0775       InstructionCall: begin-gen
0775        FunctionCall: begin-gen
0775         FunctionCall: expr: 'commitBuffer()'
0775        FunctionCall: end-gen
0775        InstructionCall: line: 'commitBuffer()'
0775      <-Source: line: 'commitBuffer()'
0775     <--With: line: 'cursor.commitBuffer()'
0775    <---Source: line: 'cursor.commitBuffer()'
0775   <----Function: line: 'cursor.commitBuffer()'
0775  <-----Source: line: 'cursor.commitBuffer()'
0775 <------Class: line: 'cursor.commitBuffer()'
0775<-------Source: line: 'cursor.commitBuffer()'
0776       InstructionCall: end-gen
0776       InstructionCall: begin-gen
0776        FunctionCall: begin-gen
0776         Value: begin-gen
0776          Member: begin-gen
0776           Identifier: begin-gen
0776            Identifier: expr: 'cursor'
0776           Identifier: end-gen
0776           Identifier: begin-gen
0776            Identifier: expr: 'Insert'
0776           Identifier: end-gen
0776           Member: expr: 'cursor.Insert'
0776         <-Value: expr: 'cursor.Insert'
0776          Member: end-gen
0776         Value: end-gen
0776         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0776        FunctionCall: end-gen
0776        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0776      <-Source: line: 'setModeAccess(cursor.Insert)'
0776     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0776    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0776   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0776  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0776 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0776<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0777       InstructionCall: end-gen
0777       InstructionCall: begin-gen
0777        FunctionCall: begin-gen
0777         FunctionCall: expr: 'refreshBuffer()'
0777        FunctionCall: end-gen
0777        InstructionCall: line: 'refreshBuffer()'
0777      <-Source: line: 'refreshBuffer()'
0777     <--With: line: 'cursor.refreshBuffer()'
0777    <---Source: line: 'cursor.refreshBuffer()'
0777   <----Function: line: 'cursor.refreshBuffer()'
0777  <-----Source: line: 'cursor.refreshBuffer()'
0777 <------Class: line: 'cursor.refreshBuffer()'
0777<-------Source: line: 'cursor.refreshBuffer()'
0778       InstructionCall: end-gen
0778       InstructionCall: begin-gen
0778        FunctionCall: begin-gen
0778         Value: begin-gen
0778          Constant: begin-gen
0778           Constant: ctype: 'String' -> 'coddivisa'
0778           Constant: expr: 'u"coddivisa"'
0778         <-Value: expr: 'u"coddivisa"'
0778          Constant: end-gen
0778         Value: end-gen
0778         Value: begin-gen
0778          Constant: begin-gen
0778           Constant: ctype: 'String' -> 'AUD'
0778           Constant: expr: 'u"AUD"'
0778         <-Value: expr: 'u"AUD"'
0778          Constant: end-gen
0778         Value: end-gen
0778         FunctionCall: expr: 'setValueBuffer(u"coddivisa", u"AUD")'
0778        FunctionCall: end-gen
0778        InstructionCall: line: 'setValueBuffer(u"coddivisa", u"AUD")'
0778      <-Source: line: 'setValueBuffer(u"coddivisa", u"AUD")'
0778     <--With: line: 'cursor.setValueBuffer(u"coddivisa", u"AUD")'
0778    <---Source: line: 'cursor.setValueBuffer(u"coddivisa", u"AUD")'
0778   <----Function: line: 'cursor.setValueBuffer(u"coddivisa", u"AUD")'
0778  <-----Source: line: 'cursor.setValueBuffer(u"coddivisa", u"AUD")'
0778 <------Class: line: 'cursor.setValueBuffer(u"coddivisa", u"AUD")'
0778<-------Source: line: 'cursor.setValueBuffer(u"coddivisa", u"AUD")'
0779       InstructionCall: end-gen
0779       InstructionCall: begin-gen
0779        FunctionCall: begin-gen
0779         Value: begin-gen
0779          Constant: begin-gen
0779           Constant: ctype: 'String' -> 'descripcion'
0779           Constant: expr: 'u"descripcion"'
0779         <-Value: expr: 'u"descripcion"'
0779          Constant: end-gen
0779         Value: end-gen
0779         Value: begin-gen
0779          Constant: begin-gen
0779           Constant: ctype: 'String' -> 'DÓLARES AUSTRALIANOS'
0779           Constant: expr: 'u"DÓLARES AUSTRALIANOS"'
0779         <-Value: expr: 'u"DÓLARES AUSTRALIANOS"'
0779          Constant: end-gen
0779         Value: end-gen
0779         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"DÓLARES AUSTRALIANOS")'
0779        FunctionCall: end-gen
0779        InstructionCall: line: 'setValueBuffer(u"descripcion", u"DÓLARES AUSTRALIANOS")'
0779      <-Source: line: 'setValueBuffer(u"descripcion", u"DÓLARES AUSTRALIANOS")'
0779     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES AUSTRALIANOS")'
0779    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES AUSTRALIANOS")'
0779   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES AUSTRALIANOS")'
0779  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES AUSTRALIANOS")'
0779 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES AUSTRALIANOS")'
0779<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"DÓLARES AUSTRALIANOS")'
0780       InstructionCall: end-gen
0780       InstructionCall: begin-gen
0780        FunctionCall: begin-gen
0780         Value: begin-gen
0780          Constant: begin-gen
0780           Constant: ctype: 'String' -> 'tasaconv'
0780           Constant: expr: 'u"tasaconv"'
0780         <-Value: expr: 'u"tasaconv"'
0780          Constant: end-gen
0780         Value: end-gen
0780         Value: begin-gen
0780          Constant: begin-gen
0780           Constant: ctype: 'String' -> '0.639'
0780           Constant: expr: 'u"0.639"'
0780         <-Value: expr: 'u"0.639"'
0780          Constant: end-gen
0780         Value: end-gen
0780         FunctionCall: expr: 'setValueBuffer(u"tasaconv", u"0.639")'
0780        FunctionCall: end-gen
0780        InstructionCall: line: 'setValueBuffer(u"tasaconv", u"0.639")'
0780      <-Source: line: 'setValueBuffer(u"tasaconv", u"0.639")'
0780     <--With: line: 'cursor.setValueBuffer(u"tasaconv", u"0.639")'
0780    <---Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.639")'
0780   <----Function: line: 'cursor.setValueBuffer(u"tasaconv", u"0.639")'
0780  <-----Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.639")'
0780 <------Class: line: 'cursor.setValueBuffer(u"tasaconv", u"0.639")'
0780<-------Source: line: 'cursor.setValueBuffer(u"tasaconv", u"0.639")'
0781       InstructionCall: end-gen
0781       InstructionCall: begin-gen
0781        FunctionCall: begin-gen
0781         Value: begin-gen
0781          Constant: begin-gen
0781           Constant: ctype: 'String' -> 'codiso'
0781           Constant: expr: 'u"codiso"'
0781         <-Value: expr: 'u"codiso"'
0781          Constant: end-gen
0781         Value: end-gen
0781         Value: begin-gen
0781          Constant: begin-gen
0781           Constant: ctype: 'String' -> '036'
0781           Constant: expr: 'u"036"'
0781         <-Value: expr: 'u"036"'
0781          Constant: end-gen
0781         Value: end-gen
0781         FunctionCall: expr: 'setValueBuffer(u"codiso", u"036")'
0781        FunctionCall: end-gen
0781        InstructionCall: line: 'setValueBuffer(u"codiso", u"036")'
0781      <-Source: line: 'setValueBuffer(u"codiso", u"036")'
0781     <--With: line: 'cursor.setValueBuffer(u"codiso", u"036")'
0781    <---Source: line: 'cursor.setValueBuffer(u"codiso", u"036")'
0781   <----Function: line: 'cursor.setValueBuffer(u"codiso", u"036")'
0781  <-----Source: line: 'cursor.setValueBuffer(u"codiso", u"036")'
0781 <------Class: line: 'cursor.setValueBuffer(u"codiso", u"036")'
0781<-------Source: line: 'cursor.setValueBuffer(u"codiso", u"036")'
0782       InstructionCall: end-gen
0782       InstructionCall: begin-gen
0782        FunctionCall: begin-gen
0782         FunctionCall: expr: 'commitBuffer()'
0782        FunctionCall: end-gen
0782        InstructionCall: line: 'commitBuffer()'
0782      <-Source: line: 'commitBuffer()'
0782     <--With: line: 'cursor.commitBuffer()'
0782    <---Source: line: 'cursor.commitBuffer()'
0782   <----Function: line: 'cursor.commitBuffer()'
0782  <-----Source: line: 'cursor.commitBuffer()'
0782 <------Class: line: 'cursor.commitBuffer()'
0782<-------Source: line: 'cursor.commitBuffer()'
0783       InstructionCall: end-gen
0783      Source: end-gen
0783      With: line: ' #WITH_END'
0783    <-Source: line: ' #WITH_END'
0783   <--Function: line: ' #WITH_END'
0783  <---Source: line: ' #WITH_END'
0783 <----Class: line: ' #WITH_END'
0783<-----Source: line: ' #WITH_END'
0784     With: end-gen
0784     Delete: begin-gen
0784      Delete: expr: 'del'
0784    <-Source: expr: 'del'
0784   <--Function: expr: 'del'
0784  <---Source: expr: 'del'
0784 <----Class: expr: 'del'
0784<-----Source: expr: 'del'
0785      Identifier: begin-gen
0785       Identifier: expr: 'cursor'
0785     <-Delete: expr: 'cursor'
0785    <--Source: expr: 'cursor'
0785   <---Function: expr: 'cursor'
0785  <----Source: expr: 'cursor'
0785 <-----Class: expr: 'cursor'
0785<------Source: expr: 'cursor'
0786      Identifier: end-gen
0786     Delete: end-gen
0786     InstructionUpdate: begin-gen
0786      Identifier: begin-gen
0786       Identifier: expr: 'cursor'
0786      Identifier: end-gen
0786      OpUpdate: begin-gen
0786       OpUpdate: expr: '='
0786      OpUpdate: end-gen
0786      Value: begin-gen
0786       New: begin-gen
0786        FunctionCall: begin-gen
0786         Value: begin-gen
0786          Constant: begin-gen
0786           Constant: ctype: 'String' -> 'formaspago'
0786           Constant: expr: 'u"formaspago"'
0786         <-Value: expr: 'u"formaspago"'
0786          Constant: end-gen
0786         Value: end-gen
0786         FunctionCall: expr: 'FLSqlCursor(u"formaspago")'
0786       <-New: expr: 'qsatype.FLSqlCursor(u"formaspago")'
0786      <--Value: expr: 'qsatype.FLSqlCursor(u"formaspago")'
0786        FunctionCall: end-gen
0786       New: end-gen
0786      Value: end-gen
0786      InstructionUpdate: line: 'cursor = qsatype.FLSqlCursor(u"formaspago")'
0786    <-Source: line: 'cursor = qsatype.FLSqlCursor(u"formaspago")'
0786   <--Function: line: 'cursor = qsatype.FLSqlCursor(u"formaspago")'
0786  <---Source: line: 'cursor = qsatype.FLSqlCursor(u"formaspago")'
0786 <----Class: line: 'cursor = qsatype.FLSqlCursor(u"formaspago")'
0786<-----Source: line: 'cursor = qsatype.FLSqlCursor(u"formaspago")'
0787     InstructionUpdate: end-gen
0787     With: begin-gen
0787      Identifier: begin-gen
0787       Identifier: expr: 'cursor'
0787      Identifier: end-gen
0787      With: line: ' #WITH_START'
0787    <-Source: line: ' #WITH_START'
0787   <--Function: line: ' #WITH_START'
0787  <---Source: line: ' #WITH_START'
0787 <----Class: line: ' #WITH_START'
0787<-----Source: line: ' #WITH_START'
0788      Source: begin-gen
0788       InstructionCall: begin-gen
0788        FunctionCall: begin-gen
0788         Value: begin-gen
0788          Member: begin-gen
0788           Identifier: begin-gen
0788            Identifier: expr: 'cursor'
0788           Identifier: end-gen
0788           Identifier: begin-gen
0788            Identifier: expr: 'Insert'
0788           Identifier: end-gen
0788           Member: expr: 'cursor.Insert'
0788         <-Value: expr: 'cursor.Insert'
0788          Member: end-gen
0788         Value: end-gen
0788         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0788        FunctionCall: end-gen
0788        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0788      <-Source: line: 'setModeAccess(cursor.Insert)'
0788     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0788    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0788   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0788  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0788 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0788<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0789       InstructionCall: end-gen
0789       InstructionCall: begin-gen
0789        FunctionCall: begin-gen
0789         FunctionCall: expr: 'refreshBuffer()'
0789        FunctionCall: end-gen
0789        InstructionCall: line: 'refreshBuffer()'
0789      <-Source: line: 'refreshBuffer()'
0789     <--With: line: 'cursor.refreshBuffer()'
0789    <---Source: line: 'cursor.refreshBuffer()'
0789   <----Function: line: 'cursor.refreshBuffer()'
0789  <-----Source: line: 'cursor.refreshBuffer()'
0789 <------Class: line: 'cursor.refreshBuffer()'
0789<-------Source: line: 'cursor.refreshBuffer()'
0790       InstructionCall: end-gen
0790       InstructionCall: begin-gen
0790        FunctionCall: begin-gen
0790         Value: begin-gen
0790          Constant: begin-gen
0790           Constant: ctype: 'String' -> 'codpago'
0790           Constant: expr: 'u"codpago"'
0790         <-Value: expr: 'u"codpago"'
0790          Constant: end-gen
0790         Value: end-gen
0790         Value: begin-gen
0790          Constant: begin-gen
0790           Constant: ctype: 'String' -> 'CONT'
0790           Constant: expr: 'u"CONT"'
0790         <-Value: expr: 'u"CONT"'
0790          Constant: end-gen
0790         Value: end-gen
0790         FunctionCall: expr: 'setValueBuffer(u"codpago", u"CONT")'
0790        FunctionCall: end-gen
0790        InstructionCall: line: 'setValueBuffer(u"codpago", u"CONT")'
0790      <-Source: line: 'setValueBuffer(u"codpago", u"CONT")'
0790     <--With: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0790    <---Source: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0790   <----Function: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0790  <-----Source: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0790 <------Class: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0790<-------Source: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0791       InstructionCall: end-gen
0791       InstructionCall: begin-gen
0791        FunctionCall: begin-gen
0791         Value: begin-gen
0791          Constant: begin-gen
0791           Constant: ctype: 'String' -> 'descripcion'
0791           Constant: expr: 'u"descripcion"'
0791         <-Value: expr: 'u"descripcion"'
0791          Constant: end-gen
0791         Value: end-gen
0791         Value: begin-gen
0791          Constant: begin-gen
0791           Constant: ctype: 'String' -> 'CONTADO'
0791           Constant: expr: 'u"CONTADO"'
0791         <-Value: expr: 'u"CONTADO"'
0791          Constant: end-gen
0791         Value: end-gen
0791         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"CONTADO")'
0791        FunctionCall: end-gen
0791        InstructionCall: line: 'setValueBuffer(u"descripcion", u"CONTADO")'
0791      <-Source: line: 'setValueBuffer(u"descripcion", u"CONTADO")'
0791     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"CONTADO")'
0791    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"CONTADO")'
0791   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"CONTADO")'
0791  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"CONTADO")'
0791 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"CONTADO")'
0791<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"CONTADO")'
0792       InstructionCall: end-gen
0792       InstructionCall: begin-gen
0792        FunctionCall: begin-gen
0792         FunctionCall: expr: 'commitBuffer()'
0792        FunctionCall: end-gen
0792        InstructionCall: line: 'commitBuffer()'
0792      <-Source: line: 'commitBuffer()'
0792     <--With: line: 'cursor.commitBuffer()'
0792    <---Source: line: 'cursor.commitBuffer()'
0792   <----Function: line: 'cursor.commitBuffer()'
0792  <-----Source: line: 'cursor.commitBuffer()'
0792 <------Class: line: 'cursor.commitBuffer()'
0792<-------Source: line: 'cursor.commitBuffer()'
0793       InstructionCall: end-gen
0793      Source: end-gen
0793      With: line: ' #WITH_END'
0793    <-Source: line: ' #WITH_END'
0793   <--Function: line: ' #WITH_END'
0793  <---Source: line: ' #WITH_END'
0793 <----Class: line: ' #WITH_END'
0793<-----Source: line: ' #WITH_END'
0794     With: end-gen
0794     Delete: begin-gen
0794      Delete: expr: 'del'
0794    <-Source: expr: 'del'
0794   <--Function: expr: 'del'
0794  <---Source: expr: 'del'
0794 <----Class: expr: 'del'
0794<-----Source: expr: 'del'
0795      Identifier: begin-gen
0795       Identifier: expr: 'cursor'
0795     <-Delete: expr: 'cursor'
0795    <--Source: expr: 'cursor'
0795   <---Function: expr: 'cursor'
0795  <----Source: expr: 'cursor'
0795 <-----Class: expr: 'cursor'
0795<------Source: expr: 'cursor'
0796      Identifier: end-gen
0796     Delete: end-gen
0796     InstructionUpdate: begin-gen
0796      Identifier: begin-gen
0796       Identifier: expr: 'cursor'
0796      Identifier: end-gen
0796      OpUpdate: begin-gen
0796       OpUpdate: expr: '='
0796      OpUpdate: end-gen
0796      Value: begin-gen
0796       New: begin-gen
0796        FunctionCall: begin-gen
0796         Value: begin-gen
0796          Constant: begin-gen
0796           Constant: ctype: 'String' -> 'plazos'
0796           Constant: expr: 'u"plazos"'
0796         <-Value: expr: 'u"plazos"'
0796          Constant: end-gen
0796         Value: end-gen
0796         FunctionCall: expr: 'FLSqlCursor(u"plazos")'
0796       <-New: expr: 'qsatype.FLSqlCursor(u"plazos")'
0796      <--Value: expr: 'qsatype.FLSqlCursor(u"plazos")'
0796        FunctionCall: end-gen
0796       New: end-gen
0796      Value: end-gen
0796      InstructionUpdate: line: 'cursor = qsatype.FLSqlCursor(u"plazos")'
0796    <-Source: line: 'cursor = qsatype.FLSqlCursor(u"plazos")'
0796   <--Function: line: 'cursor = qsatype.FLSqlCursor(u"plazos")'
0796  <---Source: line: 'cursor = qsatype.FLSqlCursor(u"plazos")'
0796 <----Class: line: 'cursor = qsatype.FLSqlCursor(u"plazos")'
0796<-----Source: line: 'cursor = qsatype.FLSqlCursor(u"plazos")'
0797     InstructionUpdate: end-gen
0797     With: begin-gen
0797      Identifier: begin-gen
0797       Identifier: expr: 'cursor'
0797      Identifier: end-gen
0797      With: line: ' #WITH_START'
0797    <-Source: line: ' #WITH_START'
0797   <--Function: line: ' #WITH_START'
0797  <---Source: line: ' #WITH_START'
0797 <----Class: line: ' #WITH_START'
0797<-----Source: line: ' #WITH_START'
0798      Source: begin-gen
0798       InstructionCall: begin-gen
0798        FunctionCall: begin-gen
0798         Value: begin-gen
0798          Member: begin-gen
0798           Identifier: begin-gen
0798            Identifier: expr: 'cursor'
0798           Identifier: end-gen
0798           Identifier: begin-gen
0798            Identifier: expr: 'Insert'
0798           Identifier: end-gen
0798           Member: expr: 'cursor.Insert'
0798         <-Value: expr: 'cursor.Insert'
0798          Member: end-gen
0798         Value: end-gen
0798         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0798        FunctionCall: end-gen
0798        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0798      <-Source: line: 'setModeAccess(cursor.Insert)'
0798     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0798    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0798   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0798  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0798 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0798<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0799       InstructionCall: end-gen
0799       InstructionCall: begin-gen
0799        FunctionCall: begin-gen
0799         FunctionCall: expr: 'refreshBuffer()'
0799        FunctionCall: end-gen
0799        InstructionCall: line: 'refreshBuffer()'
0799      <-Source: line: 'refreshBuffer()'
0799     <--With: line: 'cursor.refreshBuffer()'
0799    <---Source: line: 'cursor.refreshBuffer()'
0799   <----Function: line: 'cursor.refreshBuffer()'
0799  <-----Source: line: 'cursor.refreshBuffer()'
0799 <------Class: line: 'cursor.refreshBuffer()'
0799<-------Source: line: 'cursor.refreshBuffer()'
0800       InstructionCall: end-gen
0800       InstructionCall: begin-gen
0800        FunctionCall: begin-gen
0800         Value: begin-gen
0800          Constant: begin-gen
0800           Constant: ctype: 'String' -> 'codpago'
0800           Constant: expr: 'u"codpago"'
0800         <-Value: expr: 'u"codpago"'
0800          Constant: end-gen
0800         Value: end-gen
0800         Value: begin-gen
0800          Constant: begin-gen
0800           Constant: ctype: 'String' -> 'CONT'
0800           Constant: expr: 'u"CONT"'
0800         <-Value: expr: 'u"CONT"'
0800          Constant: end-gen
0800         Value: end-gen
0800         FunctionCall: expr: 'setValueBuffer(u"codpago", u"CONT")'
0800        FunctionCall: end-gen
0800        InstructionCall: line: 'setValueBuffer(u"codpago", u"CONT")'
0800      <-Source: line: 'setValueBuffer(u"codpago", u"CONT")'
0800     <--With: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0800    <---Source: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0800   <----Function: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0800  <-----Source: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0800 <------Class: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0800<-------Source: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0801       InstructionCall: end-gen
0801       InstructionCall: begin-gen
0801        FunctionCall: begin-gen
0801         Value: begin-gen
0801          Constant: begin-gen
0801           Constant: ctype: 'String' -> 'dias'
0801           Constant: expr: 'u"dias"'
0801         <-Value: expr: 'u"dias"'
0801          Constant: end-gen
0801         Value: end-gen
0801         Value: begin-gen
0801          Constant: begin-gen
0801           Constant: ctype: 'String' -> '0'
0801           Constant: expr: 'u"0"'
0801         <-Value: expr: 'u"0"'
0801          Constant: end-gen
0801         Value: end-gen
0801         FunctionCall: expr: 'setValueBuffer(u"dias", u"0")'
0801        FunctionCall: end-gen
0801        InstructionCall: line: 'setValueBuffer(u"dias", u"0")'
0801      <-Source: line: 'setValueBuffer(u"dias", u"0")'
0801     <--With: line: 'cursor.setValueBuffer(u"dias", u"0")'
0801    <---Source: line: 'cursor.setValueBuffer(u"dias", u"0")'
0801   <----Function: line: 'cursor.setValueBuffer(u"dias", u"0")'
0801  <-----Source: line: 'cursor.setValueBuffer(u"dias", u"0")'
0801 <------Class: line: 'cursor.setValueBuffer(u"dias", u"0")'
0801<-------Source: line: 'cursor.setValueBuffer(u"dias", u"0")'
0802       InstructionCall: end-gen
0802       InstructionCall: begin-gen
0802        FunctionCall: begin-gen
0802         Value: begin-gen
0802          Constant: begin-gen
0802           Constant: ctype: 'String' -> 'aplazado'
0802           Constant: expr: 'u"aplazado"'
0802         <-Value: expr: 'u"aplazado"'
0802          Constant: end-gen
0802         Value: end-gen
0802         Value: begin-gen
0802          Constant: begin-gen
0802           Constant: ctype: 'String' -> '100'
0802           Constant: expr: 'u"100"'
0802         <-Value: expr: 'u"100"'
0802          Constant: end-gen
0802         Value: end-gen
0802         FunctionCall: expr: 'setValueBuffer(u"aplazado", u"100")'
0802        FunctionCall: end-gen
0802        InstructionCall: line: 'setValueBuffer(u"aplazado", u"100")'
0802      <-Source: line: 'setValueBuffer(u"aplazado", u"100")'
0802     <--With: line: 'cursor.setValueBuffer(u"aplazado", u"100")'
0802    <---Source: line: 'cursor.setValueBuffer(u"aplazado", u"100")'
0802   <----Function: line: 'cursor.setValueBuffer(u"aplazado", u"100")'
0802  <-----Source: line: 'cursor.setValueBuffer(u"aplazado", u"100")'
0802 <------Class: line: 'cursor.setValueBuffer(u"aplazado", u"100")'
0802<-------Source: line: 'cursor.setValueBuffer(u"aplazado", u"100")'
0803       InstructionCall: end-gen
0803       InstructionCall: begin-gen
0803        FunctionCall: begin-gen
0803         FunctionCall: expr: 'commitBuffer()'
0803        FunctionCall: end-gen
0803        InstructionCall: line: 'commitBuffer()'
0803      <-Source: line: 'commitBuffer()'
0803     <--With: line: 'cursor.commitBuffer()'
0803    <---Source: line: 'cursor.commitBuffer()'
0803   <----Function: line: 'cursor.commitBuffer()'
0803  <-----Source: line: 'cursor.commitBuffer()'
0803 <------Class: line: 'cursor.commitBuffer()'
0803<-------Source: line: 'cursor.commitBuffer()'
0804       InstructionCall: end-gen
0804      Source: end-gen
0804      With: line: ' #WITH_END'
0804    <-Source: line: ' #WITH_END'
0804   <--Function: line: ' #WITH_END'
0804  <---Source: line: ' #WITH_END'
0804 <----Class: line: ' #WITH_END'
0804<-----Source: line: ' #WITH_END'
0805     With: end-gen
0805     Delete: begin-gen
0805      Delete: expr: 'del'
0805    <-Source: expr: 'del'
0805   <--Function: expr: 'del'
0805  <---Source: expr: 'del'
0805 <----Class: expr: 'del'
0805<-----Source: expr: 'del'
0806      Identifier: begin-gen
0806       Identifier: expr: 'cursor'
0806     <-Delete: expr: 'cursor'
0806    <--Source: expr: 'cursor'
0806   <---Function: expr: 'cursor'
0806  <----Source: expr: 'cursor'
0806 <-----Class: expr: 'cursor'
0806<------Source: expr: 'cursor'
0807      Identifier: end-gen
0807     Delete: end-gen
0807     InstructionUpdate: begin-gen
0807      Identifier: begin-gen
0807       Identifier: expr: 'cursor'
0807      Identifier: end-gen
0807      OpUpdate: begin-gen
0807       OpUpdate: expr: '='
0807      OpUpdate: end-gen
0807      Value: begin-gen
0807       New: begin-gen
0807        FunctionCall: begin-gen
0807         Value: begin-gen
0807          Constant: begin-gen
0807           Constant: ctype: 'String' -> 'ejercicios'
0807           Constant: expr: 'u"ejercicios"'
0807         <-Value: expr: 'u"ejercicios"'
0807          Constant: end-gen
0807         Value: end-gen
0807         FunctionCall: expr: 'FLSqlCursor(u"ejercicios")'
0807       <-New: expr: 'qsatype.FLSqlCursor(u"ejercicios")'
0807      <--Value: expr: 'qsatype.FLSqlCursor(u"ejercicios")'
0807        FunctionCall: end-gen
0807       New: end-gen
0807      Value: end-gen
0807      InstructionUpdate: line: 'cursor = qsatype.FLSqlCursor(u"ejercicios")'
0807    <-Source: line: 'cursor = qsatype.FLSqlCursor(u"ejercicios")'
0807   <--Function: line: 'cursor = qsatype.FLSqlCursor(u"ejercicios")'
0807  <---Source: line: 'cursor = qsatype.FLSqlCursor(u"ejercicios")'
0807 <----Class: line: 'cursor = qsatype.FLSqlCursor(u"ejercicios")'
0807<-----Source: line: 'cursor = qsatype.FLSqlCursor(u"ejercicios")'
0808     InstructionUpdate: end-gen
0808     DeclarationBlock: begin-gen
0808      Variable: begin-gen
0808       Variable: expr: 'hoy'
0808       Variable: expr: '='
0808       Value: begin-gen
0808        New: begin-gen
0808         FunctionCall: begin-gen
0808          FunctionCall: expr: 'Date()'
0808        <-New: expr: 'qsatype.Date()'
0808       <--Value: expr: 'qsatype.Date()'
0808      <---Variable: expr: 'qsatype.Date()'
0808         FunctionCall: end-gen
0808        New: end-gen
0808       Value: end-gen
0808      Variable: end-gen
0808      DeclarationBlock: line: 'hoy = qsatype.Date()'
0808    <-Source: line: 'hoy = qsatype.Date()'
0808   <--Function: line: 'hoy = qsatype.Date()'
0808  <---Source: line: 'hoy = qsatype.Date()'
0808 <----Class: line: 'hoy = qsatype.Date()'
0808<-----Source: line: 'hoy = qsatype.Date()'
0809     DeclarationBlock: end-gen
0809     DeclarationBlock: begin-gen
0809      Variable: begin-gen
0809       Variable: expr: 'fechaInicio'
0809       Variable: expr: '='
0809       Value: begin-gen
0809        New: begin-gen
0809         FunctionCall: begin-gen
0809          Value: begin-gen
0809           Member: begin-gen
0809            Identifier: begin-gen
0809             Identifier: expr: 'hoy'
0809            Identifier: end-gen
0809            FunctionCall: begin-gen
0809             FunctionCall: expr: 'getYear()'
0809            FunctionCall: end-gen
0809            Member: expr: 'hoy.getYear()'
0809          <-Value: expr: 'hoy.getYear()'
0809           Member: end-gen
0809          Value: end-gen
0809          Value: begin-gen
0809           Constant: begin-gen
0809            Constant: ctype: 'Number' -> '1'
0809            Constant: expr: '1'
0809          <-Value: expr: '1'
0809           Constant: end-gen
0809          Value: end-gen
0809          Value: begin-gen
0809           Constant: begin-gen
0809            Constant: ctype: 'Number' -> '1'
0809            Constant: expr: '1'
0809          <-Value: expr: '1'
0809           Constant: end-gen
0809          Value: end-gen
0809          FunctionCall: expr: 'Date(hoy.getYear(), 1, 1)'
0809        <-New: expr: 'qsatype.Date(hoy.getYear(), 1, 1)'
0809       <--Value: expr: 'qsatype.Date(hoy.getYear(), 1, 1)'
0809      <---Variable: expr: 'qsatype.Date(hoy.getYear(), 1, 1)'
0809         FunctionCall: end-gen
0809        New: end-gen
0809       Value: end-gen
0809      Variable: end-gen
0809      DeclarationBlock: line: 'fechaInicio = qsatype.Date(hoy.getYear(), 1, 1)'
0809    <-Source: line: 'fechaInicio = qsatype.Date(hoy.getYear(), 1, 1)'
0809   <--Function: line: 'fechaInicio = qsatype.Date(hoy.getYear(), 1, 1)'
0809  <---Source: line: 'fechaInicio = qsatype.Date(hoy.getYear(), 1, 1)'
0809 <----Class: line: 'fechaInicio = qsatype.Date(hoy.getYear(), 1, 1)'
0809<-----Source: line: 'fechaInicio = qsatype.Date(hoy.getYear(), 1, 1)'
0810     DeclarationBlock: end-gen
0810     DeclarationBlock: begin-gen
0810      Variable: begin-gen
0810       Variable: expr: 'fechaFin'
0810       Variable: expr: '='
0810       Value: begin-gen
0810        New: begin-gen
0810         FunctionCall: begin-gen
0810          Value: begin-gen
0810           Member: begin-gen
0810            Identifier: begin-gen
0810             Identifier: expr: 'hoy'
0810            Identifier: end-gen
0810            FunctionCall: begin-gen
0810             FunctionCall: expr: 'getYear()'
0810            FunctionCall: end-gen
0810            Member: expr: 'hoy.getYear()'
0810          <-Value: expr: 'hoy.getYear()'
0810           Member: end-gen
0810          Value: end-gen
0810          Value: begin-gen
0810           Constant: begin-gen
0810            Constant: ctype: 'Number' -> '12'
0810            Constant: expr: '12'
0810          <-Value: expr: '12'
0810           Constant: end-gen
0810          Value: end-gen
0810          Value: begin-gen
0810           Constant: begin-gen
0810            Constant: ctype: 'Number' -> '31'
0810            Constant: expr: '31'
0810          <-Value: expr: '31'
0810           Constant: end-gen
0810          Value: end-gen
0810          FunctionCall: expr: 'Date(hoy.getYear(), 12, 31)'
0810        <-New: expr: 'qsatype.Date(hoy.getYear(), 12, 31)'
0810       <--Value: expr: 'qsatype.Date(hoy.getYear(), 12, 31)'
0810      <---Variable: expr: 'qsatype.Date(hoy.getYear(), 12, 31)'
0810         FunctionCall: end-gen
0810        New: end-gen
0810       Value: end-gen
0810      Variable: end-gen
0810      DeclarationBlock: line: 'fechaFin = qsatype.Date(hoy.getYear(), 12, 31)'
0810    <-Source: line: 'fechaFin = qsatype.Date(hoy.getYear(), 12, 31)'
0810   <--Function: line: 'fechaFin = qsatype.Date(hoy.getYear(), 12, 31)'
0810  <---Source: line: 'fechaFin = qsatype.Date(hoy.getYear(), 12, 31)'
0810 <----Class: line: 'fechaFin = qsatype.Date(hoy.getYear(), 12, 31)'
0810<-----Source: line: 'fechaFin = qsatype.Date(hoy.getYear(), 12, 31)'
0811     DeclarationBlock: end-gen
0811     DeclarationBlock: begin-gen
0811      Variable: begin-gen
0811       Variable: expr: 'codEjercicio'
0811       Variable: expr: '='
0811       Value: begin-gen
0811        Member: begin-gen
0811         Identifier: begin-gen
0811          Identifier: expr: 'hoy'
0811         Identifier: end-gen
0811         FunctionCall: begin-gen
0811          FunctionCall: expr: 'getYear()'
0811         FunctionCall: end-gen
0811         Member: expr: 'hoy.getYear()'
0811       <-Value: expr: 'hoy.getYear()'
0811      <--Variable: expr: 'hoy.getYear()'
0811        Member: end-gen
0811       Value: end-gen
0811      Variable: end-gen
0811      DeclarationBlock: line: 'codEjercicio = hoy.getYear()'
0811    <-Source: line: 'codEjercicio = hoy.getYear()'
0811   <--Function: line: 'codEjercicio = hoy.getYear()'
0811  <---Source: line: 'codEjercicio = hoy.getYear()'
0811 <----Class: line: 'codEjercicio = hoy.getYear()'
0811<-----Source: line: 'codEjercicio = hoy.getYear()'
0812     DeclarationBlock: end-gen
0812     With: begin-gen
0812      Identifier: begin-gen
0812       Identifier: expr: 'cursor'
0812      Identifier: end-gen
0812      With: line: ' #WITH_START'
0812    <-Source: line: ' #WITH_START'
0812   <--Function: line: ' #WITH_START'
0812  <---Source: line: ' #WITH_START'
0812 <----Class: line: ' #WITH_START'
0812<-----Source: line: ' #WITH_START'
0813      Source: begin-gen
0813       InstructionCall: begin-gen
0813        FunctionCall: begin-gen
0813         Value: begin-gen
0813          Member: begin-gen
0813           Identifier: begin-gen
0813            Identifier: expr: 'cursor'
0813           Identifier: end-gen
0813           Identifier: begin-gen
0813            Identifier: expr: 'Insert'
0813           Identifier: end-gen
0813           Member: expr: 'cursor.Insert'
0813         <-Value: expr: 'cursor.Insert'
0813          Member: end-gen
0813         Value: end-gen
0813         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0813        FunctionCall: end-gen
0813        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0813      <-Source: line: 'setModeAccess(cursor.Insert)'
0813     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0813    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0813   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0813  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0813 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0813<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0814       InstructionCall: end-gen
0814       InstructionCall: begin-gen
0814        FunctionCall: begin-gen
0814         FunctionCall: expr: 'refreshBuffer()'
0814        FunctionCall: end-gen
0814        InstructionCall: line: 'refreshBuffer()'
0814      <-Source: line: 'refreshBuffer()'
0814     <--With: line: 'cursor.refreshBuffer()'
0814    <---Source: line: 'cursor.refreshBuffer()'
0814   <----Function: line: 'cursor.refreshBuffer()'
0814  <-----Source: line: 'cursor.refreshBuffer()'
0814 <------Class: line: 'cursor.refreshBuffer()'
0814<-------Source: line: 'cursor.refreshBuffer()'
0815       InstructionCall: end-gen
0815       InstructionCall: begin-gen
0815        FunctionCall: begin-gen
0815         Value: begin-gen
0815          Constant: begin-gen
0815           Constant: ctype: 'String' -> 'codejercicio'
0815           Constant: expr: 'u"codejercicio"'
0815         <-Value: expr: 'u"codejercicio"'
0815          Constant: end-gen
0815         Value: end-gen
0815         Value: begin-gen
0815          Identifier: begin-gen
0815           Identifier: expr: 'codEjercicio'
0815         <-Value: expr: 'codEjercicio'
0815          Identifier: end-gen
0815         Value: end-gen
0815         FunctionCall: expr: 'setValueBuffer(u"codejercicio", codEjercicio)'
0815        FunctionCall: end-gen
0815        InstructionCall: line: 'setValueBuffer(u"codejercicio", codEjercicio)'
0815      <-Source: line: 'setValueBuffer(u"codejercicio", codEjercicio)'
0815     <--With: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0815    <---Source: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0815   <----Function: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0815  <-----Source: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0815 <------Class: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0815<-------Source: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0816       InstructionCall: end-gen
0816       InstructionCall: begin-gen
0816        FunctionCall: begin-gen
0816         Value: begin-gen
0816          Constant: begin-gen
0816           Constant: ctype: 'String' -> 'nombre'
0816           Constant: expr: 'u"nombre"'
0816         <-Value: expr: 'u"nombre"'
0816          Constant: end-gen
0816         Value: end-gen
0816         Expression: begin-gen
0816          Expression: expr: 'ustr('
0816          Constant: begin-gen
0816           Constant: ctype: 'String' -> 'EJERCICIO '
0816           Constant: expr: 'u"EJERCICIO "'
0816         <-Expression: expr: 'u"EJERCICIO "'
0816          Constant: end-gen
0816          Expression: expr: ','
0816          Identifier: begin-gen
0816           Identifier: expr: 'codEjercicio'
0816         <-Expression: expr: 'codEjercicio'
0816          Identifier: end-gen
0816          Expression: expr: ')'
0816         Expression: end-gen
0816         FunctionCall: expr: 'setValueBuffer(u"nombre", ustr( u"EJERCICIO " , codEjercicio ))'
0816        FunctionCall: end-gen
0816        InstructionCall: line: 'setValueBuffer(u"nombre", ustr( u"EJERCICIO " , codEjercicio ))'
0816      <-Source: line: 'setValueBuffer(u"nombre", ustr( u"EJERCICIO " , codEjercicio ))'
0816     <--With: line: 'cursor.setValueBuffer(u"nombre", ustr( u"EJERCICIO " , codEjercicio ))'
0816    <---Source: line: 'cursor.setValueBuffer(u"nombre", ustr( u"EJERCICIO " , codEjercicio ))'
0816   <----Function: line: 'cursor.setValueBuffer(u"nombre", ustr( u"EJERCICIO " , codEjercicio ))'
0816  <-----Source: line: 'cursor.setValueBuffer(u"nombre", ustr( u"EJERCICIO " , codEjercicio ))'
0816 <------Class: line: 'cursor.setValueBuffer(u"nombre", ustr( u"EJERCICIO " , codEjercicio ))'
0816<-------Source: line: 'cursor.setValueBuffer(u"nombre", ustr( u"EJERCICIO " , codEjercicio ))'
0817       InstructionCall: end-gen
0817       InstructionCall: begin-gen
0817        FunctionCall: begin-gen
0817         Value: begin-gen
0817          Constant: begin-gen
0817           Constant: ctype: 'String' -> 'fechainicio'
0817           Constant: expr: 'u"fechainicio"'
0817         <-Value: expr: 'u"fechainicio"'
0817          Constant: end-gen
0817         Value: end-gen
0817         Value: begin-gen
0817          Identifier: begin-gen
0817           Identifier: expr: 'fechaInicio'
0817         <-Value: expr: 'fechaInicio'
0817          Identifier: end-gen
0817         Value: end-gen
0817         FunctionCall: expr: 'setValueBuffer(u"fechainicio", fechaInicio)'
0817        FunctionCall: end-gen
0817        InstructionCall: line: 'setValueBuffer(u"fechainicio", fechaInicio)'
0817      <-Source: line: 'setValueBuffer(u"fechainicio", fechaInicio)'
0817     <--With: line: 'cursor.setValueBuffer(u"fechainicio", fechaInicio)'
0817    <---Source: line: 'cursor.setValueBuffer(u"fechainicio", fechaInicio)'
0817   <----Function: line: 'cursor.setValueBuffer(u"fechainicio", fechaInicio)'
0817  <-----Source: line: 'cursor.setValueBuffer(u"fechainicio", fechaInicio)'
0817 <------Class: line: 'cursor.setValueBuffer(u"fechainicio", fechaInicio)'
0817<-------Source: line: 'cursor.setValueBuffer(u"fechainicio", fechaInicio)'
0818       InstructionCall: end-gen
0818       InstructionCall: begin-gen
0818        FunctionCall: begin-gen
0818         Value: begin-gen
0818          Constant: begin-gen
0818           Constant: ctype: 'String' -> 'fechafin'
0818           Constant: expr: 'u"fechafin"'
0818         <-Value: expr: 'u"fechafin"'
0818          Constant: end-gen
0818         Value: end-gen
0818         Value: begin-gen
0818          Identifier: begin-gen
0818           Identifier: expr: 'fechaFin'
0818         <-Value: expr: 'fechaFin'
0818          Identifier: end-gen
0818         Value: end-gen
0818         FunctionCall: expr: 'setValueBuffer(u"fechafin", fechaFin)'
0818        FunctionCall: end-gen
0818        InstructionCall: line: 'setValueBuffer(u"fechafin", fechaFin)'
0818      <-Source: line: 'setValueBuffer(u"fechafin", fechaFin)'
0818     <--With: line: 'cursor.setValueBuffer(u"fechafin", fechaFin)'
0818    <---Source: line: 'cursor.setValueBuffer(u"fechafin", fechaFin)'
0818   <----Function: line: 'cursor.setValueBuffer(u"fechafin", fechaFin)'
0818  <-----Source: line: 'cursor.setValueBuffer(u"fechafin", fechaFin)'
0818 <------Class: line: 'cursor.setValueBuffer(u"fechafin", fechaFin)'
0818<-------Source: line: 'cursor.setValueBuffer(u"fechafin", fechaFin)'
0819       InstructionCall: end-gen
0819       InstructionCall: begin-gen
0819        FunctionCall: begin-gen
0819         Value: begin-gen
0819          Constant: begin-gen
0819           Constant: ctype: 'String' -> 'estado'
0819           Constant: expr: 'u"estado"'
0819         <-Value: expr: 'u"estado"'
0819          Constant: end-gen
0819         Value: end-gen
0819         Value: begin-gen
0819          Constant: begin-gen
0819           Constant: ctype: 'String' -> 'ABIERTO'
0819           Constant: expr: 'u"ABIERTO"'
0819         <-Value: expr: 'u"ABIERTO"'
0819          Constant: end-gen
0819         Value: end-gen
0819         FunctionCall: expr: 'setValueBuffer(u"estado", u"ABIERTO")'
0819        FunctionCall: end-gen
0819        InstructionCall: line: 'setValueBuffer(u"estado", u"ABIERTO")'
0819      <-Source: line: 'setValueBuffer(u"estado", u"ABIERTO")'
0819     <--With: line: 'cursor.setValueBuffer(u"estado", u"ABIERTO")'
0819    <---Source: line: 'cursor.setValueBuffer(u"estado", u"ABIERTO")'
0819   <----Function: line: 'cursor.setValueBuffer(u"estado", u"ABIERTO")'
0819  <-----Source: line: 'cursor.setValueBuffer(u"estado", u"ABIERTO")'
0819 <------Class: line: 'cursor.setValueBuffer(u"estado", u"ABIERTO")'
0819<-------Source: line: 'cursor.setValueBuffer(u"estado", u"ABIERTO")'
0820       InstructionCall: end-gen
0820       InstructionCall: begin-gen
0820        FunctionCall: begin-gen
0820         FunctionCall: expr: 'commitBuffer()'
0820        FunctionCall: end-gen
0820        InstructionCall: line: 'commitBuffer()'
0820      <-Source: line: 'commitBuffer()'
0820     <--With: line: 'cursor.commitBuffer()'
0820    <---Source: line: 'cursor.commitBuffer()'
0820   <----Function: line: 'cursor.commitBuffer()'
0820  <-----Source: line: 'cursor.commitBuffer()'
0820 <------Class: line: 'cursor.commitBuffer()'
0820<-------Source: line: 'cursor.commitBuffer()'
0821       InstructionCall: end-gen
0821      Source: end-gen
0821      With: line: ' #WITH_END'
0821    <-Source: line: ' #WITH_END'
0821   <--Function: line: ' #WITH_END'
0821  <---Source: line: ' #WITH_END'
0821 <----Class: line: ' #WITH_END'
0821<-----Source: line: ' #WITH_END'
0822     With: end-gen
0822     Delete: begin-gen
0822      Delete: expr: 'del'
0822    <-Source: expr: 'del'
0822   <--Function: expr: 'del'
0822  <---Source: expr: 'del'
0822 <----Class: expr: 'del'
0822<-----Source: expr: 'del'
0823      Identifier: begin-gen
0823       Identifier: expr: 'cursor'
0823     <-Delete: expr: 'cursor'
0823    <--Source: expr: 'cursor'
0823   <---Function: expr: 'cursor'
0823  <----Source: expr: 'cursor'
0823 <-----Class: expr: 'cursor'
0823<------Source: expr: 'cursor'
0824      Identifier: end-gen
0824     Delete: end-gen
0824     InstructionCall: begin-gen
0824      Member: begin-gen
0824       Identifier: begin-gen
0824        Identifier: expr: 'self'
0824       Identifier: end-gen
0824       Identifier: begin-gen
0824        Identifier: expr: 'iface'
0824       Identifier: end-gen
0824       FunctionCall: begin-gen
0824        Value: begin-gen
0824         Identifier: begin-gen
0824          Identifier: expr: 'codEjercicio'
0824        <-Value: expr: 'codEjercicio'
0824         Identifier: end-gen
0824        Value: end-gen
0824        FunctionCall: expr: 'cambiarEjercicioActual(codEjercicio)'
0824       FunctionCall: end-gen
0824       Member: expr: 'self.iface.cambiarEjercicioActual(codEjercicio)'
0824      Member: end-gen
0824      InstructionCall: line: 'self.iface.cambiarEjercicioActual(codEjercicio)'
0824    <-Source: line: 'self.iface.cambiarEjercicioActual(codEjercicio)'
0824   <--Function: line: 'self.iface.cambiarEjercicioActual(codEjercicio)'
0824  <---Source: line: 'self.iface.cambiarEjercicioActual(codEjercicio)'
0824 <----Class: line: 'self.iface.cambiarEjercicioActual(codEjercicio)'
0824<-----Source: line: 'self.iface.cambiarEjercicioActual(codEjercicio)'
0825     InstructionCall: end-gen
0825     InstructionUpdate: begin-gen
0825      Identifier: begin-gen
0825       Identifier: expr: 'cursor'
0825      Identifier: end-gen
0825      OpUpdate: begin-gen
0825       OpUpdate: expr: '='
0825      OpUpdate: end-gen
0825      Value: begin-gen
0825       New: begin-gen
0825        FunctionCall: begin-gen
0825         Value: begin-gen
0825          Constant: begin-gen
0825           Constant: ctype: 'String' -> 'series'
0825           Constant: expr: 'u"series"'
0825         <-Value: expr: 'u"series"'
0825          Constant: end-gen
0825         Value: end-gen
0825         FunctionCall: expr: 'FLSqlCursor(u"series")'
0825       <-New: expr: 'qsatype.FLSqlCursor(u"series")'
0825      <--Value: expr: 'qsatype.FLSqlCursor(u"series")'
0825        FunctionCall: end-gen
0825       New: end-gen
0825      Value: end-gen
0825      InstructionUpdate: line: 'cursor = qsatype.FLSqlCursor(u"series")'
0825    <-Source: line: 'cursor = qsatype.FLSqlCursor(u"series")'
0825   <--Function: line: 'cursor = qsatype.FLSqlCursor(u"series")'
0825  <---Source: line: 'cursor = qsatype.FLSqlCursor(u"series")'
0825 <----Class: line: 'cursor = qsatype.FLSqlCursor(u"series")'
0825<-----Source: line: 'cursor = qsatype.FLSqlCursor(u"series")'
0826     InstructionUpdate: end-gen
0826     With: begin-gen
0826      Identifier: begin-gen
0826       Identifier: expr: 'cursor'
0826      Identifier: end-gen
0826      With: line: ' #WITH_START'
0826    <-Source: line: ' #WITH_START'
0826   <--Function: line: ' #WITH_START'
0826  <---Source: line: ' #WITH_START'
0826 <----Class: line: ' #WITH_START'
0826<-----Source: line: ' #WITH_START'
0827      Source: begin-gen
0827       InstructionCall: begin-gen
0827        FunctionCall: begin-gen
0827         Value: begin-gen
0827          Member: begin-gen
0827           Identifier: begin-gen
0827            Identifier: expr: 'cursor'
0827           Identifier: end-gen
0827           Identifier: begin-gen
0827            Identifier: expr: 'Insert'
0827           Identifier: end-gen
0827           Member: expr: 'cursor.Insert'
0827         <-Value: expr: 'cursor.Insert'
0827          Member: end-gen
0827         Value: end-gen
0827         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0827        FunctionCall: end-gen
0827        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0827      <-Source: line: 'setModeAccess(cursor.Insert)'
0827     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0827    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0827   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0827  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0827 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0827<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0828       InstructionCall: end-gen
0828       InstructionCall: begin-gen
0828        FunctionCall: begin-gen
0828         FunctionCall: expr: 'refreshBuffer()'
0828        FunctionCall: end-gen
0828        InstructionCall: line: 'refreshBuffer()'
0828      <-Source: line: 'refreshBuffer()'
0828     <--With: line: 'cursor.refreshBuffer()'
0828    <---Source: line: 'cursor.refreshBuffer()'
0828   <----Function: line: 'cursor.refreshBuffer()'
0828  <-----Source: line: 'cursor.refreshBuffer()'
0828 <------Class: line: 'cursor.refreshBuffer()'
0828<-------Source: line: 'cursor.refreshBuffer()'
0829       InstructionCall: end-gen
0829       InstructionCall: begin-gen
0829        FunctionCall: begin-gen
0829         Value: begin-gen
0829          Constant: begin-gen
0829           Constant: ctype: 'String' -> 'codserie'
0829           Constant: expr: 'u"codserie"'
0829         <-Value: expr: 'u"codserie"'
0829          Constant: end-gen
0829         Value: end-gen
0829         Value: begin-gen
0829          Constant: begin-gen
0829           Constant: ctype: 'String' -> 'A'
0829           Constant: expr: 'u"A"'
0829         <-Value: expr: 'u"A"'
0829          Constant: end-gen
0829         Value: end-gen
0829         FunctionCall: expr: 'setValueBuffer(u"codserie", u"A")'
0829        FunctionCall: end-gen
0829        InstructionCall: line: 'setValueBuffer(u"codserie", u"A")'
0829      <-Source: line: 'setValueBuffer(u"codserie", u"A")'
0829     <--With: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0829    <---Source: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0829   <----Function: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0829  <-----Source: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0829 <------Class: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0829<-------Source: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0830       InstructionCall: end-gen
0830       InstructionCall: begin-gen
0830        FunctionCall: begin-gen
0830         Value: begin-gen
0830          Constant: begin-gen
0830           Constant: ctype: 'String' -> 'descripcion'
0830           Constant: expr: 'u"descripcion"'
0830         <-Value: expr: 'u"descripcion"'
0830          Constant: end-gen
0830         Value: end-gen
0830         Value: begin-gen
0830          Constant: begin-gen
0830           Constant: ctype: 'String' -> 'SERIE A'
0830           Constant: expr: 'u"SERIE A"'
0830         <-Value: expr: 'u"SERIE A"'
0830          Constant: end-gen
0830         Value: end-gen
0830         FunctionCall: expr: 'setValueBuffer(u"descripcion", u"SERIE A")'
0830        FunctionCall: end-gen
0830        InstructionCall: line: 'setValueBuffer(u"descripcion", u"SERIE A")'
0830      <-Source: line: 'setValueBuffer(u"descripcion", u"SERIE A")'
0830     <--With: line: 'cursor.setValueBuffer(u"descripcion", u"SERIE A")'
0830    <---Source: line: 'cursor.setValueBuffer(u"descripcion", u"SERIE A")'
0830   <----Function: line: 'cursor.setValueBuffer(u"descripcion", u"SERIE A")'
0830  <-----Source: line: 'cursor.setValueBuffer(u"descripcion", u"SERIE A")'
0830 <------Class: line: 'cursor.setValueBuffer(u"descripcion", u"SERIE A")'
0830<-------Source: line: 'cursor.setValueBuffer(u"descripcion", u"SERIE A")'
0831       InstructionCall: end-gen
0831       InstructionCall: begin-gen
0831        FunctionCall: begin-gen
0831         FunctionCall: expr: 'commitBuffer()'
0831        FunctionCall: end-gen
0831        InstructionCall: line: 'commitBuffer()'
0831      <-Source: line: 'commitBuffer()'
0831     <--With: line: 'cursor.commitBuffer()'
0831    <---Source: line: 'cursor.commitBuffer()'
0831   <----Function: line: 'cursor.commitBuffer()'
0831  <-----Source: line: 'cursor.commitBuffer()'
0831 <------Class: line: 'cursor.commitBuffer()'
0831<-------Source: line: 'cursor.commitBuffer()'
0832       InstructionCall: end-gen
0832      Source: end-gen
0832      With: line: ' #WITH_END'
0832    <-Source: line: ' #WITH_END'
0832   <--Function: line: ' #WITH_END'
0832  <---Source: line: ' #WITH_END'
0832 <----Class: line: ' #WITH_END'
0832<-----Source: line: ' #WITH_END'
0833     With: end-gen
0833     Delete: begin-gen
0833      Delete: expr: 'del'
0833    <-Source: expr: 'del'
0833   <--Function: expr: 'del'
0833  <---Source: expr: 'del'
0833 <----Class: expr: 'del'
0833<-----Source: expr: 'del'
0834      Identifier: begin-gen
0834       Identifier: expr: 'cursor'
0834     <-Delete: expr: 'cursor'
0834    <--Source: expr: 'cursor'
0834   <---Function: expr: 'cursor'
0834  <----Source: expr: 'cursor'
0834 <-----Class: expr: 'cursor'
0834<------Source: expr: 'cursor'
0835      Identifier: end-gen
0835     Delete: end-gen
0835     InstructionUpdate: begin-gen
0835      Identifier: begin-gen
0835       Identifier: expr: 'cursor'
0835      Identifier: end-gen
0835      OpUpdate: begin-gen
0835       OpUpdate: expr: '='
0835      OpUpdate: end-gen
0835      Value: begin-gen
0835       New: begin-gen
0835        FunctionCall: begin-gen
0835         Value: begin-gen
0835          Constant: begin-gen
0835           Constant: ctype: 'String' -> 'secuenciasejercicios'
0835           Constant: expr: 'u"secuenciasejercicios"'
0835         <-Value: expr: 'u"secuenciasejercicios"'
0835          Constant: end-gen
0835         Value: end-gen
0835         FunctionCall: expr: 'FLSqlCursor(u"secuenciasejercicios")'
0835       <-New: expr: 'qsatype.FLSqlCursor(u"secuenciasejercicios")'
0835      <--Value: expr: 'qsatype.FLSqlCursor(u"secuenciasejercicios")'
0835        FunctionCall: end-gen
0835       New: end-gen
0835      Value: end-gen
0835      InstructionUpdate: line: 'cursor = qsatype.FLSqlCursor(u"secuenciasejercicios")'
0835    <-Source: line: 'cursor = qsatype.FLSqlCursor(u"secuenciasejercicios")'
0835   <--Function: line: 'cursor = qsatype.FLSqlCursor(u"secuenciasejercicios")'
0835  <---Source: line: 'cursor = qsatype.FLSqlCursor(u"secuenciasejercicios")'
0835 <----Class: line: 'cursor = qsatype.FLSqlCursor(u"secuenciasejercicios")'
0835<-----Source: line: 'cursor = qsatype.FLSqlCursor(u"secuenciasejercicios")'
0836     InstructionUpdate: end-gen
0836     DeclarationBlock: begin-gen
0836      Variable: begin-gen
0836       Variable: expr: 'idSec'
0836       Variable: expr: '='
0836       Variable: expr: '0'
0836      Variable: end-gen
0836      DeclarationBlock: line: 'idSec = 0'
0836    <-Source: line: 'idSec = 0'
0836   <--Function: line: 'idSec = 0'
0836  <---Source: line: 'idSec = 0'
0836 <----Class: line: 'idSec = 0'
0836<-----Source: line: 'idSec = 0'
0837     DeclarationBlock: end-gen
0837     With: begin-gen
0837      Identifier: begin-gen
0837       Identifier: expr: 'cursor'
0837      Identifier: end-gen
0837      With: line: ' #WITH_START'
0837    <-Source: line: ' #WITH_START'
0837   <--Function: line: ' #WITH_START'
0837  <---Source: line: ' #WITH_START'
0837 <----Class: line: ' #WITH_START'
0837<-----Source: line: ' #WITH_START'
0838      Source: begin-gen
0838       InstructionCall: begin-gen
0838        FunctionCall: begin-gen
0838         Value: begin-gen
0838          Member: begin-gen
0838           Identifier: begin-gen
0838            Identifier: expr: 'cursor'
0838           Identifier: end-gen
0838           Identifier: begin-gen
0838            Identifier: expr: 'Insert'
0838           Identifier: end-gen
0838           Member: expr: 'cursor.Insert'
0838         <-Value: expr: 'cursor.Insert'
0838          Member: end-gen
0838         Value: end-gen
0838         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0838        FunctionCall: end-gen
0838        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0838      <-Source: line: 'setModeAccess(cursor.Insert)'
0838     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0838    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0838   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0838  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0838 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0838<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0839       InstructionCall: end-gen
0839       InstructionCall: begin-gen
0839        FunctionCall: begin-gen
0839         FunctionCall: expr: 'refreshBuffer()'
0839        FunctionCall: end-gen
0839        InstructionCall: line: 'refreshBuffer()'
0839      <-Source: line: 'refreshBuffer()'
0839     <--With: line: 'cursor.refreshBuffer()'
0839    <---Source: line: 'cursor.refreshBuffer()'
0839   <----Function: line: 'cursor.refreshBuffer()'
0839  <-----Source: line: 'cursor.refreshBuffer()'
0839 <------Class: line: 'cursor.refreshBuffer()'
0839<-------Source: line: 'cursor.refreshBuffer()'
0840       InstructionCall: end-gen
0840       InstructionCall: begin-gen
0840        FunctionCall: begin-gen
0840         Value: begin-gen
0840          Constant: begin-gen
0840           Constant: ctype: 'String' -> 'codserie'
0840           Constant: expr: 'u"codserie"'
0840         <-Value: expr: 'u"codserie"'
0840          Constant: end-gen
0840         Value: end-gen
0840         Value: begin-gen
0840          Constant: begin-gen
0840           Constant: ctype: 'String' -> 'A'
0840           Constant: expr: 'u"A"'
0840         <-Value: expr: 'u"A"'
0840          Constant: end-gen
0840         Value: end-gen
0840         FunctionCall: expr: 'setValueBuffer(u"codserie", u"A")'
0840        FunctionCall: end-gen
0840        InstructionCall: line: 'setValueBuffer(u"codserie", u"A")'
0840      <-Source: line: 'setValueBuffer(u"codserie", u"A")'
0840     <--With: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0840    <---Source: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0840   <----Function: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0840  <-----Source: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0840 <------Class: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0840<-------Source: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0841       InstructionCall: end-gen
0841       InstructionCall: begin-gen
0841        FunctionCall: begin-gen
0841         Value: begin-gen
0841          Constant: begin-gen
0841           Constant: ctype: 'String' -> 'codejercicio'
0841           Constant: expr: 'u"codejercicio"'
0841         <-Value: expr: 'u"codejercicio"'
0841          Constant: end-gen
0841         Value: end-gen
0841         Value: begin-gen
0841          Identifier: begin-gen
0841           Identifier: expr: 'codEjercicio'
0841         <-Value: expr: 'codEjercicio'
0841          Identifier: end-gen
0841         Value: end-gen
0841         FunctionCall: expr: 'setValueBuffer(u"codejercicio", codEjercicio)'
0841        FunctionCall: end-gen
0841        InstructionCall: line: 'setValueBuffer(u"codejercicio", codEjercicio)'
0841      <-Source: line: 'setValueBuffer(u"codejercicio", codEjercicio)'
0841     <--With: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0841    <---Source: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0841   <----Function: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0841  <-----Source: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0841 <------Class: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0841<-------Source: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0842       InstructionCall: end-gen
0842       InstructionUpdate: begin-gen
0842        Identifier: begin-gen
0842         Identifier: expr: 'idSec'
0842        Identifier: end-gen
0842        OpUpdate: begin-gen
0842         OpUpdate: expr: '='
0842        OpUpdate: end-gen
0842        Value: begin-gen
0842         FunctionCall: begin-gen
0842          Value: begin-gen
0842           Constant: begin-gen
0842            Constant: ctype: 'String' -> 'id'
0842            Constant: expr: 'u"id"'
0842          <-Value: expr: 'u"id"'
0842           Constant: end-gen
0842          Value: end-gen
0842          FunctionCall: expr: 'valueBuffer(u"id")'
0842        <-Value: expr: 'valueBuffer(u"id")'
0842         FunctionCall: end-gen
0842        Value: end-gen
0842        InstructionUpdate: line: 'idSec = valueBuffer(u"id")'
0842      <-Source: line: 'idSec = valueBuffer(u"id")'
0842     <--With: line: 'idSec = valueBuffer(u"id")'
0842    <---Source: line: 'idSec = valueBuffer(u"id")'
0842   <----Function: line: 'idSec = valueBuffer(u"id")'
0842  <-----Source: line: 'idSec = valueBuffer(u"id")'
0842 <------Class: line: 'idSec = valueBuffer(u"id")'
0842<-------Source: line: 'idSec = valueBuffer(u"id")'
0843       InstructionUpdate: end-gen
0843       InstructionCall: begin-gen
0843        FunctionCall: begin-gen
0843         FunctionCall: expr: 'commitBuffer()'
0843        FunctionCall: end-gen
0843        InstructionCall: line: 'commitBuffer()'
0843      <-Source: line: 'commitBuffer()'
0843     <--With: line: 'cursor.commitBuffer()'
0843    <---Source: line: 'cursor.commitBuffer()'
0843   <----Function: line: 'cursor.commitBuffer()'
0843  <-----Source: line: 'cursor.commitBuffer()'
0843 <------Class: line: 'cursor.commitBuffer()'
0843<-------Source: line: 'cursor.commitBuffer()'
0844       InstructionCall: end-gen
0844      Source: end-gen
0844      With: line: ' #WITH_END'
0844    <-Source: line: ' #WITH_END'
0844   <--Function: line: ' #WITH_END'
0844  <---Source: line: ' #WITH_END'
0844 <----Class: line: ' #WITH_END'
0844<-----Source: line: ' #WITH_END'
0845     With: end-gen
0845     Delete: begin-gen
0845      Delete: expr: 'del'
0845    <-Source: expr: 'del'
0845   <--Function: expr: 'del'
0845  <---Source: expr: 'del'
0845 <----Class: expr: 'del'
0845<-----Source: expr: 'del'
0846      Identifier: begin-gen
0846       Identifier: expr: 'cursor'
0846     <-Delete: expr: 'cursor'
0846    <--Source: expr: 'cursor'
0846   <---Function: expr: 'cursor'
0846  <----Source: expr: 'cursor'
0846 <-----Class: expr: 'cursor'
0846<------Source: expr: 'cursor'
0847      Identifier: end-gen
0847     Delete: end-gen
0847     InstructionUpdate: begin-gen
0847      Identifier: begin-gen
0847       Identifier: expr: 'cursor'
0847      Identifier: end-gen
0847      OpUpdate: begin-gen
0847       OpUpdate: expr: '='
0847      OpUpdate: end-gen
0847      Value: begin-gen
0847       New: begin-gen
0847        FunctionCall: begin-gen
0847         Value: begin-gen
0847          Constant: begin-gen
0847           Constant: ctype: 'String' -> 'secuencias'
0847           Constant: expr: 'u"secuencias"'
0847         <-Value: expr: 'u"secuencias"'
0847          Constant: end-gen
0847         Value: end-gen
0847         FunctionCall: expr: 'FLSqlCursor(u"secuencias")'
0847       <-New: expr: 'qsatype.FLSqlCursor(u"secuencias")'
0847      <--Value: expr: 'qsatype.FLSqlCursor(u"secuencias")'
0847        FunctionCall: end-gen
0847       New: end-gen
0847      Value: end-gen
0847      InstructionUpdate: line: 'cursor = qsatype.FLSqlCursor(u"secuencias")'
0847    <-Source: line: 'cursor = qsatype.FLSqlCursor(u"secuencias")'
0847   <--Function: line: 'cursor = qsatype.FLSqlCursor(u"secuencias")'
0847  <---Source: line: 'cursor = qsatype.FLSqlCursor(u"secuencias")'
0847 <----Class: line: 'cursor = qsatype.FLSqlCursor(u"secuencias")'
0847<-----Source: line: 'cursor = qsatype.FLSqlCursor(u"secuencias")'
0848     InstructionUpdate: end-gen
0848     With: begin-gen
0848      Identifier: begin-gen
0848       Identifier: expr: 'cursor'
0848      Identifier: end-gen
0848      With: line: ' #WITH_START'
0848    <-Source: line: ' #WITH_START'
0848   <--Function: line: ' #WITH_START'
0848  <---Source: line: ' #WITH_START'
0848 <----Class: line: ' #WITH_START'
0848<-----Source: line: ' #WITH_START'
0849      Source: begin-gen
0849       InstructionCall: begin-gen
0849        FunctionCall: begin-gen
0849         Value: begin-gen
0849          Member: begin-gen
0849           Identifier: begin-gen
0849            Identifier: expr: 'cursor'
0849           Identifier: end-gen
0849           Identifier: begin-gen
0849            Identifier: expr: 'Insert'
0849           Identifier: end-gen
0849           Member: expr: 'cursor.Insert'
0849         <-Value: expr: 'cursor.Insert'
0849          Member: end-gen
0849         Value: end-gen
0849         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0849        FunctionCall: end-gen
0849        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0849      <-Source: line: 'setModeAccess(cursor.Insert)'
0849     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0849    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0849   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0849  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0849 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0849<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0850       InstructionCall: end-gen
0850       InstructionCall: begin-gen
0850        FunctionCall: begin-gen
0850         FunctionCall: expr: 'refreshBuffer()'
0850        FunctionCall: end-gen
0850        InstructionCall: line: 'refreshBuffer()'
0850      <-Source: line: 'refreshBuffer()'
0850     <--With: line: 'cursor.refreshBuffer()'
0850    <---Source: line: 'cursor.refreshBuffer()'
0850   <----Function: line: 'cursor.refreshBuffer()'
0850  <-----Source: line: 'cursor.refreshBuffer()'
0850 <------Class: line: 'cursor.refreshBuffer()'
0850<-------Source: line: 'cursor.refreshBuffer()'
0851       InstructionCall: end-gen
0851       InstructionCall: begin-gen
0851        FunctionCall: begin-gen
0851         Value: begin-gen
0851          Constant: begin-gen
0851           Constant: ctype: 'String' -> 'id'
0851           Constant: expr: 'u"id"'
0851         <-Value: expr: 'u"id"'
0851          Constant: end-gen
0851         Value: end-gen
0851         Value: begin-gen
0851          Identifier: begin-gen
0851           Identifier: expr: 'idSec'
0851         <-Value: expr: 'idSec'
0851          Identifier: end-gen
0851         Value: end-gen
0851         FunctionCall: expr: 'setValueBuffer(u"id", idSec)'
0851        FunctionCall: end-gen
0851        InstructionCall: line: 'setValueBuffer(u"id", idSec)'
0851      <-Source: line: 'setValueBuffer(u"id", idSec)'
0851     <--With: line: 'cursor.setValueBuffer(u"id", idSec)'
0851    <---Source: line: 'cursor.setValueBuffer(u"id", idSec)'
0851   <----Function: line: 'cursor.setValueBuffer(u"id", idSec)'
0851  <-----Source: line: 'cursor.setValueBuffer(u"id", idSec)'
0851 <------Class: line: 'cursor.setValueBuffer(u"id", idSec)'
0851<-------Source: line: 'cursor.setValueBuffer(u"id", idSec)'
0852       InstructionCall: end-gen
0852       InstructionCall: begin-gen
0852        FunctionCall: begin-gen
0852         Value: begin-gen
0852          Constant: begin-gen
0852           Constant: ctype: 'String' -> 'nombre'
0852           Constant: expr: 'u"nombre"'
0852         <-Value: expr: 'u"nombre"'
0852          Constant: end-gen
0852         Value: end-gen
0852         Value: begin-gen
0852          Constant: begin-gen
0852           Constant: ctype: 'String' -> 'nfacturacli'
0852           Constant: expr: 'u"nfacturacli"'
0852         <-Value: expr: 'u"nfacturacli"'
0852          Constant: end-gen
0852         Value: end-gen
0852         FunctionCall: expr: 'setValueBuffer(u"nombre", u"nfacturacli")'
0852        FunctionCall: end-gen
0852        InstructionCall: line: 'setValueBuffer(u"nombre", u"nfacturacli")'
0852      <-Source: line: 'setValueBuffer(u"nombre", u"nfacturacli")'
0852     <--With: line: 'cursor.setValueBuffer(u"nombre", u"nfacturacli")'
0852    <---Source: line: 'cursor.setValueBuffer(u"nombre", u"nfacturacli")'
0852   <----Function: line: 'cursor.setValueBuffer(u"nombre", u"nfacturacli")'
0852  <-----Source: line: 'cursor.setValueBuffer(u"nombre", u"nfacturacli")'
0852 <------Class: line: 'cursor.setValueBuffer(u"nombre", u"nfacturacli")'
0852<-------Source: line: 'cursor.setValueBuffer(u"nombre", u"nfacturacli")'
0853       InstructionCall: end-gen
0853       InstructionCall: begin-gen
0853        FunctionCall: begin-gen
0853         Value: begin-gen
0853          Constant: begin-gen
0853           Constant: ctype: 'String' -> 'valor'
0853           Constant: expr: 'u"valor"'
0853         <-Value: expr: 'u"valor"'
0853          Constant: end-gen
0853         Value: end-gen
0853         Value: begin-gen
0853          Constant: begin-gen
0853           Constant: ctype: 'Number' -> '1'
0853           Constant: expr: '1'
0853         <-Value: expr: '1'
0853          Constant: end-gen
0853         Value: end-gen
0853         FunctionCall: expr: 'setValueBuffer(u"valor", 1)'
0853        FunctionCall: end-gen
0853        InstructionCall: line: 'setValueBuffer(u"valor", 1)'
0853      <-Source: line: 'setValueBuffer(u"valor", 1)'
0853     <--With: line: 'cursor.setValueBuffer(u"valor", 1)'
0853    <---Source: line: 'cursor.setValueBuffer(u"valor", 1)'
0853   <----Function: line: 'cursor.setValueBuffer(u"valor", 1)'
0853  <-----Source: line: 'cursor.setValueBuffer(u"valor", 1)'
0853 <------Class: line: 'cursor.setValueBuffer(u"valor", 1)'
0853<-------Source: line: 'cursor.setValueBuffer(u"valor", 1)'
0854       InstructionCall: end-gen
0854       InstructionCall: begin-gen
0854        FunctionCall: begin-gen
0854         FunctionCall: expr: 'commitBuffer()'
0854        FunctionCall: end-gen
0854        InstructionCall: line: 'commitBuffer()'
0854      <-Source: line: 'commitBuffer()'
0854     <--With: line: 'cursor.commitBuffer()'
0854    <---Source: line: 'cursor.commitBuffer()'
0854   <----Function: line: 'cursor.commitBuffer()'
0854  <-----Source: line: 'cursor.commitBuffer()'
0854 <------Class: line: 'cursor.commitBuffer()'
0854<-------Source: line: 'cursor.commitBuffer()'
0855       InstructionCall: end-gen
0855       InstructionCall: begin-gen
0855        FunctionCall: begin-gen
0855         Value: begin-gen
0855          Member: begin-gen
0855           Identifier: begin-gen
0855            Identifier: expr: 'cursor'
0855           Identifier: end-gen
0855           Identifier: begin-gen
0855            Identifier: expr: 'Insert'
0855           Identifier: end-gen
0855           Member: expr: 'cursor.Insert'
0855         <-Value: expr: 'cursor.Insert'
0855          Member: end-gen
0855         Value: end-gen
0855         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0855        FunctionCall: end-gen
0855        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0855      <-Source: line: 'setModeAccess(cursor.Insert)'
0855     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0855    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0855   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0855  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0855 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0855<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0856       InstructionCall: end-gen
0856       InstructionCall: begin-gen
0856        FunctionCall: begin-gen
0856         FunctionCall: expr: 'refreshBuffer()'
0856        FunctionCall: end-gen
0856        InstructionCall: line: 'refreshBuffer()'
0856      <-Source: line: 'refreshBuffer()'
0856     <--With: line: 'cursor.refreshBuffer()'
0856    <---Source: line: 'cursor.refreshBuffer()'
0856   <----Function: line: 'cursor.refreshBuffer()'
0856  <-----Source: line: 'cursor.refreshBuffer()'
0856 <------Class: line: 'cursor.refreshBuffer()'
0856<-------Source: line: 'cursor.refreshBuffer()'
0857       InstructionCall: end-gen
0857       InstructionCall: begin-gen
0857        FunctionCall: begin-gen
0857         Value: begin-gen
0857          Constant: begin-gen
0857           Constant: ctype: 'String' -> 'id'
0857           Constant: expr: 'u"id"'
0857         <-Value: expr: 'u"id"'
0857          Constant: end-gen
0857         Value: end-gen
0857         Value: begin-gen
0857          Identifier: begin-gen
0857           Identifier: expr: 'idSec'
0857         <-Value: expr: 'idSec'
0857          Identifier: end-gen
0857         Value: end-gen
0857         FunctionCall: expr: 'setValueBuffer(u"id", idSec)'
0857        FunctionCall: end-gen
0857        InstructionCall: line: 'setValueBuffer(u"id", idSec)'
0857      <-Source: line: 'setValueBuffer(u"id", idSec)'
0857     <--With: line: 'cursor.setValueBuffer(u"id", idSec)'
0857    <---Source: line: 'cursor.setValueBuffer(u"id", idSec)'
0857   <----Function: line: 'cursor.setValueBuffer(u"id", idSec)'
0857  <-----Source: line: 'cursor.setValueBuffer(u"id", idSec)'
0857 <------Class: line: 'cursor.setValueBuffer(u"id", idSec)'
0857<-------Source: line: 'cursor.setValueBuffer(u"id", idSec)'
0858       InstructionCall: end-gen
0858       InstructionCall: begin-gen
0858        FunctionCall: begin-gen
0858         Value: begin-gen
0858          Constant: begin-gen
0858           Constant: ctype: 'String' -> 'nombre'
0858           Constant: expr: 'u"nombre"'
0858         <-Value: expr: 'u"nombre"'
0858          Constant: end-gen
0858         Value: end-gen
0858         Value: begin-gen
0858          Constant: begin-gen
0858           Constant: ctype: 'String' -> 'nfacturaprov'
0858           Constant: expr: 'u"nfacturaprov"'
0858         <-Value: expr: 'u"nfacturaprov"'
0858          Constant: end-gen
0858         Value: end-gen
0858         FunctionCall: expr: 'setValueBuffer(u"nombre", u"nfacturaprov")'
0858        FunctionCall: end-gen
0858        InstructionCall: line: 'setValueBuffer(u"nombre", u"nfacturaprov")'
0858      <-Source: line: 'setValueBuffer(u"nombre", u"nfacturaprov")'
0858     <--With: line: 'cursor.setValueBuffer(u"nombre", u"nfacturaprov")'
0858    <---Source: line: 'cursor.setValueBuffer(u"nombre", u"nfacturaprov")'
0858   <----Function: line: 'cursor.setValueBuffer(u"nombre", u"nfacturaprov")'
0858  <-----Source: line: 'cursor.setValueBuffer(u"nombre", u"nfacturaprov")'
0858 <------Class: line: 'cursor.setValueBuffer(u"nombre", u"nfacturaprov")'
0858<-------Source: line: 'cursor.setValueBuffer(u"nombre", u"nfacturaprov")'
0859       InstructionCall: end-gen
0859       InstructionCall: begin-gen
0859        FunctionCall: begin-gen
0859         Value: begin-gen
0859          Constant: begin-gen
0859           Constant: ctype: 'String' -> 'valor'
0859           Constant: expr: 'u"valor"'
0859         <-Value: expr: 'u"valor"'
0859          Constant: end-gen
0859         Value: end-gen
0859         Value: begin-gen
0859          Constant: begin-gen
0859           Constant: ctype: 'Number' -> '1'
0859           Constant: expr: '1'
0859         <-Value: expr: '1'
0859          Constant: end-gen
0859         Value: end-gen
0859         FunctionCall: expr: 'setValueBuffer(u"valor", 1)'
0859        FunctionCall: end-gen
0859        InstructionCall: line: 'setValueBuffer(u"valor", 1)'
0859      <-Source: line: 'setValueBuffer(u"valor", 1)'
0859     <--With: line: 'cursor.setValueBuffer(u"valor", 1)'
0859    <---Source: line: 'cursor.setValueBuffer(u"valor", 1)'
0859   <----Function: line: 'cursor.setValueBuffer(u"valor", 1)'
0859  <-----Source: line: 'cursor.setValueBuffer(u"valor", 1)'
0859 <------Class: line: 'cursor.setValueBuffer(u"valor", 1)'
0859<-------Source: line: 'cursor.setValueBuffer(u"valor", 1)'
0860       InstructionCall: end-gen
0860       InstructionCall: begin-gen
0860        FunctionCall: begin-gen
0860         FunctionCall: expr: 'commitBuffer()'
0860        FunctionCall: end-gen
0860        InstructionCall: line: 'commitBuffer()'
0860      <-Source: line: 'commitBuffer()'
0860     <--With: line: 'cursor.commitBuffer()'
0860    <---Source: line: 'cursor.commitBuffer()'
0860   <----Function: line: 'cursor.commitBuffer()'
0860  <-----Source: line: 'cursor.commitBuffer()'
0860 <------Class: line: 'cursor.commitBuffer()'
0860<-------Source: line: 'cursor.commitBuffer()'
0861       InstructionCall: end-gen
0861      Source: end-gen
0861      With: line: ' #WITH_END'
0861    <-Source: line: ' #WITH_END'
0861   <--Function: line: ' #WITH_END'
0861  <---Source: line: ' #WITH_END'
0861 <----Class: line: ' #WITH_END'
0861<-----Source: line: ' #WITH_END'
0862     With: end-gen
0862     Delete: begin-gen
0862      Delete: expr: 'del'
0862    <-Source: expr: 'del'
0862   <--Function: expr: 'del'
0862  <---Source: expr: 'del'
0862 <----Class: expr: 'del'
0862<-----Source: expr: 'del'
0863      Identifier: begin-gen
0863       Identifier: expr: 'cursor'
0863     <-Delete: expr: 'cursor'
0863    <--Source: expr: 'cursor'
0863   <---Function: expr: 'cursor'
0863  <----Source: expr: 'cursor'
0863 <-----Class: expr: 'cursor'
0863<------Source: expr: 'cursor'
0864      Identifier: end-gen
0864     Delete: end-gen
0864     InstructionUpdate: begin-gen
0864      Identifier: begin-gen
0864       Identifier: expr: 'cursor'
0864      Identifier: end-gen
0864      OpUpdate: begin-gen
0864       OpUpdate: expr: '='
0864      OpUpdate: end-gen
0864      Value: begin-gen
0864       New: begin-gen
0864        FunctionCall: begin-gen
0864         Value: begin-gen
0864          Constant: begin-gen
0864           Constant: ctype: 'String' -> 'empresa'
0864           Constant: expr: 'u"empresa"'
0864         <-Value: expr: 'u"empresa"'
0864          Constant: end-gen
0864         Value: end-gen
0864         FunctionCall: expr: 'FLSqlCursor(u"empresa")'
0864       <-New: expr: 'qsatype.FLSqlCursor(u"empresa")'
0864      <--Value: expr: 'qsatype.FLSqlCursor(u"empresa")'
0864        FunctionCall: end-gen
0864       New: end-gen
0864      Value: end-gen
0864      InstructionUpdate: line: 'cursor = qsatype.FLSqlCursor(u"empresa")'
0864    <-Source: line: 'cursor = qsatype.FLSqlCursor(u"empresa")'
0864   <--Function: line: 'cursor = qsatype.FLSqlCursor(u"empresa")'
0864  <---Source: line: 'cursor = qsatype.FLSqlCursor(u"empresa")'
0864 <----Class: line: 'cursor = qsatype.FLSqlCursor(u"empresa")'
0864<-----Source: line: 'cursor = qsatype.FLSqlCursor(u"empresa")'
0865     InstructionUpdate: end-gen
0865     InstructionCall: begin-gen
0865      Member: begin-gen
0865       Identifier: begin-gen
0865        Identifier: expr: 'cursor'
0865       Identifier: end-gen
0865       FunctionCall: begin-gen
0865        Value: begin-gen
0865         Identifier: begin-gen
0865          Identifier: expr: 'False'
0865        <-Value: expr: 'False'
0865         Identifier: end-gen
0865        Value: end-gen
0865        FunctionCall: expr: 'setActivatedCheckIntegrity(False)'
0865       FunctionCall: end-gen
0865       Member: expr: 'cursor.setActivatedCheckIntegrity(False)'
0865      Member: end-gen
0865      InstructionCall: line: 'cursor.setActivatedCheckIntegrity(False)'
0865    <-Source: line: 'cursor.setActivatedCheckIntegrity(False)'
0865   <--Function: line: 'cursor.setActivatedCheckIntegrity(False)'
0865  <---Source: line: 'cursor.setActivatedCheckIntegrity(False)'
0865 <----Class: line: 'cursor.setActivatedCheckIntegrity(False)'
0865<-----Source: line: 'cursor.setActivatedCheckIntegrity(False)'
0866     InstructionCall: end-gen
0866     DeclarationBlock: begin-gen
0866      Variable: begin-gen
0866       Variable: expr: 'milogo'
0866       Variable: expr: '='
0866       Value: begin-gen
0866        Constant: begin-gen
0866         Constant: ctype: 'String' -> ''
0866         Constant: expr: 'u""'
0866       <-Value: expr: 'u""'
0866      <--Variable: expr: 'u""'
0866        Constant: end-gen
0866       Value: end-gen
0866      Variable: end-gen
0866      DeclarationBlock: line: 'milogo = u""'
0866    <-Source: line: 'milogo = u""'
0866   <--Function: line: 'milogo = u""'
0866  <---Source: line: 'milogo = u""'
0866 <----Class: line: 'milogo = u""'
0866<-----Source: line: 'milogo = u""'
0867     DeclarationBlock: end-gen
0867     InstructionUpdate: begin-gen
0867      Identifier: begin-gen
0867       Identifier: expr: 'milogo'
0867      Identifier: end-gen
0867      OpUpdate: begin-gen
0867       OpUpdate: expr: '+='
0867      OpUpdate: end-gen
0867      Value: begin-gen
0867       Constant: begin-gen
0867        Constant: ctype: 'String' -> '/* XPM */\\n'
0867        Constant: expr: "u'/* XPM */\\n'"
0867      <-Value: expr: "u'/* XPM */\\n'"
0867       Constant: end-gen
0867      Value: end-gen
0867      InstructionUpdate: line: "milogo += u'/* XPM */\\n'"
0867    <-Source: line: "milogo += u'/* XPM */\\n'"
0867   <--Function: line: "milogo += u'/* XPM */\\n'"
0867  <---Source: line: "milogo += u'/* XPM */\\n'"
0867 <----Class: line: "milogo += u'/* XPM */\\n'"
0867<-----Source: line: "milogo += u'/* XPM */\\n'"
0868     InstructionUpdate: end-gen
0868     InstructionUpdate: begin-gen
0868      Identifier: begin-gen
0868       Identifier: expr: 'milogo'
0868      Identifier: end-gen
0868      OpUpdate: begin-gen
0868       OpUpdate: expr: '+='
0868      OpUpdate: end-gen
0868      Value: begin-gen
0868       Constant: begin-gen
0868        Constant: ctype: 'String' -> 'static char * logo_xpm[] = {\\n'
0868        Constant: expr: "u'static char * logo_xpm[] = {\\n'"
0868      <-Value: expr: "u'static char * logo_xpm[] = {\\n'"
0868       Constant: end-gen
0868      Value: end-gen
0868      InstructionUpdate: line: "milogo += u'static char * logo_xpm[] = {\\n'"
0868    <-Source: line: "milogo += u'static char * logo_xpm[] = {\\n'"
0868   <--Function: line: "milogo += u'static char * logo_xpm[] = {\\n'"
0868  <---Source: line: "milogo += u'static char * logo_xpm[] = {\\n'"
0868 <----Class: line: "milogo += u'static char * logo_xpm[] = {\\n'"
0868<-----Source: line: "milogo += u'static char * logo_xpm[] = {\\n'"
0869     InstructionUpdate: end-gen
0869     InstructionUpdate: begin-gen
0869      Identifier: begin-gen
0869       Identifier: expr: 'milogo'
0869      Identifier: end-gen
0869      OpUpdate: begin-gen
0869       OpUpdate: expr: '+='
0869      OpUpdate: end-gen
0869      Value: begin-gen
0869       Constant: begin-gen
0869        Constant: ctype: 'String' -> '"50 16 7 1",\\n'
0869        Constant: expr: 'u\'"50 16 7 1",\\n\''
0869      <-Value: expr: 'u\'"50 16 7 1",\\n\''
0869       Constant: end-gen
0869      Value: end-gen
0869      InstructionUpdate: line: 'milogo += u\'"50 16 7 1",\\n\''
0869    <-Source: line: 'milogo += u\'"50 16 7 1",\\n\''
0869   <--Function: line: 'milogo += u\'"50 16 7 1",\\n\''
0869  <---Source: line: 'milogo += u\'"50 16 7 1",\\n\''
0869 <----Class: line: 'milogo += u\'"50 16 7 1",\\n\''
0869<-----Source: line: 'milogo += u\'"50 16 7 1",\\n\''
0870     InstructionUpdate: end-gen
0870     InstructionUpdate: begin-gen
0870      Identifier: begin-gen
0870       Identifier: expr: 'milogo'
0870      Identifier: end-gen
0870      OpUpdate: begin-gen
0870       OpUpdate: expr: '+='
0870      OpUpdate: end-gen
0870      Value: begin-gen
0870       Constant: begin-gen
0870        Constant: ctype: 'String' -> '" \tc #1E00FF",\\n'
0870        Constant: expr: 'u\'" \tc #1E00FF",\\n\''
0870      <-Value: expr: 'u\'" \tc #1E00FF",\\n\''
0870       Constant: end-gen
0870      Value: end-gen
0870      InstructionUpdate: line: 'milogo += u\'" \tc #1E00FF",\\n\''
0870    <-Source: line: 'milogo += u\'" \tc #1E00FF",\\n\''
0870   <--Function: line: 'milogo += u\'" \tc #1E00FF",\\n\''
0870  <---Source: line: 'milogo += u\'" \tc #1E00FF",\\n\''
0870 <----Class: line: 'milogo += u\'" \tc #1E00FF",\\n\''
0870<-----Source: line: 'milogo += u\'" \tc #1E00FF",\\n\''
0871     InstructionUpdate: end-gen
0871     InstructionUpdate: begin-gen
0871      Identifier: begin-gen
0871       Identifier: expr: 'milogo'
0871      Identifier: end-gen
0871      OpUpdate: begin-gen
0871       OpUpdate: expr: '+='
0871      OpUpdate: end-gen
0871      Value: begin-gen
0871       Constant: begin-gen
0871        Constant: ctype: 'String' -> '".\tc #FF0000",\\n'
0871        Constant: expr: 'u\'".\tc #FF0000",\\n\''
0871      <-Value: expr: 'u\'".\tc #FF0000",\\n\''
0871       Constant: end-gen
0871      Value: end-gen
0871      InstructionUpdate: line: 'milogo += u\'".\tc #FF0000",\\n\''
0871    <-Source: line: 'milogo += u\'".\tc #FF0000",\\n\''
0871   <--Function: line: 'milogo += u\'".\tc #FF0000",\\n\''
0871  <---Source: line: 'milogo += u\'".\tc #FF0000",\\n\''
0871 <----Class: line: 'milogo += u\'".\tc #FF0000",\\n\''
0871<-----Source: line: 'milogo += u\'".\tc #FF0000",\\n\''
0872     InstructionUpdate: end-gen
0872     InstructionUpdate: begin-gen
0872      Identifier: begin-gen
0872       Identifier: expr: 'milogo'
0872      Identifier: end-gen
0872      OpUpdate: begin-gen
0872       OpUpdate: expr: '+='
0872      OpUpdate: end-gen
0872      Value: begin-gen
0872       Constant: begin-gen
0872        Constant: ctype: 'String' -> '"+\tc #FF00FF",\\n'
0872        Constant: expr: 'u\'"+\tc #FF00FF",\\n\''
0872      <-Value: expr: 'u\'"+\tc #FF00FF",\\n\''
0872       Constant: end-gen
0872      Value: end-gen
0872      InstructionUpdate: line: 'milogo += u\'"+\tc #FF00FF",\\n\''
0872    <-Source: line: 'milogo += u\'"+\tc #FF00FF",\\n\''
0872   <--Function: line: 'milogo += u\'"+\tc #FF00FF",\\n\''
0872  <---Source: line: 'milogo += u\'"+\tc #FF00FF",\\n\''
0872 <----Class: line: 'milogo += u\'"+\tc #FF00FF",\\n\''
0872<-----Source: line: 'milogo += u\'"+\tc #FF00FF",\\n\''
0873     InstructionUpdate: end-gen
0873     InstructionUpdate: begin-gen
0873      Identifier: begin-gen
0873       Identifier: expr: 'milogo'
0873      Identifier: end-gen
0873      OpUpdate: begin-gen
0873       OpUpdate: expr: '+='
0873      OpUpdate: end-gen
0873      Value: begin-gen
0873       Constant: begin-gen
0873        Constant: ctype: 'String' -> '"@\tc #18FF00",\\n'
0873        Constant: expr: 'u\'"@\tc #18FF00",\\n\''
0873      <-Value: expr: 'u\'"@\tc #18FF00",\\n\''
0873       Constant: end-gen
0873      Value: end-gen
0873      InstructionUpdate: line: 'milogo += u\'"@\tc #18FF00",\\n\''
0873    <-Source: line: 'milogo += u\'"@\tc #18FF00",\\n\''
0873   <--Function: line: 'milogo += u\'"@\tc #18FF00",\\n\''
0873  <---Source: line: 'milogo += u\'"@\tc #18FF00",\\n\''
0873 <----Class: line: 'milogo += u\'"@\tc #18FF00",\\n\''
0873<-----Source: line: 'milogo += u\'"@\tc #18FF00",\\n\''
0874     InstructionUpdate: end-gen
0874     InstructionUpdate: begin-gen
0874      Identifier: begin-gen
0874       Identifier: expr: 'milogo'
0874      Identifier: end-gen
0874      OpUpdate: begin-gen
0874       OpUpdate: expr: '+='
0874      OpUpdate: end-gen
0874      Value: begin-gen
0874       Constant: begin-gen
0874        Constant: ctype: 'String' -> '"#\tc #33FFFF",\\n'
0874        Constant: expr: 'u\'"#\tc #33FFFF",\\n\''
0874      <-Value: expr: 'u\'"#\tc #33FFFF",\\n\''
0874       Constant: end-gen
0874      Value: end-gen
0874      InstructionUpdate: line: 'milogo += u\'"#\tc #33FFFF",\\n\''
0874    <-Source: line: 'milogo += u\'"#\tc #33FFFF",\\n\''
0874   <--Function: line: 'milogo += u\'"#\tc #33FFFF",\\n\''
0874  <---Source: line: 'milogo += u\'"#\tc #33FFFF",\\n\''
0874 <----Class: line: 'milogo += u\'"#\tc #33FFFF",\\n\''
0874<-----Source: line: 'milogo += u\'"#\tc #33FFFF",\\n\''
0875     InstructionUpdate: end-gen
0875     InstructionUpdate: begin-gen
0875      Identifier: begin-gen
0875       Identifier: expr: 'milogo'
0875      Identifier: end-gen
0875      OpUpdate: begin-gen
0875       OpUpdate: expr: '+='
0875      OpUpdate: end-gen
0875      Value: begin-gen
0875       Constant: begin-gen
0875        Constant: ctype: 'String' -> '"$\tc #FFFF00",\\n'
0875        Constant: expr: 'u\'"$\tc #FFFF00",\\n\''
0875      <-Value: expr: 'u\'"$\tc #FFFF00",\\n\''
0875       Constant: end-gen
0875      Value: end-gen
0875      InstructionUpdate: line: 'milogo += u\'"$\tc #FFFF00",\\n\''
0875    <-Source: line: 'milogo += u\'"$\tc #FFFF00",\\n\''
0875   <--Function: line: 'milogo += u\'"$\tc #FFFF00",\\n\''
0875  <---Source: line: 'milogo += u\'"$\tc #FFFF00",\\n\''
0875 <----Class: line: 'milogo += u\'"$\tc #FFFF00",\\n\''
0875<-----Source: line: 'milogo += u\'"$\tc #FFFF00",\\n\''
0876     InstructionUpdate: end-gen
0876     InstructionUpdate: begin-gen
0876      Identifier: begin-gen
0876       Identifier: expr: 'milogo'
0876      Identifier: end-gen
0876      OpUpdate: begin-gen
0876       OpUpdate: expr: '+='
0876      OpUpdate: end-gen
0876      Value: begin-gen
0876       Constant: begin-gen
0876        Constant: ctype: 'String' -> '"%\tc #FFFFFF",\\n'
0876        Constant: expr: 'u\'"%\tc #FFFFFF",\\n\''
0876      <-Value: expr: 'u\'"%\tc #FFFFFF",\\n\''
0876       Constant: end-gen
0876      Value: end-gen
0876      InstructionUpdate: line: 'milogo += u\'"%\tc #FFFFFF",\\n\''
0876    <-Source: line: 'milogo += u\'"%\tc #FFFFFF",\\n\''
0876   <--Function: line: 'milogo += u\'"%\tc #FFFFFF",\\n\''
0876  <---Source: line: 'milogo += u\'"%\tc #FFFFFF",\\n\''
0876 <----Class: line: 'milogo += u\'"%\tc #FFFFFF",\\n\''
0876<-----Source: line: 'milogo += u\'"%\tc #FFFFFF",\\n\''
0877     InstructionUpdate: end-gen
0877     InstructionUpdate: begin-gen
0877      Identifier: begin-gen
0877       Identifier: expr: 'milogo'
0877      Identifier: end-gen
0877      OpUpdate: begin-gen
0877       OpUpdate: expr: '+='
0877      OpUpdate: end-gen
0877      Value: begin-gen
0877       Constant: begin-gen
0877        Constant: ctype: 'String' -> '"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n'
0877        Constant: expr: 'u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0877      <-Value: expr: 'u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0877       Constant: end-gen
0877      Value: end-gen
0877      InstructionUpdate: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0877    <-Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0877   <--Function: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0877  <---Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0877 <----Class: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0877<-----Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0878     InstructionUpdate: end-gen
0878     InstructionUpdate: begin-gen
0878      Identifier: begin-gen
0878       Identifier: expr: 'milogo'
0878      Identifier: end-gen
0878      OpUpdate: begin-gen
0878       OpUpdate: expr: '+='
0878      OpUpdate: end-gen
0878      Value: begin-gen
0878       Constant: begin-gen
0878        Constant: ctype: 'String' -> '"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n'
0878        Constant: expr: 'u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0878      <-Value: expr: 'u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0878       Constant: end-gen
0878      Value: end-gen
0878      InstructionUpdate: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0878    <-Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0878   <--Function: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0878  <---Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0878 <----Class: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0878<-----Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0879     InstructionUpdate: end-gen
0879     InstructionUpdate: begin-gen
0879      Identifier: begin-gen
0879       Identifier: expr: 'milogo'
0879      Identifier: end-gen
0879      OpUpdate: begin-gen
0879       OpUpdate: expr: '+='
0879      OpUpdate: end-gen
0879      Value: begin-gen
0879       Constant: begin-gen
0879        Constant: ctype: 'String' -> '"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n'
0879        Constant: expr: 'u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0879      <-Value: expr: 'u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0879       Constant: end-gen
0879      Value: end-gen
0879      InstructionUpdate: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0879    <-Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0879   <--Function: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0879  <---Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0879 <----Class: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0879<-----Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0880     InstructionUpdate: end-gen
0880     InstructionUpdate: begin-gen
0880      Identifier: begin-gen
0880       Identifier: expr: 'milogo'
0880      Identifier: end-gen
0880      OpUpdate: begin-gen
0880       OpUpdate: expr: '+='
0880      OpUpdate: end-gen
0880      Value: begin-gen
0880       Constant: begin-gen
0880        Constant: ctype: 'String' -> '"%%$%%%%%%%%%%%%%%%%%%%%%%%%%% %%% %%%%%%%%%%%%%%%%",\\n'
0880        Constant: expr: 'u\'"%%$%%%%%%%%%%%%%%%%%%%%%%%%%% %%% %%%%%%%%%%%%%%%%",\\n\''
0880      <-Value: expr: 'u\'"%%$%%%%%%%%%%%%%%%%%%%%%%%%%% %%% %%%%%%%%%%%%%%%%",\\n\''
0880       Constant: end-gen
0880      Value: end-gen
0880      InstructionUpdate: line: 'milogo += u\'"%%$%%%%%%%%%%%%%%%%%%%%%%%%%% %%% %%%%%%%%%%%%%%%%",\\n\''
0880    <-Source: line: 'milogo += u\'"%%$%%%%%%%%%%%%%%%%%%%%%%%%%% %%% %%%%%%%%%%%%%%%%",\\n\''
0880   <--Function: line: 'milogo += u\'"%%$%%%%%%%%%%%%%%%%%%%%%%%%%% %%% %%%%%%%%%%%%%%%%",\\n\''
0880  <---Source: line: 'milogo += u\'"%%$%%%%%%%%%%%%%%%%%%%%%%%%%% %%% %%%%%%%%%%%%%%%%",\\n\''
0880 <----Class: line: 'milogo += u\'"%%$%%%%%%%%%%%%%%%%%%%%%%%%%% %%% %%%%%%%%%%%%%%%%",\\n\''
0880<-----Source: line: 'milogo += u\'"%%$%%%%%%%%%%%%%%%%%%%%%%%%%% %%% %%%%%%%%%%%%%%%%",\\n\''
0881     InstructionUpdate: end-gen
0881     InstructionUpdate: begin-gen
0881      Identifier: begin-gen
0881       Identifier: expr: 'milogo'
0881      Identifier: end-gen
0881      OpUpdate: begin-gen
0881       OpUpdate: expr: '+='
0881      OpUpdate: end-gen
0881      Value: begin-gen
0881       Constant: begin-gen
0881        Constant: ctype: 'String' -> '"%%.%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%",\\n'
0881        Constant: expr: 'u\'"%%.%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%",\\n\''
0881      <-Value: expr: 'u\'"%%.%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%",\\n\''
0881       Constant: end-gen
0881      Value: end-gen
0881      InstructionUpdate: line: 'milogo += u\'"%%.%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%",\\n\''
0881    <-Source: line: 'milogo += u\'"%%.%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%",\\n\''
0881   <--Function: line: 'milogo += u\'"%%.%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%",\\n\''
0881  <---Source: line: 'milogo += u\'"%%.%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%",\\n\''
0881 <----Class: line: 'milogo += u\'"%%.%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%",\\n\''
0881<-----Source: line: 'milogo += u\'"%%.%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%",\\n\''
0882     InstructionUpdate: end-gen
0882     InstructionUpdate: begin-gen
0882      Identifier: begin-gen
0882       Identifier: expr: 'milogo'
0882      Identifier: end-gen
0882      OpUpdate: begin-gen
0882       OpUpdate: expr: '+='
0882      OpUpdate: end-gen
0882      Value: begin-gen
0882       Constant: begin-gen
0882        Constant: ctype: 'String' -> '"%%.%%%%%%@@@%%%@@@@@%%%   %%    % %%   ++%%%...%%%",\\n'
0882        Constant: expr: 'u\'"%%.%%%%%%@@@%%%@@@@@%%%   %%    % %%   ++%%%...%%%",\\n\''
0882      <-Value: expr: 'u\'"%%.%%%%%%@@@%%%@@@@@%%%   %%    % %%   ++%%%...%%%",\\n\''
0882       Constant: end-gen
0882      Value: end-gen
0882      InstructionUpdate: line: 'milogo += u\'"%%.%%%%%%@@@%%%@@@@@%%%   %%    % %%   ++%%%...%%%",\\n\''
0882    <-Source: line: 'milogo += u\'"%%.%%%%%%@@@%%%@@@@@%%%   %%    % %%   ++%%%...%%%",\\n\''
0882   <--Function: line: 'milogo += u\'"%%.%%%%%%@@@%%%@@@@@%%%   %%    % %%   ++%%%...%%%",\\n\''
0882  <---Source: line: 'milogo += u\'"%%.%%%%%%@@@%%%@@@@@%%%   %%    % %%   ++%%%...%%%",\\n\''
0882 <----Class: line: 'milogo += u\'"%%.%%%%%%@@@%%%@@@@@%%%   %%    % %%   ++%%%...%%%",\\n\''
0882<-----Source: line: 'milogo += u\'"%%.%%%%%%@@@%%%@@@@@%%%   %%    % %%   ++%%%...%%%",\\n\''
0883     InstructionUpdate: end-gen
0883     InstructionUpdate: begin-gen
0883      Identifier: begin-gen
0883       Identifier: expr: 'milogo'
0883      Identifier: end-gen
0883      OpUpdate: begin-gen
0883       OpUpdate: expr: '+='
0883      OpUpdate: end-gen
0883      Value: begin-gen
0883       Constant: begin-gen
0883        Constant: ctype: 'String' -> '"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%%+%%.%%%.%%",\\n'
0883        Constant: expr: 'u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%%+%%.%%%.%%",\\n\''
0883      <-Value: expr: 'u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%%+%%.%%%.%%",\\n\''
0883       Constant: end-gen
0883      Value: end-gen
0883      InstructionUpdate: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%%+%%.%%%.%%",\\n\''
0883    <-Source: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%%+%%.%%%.%%",\\n\''
0883   <--Function: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%%+%%.%%%.%%",\\n\''
0883  <---Source: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%%+%%.%%%.%%",\\n\''
0883 <----Class: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%%+%%.%%%.%%",\\n\''
0883<-----Source: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%%+%%.%%%.%%",\\n\''
0884     InstructionUpdate: end-gen
0884     InstructionUpdate: begin-gen
0884      Identifier: begin-gen
0884       Identifier: expr: 'milogo'
0884      Identifier: end-gen
0884      OpUpdate: begin-gen
0884       OpUpdate: expr: '+='
0884      OpUpdate: end-gen
0884      Value: begin-gen
0884       Constant: begin-gen
0884        Constant: ctype: 'String' -> '"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%% %%+%%%.%%",\\n'
0884        Constant: expr: 'u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%% %%+%%%.%%",\\n\''
0884      <-Value: expr: 'u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%% %%+%%%.%%",\\n\''
0884       Constant: end-gen
0884      Value: end-gen
0884      InstructionUpdate: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%% %%+%%%.%%",\\n\''
0884    <-Source: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%% %%+%%%.%%",\\n\''
0884   <--Function: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%% %%+%%%.%%",\\n\''
0884  <---Source: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%% %%+%%%.%%",\\n\''
0884 <----Class: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%% %%+%%%.%%",\\n\''
0884<-----Source: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%% %%+%%%.%%",\\n\''
0885     InstructionUpdate: end-gen
0885     InstructionUpdate: begin-gen
0885      Identifier: begin-gen
0885       Identifier: expr: 'milogo'
0885      Identifier: end-gen
0885      OpUpdate: begin-gen
0885       OpUpdate: expr: '+='
0885      OpUpdate: end-gen
0885      Value: begin-gen
0885       Constant: begin-gen
0885        Constant: ctype: 'String' -> '"%%.%%%%%$%%%@%%@%%%@%%@%%%#%% %%% %% %%% %%+%%%.%%",\\n'
0885        Constant: expr: 'u\'"%%.%%%%%$%%%@%%@%%%@%%@%%%#%% %%% %% %%% %%+%%%.%%",\\n\''
0885      <-Value: expr: 'u\'"%%.%%%%%$%%%@%%@%%%@%%@%%%#%% %%% %% %%% %%+%%%.%%",\\n\''
0885       Constant: end-gen
0885      Value: end-gen
0885      InstructionUpdate: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%@%%%#%% %%% %% %%% %%+%%%.%%",\\n\''
0885    <-Source: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%@%%%#%% %%% %% %%% %%+%%%.%%",\\n\''
0885   <--Function: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%@%%%#%% %%% %% %%% %%+%%%.%%",\\n\''
0885  <---Source: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%@%%%#%% %%% %% %%% %%+%%%.%%",\\n\''
0885 <----Class: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%@%%%#%% %%% %% %%% %%+%%%.%%",\\n\''
0885<-----Source: line: 'milogo += u\'"%%.%%%%%$%%%@%%@%%%@%%@%%%#%% %%% %% %%% %%+%%%.%%",\\n\''
0886     InstructionUpdate: end-gen
0886     InstructionUpdate: begin-gen
0886      Identifier: begin-gen
0886       Identifier: expr: 'milogo'
0886      Identifier: end-gen
0886      OpUpdate: begin-gen
0886       OpUpdate: expr: '+='
0886      OpUpdate: end-gen
0886      Value: begin-gen
0886       Constant: begin-gen
0886        Constant: ctype: 'String' -> '"%%.%%%%%.%%%$%%@%%%@%%@%%%#%%#%%% %% %%% %% %%%+%%",\\n'
0886        Constant: expr: 'u\'"%%.%%%%%.%%%$%%@%%%@%%@%%%#%%#%%% %% %%% %% %%%+%%",\\n\''
0886      <-Value: expr: 'u\'"%%.%%%%%.%%%$%%@%%%@%%@%%%#%%#%%% %% %%% %% %%%+%%",\\n\''
0886       Constant: end-gen
0886      Value: end-gen
0886      InstructionUpdate: line: 'milogo += u\'"%%.%%%%%.%%%$%%@%%%@%%@%%%#%%#%%% %% %%% %% %%%+%%",\\n\''
0886    <-Source: line: 'milogo += u\'"%%.%%%%%.%%%$%%@%%%@%%@%%%#%%#%%% %% %%% %% %%%+%%",\\n\''
0886   <--Function: line: 'milogo += u\'"%%.%%%%%.%%%$%%@%%%@%%@%%%#%%#%%% %% %%% %% %%%+%%",\\n\''
0886  <---Source: line: 'milogo += u\'"%%.%%%%%.%%%$%%@%%%@%%@%%%#%%#%%% %% %%% %% %%%+%%",\\n\''
0886 <----Class: line: 'milogo += u\'"%%.%%%%%.%%%$%%@%%%@%%@%%%#%%#%%% %% %%% %% %%%+%%",\\n\''
0886<-----Source: line: 'milogo += u\'"%%.%%%%%.%%%$%%@%%%@%%@%%%#%%#%%% %% %%% %% %%%+%%",\\n\''
0887     InstructionUpdate: end-gen
0887     InstructionUpdate: begin-gen
0887      Identifier: begin-gen
0887       Identifier: expr: 'milogo'
0887      Identifier: end-gen
0887      OpUpdate: begin-gen
0887       OpUpdate: expr: '+='
0887      OpUpdate: end-gen
0887      Value: begin-gen
0887       Constant: begin-gen
0887        Constant: ctype: 'String' -> '"%%.....%%.$$%%%%@@@@%%%@@@%%%## % %%     %%%  +%%%",\\n'
0887        Constant: expr: 'u\'"%%.....%%.$$%%%%@@@@%%%@@@%%%## % %%     %%%  +%%%",\\n\''
0887      <-Value: expr: 'u\'"%%.....%%.$$%%%%@@@@%%%@@@%%%## % %%     %%%  +%%%",\\n\''
0887       Constant: end-gen
0887      Value: end-gen
0887      InstructionUpdate: line: 'milogo += u\'"%%.....%%.$$%%%%@@@@%%%@@@%%%## % %%     %%%  +%%%",\\n\''
0887    <-Source: line: 'milogo += u\'"%%.....%%.$$%%%%@@@@%%%@@@%%%## % %%     %%%  +%%%",\\n\''
0887   <--Function: line: 'milogo += u\'"%%.....%%.$$%%%%@@@@%%%@@@%%%## % %%     %%%  +%%%",\\n\''
0887  <---Source: line: 'milogo += u\'"%%.....%%.$$%%%%@@@@%%%@@@%%%## % %%     %%%  +%%%",\\n\''
0887 <----Class: line: 'milogo += u\'"%%.....%%.$$%%%%@@@@%%%@@@%%%## % %%     %%%  +%%%",\\n\''
0887<-----Source: line: 'milogo += u\'"%%.....%%.$$%%%%@@@@%%%@@@%%%## % %%     %%%  +%%%",\\n\''
0888     InstructionUpdate: end-gen
0888     InstructionUpdate: begin-gen
0888      Identifier: begin-gen
0888       Identifier: expr: 'milogo'
0888      Identifier: end-gen
0888      OpUpdate: begin-gen
0888       OpUpdate: expr: '+='
0888      OpUpdate: end-gen
0888      Value: begin-gen
0888       Constant: begin-gen
0888        Constant: ctype: 'String' -> '"%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n'
0888        Constant: expr: 'u\'"%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0888      <-Value: expr: 'u\'"%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0888       Constant: end-gen
0888      Value: end-gen
0888      InstructionUpdate: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0888    <-Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0888   <--Function: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0888  <---Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0888 <----Class: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0888<-----Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0889     InstructionUpdate: end-gen
0889     InstructionUpdate: begin-gen
0889      Identifier: begin-gen
0889       Identifier: expr: 'milogo'
0889      Identifier: end-gen
0889      OpUpdate: begin-gen
0889       OpUpdate: expr: '+='
0889      OpUpdate: end-gen
0889      Value: begin-gen
0889       Constant: begin-gen
0889        Constant: ctype: 'String' -> '"%%%%%%%%%%%%%%%$$$$%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n'
0889        Constant: expr: 'u\'"%%%%%%%%%%%%%%%$$$$%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0889      <-Value: expr: 'u\'"%%%%%%%%%%%%%%%$$$$%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0889       Constant: end-gen
0889      Value: end-gen
0889      InstructionUpdate: line: 'milogo += u\'"%%%%%%%%%%%%%%%$$$$%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0889    <-Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%$$$$%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0889   <--Function: line: 'milogo += u\'"%%%%%%%%%%%%%%%$$$$%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0889  <---Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%$$$$%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0889 <----Class: line: 'milogo += u\'"%%%%%%%%%%%%%%%$$$$%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0889<-----Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%$$$$%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%",\\n\''
0890     InstructionUpdate: end-gen
0890     InstructionUpdate: begin-gen
0890      Identifier: begin-gen
0890       Identifier: expr: 'milogo'
0890      Identifier: end-gen
0890      OpUpdate: begin-gen
0890       OpUpdate: expr: '+='
0890      OpUpdate: end-gen
0890      Value: begin-gen
0890       Constant: begin-gen
0890        Constant: ctype: 'String' -> '"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n'
0890        Constant: expr: 'u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0890      <-Value: expr: 'u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0890       Constant: end-gen
0890      Value: end-gen
0890      InstructionUpdate: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0890    <-Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0890   <--Function: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0890  <---Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0890 <----Class: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0890<-----Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0891     InstructionUpdate: end-gen
0891     InstructionUpdate: begin-gen
0891      Identifier: begin-gen
0891       Identifier: expr: 'milogo'
0891      Identifier: end-gen
0891      OpUpdate: begin-gen
0891       OpUpdate: expr: '+='
0891      OpUpdate: end-gen
0891      Value: begin-gen
0891       Constant: begin-gen
0891        Constant: ctype: 'String' -> '"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n'
0891        Constant: expr: 'u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0891      <-Value: expr: 'u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0891       Constant: end-gen
0891      Value: end-gen
0891      InstructionUpdate: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0891    <-Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0891   <--Function: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0891  <---Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0891 <----Class: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0891<-----Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",\\n\''
0892     InstructionUpdate: end-gen
0892     InstructionUpdate: begin-gen
0892      Identifier: begin-gen
0892       Identifier: expr: 'milogo'
0892      Identifier: end-gen
0892      OpUpdate: begin-gen
0892       OpUpdate: expr: '+='
0892      OpUpdate: end-gen
0892      Value: begin-gen
0892       Constant: begin-gen
0892        Constant: ctype: 'String' -> '"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"};\\n'
0892        Constant: expr: 'u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"};\\n\''
0892      <-Value: expr: 'u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"};\\n\''
0892       Constant: end-gen
0892      Value: end-gen
0892      InstructionUpdate: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"};\\n\''
0892    <-Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"};\\n\''
0892   <--Function: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"};\\n\''
0892  <---Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"};\\n\''
0892 <----Class: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"};\\n\''
0892<-----Source: line: 'milogo += u\'"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"};\\n\''
0893     InstructionUpdate: end-gen
0893     With: begin-gen
0893      Identifier: begin-gen
0893       Identifier: expr: 'cursor'
0893      Identifier: end-gen
0893      With: line: ' #WITH_START'
0893    <-Source: line: ' #WITH_START'
0893   <--Function: line: ' #WITH_START'
0893  <---Source: line: ' #WITH_START'
0893 <----Class: line: ' #WITH_START'
0893<-----Source: line: ' #WITH_START'
0894      Source: begin-gen
0894       InstructionCall: begin-gen
0894        FunctionCall: begin-gen
0894         Value: begin-gen
0894          Member: begin-gen
0894           Identifier: begin-gen
0894            Identifier: expr: 'cursor'
0894           Identifier: end-gen
0894           Identifier: begin-gen
0894            Identifier: expr: 'Insert'
0894           Identifier: end-gen
0894           Member: expr: 'cursor.Insert'
0894         <-Value: expr: 'cursor.Insert'
0894          Member: end-gen
0894         Value: end-gen
0894         FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0894        FunctionCall: end-gen
0894        InstructionCall: line: 'setModeAccess(cursor.Insert)'
0894      <-Source: line: 'setModeAccess(cursor.Insert)'
0894     <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0894    <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0894   <----Function: line: 'cursor.setModeAccess(cursor.Insert)'
0894  <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0894 <------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0894<-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0895       InstructionCall: end-gen
0895       InstructionCall: begin-gen
0895        FunctionCall: begin-gen
0895         FunctionCall: expr: 'refreshBuffer()'
0895        FunctionCall: end-gen
0895        InstructionCall: line: 'refreshBuffer()'
0895      <-Source: line: 'refreshBuffer()'
0895     <--With: line: 'cursor.refreshBuffer()'
0895    <---Source: line: 'cursor.refreshBuffer()'
0895   <----Function: line: 'cursor.refreshBuffer()'
0895  <-----Source: line: 'cursor.refreshBuffer()'
0895 <------Class: line: 'cursor.refreshBuffer()'
0895<-------Source: line: 'cursor.refreshBuffer()'
0896       InstructionCall: end-gen
0896       InstructionCall: begin-gen
0896        FunctionCall: begin-gen
0896         Value: begin-gen
0896          Constant: begin-gen
0896           Constant: ctype: 'String' -> 'nombre'
0896           Constant: expr: 'u"nombre"'
0896         <-Value: expr: 'u"nombre"'
0896          Constant: end-gen
0896         Value: end-gen
0896         Value: begin-gen
0896          Constant: begin-gen
0896           Constant: ctype: 'String' -> 'Empresa por defecto'
0896           Constant: expr: 'u"Empresa por defecto"'
0896         <-Value: expr: 'u"Empresa por defecto"'
0896          Constant: end-gen
0896         Value: end-gen
0896         FunctionCall: expr: 'setValueBuffer(u"nombre", u"Empresa por defecto")'
0896        FunctionCall: end-gen
0896        InstructionCall: line: 'setValueBuffer(u"nombre", u"Empresa por defecto")'
0896      <-Source: line: 'setValueBuffer(u"nombre", u"Empresa por defecto")'
0896     <--With: line: 'cursor.setValueBuffer(u"nombre", u"Empresa por defecto")'
0896    <---Source: line: 'cursor.setValueBuffer(u"nombre", u"Empresa por defecto")'
0896   <----Function: line: 'cursor.setValueBuffer(u"nombre", u"Empresa por defecto")'
0896  <-----Source: line: 'cursor.setValueBuffer(u"nombre", u"Empresa por defecto")'
0896 <------Class: line: 'cursor.setValueBuffer(u"nombre", u"Empresa por defecto")'
0896<-------Source: line: 'cursor.setValueBuffer(u"nombre", u"Empresa por defecto")'
0897       InstructionCall: end-gen
0897       InstructionCall: begin-gen
0897        FunctionCall: begin-gen
0897         Value: begin-gen
0897          Constant: begin-gen
0897           Constant: ctype: 'String' -> 'cifnif'
0897           Constant: expr: 'u"cifnif"'
0897         <-Value: expr: 'u"cifnif"'
0897          Constant: end-gen
0897         Value: end-gen
0897         Value: begin-gen
0897          Constant: begin-gen
0897           Constant: ctype: 'String' -> 'Z99999999'
0897           Constant: expr: 'u"Z99999999"'
0897         <-Value: expr: 'u"Z99999999"'
0897          Constant: end-gen
0897         Value: end-gen
0897         FunctionCall: expr: 'setValueBuffer(u"cifnif", u"Z99999999")'
0897        FunctionCall: end-gen
0897        InstructionCall: line: 'setValueBuffer(u"cifnif", u"Z99999999")'
0897      <-Source: line: 'setValueBuffer(u"cifnif", u"Z99999999")'
0897     <--With: line: 'cursor.setValueBuffer(u"cifnif", u"Z99999999")'
0897    <---Source: line: 'cursor.setValueBuffer(u"cifnif", u"Z99999999")'
0897   <----Function: line: 'cursor.setValueBuffer(u"cifnif", u"Z99999999")'
0897  <-----Source: line: 'cursor.setValueBuffer(u"cifnif", u"Z99999999")'
0897 <------Class: line: 'cursor.setValueBuffer(u"cifnif", u"Z99999999")'
0897<-------Source: line: 'cursor.setValueBuffer(u"cifnif", u"Z99999999")'
0898       InstructionCall: end-gen
0898       InstructionCall: begin-gen
0898        FunctionCall: begin-gen
0898         Value: begin-gen
0898          Constant: begin-gen
0898           Constant: ctype: 'String' -> 'administrador'
0898           Constant: expr: 'u"administrador"'
0898         <-Value: expr: 'u"administrador"'
0898          Constant: end-gen
0898         Value: end-gen
0898         Value: begin-gen
0898          Constant: begin-gen
0898           Constant: ctype: 'String' -> 'ANONIMO'
0898           Constant: expr: 'u"ANONIMO"'
0898         <-Value: expr: 'u"ANONIMO"'
0898          Constant: end-gen
0898         Value: end-gen
0898         FunctionCall: expr: 'setValueBuffer(u"administrador", u"ANONIMO")'
0898        FunctionCall: end-gen
0898        InstructionCall: line: 'setValueBuffer(u"administrador", u"ANONIMO")'
0898      <-Source: line: 'setValueBuffer(u"administrador", u"ANONIMO")'
0898     <--With: line: 'cursor.setValueBuffer(u"administrador", u"ANONIMO")'
0898    <---Source: line: 'cursor.setValueBuffer(u"administrador", u"ANONIMO")'
0898   <----Function: line: 'cursor.setValueBuffer(u"administrador", u"ANONIMO")'
0898  <-----Source: line: 'cursor.setValueBuffer(u"administrador", u"ANONIMO")'
0898 <------Class: line: 'cursor.setValueBuffer(u"administrador", u"ANONIMO")'
0898<-------Source: line: 'cursor.setValueBuffer(u"administrador", u"ANONIMO")'
0899       InstructionCall: end-gen
0899       InstructionCall: begin-gen
0899        FunctionCall: begin-gen
0899         Value: begin-gen
0899          Constant: begin-gen
0899           Constant: ctype: 'String' -> 'direccion'
0899           Constant: expr: 'u"direccion"'
0899         <-Value: expr: 'u"direccion"'
0899          Constant: end-gen
0899         Value: end-gen
0899         Value: begin-gen
0899          Constant: begin-gen
0899           Constant: ctype: 'String' -> 'C/ CALLE 999'
0899           Constant: expr: 'u"C/ CALLE 999"'
0899         <-Value: expr: 'u"C/ CALLE 999"'
0899          Constant: end-gen
0899         Value: end-gen
0899         FunctionCall: expr: 'setValueBuffer(u"direccion", u"C/ CALLE 999")'
0899        FunctionCall: end-gen
0899        InstructionCall: line: 'setValueBuffer(u"direccion", u"C/ CALLE 999")'
0899      <-Source: line: 'setValueBuffer(u"direccion", u"C/ CALLE 999")'
0899     <--With: line: 'cursor.setValueBuffer(u"direccion", u"C/ CALLE 999")'
0899    <---Source: line: 'cursor.setValueBuffer(u"direccion", u"C/ CALLE 999")'
0899   <----Function: line: 'cursor.setValueBuffer(u"direccion", u"C/ CALLE 999")'
0899  <-----Source: line: 'cursor.setValueBuffer(u"direccion", u"C/ CALLE 999")'
0899 <------Class: line: 'cursor.setValueBuffer(u"direccion", u"C/ CALLE 999")'
0899<-------Source: line: 'cursor.setValueBuffer(u"direccion", u"C/ CALLE 999")'
0900       InstructionCall: end-gen
0900       InstructionCall: begin-gen
0900        FunctionCall: begin-gen
0900         Value: begin-gen
0900          Constant: begin-gen
0900           Constant: ctype: 'String' -> 'codejercicio'
0900           Constant: expr: 'u"codejercicio"'
0900         <-Value: expr: 'u"codejercicio"'
0900          Constant: end-gen
0900         Value: end-gen
0900         Value: begin-gen
0900          Identifier: begin-gen
0900           Identifier: expr: 'codEjercicio'
0900         <-Value: expr: 'codEjercicio'
0900          Identifier: end-gen
0900         Value: end-gen
0900         FunctionCall: expr: 'setValueBuffer(u"codejercicio", codEjercicio)'
0900        FunctionCall: end-gen
0900        InstructionCall: line: 'setValueBuffer(u"codejercicio", codEjercicio)'
0900      <-Source: line: 'setValueBuffer(u"codejercicio", codEjercicio)'
0900     <--With: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0900    <---Source: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0900   <----Function: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0900  <-----Source: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0900 <------Class: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0900<-------Source: line: 'cursor.setValueBuffer(u"codejercicio", codEjercicio)'
0901       InstructionCall: end-gen
0901       InstructionCall: begin-gen
0901        FunctionCall: begin-gen
0901         Value: begin-gen
0901          Constant: begin-gen
0901           Constant: ctype: 'String' -> 'coddivisa'
0901           Constant: expr: 'u"coddivisa"'
0901         <-Value: expr: 'u"coddivisa"'
0901          Constant: end-gen
0901         Value: end-gen
0901         Value: begin-gen
0901          Constant: begin-gen
0901           Constant: ctype: 'String' -> 'EUR'
0901           Constant: expr: 'u"EUR"'
0901         <-Value: expr: 'u"EUR"'
0901          Constant: end-gen
0901         Value: end-gen
0901         FunctionCall: expr: 'setValueBuffer(u"coddivisa", u"EUR")'
0901        FunctionCall: end-gen
0901        InstructionCall: line: 'setValueBuffer(u"coddivisa", u"EUR")'
0901      <-Source: line: 'setValueBuffer(u"coddivisa", u"EUR")'
0901     <--With: line: 'cursor.setValueBuffer(u"coddivisa", u"EUR")'
0901    <---Source: line: 'cursor.setValueBuffer(u"coddivisa", u"EUR")'
0901   <----Function: line: 'cursor.setValueBuffer(u"coddivisa", u"EUR")'
0901  <-----Source: line: 'cursor.setValueBuffer(u"coddivisa", u"EUR")'
0901 <------Class: line: 'cursor.setValueBuffer(u"coddivisa", u"EUR")'
0901<-------Source: line: 'cursor.setValueBuffer(u"coddivisa", u"EUR")'
0902       InstructionCall: end-gen
0902       InstructionCall: begin-gen
0902        FunctionCall: begin-gen
0902         Value: begin-gen
0902          Constant: begin-gen
0902           Constant: ctype: 'String' -> 'codpago'
0902           Constant: expr: 'u"codpago"'
0902         <-Value: expr: 'u"codpago"'
0902          Constant: end-gen
0902         Value: end-gen
0902         Value: begin-gen
0902          Constant: begin-gen
0902           Constant: ctype: 'String' -> 'CONT'
0902           Constant: expr: 'u"CONT"'
0902         <-Value: expr: 'u"CONT"'
0902          Constant: end-gen
0902         Value: end-gen
0902         FunctionCall: expr: 'setValueBuffer(u"codpago", u"CONT")'
0902        FunctionCall: end-gen
0902        InstructionCall: line: 'setValueBuffer(u"codpago", u"CONT")'
0902      <-Source: line: 'setValueBuffer(u"codpago", u"CONT")'
0902     <--With: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0902    <---Source: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0902   <----Function: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0902  <-----Source: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0902 <------Class: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0902<-------Source: line: 'cursor.setValueBuffer(u"codpago", u"CONT")'
0903       InstructionCall: end-gen
0903       InstructionCall: begin-gen
0903        FunctionCall: begin-gen
0903         Value: begin-gen
0903          Constant: begin-gen
0903           Constant: ctype: 'String' -> 'codserie'
0903           Constant: expr: 'u"codserie"'
0903         <-Value: expr: 'u"codserie"'
0903          Constant: end-gen
0903         Value: end-gen
0903         Value: begin-gen
0903          Constant: begin-gen
0903           Constant: ctype: 'String' -> 'A'
0903           Constant: expr: 'u"A"'
0903         <-Value: expr: 'u"A"'
0903          Constant: end-gen
0903         Value: end-gen
0903         FunctionCall: expr: 'setValueBuffer(u"codserie", u"A")'
0903        FunctionCall: end-gen
0903        InstructionCall: line: 'setValueBuffer(u"codserie", u"A")'
0903      <-Source: line: 'setValueBuffer(u"codserie", u"A")'
0903     <--With: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0903    <---Source: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0903   <----Function: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0903  <-----Source: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0903 <------Class: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0903<-------Source: line: 'cursor.setValueBuffer(u"codserie", u"A")'
0904       InstructionCall: end-gen
0904       InstructionCall: begin-gen
0904        FunctionCall: begin-gen
0904         Value: begin-gen
0904          Constant: begin-gen
0904           Constant: ctype: 'String' -> 'codpostal'
0904           Constant: expr: 'u"codpostal"'
0904         <-Value: expr: 'u"codpostal"'
0904          Constant: end-gen
0904         Value: end-gen
0904         Value: begin-gen
0904          Constant: begin-gen
0904           Constant: ctype: 'String' -> '00000'
0904           Constant: expr: 'u"00000"'
0904         <-Value: expr: 'u"00000"'
0904          Constant: end-gen
0904         Value: end-gen
0904         FunctionCall: expr: 'setValueBuffer(u"codpostal", u"00000")'
0904        FunctionCall: end-gen
0904        InstructionCall: line: 'setValueBuffer(u"codpostal", u"00000")'
0904      <-Source: line: 'setValueBuffer(u"codpostal", u"00000")'
0904     <--With: line: 'cursor.setValueBuffer(u"codpostal", u"00000")'
0904    <---Source: line: 'cursor.setValueBuffer(u"codpostal", u"00000")'
0904   <----Function: line: 'cursor.setValueBuffer(u"codpostal", u"00000")'
0904  <-----Source: line: 'cursor.setValueBuffer(u"codpostal", u"00000")'
0904 <------Class: line: 'cursor.setValueBuffer(u"codpostal", u"00000")'
0904<-------Source: line: 'cursor.setValueBuffer(u"codpostal", u"00000")'
0905       InstructionCall: end-gen
0905       InstructionCall: begin-gen
0905        FunctionCall: begin-gen
0905         Value: begin-gen
0905          Constant: begin-gen
0905           Constant: ctype: 'String' -> 'ciudad'
0905           Constant: expr: 'u"ciudad"'
0905         <-Value: expr: 'u"ciudad"'
0905          Constant: end-gen
0905         Value: end-gen
0905         Value: begin-gen
0905          Constant: begin-gen
0905           Constant: ctype: 'String' -> 'MADRID'
0905           Constant: expr: 'u"MADRID"'
0905         <-Value: expr: 'u"MADRID"'
0905          Constant: end-gen
0905         Value: end-gen
0905         FunctionCall: expr: 'setValueBuffer(u"ciudad", u"MADRID")'
0905        FunctionCall: end-gen
0905        InstructionCall: line: 'setValueBuffer(u"ciudad", u"MADRID")'
0905      <-Source: line: 'setValueBuffer(u"ciudad", u"MADRID")'
0905     <--With: line: 'cursor.setValueBuffer(u"ciudad", u"MADRID")'
0905    <---Source: line: 'cursor.setValueBuffer(u"ciudad", u"MADRID")'
0905   <----Function: line: 'cursor.setValueBuffer(u"ciudad", u"MADRID")'
0905  <-----Source: line: 'cursor.setValueBuffer(u"ciudad", u"MADRID")'
0905 <------Class: line: 'cursor.setValueBuffer(u"ciudad", u"MADRID")'
0905<-------Source: line: 'cursor.setValueBuffer(u"ciudad", u"MADRID")'
0906       InstructionCall: end-gen
0906       InstructionCall: begin-gen
0906        FunctionCall: begin-gen
0906         Value: begin-gen
0906          Constant: begin-gen
0906           Constant: ctype: 'String' -> 'provincia'
0906           Constant: expr: 'u"provincia"'
0906         <-Value: expr: 'u"provincia"'
0906          Constant: end-gen
0906         Value: end-gen
0906         Value: begin-gen
0906          Constant: begin-gen
0906           Constant: ctype: 'String' -> 'MADRID'
0906           Constant: expr: 'u"MADRID"'
0906         <-Value: expr: 'u"MADRID"'
0906          Constant: end-gen
0906         Value: end-gen
0906         FunctionCall: expr: 'setValueBuffer(u"provincia", u"MADRID")'
0906        FunctionCall: end-gen
0906        InstructionCall: line: 'setValueBuffer(u"provincia", u"MADRID")'
0906      <-Source: line: 'setValueBuffer(u"provincia", u"MADRID")'
0906     <--With: line: 'cursor.setValueBuffer(u"provincia", u"MADRID")'
0906    <---Source: line: 'cursor.setValueBuffer(u"provincia", u"MADRID")'
0906   <----Function: line: 'cursor.setValueBuffer(u"provincia", u"MADRID")'
0906  <-----Source: line: 'cursor.setValueBuffer(u"provincia", u"MADRID")'
0906 <------Class: line: 'cursor.setValueBuffer(u"provincia", u"MADRID")'
0906<-------Source: line: 'cursor.setValueBuffer(u"provincia", u"MADRID")'
0907       InstructionCall: end-gen
0907       InstructionCall: begin-gen
0907        FunctionCall: begin-gen
0907         Value: begin-gen
0907          Constant: begin-gen
0907           Constant: ctype: 'String' -> 'telefono'
0907           Constant: expr: 'u"telefono"'
0907         <-Value: expr: 'u"telefono"'
0907          Constant: end-gen
0907         Value: end-gen
0907         Value: begin-gen
0907          Constant: begin-gen
0907           Constant: ctype: 'String' -> '96 111 22 33'
0907           Constant: expr: 'u"96 111 22 33"'
0907         <-Value: expr: 'u"96 111 22 33"'
0907          Constant: end-gen
0907         Value: end-gen
0907         FunctionCall: expr: 'setValueBuffer(u"telefono", u"96 111 22 33")'
0907        FunctionCall: end-gen
0907        InstructionCall: line: 'setValueBuffer(u"telefono", u"96 111 22 33")'
0907      <-Source: line: 'setValueBuffer(u"telefono", u"96 111 22 33")'
0907     <--With: line: 'cursor.setValueBuffer(u"telefono", u"96 111 22 33")'
0907    <---Source: line: 'cursor.setValueBuffer(u"telefono", u"96 111 22 33")'
0907   <----Function: line: 'cursor.setValueBuffer(u"telefono", u"96 111 22 33")'
0907  <-----Source: line: 'cursor.setValueBuffer(u"telefono", u"96 111 22 33")'
0907 <------Class: line: 'cursor.setValueBuffer(u"telefono", u"96 111 22 33")'
0907<-------Source: line: 'cursor.setValueBuffer(u"telefono", u"96 111 22 33")'
0908       InstructionCall: end-gen
0908       InstructionCall: begin-gen
0908        FunctionCall: begin-gen
0908         Value: begin-gen
0908          Constant: begin-gen
0908           Constant: ctype: 'String' -> 'email'
0908           Constant: expr: 'u"email"'
0908         <-Value: expr: 'u"email"'
0908          Constant: end-gen
0908         Value: end-gen
0908         Value: begin-gen
0908          Constant: begin-gen
0908           Constant: ctype: 'String' -> 'email@example.com'
0908           Constant: expr: 'u"email@example.com"'
0908         <-Value: expr: 'u"email@example.com"'
0908          Constant: end-gen
0908         Value: end-gen
0908         FunctionCall: expr: 'setValueBuffer(u"email", u"email@example.com")'
0908        FunctionCall: end-gen
0908        InstructionCall: line: 'setValueBuffer(u"email", u"email@example.com")'
0908      <-Source: line: 'setValueBuffer(u"email", u"email@example.com")'
0908     <--With: line: 'cursor.setValueBuffer(u"email", u"email@example.com")'
0908    <---Source: line: 'cursor.setValueBuffer(u"email", u"email@example.com")'
0908   <----Function: line: 'cursor.setValueBuffer(u"email", u"email@example.com")'
0908  <-----Source: line: 'cursor.setValueBuffer(u"email", u"email@example.com")'
0908 <------Class: line: 'cursor.setValueBuffer(u"email", u"email@example.com")'
0908<-------Source: line: 'cursor.setValueBuffer(u"email", u"email@example.com")'
0909       InstructionCall: end-gen
0909       InstructionCall: begin-gen
0909        FunctionCall: begin-gen
0909         Value: begin-gen
0909          Constant: begin-gen
0909           Constant: ctype: 'String' -> 'codpais'
0909           Constant: expr: 'u"codpais"'
0909         <-Value: expr: 'u"codpais"'
0909          Constant: end-gen
0909         Value: end-gen
0909         Value: begin-gen
0909          Constant: begin-gen
0909           Constant: ctype: 'String' -> 'ES'
0909           Constant: expr: 'u"ES"'
0909         <-Value: expr: 'u"ES"'
0909          Constant: end-gen
0909         Value: end-gen
0909         FunctionCall: expr: 'setValueBuffer(u"codpais", u"ES")'
0909        FunctionCall: end-gen
0909        InstructionCall: line: 'setValueBuffer(u"codpais", u"ES")'
0909      <-Source: line: 'setValueBuffer(u"codpais", u"ES")'
0909     <--With: line: 'cursor.setValueBuffer(u"codpais", u"ES")'
0909    <---Source: line: 'cursor.setValueBuffer(u"codpais", u"ES")'
0909   <----Function: line: 'cursor.setValueBuffer(u"codpais", u"ES")'
0909  <-----Source: line: 'cursor.setValueBuffer(u"codpais", u"ES")'
0909 <------Class: line: 'cursor.setValueBuffer(u"codpais", u"ES")'
0909<-------Source: line: 'cursor.setValueBuffer(u"codpais", u"ES")'
0910       InstructionCall: end-gen
0910       InstructionCall: begin-gen
0910        FunctionCall: begin-gen
0910         Value: begin-gen
0910          Constant: begin-gen
0910           Constant: ctype: 'String' -> 'logo'
0910           Constant: expr: 'u"logo"'
0910         <-Value: expr: 'u"logo"'
0910          Constant: end-gen
0910         Value: end-gen
0910         Value: begin-gen
0910          Identifier: begin-gen
0910           Identifier: expr: 'milogo'
0910         <-Value: expr: 'milogo'
0910          Identifier: end-gen
0910         Value: end-gen
0910         FunctionCall: expr: 'setValueBuffer(u"logo", milogo)'
0910        FunctionCall: end-gen
0910        InstructionCall: line: 'setValueBuffer(u"logo", milogo)'
0910      <-Source: line: 'setValueBuffer(u"logo", milogo)'
0910     <--With: line: 'cursor.setValueBuffer(u"logo", milogo)'
0910    <---Source: line: 'cursor.setValueBuffer(u"logo", milogo)'
0910   <----Function: line: 'cursor.setValueBuffer(u"logo", milogo)'
0910  <-----Source: line: 'cursor.setValueBuffer(u"logo", milogo)'
0910 <------Class: line: 'cursor.setValueBuffer(u"logo", milogo)'
0910<-------Source: line: 'cursor.setValueBuffer(u"logo", milogo)'
0911       InstructionCall: end-gen
0911       InstructionCall: begin-gen
0911        FunctionCall: begin-gen
0911         FunctionCall: expr: 'commitBuffer()'
0911        FunctionCall: end-gen
0911        InstructionCall: line: 'commitBuffer()'
0911      <-Source: line: 'commitBuffer()'
0911     <--With: line: 'cursor.commitBuffer()'
0911    <---Source: line: 'cursor.commitBuffer()'
0911   <----Function: line: 'cursor.commitBuffer()'
0911  <-----Source: line: 'cursor.commitBuffer()'
0911 <------Class: line: 'cursor.commitBuffer()'
0911<-------Source: line: 'cursor.commitBuffer()'
0912       InstructionCall: end-gen
0912      Source: end-gen
0912      With: line: ' #WITH_END'
0912    <-Source: line: ' #WITH_END'
0912   <--Function: line: ' #WITH_END'
0912  <---Source: line: ' #WITH_END'
0912 <----Class: line: ' #WITH_END'
0912<-----Source: line: ' #WITH_END'
0913     With: end-gen
0913     InstructionCall: begin-gen
0913      Member: begin-gen
0913       Identifier: begin-gen
0913        Identifier: expr: 'self'
0913       Identifier: end-gen
0913       Identifier: begin-gen
0913        Identifier: expr: 'iface'
0913       Identifier: end-gen
0913       FunctionCall: begin-gen
0913        FunctionCall: expr: 'crearProvinciasEsp()'
0913       FunctionCall: end-gen
0913       Member: expr: 'self.iface.crearProvinciasEsp()'
0913      Member: end-gen
0913      InstructionCall: line: 'self.iface.crearProvinciasEsp()'
0913    <-Source: line: 'self.iface.crearProvinciasEsp()'
0913   <--Function: line: 'self.iface.crearProvinciasEsp()'
0913  <---Source: line: 'self.iface.crearProvinciasEsp()'
0913 <----Class: line: 'self.iface.crearProvinciasEsp()'
0913<-----Source: line: 'self.iface.crearProvinciasEsp()'
0914     InstructionCall: end-gen
0914    Source: end-gen
0914    Function: end: 'block-def-oficial_valoresIniciales'
0914  <-Source: end: 'block-def-oficial_valoresIniciales'
0914 <--Class: end: 'block-def-oficial_valoresIniciales'
0914<---Source: end: 'block-def-oficial_valoresIniciales'
0915   Function: end-gen
0915   Function: begin-gen
0915    Variable: begin-gen
0915     Variable: expr: 'codPais'
0915    Variable: end-gen
0915    Function: line: 'def oficial_crearProvinciasEsp(self, codPais = None):'
0915  <-Source: line: 'def oficial_crearProvinciasEsp(self, codPais = None):'
0915 <--Class: line: 'def oficial_crearProvinciasEsp(self, codPais = None):'
0915<---Source: line: 'def oficial_crearProvinciasEsp(self, codPais = None):'
0916    Function: begin: 'block-def-oficial_crearProvinciasEsp'
0916  <-Source: begin: 'block-def-oficial_crearProvinciasEsp'
0916 <--Class: begin: 'block-def-oficial_crearProvinciasEsp'
0916<---Source: begin: 'block-def-oficial_crearProvinciasEsp'
0916    Source: begin-gen
0916     DeclarationBlock: begin-gen
0916      Variable: begin-gen
0916       Variable: expr: 'util'
0916       Variable: expr: '='
0916       Value: begin-gen
0916        New: begin-gen
0916         Identifier: begin-gen
0916          Identifier: expr: 'FLUtil'
0916        <-New: expr: 'qsatype.FLUtil()'
0916       <--Value: expr: 'qsatype.FLUtil()'
0916      <---Variable: expr: 'qsatype.FLUtil()'
0916         Identifier: end-gen
0916        New: end-gen
0916       Value: end-gen
0916      Variable: end-gen
0916      DeclarationBlock: line: 'util = qsatype.FLUtil()'
0916    <-Source: line: 'util = qsatype.FLUtil()'
0916   <--Function: line: 'util = qsatype.FLUtil()'
0916  <---Source: line: 'util = qsatype.FLUtil()'
0916 <----Class: line: 'util = qsatype.FLUtil()'
0916<-----Source: line: 'util = qsatype.FLUtil()'
0917     DeclarationBlock: end-gen
0917     DeclarationBlock: begin-gen
0917      Variable: begin-gen
0917       Variable: expr: 'cursor'
0917       Variable: expr: '='
0917       Value: begin-gen
0917        New: begin-gen
0917         FunctionCall: begin-gen
0917          Value: begin-gen
0917           Constant: begin-gen
0917            Constant: ctype: 'String' -> 'provincias'
0917            Constant: expr: 'u"provincias"'
0917          <-Value: expr: 'u"provincias"'
0917           Constant: end-gen
0917          Value: end-gen
0917          FunctionCall: expr: 'FLSqlCursor(u"provincias")'
0917        <-New: expr: 'qsatype.FLSqlCursor(u"provincias")'
0917       <--Value: expr: 'qsatype.FLSqlCursor(u"provincias")'
0917      <---Variable: expr: 'qsatype.FLSqlCursor(u"provincias")'
0917         FunctionCall: end-gen
0917        New: end-gen
0917       Value: end-gen
0917      Variable: end-gen
0917      DeclarationBlock: line: 'cursor = qsatype.FLSqlCursor(u"provincias")'
0917    <-Source: line: 'cursor = qsatype.FLSqlCursor(u"provincias")'
0917   <--Function: line: 'cursor = qsatype.FLSqlCursor(u"provincias")'
0917  <---Source: line: 'cursor = qsatype.FLSqlCursor(u"provincias")'
0917 <----Class: line: 'cursor = qsatype.FLSqlCursor(u"provincias")'
0917<-----Source: line: 'cursor = qsatype.FLSqlCursor(u"provincias")'
0918     DeclarationBlock: end-gen
0918     DeclarationBlock: begin-gen
0918      Variable: begin-gen
0918       Variable: expr: 'provincias'
0918       Variable: expr: '='
0918       Value: begin-gen
0918        Constant: begin-gen
0918         Constant: ctype: None -> None
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ALAVA'
0918             Constant: expr: 'u"ALAVA"'
0918           <-Value: expr: 'u"ALAVA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '01'
0918             Constant: expr: 'u"01"'
0918           <-Value: expr: 'u"01"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"ALAVA", u"ES", u"01"])'
0918         <-Value: expr: 'qsatype.Array([u"ALAVA", u"ES", u"01"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ALBACETE'
0918             Constant: expr: 'u"ALBACETE"'
0918           <-Value: expr: 'u"ALBACETE"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '02'
0918             Constant: expr: 'u"02"'
0918           <-Value: expr: 'u"02"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"ALBACETE", u"ES", u"02"])'
0918         <-Value: expr: 'qsatype.Array([u"ALBACETE", u"ES", u"02"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ALICANTE'
0918             Constant: expr: 'u"ALICANTE"'
0918           <-Value: expr: 'u"ALICANTE"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '03'
0918             Constant: expr: 'u"03"'
0918           <-Value: expr: 'u"03"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"ALICANTE", u"ES", u"03"])'
0918         <-Value: expr: 'qsatype.Array([u"ALICANTE", u"ES", u"03"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ALMERIA'
0918             Constant: expr: 'u"ALMERIA"'
0918           <-Value: expr: 'u"ALMERIA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '04'
0918             Constant: expr: 'u"04"'
0918           <-Value: expr: 'u"04"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"ALMERIA", u"ES", u"04"])'
0918         <-Value: expr: 'qsatype.Array([u"ALMERIA", u"ES", u"04"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ASTURIAS'
0918             Constant: expr: 'u"ASTURIAS"'
0918           <-Value: expr: 'u"ASTURIAS"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '33'
0918             Constant: expr: 'u"33"'
0918           <-Value: expr: 'u"33"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"ASTURIAS", u"ES", u"33"])'
0918         <-Value: expr: 'qsatype.Array([u"ASTURIAS", u"ES", u"33"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'AVILA'
0918             Constant: expr: 'u"AVILA"'
0918           <-Value: expr: 'u"AVILA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '05'
0918             Constant: expr: 'u"05"'
0918           <-Value: expr: 'u"05"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"AVILA", u"ES", u"05"])'
0918         <-Value: expr: 'qsatype.Array([u"AVILA", u"ES", u"05"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'BADAJOZ'
0918             Constant: expr: 'u"BADAJOZ"'
0918           <-Value: expr: 'u"BADAJOZ"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '06'
0918             Constant: expr: 'u"06"'
0918           <-Value: expr: 'u"06"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"BADAJOZ", u"ES", u"06"])'
0918         <-Value: expr: 'qsatype.Array([u"BADAJOZ", u"ES", u"06"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'BALEARES'
0918             Constant: expr: 'u"BALEARES"'
0918           <-Value: expr: 'u"BALEARES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '07'
0918             Constant: expr: 'u"07"'
0918           <-Value: expr: 'u"07"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"BALEARES", u"ES", u"07"])'
0918         <-Value: expr: 'qsatype.Array([u"BALEARES", u"ES", u"07"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'BARCELONA'
0918             Constant: expr: 'u"BARCELONA"'
0918           <-Value: expr: 'u"BARCELONA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '08'
0918             Constant: expr: 'u"08"'
0918           <-Value: expr: 'u"08"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"BARCELONA", u"ES", u"08"])'
0918         <-Value: expr: 'qsatype.Array([u"BARCELONA", u"ES", u"08"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'BURGOS'
0918             Constant: expr: 'u"BURGOS"'
0918           <-Value: expr: 'u"BURGOS"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '09'
0918             Constant: expr: 'u"09"'
0918           <-Value: expr: 'u"09"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"BURGOS", u"ES", u"09"])'
0918         <-Value: expr: 'qsatype.Array([u"BURGOS", u"ES", u"09"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'CACERES'
0918             Constant: expr: 'u"CACERES"'
0918           <-Value: expr: 'u"CACERES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '10'
0918             Constant: expr: 'u"10"'
0918           <-Value: expr: 'u"10"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"CACERES", u"ES", u"10"])'
0918         <-Value: expr: 'qsatype.Array([u"CACERES", u"ES", u"10"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'CADIZ'
0918             Constant: expr: 'u"CADIZ"'
0918           <-Value: expr: 'u"CADIZ"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '11'
0918             Constant: expr: 'u"11"'
0918           <-Value: expr: 'u"11"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"CADIZ", u"ES", u"11"])'
0918         <-Value: expr: 'qsatype.Array([u"CADIZ", u"ES", u"11"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'CANTABRIA'
0918             Constant: expr: 'u"CANTABRIA"'
0918           <-Value: expr: 'u"CANTABRIA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '39'
0918             Constant: expr: 'u"39"'
0918           <-Value: expr: 'u"39"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"CANTABRIA", u"ES", u"39"])'
0918         <-Value: expr: 'qsatype.Array([u"CANTABRIA", u"ES", u"39"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'CASTELLON'
0918             Constant: expr: 'u"CASTELLON"'
0918           <-Value: expr: 'u"CASTELLON"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '12'
0918             Constant: expr: 'u"12"'
0918           <-Value: expr: 'u"12"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"CASTELLON", u"ES", u"12"])'
0918         <-Value: expr: 'qsatype.Array([u"CASTELLON", u"ES", u"12"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'CIUDAD REAL'
0918             Constant: expr: 'u"CIUDAD REAL"'
0918           <-Value: expr: 'u"CIUDAD REAL"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '12'
0918             Constant: expr: 'u"12"'
0918           <-Value: expr: 'u"12"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"CIUDAD REAL", u"ES", u"12"])'
0918         <-Value: expr: 'qsatype.Array([u"CIUDAD REAL", u"ES", u"12"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'CIUDAD REAL'
0918             Constant: expr: 'u"CIUDAD REAL"'
0918           <-Value: expr: 'u"CIUDAD REAL"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '13'
0918             Constant: expr: 'u"13"'
0918           <-Value: expr: 'u"13"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"CIUDAD REAL", u"ES", u"13"])'
0918         <-Value: expr: 'qsatype.Array([u"CIUDAD REAL", u"ES", u"13"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'CORDOBA'
0918             Constant: expr: 'u"CORDOBA"'
0918           <-Value: expr: 'u"CORDOBA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '14'
0918             Constant: expr: 'u"14"'
0918           <-Value: expr: 'u"14"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"CORDOBA", u"ES", u"14"])'
0918         <-Value: expr: 'qsatype.Array([u"CORDOBA", u"ES", u"14"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'LA CORUÑA'
0918             Constant: expr: 'u"LA CORUÑA"'
0918           <-Value: expr: 'u"LA CORUÑA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '15'
0918             Constant: expr: 'u"15"'
0918           <-Value: expr: 'u"15"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"LA CORUÑA", u"ES", u"15"])'
0918         <-Value: expr: 'qsatype.Array([u"LA CORUÑA", u"ES", u"15"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'CUENCA'
0918             Constant: expr: 'u"CUENCA"'
0918           <-Value: expr: 'u"CUENCA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '16'
0918             Constant: expr: 'u"16"'
0918           <-Value: expr: 'u"16"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"CUENCA", u"ES", u"16"])'
0918         <-Value: expr: 'qsatype.Array([u"CUENCA", u"ES", u"16"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'GERONA'
0918             Constant: expr: 'u"GERONA"'
0918           <-Value: expr: 'u"GERONA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '17'
0918             Constant: expr: 'u"17"'
0918           <-Value: expr: 'u"17"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"GERONA", u"ES", u"17"])'
0918         <-Value: expr: 'qsatype.Array([u"GERONA", u"ES", u"17"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'GRANADA'
0918             Constant: expr: 'u"GRANADA"'
0918           <-Value: expr: 'u"GRANADA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '18'
0918             Constant: expr: 'u"18"'
0918           <-Value: expr: 'u"18"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"GRANADA", u"ES", u"18"])'
0918         <-Value: expr: 'qsatype.Array([u"GRANADA", u"ES", u"18"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'GUADALAJARA'
0918             Constant: expr: 'u"GUADALAJARA"'
0918           <-Value: expr: 'u"GUADALAJARA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '19'
0918             Constant: expr: 'u"19"'
0918           <-Value: expr: 'u"19"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"GUADALAJARA", u"ES", u"19"])'
0918         <-Value: expr: 'qsatype.Array([u"GUADALAJARA", u"ES", u"19"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'GUIPUZCOA'
0918             Constant: expr: 'u"GUIPUZCOA"'
0918           <-Value: expr: 'u"GUIPUZCOA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '20'
0918             Constant: expr: 'u"20"'
0918           <-Value: expr: 'u"20"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"GUIPUZCOA", u"ES", u"20"])'
0918         <-Value: expr: 'qsatype.Array([u"GUIPUZCOA", u"ES", u"20"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'HUELVA'
0918             Constant: expr: 'u"HUELVA"'
0918           <-Value: expr: 'u"HUELVA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '21'
0918             Constant: expr: 'u"21"'
0918           <-Value: expr: 'u"21"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"HUELVA", u"ES", u"21"])'
0918         <-Value: expr: 'qsatype.Array([u"HUELVA", u"ES", u"21"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'HUESCA'
0918             Constant: expr: 'u"HUESCA"'
0918           <-Value: expr: 'u"HUESCA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '22'
0918             Constant: expr: 'u"22"'
0918           <-Value: expr: 'u"22"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"HUESCA", u"ES", u"22"])'
0918         <-Value: expr: 'qsatype.Array([u"HUESCA", u"ES", u"22"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'JAEN'
0918             Constant: expr: 'u"JAEN"'
0918           <-Value: expr: 'u"JAEN"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '23'
0918             Constant: expr: 'u"23"'
0918           <-Value: expr: 'u"23"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"JAEN", u"ES", u"23"])'
0918         <-Value: expr: 'qsatype.Array([u"JAEN", u"ES", u"23"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'LEON'
0918             Constant: expr: 'u"LEON"'
0918           <-Value: expr: 'u"LEON"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '24'
0918             Constant: expr: 'u"24"'
0918           <-Value: expr: 'u"24"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"LEON", u"ES", u"24"])'
0918         <-Value: expr: 'qsatype.Array([u"LEON", u"ES", u"24"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'LERIDA'
0918             Constant: expr: 'u"LERIDA"'
0918           <-Value: expr: 'u"LERIDA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '25'
0918             Constant: expr: 'u"25"'
0918           <-Value: expr: 'u"25"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"LERIDA", u"ES", u"25"])'
0918         <-Value: expr: 'qsatype.Array([u"LERIDA", u"ES", u"25"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'LUGO'
0918             Constant: expr: 'u"LUGO"'
0918           <-Value: expr: 'u"LUGO"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '27'
0918             Constant: expr: 'u"27"'
0918           <-Value: expr: 'u"27"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"LUGO", u"ES", u"27"])'
0918         <-Value: expr: 'qsatype.Array([u"LUGO", u"ES", u"27"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'MADRID'
0918             Constant: expr: 'u"MADRID"'
0918           <-Value: expr: 'u"MADRID"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '28'
0918             Constant: expr: 'u"28"'
0918           <-Value: expr: 'u"28"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"MADRID", u"ES", u"28"])'
0918         <-Value: expr: 'qsatype.Array([u"MADRID", u"ES", u"28"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'MALAGA'
0918             Constant: expr: 'u"MALAGA"'
0918           <-Value: expr: 'u"MALAGA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '29'
0918             Constant: expr: 'u"29"'
0918           <-Value: expr: 'u"29"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"MALAGA", u"ES", u"29"])'
0918         <-Value: expr: 'qsatype.Array([u"MALAGA", u"ES", u"29"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'MURCIA'
0918             Constant: expr: 'u"MURCIA"'
0918           <-Value: expr: 'u"MURCIA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '30'
0918             Constant: expr: 'u"30"'
0918           <-Value: expr: 'u"30"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"MURCIA", u"ES", u"30"])'
0918         <-Value: expr: 'qsatype.Array([u"MURCIA", u"ES", u"30"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'NAVARRA'
0918             Constant: expr: 'u"NAVARRA"'
0918           <-Value: expr: 'u"NAVARRA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '31'
0918             Constant: expr: 'u"31"'
0918           <-Value: expr: 'u"31"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"NAVARRA", u"ES", u"31"])'
0918         <-Value: expr: 'qsatype.Array([u"NAVARRA", u"ES", u"31"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ORENSE'
0918             Constant: expr: 'u"ORENSE"'
0918           <-Value: expr: 'u"ORENSE"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '32'
0918             Constant: expr: 'u"32"'
0918           <-Value: expr: 'u"32"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"ORENSE", u"ES", u"32"])'
0918         <-Value: expr: 'qsatype.Array([u"ORENSE", u"ES", u"32"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'PALENCIA'
0918             Constant: expr: 'u"PALENCIA"'
0918           <-Value: expr: 'u"PALENCIA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '34'
0918             Constant: expr: 'u"34"'
0918           <-Value: expr: 'u"34"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"PALENCIA", u"ES", u"34"])'
0918         <-Value: expr: 'qsatype.Array([u"PALENCIA", u"ES", u"34"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'LAS PALMAS'
0918             Constant: expr: 'u"LAS PALMAS"'
0918           <-Value: expr: 'u"LAS PALMAS"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '35'
0918             Constant: expr: 'u"35"'
0918           <-Value: expr: 'u"35"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"LAS PALMAS", u"ES", u"35"])'
0918         <-Value: expr: 'qsatype.Array([u"LAS PALMAS", u"ES", u"35"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'PONTEVEDRA'
0918             Constant: expr: 'u"PONTEVEDRA"'
0918           <-Value: expr: 'u"PONTEVEDRA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '36'
0918             Constant: expr: 'u"36"'
0918           <-Value: expr: 'u"36"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"PONTEVEDRA", u"ES", u"36"])'
0918         <-Value: expr: 'qsatype.Array([u"PONTEVEDRA", u"ES", u"36"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'LA RIOJA'
0918             Constant: expr: 'u"LA RIOJA"'
0918           <-Value: expr: 'u"LA RIOJA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '26'
0918             Constant: expr: 'u"26"'
0918           <-Value: expr: 'u"26"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"LA RIOJA", u"ES", u"26"])'
0918         <-Value: expr: 'qsatype.Array([u"LA RIOJA", u"ES", u"26"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'SALAMANCA'
0918             Constant: expr: 'u"SALAMANCA"'
0918           <-Value: expr: 'u"SALAMANCA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '37'
0918             Constant: expr: 'u"37"'
0918           <-Value: expr: 'u"37"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"SALAMANCA", u"ES", u"37"])'
0918         <-Value: expr: 'qsatype.Array([u"SALAMANCA", u"ES", u"37"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'SEGOVIA'
0918             Constant: expr: 'u"SEGOVIA"'
0918           <-Value: expr: 'u"SEGOVIA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '40'
0918             Constant: expr: 'u"40"'
0918           <-Value: expr: 'u"40"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"SEGOVIA", u"ES", u"40"])'
0918         <-Value: expr: 'qsatype.Array([u"SEGOVIA", u"ES", u"40"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'SEVILLA'
0918             Constant: expr: 'u"SEVILLA"'
0918           <-Value: expr: 'u"SEVILLA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '41'
0918             Constant: expr: 'u"41"'
0918           <-Value: expr: 'u"41"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"SEVILLA", u"ES", u"41"])'
0918         <-Value: expr: 'qsatype.Array([u"SEVILLA", u"ES", u"41"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'SORIA'
0918             Constant: expr: 'u"SORIA"'
0918           <-Value: expr: 'u"SORIA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '42'
0918             Constant: expr: 'u"42"'
0918           <-Value: expr: 'u"42"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"SORIA", u"ES", u"42"])'
0918         <-Value: expr: 'qsatype.Array([u"SORIA", u"ES", u"42"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'TARRAGONA'
0918             Constant: expr: 'u"TARRAGONA"'
0918           <-Value: expr: 'u"TARRAGONA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '43'
0918             Constant: expr: 'u"43"'
0918           <-Value: expr: 'u"43"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"TARRAGONA", u"ES", u"43"])'
0918         <-Value: expr: 'qsatype.Array([u"TARRAGONA", u"ES", u"43"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'SANTA CRUZ DE TENERIFE'
0918             Constant: expr: 'u"SANTA CRUZ DE TENERIFE"'
0918           <-Value: expr: 'u"SANTA CRUZ DE TENERIFE"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '38'
0918             Constant: expr: 'u"38"'
0918           <-Value: expr: 'u"38"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"SANTA CRUZ DE TENERIFE", u"ES", u"38"])'
0918         <-Value: expr: 'qsatype.Array([u"SANTA CRUZ DE TENERIFE", u"ES", u"38"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'TERUEL'
0918             Constant: expr: 'u"TERUEL"'
0918           <-Value: expr: 'u"TERUEL"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '44'
0918             Constant: expr: 'u"44"'
0918           <-Value: expr: 'u"44"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"TERUEL", u"ES", u"44"])'
0918         <-Value: expr: 'qsatype.Array([u"TERUEL", u"ES", u"44"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'TOLEDO'
0918             Constant: expr: 'u"TOLEDO"'
0918           <-Value: expr: 'u"TOLEDO"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '45'
0918             Constant: expr: 'u"45"'
0918           <-Value: expr: 'u"45"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"TOLEDO", u"ES", u"45"])'
0918         <-Value: expr: 'qsatype.Array([u"TOLEDO", u"ES", u"45"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'VALENCIA'
0918             Constant: expr: 'u"VALENCIA"'
0918           <-Value: expr: 'u"VALENCIA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '46'
0918             Constant: expr: 'u"46"'
0918           <-Value: expr: 'u"46"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"VALENCIA", u"ES", u"46"])'
0918         <-Value: expr: 'qsatype.Array([u"VALENCIA", u"ES", u"46"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'VALLADOLID'
0918             Constant: expr: 'u"VALLADOLID"'
0918           <-Value: expr: 'u"VALLADOLID"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '47'
0918             Constant: expr: 'u"47"'
0918           <-Value: expr: 'u"47"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"VALLADOLID", u"ES", u"47"])'
0918         <-Value: expr: 'qsatype.Array([u"VALLADOLID", u"ES", u"47"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'VIZCAYA'
0918             Constant: expr: 'u"VIZCAYA"'
0918           <-Value: expr: 'u"VIZCAYA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '48'
0918             Constant: expr: 'u"48"'
0918           <-Value: expr: 'u"48"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"VIZCAYA", u"ES", u"48"])'
0918         <-Value: expr: 'qsatype.Array([u"VIZCAYA", u"ES", u"48"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ZAMORA'
0918             Constant: expr: 'u"ZAMORA"'
0918           <-Value: expr: 'u"ZAMORA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '49'
0918             Constant: expr: 'u"49"'
0918           <-Value: expr: 'u"49"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"ZAMORA", u"ES", u"49"])'
0918         <-Value: expr: 'qsatype.Array([u"ZAMORA", u"ES", u"49"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Value: begin-gen
0918          Constant: begin-gen
0918           Constant: ctype: None -> None
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ZARAGOZA'
0918             Constant: expr: 'u"ZARAGOZA"'
0918           <-Value: expr: 'u"ZARAGOZA"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> 'ES'
0918             Constant: expr: 'u"ES"'
0918           <-Value: expr: 'u"ES"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Value: begin-gen
0918            Constant: begin-gen
0918             Constant: ctype: 'String' -> '50'
0918             Constant: expr: 'u"50"'
0918           <-Value: expr: 'u"50"'
0918            Constant: end-gen
0918           Value: end-gen
0918           Constant: expr: 'qsatype.Array([u"ZARAGOZA", u"ES", u"50"])'
0918         <-Value: expr: 'qsatype.Array([u"ZARAGOZA", u"ES", u"50"])'
0918          Constant: end-gen
0918         Value: end-gen
0918         Constant: expr: 'qsatype.Array([qsatype.Array([u"ALAVA", u"ES", u"01"]), qsatype.Array([u"ALBACETE", u"ES", u"02"]), qsatype.Array([u"ALICANTE", u"ES", u"03"]), qsatype.Array([u"ALMERIA", u"ES", u"04"]), qsatype.Array([u"ASTURIAS", u"ES", u"33"]), qsatype.Array([u"AVILA", u"ES", u"05"]), qsatype.Array([u"BADAJOZ", u"ES", u"06"]), qsatype.Array([u"BALEARES", u"ES", u"07"]), qsatype.Array([u"BARCELONA", u"ES", u"08"]), qsatype.Array([u"BURGOS", u"ES", u"09"]), qsatype.Array([u"CACERES", u"ES", u"10"]), qsatype.Array([u"CADIZ", u"ES", u"11"]), qsatype.Array([u"CANTABRIA", u"ES", u"39"]), qsatype.Array([u"CASTELLON", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"13"]), qsatype.Array([u"CORDOBA", u"ES", u"14"]), qsatype.Array([u"LA CORUÑA", u"ES", u"15"]), qsatype.Array([u"CUENCA", u"ES", u"16"]), qsatype.Array([u"GERONA", u"ES", u"17"]), qsatype.Array([u"GRANADA", u"ES", u"18"]), qsatype.Array([u"GUADALAJARA", u"ES", u"19"]), qsatype.Array([u"GUIPUZCOA", u"ES", u"20"]), qsatype.Array([u"HUELVA", u"ES", u"21"]), qsatype.Array([u"HUESCA", u"ES", u"22"]), qsatype.Array([u"JAEN", u"ES", u"23"]), qsatype.Array([u"LEON", u"ES", u"24"]), qsatype.Array([u"LERIDA", u"ES", u"25"]), qsatype.Array([u"LUGO", u"ES", u"27"]), qsatype.Array([u"MADRID", u"ES", u"28"]), qsatype.Array([u"MALAGA", u"ES", u"29"]), qsatype.Array([u"MURCIA", u"ES", u"30"]), qsatype.Array([u"NAVARRA", u"ES", u"31"]), qsatype.Array([u"ORENSE", u"ES", u"32"]), qsatype.Array([u"PALENCIA", u"ES", u"34"]), qsatype.Array([u"LAS PALMAS", u"ES", u"35"]), qsatype.Array([u"PONTEVEDRA", u"ES", u"36"]), qsatype.Array([u"LA RIOJA", u"ES", u"26"]), qsatype.Array([u"SALAMANCA", u"ES", u"37"]), qsatype.Array([u"SEGOVIA", u"ES", u"40"]), qsatype.Array([u"SEVILLA", u"ES", u"41"]), qsatype.Array([u"SORIA", u"ES", u"42"]), qsatype.Array([u"TARRAGONA", u"ES", u"43"]), qsatype.Array([u"SANTA CRUZ DE TENERIFE", u"ES", u"38"]), qsatype.Array([u"TERUEL", u"ES", u"44"]), qsatype.Array([u"TOLEDO", u"ES", u"45"]), qsatype.Array([u"VALENCIA", u"ES", u"46"]), qsatype.Array([u"VALLADOLID", u"ES", u"47"]), qsatype.Array([u"VIZCAYA", u"ES", u"48"]), qsatype.Array([u"ZAMORA", u"ES", u"49"]), qsatype.Array([u"ZARAGOZA", u"ES", u"50"])])'
0918       <-Value: expr: 'qsatype.Array([qsatype.Array([u"ALAVA", u"ES", u"01"]), qsatype.Array([u"ALBACETE", u"ES", u"02"]), qsatype.Array([u"ALICANTE", u"ES", u"03"]), qsatype.Array([u"ALMERIA", u"ES", u"04"]), qsatype.Array([u"ASTURIAS", u"ES", u"33"]), qsatype.Array([u"AVILA", u"ES", u"05"]), qsatype.Array([u"BADAJOZ", u"ES", u"06"]), qsatype.Array([u"BALEARES", u"ES", u"07"]), qsatype.Array([u"BARCELONA", u"ES", u"08"]), qsatype.Array([u"BURGOS", u"ES", u"09"]), qsatype.Array([u"CACERES", u"ES", u"10"]), qsatype.Array([u"CADIZ", u"ES", u"11"]), qsatype.Array([u"CANTABRIA", u"ES", u"39"]), qsatype.Array([u"CASTELLON", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"13"]), qsatype.Array([u"CORDOBA", u"ES", u"14"]), qsatype.Array([u"LA CORUÑA", u"ES", u"15"]), qsatype.Array([u"CUENCA", u"ES", u"16"]), qsatype.Array([u"GERONA", u"ES", u"17"]), qsatype.Array([u"GRANADA", u"ES", u"18"]), qsatype.Array([u"GUADALAJARA", u"ES", u"19"]), qsatype.Array([u"GUIPUZCOA", u"ES", u"20"]), qsatype.Array([u"HUELVA", u"ES", u"21"]), qsatype.Array([u"HUESCA", u"ES", u"22"]), qsatype.Array([u"JAEN", u"ES", u"23"]), qsatype.Array([u"LEON", u"ES", u"24"]), qsatype.Array([u"LERIDA", u"ES", u"25"]), qsatype.Array([u"LUGO", u"ES", u"27"]), qsatype.Array([u"MADRID", u"ES", u"28"]), qsatype.Array([u"MALAGA", u"ES", u"29"]), qsatype.Array([u"MURCIA", u"ES", u"30"]), qsatype.Array([u"NAVARRA", u"ES", u"31"]), qsatype.Array([u"ORENSE", u"ES", u"32"]), qsatype.Array([u"PALENCIA", u"ES", u"34"]), qsatype.Array([u"LAS PALMAS", u"ES", u"35"]), qsatype.Array([u"PONTEVEDRA", u"ES", u"36"]), qsatype.Array([u"LA RIOJA", u"ES", u"26"]), qsatype.Array([u"SALAMANCA", u"ES", u"37"]), qsatype.Array([u"SEGOVIA", u"ES", u"40"]), qsatype.Array([u"SEVILLA", u"ES", u"41"]), qsatype.Array([u"SORIA", u"ES", u"42"]), qsatype.Array([u"TARRAGONA", u"ES", u"43"]), qsatype.Array([u"SANTA CRUZ DE TENERIFE", u"ES", u"38"]), qsatype.Array([u"TERUEL", u"ES", u"44"]), qsatype.Array([u"TOLEDO", u"ES", u"45"]), qsatype.Array([u"VALENCIA", u"ES", u"46"]), qsatype.Array([u"VALLADOLID", u"ES", u"47"]), qsatype.Array([u"VIZCAYA", u"ES", u"48"]), qsatype.Array([u"ZAMORA", u"ES", u"49"]), qsatype.Array([u"ZARAGOZA", u"ES", u"50"])])'
0918      <--Variable: expr: 'qsatype.Array([qsatype.Array([u"ALAVA", u"ES", u"01"]), qsatype.Array([u"ALBACETE", u"ES", u"02"]), qsatype.Array([u"ALICANTE", u"ES", u"03"]), qsatype.Array([u"ALMERIA", u"ES", u"04"]), qsatype.Array([u"ASTURIAS", u"ES", u"33"]), qsatype.Array([u"AVILA", u"ES", u"05"]), qsatype.Array([u"BADAJOZ", u"ES", u"06"]), qsatype.Array([u"BALEARES", u"ES", u"07"]), qsatype.Array([u"BARCELONA", u"ES", u"08"]), qsatype.Array([u"BURGOS", u"ES", u"09"]), qsatype.Array([u"CACERES", u"ES", u"10"]), qsatype.Array([u"CADIZ", u"ES", u"11"]), qsatype.Array([u"CANTABRIA", u"ES", u"39"]), qsatype.Array([u"CASTELLON", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"13"]), qsatype.Array([u"CORDOBA", u"ES", u"14"]), qsatype.Array([u"LA CORUÑA", u"ES", u"15"]), qsatype.Array([u"CUENCA", u"ES", u"16"]), qsatype.Array([u"GERONA", u"ES", u"17"]), qsatype.Array([u"GRANADA", u"ES", u"18"]), qsatype.Array([u"GUADALAJARA", u"ES", u"19"]), qsatype.Array([u"GUIPUZCOA", u"ES", u"20"]), qsatype.Array([u"HUELVA", u"ES", u"21"]), qsatype.Array([u"HUESCA", u"ES", u"22"]), qsatype.Array([u"JAEN", u"ES", u"23"]), qsatype.Array([u"LEON", u"ES", u"24"]), qsatype.Array([u"LERIDA", u"ES", u"25"]), qsatype.Array([u"LUGO", u"ES", u"27"]), qsatype.Array([u"MADRID", u"ES", u"28"]), qsatype.Array([u"MALAGA", u"ES", u"29"]), qsatype.Array([u"MURCIA", u"ES", u"30"]), qsatype.Array([u"NAVARRA", u"ES", u"31"]), qsatype.Array([u"ORENSE", u"ES", u"32"]), qsatype.Array([u"PALENCIA", u"ES", u"34"]), qsatype.Array([u"LAS PALMAS", u"ES", u"35"]), qsatype.Array([u"PONTEVEDRA", u"ES", u"36"]), qsatype.Array([u"LA RIOJA", u"ES", u"26"]), qsatype.Array([u"SALAMANCA", u"ES", u"37"]), qsatype.Array([u"SEGOVIA", u"ES", u"40"]), qsatype.Array([u"SEVILLA", u"ES", u"41"]), qsatype.Array([u"SORIA", u"ES", u"42"]), qsatype.Array([u"TARRAGONA", u"ES", u"43"]), qsatype.Array([u"SANTA CRUZ DE TENERIFE", u"ES", u"38"]), qsatype.Array([u"TERUEL", u"ES", u"44"]), qsatype.Array([u"TOLEDO", u"ES", u"45"]), qsatype.Array([u"VALENCIA", u"ES", u"46"]), qsatype.Array([u"VALLADOLID", u"ES", u"47"]), qsatype.Array([u"VIZCAYA", u"ES", u"48"]), qsatype.Array([u"ZAMORA", u"ES", u"49"]), qsatype.Array([u"ZARAGOZA", u"ES", u"50"])])'
0918        Constant: end-gen
0918       Value: end-gen
0918      Variable: end-gen
0918      DeclarationBlock: line: 'provincias = qsatype.Array([qsatype.Array([u"ALAVA", u"ES", u"01"]), qsatype.Array([u"ALBACETE", u"ES", u"02"]), qsatype.Array([u"ALICANTE", u"ES", u"03"]), qsatype.Array([u"ALMERIA", u"ES", u"04"]), qsatype.Array([u"ASTURIAS", u"ES", u"33"]), qsatype.Array([u"AVILA", u"ES", u"05"]), qsatype.Array([u"BADAJOZ", u"ES", u"06"]), qsatype.Array([u"BALEARES", u"ES", u"07"]), qsatype.Array([u"BARCELONA", u"ES", u"08"]), qsatype.Array([u"BURGOS", u"ES", u"09"]), qsatype.Array([u"CACERES", u"ES", u"10"]), qsatype.Array([u"CADIZ", u"ES", u"11"]), qsatype.Array([u"CANTABRIA", u"ES", u"39"]), qsatype.Array([u"CASTELLON", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"13"]), qsatype.Array([u"CORDOBA", u"ES", u"14"]), qsatype.Array([u"LA CORUÑA", u"ES", u"15"]), qsatype.Array([u"CUENCA", u"ES", u"16"]), qsatype.Array([u"GERONA", u"ES", u"17"]), qsatype.Array([u"GRANADA", u"ES", u"18"]), qsatype.Array([u"GUADALAJARA", u"ES", u"19"]), qsatype.Array([u"GUIPUZCOA", u"ES", u"20"]), qsatype.Array([u"HUELVA", u"ES", u"21"]), qsatype.Array([u"HUESCA", u"ES", u"22"]), qsatype.Array([u"JAEN", u"ES", u"23"]), qsatype.Array([u"LEON", u"ES", u"24"]), qsatype.Array([u"LERIDA", u"ES", u"25"]), qsatype.Array([u"LUGO", u"ES", u"27"]), qsatype.Array([u"MADRID", u"ES", u"28"]), qsatype.Array([u"MALAGA", u"ES", u"29"]), qsatype.Array([u"MURCIA", u"ES", u"30"]), qsatype.Array([u"NAVARRA", u"ES", u"31"]), qsatype.Array([u"ORENSE", u"ES", u"32"]), qsatype.Array([u"PALENCIA", u"ES", u"34"]), qsatype.Array([u"LAS PALMAS", u"ES", u"35"]), qsatype.Array([u"PONTEVEDRA", u"ES", u"36"]), qsatype.Array([u"LA RIOJA", u"ES", u"26"]), qsatype.Array([u"SALAMANCA", u"ES", u"37"]), qsatype.Array([u"SEGOVIA", u"ES", u"40"]), qsatype.Array([u"SEVILLA", u"ES", u"41"]), qsatype.Array([u"SORIA", u"ES", u"42"]), qsatype.Array([u"TARRAGONA", u"ES", u"43"]), qsatype.Array([u"SANTA CRUZ DE TENERIFE", u"ES", u"38"]), qsatype.Array([u"TERUEL", u"ES", u"44"]), qsatype.Array([u"TOLEDO", u"ES", u"45"]), qsatype.Array([u"VALENCIA", u"ES", u"46"]), qsatype.Array([u"VALLADOLID", u"ES", u"47"]), qsatype.Array([u"VIZCAYA", u"ES", u"48"]), qsatype.Array([u"ZAMORA", u"ES", u"49"]), qsatype.Array([u"ZARAGOZA", u"ES", u"50"])])'
0918    <-Source: line: 'provincias = qsatype.Array([qsatype.Array([u"ALAVA", u"ES", u"01"]), qsatype.Array([u"ALBACETE", u"ES", u"02"]), qsatype.Array([u"ALICANTE", u"ES", u"03"]), qsatype.Array([u"ALMERIA", u"ES", u"04"]), qsatype.Array([u"ASTURIAS", u"ES", u"33"]), qsatype.Array([u"AVILA", u"ES", u"05"]), qsatype.Array([u"BADAJOZ", u"ES", u"06"]), qsatype.Array([u"BALEARES", u"ES", u"07"]), qsatype.Array([u"BARCELONA", u"ES", u"08"]), qsatype.Array([u"BURGOS", u"ES", u"09"]), qsatype.Array([u"CACERES", u"ES", u"10"]), qsatype.Array([u"CADIZ", u"ES", u"11"]), qsatype.Array([u"CANTABRIA", u"ES", u"39"]), qsatype.Array([u"CASTELLON", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"13"]), qsatype.Array([u"CORDOBA", u"ES", u"14"]), qsatype.Array([u"LA CORUÑA", u"ES", u"15"]), qsatype.Array([u"CUENCA", u"ES", u"16"]), qsatype.Array([u"GERONA", u"ES", u"17"]), qsatype.Array([u"GRANADA", u"ES", u"18"]), qsatype.Array([u"GUADALAJARA", u"ES", u"19"]), qsatype.Array([u"GUIPUZCOA", u"ES", u"20"]), qsatype.Array([u"HUELVA", u"ES", u"21"]), qsatype.Array([u"HUESCA", u"ES", u"22"]), qsatype.Array([u"JAEN", u"ES", u"23"]), qsatype.Array([u"LEON", u"ES", u"24"]), qsatype.Array([u"LERIDA", u"ES", u"25"]), qsatype.Array([u"LUGO", u"ES", u"27"]), qsatype.Array([u"MADRID", u"ES", u"28"]), qsatype.Array([u"MALAGA", u"ES", u"29"]), qsatype.Array([u"MURCIA", u"ES", u"30"]), qsatype.Array([u"NAVARRA", u"ES", u"31"]), qsatype.Array([u"ORENSE", u"ES", u"32"]), qsatype.Array([u"PALENCIA", u"ES", u"34"]), qsatype.Array([u"LAS PALMAS", u"ES", u"35"]), qsatype.Array([u"PONTEVEDRA", u"ES", u"36"]), qsatype.Array([u"LA RIOJA", u"ES", u"26"]), qsatype.Array([u"SALAMANCA", u"ES", u"37"]), qsatype.Array([u"SEGOVIA", u"ES", u"40"]), qsatype.Array([u"SEVILLA", u"ES", u"41"]), qsatype.Array([u"SORIA", u"ES", u"42"]), qsatype.Array([u"TARRAGONA", u"ES", u"43"]), qsatype.Array([u"SANTA CRUZ DE TENERIFE", u"ES", u"38"]), qsatype.Array([u"TERUEL", u"ES", u"44"]), qsatype.Array([u"TOLEDO", u"ES", u"45"]), qsatype.Array([u"VALENCIA", u"ES", u"46"]), qsatype.Array([u"VALLADOLID", u"ES", u"47"]), qsatype.Array([u"VIZCAYA", u"ES", u"48"]), qsatype.Array([u"ZAMORA", u"ES", u"49"]), qsatype.Array([u"ZARAGOZA", u"ES", u"50"])])'
0918   <--Function: line: 'provincias = qsatype.Array([qsatype.Array([u"ALAVA", u"ES", u"01"]), qsatype.Array([u"ALBACETE", u"ES", u"02"]), qsatype.Array([u"ALICANTE", u"ES", u"03"]), qsatype.Array([u"ALMERIA", u"ES", u"04"]), qsatype.Array([u"ASTURIAS", u"ES", u"33"]), qsatype.Array([u"AVILA", u"ES", u"05"]), qsatype.Array([u"BADAJOZ", u"ES", u"06"]), qsatype.Array([u"BALEARES", u"ES", u"07"]), qsatype.Array([u"BARCELONA", u"ES", u"08"]), qsatype.Array([u"BURGOS", u"ES", u"09"]), qsatype.Array([u"CACERES", u"ES", u"10"]), qsatype.Array([u"CADIZ", u"ES", u"11"]), qsatype.Array([u"CANTABRIA", u"ES", u"39"]), qsatype.Array([u"CASTELLON", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"13"]), qsatype.Array([u"CORDOBA", u"ES", u"14"]), qsatype.Array([u"LA CORUÑA", u"ES", u"15"]), qsatype.Array([u"CUENCA", u"ES", u"16"]), qsatype.Array([u"GERONA", u"ES", u"17"]), qsatype.Array([u"GRANADA", u"ES", u"18"]), qsatype.Array([u"GUADALAJARA", u"ES", u"19"]), qsatype.Array([u"GUIPUZCOA", u"ES", u"20"]), qsatype.Array([u"HUELVA", u"ES", u"21"]), qsatype.Array([u"HUESCA", u"ES", u"22"]), qsatype.Array([u"JAEN", u"ES", u"23"]), qsatype.Array([u"LEON", u"ES", u"24"]), qsatype.Array([u"LERIDA", u"ES", u"25"]), qsatype.Array([u"LUGO", u"ES", u"27"]), qsatype.Array([u"MADRID", u"ES", u"28"]), qsatype.Array([u"MALAGA", u"ES", u"29"]), qsatype.Array([u"MURCIA", u"ES", u"30"]), qsatype.Array([u"NAVARRA", u"ES", u"31"]), qsatype.Array([u"ORENSE", u"ES", u"32"]), qsatype.Array([u"PALENCIA", u"ES", u"34"]), qsatype.Array([u"LAS PALMAS", u"ES", u"35"]), qsatype.Array([u"PONTEVEDRA", u"ES", u"36"]), qsatype.Array([u"LA RIOJA", u"ES", u"26"]), qsatype.Array([u"SALAMANCA", u"ES", u"37"]), qsatype.Array([u"SEGOVIA", u"ES", u"40"]), qsatype.Array([u"SEVILLA", u"ES", u"41"]), qsatype.Array([u"SORIA", u"ES", u"42"]), qsatype.Array([u"TARRAGONA", u"ES", u"43"]), qsatype.Array([u"SANTA CRUZ DE TENERIFE", u"ES", u"38"]), qsatype.Array([u"TERUEL", u"ES", u"44"]), qsatype.Array([u"TOLEDO", u"ES", u"45"]), qsatype.Array([u"VALENCIA", u"ES", u"46"]), qsatype.Array([u"VALLADOLID", u"ES", u"47"]), qsatype.Array([u"VIZCAYA", u"ES", u"48"]), qsatype.Array([u"ZAMORA", u"ES", u"49"]), qsatype.Array([u"ZARAGOZA", u"ES", u"50"])])'
0918  <---Source: line: 'provincias = qsatype.Array([qsatype.Array([u"ALAVA", u"ES", u"01"]), qsatype.Array([u"ALBACETE", u"ES", u"02"]), qsatype.Array([u"ALICANTE", u"ES", u"03"]), qsatype.Array([u"ALMERIA", u"ES", u"04"]), qsatype.Array([u"ASTURIAS", u"ES", u"33"]), qsatype.Array([u"AVILA", u"ES", u"05"]), qsatype.Array([u"BADAJOZ", u"ES", u"06"]), qsatype.Array([u"BALEARES", u"ES", u"07"]), qsatype.Array([u"BARCELONA", u"ES", u"08"]), qsatype.Array([u"BURGOS", u"ES", u"09"]), qsatype.Array([u"CACERES", u"ES", u"10"]), qsatype.Array([u"CADIZ", u"ES", u"11"]), qsatype.Array([u"CANTABRIA", u"ES", u"39"]), qsatype.Array([u"CASTELLON", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"13"]), qsatype.Array([u"CORDOBA", u"ES", u"14"]), qsatype.Array([u"LA CORUÑA", u"ES", u"15"]), qsatype.Array([u"CUENCA", u"ES", u"16"]), qsatype.Array([u"GERONA", u"ES", u"17"]), qsatype.Array([u"GRANADA", u"ES", u"18"]), qsatype.Array([u"GUADALAJARA", u"ES", u"19"]), qsatype.Array([u"GUIPUZCOA", u"ES", u"20"]), qsatype.Array([u"HUELVA", u"ES", u"21"]), qsatype.Array([u"HUESCA", u"ES", u"22"]), qsatype.Array([u"JAEN", u"ES", u"23"]), qsatype.Array([u"LEON", u"ES", u"24"]), qsatype.Array([u"LERIDA", u"ES", u"25"]), qsatype.Array([u"LUGO", u"ES", u"27"]), qsatype.Array([u"MADRID", u"ES", u"28"]), qsatype.Array([u"MALAGA", u"ES", u"29"]), qsatype.Array([u"MURCIA", u"ES", u"30"]), qsatype.Array([u"NAVARRA", u"ES", u"31"]), qsatype.Array([u"ORENSE", u"ES", u"32"]), qsatype.Array([u"PALENCIA", u"ES", u"34"]), qsatype.Array([u"LAS PALMAS", u"ES", u"35"]), qsatype.Array([u"PONTEVEDRA", u"ES", u"36"]), qsatype.Array([u"LA RIOJA", u"ES", u"26"]), qsatype.Array([u"SALAMANCA", u"ES", u"37"]), qsatype.Array([u"SEGOVIA", u"ES", u"40"]), qsatype.Array([u"SEVILLA", u"ES", u"41"]), qsatype.Array([u"SORIA", u"ES", u"42"]), qsatype.Array([u"TARRAGONA", u"ES", u"43"]), qsatype.Array([u"SANTA CRUZ DE TENERIFE", u"ES", u"38"]), qsatype.Array([u"TERUEL", u"ES", u"44"]), qsatype.Array([u"TOLEDO", u"ES", u"45"]), qsatype.Array([u"VALENCIA", u"ES", u"46"]), qsatype.Array([u"VALLADOLID", u"ES", u"47"]), qsatype.Array([u"VIZCAYA", u"ES", u"48"]), qsatype.Array([u"ZAMORA", u"ES", u"49"]), qsatype.Array([u"ZARAGOZA", u"ES", u"50"])])'
0918 <----Class: line: 'provincias = qsatype.Array([qsatype.Array([u"ALAVA", u"ES", u"01"]), qsatype.Array([u"ALBACETE", u"ES", u"02"]), qsatype.Array([u"ALICANTE", u"ES", u"03"]), qsatype.Array([u"ALMERIA", u"ES", u"04"]), qsatype.Array([u"ASTURIAS", u"ES", u"33"]), qsatype.Array([u"AVILA", u"ES", u"05"]), qsatype.Array([u"BADAJOZ", u"ES", u"06"]), qsatype.Array([u"BALEARES", u"ES", u"07"]), qsatype.Array([u"BARCELONA", u"ES", u"08"]), qsatype.Array([u"BURGOS", u"ES", u"09"]), qsatype.Array([u"CACERES", u"ES", u"10"]), qsatype.Array([u"CADIZ", u"ES", u"11"]), qsatype.Array([u"CANTABRIA", u"ES", u"39"]), qsatype.Array([u"CASTELLON", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"13"]), qsatype.Array([u"CORDOBA", u"ES", u"14"]), qsatype.Array([u"LA CORUÑA", u"ES", u"15"]), qsatype.Array([u"CUENCA", u"ES", u"16"]), qsatype.Array([u"GERONA", u"ES", u"17"]), qsatype.Array([u"GRANADA", u"ES", u"18"]), qsatype.Array([u"GUADALAJARA", u"ES", u"19"]), qsatype.Array([u"GUIPUZCOA", u"ES", u"20"]), qsatype.Array([u"HUELVA", u"ES", u"21"]), qsatype.Array([u"HUESCA", u"ES", u"22"]), qsatype.Array([u"JAEN", u"ES", u"23"]), qsatype.Array([u"LEON", u"ES", u"24"]), qsatype.Array([u"LERIDA", u"ES", u"25"]), qsatype.Array([u"LUGO", u"ES", u"27"]), qsatype.Array([u"MADRID", u"ES", u"28"]), qsatype.Array([u"MALAGA", u"ES", u"29"]), qsatype.Array([u"MURCIA", u"ES", u"30"]), qsatype.Array([u"NAVARRA", u"ES", u"31"]), qsatype.Array([u"ORENSE", u"ES", u"32"]), qsatype.Array([u"PALENCIA", u"ES", u"34"]), qsatype.Array([u"LAS PALMAS", u"ES", u"35"]), qsatype.Array([u"PONTEVEDRA", u"ES", u"36"]), qsatype.Array([u"LA RIOJA", u"ES", u"26"]), qsatype.Array([u"SALAMANCA", u"ES", u"37"]), qsatype.Array([u"SEGOVIA", u"ES", u"40"]), qsatype.Array([u"SEVILLA", u"ES", u"41"]), qsatype.Array([u"SORIA", u"ES", u"42"]), qsatype.Array([u"TARRAGONA", u"ES", u"43"]), qsatype.Array([u"SANTA CRUZ DE TENERIFE", u"ES", u"38"]), qsatype.Array([u"TERUEL", u"ES", u"44"]), qsatype.Array([u"TOLEDO", u"ES", u"45"]), qsatype.Array([u"VALENCIA", u"ES", u"46"]), qsatype.Array([u"VALLADOLID", u"ES", u"47"]), qsatype.Array([u"VIZCAYA", u"ES", u"48"]), qsatype.Array([u"ZAMORA", u"ES", u"49"]), qsatype.Array([u"ZARAGOZA", u"ES", u"50"])])'
0918<-----Source: line: 'provincias = qsatype.Array([qsatype.Array([u"ALAVA", u"ES", u"01"]), qsatype.Array([u"ALBACETE", u"ES", u"02"]), qsatype.Array([u"ALICANTE", u"ES", u"03"]), qsatype.Array([u"ALMERIA", u"ES", u"04"]), qsatype.Array([u"ASTURIAS", u"ES", u"33"]), qsatype.Array([u"AVILA", u"ES", u"05"]), qsatype.Array([u"BADAJOZ", u"ES", u"06"]), qsatype.Array([u"BALEARES", u"ES", u"07"]), qsatype.Array([u"BARCELONA", u"ES", u"08"]), qsatype.Array([u"BURGOS", u"ES", u"09"]), qsatype.Array([u"CACERES", u"ES", u"10"]), qsatype.Array([u"CADIZ", u"ES", u"11"]), qsatype.Array([u"CANTABRIA", u"ES", u"39"]), qsatype.Array([u"CASTELLON", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"12"]), qsatype.Array([u"CIUDAD REAL", u"ES", u"13"]), qsatype.Array([u"CORDOBA", u"ES", u"14"]), qsatype.Array([u"LA CORUÑA", u"ES", u"15"]), qsatype.Array([u"CUENCA", u"ES", u"16"]), qsatype.Array([u"GERONA", u"ES", u"17"]), qsatype.Array([u"GRANADA", u"ES", u"18"]), qsatype.Array([u"GUADALAJARA", u"ES", u"19"]), qsatype.Array([u"GUIPUZCOA", u"ES", u"20"]), qsatype.Array([u"HUELVA", u"ES", u"21"]), qsatype.Array([u"HUESCA", u"ES", u"22"]), qsatype.Array([u"JAEN", u"ES", u"23"]), qsatype.Array([u"LEON", u"ES", u"24"]), qsatype.Array([u"LERIDA", u"ES", u"25"]), qsatype.Array([u"LUGO", u"ES", u"27"]), qsatype.Array([u"MADRID", u"ES", u"28"]), qsatype.Array([u"MALAGA", u"ES", u"29"]), qsatype.Array([u"MURCIA", u"ES", u"30"]), qsatype.Array([u"NAVARRA", u"ES", u"31"]), qsatype.Array([u"ORENSE", u"ES", u"32"]), qsatype.Array([u"PALENCIA", u"ES", u"34"]), qsatype.Array([u"LAS PALMAS", u"ES", u"35"]), qsatype.Array([u"PONTEVEDRA", u"ES", u"36"]), qsatype.Array([u"LA RIOJA", u"ES", u"26"]), qsatype.Array([u"SALAMANCA", u"ES", u"37"]), qsatype.Array([u"SEGOVIA", u"ES", u"40"]), qsatype.Array([u"SEVILLA", u"ES", u"41"]), qsatype.Array([u"SORIA", u"ES", u"42"]), qsatype.Array([u"TARRAGONA", u"ES", u"43"]), qsatype.Array([u"SANTA CRUZ DE TENERIFE", u"ES", u"38"]), qsatype.Array([u"TERUEL", u"ES", u"44"]), qsatype.Array([u"TOLEDO", u"ES", u"45"]), qsatype.Array([u"VALENCIA", u"ES", u"46"]), qsatype.Array([u"VALLADOLID", u"ES", u"47"]), qsatype.Array([u"VIZCAYA", u"ES", u"48"]), qsatype.Array([u"ZAMORA", u"ES", u"49"]), qsatype.Array([u"ZARAGOZA", u"ES", u"50"])])'
0919     DeclarationBlock: end-gen
0919     DeclarationBlock: begin-gen
0919      Variable: begin-gen
0919       Variable: expr: 'codPaisProvincia'
0919       Variable: expr: '='
0919       Variable: expr: '""'
0919      Variable: end-gen
0919      DeclarationBlock: line: 'codPaisProvincia = ""'
0919    <-Source: line: 'codPaisProvincia = ""'
0919   <--Function: line: 'codPaisProvincia = ""'
0919  <---Source: line: 'codPaisProvincia = ""'
0919 <----Class: line: 'codPaisProvincia = ""'
0919<-----Source: line: 'codPaisProvincia = ""'
0920     DeclarationBlock: end-gen
0920     For: begin-gen
0920      Variable: begin-gen
0920       Variable: expr: 'i'
0920       Variable: expr: '='
0920       Value: begin-gen
0920        Constant: begin-gen
0920         Constant: ctype: 'Number' -> '0'
0920         Constant: expr: '0'
0920       <-Value: expr: '0'
0920      <--Variable: expr: '0'
0920        Constant: end-gen
0920       Value: end-gen
0920      Variable: end-gen
0920      For: line: 'i = 0'
0920    <-Source: line: 'i = 0'
0920   <--Function: line: 'i = 0'
0920  <---Source: line: 'i = 0'
0920 <----Class: line: 'i = 0'
0920<-----Source: line: 'i = 0'
0921      For: line: 'while_pass = True'
0921    <-Source: line: 'while_pass = True'
0921   <--Function: line: 'while_pass = True'
0921  <---Source: line: 'while_pass = True'
0921 <----Class: line: 'while_pass = True'
0921<-----Source: line: 'while_pass = True'
0922      InlineUpdate: begin-gen
0922       Identifier: begin-gen
0922        Identifier: expr: 'i'
0922       Identifier: end-gen
0922       InlineUpdate: expr: 'i'
0922       InlineUpdate: line+1: 'i += 1'
0922      InlineUpdate: end-gen
0922      Expression: begin-gen
0922       Identifier: begin-gen
0922        Identifier: expr: 'i'
0922      <-Expression: expr: 'i'
0922       Identifier: end-gen
0922       Compare: begin-gen
0922        Compare: expr: '<'
0922      <-Expression: expr: '<'
0922       Compare: end-gen
0922       Member: begin-gen
0922        Identifier: begin-gen
0922         Identifier: expr: 'provincias'
0922        Identifier: end-gen
0922        Identifier: begin-gen
0922         Identifier: expr: 'length'
0922        Identifier: end-gen
0922        Member: expr: 'len(provincias)'
0922      <-Expression: expr: 'len(provincias)'
0922       Member: end-gen
0922      Expression: end-gen
0922      For: line: 'while i < len(provincias):'
0922    <-Source: line: 'while i < len(provincias):'
0922   <--Function: line: 'while i < len(provincias):'
0922  <---Source: line: 'while i < len(provincias):'
0922 <----Class: line: 'while i < len(provincias):'
0922<-----Source: line: 'while i < len(provincias):'
0923      For: begin: 'block-for'
0923    <-Source: begin: 'block-for'
0923   <--Function: begin: 'block-for'
0923  <---Source: begin: 'block-for'
0923 <----Class: begin: 'block-for'
0923<-----Source: begin: 'block-for'
0923      For: line: 'if not while_pass:'
0923    <-Source: line: 'if not while_pass:'
0923   <--Function: line: 'if not while_pass:'
0923  <---Source: line: 'if not while_pass:'
0923 <----Class: line: 'if not while_pass:'
0923<-----Source: line: 'if not while_pass:'
0924      For: begin: 'block-while_pass'
0924    <-Source: begin: 'block-while_pass'
0924   <--Function: begin: 'block-while_pass'
0924  <---Source: begin: 'block-while_pass'
0924 <----Class: begin: 'block-while_pass'
0924<-----Source: begin: 'block-while_pass'
0924      For: line: 'i += 1'
0924    <-Source: line: 'i += 1'
0924   <--Function: line: 'i += 1'
0924  <---Source: line: 'i += 1'
0924 <----Class: line: 'i += 1'
0924<-----Source: line: 'i += 1'
0925      For: line: 'while_pass = True'
0925    <-Source: line: 'while_pass = True'
0925   <--Function: line: 'while_pass = True'
0925  <---Source: line: 'while_pass = True'
0925 <----Class: line: 'while_pass = True'
0925<-----Source: line: 'while_pass = True'
0926      For: line: 'continue'
0926    <-Source: line: 'continue'
0926   <--Function: line: 'continue'
0926  <---Source: line: 'continue'
0926 <----Class: line: 'continue'
0926<-----Source: line: 'continue'
0927      For: end: 'block-while_pass'
0927    <-Source: end: 'block-while_pass'
0927   <--Function: end: 'block-while_pass'
0927  <---Source: end: 'block-while_pass'
0927 <----Class: end: 'block-while_pass'
0927<-----Source: end: 'block-while_pass'
0927      For: line: 'while_pass = False'
0927    <-Source: line: 'while_pass = False'
0927   <--Function: line: 'while_pass = False'
0927  <---Source: line: 'while_pass = False'
0927 <----Class: line: 'while_pass = False'
0927<-----Source: line: 'while_pass = False'
0928      Source: begin-gen
0928       InstructionUpdate: begin-gen
0928        Identifier: begin-gen
0928         Identifier: expr: 'codPaisProvincia'
0928        Identifier: end-gen
0928        OpUpdate: begin-gen
0928         OpUpdate: expr: '='
0928        OpUpdate: end-gen
0928        Value: begin-gen
0928         Parentheses: begin-gen
0928          Parentheses: expr: '('
0928        <-Value: expr: '('
0928          OpTernary: begin-gen
0928           OpTernary: expr: '('
0928         <-Parentheses: expr: '('
0928        <--Value: expr: '('
0928           Identifier: begin-gen
0928            Identifier: expr: 'codPais'
0928          <-OpTernary: expr: 'codPais'
0928         <--Parentheses: expr: 'codPais'
0928        <---Value: expr: 'codPais'
0928           Identifier: end-gen
0928           OpTernary: expr: 'if'
0928         <-Parentheses: expr: 'if'
0928        <--Value: expr: 'if'
0928           Identifier: begin-gen
0928            Identifier: expr: 'codPais'
0928          <-OpTernary: expr: 'codPais'
0928         <--Parentheses: expr: 'codPais'
0928        <---Value: expr: 'codPais'
0928           Identifier: end-gen
0928           OpTernary: expr: 'else'
0928         <-Parentheses: expr: 'else'
0928        <--Value: expr: 'else'
0928           ArrayMember: begin-gen
0928            ArrayMember: begin-gen
0928             Identifier: begin-gen
0928              Identifier: expr: 'provincias'
0928             Identifier: end-gen
0928             Value: begin-gen
0928              Identifier: begin-gen
0928               Identifier: expr: 'i'
0928             <-Value: expr: 'i'
0928              Identifier: end-gen
0928             Value: end-gen
0928             ArrayMember: expr: 'provincias[i]'
0928            ArrayMember: end-gen
0928            Value: begin-gen
0928             Constant: begin-gen
0928              Constant: ctype: 'Number' -> '1'
0928              Constant: expr: '1'
0928            <-Value: expr: '1'
0928             Constant: end-gen
0928            Value: end-gen
0928            ArrayMember: expr: 'provincias[i][1]'
0928          <-OpTernary: expr: 'provincias[i][1]'
0928         <--Parentheses: expr: 'provincias[i][1]'
0928        <---Value: expr: 'provincias[i][1]'
0928           ArrayMember: end-gen
0928           OpTernary: expr: ')'
0928         <-Parentheses: expr: ')'
0928        <--Value: expr: ')'
0928          OpTernary: end-gen
0928          Parentheses: expr: ')'
0928        <-Value: expr: ')'
0928         Parentheses: end-gen
0928        Value: end-gen
0928        InstructionUpdate: line: 'codPaisProvincia = ( ( codPais if codPais else provincias[i][1] ) )'
0928      <-Source: line: 'codPaisProvincia = ( ( codPais if codPais else provincias[i][1] ) )'
0928     <--For: line: 'codPaisProvincia = ( ( codPais if codPais else provincias[i][1] ) )'
0928    <---Source: line: 'codPaisProvincia = ( ( codPais if codPais else provincias[i][1] ) )'
0928   <----Function: line: 'codPaisProvincia = ( ( codPais if codPais else provincias[i][1] ) )'
0928  <-----Source: line: 'codPaisProvincia = ( ( codPais if codPais else provincias[i][1] ) )'
0928 <------Class: line: 'codPaisProvincia = ( ( codPais if codPais else provincias[i][1] ) )'
0928<-------Source: line: 'codPaisProvincia = ( ( codPais if codPais else provincias[i][1] ) )'
0929       InstructionUpdate: end-gen
0929       If: begin-gen
0929        Value: begin-gen
0929         Member: begin-gen
0929          Identifier: begin-gen
0929           Identifier: expr: 'util'
0929          Identifier: end-gen
0929          FunctionCall: begin-gen
0929           Value: begin-gen
0929            Constant: begin-gen
0929             Constant: ctype: 'String' -> 'provincias'
0929             Constant: expr: 'u"provincias"'
0929           <-Value: expr: 'u"provincias"'
0929            Constant: end-gen
0929           Value: end-gen
0929           Value: begin-gen
0929            Constant: begin-gen
0929             Constant: ctype: 'String' -> 'idprovincia'
0929             Constant: expr: 'u"idprovincia"'
0929           <-Value: expr: 'u"idprovincia"'
0929            Constant: end-gen
0929           Value: end-gen
0929           Expression: begin-gen
0929            Expression: expr: 'ustr('
0929            Constant: begin-gen
0929             Constant: ctype: 'String' -> "codpais = '"
0929             Constant: expr: 'u"codpais = \'"'
0929           <-Expression: expr: 'u"codpais = \'"'
0929            Constant: end-gen
0929            Expression: expr: ','
0929            Identifier: begin-gen
0929             Identifier: expr: 'codPaisProvincia'
0929           <-Expression: expr: 'codPaisProvincia'
0929            Identifier: end-gen
0929            Expression: expr: ','
0929            Constant: begin-gen
0929             Constant: ctype: 'String' -> "' AND (UPPER(provincia) = '"
0929             Constant: expr: 'u"\' AND (UPPER(provincia) = \'"'
0929           <-Expression: expr: 'u"\' AND (UPPER(provincia) = \'"'
0929            Constant: end-gen
0929            Expression: expr: ','
0929            ArrayMember: begin-gen
0929             ArrayMember: begin-gen
0929              Identifier: begin-gen
0929               Identifier: expr: 'provincias'
0929              Identifier: end-gen
0929              Value: begin-gen
0929               Identifier: begin-gen
0929                Identifier: expr: 'i'
0929              <-Value: expr: 'i'
0929               Identifier: end-gen
0929              Value: end-gen
0929              ArrayMember: expr: 'provincias[i]'
0929             ArrayMember: end-gen
0929             Value: begin-gen
0929              Constant: begin-gen
0929               Constant: ctype: 'Number' -> '0'
0929               Constant: expr: '0'
0929             <-Value: expr: '0'
0929              Constant: end-gen
0929             Value: end-gen
0929             ArrayMember: expr: 'provincias[i][0]'
0929           <-Expression: expr: 'provincias[i][0]'
0929            ArrayMember: end-gen
0929            Expression: expr: ','
0929            Constant: begin-gen
0929             Constant: ctype: 'String' -> "' OR codigo = '"
0929             Constant: expr: 'u"\' OR codigo = \'"'
0929           <-Expression: expr: 'u"\' OR codigo = \'"'
0929            Constant: end-gen
0929            Expression: expr: ','
0929            ArrayMember: begin-gen
0929             ArrayMember: begin-gen
0929              Identifier: begin-gen
0929               Identifier: expr: 'provincias'
0929              Identifier: end-gen
0929              Value: begin-gen
0929               Identifier: begin-gen
0929                Identifier: expr: 'i'
0929              <-Value: expr: 'i'
0929               Identifier: end-gen
0929              Value: end-gen
0929              ArrayMember: expr: 'provincias[i]'
0929             ArrayMember: end-gen
0929             Value: begin-gen
0929              Constant: begin-gen
0929               Constant: ctype: 'Number' -> '2'
0929               Constant: expr: '2'
0929             <-Value: expr: '2'
0929              Constant: end-gen
0929             Value: end-gen
0929             ArrayMember: expr: 'provincias[i][2]'
0929           <-Expression: expr: 'provincias[i][2]'
0929            ArrayMember: end-gen
0929            Expression: expr: ','
0929            Constant: begin-gen
0929             Constant: ctype: 'String' -> "')"
0929             Constant: expr: 'u"\')"'
0929           <-Expression: expr: 'u"\')"'
0929            Constant: end-gen
0929            Expression: expr: ')'
0929           Expression: end-gen
0929           FunctionCall: expr: 'sqlSelect(u"provincias", u"idprovincia", ustr( u"codpais = \'" , codPaisProvincia , u"\' AND (UPPER(provincia) = \'" , provincias[i][0] , u"\' OR codigo = \'" , provincias[i][2] , u"\')" ))'
0929          FunctionCall: end-gen
0929          Member: expr: 'util.sqlSelect(u"provincias", u"idprovincia", ustr( u"codpais = \'" , codPaisProvincia , u"\' AND (UPPER(provincia) = \'" , provincias[i][0] , u"\' OR codigo = \'" , provincias[i][2] , u"\')" ))'
0929        <-Value: expr: 'util.sqlSelect(u"provincias", u"idprovincia", ustr( u"codpais = \'" , codPaisProvincia , u"\' AND (UPPER(provincia) = \'" , provincias[i][0] , u"\' OR codigo = \'" , provincias[i][2] , u"\')" ))'
0929         Member: end-gen
0929        Value: end-gen
0929        If: line: 'if util.sqlSelect(u"provincias", u"idprovincia", ustr( u"codpais = \'" , codPaisProvincia , u"\' AND (UPPER(provincia) = \'" , provincias[i][0] , u"\' OR codigo = \'" , provincias[i][2] , u"\')" )):'
0929      <-Source: line: 'if util.sqlSelect(u"provincias", u"idprovincia", ustr( u"codpais = \'" , codPaisProvincia , u"\' AND (UPPER(provincia) = \'" , provincias[i][0] , u"\' OR codigo = \'" , provincias[i][2] , u"\')" )):'
0929     <--For: line: 'if util.sqlSelect(u"provincias", u"idprovincia", ustr( u"codpais = \'" , codPaisProvincia , u"\' AND (UPPER(provincia) = \'" , provincias[i][0] , u"\' OR codigo = \'" , provincias[i][2] , u"\')" )):'
0929    <---Source: line: 'if util.sqlSelect(u"provincias", u"idprovincia", ustr( u"codpais = \'" , codPaisProvincia , u"\' AND (UPPER(provincia) = \'" , provincias[i][0] , u"\' OR codigo = \'" , provincias[i][2] , u"\')" )):'
0929   <----Function: line: 'if util.sqlSelect(u"provincias", u"idprovincia", ustr( u"codpais = \'" , codPaisProvincia , u"\' AND (UPPER(provincia) = \'" , provincias[i][0] , u"\' OR codigo = \'" , provincias[i][2] , u"\')" )):'
0929  <-----Source: line: 'if util.sqlSelect(u"provincias", u"idprovincia", ustr( u"codpais = \'" , codPaisProvincia , u"\' AND (UPPER(provincia) = \'" , provincias[i][0] , u"\' OR codigo = \'" , provincias[i][2] , u"\')" )):'
0929 <------Class: line: 'if util.sqlSelect(u"provincias", u"idprovincia", ustr( u"codpais = \'" , codPaisProvincia , u"\' AND (UPPER(provincia) = \'" , provincias[i][0] , u"\' OR codigo = \'" , provincias[i][2] , u"\')" )):'
0929<-------Source: line: 'if util.sqlSelect(u"provincias", u"idprovincia", ustr( u"codpais = \'" , codPaisProvincia , u"\' AND (UPPER(provincia) = \'" , provincias[i][0] , u"\' OR codigo = \'" , provincias[i][2] , u"\')" )):'
0930        If: begin: 'block-if'
0930      <-Source: begin: 'block-if'
0930     <--For: begin: 'block-if'
0930    <---Source: begin: 'block-if'
0930   <----Function: begin: 'block-if'
0930  <-----Source: begin: 'block-if'
0930 <------Class: begin: 'block-if'
0930<-------Source: begin: 'block-if'
0930        Source: begin-gen
0930         InstructionFlow: begin-gen
0930          InstructionFlow: line: 'continue '
0930        <-Source: line: 'continue '
0930       <--If: line: 'continue '
0930      <---Source: line: 'continue '
0930     <----For: line: 'continue '
0930    <-----Source: line: 'continue '
0930   <------Function: line: 'continue '
0930  <-------Source: line: 'continue '
0930 <--------Class: line: 'continue '
0930<---------Source: line: 'continue '
0931         InstructionFlow: end-gen
0931        Source: end-gen
0931        If: end: 'block-if'
0931      <-Source: end: 'block-if'
0931     <--For: end: 'block-if'
0931    <---Source: end: 'block-if'
0931   <----Function: end: 'block-if'
0931  <-----Source: end: 'block-if'
0931 <------Class: end: 'block-if'
0931<-------Source: end: 'block-if'
0931       If: end-gen
0931       With: begin-gen
0931        Identifier: begin-gen
0931         Identifier: expr: 'cursor'
0931        Identifier: end-gen
0931        With: line: ' #WITH_START'
0931      <-Source: line: ' #WITH_START'
0931     <--For: line: ' #WITH_START'
0931    <---Source: line: ' #WITH_START'
0931   <----Function: line: ' #WITH_START'
0931  <-----Source: line: ' #WITH_START'
0931 <------Class: line: ' #WITH_START'
0931<-------Source: line: ' #WITH_START'
0932        Source: begin-gen
0932         InstructionCall: begin-gen
0932          FunctionCall: begin-gen
0932           Value: begin-gen
0932            Member: begin-gen
0932             Identifier: begin-gen
0932              Identifier: expr: 'cursor'
0932             Identifier: end-gen
0932             Identifier: begin-gen
0932              Identifier: expr: 'Insert'
0932             Identifier: end-gen
0932             Member: expr: 'cursor.Insert'
0932           <-Value: expr: 'cursor.Insert'
0932            Member: end-gen
0932           Value: end-gen
0932           FunctionCall: expr: 'setModeAccess(cursor.Insert)'
0932          FunctionCall: end-gen
0932          InstructionCall: line: 'setModeAccess(cursor.Insert)'
0932        <-Source: line: 'setModeAccess(cursor.Insert)'
0932       <--With: line: 'cursor.setModeAccess(cursor.Insert)'
0932      <---Source: line: 'cursor.setModeAccess(cursor.Insert)'
0932     <----For: line: 'cursor.setModeAccess(cursor.Insert)'
0932    <-----Source: line: 'cursor.setModeAccess(cursor.Insert)'
0932   <------Function: line: 'cursor.setModeAccess(cursor.Insert)'
0932  <-------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0932 <--------Class: line: 'cursor.setModeAccess(cursor.Insert)'
0932<---------Source: line: 'cursor.setModeAccess(cursor.Insert)'
0933         InstructionCall: end-gen
0933         InstructionCall: begin-gen
0933          FunctionCall: begin-gen
0933           FunctionCall: expr: 'refreshBuffer()'
0933          FunctionCall: end-gen
0933          InstructionCall: line: 'refreshBuffer()'
0933        <-Source: line: 'refreshBuffer()'
0933       <--With: line: 'cursor.refreshBuffer()'
0933      <---Source: line: 'cursor.refreshBuffer()'
0933     <----For: line: 'cursor.refreshBuffer()'
0933    <-----Source: line: 'cursor.refreshBuffer()'
0933   <------Function: line: 'cursor.refreshBuffer()'
0933  <-------Source: line: 'cursor.refreshBuffer()'
0933 <--------Class: line: 'cursor.refreshBuffer()'
0933<---------Source: line: 'cursor.refreshBuffer()'
0934         InstructionCall: end-gen
0934         InstructionCall: begin-gen
0934          FunctionCall: begin-gen
0934           Value: begin-gen
0934            Constant: begin-gen
0934             Constant: ctype: 'String' -> 'provincia'
0934             Constant: expr: 'u"provincia"'
0934           <-Value: expr: 'u"provincia"'
0934            Constant: end-gen
0934           Value: end-gen
0934           Value: begin-gen
0934            ArrayMember: begin-gen
0934             ArrayMember: begin-gen
0934              Identifier: begin-gen
0934               Identifier: expr: 'provincias'
0934              Identifier: end-gen
0934              Value: begin-gen
0934               Identifier: begin-gen
0934                Identifier: expr: 'i'
0934              <-Value: expr: 'i'
0934               Identifier: end-gen
0934              Value: end-gen
0934              ArrayMember: expr: 'provincias[i]'
0934             ArrayMember: end-gen
0934             Value: begin-gen
0934              Constant: begin-gen
0934               Constant: ctype: 'Number' -> '0'
0934               Constant: expr: '0'
0934             <-Value: expr: '0'
0934              Constant: end-gen
0934             Value: end-gen
0934             ArrayMember: expr: 'provincias[i][0]'
0934           <-Value: expr: 'provincias[i][0]'
0934            ArrayMember: end-gen
0934           Value: end-gen
0934           FunctionCall: expr: 'setValueBuffer(u"provincia", provincias[i][0])'
0934          FunctionCall: end-gen
0934          InstructionCall: line: 'setValueBuffer(u"provincia", provincias[i][0])'
0934        <-Source: line: 'setValueBuffer(u"provincia", provincias[i][0])'
0934       <--With: line: 'cursor.setValueBuffer(u"provincia", provincias[i][0])'
0934      <---Source: line: 'cursor.setValueBuffer(u"provincia", provincias[i][0])'
0934     <----For: line: 'cursor.setValueBuffer(u"provincia", provincias[i][0])'
0934    <-----Source: line: 'cursor.setValueBuffer(u"provincia", provincias[i][0])'
0934   <------Function: line: 'cursor.setValueBuffer(u"provincia", provincias[i][0])'
0934  <-------Source: line: 'cursor.setValueBuffer(u"provincia", provincias[i][0])'
0934 <--------Class: line: 'cursor.setValueBuffer(u"provincia", provincias[i][0])'
0934<---------Source: line: 'cursor.setValueBuffer(u"provincia", provincias[i][0])'
0935         InstructionCall: end-gen
0935         InstructionCall: begin-gen
0935          FunctionCall: begin-gen
0935           Value: begin-gen
0935            Constant: begin-gen
0935             Constant: ctype: 'String' -> 'codpais'
0935             Constant: expr: 'u"codpais"'
0935           <-Value: expr: 'u"codpais"'
0935            Constant: end-gen
0935           Value: end-gen
0935           Value: begin-gen
0935            Identifier: begin-gen
0935             Identifier: expr: 'codPaisProvincia'
0935           <-Value: expr: 'codPaisProvincia'
0935            Identifier: end-gen
0935           Value: end-gen
0935           FunctionCall: expr: 'setValueBuffer(u"codpais", codPaisProvincia)'
0935          FunctionCall: end-gen
0935          InstructionCall: line: 'setValueBuffer(u"codpais", codPaisProvincia)'
0935        <-Source: line: 'setValueBuffer(u"codpais", codPaisProvincia)'
0935       <--With: line: 'cursor.setValueBuffer(u"codpais", codPaisProvincia)'
0935      <---Source: line: 'cursor.setValueBuffer(u"codpais", codPaisProvincia)'
0935     <----For: line: 'cursor.setValueBuffer(u"codpais", codPaisProvincia)'
0935    <-----Source: line: 'cursor.setValueBuffer(u"codpais", codPaisProvincia)'
0935   <------Function: line: 'cursor.setValueBuffer(u"codpais", codPaisProvincia)'
0935  <-------Source: line: 'cursor.setValueBuffer(u"codpais", codPaisProvincia)'
0935 <--------Class: line: 'cursor.setValueBuffer(u"codpais", codPaisProvincia)'
0935<---------Source: line: 'cursor.setValueBuffer(u"codpais", codPaisProvincia)'
0936         InstructionCall: end-gen
0936         InstructionCall: begin-gen
0936          FunctionCall: begin-gen
0936           Value: begin-gen
0936            Constant: begin-gen
0936             Constant: ctype: 'String' -> 'codigo'
0936             Constant: expr: 'u"codigo"'
0936           <-Value: expr: 'u"codigo"'
0936            Constant: end-gen
0936           Value: end-gen
0936           Value: begin-gen
0936            ArrayMember: begin-gen
0936             ArrayMember: begin-gen
0936              Identifier: begin-gen
0936               Identifier: expr: 'provincias'
0936              Identifier: end-gen
0936              Value: begin-gen
0936               Identifier: begin-gen
0936                Identifier: expr: 'i'
0936              <-Value: expr: 'i'
0936               Identifier: end-gen
0936              Value: end-gen
0936              ArrayMember: expr: 'provincias[i]'
0936             ArrayMember: end-gen
0936             Value: begin-gen
0936              Constant: begin-gen
0936               Constant: ctype: 'Number' -> '2'
0936               Constant: expr: '2'
0936             <-Value: expr: '2'
0936              Constant: end-gen
0936             Value: end-gen
0936             ArrayMember: expr: 'provincias[i][2]'
0936           <-Value: expr: 'provincias[i][2]'
0936            ArrayMember: end-gen
0936           Value: end-gen
0936           FunctionCall: expr: 'setValueBuffer(u"codigo", provincias[i][2])'
0936          FunctionCall: end-gen
0936          InstructionCall: line: 'setValueBuffer(u"codigo", provincias[i][2])'
0936        <-Source: line: 'setValueBuffer(u"codigo", provincias[i][2])'
0936       <--With: line: 'cursor.setValueBuffer(u"codigo", provincias[i][2])'
0936      <---Source: line: 'cursor.setValueBuffer(u"codigo", provincias[i][2])'
0936     <----For: line: 'cursor.setValueBuffer(u"codigo", provincias[i][2])'
0936    <-----Source: line: 'cursor.setValueBuffer(u"codigo", provincias[i][2])'
0936   <------Function: line: 'cursor.setValueBuffer(u"codigo", provincias[i][2])'
0936  <-------Source: line: 'cursor.setValueBuffer(u"codigo", provincias[i][2])'
0936 <--------Class: line: 'cursor.setValueBuffer(u"codigo", provincias[i][2])'
0936<---------Source: line: 'cursor.setValueBuffer(u"codigo", provincias[i][2])'
0937         InstructionCall: end-gen
0937         InstructionCall: begin-gen
0937          FunctionCall: begin-gen
0937           FunctionCall: expr: 'commitBuffer()'
0937          FunctionCall: end-gen
0937          InstructionCall: line: 'commitBuffer()'
0937        <-Source: line: 'commitBuffer()'
0937       <--With: line: 'cursor.commitBuffer()'
0937      <---Source: line: 'cursor.commitBuffer()'
0937     <----For: line: 'cursor.commitBuffer()'
0937    <-----Source: line: 'cursor.commitBuffer()'
0937   <------Function: line: 'cursor.commitBuffer()'
0937  <-------Source: line: 'cursor.commitBuffer()'
0937 <--------Class: line: 'cursor.commitBuffer()'
0937<---------Source: line: 'cursor.commitBuffer()'
0938         InstructionCall: end-gen
0938        Source: end-gen
0938        With: line: ' #WITH_END'
0938      <-Source: line: ' #WITH_END'
0938     <--For: line: ' #WITH_END'
0938    <---Source: line: ' #WITH_END'
0938   <----Function: line: ' #WITH_END'
0938  <-----Source: line: ' #WITH_END'
0938 <------Class: line: ' #WITH_END'
0938<-------Source: line: ' #WITH_END'
0939       With: end-gen
0939      Source: end-gen
0939      For: line: 'i += 1'
0939    <-Source: line: 'i += 1'
0939   <--Function: line: 'i += 1'
0939  <---Source: line: 'i += 1'
0939 <----Class: line: 'i += 1'
0939<-----Source: line: 'i += 1'
0940      For: line: 'while_pass = True'
0940    <-Source: line: 'while_pass = True'
0940   <--Function: line: 'while_pass = True'
0940  <---Source: line: 'while_pass = True'
0940 <----Class: line: 'while_pass = True'
0940<-----Source: line: 'while_pass = True'
0941      For: line: 'try:'
0941    <-Source: line: 'try:'
0941   <--Function: line: 'try:'
0941  <---Source: line: 'try:'
0941 <----Class: line: 'try:'
0941<-----Source: line: 'try:'
0942      For: begin: 'block-error-catch'
0942    <-Source: begin: 'block-error-catch'
0942   <--Function: begin: 'block-error-catch'
0942  <---Source: begin: 'block-error-catch'
0942 <----Class: begin: 'block-error-catch'
0942<-----Source: begin: 'block-error-catch'
0942      For: line: 'i < len(provincias)'
0942    <-Source: line: 'i < len(provincias)'
0942   <--Function: line: 'i < len(provincias)'
0942  <---Source: line: 'i < len(provincias)'
0942 <----Class: line: 'i < len(provincias)'
0942<-----Source: line: 'i < len(provincias)'
0943      For: end: 'block-error-catch'
0943    <-Source: end: 'block-error-catch'
0943   <--Function: end: 'block-error-catch'
0943  <---Source: end: 'block-error-catch'
0943 <----Class: end: 'block-error-catch'
0943<-----Source: end: 'block-error-catch'
0943      For: line: 'except: break'
0943    <-Source: line: 'except: break'
0943   <--Function: line: 'except: break'
0943  <---Source: line: 'except: break'
0943 <----Class: line: 'except: break'
0943<-----Source: line: 'except: break'
0944      For: end: 'block-for'
0944    <-Source: end: 'block-for'
0944   <--Function: end: 'block-for'
0944  <---Source: end: 'block-for'
0944 <----Class: end: 'block-for'
0944<-----Source: end: 'block-for'
0944     For: end-gen
0944    Source: end-gen
0944    Function: end: 'block-def-oficial_crearProvinciasEsp'
0944  <-Source: end: 'block-def-oficial_crearProvinciasEsp'
0944 <--Class: end: 'block-def-oficial_crearProvinciasEsp'
0944<---Source: end: 'block-def-oficial_crearProvinciasEsp'
0945   Function: end-gen
0945   Function: begin-gen
0945    Variable: begin-gen
0945     Variable: expr: 'tablas'
0945    Variable: end-gen
0945    Variable: begin-gen
0945     Variable: expr: 'select'
0945    Variable: end-gen
0945    Variable: begin-gen
0945     Variable: expr: 'from_'
0945    Variable: end-gen
0945    Variable: begin-gen
0945     Variable: expr: 'where'
0945    Variable: end-gen
0945    Function: line: 'def oficial_valorQuery(self, tablas = None, select = None, from_ = None, where = None):'
0945  <-Source: line: 'def oficial_valorQuery(self, tablas = None, select = None, from_ = None, where = None):'
0945 <--Class: line: 'def oficial_valorQuery(self, tablas = None, select = None, from_ = None, where = None):'
0945<---Source: line: 'def oficial_valorQuery(self, tablas = None, select = None, from_ = None, where = None):'
0946    Function: begin: 'block-def-oficial_valorQuery'
0946  <-Source: begin: 'block-def-oficial_valorQuery'
0946 <--Class: begin: 'block-def-oficial_valorQuery'
0946<---Source: begin: 'block-def-oficial_valorQuery'
0946    Source: begin-gen
0946     DeclarationBlock: begin-gen
0946      Variable: begin-gen
0946       Variable: expr: 'qry'
0946       Variable: expr: '='
0946       Value: begin-gen
0946        New: begin-gen
0946         FunctionCall: begin-gen
0946          FunctionCall: expr: 'FLSqlQuery()'
0946        <-New: expr: 'qsatype.FLSqlQuery()'
0946       <--Value: expr: 'qsatype.FLSqlQuery()'
0946      <---Variable: expr: 'qsatype.FLSqlQuery()'
0946         FunctionCall: end-gen
0946        New: end-gen
0946       Value: end-gen
0946      Variable: end-gen
0946      DeclarationBlock: line: 'qry = qsatype.FLSqlQuery()'
0946    <-Source: line: 'qry = qsatype.FLSqlQuery()'
0946   <--Function: line: 'qry = qsatype.FLSqlQuery()'
0946  <---Source: line: 'qry = qsatype.FLSqlQuery()'
0946 <----Class: line: 'qry = qsatype.FLSqlQuery()'
0946<-----Source: line: 'qry = qsatype.FLSqlQuery()'
0947     DeclarationBlock: end-gen
0947     TryCatch: begin-gen
0947      TryCatch: line: 'try:'
0947    <-Source: line: 'try:'
0947   <--Function: line: 'try:'
0947  <---Source: line: 'try:'
0947 <----Class: line: 'try:'
0947<-----Source: line: 'try:'
0948      TryCatch: begin: 'block-try'
0948    <-Source: begin: 'block-try'
0948   <--Function: begin: 'block-try'
0948  <---Source: begin: 'block-try'
0948 <----Class: begin: 'block-try'
0948<-----Source: begin: 'block-try'
0948      Source: begin-gen
0948       InstructionCall: begin-gen
0948        Member: begin-gen
0948         Identifier: begin-gen
0948          Identifier: expr: 'qry'
0948         Identifier: end-gen
0948         FunctionCall: begin-gen
0948          Value: begin-gen
0948           Identifier: begin-gen
0948            Identifier: expr: 'True'
0948          <-Value: expr: 'True'
0948           Identifier: end-gen
0948          Value: end-gen
0948          FunctionCall: expr: 'setForwardOnly(True)'
0948         FunctionCall: end-gen
0948         Member: expr: 'qry.setForwardOnly(True)'
0948        Member: end-gen
0948        InstructionCall: line: 'qry.setForwardOnly(True)'
0948      <-Source: line: 'qry.setForwardOnly(True)'
0948     <--TryCatch: line: 'qry.setForwardOnly(True)'
0948    <---Source: line: 'qry.setForwardOnly(True)'
0948   <----Function: line: 'qry.setForwardOnly(True)'
0948  <-----Source: line: 'qry.setForwardOnly(True)'
0948 <------Class: line: 'qry.setForwardOnly(True)'
0948<-------Source: line: 'qry.setForwardOnly(True)'
0949       InstructionCall: end-gen
0949      Source: end-gen
0949      TryCatch: end: 'block-try'
0949    <-Source: end: 'block-try'
0949   <--Function: end: 'block-try'
0949  <---Source: end: 'block-try'
0949 <----Class: end: 'block-try'
0949<-----Source: end: 'block-try'
0949      Identifier: begin-gen
0949       Identifier: expr: 'e'
0949      Identifier: end-gen
0949      TryCatch: line: 'except Exception as e:'
0949    <-Source: line: 'except Exception as e:'
0949   <--Function: line: 'except Exception as e:'
0949  <---Source: line: 'except Exception as e:'
0949 <----Class: line: 'except Exception as e:'
0949<-----Source: line: 'except Exception as e:'
0950      TryCatch: begin: 'block-except'
0950    <-Source: begin: 'block-except'
0950   <--Function: begin: 'block-except'
0950  <---Source: begin: 'block-except'
0950 <----Class: begin: 'block-except'
0950<-----Source: begin: 'block-except'
0950      TryCatch: line: 'e = traceback.format_exc()'
0950    <-Source: line: 'e = traceback.format_exc()'
0950   <--Function: line: 'e = traceback.format_exc()'
0950  <---Source: line: 'e = traceback.format_exc()'
0950 <----Class: line: 'e = traceback.format_exc()'
0950<-----Source: line: 'e = traceback.format_exc()'
0951      Source: begin-gen
0951      Source: end-gen
0951      TryCatch: end: 'block-except'
0951    <-Source: end: 'block-except'
0951   <--Function: end: 'block-except'
0951  <---Source: end: 'block-except'
0951 <----Class: end: 'block-except'
0951<-----Source: end: 'block-except'
0952     TryCatch: end-gen
0952     InstructionCall: begin-gen
0952      Member: begin-gen
0952       Identifier: begin-gen
0952        Identifier: expr: 'qry'
0952       Identifier: end-gen
0952       FunctionCall: begin-gen
0952        Value: begin-gen
0952         Identifier: begin-gen
0952          Identifier: expr: 'tablas'
0952        <-Value: expr: 'tablas'
0952         Identifier: end-gen
0952        Value: end-gen
0952        FunctionCall: expr: 'setTablesList(tablas)'
0952       FunctionCall: end-gen
0952       Member: expr: 'qry.setTablesList(tablas)'
0952      Member: end-gen
0952      InstructionCall: line: 'qry.setTablesList(tablas)'
0952    <-Source: line: 'qry.setTablesList(tablas)'
0952   <--Function: line: 'qry.setTablesList(tablas)'
0952  <---Source: line: 'qry.setTablesList(tablas)'
0952 <----Class: line: 'qry.setTablesList(tablas)'
0952<-----Source: line: 'qry.setTablesList(tablas)'
0953     InstructionCall: end-gen
0953     InstructionCall: begin-gen
0953      Member: begin-gen
0953       Identifier: begin-gen
0953        Identifier: expr: 'qry'
0953       Identifier: end-gen
0953       FunctionCall: begin-gen
0953        Value: begin-gen
0953         Identifier: begin-gen
0953          Identifier: expr: 'select'
0953        <-Value: expr: 'select'
0953         Identifier: end-gen
0953        Value: end-gen
0953        FunctionCall: expr: 'setSelect(select)'
0953       FunctionCall: end-gen
0953       Member: expr: 'qry.setSelect(select)'
0953      Member: end-gen
0953      InstructionCall: line: 'qry.setSelect(select)'
0953    <-Source: line: 'qry.setSelect(select)'
0953   <--Function: line: 'qry.setSelect(select)'
0953  <---Source: line: 'qry.setSelect(select)'
0953 <----Class: line: 'qry.setSelect(select)'
0953<-----Source: line: 'qry.setSelect(select)'
0954     InstructionCall: end-gen
0954     InstructionCall: begin-gen
0954      Member: begin-gen
0954       Identifier: begin-gen
0954        Identifier: expr: 'qry'
0954       Identifier: end-gen
0954       FunctionCall: begin-gen
0954        Value: begin-gen
0954         Identifier: begin-gen
0954          Identifier: expr: 'from_'
0954        <-Value: expr: 'from_'
0954         Identifier: end-gen
0954        Value: end-gen
0954        FunctionCall: expr: 'setFrom(from_)'
0954       FunctionCall: end-gen
0954       Member: expr: 'qry.setFrom(from_)'
0954      Member: end-gen
0954      InstructionCall: line: 'qry.setFrom(from_)'
0954    <-Source: line: 'qry.setFrom(from_)'
0954   <--Function: line: 'qry.setFrom(from_)'
0954  <---Source: line: 'qry.setFrom(from_)'
0954 <----Class: line: 'qry.setFrom(from_)'
0954<-----Source: line: 'qry.setFrom(from_)'
0955     InstructionCall: end-gen
0955     InstructionCall: begin-gen
0955      Member: begin-gen
0955       Identifier: begin-gen
0955        Identifier: expr: 'qry'
0955       Identifier: end-gen
0955       FunctionCall: begin-gen
0955        Value: begin-gen
0955         Identifier: begin-gen
0955          Identifier: expr: 'where'
0955        <-Value: expr: 'where'
0955         Identifier: end-gen
0955        Value: end-gen
0955        FunctionCall: expr: 'setWhere(where)'
0955       FunctionCall: end-gen
0955       Member: expr: 'qry.setWhere(where)'
0955      Member: end-gen
0955      InstructionCall: line: 'qry.setWhere(where)'
0955    <-Source: line: 'qry.setWhere(where)'
0955   <--Function: line: 'qry.setWhere(where)'
0955  <---Source: line: 'qry.setWhere(where)'
0955 <----Class: line: 'qry.setWhere(where)'
0955<-----Source: line: 'qry.setWhere(where)'
0956     InstructionCall: end-gen
0956     InstructionCall: begin-gen
0956      Member: begin-gen
0956       Identifier: begin-gen
0956        Identifier: expr: 'qry'
0956       Identifier: end-gen
0956       FunctionCall: begin-gen
0956        FunctionCall: expr: 'exec_()'
0956       FunctionCall: end-gen
0956       Member: expr: 'qry.exec_()'
0956      Member: end-gen
0956      InstructionCall: line: 'qry.exec_()'
0956    <-Source: line: 'qry.exec_()'
0956   <--Function: line: 'qry.exec_()'
0956  <---Source: line: 'qry.exec_()'
0956 <----Class: line: 'qry.exec_()'
0956<-----Source: line: 'qry.exec_()'
0957     InstructionCall: end-gen
0957     If: begin-gen
0957      Value: begin-gen
0957       Member: begin-gen
0957        Identifier: begin-gen
0957         Identifier: expr: 'qry'
0957        Identifier: end-gen
0957        FunctionCall: begin-gen
0957         FunctionCall: expr: 'next()'
0957        FunctionCall: end-gen
0957        Member: expr: 'qry.next()'
0957      <-Value: expr: 'qry.next()'
0957       Member: end-gen
0957      Value: end-gen
0957      If: line: 'if qry.next():'
0957    <-Source: line: 'if qry.next():'
0957   <--Function: line: 'if qry.next():'
0957  <---Source: line: 'if qry.next():'
0957 <----Class: line: 'if qry.next():'
0957<-----Source: line: 'if qry.next():'
0958      If: begin: 'block-if'
0958    <-Source: begin: 'block-if'
0958   <--Function: begin: 'block-if'
0958  <---Source: begin: 'block-if'
0958 <----Class: begin: 'block-if'
0958<-----Source: begin: 'block-if'
0958      Source: begin-gen
0958       InstructionFlow: begin-gen
0958        Value: begin-gen
0958         Member: begin-gen
0958          Identifier: begin-gen
0958           Identifier: expr: 'qry'
0958          Identifier: end-gen
0958          FunctionCall: begin-gen
0958           Value: begin-gen
0958            Constant: begin-gen
0958             Constant: ctype: 'Number' -> '0'
0958             Constant: expr: '0'
0958           <-Value: expr: '0'
0958            Constant: end-gen
0958           Value: end-gen
0958           FunctionCall: expr: 'value(0)'
0958          FunctionCall: end-gen
0958          Member: expr: 'qry.value(0)'
0958        <-Value: expr: 'qry.value(0)'
0958         Member: end-gen
0958        Value: end-gen
0958        InstructionFlow: line: 'return qry.value(0)'
0958      <-Source: line: 'return qry.value(0)'
0958     <--If: line: 'return qry.value(0)'
0958    <---Source: line: 'return qry.value(0)'
0958   <----Function: line: 'return qry.value(0)'
0958  <-----Source: line: 'return qry.value(0)'
0958 <------Class: line: 'return qry.value(0)'
0958<-------Source: line: 'return qry.value(0)'
0959       InstructionFlow: end-gen
0959      Source: end-gen
0959      If: end: 'block-if'
0959    <-Source: end: 'block-if'
0959   <--Function: end: 'block-if'
0959  <---Source: end: 'block-if'
0959 <----Class: end: 'block-if'
0959<-----Source: end: 'block-if'
0959      If: line: 'else:'
0959    <-Source: line: 'else:'
0959   <--Function: line: 'else:'
0959  <---Source: line: 'else:'
0959 <----Class: line: 'else:'
0959<-----Source: line: 'else:'
0960      If: begin: 'block-else'
0960    <-Source: begin: 'block-else'
0960   <--Function: begin: 'block-else'
0960  <---Source: begin: 'block-else'
0960 <----Class: begin: 'block-else'
0960<-----Source: begin: 'block-else'
0960      Source: begin-gen
0960       InstructionFlow: begin-gen
0960        Value: begin-gen
0960         Constant: begin-gen
0960          Constant: ctype: 'String' -> ''
0960          Constant: expr: 'u""'
0960        <-Value: expr: 'u""'
0960         Constant: end-gen
0960        Value: end-gen
0960        InstructionFlow: line: 'return u""'
0960      <-Source: line: 'return u""'
0960     <--If: line: 'return u""'
0960    <---Source: line: 'return u""'
0960   <----Function: line: 'return u""'
0960  <-----Source: line: 'return u""'
0960 <------Class: line: 'return u""'
0960<-------Source: line: 'return u""'
0961       InstructionFlow: end-gen
0961      Source: end-gen
0961      If: end: 'block-else'
0961    <-Source: end: 'block-else'
0961   <--Function: end: 'block-else'
0961  <---Source: end: 'block-else'
0961 <----Class: end: 'block-else'
0961<-----Source: end: 'block-else'
0962     If: end-gen
0962    Source: end-gen
0962    Function: end: 'block-def-oficial_valorQuery'
0962  <-Source: end: 'block-def-oficial_valorQuery'
0962 <--Class: end: 'block-def-oficial_valorQuery'
0962<---Source: end: 'block-def-oficial_valorQuery'
0963   Function: end-gen
0963   Function: begin-gen
0963    Variable: begin-gen
0963     Variable: expr: 'codSubcuenta'
0963    Variable: end-gen
0963    Variable: begin-gen
0963     Variable: expr: 'descripcion'
0963    Variable: end-gen
0963    Variable: begin-gen
0963     Variable: expr: 'idCuentaEsp'
0963    Variable: end-gen
0963    Variable: begin-gen
0963     Variable: expr: 'codEjercicio'
0963    Variable: end-gen
0963    Function: line: 'def oficial_crearSubcuenta(self, codSubcuenta = None, descripcion = None, idCuentaEsp = None, codEjercicio = None):'
0963  <-Source: line: 'def oficial_crearSubcuenta(self, codSubcuenta = None, descripcion = None, idCuentaEsp = None, codEjercicio = None):'
0963 <--Class: line: 'def oficial_crearSubcuenta(self, codSubcuenta = None, descripcion = None, idCuentaEsp = None, codEjercicio = None):'
0963<---Source: line: 'def oficial_crearSubcuenta(self, codSubcuenta = None, descripcion = None, idCuentaEsp = None, codEjercicio = None):'
0964    Function: begin: 'block-def-oficial_crearSubcuenta'
0964  <-Source: begin: 'block-def-oficial_crearSubcuenta'
0964 <--Class: begin: 'block-def-oficial_crearSubcuenta'
0964<---Source: begin: 'block-def-oficial_crearSubcuenta'
0964    Source: begin-gen
0964     DeclarationBlock: begin-gen
0964      Variable: begin-gen
0964       Variable: expr: 'util'
0964       Variable: expr: '='
0964       Value: begin-gen
0964        New: begin-gen
0964         FunctionCall: begin-gen
0964          FunctionCall: expr: 'FLUtil()'
0964        <-New: expr: 'qsatype.FLUtil()'
0964       <--Value: expr: 'qsatype.FLUtil()'
0964      <---Variable: expr: 'qsatype.FLUtil()'
0964         FunctionCall: end-gen
0964        New: end-gen
0964       Value: end-gen
0964      Variable: end-gen
0964      DeclarationBlock: line: 'util = qsatype.FLUtil()'
0964    <-Source: line: 'util = qsatype.FLUtil()'
0964   <--Function: line: 'util = qsatype.FLUtil()'
0964  <---Source: line: 'util = qsatype.FLUtil()'
0964 <----Class: line: 'util = qsatype.FLUtil()'
0964<-----Source: line: 'util = qsatype.FLUtil()'
0965     DeclarationBlock: end-gen
0965     DeclarationBlock: begin-gen
0965      Variable: begin-gen
0965       Variable: expr: 'datosEmpresa'
0965       Variable: expr: '='
0965       Variable: expr: 'qsatype.Array()'
0965      Variable: end-gen
0965      DeclarationBlock: line: 'datosEmpresa = qsatype.Array()'
0965    <-Source: line: 'datosEmpresa = qsatype.Array()'
0965   <--Function: line: 'datosEmpresa = qsatype.Array()'
0965  <---Source: line: 'datosEmpresa = qsatype.Array()'
0965 <----Class: line: 'datosEmpresa = qsatype.Array()'
0965<-----Source: line: 'datosEmpresa = qsatype.Array()'
0966     DeclarationBlock: end-gen
0966     If: begin-gen
0966      Value: begin-gen
0966       OpUnary: begin-gen
0966        OpUnary: expr: 'not'
0966      <-Value: expr: 'not'
0966        Identifier: begin-gen
0966         Identifier: expr: 'codEjercicio'
0966       <-OpUnary: expr: 'codEjercicio'
0966      <--Value: expr: 'codEjercicio'
0966        Identifier: end-gen
0966       OpUnary: end-gen
0966      Value: end-gen
0966      If: line: 'if not codEjercicio:'
0966    <-Source: line: 'if not codEjercicio:'
0966   <--Function: line: 'if not codEjercicio:'
0966  <---Source: line: 'if not codEjercicio:'
0966 <----Class: line: 'if not codEjercicio:'
0966<-----Source: line: 'if not codEjercicio:'
0967      If: begin: 'block-if'
0967    <-Source: begin: 'block-if'
0967   <--Function: begin: 'block-if'
0967  <---Source: begin: 'block-if'
0967 <----Class: begin: 'block-if'
0967<-----Source: begin: 'block-if'
0967      Source: begin-gen
0967       InstructionUpdate: begin-gen
0967        ArrayMember: begin-gen
0967         Identifier: begin-gen
0967          Identifier: expr: 'datosEmpresa'
0967         Identifier: end-gen
0967         Value: begin-gen
0967          Constant: begin-gen
0967           Constant: ctype: 'String' -> 'codejercicio'
0967           Constant: expr: 'u"codejercicio"'
0967         <-Value: expr: 'u"codejercicio"'
0967          Constant: end-gen
0967         Value: end-gen
0967         ArrayMember: expr: 'datosEmpresa[u"codejercicio"]'
0967        ArrayMember: end-gen
0967        OpUpdate: begin-gen
0967         OpUpdate: expr: '='
0967        OpUpdate: end-gen
0967        Value: begin-gen
0967         Member: begin-gen
0967          Identifier: begin-gen
0967           Identifier: expr: 'self'
0967          Identifier: end-gen
0967          Identifier: begin-gen
0967           Identifier: expr: 'iface'
0967          Identifier: end-gen
0967          FunctionCall: begin-gen
0967           FunctionCall: expr: 'ejercicioActual()'
0967          FunctionCall: end-gen
0967          Member: expr: 'self.iface.ejercicioActual()'
0967        <-Value: expr: 'self.iface.ejercicioActual()'
0967         Member: end-gen
0967        Value: end-gen
0967        InstructionUpdate: line: 'datosEmpresa[u"codejercicio"] = self.iface.ejercicioActual()'
0967      <-Source: line: 'datosEmpresa[u"codejercicio"] = self.iface.ejercicioActual()'
0967     <--If: line: 'datosEmpresa[u"codejercicio"] = self.iface.ejercicioActual()'
0967    <---Source: line: 'datosEmpresa[u"codejercicio"] = self.iface.ejercicioActual()'
0967   <----Function: line: 'datosEmpresa[u"codejercicio"] = self.iface.ejercicioActual()'
0967  <-----Source: line: 'datosEmpresa[u"codejercicio"] = self.iface.ejercicioActual()'
0967 <------Class: line: 'datosEmpresa[u"codejercicio"] = self.iface.ejercicioActual()'
0967<-------Source: line: 'datosEmpresa[u"codejercicio"] = self.iface.ejercicioActual()'
0968       InstructionUpdate: end-gen
0968      Source: end-gen
0968      If: end: 'block-if'
0968    <-Source: end: 'block-if'
0968   <--Function: end: 'block-if'
0968  <---Source: end: 'block-if'
0968 <----Class: end: 'block-if'
0968<-----Source: end: 'block-if'
0968      If: line: 'else:'
0968    <-Source: line: 'else:'
0968   <--Function: line: 'else:'
0968  <---Source: line: 'else:'
0968 <----Class: line: 'else:'
0968<-----Source: line: 'else:'
0969      If: begin: 'block-else'
0969    <-Source: begin: 'block-else'
0969   <--Function: begin: 'block-else'
0969  <---Source: begin: 'block-else'
0969 <----Class: begin: 'block-else'
0969<-----Source: begin: 'block-else'
0969      Source: begin-gen
0969       InstructionUpdate: begin-gen
0969        ArrayMember: begin-gen
0969         Identifier: begin-gen
0969          Identifier: expr: 'datosEmpresa'
0969         Identifier: end-gen
0969         Value: begin-gen
0969          Constant: begin-gen
0969           Constant: ctype: 'String' -> 'codejercicio'
0969           Constant: expr: 'u"codejercicio"'
0969         <-Value: expr: 'u"codejercicio"'
0969          Constant: end-gen
0969         Value: end-gen
0969         ArrayMember: expr: 'datosEmpresa[u"codejercicio"]'
0969        ArrayMember: end-gen
0969        OpUpdate: begin-gen
0969         OpUpdate: expr: '='
0969        OpUpdate: end-gen
0969        Value: begin-gen
0969         Identifier: begin-gen
0969          Identifier: expr: 'codEjercicio'
0969        <-Value: expr: 'codEjercicio'
0969         Identifier: end-gen
0969        Value: end-gen
0969        InstructionUpdate: line: 'datosEmpresa[u"codejercicio"] = codEjercicio'
0969      <-Source: line: 'datosEmpresa[u"codejercicio"] = codEjercicio'
0969     <--If: line: 'datosEmpresa[u"codejercicio"] = codEjercicio'
0969    <---Source: line: 'datosEmpresa[u"codejercicio"] = codEjercicio'
0969   <----Function: line: 'datosEmpresa[u"codejercicio"] = codEjercicio'
0969  <-----Source: line: 'datosEmpresa[u"codejercicio"] = codEjercicio'
0969 <------Class: line: 'datosEmpresa[u"codejercicio"] = codEjercicio'
0969<-------Source: line: 'datosEmpresa[u"codejercicio"] = codEjercicio'
0970       InstructionUpdate: end-gen
0970      Source: end-gen
0970      If: end: 'block-else'
0970    <-Source: end: 'block-else'
0970   <--Function: end: 'block-else'
0970  <---Source: end: 'block-else'
0970 <----Class: end: 'block-else'
0970<-----Source: end: 'block-else'
0971     If: end-gen
0971     InstructionUpdate: begin-gen
0971      ArrayMember: begin-gen
0971       Identifier: begin-gen
0971        Identifier: expr: 'datosEmpresa'
0971       Identifier: end-gen
0971       Value: begin-gen
0971        Constant: begin-gen
0971         Constant: ctype: 'String' -> 'coddivisa'
0971         Constant: expr: 'u"coddivisa"'
0971       <-Value: expr: 'u"coddivisa"'
0971        Constant: end-gen
0971       Value: end-gen
0971       ArrayMember: expr: 'datosEmpresa[u"coddivisa"]'
0971      ArrayMember: end-gen
0971      OpUpdate: begin-gen
0971       OpUpdate: expr: '='
0971      OpUpdate: end-gen
0971      Value: begin-gen
0971       Member: begin-gen
0971        Identifier: begin-gen
0971         Identifier: expr: 'self'
0971        Identifier: end-gen
0971        Identifier: begin-gen
0971         Identifier: expr: 'iface'
0971        Identifier: end-gen
0971        FunctionCall: begin-gen
0971         Value: begin-gen
0971          Constant: begin-gen
0971           Constant: ctype: 'String' -> 'coddivisa'
0971           Constant: expr: 'u"coddivisa"'
0971         <-Value: expr: 'u"coddivisa"'
0971          Constant: end-gen
0971         Value: end-gen
0971         FunctionCall: expr: 'valorDefectoEmpresa(u"coddivisa")'
0971        FunctionCall: end-gen
0971        Member: expr: 'self.iface.valorDefectoEmpresa(u"coddivisa")'
0971      <-Value: expr: 'self.iface.valorDefectoEmpresa(u"coddivisa")'
0971       Member: end-gen
0971      Value: end-gen
0971      InstructionUpdate: line: 'datosEmpresa[u"coddivisa"] = self.iface.valorDefectoEmpresa(u"coddivisa")'
0971    <-Source: line: 'datosEmpresa[u"coddivisa"] = self.iface.valorDefectoEmpresa(u"coddivisa")'
0971   <--Function: line: 'datosEmpresa[u"coddivisa"] = self.iface.valorDefectoEmpresa(u"coddivisa")'
0971  <---Source: line: 'datosEmpresa[u"coddivisa"] = self.iface.valorDefectoEmpresa(u"coddivisa")'
0971 <----Class: line: 'datosEmpresa[u"coddivisa"] = self.iface.valorDefectoEmpresa(u"coddivisa")'
0971<-----Source: line: 'datosEmpresa[u"coddivisa"] = self.iface.valorDefectoEmpresa(u"coddivisa")'
0972     InstructionUpdate: end-gen
0972     DeclarationBlock: begin-gen
0972      Variable: begin-gen
0972       Variable: expr: 'idSubcuenta'
0972       Variable: expr: '='
0972       Value: begin-gen
0972        Member: begin-gen
0972         Identifier: begin-gen
0972          Identifier: expr: 'util'
0972         Identifier: end-gen
0972         FunctionCall: begin-gen
0972          Value: begin-gen
0972           Constant: begin-gen
0972            Constant: ctype: 'String' -> 'co_subcuentas'
0972            Constant: expr: 'u"co_subcuentas"'
0972          <-Value: expr: 'u"co_subcuentas"'
0972           Constant: end-gen
0972          Value: end-gen
0972          Value: begin-gen
0972           Constant: begin-gen
0972            Constant: ctype: 'String' -> 'idsubcuenta'
0972            Constant: expr: 'u"idsubcuenta"'
0972          <-Value: expr: 'u"idsubcuenta"'
0972           Constant: end-gen
0972          Value: end-gen
0972          Expression: begin-gen
0972           Expression: expr: 'ustr('
0972           Constant: begin-gen
0972            Constant: ctype: 'String' -> "codsubcuenta = '"
0972            Constant: expr: 'u"codsubcuenta = \'"'
0972          <-Expression: expr: 'u"codsubcuenta = \'"'
0972           Constant: end-gen
0972           Expression: expr: ','
0972           Identifier: begin-gen
0972            Identifier: expr: 'codSubcuenta'
0972          <-Expression: expr: 'codSubcuenta'
0972           Identifier: end-gen
0972           Expression: expr: ','
0972           Constant: begin-gen
0972            Constant: ctype: 'String' -> "' AND codejercicio = '"
0972            Constant: expr: 'u"\' AND codejercicio = \'"'
0972          <-Expression: expr: 'u"\' AND codejercicio = \'"'
0972           Constant: end-gen
0972           Expression: expr: ','
0972           Member: begin-gen
0972            Identifier: begin-gen
0972             Identifier: expr: 'datosEmpresa'
0972            Identifier: end-gen
0972            Identifier: begin-gen
0972             Identifier: expr: 'codejercicio'
0972            Identifier: end-gen
0972            Member: expr: 'datosEmpresa.codejercicio'
0972          <-Expression: expr: 'datosEmpresa.codejercicio'
0972           Member: end-gen
0972           Expression: expr: ','
0972           Constant: begin-gen
0972            Constant: ctype: 'String' -> "'"
0972            Constant: expr: 'u"\'"'
0972          <-Expression: expr: 'u"\'"'
0972           Constant: end-gen
0972           Expression: expr: ')'
0972          Expression: end-gen
0972          FunctionCall: expr: 'sqlSelect(u"co_subcuentas", u"idsubcuenta", ustr( u"codsubcuenta = \'" , codSubcuenta , u"\' AND codejercicio = \'" , datosEmpresa.codejercicio , u"\'" ))'
0972         FunctionCall: end-gen
0972         Member: expr: 'util.sqlSelect(u"co_subcuentas", u"idsubcuenta", ustr( u"codsubcuenta = \'" , codSubcuenta , u"\' AND codejercicio = \'" , datosEmpresa.codejercicio , u"\'" ))'
0972       <-Value: expr: 'util.sqlSelect(u"co_subcuentas", u"idsubcuenta", ustr( u"codsubcuenta = \'" , codSubcuenta , u"\' AND codejercicio = \'" , datosEmpresa.codejercicio , u"\'" ))'
0972      <--Variable: expr: 'util.sqlSelect(u"co_subcuentas", u"idsubcuenta", ustr( u"codsubcuenta = \'" , codSubcuenta , u"\' AND codejercicio = \'" , datosEmpresa.codejercicio , u"\'" ))'
0972        Member: end-gen
0972       Value: end-gen
0972      Variable: end-gen
0972      DeclarationBlock: line: 'idSubcuenta = util.sqlSelect(u"co_subcuentas", u"idsubcuenta", ustr( u"codsubcuenta = \'" , codSubcuenta , u"\' AND codejercicio = \'" , datosEmpresa.codejercicio , u"\'" ))'
0972    <-Source: line: 'idSubcuenta = util.sqlSelect(u"co_subcuentas", u"idsubcuenta", ustr( u"codsubcuenta = \'" , codSubcuenta , u"\' AND codejercicio = \'" , datosEmpresa.codejercicio , u"\'" ))'
0972   <--Function: line: 'idSubcuenta = util.sqlSelect(u"co_subcuentas", u"idsubcuenta", ustr( u"codsubcuenta = \'" , codSubcuenta , u"\' AND codejercicio = \'" , datosEmpresa.codejercicio , u"\'" ))'
0972  <---Source: line: 'idSubcuenta = util.sqlSelect(u"co_subcuentas", u"idsubcuenta", ustr( u"codsubcuenta = \'" , codSubcuenta , u"\' AND codejercicio = \'" , datosEmpresa.codejercicio , u"\'" ))'
0972 <----Class: line: 'idSubcuenta = util.sqlSelect(u"co_subcuentas", u"idsubcuenta", ustr( u"codsubcuenta = \'" , codSubcuenta , u"\' AND codejercicio = \'" , datosEmpresa.codejercicio , u"\'" ))'
0972<-----Source: line: 'idSubcuenta = util.sqlSelect(u"co_subcuentas", u"idsubcuenta", ustr( u"codsubcuenta = \'" , codSubcuenta , u"\' AND codejercicio = \'" , datosEmpresa.codejercicio , u"\'" ))'
0973     DeclarationBlock: end-gen
0973     If: begin-gen
0973      Value: begin-gen
0973       Identifier: begin-gen
0973        Identifier: expr: 'idSubcuenta'
0973      <-Value: expr: 'idSubcuenta'
0973       Identifier: end-gen
0973      Value: end-gen
0973      If: line: 'if idSubcuenta:'
0973    <-Source: line: 'if idSubcuenta:'
0973   <--Function: line: 'if idSubcuenta:'
0973  <---Source: line: 'if idSubcuenta:'
0973 <----Class: line: 'if idSubcuenta:'
0973<-----Source: line: 'if idSubcuenta:'
0974      If: begin: 'block-if'
0974    <-Source: begin: 'block-if'
0974   <--Function: begin: 'block-if'
0974  <---Source: begin: 'block-if'
0974 <----Class: begin: 'block-if'
0974<-----Source: begin: 'block-if'
0974      Source: begin-gen
0974       InstructionFlow: begin-gen
0974        Value: begin-gen
0974         Identifier: begin-gen
0974          Identifier: expr: 'idSubcuenta'
0974        <-Value: expr: 'idSubcuenta'
0974         Identifier: end-gen
0974        Value: end-gen
0974        InstructionFlow: line: 'return idSubcuenta'
0974      <-Source: line: 'return idSubcuenta'
0974     <--If: line: 'return idSubcuenta'
0974    <---Source: line: 'return idSubcuenta'
0974   <----Function: line: 'return idSubcuenta'
0974  <-----Source: line: 'return idSubcuenta'
0974 <------Class: line: 'return idSubcuenta'
0974<-------Source: line: 'return idSubcuenta'
0975       InstructionFlow: end-gen
0975      Source: end-gen
0975      If: end: 'block-if'
0975    <-Source: end: 'block-if'
0975   <--Function: end: 'block-if'
0975  <---Source: end: 'block-if'
0975 <----Class: end: 'block-if'
0975<-----Source: end: 'block-if'
0975     If: end-gen
0975     DeclarationBlock: begin-gen
0975      Variable: begin-gen
0975       Variable: expr: 'codCuenta3'
0975       Variable: expr: '='
0975       Value: begin-gen
0975        Member: begin-gen
0975         Identifier: begin-gen
0975          Identifier: expr: 'codSubcuenta'
0975         Identifier: end-gen
0975         FunctionCall: begin-gen
0975          Value: begin-gen
0975           Constant: begin-gen
0975            Constant: ctype: 'Number' -> '3'
0975            Constant: expr: '3'
0975          <-Value: expr: '3'
0975           Constant: end-gen
0975          Value: end-gen
0975          FunctionCall: expr: 'left(3)'
0975         FunctionCall: end-gen
0975         Member: expr: 'codSubcuenta[0:3]'
0975       <-Value: expr: 'codSubcuenta[0:3]'
0975      <--Variable: expr: 'codSubcuenta[0:3]'
0975        Member: end-gen
0975       Value: end-gen
0975      Variable: end-gen
0975      DeclarationBlock: line: 'codCuenta3 = codSubcuenta[0:3]'
0975    <-Source: line: 'codCuenta3 = codSubcuenta[0:3]'
0975   <--Function: line: 'codCuenta3 = codSubcuenta[0:3]'
0975  <---Source: line: 'codCuenta3 = codSubcuenta[0:3]'
0975 <----Class: line: 'codCuenta3 = codSubcuenta[0:3]'
0975<-----Source: line: 'codCuenta3 = codSubcuenta[0:3]'
0976     DeclarationBlock: end-gen
0976     DeclarationBlock: begin-gen
0976      Variable: begin-gen
0976       Variable: expr: 'codCuenta4'
0976       Variable: expr: '='
0976       Value: begin-gen
0976        Member: begin-gen
0976         Identifier: begin-gen
0976          Identifier: expr: 'codSubcuenta'
0976         Identifier: end-gen
0976         FunctionCall: begin-gen
0976          Value: begin-gen
0976           Constant: begin-gen
0976            Constant: ctype: 'Number' -> '4'
0976            Constant: expr: '4'
0976          <-Value: expr: '4'
0976           Constant: end-gen
0976          Value: end-gen
0976          FunctionCall: expr: 'left(4)'
0976         FunctionCall: end-gen
0976         Member: expr: 'codSubcuenta[0:4]'
0976       <-Value: expr: 'codSubcuenta[0:4]'
0976      <--Variable: expr: 'codSubcuenta[0:4]'
0976        Member: end-gen
0976       Value: end-gen
0976      Variable: end-gen
0976      DeclarationBlock: line: 'codCuenta4 = codSubcuenta[0:4]'
0976    <-Source: line: 'codCuenta4 = codSubcuenta[0:4]'
0976   <--Function: line: 'codCuenta4 = codSubcuenta[0:4]'
0976  <---Source: line: 'codCuenta4 = codSubcuenta[0:4]'
0976 <----Class: line: 'codCuenta4 = codSubcuenta[0:4]'
0976<-----Source: line: 'codCuenta4 = codSubcuenta[0:4]'
0977     DeclarationBlock: end-gen
0977     DeclarationBlock: begin-gen
0977      Variable: begin-gen
0977       Variable: expr: 'datosCuenta'
0977       Variable: expr: '='
0977       Value: begin-gen
0977        Member: begin-gen
0977         Identifier: begin-gen
0977          Identifier: expr: 'self'
0977         Identifier: end-gen
0977         Identifier: begin-gen
0977          Identifier: expr: 'iface'
0977         Identifier: end-gen
0977         FunctionCall: begin-gen
0977          Value: begin-gen
0977           Constant: begin-gen
0977            Constant: ctype: 'String' -> 'co_cuentas'
0977            Constant: expr: 'u"co_cuentas"'
0977          <-Value: expr: 'u"co_cuentas"'
0977           Constant: end-gen
0977          Value: end-gen
0977          Value: begin-gen
0977           Constant: begin-gen
0977            Constant: ctype: 'String' -> 'codcuenta,idcuenta'
0977            Constant: expr: 'u"codcuenta,idcuenta"'
0977          <-Value: expr: 'u"codcuenta,idcuenta"'
0977           Constant: end-gen
0977          Value: end-gen
0977          Expression: begin-gen
0977           Expression: expr: 'ustr('
0977           Constant: begin-gen
0977            Constant: ctype: 'String' -> "idcuentaesp = '"
0977            Constant: expr: 'u"idcuentaesp = \'"'
0977          <-Expression: expr: 'u"idcuentaesp = \'"'
0977           Constant: end-gen
0977           Expression: expr: ','
0977           Identifier: begin-gen
0977            Identifier: expr: 'idCuentaEsp'
0977          <-Expression: expr: 'idCuentaEsp'
0977           Identifier: end-gen
0977           Expression: expr: ','
0977           Constant: begin-gen
0977            Constant: ctype: 'String' -> "'"
0977            Constant: expr: 'u"\'"'
0977          <-Expression: expr: 'u"\'"'
0977           Constant: end-gen
0977           Expression: expr: ','
0977           Constant: begin-gen
0977            Constant: ctype: 'String' -> " AND codcuenta = '"
0977            Constant: expr: 'u" AND codcuenta = \'"'
0977          <-Expression: expr: 'u" AND codcuenta = \'"'
0977           Constant: end-gen
0977           Expression: expr: ','
0977           Identifier: begin-gen
0977            Identifier: expr: 'codCuenta4'
0977          <-Expression: expr: 'codCuenta4'
0977           Identifier: end-gen
0977           Expression: expr: ','
0977           Constant: begin-gen
0977            Constant: ctype: 'String' -> "'"
0977            Constant: expr: 'u"\'"'
0977          <-Expression: expr: 'u"\'"'
0977           Constant: end-gen
0977           Expression: expr: ','
0977           Constant: begin-gen
0977            Constant: ctype: 'String' -> " AND codejercicio = '"
0977            Constant: expr: 'u" AND codejercicio = \'"'
0977          <-Expression: expr: 'u" AND codejercicio = \'"'
0977           Constant: end-gen
0977           Expression: expr: ','
0977           Member: begin-gen
0977            Identifier: begin-gen
0977             Identifier: expr: 'datosEmpresa'
0977            Identifier: end-gen
0977            Identifier: begin-gen
0977             Identifier: expr: 'codejercicio'
0977            Identifier: end-gen
0977            Member: expr: 'datosEmpresa.codejercicio'
0977          <-Expression: expr: 'datosEmpresa.codejercicio'
0977           Member: end-gen
0977           Expression: expr: ','
0977           Constant: begin-gen
0977            Constant: ctype: 'String' -> "' ORDER BY codcuenta"
0977            Constant: expr: 'u"\' ORDER BY codcuenta"'
0977          <-Expression: expr: 'u"\' ORDER BY codcuenta"'
0977           Constant: end-gen
0977           Expression: expr: ')'
0977          Expression: end-gen
0977          FunctionCall: expr: 'ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta4 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0977         FunctionCall: end-gen
0977         Member: expr: 'self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta4 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0977       <-Value: expr: 'self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta4 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0977      <--Variable: expr: 'self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta4 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0977        Member: end-gen
0977       Value: end-gen
0977      Variable: end-gen
0977      DeclarationBlock: line: 'datosCuenta = self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta4 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0977    <-Source: line: 'datosCuenta = self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta4 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0977   <--Function: line: 'datosCuenta = self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta4 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0977  <---Source: line: 'datosCuenta = self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta4 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0977 <----Class: line: 'datosCuenta = self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta4 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0977<-----Source: line: 'datosCuenta = self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta4 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0978     DeclarationBlock: end-gen
0978     If: begin-gen
0978      Expression: begin-gen
0978       Member: begin-gen
0978        Identifier: begin-gen
0978         Identifier: expr: 'datosCuenta'
0978        Identifier: end-gen
0978        Identifier: begin-gen
0978         Identifier: expr: 'result'
0978        Identifier: end-gen
0978        Member: expr: 'datosCuenta.result'
0978      <-Expression: expr: 'datosCuenta.result'
0978       Member: end-gen
0978       Compare: begin-gen
0978        Compare: expr: '=='
0978      <-Expression: expr: '=='
0978       Compare: end-gen
0978       OpUnary: begin-gen
0978        OpUnary: expr: '-'
0978      <-Expression: expr: '-'
0978        Constant: begin-gen
0978         Constant: ctype: 'Number' -> '1'
0978         Constant: expr: '1'
0978       <-OpUnary: expr: '1'
0978      <--Expression: expr: '1'
0978        Constant: end-gen
0978       OpUnary: end-gen
0978      Expression: end-gen
0978      If: line: 'if datosCuenta.result == - 1:'
0978    <-Source: line: 'if datosCuenta.result == - 1:'
0978   <--Function: line: 'if datosCuenta.result == - 1:'
0978  <---Source: line: 'if datosCuenta.result == - 1:'
0978 <----Class: line: 'if datosCuenta.result == - 1:'
0978<-----Source: line: 'if datosCuenta.result == - 1:'
0979      If: begin: 'block-if'
0979    <-Source: begin: 'block-if'
0979   <--Function: begin: 'block-if'
0979  <---Source: begin: 'block-if'
0979 <----Class: begin: 'block-if'
0979<-----Source: begin: 'block-if'
0979      Source: begin-gen
0979       InstructionUpdate: begin-gen
0979        Identifier: begin-gen
0979         Identifier: expr: 'datosCuenta'
0979        Identifier: end-gen
0979        OpUpdate: begin-gen
0979         OpUpdate: expr: '='
0979        OpUpdate: end-gen
0979        Value: begin-gen
0979         Member: begin-gen
0979          Identifier: begin-gen
0979           Identifier: expr: 'self'
0979          Identifier: end-gen
0979          Identifier: begin-gen
0979           Identifier: expr: 'iface'
0979          Identifier: end-gen
0979          FunctionCall: begin-gen
0979           Value: begin-gen
0979            Constant: begin-gen
0979             Constant: ctype: 'String' -> 'co_cuentas'
0979             Constant: expr: 'u"co_cuentas"'
0979           <-Value: expr: 'u"co_cuentas"'
0979            Constant: end-gen
0979           Value: end-gen
0979           Value: begin-gen
0979            Constant: begin-gen
0979             Constant: ctype: 'String' -> 'codcuenta,idcuenta'
0979             Constant: expr: 'u"codcuenta,idcuenta"'
0979           <-Value: expr: 'u"codcuenta,idcuenta"'
0979            Constant: end-gen
0979           Value: end-gen
0979           Expression: begin-gen
0979            Expression: expr: 'ustr('
0979            Constant: begin-gen
0979             Constant: ctype: 'String' -> "idcuentaesp = '"
0979             Constant: expr: 'u"idcuentaesp = \'"'
0979           <-Expression: expr: 'u"idcuentaesp = \'"'
0979            Constant: end-gen
0979            Expression: expr: ','
0979            Identifier: begin-gen
0979             Identifier: expr: 'idCuentaEsp'
0979           <-Expression: expr: 'idCuentaEsp'
0979            Identifier: end-gen
0979            Expression: expr: ','
0979            Constant: begin-gen
0979             Constant: ctype: 'String' -> "'"
0979             Constant: expr: 'u"\'"'
0979           <-Expression: expr: 'u"\'"'
0979            Constant: end-gen
0979            Expression: expr: ','
0979            Constant: begin-gen
0979             Constant: ctype: 'String' -> " AND codcuenta = '"
0979             Constant: expr: 'u" AND codcuenta = \'"'
0979           <-Expression: expr: 'u" AND codcuenta = \'"'
0979            Constant: end-gen
0979            Expression: expr: ','
0979            Identifier: begin-gen
0979             Identifier: expr: 'codCuenta3'
0979           <-Expression: expr: 'codCuenta3'
0979            Identifier: end-gen
0979            Expression: expr: ','
0979            Constant: begin-gen
0979             Constant: ctype: 'String' -> "'"
0979             Constant: expr: 'u"\'"'
0979           <-Expression: expr: 'u"\'"'
0979            Constant: end-gen
0979            Expression: expr: ','
0979            Constant: begin-gen
0979             Constant: ctype: 'String' -> " AND codejercicio = '"
0979             Constant: expr: 'u" AND codejercicio = \'"'
0979           <-Expression: expr: 'u" AND codejercicio = \'"'
0979            Constant: end-gen
0979            Expression: expr: ','
0979            Member: begin-gen
0979             Identifier: begin-gen
0979              Identifier: expr: 'datosEmpresa'
0979             Identifier: end-gen
0979             Identifier: begin-gen
0979              Identifier: expr: 'codejercicio'
0979             Identifier: end-gen
0979             Member: expr: 'datosEmpresa.codejercicio'
0979           <-Expression: expr: 'datosEmpresa.codejercicio'
0979            Member: end-gen
0979            Expression: expr: ','
0979            Constant: begin-gen
0979             Constant: ctype: 'String' -> "' ORDER BY codcuenta"
0979             Constant: expr: 'u"\' ORDER BY codcuenta"'
0979           <-Expression: expr: 'u"\' ORDER BY codcuenta"'
0979            Constant: end-gen
0979            Expression: expr: ')'
0979           Expression: end-gen
0979           FunctionCall: expr: 'ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta3 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0979          FunctionCall: end-gen
0979          Member: expr: 'self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta3 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0979        <-Value: expr: 'self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta3 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0979         Member: end-gen
0979        Value: end-gen
0979        InstructionUpdate: line: 'datosCuenta = self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta3 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0979      <-Source: line: 'datosCuenta = self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta3 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0979     <--If: line: 'datosCuenta = self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta3 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0979    <---Source: line: 'datosCuenta = self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta3 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0979   <----Function: line: 'datosCuenta = self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta3 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0979  <-----Source: line: 'datosCuenta = self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta3 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0979 <------Class: line: 'datosCuenta = self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta3 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0979<-------Source: line: 'datosCuenta = self.iface.ejecutarQry(u"co_cuentas", u"codcuenta,idcuenta", ustr( u"idcuentaesp = \'" , idCuentaEsp , u"\'" , u" AND codcuenta = \'" , codCuenta3 , u"\'" , u" AND codejercicio = \'" , datosEmpresa.codejercicio , u"\' ORDER BY codcuenta" ))'
0980       InstructionUpdate: end-gen
0980       If: begin-gen
0980        Expression: begin-gen
0980         Member: begin-gen
0980          Identifier: begin-gen
0980           Identifier: expr: 'datosCuenta'
0980          Identifier: end-gen
0980          Identifier: begin-gen
0980           Identifier: expr: 'result'
0980          Identifier: end-gen
0980          Member: expr: 'datosCuenta.result'
0980        <-Expression: expr: 'datosCuenta.result'
0980         Member: end-gen
0980         Compare: begin-gen
0980          Compare: expr: '=='
0980        <-Expression: expr: '=='
0980         Compare: end-gen
0980         OpUnary: begin-gen
0980          OpUnary: expr: '-'
0980        <-Expression: expr: '-'
0980          Constant: begin-gen
0980           Constant: ctype: 'Number' -> '1'
0980           Constant: expr: '1'
0980         <-OpUnary: expr: '1'
0980        <--Expression: expr: '1'
0980          Constant: end-gen
0980         OpUnary: end-gen
0980        Expression: end-gen
0980        If: line: 'if datosCuenta.result == - 1:'
0980      <-Source: line: 'if datosCuenta.result == - 1:'
0980     <--If: line: 'if datosCuenta.result == - 1:'
0980    <---Source: line: 'if datosCuenta.result == - 1:'
0980   <----Function: line: 'if datosCuenta.result == - 1:'
0980  <-----Source: line: 'if datosCuenta.result == - 1:'
0980 <------Class: line: 'if datosCuenta.result == - 1:'
0980<-------Source: line: 'if datosCuenta.result == - 1:'
0981        If: begin: 'block-if'
0981      <-Source: begin: 'block-if'
0981     <--If: begin: 'block-if'
0981    <---Source: begin: 'block-if'
0981   <----Function: begin: 'block-if'
0981  <-----Source: begin: 'block-if'
0981 <------Class: begin: 'block-if'
0981<-------Source: begin: 'block-if'
0981        Source: begin-gen
0981         InstructionFlow: begin-gen
0981          Value: begin-gen
0981           Identifier: begin-gen
0981            Identifier: expr: 'True'
0981          <-Value: expr: 'True'
0981           Identifier: end-gen
0981          Value: end-gen
0981          InstructionFlow: line: 'return True'
0981        <-Source: line: 'return True'
0981       <--If: line: 'return True'
0981      <---Source: line: 'return True'
0981     <----If: line: 'return True'
0981    <-----Source: line: 'return True'
0981   <------Function: line: 'return True'
0981  <-------Source: line: 'return True'
0981 <--------Class: line: 'return True'
0981<---------Source: line: 'return True'
0982         InstructionFlow: end-gen
0982        Source: end-gen
0982        If: end: 'block-if'
0982      <-Source: end: 'block-if'
0982     <--If: end: 'block-if'
0982    <---Source: end: 'block-if'
0982   <----Function: end: 'block-if'
0982  <-----Source: end: 'block-if'
0982 <------Class: end: 'block-if'
0982<-------Source: end: 'block-if'
0982       If: end-gen
0982      Source: end-gen
0982      If: end: 'block-if'
0982    <-Source: end: 'block-if'
0982   <--Function: end: 'block-if'
0982  <---Source: end: 'block-if'
0982 <----Class: end: 'block-if'
0982<-----Source: end: 'block-if'
0982     If: end-gen
0982     DeclarationBlock: begin-gen
0982      Variable: begin-gen
0982       Variable: expr: 'curSubcuenta'
0982       Variable: expr: '='
0982       Value: begin-gen
0982        New: begin-gen
0982         FunctionCall: begin-gen
0982          Value: begin-gen
0982           Constant: begin-gen
0982            Constant: ctype: 'String' -> 'co_subcuentas'
0982            Constant: expr: 'u"co_subcuentas"'
0982          <-Value: expr: 'u"co_subcuentas"'
0982           Constant: end-gen
0982          Value: end-gen
0982          FunctionCall: expr: 'FLSqlCursor(u"co_subcuentas")'
0982        <-New: expr: 'qsatype.FLSqlCursor(u"co_subcuentas")'
0982       <--Value: expr: 'qsatype.FLSqlCursor(u"co_subcuentas")'
0982      <---Variable: expr: 'qsatype.FLSqlCursor(u"co_subcuentas")'
0982         FunctionCall: end-gen
0982        New: end-gen
0982       Value: end-gen
0982      Variable: end-gen
0982      DeclarationBlock: line: 'curSubcuenta = qsatype.FLSqlCursor(u"co_subcuentas")'
0982    <-Source: line: 'curSubcuenta = qsatype.FLSqlCursor(u"co_subcuentas")'
0982   <--Function: line: 'curSubcuenta = qsatype.FLSqlCursor(u"co_subcuentas")'
0982  <---Source: line: 'curSubcuenta = qsatype.FLSqlCursor(u"co_subcuentas")'
0982 <----Class: line: 'curSubcuenta = qsatype.FLSqlCursor(u"co_subcuentas")'
0982<-----Source: line: 'curSubcuenta = qsatype.FLSqlCursor(u"co_subcuentas")'
0983     DeclarationBlock: end-gen
0983     With: begin-gen
0983      Identifier: begin-gen
0983       Identifier: expr: 'curSubcuenta'
0983      Identifier: end-gen
0983      With: line: ' #WITH_START'
0983    <-Source: line: ' #WITH_START'
0983   <--Function: line: ' #WITH_START'
0983  <---Source: line: ' #WITH_START'
0983 <----Class: line: ' #WITH_START'
0983<-----Source: line: ' #WITH_START'
0984      Source: begin-gen
0984       InstructionCall: begin-gen
0984        FunctionCall: begin-gen
0984         Value: begin-gen
0984          Member: begin-gen
0984           Identifier: begin-gen
0984            Identifier: expr: 'curSubcuenta'
0984           Identifier: end-gen
0984           Identifier: begin-gen
0984            Identifier: expr: 'Insert'
0984           Identifier: end-gen
0984           Member: expr: 'curSubcuenta.Insert'
0984         <-Value: expr: 'curSubcuenta.Insert'
0984          Member: end-gen
0984         Value: end-gen
0984         FunctionCall: expr: 'setModeAccess(curSubcuenta.Insert)'
0984        FunctionCall: end-gen
0984        InstructionCall: line: 'setModeAccess(curSubcuenta.Insert)'
0984      <-Source: line: 'setModeAccess(curSubcuenta.Insert)'
0984     <--With: line: 'curSubcuenta.setModeAccess(curSubcuenta.Insert)'
0984    <---Source: line: 'curSubcuenta.setModeAccess(curSubcuenta.Insert)'
0984   <----Function: line: 'curSubcuenta.setModeAccess(curSubcuenta.Insert)'
0984  <-----Source: line: 'curSubcuenta.setModeAccess(curSubcuenta.Insert)'
0984 <------Class: line: 'curSubcuenta.setModeAccess(curSubcuenta.Insert)'
0984<-------Source: line: 'curSubcuenta.setModeAccess(curSubcuenta.Insert)'
0985       InstructionCall: end-gen
0985       InstructionCall: begin-gen
0985        FunctionCall: begin-gen
0985         FunctionCall: expr: 'refreshBuffer()'
0985        FunctionCall: end-gen
0985        InstructionCall: line: 'refreshBuffer()'
0985      <-Source: line: 'refreshBuffer()'
0985     <--With: line: 'curSubcuenta.refreshBuffer()'
0985    <---Source: line: 'curSubcuenta.refreshBuffer()'
0985   <----Function: line: 'curSubcuenta.refreshBuffer()'
0985  <-----Source: line: 'curSubcuenta.refreshBuffer()'
0985 <------Class: line: 'curSubcuenta.refreshBuffer()'
0985<-------Source: line: 'curSubcuenta.refreshBuffer()'
0986       InstructionCall: end-gen
0986       InstructionCall: begin-gen
0986        FunctionCall: begin-gen
0986         Value: begin-gen
0986          Constant: begin-gen
0986           Constant: ctype: 'String' -> 'codsubcuenta'
0986           Constant: expr: 'u"codsubcuenta"'
0986         <-Value: expr: 'u"codsubcuenta"'
0986          Constant: end-gen
0986         Value: end-gen
0986         Value: begin-gen
0986          Identifier: begin-gen
0986           Identifier: expr: 'codSubcuenta'
0986         <-Value: expr: 'codSubcuenta'
0986          Identifier: end-gen
0986         Value: end-gen
0986         FunctionCall: expr: 'setValueBuffer(u"codsubcuenta", codSubcuenta)'
0986        FunctionCall: end-gen
0986        InstructionCall: line: 'setValueBuffer(u"codsubcuenta", codSubcuenta)'
0986      <-Source: line: 'setValueBuffer(u"codsubcuenta", codSubcuenta)'
0986     <--With: line: 'curSubcuenta.setValueBuffer(u"codsubcuenta", codSubcuenta)'
0986    <---Source: line: 'curSubcuenta.setValueBuffer(u"codsubcuenta", codSubcuenta)'
0986   <----Function: line: 'curSubcuenta.setValueBuffer(u"codsubcuenta", codSubcuenta)'
0986  <-----Source: line: 'curSubcuenta.setValueBuffer(u"codsubcuenta", codSubcuenta)'
0986 <------Class: line: 'curSubcuenta.setValueBuffer(u"codsubcuenta", codSubcuenta)'
0986<-------Source: line: 'curSubcuenta.setValueBuffer(u"codsubcuenta", codSubcuenta)'
0987       InstructionCall: end-gen
0987       InstructionCall: begin-gen
0987        FunctionCall: begin-gen
0987         Value: begin-gen
0987          Constant: begin-gen
0987           Constant: ctype: 'String' -> 'descripcion'
0987           Constant: expr: 'u"descripcion"'
0987         <-Value: expr: 'u"descripcion"'
0987          Constant: end-gen
0987         Value: end-gen
0987         Value: begin-gen
0987          Identifier: begin-gen
0987           Identifier: expr: 'descripcion'
0987         <-Value: expr: 'descripcion'
0987          Identifier: end-gen
0987         Value: end-gen
0987         FunctionCall: expr: 'setValueBuffer(u"descripcion", descripcion)'
0987        FunctionCall: end-gen
0987        InstructionCall: line: 'setValueBuffer(u"descripcion", descripcion)'
0987      <-Source: line: 'setValueBuffer(u"descripcion", descripcion)'
0987     <--With: line: 'curSubcuenta.setValueBuffer(u"descripcion", descripcion)'
0987    <---Source: line: 'curSubcuenta.setValueBuffer(u"descripcion", descripcion)'
0987   <----Function: line: 'curSubcuenta.setValueBuffer(u"descripcion", descripcion)'
0987  <-----Source: line: 'curSubcuenta.setValueBuffer(u"descripcion", descripcion)'
0987 <------Class: line: 'curSubcuenta.setValueBuffer(u"descripcion", descripcion)'
0987<-------Source: line: 'curSubcuenta.setValueBuffer(u"descripcion", descripcion)'
0988       InstructionCall: end-gen
0988       InstructionCall: begin-gen
0988        FunctionCall: begin-gen
0988         Value: begin-gen
0988          Constant: begin-gen
0988           Constant: ctype: 'String' -> 'idcuenta'
0988           Constant: expr: 'u"idcuenta"'
0988         <-Value: expr: 'u"idcuenta"'
0988          Constant: end-gen
0988         Value: end-gen
0988         Value: begin-gen
0988          Member: begin-gen
0988           Identifier: begin-gen
0988            Identifier: expr: 'datosCuenta'
0988           Identifier: end-gen
0988           Identifier: begin-gen
0988            Identifier: expr: 'idcuenta'
0988           Identifier: end-gen
0988           Member: expr: 'datosCuenta.idcuenta'
0988         <-Value: expr: 'datosCuenta.idcuenta'
0988          Member: end-gen
0988         Value: end-gen
0988         FunctionCall: expr: 'setValueBuffer(u"idcuenta", datosCuenta.idcuenta)'
0988        FunctionCall: end-gen
0988        InstructionCall: line: 'setValueBuffer(u"idcuenta", datosCuenta.idcuenta)'
0988      <-Source: line: 'setValueBuffer(u"idcuenta", datosCuenta.idcuenta)'
0988     <--With: line: 'curSubcuenta.setValueBuffer(u"idcuenta", datosCuenta.idcuenta)'
0988    <---Source: line: 'curSubcuenta.setValueBuffer(u"idcuenta", datosCuenta.idcuenta)'
0988   <----Function: line: 'curSubcuenta.setValueBuffer(u"idcuenta", datosCuenta.idcuenta)'
0988  <-----Source: line: 'curSubcuenta.setValueBuffer(u"idcuenta", datosCuenta.idcuenta)'
0988 <------Class: line: 'curSubcuenta.setValueBuffer(u"idcuenta", datosCuenta.idcuenta)'
0988<-------Source: line: 'curSubcuenta.setValueBuffer(u"idcuenta", datosCuenta.idcuenta)'
0989       InstructionCall: end-gen
0989       InstructionCall: begin-gen
0989        FunctionCall: begin-gen
0989         Value: begin-gen
0989          Constant: begin-gen
0989           Constant: ctype: 'String' -> 'codcuenta'
0989           Constant: expr: 'u"codcuenta"'
0989         <-Value: expr: 'u"codcuenta"'
0989          Constant: end-gen
0989         Value: end-gen
0989         Value: begin-gen
0989          Member: begin-gen
0989           Identifier: begin-gen
0989            Identifier: expr: 'datosCuenta'
0989           Identifier: end-gen
0989           Identifier: begin-gen
0989            Identifier: expr: 'codcuenta'
0989           Identifier: end-gen
0989           Member: expr: 'datosCuenta.codcuenta'
0989         <-Value: expr: 'datosCuenta.codcuenta'
0989          Member: end-gen
0989         Value: end-gen
0989         FunctionCall: expr: 'setValueBuffer(u"codcuenta", datosCuenta.codcuenta)'
0989        FunctionCall: end-gen
0989        InstructionCall: line: 'setValueBuffer(u"codcuenta", datosCuenta.codcuenta)'
0989      <-Source: line: 'setValueBuffer(u"codcuenta", datosCuenta.codcuenta)'
0989     <--With: line: 'curSubcuenta.setValueBuffer(u"codcuenta", datosCuenta.codcuenta)'
0989    <---Source: line: 'curSubcuenta.setValueBuffer(u"codcuenta", datosCuenta.codcuenta)'
0989   <----Function: line: 'curSubcuenta.setValueBuffer(u"codcuenta", datosCuenta.codcuenta)'
0989  <-----Source: line: 'curSubcuenta.setValueBuffer(u"codcuenta", datosCuenta.codcuenta)'
0989 <------Class: line: 'curSubcuenta.setValueBuffer(u"codcuenta", datosCuenta.codcuenta)'
0989<-------Source: line: 'curSubcuenta.setValueBuffer(u"codcuenta", datosCuenta.codcuenta)'
0990       InstructionCall: end-gen
0990       InstructionCall: begin-gen
0990        FunctionCall: begin-gen
0990         Value: begin-gen
0990          Constant: begin-gen
0990           Constant: ctype: 'String' -> 'coddivisa'
0990           Constant: expr: 'u"coddivisa"'
0990         <-Value: expr: 'u"coddivisa"'
0990          Constant: end-gen
0990         Value: end-gen
0990         Value: begin-gen
0990          Member: begin-gen
0990           Identifier: begin-gen
0990            Identifier: expr: 'datosEmpresa'
0990           Identifier: end-gen
0990           Identifier: begin-gen
0990            Identifier: expr: 'coddivisa'
0990           Identifier: end-gen
0990           Member: expr: 'datosEmpresa.coddivisa'
0990         <-Value: expr: 'datosEmpresa.coddivisa'
0990          Member: end-gen
0990         Value: end-gen
0990         FunctionCall: expr: 'setValueBuffer(u"coddivisa", datosEmpresa.coddivisa)'
0990        FunctionCall: end-gen
0990        InstructionCall: line: 'setValueBuffer(u"coddivisa", datosEmpresa.coddivisa)'
0990      <-Source: line: 'setValueBuffer(u"coddivisa", datosEmpresa.coddivisa)'
0990     <--With: line: 'curSubcuenta.setValueBuffer(u"coddivisa", datosEmpresa.coddivisa)'
0990    <---Source: line: 'curSubcuenta.setValueBuffer(u"coddivisa", datosEmpresa.coddivisa)'
0990   <----Function: line: 'curSubcuenta.setValueBuffer(u"coddivisa", datosEmpresa.coddivisa)'
0990  <-----Source: line: 'curSubcuenta.setValueBuffer(u"coddivisa", datosEmpresa.coddivisa)'
0990 <------Class: line: 'curSubcuenta.setValueBuffer(u"coddivisa", datosEmpresa.coddivisa)'
0990<-------Source: line: 'curSubcuenta.setValueBuffer(u"coddivisa", datosEmpresa.coddivisa)'
0991       InstructionCall: end-gen
0991       InstructionCall: begin-gen
0991        FunctionCall: begin-gen
0991         Value: begin-gen
0991          Constant: begin-gen
0991           Constant: ctype: 'String' -> 'codejercicio'
0991           Constant: expr: 'u"codejercicio"'
0991         <-Value: expr: 'u"codejercicio"'
0991          Constant: end-gen
0991         Value: end-gen
0991         Value: begin-gen
0991          Member: begin-gen
0991           Identifier: begin-gen
0991            Identifier: expr: 'datosEmpresa'
0991           Identifier: end-gen
0991           Identifier: begin-gen
0991            Identifier: expr: 'codejercicio'
0991           Identifier: end-gen
0991           Member: expr: 'datosEmpresa.codejercicio'
0991         <-Value: expr: 'datosEmpresa.codejercicio'
0991          Member: end-gen
0991         Value: end-gen
0991         FunctionCall: expr: 'setValueBuffer(u"codejercicio", datosEmpresa.codejercicio)'
0991        FunctionCall: end-gen
0991        InstructionCall: line: 'setValueBuffer(u"codejercicio", datosEmpresa.codejercicio)'
0991      <-Source: line: 'setValueBuffer(u"codejercicio", datosEmpresa.codejercicio)'
0991     <--With: line: 'curSubcuenta.setValueBuffer(u"codejercicio", datosEmpresa.codejercicio)'
0991    <---Source: line: 'curSubcuenta.setValueBuffer(u"codejercicio", datosEmpresa.codejercicio)'
0991   <----Function: line: 'curSubcuenta.setValueBuffer(u"codejercicio", datosEmpresa.codejercicio)'
0991  <-----Source: line: 'curSubcuenta.setValueBuffer(u"codejercicio", datosEmpresa.codejercicio)'
0991 <------Class: line: 'curSubcuenta.setValueBuffer(u"codejercicio", datosEmpresa.codejercicio)'
0991<-------Source: line: 'curSubcuenta.setValueBuffer(u"codejercicio", datosEmpresa.codejercicio)'
0992       InstructionCall: end-gen
0992      Source: end-gen
0992      With: line: ' #WITH_END'
0992    <-Source: line: ' #WITH_END'
0992   <--Function: line: ' #WITH_END'
0992  <---Source: line: ' #WITH_END'
0992 <----Class: line: ' #WITH_END'
0992<-----Source: line: ' #WITH_END'
0993     With: end-gen
0993     If: begin-gen
0993      Value: begin-gen
0993       OpUnary: begin-gen
0993        OpUnary: expr: 'not'
0993      <-Value: expr: 'not'
0993        Member: begin-gen
0993         Identifier: begin-gen
0993          Identifier: expr: 'curSubcuenta'
0993         Identifier: end-gen
0993         FunctionCall: begin-gen
0993          FunctionCall: expr: 'commitBuffer()'
0993         FunctionCall: end-gen
0993         Member: expr: 'curSubcuenta.commitBuffer()'
0993       <-OpUnary: expr: 'curSubcuenta.commitBuffer()'
0993      <--Value: expr: 'curSubcuenta.commitBuffer()'
0993        Member: end-gen
0993       OpUnary: end-gen
0993      Value: end-gen
0993      If: line: 'if not curSubcuenta.commitBuffer():'
0993    <-Source: line: 'if not curSubcuenta.commitBuffer():'
0993   <--Function: line: 'if not curSubcuenta.commitBuffer():'
0993  <---Source: line: 'if not curSubcuenta.commitBuffer():'
0993 <----Class: line: 'if not curSubcuenta.commitBuffer():'
0993<-----Source: line: 'if not curSubcuenta.commitBuffer():'
0994      If: begin: 'block-if'
0994    <-Source: begin: 'block-if'
0994   <--Function: begin: 'block-if'
0994  <---Source: begin: 'block-if'
0994 <----Class: begin: 'block-if'
0994<-----Source: begin: 'block-if'
0994      Source: begin-gen
0994       InstructionFlow: begin-gen
0994        Value: begin-gen
0994         Identifier: begin-gen
0994          Identifier: expr: 'False'
0994        <-Value: expr: 'False'
0994         Identifier: end-gen
0994        Value: end-gen
0994        InstructionFlow: line: 'return False'
0994      <-Source: line: 'return False'
0994     <--If: line: 'return False'
0994    <---Source: line: 'return False'
0994   <----Function: line: 'return False'
0994  <-----Source: line: 'return False'
0994 <------Class: line: 'return False'
0994<-------Source: line: 'return False'
0995       InstructionFlow: end-gen
0995      Source: end-gen
0995      If: end: 'block-if'
0995    <-Source: end: 'block-if'
0995   <--Function: end: 'block-if'
0995  <---Source: end: 'block-if'
0995 <----Class: end: 'block-if'
0995<-----Source: end: 'block-if'
0995     If: end-gen
0995     InstructionFlow: begin-gen
0995      Value: begin-gen
0995       Member: begin-gen
0995        Identifier: begin-gen
0995         Identifier: expr: 'curSubcuenta'
0995        Identifier: end-gen
0995        FunctionCall: begin-gen
0995         Value: begin-gen
0995          Constant: begin-gen
0995           Constant: ctype: 'String' -> 'idsubcuenta'
0995           Constant: expr: 'u"idsubcuenta"'
0995         <-Value: expr: 'u"idsubcuenta"'
0995          Constant: end-gen
0995         Value: end-gen
0995         FunctionCall: expr: 'valueBuffer(u"idsubcuenta")'
0995        FunctionCall: end-gen
0995        Member: expr: 'curSubcuenta.valueBuffer(u"idsubcuenta")'
0995      <-Value: expr: 'curSubcuenta.valueBuffer(u"idsubcuenta")'
0995       Member: end-gen
0995      Value: end-gen
0995      InstructionFlow: line: 'return curSubcuenta.valueBuffer(u"idsubcuenta")'
0995    <-Source: line: 'return curSubcuenta.valueBuffer(u"idsubcuenta")'
0995   <--Function: line: 'return curSubcuenta.valueBuffer(u"idsubcuenta")'
0995  <---Source: line: 'return curSubcuenta.valueBuffer(u"idsubcuenta")'
0995 <----Class: line: 'return curSubcuenta.valueBuffer(u"idsubcuenta")'
0995<-----Source: line: 'return curSubcuenta.valueBuffer(u"idsubcuenta")'
0996     InstructionFlow: end-gen
0996    Source: end-gen
0996    Function: end: 'block-def-oficial_crearSubcuenta'
0996  <-Source: end: 'block-def-oficial_crearSubcuenta'
0996 <--Class: end: 'block-def-oficial_crearSubcuenta'
0996<---Source: end: 'block-def-oficial_crearSubcuenta'
0997   Function: end-gen
0997   Function: begin-gen
0997    Variable: begin-gen
0997     Variable: expr: 'idSubcuenta'
0997    Variable: end-gen
0997    Function: line: 'def oficial_borrarSubcuenta(self, idSubcuenta = None):'
0997  <-Source: line: 'def oficial_borrarSubcuenta(self, idSubcuenta = None):'
0997 <--Class: line: 'def oficial_borrarSubcuenta(self, idSubcuenta = None):'
0997<---Source: line: 'def oficial_borrarSubcuenta(self, idSubcuenta = None):'
0998    Function: begin: 'block-def-oficial_borrarSubcuenta'
0998  <-Source: begin: 'block-def-oficial_borrarSubcuenta'
0998 <--Class: begin: 'block-def-oficial_borrarSubcuenta'
0998<---Source: begin: 'block-def-oficial_borrarSubcuenta'
0998    Source: begin-gen
0998     DeclarationBlock: begin-gen
0998      Variable: begin-gen
0998       Variable: expr: 'util'
0998       Variable: expr: '='
0998       Value: begin-gen
0998        New: begin-gen
0998         FunctionCall: begin-gen
0998          FunctionCall: expr: 'FLUtil()'
0998        <-New: expr: 'qsatype.FLUtil()'
0998       <--Value: expr: 'qsatype.FLUtil()'
0998      <---Variable: expr: 'qsatype.FLUtil()'
0998         FunctionCall: end-gen
0998        New: end-gen
0998       Value: end-gen
0998      Variable: end-gen
0998      DeclarationBlock: line: 'util = qsatype.FLUtil()'
0998    <-Source: line: 'util = qsatype.FLUtil()'
0998   <--Function: line: 'util = qsatype.FLUtil()'
0998  <---Source: line: 'util = qsatype.FLUtil()'
0998 <----Class: line: 'util = qsatype.FLUtil()'
0998<-----Source: line: 'util = qsatype.FLUtil()'
0999     DeclarationBlock: end-gen
0999     If: begin-gen
0999      Value: begin-gen
0999       OpUnary: begin-gen
0999        OpUnary: expr: 'not'
0999      <-Value: expr: 'not'
0999        Member: begin-gen
0999         Identifier: begin-gen
0999          Identifier: expr: 'util'
0999         Identifier: end-gen
0999         FunctionCall: begin-gen
0999          Value: begin-gen
0999           Constant: begin-gen
0999            Constant: ctype: 'String' -> 'co_partidas'
0999            Constant: expr: 'u"co_partidas"'
0999          <-Value: expr: 'u"co_partidas"'
0999           Constant: end-gen
0999          Value: end-gen
0999          Value: begin-gen
0999           Constant: begin-gen
0999            Constant: ctype: 'String' -> 'idpartida'
0999            Constant: expr: 'u"idpartida"'
0999          <-Value: expr: 'u"idpartida"'
0999           Constant: end-gen
0999          Value: end-gen
0999          Expression: begin-gen
0999           Expression: expr: 'ustr('
0999           Constant: begin-gen
0999            Constant: ctype: 'String' -> 'idsubcuenta = '
0999            Constant: expr: 'u"idsubcuenta = "'
0999          <-Expression: expr: 'u"idsubcuenta = "'
0999           Constant: end-gen
0999           Expression: expr: ','
0999           Identifier: begin-gen
0999            Identifier: expr: 'idSubcuenta'
0999          <-Expression: expr: 'idSubcuenta'
0999           Identifier: end-gen
0999           Expression: expr: ')'
0999          Expression: end-gen
0999          FunctionCall: expr: 'sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta ))'
0999         FunctionCall: end-gen
0999         Member: expr: 'util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta ))'
0999       <-OpUnary: expr: 'util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta ))'
0999      <--Value: expr: 'util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta ))'
0999        Member: end-gen
0999       OpUnary: end-gen
0999      Value: end-gen
0999      If: line: 'if not util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0999    <-Source: line: 'if not util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0999   <--Function: line: 'if not util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0999  <---Source: line: 'if not util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0999 <----Class: line: 'if not util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
0999<-----Source: line: 'if not util.sqlSelect(u"co_partidas", u"idpartida", ustr( u"idsubcuenta = " , idSubcuenta )):'
1000      If: begin: 'block-if'
1000    <-Source: begin: 'block-if'
1000   <--Function: begin: 'block-if'
1000  <---Source: begin: 'block-if'
1000 <----Class: begin: 'block-if'
1000<-----Source: begin: 'block-if'
1000      Source: begin-gen
1000       DeclarationBlock: begin-gen
1000        Variable: begin-gen
1000         Variable: expr: 'curSubcuenta'
1000         Variable: expr: '='
1000         Value: begin-gen
1000          New: begin-gen
1000           FunctionCall: begin-gen
1000            Value: begin-gen
1000             Constant: begin-gen
1000              Constant: ctype: 'String' -> 'co_subcuentas'
1000              Constant: expr: 'u"co_subcuentas"'
1000            <-Value: expr: 'u"co_subcuentas"'
1000             Constant: end-gen
1000            Value: end-gen
1000            FunctionCall: expr: 'FLSqlCursor(u"co_subcuentas")'
1000          <-New: expr: 'qsatype.FLSqlCursor(u"co_subcuentas")'
1000         <--Value: expr: 'qsatype.FLSqlCursor(u"co_subcuentas")'
1000        <---Variable: expr: 'qsatype.FLSqlCursor(u"co_subcuentas")'
1000           FunctionCall: end-gen
1000          New: end-gen
1000         Value: end-gen
1000        Variable: end-gen
1000        DeclarationBlock: line: 'curSubcuenta = qsatype.FLSqlCursor(u"co_subcuentas")'
1000      <-Source: line: 'curSubcuenta = qsatype.FLSqlCursor(u"co_subcuentas")'
1000     <--If: line: 'curSubcuenta = qsatype.FLSqlCursor(u"co_subcuentas")'
1000    <---Source: line: 'curSubcuenta = qsatype.FLSqlCursor(u"co_subcuentas")'
1000   <----Function: line: 'curSubcuenta = qsatype.FLSqlCursor(u"co_subcuentas")'
1000  <-----Source: line: 'curSubcuenta = qsatype.FLSqlCursor(u"co_subcuentas")'
1000 <------Class: line: 'curSubcuenta = qsatype.FLSqlCursor(u"co_subcuentas")'
1000<-------Source: line: 'curSubcuenta = qsatype.FLSqlCursor(u"co_subcuentas")'
1001       DeclarationBlock: end-gen
1001       InstructionCall: begin-gen
1001        Member: begin-gen
1001         Identifier: begin-gen
1001          Identifier: expr: 'curSubcuenta'
1001         Identifier: end-gen
1001         FunctionCall: begin-gen
1001          Expression: begin-gen
1001           Expression: expr: 'ustr('
1001           Constant: begin-gen
1001            Constant: ctype: 'String' -> 'idsubcuenta = '
1001            Constant: expr: 'u"idsubcuenta = "'
1001          <-Expression: expr: 'u"idsubcuenta = "'
1001           Constant: end-gen
1001           Expression: expr: ','
1001           Identifier: begin-gen
1001            Identifier: expr: 'idSubcuenta'
1001          <-Expression: expr: 'idSubcuenta'
1001           Identifier: end-gen
1001           Expression: expr: ')'
1001          Expression: end-gen
1001          FunctionCall: expr: 'select(ustr( u"idsubcuenta = " , idSubcuenta ))'
1001         FunctionCall: end-gen
1001         Member: expr: 'curSubcuenta.select(ustr( u"idsubcuenta = " , idSubcuenta ))'
1001        Member: end-gen
1001        InstructionCall: line: 'curSubcuenta.select(ustr( u"idsubcuenta = " , idSubcuenta ))'
1001      <-Source: line: 'curSubcuenta.select(ustr( u"idsubcuenta = " , idSubcuenta ))'
1001     <--If: line: 'curSubcuenta.select(ustr( u"idsubcuenta = " , idSubcuenta ))'
1001    <---Source: line: 'curSubcuenta.select(ustr( u"idsubcuenta = " , idSubcuenta ))'
1001   <----Function: line: 'curSubcuenta.select(ustr( u"idsubcuenta = " , idSubcuenta ))'
1001  <-----Source: line: 'curSubcuenta.select(ustr( u"idsubcuenta = " , idSubcuenta ))'
1001 <------Class: line: 'curSubcuenta.select(ustr( u"idsubcuenta = " , idSubcuenta ))'
1001<-------Source: line: 'curSubcuenta.select(ustr( u"idsubcuenta = " , idSubcuenta ))'
1002       InstructionCall: end-gen
1002       InstructionCall: begin-gen
1002        Member: begin-gen
1002         Identifier: begin-gen
1002          Identifier: expr: 'curSubcuenta'
1002         Identifier: end-gen
1002         FunctionCall: begin-gen
1002          FunctionCall: expr: 'first()'
1002         FunctionCall: end-gen
1002         Member: expr: 'curSubcuenta.first()'
1002        Member: end-gen
1002        InstructionCall: line: 'curSubcuenta.first()'
1002      <-Source: line: 'curSubcuenta.first()'
1002     <--If: line: 'curSubcuenta.first()'
1002    <---Source: line: 'curSubcuenta.first()'
1002   <----Function: line: 'curSubcuenta.first()'
1002  <-----Source: line: 'curSubcuenta.first()'
1002 <------Class: line: 'curSubcuenta.first()'
1002<-------Source: line: 'curSubcuenta.first()'
1003       InstructionCall: end-gen
1003       InstructionCall: begin-gen
1003        Member: begin-gen
1003         Identifier: begin-gen
1003          Identifier: expr: 'curSubcuenta'
1003         Identifier: end-gen
1003         FunctionCall: begin-gen
1003          Value: begin-gen
1003           Member: begin-gen
1003            Identifier: begin-gen
1003             Identifier: expr: 'curSubcuenta'
1003            Identifier: end-gen
1003            Identifier: begin-gen
1003             Identifier: expr: 'Del'
1003            Identifier: end-gen
1003            Member: expr: 'curSubcuenta.Del'
1003          <-Value: expr: 'curSubcuenta.Del'
1003           Member: end-gen
1003          Value: end-gen
1003          FunctionCall: expr: 'setModeAccess(curSubcuenta.Del)'
1003         FunctionCall: end-gen
1003         Member: expr: 'curSubcuenta.setModeAccess(curSubcuenta.Del)'
1003        Member: end-gen
1003        InstructionCall: line: 'curSubcuenta.setModeAccess(curSubcuenta.Del)'
1003      <-Source: line: 'curSubcuenta.setModeAccess(curSubcuenta.Del)'
1003     <--If: line: 'curSubcuenta.setModeAccess(curSubcuenta.Del)'
1003    <---Source: line: 'curSubcuenta.setModeAccess(curSubcuenta.Del)'
1003   <----Function: line: 'curSubcuenta.setModeAccess(curSubcuenta.Del)'
1003  <-----Source: line: 'curSubcuenta.setModeAccess(curSubcuenta.Del)'
1003 <------Class: line: 'curSubcuenta.setModeAccess(curSubcuenta.Del)'
1003<-------Source: line: 'curSubcuenta.setModeAccess(curSubcuenta.Del)'
1004       InstructionCall: end-gen
1004       InstructionCall: begin-gen
1004        Member: begin-gen
1004         Identifier: begin-gen
1004          Identifier: expr: 'curSubcuenta'
1004         Identifier: end-gen
1004         FunctionCall: begin-gen
1004          FunctionCall: expr: 'refreshBuffer()'
1004         FunctionCall: end-gen
1004         Member: expr: 'curSubcuenta.refreshBuffer()'
1004        Member: end-gen
1004        InstructionCall: line: 'curSubcuenta.refreshBuffer()'
1004      <-Source: line: 'curSubcuenta.refreshBuffer()'
1004     <--If: line: 'curSubcuenta.refreshBuffer()'
1004    <---Source: line: 'curSubcuenta.refreshBuffer()'
1004   <----Function: line: 'curSubcuenta.refreshBuffer()'
1004  <-----Source: line: 'curSubcuenta.refreshBuffer()'
1004 <------Class: line: 'curSubcuenta.refreshBuffer()'
1004<-------Source: line: 'curSubcuenta.refreshBuffer()'
1005       InstructionCall: end-gen
1005       If: begin-gen
1005        Value: begin-gen
1005         OpUnary: begin-gen
1005          OpUnary: expr: 'not'
1005        <-Value: expr: 'not'
1005          Member: begin-gen
1005           Identifier: begin-gen
1005            Identifier: expr: 'curSubcuenta'
1005           Identifier: end-gen
1005           FunctionCall: begin-gen
1005            FunctionCall: expr: 'commitBuffer()'
1005           FunctionCall: end-gen
1005           Member: expr: 'curSubcuenta.commitBuffer()'
1005         <-OpUnary: expr: 'curSubcuenta.commitBuffer()'
1005        <--Value: expr: 'curSubcuenta.commitBuffer()'
1005          Member: end-gen
1005         OpUnary: end-gen
1005        Value: end-gen
1005        If: line: 'if not curSubcuenta.commitBuffer():'
1005      <-Source: line: 'if not curSubcuenta.commitBuffer():'
1005     <--If: line: 'if not curSubcuenta.commitBuffer():'
1005    <---Source: line: 'if not curSubcuenta.commitBuffer():'
1005   <----Function: line: 'if not curSubcuenta.commitBuffer():'
1005  <-----Source: line: 'if not curSubcuenta.commitBuffer():'
1005 <------Class: line: 'if not curSubcuenta.commitBuffer():'
1005<-------Source: line: 'if not curSubcuenta.commitBuffer():'
1006        If: begin: 'block-if'
1006      <-Source: begin: 'block-if'
1006     <--If: begin: 'block-if'
1006    <---Source: begin: 'block-if'
1006   <----Function: begin: 'block-if'
1006  <-----Source: begin: 'block-if'
1006 <------Class: begin: 'block-if'
1006<-------Source: begin: 'block-if'
1006        Source: begin-gen
1006         InstructionFlow: begin-gen
1006          Value: begin-gen
1006           Identifier: begin-gen
1006            Identifier: expr: 'False'
1006          <-Value: expr: 'False'
1006           Identifier: end-gen
1006          Value: end-gen
1006          InstructionFlow: line: 'return False'
1006        <-Source: line: 'return False'
1006       <--If: line: 'return False'
1006      <---Source: line: 'return False'
1006     <----If: line: 'return False'
1006    <-----Source: line: 'return False'
1006   <------Function: line: 'return False'
1006  <-------Source: line: 'return False'
1006 <--------Class: line: 'return False'
1006<---------Source: line: 'return False'
1007         InstructionFlow: end-gen
1007        Source: end-gen
1007        If: end: 'block-if'
1007      <-Source: end: 'block-if'
1007     <--If: end: 'block-if'
1007    <---Source: end: 'block-if'
1007   <----Function: end: 'block-if'
1007  <-----Source: end: 'block-if'
1007 <------Class: end: 'block-if'
1007<-------Source: end: 'block-if'
1007       If: end-gen
1007      Source: end-gen
1007      If: end: 'block-if'
1007    <-Source: end: 'block-if'
1007   <--Function: end: 'block-if'
1007  <---Source: end: 'block-if'
1007 <----Class: end: 'block-if'
1007<-----Source: end: 'block-if'
1007     If: end-gen
1007     InstructionFlow: begin-gen
1007      Value: begin-gen
1007       Identifier: begin-gen
1007        Identifier: expr: 'True'
1007      <-Value: expr: 'True'
1007       Identifier: end-gen
1007      Value: end-gen
1007      InstructionFlow: line: 'return True'
1007    <-Source: line: 'return True'
1007   <--Function: line: 'return True'
1007  <---Source: line: 'return True'
1007 <----Class: line: 'return True'
1007<-----Source: line: 'return True'
1009     InstructionFlow: end-gen
1009    Source: end-gen
1009    Function: end: 'block-def-oficial_borrarSubcuenta'
1009  <-Source: end: 'block-def-oficial_borrarSubcuenta'
1009 <--Class: end: 'block-def-oficial_borrarSubcuenta'
1009<---Source: end: 'block-def-oficial_borrarSubcuenta'
1010   Function: end-gen
1010   Function: begin-gen
1010    Variable: begin-gen
1010     Variable: expr: 'codCliente'
1010    Variable: end-gen
1010    Variable: begin-gen
1010     Variable: expr: 'valoresDefecto'
1010    Variable: end-gen
1010    Function: line: 'def oficial_datosCtaCliente(self, codCliente = None, valoresDefecto = None):'
1010  <-Source: line: 'def oficial_datosCtaCliente(self, codCliente = None, valoresDefecto = None):'
1010 <--Class: line: 'def oficial_datosCtaCliente(self, codCliente = None, valoresDefecto = None):'
1010<---Source: line: 'def oficial_datosCtaCliente(self, codCliente = None, valoresDefecto = None):'
1011    Function: begin: 'block-def-oficial_datosCtaCliente'
1011  <-Source: begin: 'block-def-oficial_datosCtaCliente'
1011 <--Class: begin: 'block-def-oficial_datosCtaCliente'
1011<---Source: begin: 'block-def-oficial_datosCtaCliente'
1011    Source: begin-gen
1011     If: begin-gen
1011      Expression: begin-gen
1011       OpUnary: begin-gen
1011        OpUnary: expr: 'not'
1011      <-Expression: expr: 'not'
1011        Identifier: begin-gen
1011         Identifier: expr: 'codCliente'
1011       <-OpUnary: expr: 'codCliente'
1011      <--Expression: expr: 'codCliente'
1011        Identifier: end-gen
1011       OpUnary: end-gen
1011       Compare: begin-gen
1011        Compare: expr: 'or'
1011      <-Expression: expr: 'or'
1011       Compare: end-gen
1011       Identifier: begin-gen
1011        Identifier: expr: 'codCliente'
1011      <-Expression: expr: 'codCliente'
1011       Identifier: end-gen
1011       Compare: begin-gen
1011        Compare: expr: '=='
1011      <-Expression: expr: '=='
1011       Compare: end-gen
1011       Constant: begin-gen
1011        Constant: ctype: 'String' -> ''
1011        Constant: expr: 'u""'
1011      <-Expression: expr: 'u""'
1011       Constant: end-gen
1011      Expression: end-gen
1011      If: line: 'if not codCliente or codCliente == u"":'
1011    <-Source: line: 'if not codCliente or codCliente == u"":'
1011   <--Function: line: 'if not codCliente or codCliente == u"":'
1011  <---Source: line: 'if not codCliente or codCliente == u"":'
1011 <----Class: line: 'if not codCliente or codCliente == u"":'
1011<-----Source: line: 'if not codCliente or codCliente == u"":'
1012      If: begin: 'block-if'
1012    <-Source: begin: 'block-if'
1012   <--Function: begin: 'block-if'
1012  <---Source: begin: 'block-if'
1012 <----Class: begin: 'block-if'
1012<-----Source: begin: 'block-if'
1012      Source: begin-gen
1012       InstructionFlow: begin-gen
1012        Value: begin-gen
1012         Member: begin-gen
1012          Identifier: begin-gen
1012           Identifier: expr: 'flfacturac'
1012          Identifier: end-gen
1012          Identifier: begin-gen
1012           Identifier: expr: 'iface'
1012          Identifier: end-gen
1012          FunctionCall: begin-gen
1012           Value: begin-gen
1012            Constant: begin-gen
1012             Constant: ctype: 'String' -> 'CLIENT'
1012             Constant: expr: 'u"CLIENT"'
1012           <-Value: expr: 'u"CLIENT"'
1012            Constant: end-gen
1012           Value: end-gen
1012           Value: begin-gen
1012            Member: begin-gen
1012             Identifier: begin-gen
1012              Identifier: expr: 'valoresDefecto'
1012             Identifier: end-gen
1012             Identifier: begin-gen
1012              Identifier: expr: 'codejercicio'
1012             Identifier: end-gen
1012             Member: expr: 'valoresDefecto.codejercicio'
1012           <-Value: expr: 'valoresDefecto.codejercicio'
1012            Member: end-gen
1012           Value: end-gen
1012           FunctionCall: expr: 'pub_datosCtaEspecial(u"CLIENT", valoresDefecto.codejercicio)'
1012          FunctionCall: end-gen
1012          Member: expr: 'flfacturac.iface.pub_datosCtaEspecial(u"CLIENT", valoresDefecto.codejercicio)'
1012        <-Value: expr: 'flfacturac.iface.pub_datosCtaEspecial(u"CLIENT", valoresDefecto.codejercicio)'
1012         Member: end-gen
1012        Value: end-gen
1012        InstructionFlow: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"CLIENT", valoresDefecto.codejercicio)'
1012      <-Source: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"CLIENT", valoresDefecto.codejercicio)'
1012     <--If: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"CLIENT", valoresDefecto.codejercicio)'
1012    <---Source: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"CLIENT", valoresDefecto.codejercicio)'
1012   <----Function: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"CLIENT", valoresDefecto.codejercicio)'
1012  <-----Source: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"CLIENT", valoresDefecto.codejercicio)'
1012 <------Class: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"CLIENT", valoresDefecto.codejercicio)'
1012<-------Source: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"CLIENT", valoresDefecto.codejercicio)'
1013       InstructionFlow: end-gen
1013      Source: end-gen
1013      If: end: 'block-if'
1013    <-Source: end: 'block-if'
1013   <--Function: end: 'block-if'
1013  <---Source: end: 'block-if'
1013 <----Class: end: 'block-if'
1013<-----Source: end: 'block-if'
1013     If: end-gen
1013     DeclarationBlock: begin-gen
1013      Variable: begin-gen
1013       Variable: expr: 'util'
1013       Variable: expr: '='
1013       Value: begin-gen
1013        New: begin-gen
1013         FunctionCall: begin-gen
1013          FunctionCall: expr: 'FLUtil()'
1013        <-New: expr: 'qsatype.FLUtil()'
1013       <--Value: expr: 'qsatype.FLUtil()'
1013      <---Variable: expr: 'qsatype.FLUtil()'
1013         FunctionCall: end-gen
1013        New: end-gen
1013       Value: end-gen
1013      Variable: end-gen
1013      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1013    <-Source: line: 'util = qsatype.FLUtil()'
1013   <--Function: line: 'util = qsatype.FLUtil()'
1013  <---Source: line: 'util = qsatype.FLUtil()'
1013 <----Class: line: 'util = qsatype.FLUtil()'
1013<-----Source: line: 'util = qsatype.FLUtil()'
1014     DeclarationBlock: end-gen
1014     DeclarationBlock: begin-gen
1014      Variable: begin-gen
1014       Variable: expr: 'ctaCliente'
1014       Variable: expr: '='
1014       Value: begin-gen
1014        Constant: begin-gen
1014         Constant: ctype: None -> None
1014         Constant: expr: '[]'
1014       <-Value: expr: '[]'
1014      <--Variable: expr: 'qsatype.Array()'
1014        Constant: end-gen
1014       Value: end-gen
1014      Variable: end-gen
1014      DeclarationBlock: line: 'ctaCliente = qsatype.Array()'
1014    <-Source: line: 'ctaCliente = qsatype.Array()'
1014   <--Function: line: 'ctaCliente = qsatype.Array()'
1014  <---Source: line: 'ctaCliente = qsatype.Array()'
1014 <----Class: line: 'ctaCliente = qsatype.Array()'
1014<-----Source: line: 'ctaCliente = qsatype.Array()'
1015     DeclarationBlock: end-gen
1015     InstructionUpdate: begin-gen
1015      ArrayMember: begin-gen
1015       Identifier: begin-gen
1015        Identifier: expr: 'ctaCliente'
1015       Identifier: end-gen
1015       Value: begin-gen
1015        Constant: begin-gen
1015         Constant: ctype: 'String' -> 'codsubcuenta'
1015         Constant: expr: 'u"codsubcuenta"'
1015       <-Value: expr: 'u"codsubcuenta"'
1015        Constant: end-gen
1015       Value: end-gen
1015       ArrayMember: expr: 'ctaCliente[u"codsubcuenta"]'
1015      ArrayMember: end-gen
1015      OpUpdate: begin-gen
1015       OpUpdate: expr: '='
1015      OpUpdate: end-gen
1015      Value: begin-gen
1015       Constant: begin-gen
1015        Constant: ctype: 'String' -> ''
1015        Constant: expr: 'u""'
1015      <-Value: expr: 'u""'
1015       Constant: end-gen
1015      Value: end-gen
1015      InstructionUpdate: line: 'ctaCliente[u"codsubcuenta"] = u""'
1015    <-Source: line: 'ctaCliente[u"codsubcuenta"] = u""'
1015   <--Function: line: 'ctaCliente[u"codsubcuenta"] = u""'
1015  <---Source: line: 'ctaCliente[u"codsubcuenta"] = u""'
1015 <----Class: line: 'ctaCliente[u"codsubcuenta"] = u""'
1015<-----Source: line: 'ctaCliente[u"codsubcuenta"] = u""'
1016     InstructionUpdate: end-gen
1016     InstructionUpdate: begin-gen
1016      ArrayMember: begin-gen
1016       Identifier: begin-gen
1016        Identifier: expr: 'ctaCliente'
1016       Identifier: end-gen
1016       Value: begin-gen
1016        Constant: begin-gen
1016         Constant: ctype: 'String' -> 'idsubcuenta'
1016         Constant: expr: 'u"idsubcuenta"'
1016       <-Value: expr: 'u"idsubcuenta"'
1016        Constant: end-gen
1016       Value: end-gen
1016       ArrayMember: expr: 'ctaCliente[u"idsubcuenta"]'
1016      ArrayMember: end-gen
1016      OpUpdate: begin-gen
1016       OpUpdate: expr: '='
1016      OpUpdate: end-gen
1016      Value: begin-gen
1016       Constant: begin-gen
1016        Constant: ctype: 'String' -> ''
1016        Constant: expr: 'u""'
1016      <-Value: expr: 'u""'
1016       Constant: end-gen
1016      Value: end-gen
1016      InstructionUpdate: line: 'ctaCliente[u"idsubcuenta"] = u""'
1016    <-Source: line: 'ctaCliente[u"idsubcuenta"] = u""'
1016   <--Function: line: 'ctaCliente[u"idsubcuenta"] = u""'
1016  <---Source: line: 'ctaCliente[u"idsubcuenta"] = u""'
1016 <----Class: line: 'ctaCliente[u"idsubcuenta"] = u""'
1016<-----Source: line: 'ctaCliente[u"idsubcuenta"] = u""'
1017     InstructionUpdate: end-gen
1017     If: begin-gen
1017      Value: begin-gen
1017       OpUnary: begin-gen
1017        OpUnary: expr: 'not'
1017      <-Value: expr: 'not'
1017        Member: begin-gen
1017         Identifier: begin-gen
1017          Identifier: expr: 'codCliente'
1017         Identifier: end-gen
1017         FunctionCall: begin-gen
1017          FunctionCall: expr: 'toString()'
1017         FunctionCall: end-gen
1017         FunctionCall: begin-gen
1017          FunctionCall: expr: 'isEmpty()'
1017         FunctionCall: end-gen
1017         Member: expr: 'parseString(codCliente) == None'
1017       <-OpUnary: expr: 'parseString(codCliente) == None'
1017      <--Value: expr: 'parseString(codCliente) == None'
1017        Member: end-gen
1017       OpUnary: end-gen
1017      Value: end-gen
1017      If: line: 'if not parseString(codCliente) == None:'
1017    <-Source: line: 'if not parseString(codCliente) == None:'
1017   <--Function: line: 'if not parseString(codCliente) == None:'
1017  <---Source: line: 'if not parseString(codCliente) == None:'
1017 <----Class: line: 'if not parseString(codCliente) == None:'
1017<-----Source: line: 'if not parseString(codCliente) == None:'
1018      If: begin: 'block-if'
1018    <-Source: begin: 'block-if'
1018   <--Function: begin: 'block-if'
1018  <---Source: begin: 'block-if'
1018 <----Class: begin: 'block-if'
1018<-----Source: begin: 'block-if'
1018      Source: begin-gen
1018       DeclarationBlock: begin-gen
1018        Variable: begin-gen
1018         Variable: expr: 'qrySubcuenta'
1018         Variable: expr: '='
1018         Value: begin-gen
1018          New: begin-gen
1018           FunctionCall: begin-gen
1018            FunctionCall: expr: 'FLSqlQuery()'
1018          <-New: expr: 'qsatype.FLSqlQuery()'
1018         <--Value: expr: 'qsatype.FLSqlQuery()'
1018        <---Variable: expr: 'qsatype.FLSqlQuery()'
1018           FunctionCall: end-gen
1018          New: end-gen
1018         Value: end-gen
1018        Variable: end-gen
1018        DeclarationBlock: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1018      <-Source: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1018     <--If: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1018    <---Source: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1018   <----Function: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1018  <-----Source: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1018 <------Class: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1018<-------Source: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1019       DeclarationBlock: end-gen
1019       TryCatch: begin-gen
1019        TryCatch: line: 'try:'
1019      <-Source: line: 'try:'
1019     <--If: line: 'try:'
1019    <---Source: line: 'try:'
1019   <----Function: line: 'try:'
1019  <-----Source: line: 'try:'
1019 <------Class: line: 'try:'
1019<-------Source: line: 'try:'
1020        TryCatch: begin: 'block-try'
1020      <-Source: begin: 'block-try'
1020     <--If: begin: 'block-try'
1020    <---Source: begin: 'block-try'
1020   <----Function: begin: 'block-try'
1020  <-----Source: begin: 'block-try'
1020 <------Class: begin: 'block-try'
1020<-------Source: begin: 'block-try'
1020        Source: begin-gen
1020         InstructionCall: begin-gen
1020          Member: begin-gen
1020           Identifier: begin-gen
1020            Identifier: expr: 'qrySubcuenta'
1020           Identifier: end-gen
1020           FunctionCall: begin-gen
1020            Value: begin-gen
1020             Identifier: begin-gen
1020              Identifier: expr: 'True'
1020            <-Value: expr: 'True'
1020             Identifier: end-gen
1020            Value: end-gen
1020            FunctionCall: expr: 'setForwardOnly(True)'
1020           FunctionCall: end-gen
1020           Member: expr: 'qrySubcuenta.setForwardOnly(True)'
1020          Member: end-gen
1020          InstructionCall: line: 'qrySubcuenta.setForwardOnly(True)'
1020        <-Source: line: 'qrySubcuenta.setForwardOnly(True)'
1020       <--TryCatch: line: 'qrySubcuenta.setForwardOnly(True)'
1020      <---Source: line: 'qrySubcuenta.setForwardOnly(True)'
1020     <----If: line: 'qrySubcuenta.setForwardOnly(True)'
1020    <-----Source: line: 'qrySubcuenta.setForwardOnly(True)'
1020   <------Function: line: 'qrySubcuenta.setForwardOnly(True)'
1020  <-------Source: line: 'qrySubcuenta.setForwardOnly(True)'
1020 <--------Class: line: 'qrySubcuenta.setForwardOnly(True)'
1020<---------Source: line: 'qrySubcuenta.setForwardOnly(True)'
1021         InstructionCall: end-gen
1021        Source: end-gen
1021        TryCatch: end: 'block-try'
1021      <-Source: end: 'block-try'
1021     <--If: end: 'block-try'
1021    <---Source: end: 'block-try'
1021   <----Function: end: 'block-try'
1021  <-----Source: end: 'block-try'
1021 <------Class: end: 'block-try'
1021<-------Source: end: 'block-try'
1021        Identifier: begin-gen
1021         Identifier: expr: 'e'
1021        Identifier: end-gen
1021        TryCatch: line: 'except Exception as e:'
1021      <-Source: line: 'except Exception as e:'
1021     <--If: line: 'except Exception as e:'
1021    <---Source: line: 'except Exception as e:'
1021   <----Function: line: 'except Exception as e:'
1021  <-----Source: line: 'except Exception as e:'
1021 <------Class: line: 'except Exception as e:'
1021<-------Source: line: 'except Exception as e:'
1022        TryCatch: begin: 'block-except'
1022      <-Source: begin: 'block-except'
1022     <--If: begin: 'block-except'
1022    <---Source: begin: 'block-except'
1022   <----Function: begin: 'block-except'
1022  <-----Source: begin: 'block-except'
1022 <------Class: begin: 'block-except'
1022<-------Source: begin: 'block-except'
1022        TryCatch: line: 'e = traceback.format_exc()'
1022      <-Source: line: 'e = traceback.format_exc()'
1022     <--If: line: 'e = traceback.format_exc()'
1022    <---Source: line: 'e = traceback.format_exc()'
1022   <----Function: line: 'e = traceback.format_exc()'
1022  <-----Source: line: 'e = traceback.format_exc()'
1022 <------Class: line: 'e = traceback.format_exc()'
1022<-------Source: line: 'e = traceback.format_exc()'
1023        Source: begin-gen
1023        Source: end-gen
1023        TryCatch: end: 'block-except'
1023      <-Source: end: 'block-except'
1023     <--If: end: 'block-except'
1023    <---Source: end: 'block-except'
1023   <----Function: end: 'block-except'
1023  <-----Source: end: 'block-except'
1023 <------Class: end: 'block-except'
1023<-------Source: end: 'block-except'
1024       TryCatch: end-gen
1024       InstructionCall: begin-gen
1024        Member: begin-gen
1024         Identifier: begin-gen
1024          Identifier: expr: 'qrySubcuenta'
1024         Identifier: end-gen
1024         FunctionCall: begin-gen
1024          Value: begin-gen
1024           Constant: begin-gen
1024            Constant: ctype: 'String' -> 'co_subcuentascli'
1024            Constant: expr: 'u"co_subcuentascli"'
1024          <-Value: expr: 'u"co_subcuentascli"'
1024           Constant: end-gen
1024          Value: end-gen
1024          FunctionCall: expr: 'setTablesList(u"co_subcuentascli")'
1024         FunctionCall: end-gen
1024         Member: expr: 'qrySubcuenta.setTablesList(u"co_subcuentascli")'
1024        Member: end-gen
1024        InstructionCall: line: 'qrySubcuenta.setTablesList(u"co_subcuentascli")'
1024      <-Source: line: 'qrySubcuenta.setTablesList(u"co_subcuentascli")'
1024     <--If: line: 'qrySubcuenta.setTablesList(u"co_subcuentascli")'
1024    <---Source: line: 'qrySubcuenta.setTablesList(u"co_subcuentascli")'
1024   <----Function: line: 'qrySubcuenta.setTablesList(u"co_subcuentascli")'
1024  <-----Source: line: 'qrySubcuenta.setTablesList(u"co_subcuentascli")'
1024 <------Class: line: 'qrySubcuenta.setTablesList(u"co_subcuentascli")'
1024<-------Source: line: 'qrySubcuenta.setTablesList(u"co_subcuentascli")'
1025       InstructionCall: end-gen
1025       InstructionCall: begin-gen
1025        Member: begin-gen
1025         Identifier: begin-gen
1025          Identifier: expr: 'qrySubcuenta'
1025         Identifier: end-gen
1025         FunctionCall: begin-gen
1025          Value: begin-gen
1025           Constant: begin-gen
1025            Constant: ctype: 'String' -> 'idsubcuenta, codsubcuenta'
1025            Constant: expr: 'u"idsubcuenta, codsubcuenta"'
1025          <-Value: expr: 'u"idsubcuenta, codsubcuenta"'
1025           Constant: end-gen
1025          Value: end-gen
1025          FunctionCall: expr: 'setSelect(u"idsubcuenta, codsubcuenta")'
1025         FunctionCall: end-gen
1025         Member: expr: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1025        Member: end-gen
1025        InstructionCall: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1025      <-Source: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1025     <--If: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1025    <---Source: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1025   <----Function: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1025  <-----Source: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1025 <------Class: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1025<-------Source: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1026       InstructionCall: end-gen
1026       InstructionCall: begin-gen
1026        Member: begin-gen
1026         Identifier: begin-gen
1026          Identifier: expr: 'qrySubcuenta'
1026         Identifier: end-gen
1026         FunctionCall: begin-gen
1026          Value: begin-gen
1026           Constant: begin-gen
1026            Constant: ctype: 'String' -> 'co_subcuentascli'
1026            Constant: expr: 'u"co_subcuentascli"'
1026          <-Value: expr: 'u"co_subcuentascli"'
1026           Constant: end-gen
1026          Value: end-gen
1026          FunctionCall: expr: 'setFrom(u"co_subcuentascli")'
1026         FunctionCall: end-gen
1026         Member: expr: 'qrySubcuenta.setFrom(u"co_subcuentascli")'
1026        Member: end-gen
1026        InstructionCall: line: 'qrySubcuenta.setFrom(u"co_subcuentascli")'
1026      <-Source: line: 'qrySubcuenta.setFrom(u"co_subcuentascli")'
1026     <--If: line: 'qrySubcuenta.setFrom(u"co_subcuentascli")'
1026    <---Source: line: 'qrySubcuenta.setFrom(u"co_subcuentascli")'
1026   <----Function: line: 'qrySubcuenta.setFrom(u"co_subcuentascli")'
1026  <-----Source: line: 'qrySubcuenta.setFrom(u"co_subcuentascli")'
1026 <------Class: line: 'qrySubcuenta.setFrom(u"co_subcuentascli")'
1026<-------Source: line: 'qrySubcuenta.setFrom(u"co_subcuentascli")'
1027       InstructionCall: end-gen
1027       InstructionCall: begin-gen
1027        Member: begin-gen
1027         Identifier: begin-gen
1027          Identifier: expr: 'qrySubcuenta'
1027         Identifier: end-gen
1027         FunctionCall: begin-gen
1027          Expression: begin-gen
1027           Expression: expr: 'ustr('
1027           Constant: begin-gen
1027            Constant: ctype: 'String' -> "codcliente = '"
1027            Constant: expr: 'u"codcliente = \'"'
1027          <-Expression: expr: 'u"codcliente = \'"'
1027           Constant: end-gen
1027           Expression: expr: ','
1027           Identifier: begin-gen
1027            Identifier: expr: 'codCliente'
1027          <-Expression: expr: 'codCliente'
1027           Identifier: end-gen
1027           Expression: expr: ','
1027           Constant: begin-gen
1027            Constant: ctype: 'String' -> "' AND codejercicio = '"
1027            Constant: expr: 'u"\' AND codejercicio = \'"'
1027          <-Expression: expr: 'u"\' AND codejercicio = \'"'
1027           Constant: end-gen
1027           Expression: expr: ','
1027           Member: begin-gen
1027            Identifier: begin-gen
1027             Identifier: expr: 'valoresDefecto'
1027            Identifier: end-gen
1027            Identifier: begin-gen
1027             Identifier: expr: 'codejercicio'
1027            Identifier: end-gen
1027            Member: expr: 'valoresDefecto.codejercicio'
1027          <-Expression: expr: 'valoresDefecto.codejercicio'
1027           Member: end-gen
1027           Expression: expr: ','
1027           Constant: begin-gen
1027            Constant: ctype: 'String' -> "'"
1027            Constant: expr: 'u"\'"'
1027          <-Expression: expr: 'u"\'"'
1027           Constant: end-gen
1027           Expression: expr: ')'
1027          Expression: end-gen
1027          FunctionCall: expr: 'setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1027         FunctionCall: end-gen
1027         Member: expr: 'qrySubcuenta.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1027        Member: end-gen
1027        InstructionCall: line: 'qrySubcuenta.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1027      <-Source: line: 'qrySubcuenta.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1027     <--If: line: 'qrySubcuenta.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1027    <---Source: line: 'qrySubcuenta.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1027   <----Function: line: 'qrySubcuenta.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1027  <-----Source: line: 'qrySubcuenta.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1027 <------Class: line: 'qrySubcuenta.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1027<-------Source: line: 'qrySubcuenta.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1028       InstructionCall: end-gen
1028       If: begin-gen
1028        Value: begin-gen
1028         OpUnary: begin-gen
1028          OpUnary: expr: 'not'
1028        <-Value: expr: 'not'
1028          Member: begin-gen
1028           Identifier: begin-gen
1028            Identifier: expr: 'qrySubcuenta'
1028           Identifier: end-gen
1028           FunctionCall: begin-gen
1028            FunctionCall: expr: 'exec_()'
1028           FunctionCall: end-gen
1028           Member: expr: 'qrySubcuenta.exec_()'
1028         <-OpUnary: expr: 'qrySubcuenta.exec_()'
1028        <--Value: expr: 'qrySubcuenta.exec_()'
1028          Member: end-gen
1028         OpUnary: end-gen
1028        Value: end-gen
1028        If: line: 'if not qrySubcuenta.exec_():'
1028      <-Source: line: 'if not qrySubcuenta.exec_():'
1028     <--If: line: 'if not qrySubcuenta.exec_():'
1028    <---Source: line: 'if not qrySubcuenta.exec_():'
1028   <----Function: line: 'if not qrySubcuenta.exec_():'
1028  <-----Source: line: 'if not qrySubcuenta.exec_():'
1028 <------Class: line: 'if not qrySubcuenta.exec_():'
1028<-------Source: line: 'if not qrySubcuenta.exec_():'
1029        If: begin: 'block-if'
1029      <-Source: begin: 'block-if'
1029     <--If: begin: 'block-if'
1029    <---Source: begin: 'block-if'
1029   <----Function: begin: 'block-if'
1029  <-----Source: begin: 'block-if'
1029 <------Class: begin: 'block-if'
1029<-------Source: begin: 'block-if'
1029        Source: begin-gen
1029         InstructionUpdate: begin-gen
1029          Member: begin-gen
1029           Identifier: begin-gen
1029            Identifier: expr: 'ctaCliente'
1029           Identifier: end-gen
1029           Identifier: begin-gen
1029            Identifier: expr: 'error'
1029           Identifier: end-gen
1029           Member: expr: 'ctaCliente.error'
1029          Member: end-gen
1029          OpUpdate: begin-gen
1029           OpUpdate: expr: '='
1029          OpUpdate: end-gen
1029          Value: begin-gen
1029           Constant: begin-gen
1029            Constant: ctype: 'Number' -> '2'
1029            Constant: expr: '2'
1029          <-Value: expr: '2'
1029           Constant: end-gen
1029          Value: end-gen
1029          InstructionUpdate: line: 'ctaCliente.error = 2'
1029        <-Source: line: 'ctaCliente.error = 2'
1029       <--If: line: 'ctaCliente.error = 2'
1029      <---Source: line: 'ctaCliente.error = 2'
1029     <----If: line: 'ctaCliente.error = 2'
1029    <-----Source: line: 'ctaCliente.error = 2'
1029   <------Function: line: 'ctaCliente.error = 2'
1029  <-------Source: line: 'ctaCliente.error = 2'
1029 <--------Class: line: 'ctaCliente.error = 2'
1029<---------Source: line: 'ctaCliente.error = 2'
1030         InstructionUpdate: end-gen
1030         InstructionFlow: begin-gen
1030          Value: begin-gen
1030           Identifier: begin-gen
1030            Identifier: expr: 'ctaCliente'
1030          <-Value: expr: 'ctaCliente'
1030           Identifier: end-gen
1030          Value: end-gen
1030          InstructionFlow: line: 'return ctaCliente'
1030        <-Source: line: 'return ctaCliente'
1030       <--If: line: 'return ctaCliente'
1030      <---Source: line: 'return ctaCliente'
1030     <----If: line: 'return ctaCliente'
1030    <-----Source: line: 'return ctaCliente'
1030   <------Function: line: 'return ctaCliente'
1030  <-------Source: line: 'return ctaCliente'
1030 <--------Class: line: 'return ctaCliente'
1030<---------Source: line: 'return ctaCliente'
1031         InstructionFlow: end-gen
1031        Source: end-gen
1031        If: end: 'block-if'
1031      <-Source: end: 'block-if'
1031     <--If: end: 'block-if'
1031    <---Source: end: 'block-if'
1031   <----Function: end: 'block-if'
1031  <-----Source: end: 'block-if'
1031 <------Class: end: 'block-if'
1031<-------Source: end: 'block-if'
1031       If: end-gen
1031       If: begin-gen
1031        Value: begin-gen
1031         OpUnary: begin-gen
1031          OpUnary: expr: 'not'
1031        <-Value: expr: 'not'
1031          Member: begin-gen
1031           Identifier: begin-gen
1031            Identifier: expr: 'qrySubcuenta'
1031           Identifier: end-gen
1031           FunctionCall: begin-gen
1031            FunctionCall: expr: 'first()'
1031           FunctionCall: end-gen
1031           Member: expr: 'qrySubcuenta.first()'
1031         <-OpUnary: expr: 'qrySubcuenta.first()'
1031        <--Value: expr: 'qrySubcuenta.first()'
1031          Member: end-gen
1031         OpUnary: end-gen
1031        Value: end-gen
1031        If: line: 'if not qrySubcuenta.first():'
1031      <-Source: line: 'if not qrySubcuenta.first():'
1031     <--If: line: 'if not qrySubcuenta.first():'
1031    <---Source: line: 'if not qrySubcuenta.first():'
1031   <----Function: line: 'if not qrySubcuenta.first():'
1031  <-----Source: line: 'if not qrySubcuenta.first():'
1031 <------Class: line: 'if not qrySubcuenta.first():'
1031<-------Source: line: 'if not qrySubcuenta.first():'
1032        If: begin: 'block-if'
1032      <-Source: begin: 'block-if'
1032     <--If: begin: 'block-if'
1032    <---Source: begin: 'block-if'
1032   <----Function: begin: 'block-if'
1032  <-----Source: begin: 'block-if'
1032 <------Class: begin: 'block-if'
1032<-------Source: begin: 'block-if'
1032        Source: begin-gen
1032         InstructionCall: begin-gen
1032          Member: begin-gen
1032           Identifier: begin-gen
1032            Identifier: expr: 'MessageBox'
1032           Identifier: end-gen
1032           FunctionCall: begin-gen
1032            Expression: begin-gen
1032             Expression: expr: 'ustr('
1032             Member: begin-gen
1032              Identifier: begin-gen
1032               Identifier: expr: 'util'
1032              Identifier: end-gen
1032              FunctionCall: begin-gen
1032               Value: begin-gen
1032                Constant: begin-gen
1032                 Constant: ctype: 'String' -> 'scripts'
1032                 Constant: expr: 'u"scripts"'
1032               <-Value: expr: 'u"scripts"'
1032                Constant: end-gen
1032               Value: end-gen
1032               Value: begin-gen
1032                Constant: begin-gen
1032                 Constant: ctype: 'String' -> 'No hay ninguna subcuenta asociada al cliente '
1032                 Constant: expr: 'u"No hay ninguna subcuenta asociada al cliente "'
1032               <-Value: expr: 'u"No hay ninguna subcuenta asociada al cliente "'
1032                Constant: end-gen
1032               Value: end-gen
1032               FunctionCall: expr: 'translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ")'
1032              FunctionCall: end-gen
1032              Member: expr: 'util.translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ")'
1032            <-Expression: expr: 'util.translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ")'
1032             Member: end-gen
1032             Expression: expr: ','
1032             Identifier: begin-gen
1032              Identifier: expr: 'codCliente'
1032            <-Expression: expr: 'codCliente'
1032             Identifier: end-gen
1032             Expression: expr: ','
1032             Member: begin-gen
1032              Identifier: begin-gen
1032               Identifier: expr: 'util'
1032              Identifier: end-gen
1032              FunctionCall: begin-gen
1032               Value: begin-gen
1032                Constant: begin-gen
1032                 Constant: ctype: 'String' -> 'scripts'
1032                 Constant: expr: 'u"scripts"'
1032               <-Value: expr: 'u"scripts"'
1032                Constant: end-gen
1032               Value: end-gen
1032               Value: begin-gen
1032                Constant: begin-gen
1032                 Constant: ctype: 'String' -> ' para el ejercicio '
1032                 Constant: expr: 'u" para el ejercicio "'
1032               <-Value: expr: 'u" para el ejercicio "'
1032                Constant: end-gen
1032               Value: end-gen
1032               FunctionCall: expr: 'translate(u"scripts", u" para el ejercicio ")'
1032              FunctionCall: end-gen
1032              Member: expr: 'util.translate(u"scripts", u" para el ejercicio ")'
1032            <-Expression: expr: 'util.translate(u"scripts", u" para el ejercicio ")'
1032             Member: end-gen
1032             Expression: expr: ','
1032             Member: begin-gen
1032              Identifier: begin-gen
1032               Identifier: expr: 'valoresDefecto'
1032              Identifier: end-gen
1032              Identifier: begin-gen
1032               Identifier: expr: 'codejercicio'
1032              Identifier: end-gen
1032              Member: expr: 'valoresDefecto.codejercicio'
1032            <-Expression: expr: 'valoresDefecto.codejercicio'
1032             Member: end-gen
1032             Expression: expr: ','
1032             Constant: begin-gen
1032              Constant: ctype: 'String' -> '.\\n'
1032              Constant: expr: 'u".\\n"'
1032            <-Expression: expr: 'u".\\n"'
1032             Constant: end-gen
1032             Expression: expr: ','
1032             Member: begin-gen
1032              Identifier: begin-gen
1032               Identifier: expr: 'util'
1032              Identifier: end-gen
1032              FunctionCall: begin-gen
1032               Value: begin-gen
1032                Constant: begin-gen
1032                 Constant: ctype: 'String' -> 'scripts'
1032                 Constant: expr: 'u"scripts"'
1032               <-Value: expr: 'u"scripts"'
1032                Constant: end-gen
1032               Value: end-gen
1032               Value: begin-gen
1032                Constant: begin-gen
1032                 Constant: ctype: 'String' -> 'Debe crear la subcuenta en el formulario de clientes.'
1032                 Constant: expr: 'u"Debe crear la subcuenta en el formulario de clientes."'
1032               <-Value: expr: 'u"Debe crear la subcuenta en el formulario de clientes."'
1032                Constant: end-gen
1032               Value: end-gen
1032               FunctionCall: expr: 'translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.")'
1032              FunctionCall: end-gen
1032              Member: expr: 'util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.")'
1032            <-Expression: expr: 'util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.")'
1032             Member: end-gen
1032             Expression: expr: ')'
1032            Expression: end-gen
1032            Value: begin-gen
1032             Member: begin-gen
1032              Identifier: begin-gen
1032               Identifier: expr: 'MessageBox'
1032              Identifier: end-gen
1032              Identifier: begin-gen
1032               Identifier: expr: 'Ok'
1032              Identifier: end-gen
1032              Member: expr: 'MessageBox.Ok'
1032            <-Value: expr: 'MessageBox.Ok'
1032             Member: end-gen
1032            Value: end-gen
1032            Value: begin-gen
1032             Member: begin-gen
1032              Identifier: begin-gen
1032               Identifier: expr: 'MessageBox'
1032              Identifier: end-gen
1032              Identifier: begin-gen
1032               Identifier: expr: 'NoButton'
1032              Identifier: end-gen
1032              Member: expr: 'MessageBox.NoButton'
1032            <-Value: expr: 'MessageBox.NoButton'
1032             Member: end-gen
1032            Value: end-gen
1032            Value: begin-gen
1032             Member: begin-gen
1032              Identifier: begin-gen
1032               Identifier: expr: 'MessageBox'
1032              Identifier: end-gen
1032              Identifier: begin-gen
1032               Identifier: expr: 'NoButton'
1032              Identifier: end-gen
1032              Member: expr: 'MessageBox.NoButton'
1032            <-Value: expr: 'MessageBox.NoButton'
1032             Member: end-gen
1032            Value: end-gen
1032            FunctionCall: expr: 'critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ") , codCliente , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1032           FunctionCall: end-gen
1032           Member: expr: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ") , codCliente , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1032          Member: end-gen
1032          InstructionCall: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ") , codCliente , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1032        <-Source: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ") , codCliente , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1032       <--If: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ") , codCliente , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1032      <---Source: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ") , codCliente , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1032     <----If: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ") , codCliente , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1032    <-----Source: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ") , codCliente , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1032   <------Function: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ") , codCliente , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1032  <-------Source: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ") , codCliente , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1032 <--------Class: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ") , codCliente , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1032<---------Source: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al cliente ") , codCliente , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de clientes.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1033         InstructionCall: end-gen
1033         InstructionUpdate: begin-gen
1033          Member: begin-gen
1033           Identifier: begin-gen
1033            Identifier: expr: 'ctaCliente'
1033           Identifier: end-gen
1033           Identifier: begin-gen
1033            Identifier: expr: 'error'
1033           Identifier: end-gen
1033           Member: expr: 'ctaCliente.error'
1033          Member: end-gen
1033          OpUpdate: begin-gen
1033           OpUpdate: expr: '='
1033          OpUpdate: end-gen
1033          Value: begin-gen
1033           Constant: begin-gen
1033            Constant: ctype: 'Number' -> '1'
1033            Constant: expr: '1'
1033          <-Value: expr: '1'
1033           Constant: end-gen
1033          Value: end-gen
1033          InstructionUpdate: line: 'ctaCliente.error = 1'
1033        <-Source: line: 'ctaCliente.error = 1'
1033       <--If: line: 'ctaCliente.error = 1'
1033      <---Source: line: 'ctaCliente.error = 1'
1033     <----If: line: 'ctaCliente.error = 1'
1033    <-----Source: line: 'ctaCliente.error = 1'
1033   <------Function: line: 'ctaCliente.error = 1'
1033  <-------Source: line: 'ctaCliente.error = 1'
1033 <--------Class: line: 'ctaCliente.error = 1'
1033<---------Source: line: 'ctaCliente.error = 1'
1034         InstructionUpdate: end-gen
1034         InstructionFlow: begin-gen
1034          Value: begin-gen
1034           Identifier: begin-gen
1034            Identifier: expr: 'ctaCliente'
1034          <-Value: expr: 'ctaCliente'
1034           Identifier: end-gen
1034          Value: end-gen
1034          InstructionFlow: line: 'return ctaCliente'
1034        <-Source: line: 'return ctaCliente'
1034       <--If: line: 'return ctaCliente'
1034      <---Source: line: 'return ctaCliente'
1034     <----If: line: 'return ctaCliente'
1034    <-----Source: line: 'return ctaCliente'
1034   <------Function: line: 'return ctaCliente'
1034  <-------Source: line: 'return ctaCliente'
1034 <--------Class: line: 'return ctaCliente'
1034<---------Source: line: 'return ctaCliente'
1035         InstructionFlow: end-gen
1035        Source: end-gen
1035        If: end: 'block-if'
1035      <-Source: end: 'block-if'
1035     <--If: end: 'block-if'
1035    <---Source: end: 'block-if'
1035   <----Function: end: 'block-if'
1035  <-----Source: end: 'block-if'
1035 <------Class: end: 'block-if'
1035<-------Source: end: 'block-if'
1035       If: end-gen
1035       InstructionUpdate: begin-gen
1035        Member: begin-gen
1035         Identifier: begin-gen
1035          Identifier: expr: 'ctaCliente'
1035         Identifier: end-gen
1035         Identifier: begin-gen
1035          Identifier: expr: 'idsubcuenta'
1035         Identifier: end-gen
1035         Member: expr: 'ctaCliente.idsubcuenta'
1035        Member: end-gen
1035        OpUpdate: begin-gen
1035         OpUpdate: expr: '='
1035        OpUpdate: end-gen
1035        Value: begin-gen
1035         Member: begin-gen
1035          Identifier: begin-gen
1035           Identifier: expr: 'qrySubcuenta'
1035          Identifier: end-gen
1035          FunctionCall: begin-gen
1035           Value: begin-gen
1035            Constant: begin-gen
1035             Constant: ctype: 'Number' -> '0'
1035             Constant: expr: '0'
1035           <-Value: expr: '0'
1035            Constant: end-gen
1035           Value: end-gen
1035           FunctionCall: expr: 'value(0)'
1035          FunctionCall: end-gen
1035          Member: expr: 'qrySubcuenta.value(0)'
1035        <-Value: expr: 'qrySubcuenta.value(0)'
1035         Member: end-gen
1035        Value: end-gen
1035        InstructionUpdate: line: 'ctaCliente.idsubcuenta = qrySubcuenta.value(0)'
1035      <-Source: line: 'ctaCliente.idsubcuenta = qrySubcuenta.value(0)'
1035     <--If: line: 'ctaCliente.idsubcuenta = qrySubcuenta.value(0)'
1035    <---Source: line: 'ctaCliente.idsubcuenta = qrySubcuenta.value(0)'
1035   <----Function: line: 'ctaCliente.idsubcuenta = qrySubcuenta.value(0)'
1035  <-----Source: line: 'ctaCliente.idsubcuenta = qrySubcuenta.value(0)'
1035 <------Class: line: 'ctaCliente.idsubcuenta = qrySubcuenta.value(0)'
1035<-------Source: line: 'ctaCliente.idsubcuenta = qrySubcuenta.value(0)'
1036       InstructionUpdate: end-gen
1036       InstructionUpdate: begin-gen
1036        Member: begin-gen
1036         Identifier: begin-gen
1036          Identifier: expr: 'ctaCliente'
1036         Identifier: end-gen
1036         Identifier: begin-gen
1036          Identifier: expr: 'codsubcuenta'
1036         Identifier: end-gen
1036         Member: expr: 'ctaCliente.codsubcuenta'
1036        Member: end-gen
1036        OpUpdate: begin-gen
1036         OpUpdate: expr: '='
1036        OpUpdate: end-gen
1036        Value: begin-gen
1036         Member: begin-gen
1036          Identifier: begin-gen
1036           Identifier: expr: 'qrySubcuenta'
1036          Identifier: end-gen
1036          FunctionCall: begin-gen
1036           Value: begin-gen
1036            Constant: begin-gen
1036             Constant: ctype: 'Number' -> '1'
1036             Constant: expr: '1'
1036           <-Value: expr: '1'
1036            Constant: end-gen
1036           Value: end-gen
1036           FunctionCall: expr: 'value(1)'
1036          FunctionCall: end-gen
1036          Member: expr: 'qrySubcuenta.value(1)'
1036        <-Value: expr: 'qrySubcuenta.value(1)'
1036         Member: end-gen
1036        Value: end-gen
1036        InstructionUpdate: line: 'ctaCliente.codsubcuenta = qrySubcuenta.value(1)'
1036      <-Source: line: 'ctaCliente.codsubcuenta = qrySubcuenta.value(1)'
1036     <--If: line: 'ctaCliente.codsubcuenta = qrySubcuenta.value(1)'
1036    <---Source: line: 'ctaCliente.codsubcuenta = qrySubcuenta.value(1)'
1036   <----Function: line: 'ctaCliente.codsubcuenta = qrySubcuenta.value(1)'
1036  <-----Source: line: 'ctaCliente.codsubcuenta = qrySubcuenta.value(1)'
1036 <------Class: line: 'ctaCliente.codsubcuenta = qrySubcuenta.value(1)'
1036<-------Source: line: 'ctaCliente.codsubcuenta = qrySubcuenta.value(1)'
1037       InstructionUpdate: end-gen
1037      Source: end-gen
1037      If: end: 'block-if'
1037    <-Source: end: 'block-if'
1037   <--Function: end: 'block-if'
1037  <---Source: end: 'block-if'
1037 <----Class: end: 'block-if'
1037<-----Source: end: 'block-if'
1037     If: end-gen
1037     InstructionUpdate: begin-gen
1037      Member: begin-gen
1037       Identifier: begin-gen
1037        Identifier: expr: 'ctaCliente'
1037       Identifier: end-gen
1037       Identifier: begin-gen
1037        Identifier: expr: 'error'
1037       Identifier: end-gen
1037       Member: expr: 'ctaCliente.error'
1037      Member: end-gen
1037      OpUpdate: begin-gen
1037       OpUpdate: expr: '='
1037      OpUpdate: end-gen
1037      Value: begin-gen
1037       Constant: begin-gen
1037        Constant: ctype: 'Number' -> '0'
1037        Constant: expr: '0'
1037      <-Value: expr: '0'
1037       Constant: end-gen
1037      Value: end-gen
1037      InstructionUpdate: line: 'ctaCliente.error = 0'
1037    <-Source: line: 'ctaCliente.error = 0'
1037   <--Function: line: 'ctaCliente.error = 0'
1037  <---Source: line: 'ctaCliente.error = 0'
1037 <----Class: line: 'ctaCliente.error = 0'
1037<-----Source: line: 'ctaCliente.error = 0'
1039     InstructionUpdate: end-gen
1039     InstructionFlow: begin-gen
1039      Value: begin-gen
1039       Identifier: begin-gen
1039        Identifier: expr: 'ctaCliente'
1039      <-Value: expr: 'ctaCliente'
1039       Identifier: end-gen
1039      Value: end-gen
1039      InstructionFlow: line: 'return ctaCliente'
1039    <-Source: line: 'return ctaCliente'
1039   <--Function: line: 'return ctaCliente'
1039  <---Source: line: 'return ctaCliente'
1039 <----Class: line: 'return ctaCliente'
1039<-----Source: line: 'return ctaCliente'
1040     InstructionFlow: end-gen
1040    Source: end-gen
1040    Function: end: 'block-def-oficial_datosCtaCliente'
1040  <-Source: end: 'block-def-oficial_datosCtaCliente'
1040 <--Class: end: 'block-def-oficial_datosCtaCliente'
1040<---Source: end: 'block-def-oficial_datosCtaCliente'
1041   Function: end-gen
1041   Function: begin-gen
1041    Variable: begin-gen
1041     Variable: expr: 'codProveedor'
1041    Variable: end-gen
1041    Variable: begin-gen
1041     Variable: expr: 'valoresDefecto'
1041    Variable: end-gen
1041    Function: line: 'def oficial_datosCtaProveedor(self, codProveedor = None, valoresDefecto = None):'
1041  <-Source: line: 'def oficial_datosCtaProveedor(self, codProveedor = None, valoresDefecto = None):'
1041 <--Class: line: 'def oficial_datosCtaProveedor(self, codProveedor = None, valoresDefecto = None):'
1041<---Source: line: 'def oficial_datosCtaProveedor(self, codProveedor = None, valoresDefecto = None):'
1042    Function: begin: 'block-def-oficial_datosCtaProveedor'
1042  <-Source: begin: 'block-def-oficial_datosCtaProveedor'
1042 <--Class: begin: 'block-def-oficial_datosCtaProveedor'
1042<---Source: begin: 'block-def-oficial_datosCtaProveedor'
1042    Source: begin-gen
1042     If: begin-gen
1042      Expression: begin-gen
1042       OpUnary: begin-gen
1042        OpUnary: expr: 'not'
1042      <-Expression: expr: 'not'
1042        Identifier: begin-gen
1042         Identifier: expr: 'codProveedor'
1042       <-OpUnary: expr: 'codProveedor'
1042      <--Expression: expr: 'codProveedor'
1042        Identifier: end-gen
1042       OpUnary: end-gen
1042       Compare: begin-gen
1042        Compare: expr: 'or'
1042      <-Expression: expr: 'or'
1042       Compare: end-gen
1042       Identifier: begin-gen
1042        Identifier: expr: 'codProveedor'
1042      <-Expression: expr: 'codProveedor'
1042       Identifier: end-gen
1042       Compare: begin-gen
1042        Compare: expr: '=='
1042      <-Expression: expr: '=='
1042       Compare: end-gen
1042       Constant: begin-gen
1042        Constant: ctype: 'String' -> ''
1042        Constant: expr: 'u""'
1042      <-Expression: expr: 'u""'
1042       Constant: end-gen
1042      Expression: end-gen
1042      If: line: 'if not codProveedor or codProveedor == u"":'
1042    <-Source: line: 'if not codProveedor or codProveedor == u"":'
1042   <--Function: line: 'if not codProveedor or codProveedor == u"":'
1042  <---Source: line: 'if not codProveedor or codProveedor == u"":'
1042 <----Class: line: 'if not codProveedor or codProveedor == u"":'
1042<-----Source: line: 'if not codProveedor or codProveedor == u"":'
1043      If: begin: 'block-if'
1043    <-Source: begin: 'block-if'
1043   <--Function: begin: 'block-if'
1043  <---Source: begin: 'block-if'
1043 <----Class: begin: 'block-if'
1043<-----Source: begin: 'block-if'
1043      Source: begin-gen
1043       InstructionFlow: begin-gen
1043        Value: begin-gen
1043         Member: begin-gen
1043          Identifier: begin-gen
1043           Identifier: expr: 'flfacturac'
1043          Identifier: end-gen
1043          Identifier: begin-gen
1043           Identifier: expr: 'iface'
1043          Identifier: end-gen
1043          FunctionCall: begin-gen
1043           Value: begin-gen
1043            Constant: begin-gen
1043             Constant: ctype: 'String' -> 'PROVEE'
1043             Constant: expr: 'u"PROVEE"'
1043           <-Value: expr: 'u"PROVEE"'
1043            Constant: end-gen
1043           Value: end-gen
1043           Value: begin-gen
1043            Member: begin-gen
1043             Identifier: begin-gen
1043              Identifier: expr: 'valoresDefecto'
1043             Identifier: end-gen
1043             Identifier: begin-gen
1043              Identifier: expr: 'codejercicio'
1043             Identifier: end-gen
1043             Member: expr: 'valoresDefecto.codejercicio'
1043           <-Value: expr: 'valoresDefecto.codejercicio'
1043            Member: end-gen
1043           Value: end-gen
1043           FunctionCall: expr: 'pub_datosCtaEspecial(u"PROVEE", valoresDefecto.codejercicio)'
1043          FunctionCall: end-gen
1043          Member: expr: 'flfacturac.iface.pub_datosCtaEspecial(u"PROVEE", valoresDefecto.codejercicio)'
1043        <-Value: expr: 'flfacturac.iface.pub_datosCtaEspecial(u"PROVEE", valoresDefecto.codejercicio)'
1043         Member: end-gen
1043        Value: end-gen
1043        InstructionFlow: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"PROVEE", valoresDefecto.codejercicio)'
1043      <-Source: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"PROVEE", valoresDefecto.codejercicio)'
1043     <--If: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"PROVEE", valoresDefecto.codejercicio)'
1043    <---Source: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"PROVEE", valoresDefecto.codejercicio)'
1043   <----Function: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"PROVEE", valoresDefecto.codejercicio)'
1043  <-----Source: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"PROVEE", valoresDefecto.codejercicio)'
1043 <------Class: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"PROVEE", valoresDefecto.codejercicio)'
1043<-------Source: line: 'return flfacturac.iface.pub_datosCtaEspecial(u"PROVEE", valoresDefecto.codejercicio)'
1044       InstructionFlow: end-gen
1044      Source: end-gen
1044      If: end: 'block-if'
1044    <-Source: end: 'block-if'
1044   <--Function: end: 'block-if'
1044  <---Source: end: 'block-if'
1044 <----Class: end: 'block-if'
1044<-----Source: end: 'block-if'
1044     If: end-gen
1044     DeclarationBlock: begin-gen
1044      Variable: begin-gen
1044       Variable: expr: 'util'
1044       Variable: expr: '='
1044       Value: begin-gen
1044        New: begin-gen
1044         FunctionCall: begin-gen
1044          FunctionCall: expr: 'FLUtil()'
1044        <-New: expr: 'qsatype.FLUtil()'
1044       <--Value: expr: 'qsatype.FLUtil()'
1044      <---Variable: expr: 'qsatype.FLUtil()'
1044         FunctionCall: end-gen
1044        New: end-gen
1044       Value: end-gen
1044      Variable: end-gen
1044      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1044    <-Source: line: 'util = qsatype.FLUtil()'
1044   <--Function: line: 'util = qsatype.FLUtil()'
1044  <---Source: line: 'util = qsatype.FLUtil()'
1044 <----Class: line: 'util = qsatype.FLUtil()'
1044<-----Source: line: 'util = qsatype.FLUtil()'
1045     DeclarationBlock: end-gen
1045     DeclarationBlock: begin-gen
1045      Variable: begin-gen
1045       Variable: expr: 'ctaProveedor'
1045       Variable: expr: '='
1045       Value: begin-gen
1045        Constant: begin-gen
1045         Constant: ctype: None -> None
1045         Constant: expr: '[]'
1045       <-Value: expr: '[]'
1045      <--Variable: expr: 'qsatype.Array()'
1045        Constant: end-gen
1045       Value: end-gen
1045      Variable: end-gen
1045      DeclarationBlock: line: 'ctaProveedor = qsatype.Array()'
1045    <-Source: line: 'ctaProveedor = qsatype.Array()'
1045   <--Function: line: 'ctaProveedor = qsatype.Array()'
1045  <---Source: line: 'ctaProveedor = qsatype.Array()'
1045 <----Class: line: 'ctaProveedor = qsatype.Array()'
1045<-----Source: line: 'ctaProveedor = qsatype.Array()'
1046     DeclarationBlock: end-gen
1046     InstructionUpdate: begin-gen
1046      ArrayMember: begin-gen
1046       Identifier: begin-gen
1046        Identifier: expr: 'ctaProveedor'
1046       Identifier: end-gen
1046       Value: begin-gen
1046        Constant: begin-gen
1046         Constant: ctype: 'String' -> 'codsubcuenta'
1046         Constant: expr: 'u"codsubcuenta"'
1046       <-Value: expr: 'u"codsubcuenta"'
1046        Constant: end-gen
1046       Value: end-gen
1046       ArrayMember: expr: 'ctaProveedor[u"codsubcuenta"]'
1046      ArrayMember: end-gen
1046      OpUpdate: begin-gen
1046       OpUpdate: expr: '='
1046      OpUpdate: end-gen
1046      Value: begin-gen
1046       Constant: begin-gen
1046        Constant: ctype: 'String' -> ''
1046        Constant: expr: 'u""'
1046      <-Value: expr: 'u""'
1046       Constant: end-gen
1046      Value: end-gen
1046      InstructionUpdate: line: 'ctaProveedor[u"codsubcuenta"] = u""'
1046    <-Source: line: 'ctaProveedor[u"codsubcuenta"] = u""'
1046   <--Function: line: 'ctaProveedor[u"codsubcuenta"] = u""'
1046  <---Source: line: 'ctaProveedor[u"codsubcuenta"] = u""'
1046 <----Class: line: 'ctaProveedor[u"codsubcuenta"] = u""'
1046<-----Source: line: 'ctaProveedor[u"codsubcuenta"] = u""'
1047     InstructionUpdate: end-gen
1047     InstructionUpdate: begin-gen
1047      ArrayMember: begin-gen
1047       Identifier: begin-gen
1047        Identifier: expr: 'ctaProveedor'
1047       Identifier: end-gen
1047       Value: begin-gen
1047        Constant: begin-gen
1047         Constant: ctype: 'String' -> 'idsubcuenta'
1047         Constant: expr: 'u"idsubcuenta"'
1047       <-Value: expr: 'u"idsubcuenta"'
1047        Constant: end-gen
1047       Value: end-gen
1047       ArrayMember: expr: 'ctaProveedor[u"idsubcuenta"]'
1047      ArrayMember: end-gen
1047      OpUpdate: begin-gen
1047       OpUpdate: expr: '='
1047      OpUpdate: end-gen
1047      Value: begin-gen
1047       Constant: begin-gen
1047        Constant: ctype: 'String' -> ''
1047        Constant: expr: 'u""'
1047      <-Value: expr: 'u""'
1047       Constant: end-gen
1047      Value: end-gen
1047      InstructionUpdate: line: 'ctaProveedor[u"idsubcuenta"] = u""'
1047    <-Source: line: 'ctaProveedor[u"idsubcuenta"] = u""'
1047   <--Function: line: 'ctaProveedor[u"idsubcuenta"] = u""'
1047  <---Source: line: 'ctaProveedor[u"idsubcuenta"] = u""'
1047 <----Class: line: 'ctaProveedor[u"idsubcuenta"] = u""'
1047<-----Source: line: 'ctaProveedor[u"idsubcuenta"] = u""'
1048     InstructionUpdate: end-gen
1048     If: begin-gen
1048      Value: begin-gen
1048       OpUnary: begin-gen
1048        OpUnary: expr: 'not'
1048      <-Value: expr: 'not'
1048        Member: begin-gen
1048         Identifier: begin-gen
1048          Identifier: expr: 'codProveedor'
1048         Identifier: end-gen
1048         FunctionCall: begin-gen
1048          FunctionCall: expr: 'toString()'
1048         FunctionCall: end-gen
1048         FunctionCall: begin-gen
1048          FunctionCall: expr: 'isEmpty()'
1048         FunctionCall: end-gen
1048         Member: expr: 'parseString(codProveedor) == None'
1048       <-OpUnary: expr: 'parseString(codProveedor) == None'
1048      <--Value: expr: 'parseString(codProveedor) == None'
1048        Member: end-gen
1048       OpUnary: end-gen
1048      Value: end-gen
1048      If: line: 'if not parseString(codProveedor) == None:'
1048    <-Source: line: 'if not parseString(codProveedor) == None:'
1048   <--Function: line: 'if not parseString(codProveedor) == None:'
1048  <---Source: line: 'if not parseString(codProveedor) == None:'
1048 <----Class: line: 'if not parseString(codProveedor) == None:'
1048<-----Source: line: 'if not parseString(codProveedor) == None:'
1049      If: begin: 'block-if'
1049    <-Source: begin: 'block-if'
1049   <--Function: begin: 'block-if'
1049  <---Source: begin: 'block-if'
1049 <----Class: begin: 'block-if'
1049<-----Source: begin: 'block-if'
1049      Source: begin-gen
1049       DeclarationBlock: begin-gen
1049        Variable: begin-gen
1049         Variable: expr: 'qrySubcuenta'
1049         Variable: expr: '='
1049         Value: begin-gen
1049          New: begin-gen
1049           FunctionCall: begin-gen
1049            FunctionCall: expr: 'FLSqlQuery()'
1049          <-New: expr: 'qsatype.FLSqlQuery()'
1049         <--Value: expr: 'qsatype.FLSqlQuery()'
1049        <---Variable: expr: 'qsatype.FLSqlQuery()'
1049           FunctionCall: end-gen
1049          New: end-gen
1049         Value: end-gen
1049        Variable: end-gen
1049        DeclarationBlock: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1049      <-Source: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1049     <--If: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1049    <---Source: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1049   <----Function: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1049  <-----Source: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1049 <------Class: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1049<-------Source: line: 'qrySubcuenta = qsatype.FLSqlQuery()'
1050       DeclarationBlock: end-gen
1050       InstructionCall: begin-gen
1050        Member: begin-gen
1050         Identifier: begin-gen
1050          Identifier: expr: 'qrySubcuenta'
1050         Identifier: end-gen
1050         FunctionCall: begin-gen
1050          Value: begin-gen
1050           Constant: begin-gen
1050            Constant: ctype: 'String' -> 'co_subcuentasprov'
1050            Constant: expr: 'u"co_subcuentasprov"'
1050          <-Value: expr: 'u"co_subcuentasprov"'
1050           Constant: end-gen
1050          Value: end-gen
1050          FunctionCall: expr: 'setTablesList(u"co_subcuentasprov")'
1050         FunctionCall: end-gen
1050         Member: expr: 'qrySubcuenta.setTablesList(u"co_subcuentasprov")'
1050        Member: end-gen
1050        InstructionCall: line: 'qrySubcuenta.setTablesList(u"co_subcuentasprov")'
1050      <-Source: line: 'qrySubcuenta.setTablesList(u"co_subcuentasprov")'
1050     <--If: line: 'qrySubcuenta.setTablesList(u"co_subcuentasprov")'
1050    <---Source: line: 'qrySubcuenta.setTablesList(u"co_subcuentasprov")'
1050   <----Function: line: 'qrySubcuenta.setTablesList(u"co_subcuentasprov")'
1050  <-----Source: line: 'qrySubcuenta.setTablesList(u"co_subcuentasprov")'
1050 <------Class: line: 'qrySubcuenta.setTablesList(u"co_subcuentasprov")'
1050<-------Source: line: 'qrySubcuenta.setTablesList(u"co_subcuentasprov")'
1051       InstructionCall: end-gen
1051       InstructionCall: begin-gen
1051        Member: begin-gen
1051         Identifier: begin-gen
1051          Identifier: expr: 'qrySubcuenta'
1051         Identifier: end-gen
1051         FunctionCall: begin-gen
1051          Value: begin-gen
1051           Constant: begin-gen
1051            Constant: ctype: 'String' -> 'idsubcuenta, codsubcuenta'
1051            Constant: expr: 'u"idsubcuenta, codsubcuenta"'
1051          <-Value: expr: 'u"idsubcuenta, codsubcuenta"'
1051           Constant: end-gen
1051          Value: end-gen
1051          FunctionCall: expr: 'setSelect(u"idsubcuenta, codsubcuenta")'
1051         FunctionCall: end-gen
1051         Member: expr: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1051        Member: end-gen
1051        InstructionCall: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1051      <-Source: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1051     <--If: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1051    <---Source: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1051   <----Function: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1051  <-----Source: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1051 <------Class: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1051<-------Source: line: 'qrySubcuenta.setSelect(u"idsubcuenta, codsubcuenta")'
1052       InstructionCall: end-gen
1052       InstructionCall: begin-gen
1052        Member: begin-gen
1052         Identifier: begin-gen
1052          Identifier: expr: 'qrySubcuenta'
1052         Identifier: end-gen
1052         FunctionCall: begin-gen
1052          Value: begin-gen
1052           Constant: begin-gen
1052            Constant: ctype: 'String' -> 'co_subcuentasprov'
1052            Constant: expr: 'u"co_subcuentasprov"'
1052          <-Value: expr: 'u"co_subcuentasprov"'
1052           Constant: end-gen
1052          Value: end-gen
1052          FunctionCall: expr: 'setFrom(u"co_subcuentasprov")'
1052         FunctionCall: end-gen
1052         Member: expr: 'qrySubcuenta.setFrom(u"co_subcuentasprov")'
1052        Member: end-gen
1052        InstructionCall: line: 'qrySubcuenta.setFrom(u"co_subcuentasprov")'
1052      <-Source: line: 'qrySubcuenta.setFrom(u"co_subcuentasprov")'
1052     <--If: line: 'qrySubcuenta.setFrom(u"co_subcuentasprov")'
1052    <---Source: line: 'qrySubcuenta.setFrom(u"co_subcuentasprov")'
1052   <----Function: line: 'qrySubcuenta.setFrom(u"co_subcuentasprov")'
1052  <-----Source: line: 'qrySubcuenta.setFrom(u"co_subcuentasprov")'
1052 <------Class: line: 'qrySubcuenta.setFrom(u"co_subcuentasprov")'
1052<-------Source: line: 'qrySubcuenta.setFrom(u"co_subcuentasprov")'
1053       InstructionCall: end-gen
1053       InstructionCall: begin-gen
1053        Member: begin-gen
1053         Identifier: begin-gen
1053          Identifier: expr: 'qrySubcuenta'
1053         Identifier: end-gen
1053         FunctionCall: begin-gen
1053          Expression: begin-gen
1053           Expression: expr: 'ustr('
1053           Constant: begin-gen
1053            Constant: ctype: 'String' -> "codproveedor = '"
1053            Constant: expr: 'u"codproveedor = \'"'
1053          <-Expression: expr: 'u"codproveedor = \'"'
1053           Constant: end-gen
1053           Expression: expr: ','
1053           Identifier: begin-gen
1053            Identifier: expr: 'codProveedor'
1053          <-Expression: expr: 'codProveedor'
1053           Identifier: end-gen
1053           Expression: expr: ','
1053           Constant: begin-gen
1053            Constant: ctype: 'String' -> "' AND codejercicio = '"
1053            Constant: expr: 'u"\' AND codejercicio = \'"'
1053          <-Expression: expr: 'u"\' AND codejercicio = \'"'
1053           Constant: end-gen
1053           Expression: expr: ','
1053           Member: begin-gen
1053            Identifier: begin-gen
1053             Identifier: expr: 'valoresDefecto'
1053            Identifier: end-gen
1053            Identifier: begin-gen
1053             Identifier: expr: 'codejercicio'
1053            Identifier: end-gen
1053            Member: expr: 'valoresDefecto.codejercicio'
1053          <-Expression: expr: 'valoresDefecto.codejercicio'
1053           Member: end-gen
1053           Expression: expr: ','
1053           Constant: begin-gen
1053            Constant: ctype: 'String' -> "'"
1053            Constant: expr: 'u"\'"'
1053          <-Expression: expr: 'u"\'"'
1053           Constant: end-gen
1053           Expression: expr: ')'
1053          Expression: end-gen
1053          FunctionCall: expr: 'setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1053         FunctionCall: end-gen
1053         Member: expr: 'qrySubcuenta.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1053        Member: end-gen
1053        InstructionCall: line: 'qrySubcuenta.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1053      <-Source: line: 'qrySubcuenta.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1053     <--If: line: 'qrySubcuenta.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1053    <---Source: line: 'qrySubcuenta.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1053   <----Function: line: 'qrySubcuenta.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1053  <-----Source: line: 'qrySubcuenta.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1053 <------Class: line: 'qrySubcuenta.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1053<-------Source: line: 'qrySubcuenta.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\' AND codejercicio = \'" , valoresDefecto.codejercicio , u"\'" ))'
1054       InstructionCall: end-gen
1054       If: begin-gen
1054        Value: begin-gen
1054         OpUnary: begin-gen
1054          OpUnary: expr: 'not'
1054        <-Value: expr: 'not'
1054          Member: begin-gen
1054           Identifier: begin-gen
1054            Identifier: expr: 'qrySubcuenta'
1054           Identifier: end-gen
1054           FunctionCall: begin-gen
1054            FunctionCall: expr: 'exec_()'
1054           FunctionCall: end-gen
1054           Member: expr: 'qrySubcuenta.exec_()'
1054         <-OpUnary: expr: 'qrySubcuenta.exec_()'
1054        <--Value: expr: 'qrySubcuenta.exec_()'
1054          Member: end-gen
1054         OpUnary: end-gen
1054        Value: end-gen
1054        If: line: 'if not qrySubcuenta.exec_():'
1054      <-Source: line: 'if not qrySubcuenta.exec_():'
1054     <--If: line: 'if not qrySubcuenta.exec_():'
1054    <---Source: line: 'if not qrySubcuenta.exec_():'
1054   <----Function: line: 'if not qrySubcuenta.exec_():'
1054  <-----Source: line: 'if not qrySubcuenta.exec_():'
1054 <------Class: line: 'if not qrySubcuenta.exec_():'
1054<-------Source: line: 'if not qrySubcuenta.exec_():'
1055        If: begin: 'block-if'
1055      <-Source: begin: 'block-if'
1055     <--If: begin: 'block-if'
1055    <---Source: begin: 'block-if'
1055   <----Function: begin: 'block-if'
1055  <-----Source: begin: 'block-if'
1055 <------Class: begin: 'block-if'
1055<-------Source: begin: 'block-if'
1055        Source: begin-gen
1055         InstructionUpdate: begin-gen
1055          Member: begin-gen
1055           Identifier: begin-gen
1055            Identifier: expr: 'ctaProveedor'
1055           Identifier: end-gen
1055           Identifier: begin-gen
1055            Identifier: expr: 'error'
1055           Identifier: end-gen
1055           Member: expr: 'ctaProveedor.error'
1055          Member: end-gen
1055          OpUpdate: begin-gen
1055           OpUpdate: expr: '='
1055          OpUpdate: end-gen
1055          Value: begin-gen
1055           Constant: begin-gen
1055            Constant: ctype: 'Number' -> '1'
1055            Constant: expr: '1'
1055          <-Value: expr: '1'
1055           Constant: end-gen
1055          Value: end-gen
1055          InstructionUpdate: line: 'ctaProveedor.error = 1'
1055        <-Source: line: 'ctaProveedor.error = 1'
1055       <--If: line: 'ctaProveedor.error = 1'
1055      <---Source: line: 'ctaProveedor.error = 1'
1055     <----If: line: 'ctaProveedor.error = 1'
1055    <-----Source: line: 'ctaProveedor.error = 1'
1055   <------Function: line: 'ctaProveedor.error = 1'
1055  <-------Source: line: 'ctaProveedor.error = 1'
1055 <--------Class: line: 'ctaProveedor.error = 1'
1055<---------Source: line: 'ctaProveedor.error = 1'
1056         InstructionUpdate: end-gen
1056         InstructionFlow: begin-gen
1056          Value: begin-gen
1056           Identifier: begin-gen
1056            Identifier: expr: 'ctaProveedor'
1056          <-Value: expr: 'ctaProveedor'
1056           Identifier: end-gen
1056          Value: end-gen
1056          InstructionFlow: line: 'return ctaProveedor'
1056        <-Source: line: 'return ctaProveedor'
1056       <--If: line: 'return ctaProveedor'
1056      <---Source: line: 'return ctaProveedor'
1056     <----If: line: 'return ctaProveedor'
1056    <-----Source: line: 'return ctaProveedor'
1056   <------Function: line: 'return ctaProveedor'
1056  <-------Source: line: 'return ctaProveedor'
1056 <--------Class: line: 'return ctaProveedor'
1056<---------Source: line: 'return ctaProveedor'
1057         InstructionFlow: end-gen
1057        Source: end-gen
1057        If: end: 'block-if'
1057      <-Source: end: 'block-if'
1057     <--If: end: 'block-if'
1057    <---Source: end: 'block-if'
1057   <----Function: end: 'block-if'
1057  <-----Source: end: 'block-if'
1057 <------Class: end: 'block-if'
1057<-------Source: end: 'block-if'
1057       If: end-gen
1057       If: begin-gen
1057        Value: begin-gen
1057         OpUnary: begin-gen
1057          OpUnary: expr: 'not'
1057        <-Value: expr: 'not'
1057          Member: begin-gen
1057           Identifier: begin-gen
1057            Identifier: expr: 'qrySubcuenta'
1057           Identifier: end-gen
1057           FunctionCall: begin-gen
1057            FunctionCall: expr: 'first()'
1057           FunctionCall: end-gen
1057           Member: expr: 'qrySubcuenta.first()'
1057         <-OpUnary: expr: 'qrySubcuenta.first()'
1057        <--Value: expr: 'qrySubcuenta.first()'
1057          Member: end-gen
1057         OpUnary: end-gen
1057        Value: end-gen
1057        If: line: 'if not qrySubcuenta.first():'
1057      <-Source: line: 'if not qrySubcuenta.first():'
1057     <--If: line: 'if not qrySubcuenta.first():'
1057    <---Source: line: 'if not qrySubcuenta.first():'
1057   <----Function: line: 'if not qrySubcuenta.first():'
1057  <-----Source: line: 'if not qrySubcuenta.first():'
1057 <------Class: line: 'if not qrySubcuenta.first():'
1057<-------Source: line: 'if not qrySubcuenta.first():'
1058        If: begin: 'block-if'
1058      <-Source: begin: 'block-if'
1058     <--If: begin: 'block-if'
1058    <---Source: begin: 'block-if'
1058   <----Function: begin: 'block-if'
1058  <-----Source: begin: 'block-if'
1058 <------Class: begin: 'block-if'
1058<-------Source: begin: 'block-if'
1058        Source: begin-gen
1058         InstructionCall: begin-gen
1058          Member: begin-gen
1058           Identifier: begin-gen
1058            Identifier: expr: 'MessageBox'
1058           Identifier: end-gen
1058           FunctionCall: begin-gen
1058            Expression: begin-gen
1058             Expression: expr: 'ustr('
1058             Member: begin-gen
1058              Identifier: begin-gen
1058               Identifier: expr: 'util'
1058              Identifier: end-gen
1058              FunctionCall: begin-gen
1058               Value: begin-gen
1058                Constant: begin-gen
1058                 Constant: ctype: 'String' -> 'scripts'
1058                 Constant: expr: 'u"scripts"'
1058               <-Value: expr: 'u"scripts"'
1058                Constant: end-gen
1058               Value: end-gen
1058               Value: begin-gen
1058                Constant: begin-gen
1058                 Constant: ctype: 'String' -> 'No hay ninguna subcuenta asociada al proveedor '
1058                 Constant: expr: 'u"No hay ninguna subcuenta asociada al proveedor "'
1058               <-Value: expr: 'u"No hay ninguna subcuenta asociada al proveedor "'
1058                Constant: end-gen
1058               Value: end-gen
1058               FunctionCall: expr: 'translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ")'
1058              FunctionCall: end-gen
1058              Member: expr: 'util.translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ")'
1058            <-Expression: expr: 'util.translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ")'
1058             Member: end-gen
1058             Expression: expr: ','
1058             Identifier: begin-gen
1058              Identifier: expr: 'codProveedor'
1058            <-Expression: expr: 'codProveedor'
1058             Identifier: end-gen
1058             Expression: expr: ','
1058             Member: begin-gen
1058              Identifier: begin-gen
1058               Identifier: expr: 'util'
1058              Identifier: end-gen
1058              FunctionCall: begin-gen
1058               Value: begin-gen
1058                Constant: begin-gen
1058                 Constant: ctype: 'String' -> 'scripts'
1058                 Constant: expr: 'u"scripts"'
1058               <-Value: expr: 'u"scripts"'
1058                Constant: end-gen
1058               Value: end-gen
1058               Value: begin-gen
1058                Constant: begin-gen
1058                 Constant: ctype: 'String' -> ' para el ejercicio '
1058                 Constant: expr: 'u" para el ejercicio "'
1058               <-Value: expr: 'u" para el ejercicio "'
1058                Constant: end-gen
1058               Value: end-gen
1058               FunctionCall: expr: 'translate(u"scripts", u" para el ejercicio ")'
1058              FunctionCall: end-gen
1058              Member: expr: 'util.translate(u"scripts", u" para el ejercicio ")'
1058            <-Expression: expr: 'util.translate(u"scripts", u" para el ejercicio ")'
1058             Member: end-gen
1058             Expression: expr: ','
1058             Member: begin-gen
1058              Identifier: begin-gen
1058               Identifier: expr: 'valoresDefecto'
1058              Identifier: end-gen
1058              Identifier: begin-gen
1058               Identifier: expr: 'codejercicio'
1058              Identifier: end-gen
1058              Member: expr: 'valoresDefecto.codejercicio'
1058            <-Expression: expr: 'valoresDefecto.codejercicio'
1058             Member: end-gen
1058             Expression: expr: ','
1058             Constant: begin-gen
1058              Constant: ctype: 'String' -> '.\\n'
1058              Constant: expr: 'u".\\n"'
1058            <-Expression: expr: 'u".\\n"'
1058             Constant: end-gen
1058             Expression: expr: ','
1058             Member: begin-gen
1058              Identifier: begin-gen
1058               Identifier: expr: 'util'
1058              Identifier: end-gen
1058              FunctionCall: begin-gen
1058               Value: begin-gen
1058                Constant: begin-gen
1058                 Constant: ctype: 'String' -> 'scripts'
1058                 Constant: expr: 'u"scripts"'
1058               <-Value: expr: 'u"scripts"'
1058                Constant: end-gen
1058               Value: end-gen
1058               Value: begin-gen
1058                Constant: begin-gen
1058                 Constant: ctype: 'String' -> 'Debe crear la subcuenta en el formulario de proveedores.'
1058                 Constant: expr: 'u"Debe crear la subcuenta en el formulario de proveedores."'
1058               <-Value: expr: 'u"Debe crear la subcuenta en el formulario de proveedores."'
1058                Constant: end-gen
1058               Value: end-gen
1058               FunctionCall: expr: 'translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.")'
1058              FunctionCall: end-gen
1058              Member: expr: 'util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.")'
1058            <-Expression: expr: 'util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.")'
1058             Member: end-gen
1058             Expression: expr: ')'
1058            Expression: end-gen
1058            Value: begin-gen
1058             Member: begin-gen
1058              Identifier: begin-gen
1058               Identifier: expr: 'MessageBox'
1058              Identifier: end-gen
1058              Identifier: begin-gen
1058               Identifier: expr: 'Ok'
1058              Identifier: end-gen
1058              Member: expr: 'MessageBox.Ok'
1058            <-Value: expr: 'MessageBox.Ok'
1058             Member: end-gen
1058            Value: end-gen
1058            Value: begin-gen
1058             Member: begin-gen
1058              Identifier: begin-gen
1058               Identifier: expr: 'MessageBox'
1058              Identifier: end-gen
1058              Identifier: begin-gen
1058               Identifier: expr: 'NoButton'
1058              Identifier: end-gen
1058              Member: expr: 'MessageBox.NoButton'
1058            <-Value: expr: 'MessageBox.NoButton'
1058             Member: end-gen
1058            Value: end-gen
1058            Value: begin-gen
1058             Member: begin-gen
1058              Identifier: begin-gen
1058               Identifier: expr: 'MessageBox'
1058              Identifier: end-gen
1058              Identifier: begin-gen
1058               Identifier: expr: 'NoButton'
1058              Identifier: end-gen
1058              Member: expr: 'MessageBox.NoButton'
1058            <-Value: expr: 'MessageBox.NoButton'
1058             Member: end-gen
1058            Value: end-gen
1058            FunctionCall: expr: 'critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ") , codProveedor , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1058           FunctionCall: end-gen
1058           Member: expr: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ") , codProveedor , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1058          Member: end-gen
1058          InstructionCall: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ") , codProveedor , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1058        <-Source: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ") , codProveedor , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1058       <--If: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ") , codProveedor , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1058      <---Source: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ") , codProveedor , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1058     <----If: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ") , codProveedor , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1058    <-----Source: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ") , codProveedor , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1058   <------Function: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ") , codProveedor , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1058  <-------Source: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ") , codProveedor , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1058 <--------Class: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ") , codProveedor , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1058<---------Source: line: 'MessageBox.critical(ustr( util.translate(u"scripts", u"No hay ninguna subcuenta asociada al proveedor ") , codProveedor , util.translate(u"scripts", u" para el ejercicio ") , valoresDefecto.codejercicio , u".\\n" , util.translate(u"scripts", u"Debe crear la subcuenta en el formulario de proveedores.") ), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton)'
1059         InstructionCall: end-gen
1059         InstructionUpdate: begin-gen
1059          Member: begin-gen
1059           Identifier: begin-gen
1059            Identifier: expr: 'ctaProveedor'
1059           Identifier: end-gen
1059           Identifier: begin-gen
1059            Identifier: expr: 'error'
1059           Identifier: end-gen
1059           Member: expr: 'ctaProveedor.error'
1059          Member: end-gen
1059          OpUpdate: begin-gen
1059           OpUpdate: expr: '='
1059          OpUpdate: end-gen
1059          Value: begin-gen
1059           Constant: begin-gen
1059            Constant: ctype: 'Number' -> '1'
1059            Constant: expr: '1'
1059          <-Value: expr: '1'
1059           Constant: end-gen
1059          Value: end-gen
1059          InstructionUpdate: line: 'ctaProveedor.error = 1'
1059        <-Source: line: 'ctaProveedor.error = 1'
1059       <--If: line: 'ctaProveedor.error = 1'
1059      <---Source: line: 'ctaProveedor.error = 1'
1059     <----If: line: 'ctaProveedor.error = 1'
1059    <-----Source: line: 'ctaProveedor.error = 1'
1059   <------Function: line: 'ctaProveedor.error = 1'
1059  <-------Source: line: 'ctaProveedor.error = 1'
1059 <--------Class: line: 'ctaProveedor.error = 1'
1059<---------Source: line: 'ctaProveedor.error = 1'
1060         InstructionUpdate: end-gen
1060         InstructionFlow: begin-gen
1060          Value: begin-gen
1060           Identifier: begin-gen
1060            Identifier: expr: 'ctaProveedor'
1060          <-Value: expr: 'ctaProveedor'
1060           Identifier: end-gen
1060          Value: end-gen
1060          InstructionFlow: line: 'return ctaProveedor'
1060        <-Source: line: 'return ctaProveedor'
1060       <--If: line: 'return ctaProveedor'
1060      <---Source: line: 'return ctaProveedor'
1060     <----If: line: 'return ctaProveedor'
1060    <-----Source: line: 'return ctaProveedor'
1060   <------Function: line: 'return ctaProveedor'
1060  <-------Source: line: 'return ctaProveedor'
1060 <--------Class: line: 'return ctaProveedor'
1060<---------Source: line: 'return ctaProveedor'
1061         InstructionFlow: end-gen
1061        Source: end-gen
1061        If: end: 'block-if'
1061      <-Source: end: 'block-if'
1061     <--If: end: 'block-if'
1061    <---Source: end: 'block-if'
1061   <----Function: end: 'block-if'
1061  <-----Source: end: 'block-if'
1061 <------Class: end: 'block-if'
1061<-------Source: end: 'block-if'
1061       If: end-gen
1061       InstructionUpdate: begin-gen
1061        Member: begin-gen
1061         Identifier: begin-gen
1061          Identifier: expr: 'ctaProveedor'
1061         Identifier: end-gen
1061         Identifier: begin-gen
1061          Identifier: expr: 'idsubcuenta'
1061         Identifier: end-gen
1061         Member: expr: 'ctaProveedor.idsubcuenta'
1061        Member: end-gen
1061        OpUpdate: begin-gen
1061         OpUpdate: expr: '='
1061        OpUpdate: end-gen
1061        Value: begin-gen
1061         Member: begin-gen
1061          Identifier: begin-gen
1061           Identifier: expr: 'qrySubcuenta'
1061          Identifier: end-gen
1061          FunctionCall: begin-gen
1061           Value: begin-gen
1061            Constant: begin-gen
1061             Constant: ctype: 'Number' -> '0'
1061             Constant: expr: '0'
1061           <-Value: expr: '0'
1061            Constant: end-gen
1061           Value: end-gen
1061           FunctionCall: expr: 'value(0)'
1061          FunctionCall: end-gen
1061          Member: expr: 'qrySubcuenta.value(0)'
1061        <-Value: expr: 'qrySubcuenta.value(0)'
1061         Member: end-gen
1061        Value: end-gen
1061        InstructionUpdate: line: 'ctaProveedor.idsubcuenta = qrySubcuenta.value(0)'
1061      <-Source: line: 'ctaProveedor.idsubcuenta = qrySubcuenta.value(0)'
1061     <--If: line: 'ctaProveedor.idsubcuenta = qrySubcuenta.value(0)'
1061    <---Source: line: 'ctaProveedor.idsubcuenta = qrySubcuenta.value(0)'
1061   <----Function: line: 'ctaProveedor.idsubcuenta = qrySubcuenta.value(0)'
1061  <-----Source: line: 'ctaProveedor.idsubcuenta = qrySubcuenta.value(0)'
1061 <------Class: line: 'ctaProveedor.idsubcuenta = qrySubcuenta.value(0)'
1061<-------Source: line: 'ctaProveedor.idsubcuenta = qrySubcuenta.value(0)'
1062       InstructionUpdate: end-gen
1062       InstructionUpdate: begin-gen
1062        Member: begin-gen
1062         Identifier: begin-gen
1062          Identifier: expr: 'ctaProveedor'
1062         Identifier: end-gen
1062         Identifier: begin-gen
1062          Identifier: expr: 'codsubcuenta'
1062         Identifier: end-gen
1062         Member: expr: 'ctaProveedor.codsubcuenta'
1062        Member: end-gen
1062        OpUpdate: begin-gen
1062         OpUpdate: expr: '='
1062        OpUpdate: end-gen
1062        Value: begin-gen
1062         Member: begin-gen
1062          Identifier: begin-gen
1062           Identifier: expr: 'qrySubcuenta'
1062          Identifier: end-gen
1062          FunctionCall: begin-gen
1062           Value: begin-gen
1062            Constant: begin-gen
1062             Constant: ctype: 'Number' -> '1'
1062             Constant: expr: '1'
1062           <-Value: expr: '1'
1062            Constant: end-gen
1062           Value: end-gen
1062           FunctionCall: expr: 'value(1)'
1062          FunctionCall: end-gen
1062          Member: expr: 'qrySubcuenta.value(1)'
1062        <-Value: expr: 'qrySubcuenta.value(1)'
1062         Member: end-gen
1062        Value: end-gen
1062        InstructionUpdate: line: 'ctaProveedor.codsubcuenta = qrySubcuenta.value(1)'
1062      <-Source: line: 'ctaProveedor.codsubcuenta = qrySubcuenta.value(1)'
1062     <--If: line: 'ctaProveedor.codsubcuenta = qrySubcuenta.value(1)'
1062    <---Source: line: 'ctaProveedor.codsubcuenta = qrySubcuenta.value(1)'
1062   <----Function: line: 'ctaProveedor.codsubcuenta = qrySubcuenta.value(1)'
1062  <-----Source: line: 'ctaProveedor.codsubcuenta = qrySubcuenta.value(1)'
1062 <------Class: line: 'ctaProveedor.codsubcuenta = qrySubcuenta.value(1)'
1062<-------Source: line: 'ctaProveedor.codsubcuenta = qrySubcuenta.value(1)'
1063       InstructionUpdate: end-gen
1063      Source: end-gen
1063      If: end: 'block-if'
1063    <-Source: end: 'block-if'
1063   <--Function: end: 'block-if'
1063  <---Source: end: 'block-if'
1063 <----Class: end: 'block-if'
1063<-----Source: end: 'block-if'
1063     If: end-gen
1063     InstructionUpdate: begin-gen
1063      Member: begin-gen
1063       Identifier: begin-gen
1063        Identifier: expr: 'ctaProveedor'
1063       Identifier: end-gen
1063       Identifier: begin-gen
1063        Identifier: expr: 'error'
1063       Identifier: end-gen
1063       Member: expr: 'ctaProveedor.error'
1063      Member: end-gen
1063      OpUpdate: begin-gen
1063       OpUpdate: expr: '='
1063      OpUpdate: end-gen
1063      Value: begin-gen
1063       Constant: begin-gen
1063        Constant: ctype: 'Number' -> '0'
1063        Constant: expr: '0'
1063      <-Value: expr: '0'
1063       Constant: end-gen
1063      Value: end-gen
1063      InstructionUpdate: line: 'ctaProveedor.error = 0'
1063    <-Source: line: 'ctaProveedor.error = 0'
1063   <--Function: line: 'ctaProveedor.error = 0'
1063  <---Source: line: 'ctaProveedor.error = 0'
1063 <----Class: line: 'ctaProveedor.error = 0'
1063<-----Source: line: 'ctaProveedor.error = 0'
1065     InstructionUpdate: end-gen
1065     InstructionFlow: begin-gen
1065      Value: begin-gen
1065       Identifier: begin-gen
1065        Identifier: expr: 'ctaProveedor'
1065      <-Value: expr: 'ctaProveedor'
1065       Identifier: end-gen
1065      Value: end-gen
1065      InstructionFlow: line: 'return ctaProveedor'
1065    <-Source: line: 'return ctaProveedor'
1065   <--Function: line: 'return ctaProveedor'
1065  <---Source: line: 'return ctaProveedor'
1065 <----Class: line: 'return ctaProveedor'
1065<-----Source: line: 'return ctaProveedor'
1066     InstructionFlow: end-gen
1066    Source: end-gen
1066    Function: end: 'block-def-oficial_datosCtaProveedor'
1066  <-Source: end: 'block-def-oficial_datosCtaProveedor'
1066 <--Class: end: 'block-def-oficial_datosCtaProveedor'
1066<---Source: end: 'block-def-oficial_datosCtaProveedor'
1067   Function: end-gen
1067   Function: begin-gen
1067    Variable: begin-gen
1067     Variable: expr: 'codIntervalo'
1067    Variable: end-gen
1067    Function: line: 'def oficial_calcularIntervalo(self, codIntervalo = None):'
1067  <-Source: line: 'def oficial_calcularIntervalo(self, codIntervalo = None):'
1067 <--Class: line: 'def oficial_calcularIntervalo(self, codIntervalo = None):'
1067<---Source: line: 'def oficial_calcularIntervalo(self, codIntervalo = None):'
1068    Function: begin: 'block-def-oficial_calcularIntervalo'
1068  <-Source: begin: 'block-def-oficial_calcularIntervalo'
1068 <--Class: begin: 'block-def-oficial_calcularIntervalo'
1068<---Source: begin: 'block-def-oficial_calcularIntervalo'
1068    Source: begin-gen
1068     DeclarationBlock: begin-gen
1068      Variable: begin-gen
1068       Variable: expr: 'util'
1068       Variable: expr: '='
1068       Value: begin-gen
1068        New: begin-gen
1068         FunctionCall: begin-gen
1068          FunctionCall: expr: 'FLUtil()'
1068        <-New: expr: 'qsatype.FLUtil()'
1068       <--Value: expr: 'qsatype.FLUtil()'
1068      <---Variable: expr: 'qsatype.FLUtil()'
1068         FunctionCall: end-gen
1068        New: end-gen
1068       Value: end-gen
1068      Variable: end-gen
1068      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1068    <-Source: line: 'util = qsatype.FLUtil()'
1068   <--Function: line: 'util = qsatype.FLUtil()'
1068  <---Source: line: 'util = qsatype.FLUtil()'
1068 <----Class: line: 'util = qsatype.FLUtil()'
1068<-----Source: line: 'util = qsatype.FLUtil()'
1069     DeclarationBlock: end-gen
1069     DeclarationBlock: begin-gen
1069      Variable: begin-gen
1069       Variable: expr: 'intervalo'
1069       Variable: expr: '='
1069       Value: begin-gen
1069        Constant: begin-gen
1069         Constant: ctype: None -> None
1069         Constant: expr: '[]'
1069       <-Value: expr: '[]'
1069      <--Variable: expr: 'qsatype.Array()'
1069        Constant: end-gen
1069       Value: end-gen
1069      Variable: end-gen
1069      DeclarationBlock: line: 'intervalo = qsatype.Array()'
1069    <-Source: line: 'intervalo = qsatype.Array()'
1069   <--Function: line: 'intervalo = qsatype.Array()'
1069  <---Source: line: 'intervalo = qsatype.Array()'
1069 <----Class: line: 'intervalo = qsatype.Array()'
1069<-----Source: line: 'intervalo = qsatype.Array()'
1070     DeclarationBlock: end-gen
1070     DeclarationBlock: begin-gen
1070      Variable: begin-gen
1070       Variable: expr: 'textoFun'
1070       Variable: expr: '='
1070       Value: begin-gen
1070        Member: begin-gen
1070         Identifier: begin-gen
1070          Identifier: expr: 'util'
1070         Identifier: end-gen
1070         FunctionCall: begin-gen
1070          Value: begin-gen
1070           Constant: begin-gen
1070            Constant: ctype: 'String' -> 'intervalos'
1070            Constant: expr: 'u"intervalos"'
1070          <-Value: expr: 'u"intervalos"'
1070           Constant: end-gen
1070          Value: end-gen
1070          Value: begin-gen
1070           Constant: begin-gen
1070            Constant: ctype: 'String' -> 'funcionintervalo'
1070            Constant: expr: 'u"funcionintervalo"'
1070          <-Value: expr: 'u"funcionintervalo"'
1070           Constant: end-gen
1070          Value: end-gen
1070          Expression: begin-gen
1070           Expression: expr: 'ustr('
1070           Constant: begin-gen
1070            Constant: ctype: 'String' -> "codigo = '"
1070            Constant: expr: 'u"codigo = \'"'
1070          <-Expression: expr: 'u"codigo = \'"'
1070           Constant: end-gen
1070           Expression: expr: ','
1070           Identifier: begin-gen
1070            Identifier: expr: 'codIntervalo'
1070          <-Expression: expr: 'codIntervalo'
1070           Identifier: end-gen
1070           Expression: expr: ','
1070           Constant: begin-gen
1070            Constant: ctype: 'String' -> "'"
1070            Constant: expr: 'u"\'"'
1070          <-Expression: expr: 'u"\'"'
1070           Constant: end-gen
1070           Expression: expr: ')'
1070          Expression: end-gen
1070          FunctionCall: expr: 'sqlSelect(u"intervalos", u"funcionintervalo", ustr( u"codigo = \'" , codIntervalo , u"\'" ))'
1070         FunctionCall: end-gen
1070         Member: expr: 'util.sqlSelect(u"intervalos", u"funcionintervalo", ustr( u"codigo = \'" , codIntervalo , u"\'" ))'
1070       <-Value: expr: 'util.sqlSelect(u"intervalos", u"funcionintervalo", ustr( u"codigo = \'" , codIntervalo , u"\'" ))'
1070      <--Variable: expr: 'util.sqlSelect(u"intervalos", u"funcionintervalo", ustr( u"codigo = \'" , codIntervalo , u"\'" ))'
1070        Member: end-gen
1070       Value: end-gen
1070      Variable: end-gen
1070      DeclarationBlock: line: 'textoFun = util.sqlSelect(u"intervalos", u"funcionintervalo", ustr( u"codigo = \'" , codIntervalo , u"\'" ))'
1070    <-Source: line: 'textoFun = util.sqlSelect(u"intervalos", u"funcionintervalo", ustr( u"codigo = \'" , codIntervalo , u"\'" ))'
1070   <--Function: line: 'textoFun = util.sqlSelect(u"intervalos", u"funcionintervalo", ustr( u"codigo = \'" , codIntervalo , u"\'" ))'
1070  <---Source: line: 'textoFun = util.sqlSelect(u"intervalos", u"funcionintervalo", ustr( u"codigo = \'" , codIntervalo , u"\'" ))'
1070 <----Class: line: 'textoFun = util.sqlSelect(u"intervalos", u"funcionintervalo", ustr( u"codigo = \'" , codIntervalo , u"\'" ))'
1070<-----Source: line: 'textoFun = util.sqlSelect(u"intervalos", u"funcionintervalo", ustr( u"codigo = \'" , codIntervalo , u"\'" ))'
1071     DeclarationBlock: end-gen
1071     DeclarationBlock: begin-gen
1071      Variable: begin-gen
1071       Variable: expr: 'funcionVal'
1071       Variable: expr: '='
1071       Value: begin-gen
1071        New: begin-gen
1071         FunctionCall: begin-gen
1071          Value: begin-gen
1071           Identifier: begin-gen
1071            Identifier: expr: 'textoFun'
1071          <-Value: expr: 'textoFun'
1071           Identifier: end-gen
1071          Value: end-gen
1071          FunctionCall: expr: 'Function(textoFun)'
1071        <-New: expr: 'qsatype.Function(textoFun)'
1071       <--Value: expr: 'qsatype.Function(textoFun)'
1071      <---Variable: expr: 'qsatype.Function(textoFun)'
1071         FunctionCall: end-gen
1071        New: end-gen
1071       Value: end-gen
1071      Variable: end-gen
1071      DeclarationBlock: line: 'funcionVal = qsatype.Function(textoFun)'
1071    <-Source: line: 'funcionVal = qsatype.Function(textoFun)'
1071   <--Function: line: 'funcionVal = qsatype.Function(textoFun)'
1071  <---Source: line: 'funcionVal = qsatype.Function(textoFun)'
1071 <----Class: line: 'funcionVal = qsatype.Function(textoFun)'
1071<-----Source: line: 'funcionVal = qsatype.Function(textoFun)'
1072     DeclarationBlock: end-gen
1072     DeclarationBlock: begin-gen
1072      Variable: begin-gen
1072       Variable: expr: 'resultado'
1072       Variable: expr: '='
1072       Value: begin-gen
1072        FunctionCall: begin-gen
1072         FunctionCall: expr: 'funcionVal()'
1072       <-Value: expr: 'funcionVal()'
1072      <--Variable: expr: 'funcionVal()'
1072        FunctionCall: end-gen
1072       Value: end-gen
1072      Variable: end-gen
1072      DeclarationBlock: line: 'resultado = funcionVal()'
1072    <-Source: line: 'resultado = funcionVal()'
1072   <--Function: line: 'resultado = funcionVal()'
1072  <---Source: line: 'resultado = funcionVal()'
1072 <----Class: line: 'resultado = funcionVal()'
1072<-----Source: line: 'resultado = funcionVal()'
1073     DeclarationBlock: end-gen
1073     If: begin-gen
1073      Value: begin-gen
1073       Identifier: begin-gen
1073        Identifier: expr: 'resultado'
1073      <-Value: expr: 'resultado'
1073       Identifier: end-gen
1073      Value: end-gen
1073      If: line: 'if resultado:'
1073    <-Source: line: 'if resultado:'
1073   <--Function: line: 'if resultado:'
1073  <---Source: line: 'if resultado:'
1073 <----Class: line: 'if resultado:'
1073<-----Source: line: 'if resultado:'
1074      If: begin: 'block-if'
1074    <-Source: begin: 'block-if'
1074   <--Function: begin: 'block-if'
1074  <---Source: begin: 'block-if'
1074 <----Class: begin: 'block-if'
1074<-----Source: begin: 'block-if'
1074      Source: begin-gen
1074       InstructionFlow: begin-gen
1074        Value: begin-gen
1074         Identifier: begin-gen
1074          Identifier: expr: 'resultado'
1074        <-Value: expr: 'resultado'
1074         Identifier: end-gen
1074        Value: end-gen
1074        InstructionFlow: line: 'return resultado'
1074      <-Source: line: 'return resultado'
1074     <--If: line: 'return resultado'
1074    <---Source: line: 'return resultado'
1074   <----Function: line: 'return resultado'
1074  <-----Source: line: 'return resultado'
1074 <------Class: line: 'return resultado'
1074<-------Source: line: 'return resultado'
1075       InstructionFlow: end-gen
1075      Source: end-gen
1075      If: end: 'block-if'
1075    <-Source: end: 'block-if'
1075   <--Function: end: 'block-if'
1075  <---Source: end: 'block-if'
1075 <----Class: end: 'block-if'
1075<-----Source: end: 'block-if'
1075     If: end-gen
1075     InstructionUpdate: begin-gen
1075      ArrayMember: begin-gen
1075       Identifier: begin-gen
1075        Identifier: expr: 'intervalo'
1075       Identifier: end-gen
1075       Value: begin-gen
1075        Constant: begin-gen
1075         Constant: ctype: 'String' -> 'desde'
1075         Constant: expr: 'u"desde"'
1075       <-Value: expr: 'u"desde"'
1075        Constant: end-gen
1075       Value: end-gen
1075       ArrayMember: expr: 'intervalo[u"desde"]'
1075      ArrayMember: end-gen
1075      OpUpdate: begin-gen
1075       OpUpdate: expr: '='
1075      OpUpdate: end-gen
1075      Value: begin-gen
1075       Identifier: begin-gen
1075        Identifier: expr: 'False'
1075      <-Value: expr: 'False'
1075       Identifier: end-gen
1075      Value: end-gen
1075      InstructionUpdate: line: 'intervalo[u"desde"] = False'
1075    <-Source: line: 'intervalo[u"desde"] = False'
1075   <--Function: line: 'intervalo[u"desde"] = False'
1075  <---Source: line: 'intervalo[u"desde"] = False'
1075 <----Class: line: 'intervalo[u"desde"] = False'
1075<-----Source: line: 'intervalo[u"desde"] = False'
1076     InstructionUpdate: end-gen
1076     InstructionUpdate: begin-gen
1076      ArrayMember: begin-gen
1076       Identifier: begin-gen
1076        Identifier: expr: 'intervalo'
1076       Identifier: end-gen
1076       Value: begin-gen
1076        Constant: begin-gen
1076         Constant: ctype: 'String' -> 'hasta'
1076         Constant: expr: 'u"hasta"'
1076       <-Value: expr: 'u"hasta"'
1076        Constant: end-gen
1076       Value: end-gen
1076       ArrayMember: expr: 'intervalo[u"hasta"]'
1076      ArrayMember: end-gen
1076      OpUpdate: begin-gen
1076       OpUpdate: expr: '='
1076      OpUpdate: end-gen
1076      Value: begin-gen
1076       Identifier: begin-gen
1076        Identifier: expr: 'False'
1076      <-Value: expr: 'False'
1076       Identifier: end-gen
1076      Value: end-gen
1076      InstructionUpdate: line: 'intervalo[u"hasta"] = False'
1076    <-Source: line: 'intervalo[u"hasta"] = False'
1076   <--Function: line: 'intervalo[u"hasta"] = False'
1076  <---Source: line: 'intervalo[u"hasta"] = False'
1076 <----Class: line: 'intervalo[u"hasta"] = False'
1076<-----Source: line: 'intervalo[u"hasta"] = False'
1077     InstructionUpdate: end-gen
1077     DeclarationBlock: begin-gen
1077      Variable: begin-gen
1077       Variable: expr: 'fechaDesde'
1077       Variable: expr: '='
1077       Value: begin-gen
1077        New: begin-gen
1077         FunctionCall: begin-gen
1077          FunctionCall: expr: 'Date()'
1077        <-New: expr: 'qsatype.Date()'
1077       <--Value: expr: 'qsatype.Date()'
1077      <---Variable: expr: 'qsatype.Date()'
1077         FunctionCall: end-gen
1077        New: end-gen
1077       Value: end-gen
1077      Variable: end-gen
1077      DeclarationBlock: line: 'fechaDesde = qsatype.Date()'
1077    <-Source: line: 'fechaDesde = qsatype.Date()'
1077   <--Function: line: 'fechaDesde = qsatype.Date()'
1077  <---Source: line: 'fechaDesde = qsatype.Date()'
1077 <----Class: line: 'fechaDesde = qsatype.Date()'
1077<-----Source: line: 'fechaDesde = qsatype.Date()'
1078     DeclarationBlock: end-gen
1078     DeclarationBlock: begin-gen
1078      Variable: begin-gen
1078       Variable: expr: 'fechaHasta'
1078       Variable: expr: '='
1078       Value: begin-gen
1078        New: begin-gen
1078         FunctionCall: begin-gen
1078          FunctionCall: expr: 'Date()'
1078        <-New: expr: 'qsatype.Date()'
1078       <--Value: expr: 'qsatype.Date()'
1078      <---Variable: expr: 'qsatype.Date()'
1078         FunctionCall: end-gen
1078        New: end-gen
1078       Value: end-gen
1078      Variable: end-gen
1078      DeclarationBlock: line: 'fechaHasta = qsatype.Date()'
1078    <-Source: line: 'fechaHasta = qsatype.Date()'
1078   <--Function: line: 'fechaHasta = qsatype.Date()'
1078  <---Source: line: 'fechaHasta = qsatype.Date()'
1078 <----Class: line: 'fechaHasta = qsatype.Date()'
1078<-----Source: line: 'fechaHasta = qsatype.Date()'
1079     DeclarationBlock: end-gen
1079     DeclarationBlock: begin-gen
1079      Variable: begin-gen
1079       Variable: expr: 'mes'
1079       Variable: expr: '='
1079       Variable: expr: '0'
1079      Variable: end-gen
1079      DeclarationBlock: line: 'mes = 0'
1079    <-Source: line: 'mes = 0'
1079   <--Function: line: 'mes = 0'
1079  <---Source: line: 'mes = 0'
1079 <----Class: line: 'mes = 0'
1079<-----Source: line: 'mes = 0'
1080     DeclarationBlock: end-gen
1080     DeclarationBlock: begin-gen
1080      Variable: begin-gen
1080       Variable: expr: 'anio'
1080       Variable: expr: '='
1080       Variable: expr: '0'
1080      Variable: end-gen
1080      DeclarationBlock: line: 'anio = 0'
1080    <-Source: line: 'anio = 0'
1080   <--Function: line: 'anio = 0'
1080  <---Source: line: 'anio = 0'
1080 <----Class: line: 'anio = 0'
1080<-----Source: line: 'anio = 0'
1081     DeclarationBlock: end-gen
1081     Switch: begin-gen
1081      Value: begin-gen
1081       Identifier: begin-gen
1081        Identifier: expr: 'codIntervalo'
1081      <-Value: expr: 'codIntervalo'
1081       Identifier: end-gen
1081      Value: end-gen
1081      Switch: line: 's2a_when = codIntervalo'
1081    <-Source: line: 's2a_when = codIntervalo'
1081   <--Function: line: 's2a_when = codIntervalo'
1081  <---Source: line: 's2a_when = codIntervalo'
1081 <----Class: line: 's2a_when = codIntervalo'
1081<-----Source: line: 's2a_when = codIntervalo'
1082      Switch: line: 's2a_do_work,s2a_work_done = False,False'
1082    <-Source: line: 's2a_do_work,s2a_work_done = False,False'
1082   <--Function: line: 's2a_do_work,s2a_work_done = False,False'
1082  <---Source: line: 's2a_do_work,s2a_work_done = False,False'
1082 <----Class: line: 's2a_do_work,s2a_work_done = False,False'
1082<-----Source: line: 's2a_do_work,s2a_work_done = False,False'
1083      Value: begin-gen
1083       Constant: begin-gen
1083        Constant: ctype: 'String' -> '000001'
1083        Constant: expr: 'u"000001"'
1083      <-Value: expr: 'u"000001"'
1083       Constant: end-gen
1083      Value: end-gen
1083      Switch: line: 'if s2a_when == u"000001": s2a_do_work,s2a_work_done = True,True'
1083    <-Source: line: 'if s2a_when == u"000001": s2a_do_work,s2a_work_done = True,True'
1083   <--Function: line: 'if s2a_when == u"000001": s2a_do_work,s2a_work_done = True,True'
1083  <---Source: line: 'if s2a_when == u"000001": s2a_do_work,s2a_work_done = True,True'
1083 <----Class: line: 'if s2a_when == u"000001": s2a_do_work,s2a_work_done = True,True'
1083<-----Source: line: 'if s2a_when == u"000001": s2a_do_work,s2a_work_done = True,True'
1084      Switch: line: 'if s2a_do_work:'
1084    <-Source: line: 'if s2a_do_work:'
1084   <--Function: line: 'if s2a_do_work:'
1084  <---Source: line: 'if s2a_do_work:'
1084 <----Class: line: 'if s2a_do_work:'
1084<-----Source: line: 'if s2a_do_work:'
1085      Switch: begin: 'block-if'
1085    <-Source: begin: 'block-if'
1085   <--Function: begin: 'block-if'
1085  <---Source: begin: 'block-if'
1085 <----Class: begin: 'block-if'
1085<-----Source: begin: 'block-if'
1085      Source: begin-gen
1085       InstructionUpdate: begin-gen
1085        Member: begin-gen
1085         Identifier: begin-gen
1085          Identifier: expr: 'intervalo'
1085         Identifier: end-gen
1085         Identifier: begin-gen
1085          Identifier: expr: 'desde'
1085         Identifier: end-gen
1085         Member: expr: 'intervalo.desde'
1085        Member: end-gen
1085        OpUpdate: begin-gen
1085         OpUpdate: expr: '='
1085        OpUpdate: end-gen
1085        Value: begin-gen
1085         Identifier: begin-gen
1085          Identifier: expr: 'fechaDesde'
1085        <-Value: expr: 'fechaDesde'
1085         Identifier: end-gen
1085        Value: end-gen
1085        InstructionUpdate: line: 'intervalo.desde = fechaDesde'
1085      <-Source: line: 'intervalo.desde = fechaDesde'
1085     <--Switch: line: 'intervalo.desde = fechaDesde'
1085    <---Source: line: 'intervalo.desde = fechaDesde'
1085   <----Function: line: 'intervalo.desde = fechaDesde'
1085  <-----Source: line: 'intervalo.desde = fechaDesde'
1085 <------Class: line: 'intervalo.desde = fechaDesde'
1085<-------Source: line: 'intervalo.desde = fechaDesde'
1086       InstructionUpdate: end-gen
1086       InstructionUpdate: begin-gen
1086        Member: begin-gen
1086         Identifier: begin-gen
1086          Identifier: expr: 'intervalo'
1086         Identifier: end-gen
1086         Identifier: begin-gen
1086          Identifier: expr: 'hasta'
1086         Identifier: end-gen
1086         Member: expr: 'intervalo.hasta'
1086        Member: end-gen
1086        OpUpdate: begin-gen
1086         OpUpdate: expr: '='
1086        OpUpdate: end-gen
1086        Value: begin-gen
1086         Identifier: begin-gen
1086          Identifier: expr: 'fechaHasta'
1086        <-Value: expr: 'fechaHasta'
1086         Identifier: end-gen
1086        Value: end-gen
1086        InstructionUpdate: line: 'intervalo.hasta = fechaHasta'
1086      <-Source: line: 'intervalo.hasta = fechaHasta'
1086     <--Switch: line: 'intervalo.hasta = fechaHasta'
1086    <---Source: line: 'intervalo.hasta = fechaHasta'
1086   <----Function: line: 'intervalo.hasta = fechaHasta'
1086  <-----Source: line: 'intervalo.hasta = fechaHasta'
1086 <------Class: line: 'intervalo.hasta = fechaHasta'
1086<-------Source: line: 'intervalo.hasta = fechaHasta'
1087       InstructionUpdate: end-gen
1087       InstructionFlow: begin-gen
1087        InstructionFlow: break: 'break '
1087      <-Source: break: 'break '
1087     <--Switch: line: 's2a_do_work = False # BREAK'
1087    <---Source: line: 's2a_do_work = False # BREAK'
1087   <----Function: line: 's2a_do_work = False # BREAK'
1087  <-----Source: line: 's2a_do_work = False # BREAK'
1087 <------Class: line: 's2a_do_work = False # BREAK'
1087<-------Source: line: 's2a_do_work = False # BREAK'
1088       InstructionFlow: end-gen
1088      Source: end-gen
1088      Switch: end: 'block-if'
1088    <-Source: end: 'block-if'
1088   <--Function: end: 'block-if'
1088  <---Source: end: 'block-if'
1088 <----Class: end: 'block-if'
1088<-----Source: end: 'block-if'
1088      Value: begin-gen
1088       Constant: begin-gen
1088        Constant: ctype: 'String' -> '000002'
1088        Constant: expr: 'u"000002"'
1088      <-Value: expr: 'u"000002"'
1088       Constant: end-gen
1088      Value: end-gen
1088      Switch: line: 'if s2a_when == u"000002": s2a_do_work,s2a_work_done = True,True'
1088    <-Source: line: 'if s2a_when == u"000002": s2a_do_work,s2a_work_done = True,True'
1088   <--Function: line: 'if s2a_when == u"000002": s2a_do_work,s2a_work_done = True,True'
1088  <---Source: line: 'if s2a_when == u"000002": s2a_do_work,s2a_work_done = True,True'
1088 <----Class: line: 'if s2a_when == u"000002": s2a_do_work,s2a_work_done = True,True'
1088<-----Source: line: 'if s2a_when == u"000002": s2a_do_work,s2a_work_done = True,True'
1089      Switch: line: 'if s2a_do_work:'
1089    <-Source: line: 'if s2a_do_work:'
1089   <--Function: line: 'if s2a_do_work:'
1089  <---Source: line: 'if s2a_do_work:'
1089 <----Class: line: 'if s2a_do_work:'
1089<-----Source: line: 'if s2a_do_work:'
1090      Switch: begin: 'block-if'
1090    <-Source: begin: 'block-if'
1090   <--Function: begin: 'block-if'
1090  <---Source: begin: 'block-if'
1090 <----Class: begin: 'block-if'
1090<-----Source: begin: 'block-if'
1090      Source: begin-gen
1090       InstructionUpdate: begin-gen
1090        Member: begin-gen
1090         Identifier: begin-gen
1090          Identifier: expr: 'intervalo'
1090         Identifier: end-gen
1090         Identifier: begin-gen
1090          Identifier: expr: 'desde'
1090         Identifier: end-gen
1090         Member: expr: 'intervalo.desde'
1090        Member: end-gen
1090        OpUpdate: begin-gen
1090         OpUpdate: expr: '='
1090        OpUpdate: end-gen
1090        Value: begin-gen
1090         Member: begin-gen
1090          Identifier: begin-gen
1090           Identifier: expr: 'util'
1090          Identifier: end-gen
1090          FunctionCall: begin-gen
1090           Value: begin-gen
1090            Identifier: begin-gen
1090             Identifier: expr: 'fechaDesde'
1090           <-Value: expr: 'fechaDesde'
1090            Identifier: end-gen
1090           Value: end-gen
1090           Value: begin-gen
1090            OpUnary: begin-gen
1090             OpUnary: expr: '-'
1090           <-Value: expr: '-'
1090             Constant: begin-gen
1090              Constant: ctype: 'Number' -> '1'
1090              Constant: expr: '1'
1090            <-OpUnary: expr: '1'
1090           <--Value: expr: '1'
1090             Constant: end-gen
1090            OpUnary: end-gen
1090           Value: end-gen
1090           FunctionCall: expr: 'addDays(fechaDesde, - 1)'
1090          FunctionCall: end-gen
1090          Member: expr: 'util.addDays(fechaDesde, - 1)'
1090        <-Value: expr: 'util.addDays(fechaDesde, - 1)'
1090         Member: end-gen
1090        Value: end-gen
1090        InstructionUpdate: line: 'intervalo.desde = util.addDays(fechaDesde, - 1)'
1090      <-Source: line: 'intervalo.desde = util.addDays(fechaDesde, - 1)'
1090     <--Switch: line: 'intervalo.desde = util.addDays(fechaDesde, - 1)'
1090    <---Source: line: 'intervalo.desde = util.addDays(fechaDesde, - 1)'
1090   <----Function: line: 'intervalo.desde = util.addDays(fechaDesde, - 1)'
1090  <-----Source: line: 'intervalo.desde = util.addDays(fechaDesde, - 1)'
1090 <------Class: line: 'intervalo.desde = util.addDays(fechaDesde, - 1)'
1090<-------Source: line: 'intervalo.desde = util.addDays(fechaDesde, - 1)'
1091       InstructionUpdate: end-gen
1091       InstructionUpdate: begin-gen
1091        Member: begin-gen
1091         Identifier: begin-gen
1091          Identifier: expr: 'intervalo'
1091         Identifier: end-gen
1091         Identifier: begin-gen
1091          Identifier: expr: 'hasta'
1091         Identifier: end-gen
1091         Member: expr: 'intervalo.hasta'
1091        Member: end-gen
1091        OpUpdate: begin-gen
1091         OpUpdate: expr: '='
1091        OpUpdate: end-gen
1091        Value: begin-gen
1091         Member: begin-gen
1091          Identifier: begin-gen
1091           Identifier: expr: 'util'
1091          Identifier: end-gen
1091          FunctionCall: begin-gen
1091           Value: begin-gen
1091            Identifier: begin-gen
1091             Identifier: expr: 'fechaHasta'
1091           <-Value: expr: 'fechaHasta'
1091            Identifier: end-gen
1091           Value: end-gen
1091           Value: begin-gen
1091            OpUnary: begin-gen
1091             OpUnary: expr: '-'
1091           <-Value: expr: '-'
1091             Constant: begin-gen
1091              Constant: ctype: 'Number' -> '1'
1091              Constant: expr: '1'
1091            <-OpUnary: expr: '1'
1091           <--Value: expr: '1'
1091             Constant: end-gen
1091            OpUnary: end-gen
1091           Value: end-gen
1091           FunctionCall: expr: 'addDays(fechaHasta, - 1)'
1091          FunctionCall: end-gen
1091          Member: expr: 'util.addDays(fechaHasta, - 1)'
1091        <-Value: expr: 'util.addDays(fechaHasta, - 1)'
1091         Member: end-gen
1091        Value: end-gen
1091        InstructionUpdate: line: 'intervalo.hasta = util.addDays(fechaHasta, - 1)'
1091      <-Source: line: 'intervalo.hasta = util.addDays(fechaHasta, - 1)'
1091     <--Switch: line: 'intervalo.hasta = util.addDays(fechaHasta, - 1)'
1091    <---Source: line: 'intervalo.hasta = util.addDays(fechaHasta, - 1)'
1091   <----Function: line: 'intervalo.hasta = util.addDays(fechaHasta, - 1)'
1091  <-----Source: line: 'intervalo.hasta = util.addDays(fechaHasta, - 1)'
1091 <------Class: line: 'intervalo.hasta = util.addDays(fechaHasta, - 1)'
1091<-------Source: line: 'intervalo.hasta = util.addDays(fechaHasta, - 1)'
1092       InstructionUpdate: end-gen
1092       InstructionFlow: begin-gen
1092        InstructionFlow: break: 'break '
1092      <-Source: break: 'break '
1092     <--Switch: line: 's2a_do_work = False # BREAK'
1092    <---Source: line: 's2a_do_work = False # BREAK'
1092   <----Function: line: 's2a_do_work = False # BREAK'
1092  <-----Source: line: 's2a_do_work = False # BREAK'
1092 <------Class: line: 's2a_do_work = False # BREAK'
1092<-------Source: line: 's2a_do_work = False # BREAK'
1093       InstructionFlow: end-gen
1093      Source: end-gen
1093      Switch: end: 'block-if'
1093    <-Source: end: 'block-if'
1093   <--Function: end: 'block-if'
1093  <---Source: end: 'block-if'
1093 <----Class: end: 'block-if'
1093<-----Source: end: 'block-if'
1093      Value: begin-gen
1093       Constant: begin-gen
1093        Constant: ctype: 'String' -> '000003'
1093        Constant: expr: 'u"000003"'
1093      <-Value: expr: 'u"000003"'
1093       Constant: end-gen
1093      Value: end-gen
1093      Switch: line: 'if s2a_when == u"000003": s2a_do_work,s2a_work_done = True,True'
1093    <-Source: line: 'if s2a_when == u"000003": s2a_do_work,s2a_work_done = True,True'
1093   <--Function: line: 'if s2a_when == u"000003": s2a_do_work,s2a_work_done = True,True'
1093  <---Source: line: 'if s2a_when == u"000003": s2a_do_work,s2a_work_done = True,True'
1093 <----Class: line: 'if s2a_when == u"000003": s2a_do_work,s2a_work_done = True,True'
1093<-----Source: line: 'if s2a_when == u"000003": s2a_do_work,s2a_work_done = True,True'
1094      Switch: line: 'if s2a_do_work:'
1094    <-Source: line: 'if s2a_do_work:'
1094   <--Function: line: 'if s2a_do_work:'
1094  <---Source: line: 'if s2a_do_work:'
1094 <----Class: line: 'if s2a_do_work:'
1094<-----Source: line: 'if s2a_do_work:'
1095      Switch: begin: 'block-if'
1095    <-Source: begin: 'block-if'
1095   <--Function: begin: 'block-if'
1095  <---Source: begin: 'block-if'
1095 <----Class: begin: 'block-if'
1095<-----Source: begin: 'block-if'
1095      Source: begin-gen
1095       DeclarationBlock: begin-gen
1095        Variable: begin-gen
1095         Variable: expr: 'dias'
1095         Variable: expr: '='
1095         Expression: begin-gen
1095          Member: begin-gen
1095           Identifier: begin-gen
1095            Identifier: expr: 'fechaDesde'
1095           Identifier: end-gen
1095           FunctionCall: begin-gen
1095            FunctionCall: expr: 'getDay()'
1095           FunctionCall: end-gen
1095           Member: expr: 'fechaDesde.getDay()'
1095         <-Expression: expr: 'fechaDesde.getDay()'
1095        <--Variable: expr: 'fechaDesde.getDay()'
1095          Member: end-gen
1095          OpMath: begin-gen
1095           OpMath: expr: '-'
1095         <-Expression: expr: '-'
1095        <--Variable: expr: '-'
1095          OpMath: end-gen
1095          Constant: begin-gen
1095           Constant: ctype: 'Number' -> '1'
1095           Constant: expr: '1'
1095         <-Expression: expr: '1'
1095        <--Variable: expr: '1'
1095          Constant: end-gen
1095         Expression: end-gen
1095        Variable: end-gen
1095        DeclarationBlock: line: 'dias = fechaDesde.getDay() - 1'
1095      <-Source: line: 'dias = fechaDesde.getDay() - 1'
1095     <--Switch: line: 'dias = fechaDesde.getDay() - 1'
1095    <---Source: line: 'dias = fechaDesde.getDay() - 1'
1095   <----Function: line: 'dias = fechaDesde.getDay() - 1'
1095  <-----Source: line: 'dias = fechaDesde.getDay() - 1'
1095 <------Class: line: 'dias = fechaDesde.getDay() - 1'
1095<-------Source: line: 'dias = fechaDesde.getDay() - 1'
1096       DeclarationBlock: end-gen
1096       InstructionUpdate: begin-gen
1096        Identifier: begin-gen
1096         Identifier: expr: 'dias'
1096        Identifier: end-gen
1096        OpUpdate: begin-gen
1096         OpUpdate: expr: '='
1096        OpUpdate: end-gen
1096        Expression: begin-gen
1096         Identifier: begin-gen
1096          Identifier: expr: 'dias'
1096        <-Expression: expr: 'dias'
1096         Identifier: end-gen
1096         OpMath: begin-gen
1096          OpMath: expr: '*'
1096        <-Expression: expr: '*'
1096         OpMath: end-gen
1096         OpUnary: begin-gen
1096          OpUnary: expr: '-'
1096        <-Expression: expr: '-'
1096          Constant: begin-gen
1096           Constant: ctype: 'Number' -> '1'
1096           Constant: expr: '1'
1096         <-OpUnary: expr: '1'
1096        <--Expression: expr: '1'
1096          Constant: end-gen
1096         OpUnary: end-gen
1096        Expression: end-gen
1096        InstructionUpdate: line: 'dias = dias * - 1'
1096      <-Source: line: 'dias = dias * - 1'
1096     <--Switch: line: 'dias = dias * - 1'
1096    <---Source: line: 'dias = dias * - 1'
1096   <----Function: line: 'dias = dias * - 1'
1096  <-----Source: line: 'dias = dias * - 1'
1096 <------Class: line: 'dias = dias * - 1'
1096<-------Source: line: 'dias = dias * - 1'
1097       InstructionUpdate: end-gen
1097       InstructionUpdate: begin-gen
1097        Member: begin-gen
1097         Identifier: begin-gen
1097          Identifier: expr: 'intervalo'
1097         Identifier: end-gen
1097         Identifier: begin-gen
1097          Identifier: expr: 'desde'
1097         Identifier: end-gen
1097         Member: expr: 'intervalo.desde'
1097        Member: end-gen
1097        OpUpdate: begin-gen
1097         OpUpdate: expr: '='
1097        OpUpdate: end-gen
1097        Value: begin-gen
1097         Member: begin-gen
1097          Identifier: begin-gen
1097           Identifier: expr: 'util'
1097          Identifier: end-gen
1097          FunctionCall: begin-gen
1097           Value: begin-gen
1097            Identifier: begin-gen
1097             Identifier: expr: 'fechaDesde'
1097           <-Value: expr: 'fechaDesde'
1097            Identifier: end-gen
1097           Value: end-gen
1097           Value: begin-gen
1097            Identifier: begin-gen
1097             Identifier: expr: 'dias'
1097           <-Value: expr: 'dias'
1097            Identifier: end-gen
1097           Value: end-gen
1097           FunctionCall: expr: 'addDays(fechaDesde, dias)'
1097          FunctionCall: end-gen
1097          Member: expr: 'util.addDays(fechaDesde, dias)'
1097        <-Value: expr: 'util.addDays(fechaDesde, dias)'
1097         Member: end-gen
1097        Value: end-gen
1097        InstructionUpdate: line: 'intervalo.desde = util.addDays(fechaDesde, dias)'
1097      <-Source: line: 'intervalo.desde = util.addDays(fechaDesde, dias)'
1097     <--Switch: line: 'intervalo.desde = util.addDays(fechaDesde, dias)'
1097    <---Source: line: 'intervalo.desde = util.addDays(fechaDesde, dias)'
1097   <----Function: line: 'intervalo.desde = util.addDays(fechaDesde, dias)'
1097  <-----Source: line: 'intervalo.desde = util.addDays(fechaDesde, dias)'
1097 <------Class: line: 'intervalo.desde = util.addDays(fechaDesde, dias)'
1097<-------Source: line: 'intervalo.desde = util.addDays(fechaDesde, dias)'
1098       InstructionUpdate: end-gen
1098       InstructionUpdate: begin-gen
1098        Member: begin-gen
1098         Identifier: begin-gen
1098          Identifier: expr: 'intervalo'
1098         Identifier: end-gen
1098         Identifier: begin-gen
1098          Identifier: expr: 'hasta'
1098         Identifier: end-gen
1098         Member: expr: 'intervalo.hasta'
1098        Member: end-gen
1098        OpUpdate: begin-gen
1098         OpUpdate: expr: '='
1098        OpUpdate: end-gen
1098        Value: begin-gen
1098         Member: begin-gen
1098          Identifier: begin-gen
1098           Identifier: expr: 'util'
1098          Identifier: end-gen
1098          FunctionCall: begin-gen
1098           Value: begin-gen
1098            Member: begin-gen
1098             Identifier: begin-gen
1098              Identifier: expr: 'intervalo'
1098             Identifier: end-gen
1098             Identifier: begin-gen
1098              Identifier: expr: 'desde'
1098             Identifier: end-gen
1098             Member: expr: 'intervalo.desde'
1098           <-Value: expr: 'intervalo.desde'
1098            Member: end-gen
1098           Value: end-gen
1098           Value: begin-gen
1098            Constant: begin-gen
1098             Constant: ctype: 'Number' -> '6'
1098             Constant: expr: '6'
1098           <-Value: expr: '6'
1098            Constant: end-gen
1098           Value: end-gen
1098           FunctionCall: expr: 'addDays(intervalo.desde, 6)'
1098          FunctionCall: end-gen
1098          Member: expr: 'util.addDays(intervalo.desde, 6)'
1098        <-Value: expr: 'util.addDays(intervalo.desde, 6)'
1098         Member: end-gen
1098        Value: end-gen
1098        InstructionUpdate: line: 'intervalo.hasta = util.addDays(intervalo.desde, 6)'
1098      <-Source: line: 'intervalo.hasta = util.addDays(intervalo.desde, 6)'
1098     <--Switch: line: 'intervalo.hasta = util.addDays(intervalo.desde, 6)'
1098    <---Source: line: 'intervalo.hasta = util.addDays(intervalo.desde, 6)'
1098   <----Function: line: 'intervalo.hasta = util.addDays(intervalo.desde, 6)'
1098  <-----Source: line: 'intervalo.hasta = util.addDays(intervalo.desde, 6)'
1098 <------Class: line: 'intervalo.hasta = util.addDays(intervalo.desde, 6)'
1098<-------Source: line: 'intervalo.hasta = util.addDays(intervalo.desde, 6)'
1099       InstructionUpdate: end-gen
1099       InstructionFlow: begin-gen
1099        InstructionFlow: break: 'break '
1099      <-Source: break: 'break '
1099     <--Switch: line: 's2a_do_work = False # BREAK'
1099    <---Source: line: 's2a_do_work = False # BREAK'
1099   <----Function: line: 's2a_do_work = False # BREAK'
1099  <-----Source: line: 's2a_do_work = False # BREAK'
1099 <------Class: line: 's2a_do_work = False # BREAK'
1099<-------Source: line: 's2a_do_work = False # BREAK'
1100       InstructionFlow: end-gen
1100      Source: end-gen
1100      Switch: end: 'block-if'
1100    <-Source: end: 'block-if'
1100   <--Function: end: 'block-if'
1100  <---Source: end: 'block-if'
1100 <----Class: end: 'block-if'
1100<-----Source: end: 'block-if'
1100      Value: begin-gen
1100       Constant: begin-gen
1100        Constant: ctype: 'String' -> '000004'
1100        Constant: expr: 'u"000004"'
1100      <-Value: expr: 'u"000004"'
1100       Constant: end-gen
1100      Value: end-gen
1100      Switch: line: 'if s2a_when == u"000004": s2a_do_work,s2a_work_done = True,True'
1100    <-Source: line: 'if s2a_when == u"000004": s2a_do_work,s2a_work_done = True,True'
1100   <--Function: line: 'if s2a_when == u"000004": s2a_do_work,s2a_work_done = True,True'
1100  <---Source: line: 'if s2a_when == u"000004": s2a_do_work,s2a_work_done = True,True'
1100 <----Class: line: 'if s2a_when == u"000004": s2a_do_work,s2a_work_done = True,True'
1100<-----Source: line: 'if s2a_when == u"000004": s2a_do_work,s2a_work_done = True,True'
1102      Switch: line: 'if s2a_do_work:'
1102    <-Source: line: 'if s2a_do_work:'
1102   <--Function: line: 'if s2a_do_work:'
1102  <---Source: line: 'if s2a_do_work:'
1102 <----Class: line: 'if s2a_do_work:'
1102<-----Source: line: 'if s2a_do_work:'
1103      Switch: begin: 'block-if'
1103    <-Source: begin: 'block-if'
1103   <--Function: begin: 'block-if'
1103  <---Source: begin: 'block-if'
1103 <----Class: begin: 'block-if'
1103<-----Source: begin: 'block-if'
1103      Source: begin-gen
1103       DeclarationBlock: begin-gen
1103        Variable: begin-gen
1103         Variable: expr: 'dias'
1103         Variable: expr: '='
1103         Expression: begin-gen
1103          Member: begin-gen
1103           Identifier: begin-gen
1103            Identifier: expr: 'fechaHasta'
1103           Identifier: end-gen
1103           FunctionCall: begin-gen
1103            FunctionCall: expr: 'getDay()'
1103           FunctionCall: end-gen
1103           Member: expr: 'fechaHasta.getDay()'
1103         <-Expression: expr: 'fechaHasta.getDay()'
1103        <--Variable: expr: 'fechaHasta.getDay()'
1103          Member: end-gen
1103          OpMath: begin-gen
1103           OpMath: expr: '-'
1103         <-Expression: expr: '-'
1103        <--Variable: expr: '-'
1103          OpMath: end-gen
1103          Constant: begin-gen
1103           Constant: ctype: 'Number' -> '1'
1103           Constant: expr: '1'
1103         <-Expression: expr: '1'
1103        <--Variable: expr: '1'
1103          Constant: end-gen
1103         Expression: end-gen
1103        Variable: end-gen
1103        DeclarationBlock: line: 'dias = fechaHasta.getDay() - 1'
1103      <-Source: line: 'dias = fechaHasta.getDay() - 1'
1103     <--Switch: line: 'dias = fechaHasta.getDay() - 1'
1103    <---Source: line: 'dias = fechaHasta.getDay() - 1'
1103   <----Function: line: 'dias = fechaHasta.getDay() - 1'
1103  <-----Source: line: 'dias = fechaHasta.getDay() - 1'
1103 <------Class: line: 'dias = fechaHasta.getDay() - 1'
1103<-------Source: line: 'dias = fechaHasta.getDay() - 1'
1104       DeclarationBlock: end-gen
1104       InstructionUpdate: begin-gen
1104        Identifier: begin-gen
1104         Identifier: expr: 'dias'
1104        Identifier: end-gen
1104        OpUpdate: begin-gen
1104         OpUpdate: expr: '='
1104        OpUpdate: end-gen
1104        Expression: begin-gen
1104         Identifier: begin-gen
1104          Identifier: expr: 'dias'
1104        <-Expression: expr: 'dias'
1104         Identifier: end-gen
1104         OpMath: begin-gen
1104          OpMath: expr: '*'
1104        <-Expression: expr: '*'
1104         OpMath: end-gen
1104         OpUnary: begin-gen
1104          OpUnary: expr: '-'
1104        <-Expression: expr: '-'
1104          Constant: begin-gen
1104           Constant: ctype: 'Number' -> '1'
1104           Constant: expr: '1'
1104         <-OpUnary: expr: '1'
1104        <--Expression: expr: '1'
1104          Constant: end-gen
1104         OpUnary: end-gen
1104        Expression: end-gen
1104        InstructionUpdate: line: 'dias = dias * - 1'
1104      <-Source: line: 'dias = dias * - 1'
1104     <--Switch: line: 'dias = dias * - 1'
1104    <---Source: line: 'dias = dias * - 1'
1104   <----Function: line: 'dias = dias * - 1'
1104  <-----Source: line: 'dias = dias * - 1'
1104 <------Class: line: 'dias = dias * - 1'
1104<-------Source: line: 'dias = dias * - 1'
1105       InstructionUpdate: end-gen
1105       InstructionUpdate: begin-gen
1105        Member: begin-gen
1105         Identifier: begin-gen
1105          Identifier: expr: 'intervalo'
1105         Identifier: end-gen
1105         Identifier: begin-gen
1105          Identifier: expr: 'hasta'
1105         Identifier: end-gen
1105         Member: expr: 'intervalo.hasta'
1105        Member: end-gen
1105        OpUpdate: begin-gen
1105         OpUpdate: expr: '='
1105        OpUpdate: end-gen
1105        Value: begin-gen
1105         Member: begin-gen
1105          Identifier: begin-gen
1105           Identifier: expr: 'util'
1105          Identifier: end-gen
1105          FunctionCall: begin-gen
1105           Value: begin-gen
1105            Identifier: begin-gen
1105             Identifier: expr: 'fechaHasta'
1105           <-Value: expr: 'fechaHasta'
1105            Identifier: end-gen
1105           Value: end-gen
1105           Expression: begin-gen
1105            Identifier: begin-gen
1105             Identifier: expr: 'dias'
1105           <-Expression: expr: 'dias'
1105            Identifier: end-gen
1105            OpMath: begin-gen
1105             OpMath: expr: '-'
1105           <-Expression: expr: '-'
1105            OpMath: end-gen
1105            Constant: begin-gen
1105             Constant: ctype: 'Number' -> '1'
1105             Constant: expr: '1'
1105           <-Expression: expr: '1'
1105            Constant: end-gen
1105           Expression: end-gen
1105           FunctionCall: expr: 'addDays(fechaHasta, dias - 1)'
1105          FunctionCall: end-gen
1105          Member: expr: 'util.addDays(fechaHasta, dias - 1)'
1105        <-Value: expr: 'util.addDays(fechaHasta, dias - 1)'
1105         Member: end-gen
1105        Value: end-gen
1105        InstructionUpdate: line: 'intervalo.hasta = util.addDays(fechaHasta, dias - 1)'
1105      <-Source: line: 'intervalo.hasta = util.addDays(fechaHasta, dias - 1)'
1105     <--Switch: line: 'intervalo.hasta = util.addDays(fechaHasta, dias - 1)'
1105    <---Source: line: 'intervalo.hasta = util.addDays(fechaHasta, dias - 1)'
1105   <----Function: line: 'intervalo.hasta = util.addDays(fechaHasta, dias - 1)'
1105  <-----Source: line: 'intervalo.hasta = util.addDays(fechaHasta, dias - 1)'
1105 <------Class: line: 'intervalo.hasta = util.addDays(fechaHasta, dias - 1)'
1105<-------Source: line: 'intervalo.hasta = util.addDays(fechaHasta, dias - 1)'
1106       InstructionUpdate: end-gen
1106       InstructionUpdate: begin-gen
1106        Member: begin-gen
1106         Identifier: begin-gen
1106          Identifier: expr: 'intervalo'
1106         Identifier: end-gen
1106         Identifier: begin-gen
1106          Identifier: expr: 'desde'
1106         Identifier: end-gen
1106         Member: expr: 'intervalo.desde'
1106        Member: end-gen
1106        OpUpdate: begin-gen
1106         OpUpdate: expr: '='
1106        OpUpdate: end-gen
1106        Value: begin-gen
1106         Member: begin-gen
1106          Identifier: begin-gen
1106           Identifier: expr: 'util'
1106          Identifier: end-gen
1106          FunctionCall: begin-gen
1106           Value: begin-gen
1106            Member: begin-gen
1106             Identifier: begin-gen
1106              Identifier: expr: 'intervalo'
1106             Identifier: end-gen
1106             Identifier: begin-gen
1106              Identifier: expr: 'hasta'
1106             Identifier: end-gen
1106             Member: expr: 'intervalo.hasta'
1106           <-Value: expr: 'intervalo.hasta'
1106            Member: end-gen
1106           Value: end-gen
1106           Value: begin-gen
1106            OpUnary: begin-gen
1106             OpUnary: expr: '-'
1106           <-Value: expr: '-'
1106             Constant: begin-gen
1106              Constant: ctype: 'Number' -> '6'
1106              Constant: expr: '6'
1106            <-OpUnary: expr: '6'
1106           <--Value: expr: '6'
1106             Constant: end-gen
1106            OpUnary: end-gen
1106           Value: end-gen
1106           FunctionCall: expr: 'addDays(intervalo.hasta, - 6)'
1106          FunctionCall: end-gen
1106          Member: expr: 'util.addDays(intervalo.hasta, - 6)'
1106        <-Value: expr: 'util.addDays(intervalo.hasta, - 6)'
1106         Member: end-gen
1106        Value: end-gen
1106        InstructionUpdate: line: 'intervalo.desde = util.addDays(intervalo.hasta, - 6)'
1106      <-Source: line: 'intervalo.desde = util.addDays(intervalo.hasta, - 6)'
1106     <--Switch: line: 'intervalo.desde = util.addDays(intervalo.hasta, - 6)'
1106    <---Source: line: 'intervalo.desde = util.addDays(intervalo.hasta, - 6)'
1106   <----Function: line: 'intervalo.desde = util.addDays(intervalo.hasta, - 6)'
1106  <-----Source: line: 'intervalo.desde = util.addDays(intervalo.hasta, - 6)'
1106 <------Class: line: 'intervalo.desde = util.addDays(intervalo.hasta, - 6)'
1106<-------Source: line: 'intervalo.desde = util.addDays(intervalo.hasta, - 6)'
1107       InstructionUpdate: end-gen
1107       InstructionFlow: begin-gen
1107        InstructionFlow: break: 'break '
1107      <-Source: break: 'break '
1107     <--Switch: line: 's2a_do_work = False # BREAK'
1107    <---Source: line: 's2a_do_work = False # BREAK'
1107   <----Function: line: 's2a_do_work = False # BREAK'
1107  <-----Source: line: 's2a_do_work = False # BREAK'
1107 <------Class: line: 's2a_do_work = False # BREAK'
1107<-------Source: line: 's2a_do_work = False # BREAK'
1108       InstructionFlow: end-gen
1108      Source: end-gen
1108      Switch: end: 'block-if'
1108    <-Source: end: 'block-if'
1108   <--Function: end: 'block-if'
1108  <---Source: end: 'block-if'
1108 <----Class: end: 'block-if'
1108<-----Source: end: 'block-if'
1108      Value: begin-gen
1108       Constant: begin-gen
1108        Constant: ctype: 'String' -> '000005'
1108        Constant: expr: 'u"000005"'
1108      <-Value: expr: 'u"000005"'
1108       Constant: end-gen
1108      Value: end-gen
1108      Switch: line: 'if s2a_when == u"000005": s2a_do_work,s2a_work_done = True,True'
1108    <-Source: line: 'if s2a_when == u"000005": s2a_do_work,s2a_work_done = True,True'
1108   <--Function: line: 'if s2a_when == u"000005": s2a_do_work,s2a_work_done = True,True'
1108  <---Source: line: 'if s2a_when == u"000005": s2a_do_work,s2a_work_done = True,True'
1108 <----Class: line: 'if s2a_when == u"000005": s2a_do_work,s2a_work_done = True,True'
1108<-----Source: line: 'if s2a_when == u"000005": s2a_do_work,s2a_work_done = True,True'
1110      Switch: line: 'if s2a_do_work:'
1110    <-Source: line: 'if s2a_do_work:'
1110   <--Function: line: 'if s2a_do_work:'
1110  <---Source: line: 'if s2a_do_work:'
1110 <----Class: line: 'if s2a_do_work:'
1110<-----Source: line: 'if s2a_do_work:'
1111      Switch: begin: 'block-if'
1111    <-Source: begin: 'block-if'
1111   <--Function: begin: 'block-if'
1111  <---Source: begin: 'block-if'
1111 <----Class: begin: 'block-if'
1111<-----Source: begin: 'block-if'
1111      Source: begin-gen
1111       InstructionUpdate: begin-gen
1111        Identifier: begin-gen
1111         Identifier: expr: 'mes'
1111        Identifier: end-gen
1111        OpUpdate: begin-gen
1111         OpUpdate: expr: '='
1111        OpUpdate: end-gen
1111        Value: begin-gen
1111         Member: begin-gen
1111          Identifier: begin-gen
1111           Identifier: expr: 'fechaDesde'
1111          Identifier: end-gen
1111          FunctionCall: begin-gen
1111           FunctionCall: expr: 'getMonth()'
1111          FunctionCall: end-gen
1111          Member: expr: 'fechaDesde.getMonth()'
1111        <-Value: expr: 'fechaDesde.getMonth()'
1111         Member: end-gen
1111        Value: end-gen
1111        InstructionUpdate: line: 'mes = fechaDesde.getMonth()'
1111      <-Source: line: 'mes = fechaDesde.getMonth()'
1111     <--Switch: line: 'mes = fechaDesde.getMonth()'
1111    <---Source: line: 'mes = fechaDesde.getMonth()'
1111   <----Function: line: 'mes = fechaDesde.getMonth()'
1111  <-----Source: line: 'mes = fechaDesde.getMonth()'
1111 <------Class: line: 'mes = fechaDesde.getMonth()'
1111<-------Source: line: 'mes = fechaDesde.getMonth()'
1112       InstructionUpdate: end-gen
1112       InstructionCall: begin-gen
1112        Member: begin-gen
1112         Identifier: begin-gen
1112          Identifier: expr: 'fechaDesde'
1112         Identifier: end-gen
1112         FunctionCall: begin-gen
1112          Value: begin-gen
1112           Constant: begin-gen
1112            Constant: ctype: 'Number' -> '1'
1112            Constant: expr: '1'
1112          <-Value: expr: '1'
1112           Constant: end-gen
1112          Value: end-gen
1112          FunctionCall: expr: 'setDate(1)'
1112         FunctionCall: end-gen
1112         Member: expr: 'fechaDesde.setDate(1)'
1112        Member: end-gen
1112        InstructionCall: line: 'fechaDesde.setDate(1)'
1112      <-Source: line: 'fechaDesde.setDate(1)'
1112     <--Switch: line: 'fechaDesde.setDate(1)'
1112    <---Source: line: 'fechaDesde.setDate(1)'
1112   <----Function: line: 'fechaDesde.setDate(1)'
1112  <-----Source: line: 'fechaDesde.setDate(1)'
1112 <------Class: line: 'fechaDesde.setDate(1)'
1112<-------Source: line: 'fechaDesde.setDate(1)'
1113       InstructionCall: end-gen
1113       InstructionUpdate: begin-gen
1113        Member: begin-gen
1113         Identifier: begin-gen
1113          Identifier: expr: 'intervalo'
1113         Identifier: end-gen
1113         Identifier: begin-gen
1113          Identifier: expr: 'desde'
1113         Identifier: end-gen
1113         Member: expr: 'intervalo.desde'
1113        Member: end-gen
1113        OpUpdate: begin-gen
1113         OpUpdate: expr: '='
1113        OpUpdate: end-gen
1113        Value: begin-gen
1113         Identifier: begin-gen
1113          Identifier: expr: 'fechaDesde'
1113        <-Value: expr: 'fechaDesde'
1113         Identifier: end-gen
1113        Value: end-gen
1113        InstructionUpdate: line: 'intervalo.desde = fechaDesde'
1113      <-Source: line: 'intervalo.desde = fechaDesde'
1113     <--Switch: line: 'intervalo.desde = fechaDesde'
1113    <---Source: line: 'intervalo.desde = fechaDesde'
1113   <----Function: line: 'intervalo.desde = fechaDesde'
1113  <-----Source: line: 'intervalo.desde = fechaDesde'
1113 <------Class: line: 'intervalo.desde = fechaDesde'
1113<-------Source: line: 'intervalo.desde = fechaDesde'
1114       InstructionUpdate: end-gen
1114       InstructionCall: begin-gen
1114        Member: begin-gen
1114         Identifier: begin-gen
1114          Identifier: expr: 'fechaHasta'
1114         Identifier: end-gen
1114         FunctionCall: begin-gen
1114          Value: begin-gen
1114           Constant: begin-gen
1114            Constant: ctype: 'Number' -> '1'
1114            Constant: expr: '1'
1114          <-Value: expr: '1'
1114           Constant: end-gen
1114          Value: end-gen
1114          FunctionCall: expr: 'setDate(1)'
1114         FunctionCall: end-gen
1114         Member: expr: 'fechaHasta.setDate(1)'
1114        Member: end-gen
1114        InstructionCall: line: 'fechaHasta.setDate(1)'
1114      <-Source: line: 'fechaHasta.setDate(1)'
1114     <--Switch: line: 'fechaHasta.setDate(1)'
1114    <---Source: line: 'fechaHasta.setDate(1)'
1114   <----Function: line: 'fechaHasta.setDate(1)'
1114  <-----Source: line: 'fechaHasta.setDate(1)'
1114 <------Class: line: 'fechaHasta.setDate(1)'
1114<-------Source: line: 'fechaHasta.setDate(1)'
1115       InstructionCall: end-gen
1115       InstructionUpdate: begin-gen
1115        Identifier: begin-gen
1115         Identifier: expr: 'fechaHasta'
1115        Identifier: end-gen
1115        OpUpdate: begin-gen
1115         OpUpdate: expr: '='
1115        OpUpdate: end-gen
1115        Value: begin-gen
1115         Member: begin-gen
1115          Identifier: begin-gen
1115           Identifier: expr: 'util'
1115          Identifier: end-gen
1115          FunctionCall: begin-gen
1115           Value: begin-gen
1115            Identifier: begin-gen
1115             Identifier: expr: 'fechaHasta'
1115           <-Value: expr: 'fechaHasta'
1115            Identifier: end-gen
1115           Value: end-gen
1115           Value: begin-gen
1115            Constant: begin-gen
1115             Constant: ctype: 'Number' -> '1'
1115             Constant: expr: '1'
1115           <-Value: expr: '1'
1115            Constant: end-gen
1115           Value: end-gen
1115           FunctionCall: expr: 'addMonths(fechaHasta, 1)'
1115          FunctionCall: end-gen
1115          Member: expr: 'util.addMonths(fechaHasta, 1)'
1115        <-Value: expr: 'util.addMonths(fechaHasta, 1)'
1115         Member: end-gen
1115        Value: end-gen
1115        InstructionUpdate: line: 'fechaHasta = util.addMonths(fechaHasta, 1)'
1115      <-Source: line: 'fechaHasta = util.addMonths(fechaHasta, 1)'
1115     <--Switch: line: 'fechaHasta = util.addMonths(fechaHasta, 1)'
1115    <---Source: line: 'fechaHasta = util.addMonths(fechaHasta, 1)'
1115   <----Function: line: 'fechaHasta = util.addMonths(fechaHasta, 1)'
1115  <-----Source: line: 'fechaHasta = util.addMonths(fechaHasta, 1)'
1115 <------Class: line: 'fechaHasta = util.addMonths(fechaHasta, 1)'
1115<-------Source: line: 'fechaHasta = util.addMonths(fechaHasta, 1)'
1116       InstructionUpdate: end-gen
1116       Instruction: begin-gen
1116       Instruction: end-gen
1116       InstructionUpdate: begin-gen
1116        Identifier: begin-gen
1116         Identifier: expr: 'fechaHasta'
1116        Identifier: end-gen
1116        OpUpdate: begin-gen
1116         OpUpdate: expr: '='
1116        OpUpdate: end-gen
1116        Value: begin-gen
1116         Member: begin-gen
1116          Identifier: begin-gen
1116           Identifier: expr: 'util'
1116          Identifier: end-gen
1116          FunctionCall: begin-gen
1116           Value: begin-gen
1116            Identifier: begin-gen
1116             Identifier: expr: 'fechaHasta'
1116           <-Value: expr: 'fechaHasta'
1116            Identifier: end-gen
1116           Value: end-gen
1116           Value: begin-gen
1116            OpUnary: begin-gen
1116             OpUnary: expr: '-'
1116           <-Value: expr: '-'
1116             Constant: begin-gen
1116              Constant: ctype: 'Number' -> '1'
1116              Constant: expr: '1'
1116            <-OpUnary: expr: '1'
1116           <--Value: expr: '1'
1116             Constant: end-gen
1116            OpUnary: end-gen
1116           Value: end-gen
1116           FunctionCall: expr: 'addDays(fechaHasta, - 1)'
1116          FunctionCall: end-gen
1116          Member: expr: 'util.addDays(fechaHasta, - 1)'
1116        <-Value: expr: 'util.addDays(fechaHasta, - 1)'
1116         Member: end-gen
1116        Value: end-gen
1116        InstructionUpdate: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1116      <-Source: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1116     <--Switch: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1116    <---Source: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1116   <----Function: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1116  <-----Source: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1116 <------Class: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1116<-------Source: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1117       InstructionUpdate: end-gen
1117       InstructionUpdate: begin-gen
1117        Member: begin-gen
1117         Identifier: begin-gen
1117          Identifier: expr: 'intervalo'
1117         Identifier: end-gen
1117         Identifier: begin-gen
1117          Identifier: expr: 'hasta'
1117         Identifier: end-gen
1117         Member: expr: 'intervalo.hasta'
1117        Member: end-gen
1117        OpUpdate: begin-gen
1117         OpUpdate: expr: '='
1117        OpUpdate: end-gen
1117        Value: begin-gen
1117         Identifier: begin-gen
1117          Identifier: expr: 'fechaHasta'
1117        <-Value: expr: 'fechaHasta'
1117         Identifier: end-gen
1117        Value: end-gen
1117        InstructionUpdate: line: 'intervalo.hasta = fechaHasta'
1117      <-Source: line: 'intervalo.hasta = fechaHasta'
1117     <--Switch: line: 'intervalo.hasta = fechaHasta'
1117    <---Source: line: 'intervalo.hasta = fechaHasta'
1117   <----Function: line: 'intervalo.hasta = fechaHasta'
1117  <-----Source: line: 'intervalo.hasta = fechaHasta'
1117 <------Class: line: 'intervalo.hasta = fechaHasta'
1117<-------Source: line: 'intervalo.hasta = fechaHasta'
1118       InstructionUpdate: end-gen
1118       InstructionFlow: begin-gen
1118        InstructionFlow: break: 'break '
1118      <-Source: break: 'break '
1118     <--Switch: line: 's2a_do_work = False # BREAK'
1118    <---Source: line: 's2a_do_work = False # BREAK'
1118   <----Function: line: 's2a_do_work = False # BREAK'
1118  <-----Source: line: 's2a_do_work = False # BREAK'
1118 <------Class: line: 's2a_do_work = False # BREAK'
1118<-------Source: line: 's2a_do_work = False # BREAK'
1119       InstructionFlow: end-gen
1119      Source: end-gen
1119      Switch: end: 'block-if'
1119    <-Source: end: 'block-if'
1119   <--Function: end: 'block-if'
1119  <---Source: end: 'block-if'
1119 <----Class: end: 'block-if'
1119<-----Source: end: 'block-if'
1119      Value: begin-gen
1119       Constant: begin-gen
1119        Constant: ctype: 'String' -> '000006'
1119        Constant: expr: 'u"000006"'
1119      <-Value: expr: 'u"000006"'
1119       Constant: end-gen
1119      Value: end-gen
1119      Switch: line: 'if s2a_when == u"000006": s2a_do_work,s2a_work_done = True,True'
1119    <-Source: line: 'if s2a_when == u"000006": s2a_do_work,s2a_work_done = True,True'
1119   <--Function: line: 'if s2a_when == u"000006": s2a_do_work,s2a_work_done = True,True'
1119  <---Source: line: 'if s2a_when == u"000006": s2a_do_work,s2a_work_done = True,True'
1119 <----Class: line: 'if s2a_when == u"000006": s2a_do_work,s2a_work_done = True,True'
1119<-----Source: line: 'if s2a_when == u"000006": s2a_do_work,s2a_work_done = True,True'
1121      Switch: line: 'if s2a_do_work:'
1121    <-Source: line: 'if s2a_do_work:'
1121   <--Function: line: 'if s2a_do_work:'
1121  <---Source: line: 'if s2a_do_work:'
1121 <----Class: line: 'if s2a_do_work:'
1121<-----Source: line: 'if s2a_do_work:'
1122      Switch: begin: 'block-if'
1122    <-Source: begin: 'block-if'
1122   <--Function: begin: 'block-if'
1122  <---Source: begin: 'block-if'
1122 <----Class: begin: 'block-if'
1122<-----Source: begin: 'block-if'
1122      Source: begin-gen
1122       InstructionCall: begin-gen
1122        Member: begin-gen
1122         Identifier: begin-gen
1122          Identifier: expr: 'fechaDesde'
1122         Identifier: end-gen
1122         FunctionCall: begin-gen
1122          Value: begin-gen
1122           Constant: begin-gen
1122            Constant: ctype: 'Number' -> '1'
1122            Constant: expr: '1'
1122          <-Value: expr: '1'
1122           Constant: end-gen
1122          Value: end-gen
1122          FunctionCall: expr: 'setDate(1)'
1122         FunctionCall: end-gen
1122         Member: expr: 'fechaDesde.setDate(1)'
1122        Member: end-gen
1122        InstructionCall: line: 'fechaDesde.setDate(1)'
1122      <-Source: line: 'fechaDesde.setDate(1)'
1122     <--Switch: line: 'fechaDesde.setDate(1)'
1122    <---Source: line: 'fechaDesde.setDate(1)'
1122   <----Function: line: 'fechaDesde.setDate(1)'
1122  <-----Source: line: 'fechaDesde.setDate(1)'
1122 <------Class: line: 'fechaDesde.setDate(1)'
1122<-------Source: line: 'fechaDesde.setDate(1)'
1123       InstructionCall: end-gen
1123       InstructionUpdate: begin-gen
1123        Identifier: begin-gen
1123         Identifier: expr: 'fechaDesde'
1123        Identifier: end-gen
1123        OpUpdate: begin-gen
1123         OpUpdate: expr: '='
1123        OpUpdate: end-gen
1123        Value: begin-gen
1123         Member: begin-gen
1123          Identifier: begin-gen
1123           Identifier: expr: 'util'
1123          Identifier: end-gen
1123          FunctionCall: begin-gen
1123           Value: begin-gen
1123            Identifier: begin-gen
1123             Identifier: expr: 'fechaDesde'
1123           <-Value: expr: 'fechaDesde'
1123            Identifier: end-gen
1123           Value: end-gen
1123           Value: begin-gen
1123            OpUnary: begin-gen
1123             OpUnary: expr: '-'
1123           <-Value: expr: '-'
1123             Constant: begin-gen
1123              Constant: ctype: 'Number' -> '1'
1123              Constant: expr: '1'
1123            <-OpUnary: expr: '1'
1123           <--Value: expr: '1'
1123             Constant: end-gen
1123            OpUnary: end-gen
1123           Value: end-gen
1123           FunctionCall: expr: 'addMonths(fechaDesde, - 1)'
1123          FunctionCall: end-gen
1123          Member: expr: 'util.addMonths(fechaDesde, - 1)'
1123        <-Value: expr: 'util.addMonths(fechaDesde, - 1)'
1123         Member: end-gen
1123        Value: end-gen
1123        InstructionUpdate: line: 'fechaDesde = util.addMonths(fechaDesde, - 1)'
1123      <-Source: line: 'fechaDesde = util.addMonths(fechaDesde, - 1)'
1123     <--Switch: line: 'fechaDesde = util.addMonths(fechaDesde, - 1)'
1123    <---Source: line: 'fechaDesde = util.addMonths(fechaDesde, - 1)'
1123   <----Function: line: 'fechaDesde = util.addMonths(fechaDesde, - 1)'
1123  <-----Source: line: 'fechaDesde = util.addMonths(fechaDesde, - 1)'
1123 <------Class: line: 'fechaDesde = util.addMonths(fechaDesde, - 1)'
1123<-------Source: line: 'fechaDesde = util.addMonths(fechaDesde, - 1)'
1124       InstructionUpdate: end-gen
1124       InstructionUpdate: begin-gen
1124        Member: begin-gen
1124         Identifier: begin-gen
1124          Identifier: expr: 'intervalo'
1124         Identifier: end-gen
1124         Identifier: begin-gen
1124          Identifier: expr: 'desde'
1124         Identifier: end-gen
1124         Member: expr: 'intervalo.desde'
1124        Member: end-gen
1124        OpUpdate: begin-gen
1124         OpUpdate: expr: '='
1124        OpUpdate: end-gen
1124        Value: begin-gen
1124         Identifier: begin-gen
1124          Identifier: expr: 'fechaDesde'
1124        <-Value: expr: 'fechaDesde'
1124         Identifier: end-gen
1124        Value: end-gen
1124        InstructionUpdate: line: 'intervalo.desde = fechaDesde'
1124      <-Source: line: 'intervalo.desde = fechaDesde'
1124     <--Switch: line: 'intervalo.desde = fechaDesde'
1124    <---Source: line: 'intervalo.desde = fechaDesde'
1124   <----Function: line: 'intervalo.desde = fechaDesde'
1124  <-----Source: line: 'intervalo.desde = fechaDesde'
1124 <------Class: line: 'intervalo.desde = fechaDesde'
1124<-------Source: line: 'intervalo.desde = fechaDesde'
1125       InstructionUpdate: end-gen
1125       InstructionCall: begin-gen
1125        Member: begin-gen
1125         Identifier: begin-gen
1125          Identifier: expr: 'fechaHasta'
1125         Identifier: end-gen
1125         FunctionCall: begin-gen
1125          Value: begin-gen
1125           Constant: begin-gen
1125            Constant: ctype: 'Number' -> '1'
1125            Constant: expr: '1'
1125          <-Value: expr: '1'
1125           Constant: end-gen
1125          Value: end-gen
1125          FunctionCall: expr: 'setDate(1)'
1125         FunctionCall: end-gen
1125         Member: expr: 'fechaHasta.setDate(1)'
1125        Member: end-gen
1125        InstructionCall: line: 'fechaHasta.setDate(1)'
1125      <-Source: line: 'fechaHasta.setDate(1)'
1125     <--Switch: line: 'fechaHasta.setDate(1)'
1125    <---Source: line: 'fechaHasta.setDate(1)'
1125   <----Function: line: 'fechaHasta.setDate(1)'
1125  <-----Source: line: 'fechaHasta.setDate(1)'
1125 <------Class: line: 'fechaHasta.setDate(1)'
1125<-------Source: line: 'fechaHasta.setDate(1)'
1126       InstructionCall: end-gen
1126       InstructionUpdate: begin-gen
1126        Identifier: begin-gen
1126         Identifier: expr: 'fechaHasta'
1126        Identifier: end-gen
1126        OpUpdate: begin-gen
1126         OpUpdate: expr: '='
1126        OpUpdate: end-gen
1126        Value: begin-gen
1126         Member: begin-gen
1126          Identifier: begin-gen
1126           Identifier: expr: 'util'
1126          Identifier: end-gen
1126          FunctionCall: begin-gen
1126           Value: begin-gen
1126            Identifier: begin-gen
1126             Identifier: expr: 'fechaHasta'
1126           <-Value: expr: 'fechaHasta'
1126            Identifier: end-gen
1126           Value: end-gen
1126           Value: begin-gen
1126            OpUnary: begin-gen
1126             OpUnary: expr: '-'
1126           <-Value: expr: '-'
1126             Constant: begin-gen
1126              Constant: ctype: 'Number' -> '1'
1126              Constant: expr: '1'
1126            <-OpUnary: expr: '1'
1126           <--Value: expr: '1'
1126             Constant: end-gen
1126            OpUnary: end-gen
1126           Value: end-gen
1126           FunctionCall: expr: 'addDays(fechaHasta, - 1)'
1126          FunctionCall: end-gen
1126          Member: expr: 'util.addDays(fechaHasta, - 1)'
1126        <-Value: expr: 'util.addDays(fechaHasta, - 1)'
1126         Member: end-gen
1126        Value: end-gen
1126        InstructionUpdate: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1126      <-Source: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1126     <--Switch: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1126    <---Source: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1126   <----Function: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1126  <-----Source: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1126 <------Class: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1126<-------Source: line: 'fechaHasta = util.addDays(fechaHasta, - 1)'
1127       InstructionUpdate: end-gen
1127       InstructionUpdate: begin-gen
1127        Member: begin-gen
1127         Identifier: begin-gen
1127          Identifier: expr: 'intervalo'
1127         Identifier: end-gen
1127         Identifier: begin-gen
1127          Identifier: expr: 'hasta'
1127         Identifier: end-gen
1127         Member: expr: 'intervalo.hasta'
1127        Member: end-gen
1127        OpUpdate: begin-gen
1127         OpUpdate: expr: '='
1127        OpUpdate: end-gen
1127        Value: begin-gen
1127         Identifier: begin-gen
1127          Identifier: expr: 'fechaHasta'
1127        <-Value: expr: 'fechaHasta'
1127         Identifier: end-gen
1127        Value: end-gen
1127        InstructionUpdate: line: 'intervalo.hasta = fechaHasta'
1127      <-Source: line: 'intervalo.hasta = fechaHasta'
1127     <--Switch: line: 'intervalo.hasta = fechaHasta'
1127    <---Source: line: 'intervalo.hasta = fechaHasta'
1127   <----Function: line: 'intervalo.hasta = fechaHasta'
1127  <-----Source: line: 'intervalo.hasta = fechaHasta'
1127 <------Class: line: 'intervalo.hasta = fechaHasta'
1127<-------Source: line: 'intervalo.hasta = fechaHasta'
1128       InstructionUpdate: end-gen
1128       InstructionFlow: begin-gen
1128        InstructionFlow: break: 'break '
1128      <-Source: break: 'break '
1128     <--Switch: line: 's2a_do_work = False # BREAK'
1128    <---Source: line: 's2a_do_work = False # BREAK'
1128   <----Function: line: 's2a_do_work = False # BREAK'
1128  <-----Source: line: 's2a_do_work = False # BREAK'
1128 <------Class: line: 's2a_do_work = False # BREAK'
1128<-------Source: line: 's2a_do_work = False # BREAK'
1129       InstructionFlow: end-gen
1129      Source: end-gen
1129      Switch: end: 'block-if'
1129    <-Source: end: 'block-if'
1129   <--Function: end: 'block-if'
1129  <---Source: end: 'block-if'
1129 <----Class: end: 'block-if'
1129<-----Source: end: 'block-if'
1129      Value: begin-gen
1129       Constant: begin-gen
1129        Constant: ctype: 'String' -> '000007'
1129        Constant: expr: 'u"000007"'
1129      <-Value: expr: 'u"000007"'
1129       Constant: end-gen
1129      Value: end-gen
1129      Switch: line: 'if s2a_when == u"000007": s2a_do_work,s2a_work_done = True,True'
1129    <-Source: line: 'if s2a_when == u"000007": s2a_do_work,s2a_work_done = True,True'
1129   <--Function: line: 'if s2a_when == u"000007": s2a_do_work,s2a_work_done = True,True'
1129  <---Source: line: 'if s2a_when == u"000007": s2a_do_work,s2a_work_done = True,True'
1129 <----Class: line: 'if s2a_when == u"000007": s2a_do_work,s2a_work_done = True,True'
1129<-----Source: line: 'if s2a_when == u"000007": s2a_do_work,s2a_work_done = True,True'
1131      Switch: line: 'if s2a_do_work:'
1131    <-Source: line: 'if s2a_do_work:'
1131   <--Function: line: 'if s2a_do_work:'
1131  <---Source: line: 'if s2a_do_work:'
1131 <----Class: line: 'if s2a_do_work:'
1131<-----Source: line: 'if s2a_do_work:'
1132      Switch: begin: 'block-if'
1132    <-Source: begin: 'block-if'
1132   <--Function: begin: 'block-if'
1132  <---Source: begin: 'block-if'
1132 <----Class: begin: 'block-if'
1132<-----Source: begin: 'block-if'
1132      Source: begin-gen
1132       InstructionCall: begin-gen
1132        Member: begin-gen
1132         Identifier: begin-gen
1132          Identifier: expr: 'fechaDesde'
1132         Identifier: end-gen
1132         FunctionCall: begin-gen
1132          Value: begin-gen
1132           Constant: begin-gen
1132            Constant: ctype: 'Number' -> '1'
1132            Constant: expr: '1'
1132          <-Value: expr: '1'
1132           Constant: end-gen
1132          Value: end-gen
1132          FunctionCall: expr: 'setDate(1)'
1132         FunctionCall: end-gen
1132         Member: expr: 'fechaDesde.setDate(1)'
1132        Member: end-gen
1132        InstructionCall: line: 'fechaDesde.setDate(1)'
1132      <-Source: line: 'fechaDesde.setDate(1)'
1132     <--Switch: line: 'fechaDesde.setDate(1)'
1132    <---Source: line: 'fechaDesde.setDate(1)'
1132   <----Function: line: 'fechaDesde.setDate(1)'
1132  <-----Source: line: 'fechaDesde.setDate(1)'
1132 <------Class: line: 'fechaDesde.setDate(1)'
1132<-------Source: line: 'fechaDesde.setDate(1)'
1133       InstructionCall: end-gen
1133       InstructionCall: begin-gen
1133        Member: begin-gen
1133         Identifier: begin-gen
1133          Identifier: expr: 'fechaDesde'
1133         Identifier: end-gen
1133         FunctionCall: begin-gen
1133          Value: begin-gen
1133           Constant: begin-gen
1133            Constant: ctype: 'Number' -> '1'
1133            Constant: expr: '1'
1133          <-Value: expr: '1'
1133           Constant: end-gen
1133          Value: end-gen
1133          FunctionCall: expr: 'setMonth(1)'
1133         FunctionCall: end-gen
1133         Member: expr: 'fechaDesde.setMonth(1)'
1133        Member: end-gen
1133        InstructionCall: line: 'fechaDesde.setMonth(1)'
1133      <-Source: line: 'fechaDesde.setMonth(1)'
1133     <--Switch: line: 'fechaDesde.setMonth(1)'
1133    <---Source: line: 'fechaDesde.setMonth(1)'
1133   <----Function: line: 'fechaDesde.setMonth(1)'
1133  <-----Source: line: 'fechaDesde.setMonth(1)'
1133 <------Class: line: 'fechaDesde.setMonth(1)'
1133<-------Source: line: 'fechaDesde.setMonth(1)'
1134       InstructionCall: end-gen
1134       InstructionUpdate: begin-gen
1134        Member: begin-gen
1134         Identifier: begin-gen
1134          Identifier: expr: 'intervalo'
1134         Identifier: end-gen
1134         Identifier: begin-gen
1134          Identifier: expr: 'desde'
1134         Identifier: end-gen
1134         Member: expr: 'intervalo.desde'
1134        Member: end-gen
1134        OpUpdate: begin-gen
1134         OpUpdate: expr: '='
1134        OpUpdate: end-gen
1134        Value: begin-gen
1134         Identifier: begin-gen
1134          Identifier: expr: 'fechaDesde'
1134        <-Value: expr: 'fechaDesde'
1134         Identifier: end-gen
1134        Value: end-gen
1134        InstructionUpdate: line: 'intervalo.desde = fechaDesde'
1134      <-Source: line: 'intervalo.desde = fechaDesde'
1134     <--Switch: line: 'intervalo.desde = fechaDesde'
1134    <---Source: line: 'intervalo.desde = fechaDesde'
1134   <----Function: line: 'intervalo.desde = fechaDesde'
1134  <-----Source: line: 'intervalo.desde = fechaDesde'
1134 <------Class: line: 'intervalo.desde = fechaDesde'
1134<-------Source: line: 'intervalo.desde = fechaDesde'
1135       InstructionUpdate: end-gen
1135       InstructionCall: begin-gen
1135        Member: begin-gen
1135         Identifier: begin-gen
1135          Identifier: expr: 'fechaHasta'
1135         Identifier: end-gen
1135         FunctionCall: begin-gen
1135          Value: begin-gen
1135           Constant: begin-gen
1135            Constant: ctype: 'Number' -> '12'
1135            Constant: expr: '12'
1135          <-Value: expr: '12'
1135           Constant: end-gen
1135          Value: end-gen
1135          FunctionCall: expr: 'setMonth(12)'
1135         FunctionCall: end-gen
1135         Member: expr: 'fechaHasta.setMonth(12)'
1135        Member: end-gen
1135        InstructionCall: line: 'fechaHasta.setMonth(12)'
1135      <-Source: line: 'fechaHasta.setMonth(12)'
1135     <--Switch: line: 'fechaHasta.setMonth(12)'
1135    <---Source: line: 'fechaHasta.setMonth(12)'
1135   <----Function: line: 'fechaHasta.setMonth(12)'
1135  <-----Source: line: 'fechaHasta.setMonth(12)'
1135 <------Class: line: 'fechaHasta.setMonth(12)'
1135<-------Source: line: 'fechaHasta.setMonth(12)'
1136       InstructionCall: end-gen
1136       InstructionCall: begin-gen
1136        Member: begin-gen
1136         Identifier: begin-gen
1136          Identifier: expr: 'fechaHasta'
1136         Identifier: end-gen
1136         FunctionCall: begin-gen
1136          Value: begin-gen
1136           Constant: begin-gen
1136            Constant: ctype: 'Number' -> '31'
1136            Constant: expr: '31'
1136          <-Value: expr: '31'
1136           Constant: end-gen
1136          Value: end-gen
1136          FunctionCall: expr: 'setDate(31)'
1136         FunctionCall: end-gen
1136         Member: expr: 'fechaHasta.setDate(31)'
1136        Member: end-gen
1136        InstructionCall: line: 'fechaHasta.setDate(31)'
1136      <-Source: line: 'fechaHasta.setDate(31)'
1136     <--Switch: line: 'fechaHasta.setDate(31)'
1136    <---Source: line: 'fechaHasta.setDate(31)'
1136   <----Function: line: 'fechaHasta.setDate(31)'
1136  <-----Source: line: 'fechaHasta.setDate(31)'
1136 <------Class: line: 'fechaHasta.setDate(31)'
1136<-------Source: line: 'fechaHasta.setDate(31)'
1137       InstructionCall: end-gen
1137       InstructionUpdate: begin-gen
1137        Member: begin-gen
1137         Identifier: begin-gen
1137          Identifier: expr: 'intervalo'
1137         Identifier: end-gen
1137         Identifier: begin-gen
1137          Identifier: expr: 'hasta'
1137         Identifier: end-gen
1137         Member: expr: 'intervalo.hasta'
1137        Member: end-gen
1137        OpUpdate: begin-gen
1137         OpUpdate: expr: '='
1137        OpUpdate: end-gen
1137        Value: begin-gen
1137         Identifier: begin-gen
1137          Identifier: expr: 'fechaHasta'
1137        <-Value: expr: 'fechaHasta'
1137         Identifier: end-gen
1137        Value: end-gen
1137        InstructionUpdate: line: 'intervalo.hasta = fechaHasta'
1137      <-Source: line: 'intervalo.hasta = fechaHasta'
1137     <--Switch: line: 'intervalo.hasta = fechaHasta'
1137    <---Source: line: 'intervalo.hasta = fechaHasta'
1137   <----Function: line: 'intervalo.hasta = fechaHasta'
1137  <-----Source: line: 'intervalo.hasta = fechaHasta'
1137 <------Class: line: 'intervalo.hasta = fechaHasta'
1137<-------Source: line: 'intervalo.hasta = fechaHasta'
1138       InstructionUpdate: end-gen
1138       InstructionFlow: begin-gen
1138        InstructionFlow: break: 'break '
1138      <-Source: break: 'break '
1138     <--Switch: line: 's2a_do_work = False # BREAK'
1138    <---Source: line: 's2a_do_work = False # BREAK'
1138   <----Function: line: 's2a_do_work = False # BREAK'
1138  <-----Source: line: 's2a_do_work = False # BREAK'
1138 <------Class: line: 's2a_do_work = False # BREAK'
1138<-------Source: line: 's2a_do_work = False # BREAK'
1139       InstructionFlow: end-gen
1139      Source: end-gen
1139      Switch: end: 'block-if'
1139    <-Source: end: 'block-if'
1139   <--Function: end: 'block-if'
1139  <---Source: end: 'block-if'
1139 <----Class: end: 'block-if'
1139<-----Source: end: 'block-if'
1139      Value: begin-gen
1139       Constant: begin-gen
1139        Constant: ctype: 'String' -> '000008'
1139        Constant: expr: 'u"000008"'
1139      <-Value: expr: 'u"000008"'
1139       Constant: end-gen
1139      Value: end-gen
1139      Switch: line: 'if s2a_when == u"000008": s2a_do_work,s2a_work_done = True,True'
1139    <-Source: line: 'if s2a_when == u"000008": s2a_do_work,s2a_work_done = True,True'
1139   <--Function: line: 'if s2a_when == u"000008": s2a_do_work,s2a_work_done = True,True'
1139  <---Source: line: 'if s2a_when == u"000008": s2a_do_work,s2a_work_done = True,True'
1139 <----Class: line: 'if s2a_when == u"000008": s2a_do_work,s2a_work_done = True,True'
1139<-----Source: line: 'if s2a_when == u"000008": s2a_do_work,s2a_work_done = True,True'
1141      Switch: line: 'if s2a_do_work:'
1141    <-Source: line: 'if s2a_do_work:'
1141   <--Function: line: 'if s2a_do_work:'
1141  <---Source: line: 'if s2a_do_work:'
1141 <----Class: line: 'if s2a_do_work:'
1141<-----Source: line: 'if s2a_do_work:'
1142      Switch: begin: 'block-if'
1142    <-Source: begin: 'block-if'
1142   <--Function: begin: 'block-if'
1142  <---Source: begin: 'block-if'
1142 <----Class: begin: 'block-if'
1142<-----Source: begin: 'block-if'
1142      Source: begin-gen
1142       InstructionUpdate: begin-gen
1142        Identifier: begin-gen
1142         Identifier: expr: 'anio'
1142        Identifier: end-gen
1142        OpUpdate: begin-gen
1142         OpUpdate: expr: '='
1142        OpUpdate: end-gen
1142        Expression: begin-gen
1142         Member: begin-gen
1142          Identifier: begin-gen
1142           Identifier: expr: 'fechaDesde'
1142          Identifier: end-gen
1142          FunctionCall: begin-gen
1142           FunctionCall: expr: 'getYear()'
1142          FunctionCall: end-gen
1142          Member: expr: 'fechaDesde.getYear()'
1142        <-Expression: expr: 'fechaDesde.getYear()'
1142         Member: end-gen
1142         OpMath: begin-gen
1142          OpMath: expr: '-'
1142        <-Expression: expr: '-'
1142         OpMath: end-gen
1142         Constant: begin-gen
1142          Constant: ctype: 'Number' -> '1'
1142          Constant: expr: '1'
1142        <-Expression: expr: '1'
1142         Constant: end-gen
1142        Expression: end-gen
1142        InstructionUpdate: line: 'anio = fechaDesde.getYear() - 1'
1142      <-Source: line: 'anio = fechaDesde.getYear() - 1'
1142     <--Switch: line: 'anio = fechaDesde.getYear() - 1'
1142    <---Source: line: 'anio = fechaDesde.getYear() - 1'
1142   <----Function: line: 'anio = fechaDesde.getYear() - 1'
1142  <-----Source: line: 'anio = fechaDesde.getYear() - 1'
1142 <------Class: line: 'anio = fechaDesde.getYear() - 1'
1142<-------Source: line: 'anio = fechaDesde.getYear() - 1'
1143       InstructionUpdate: end-gen
1143       InstructionCall: begin-gen
1143        Member: begin-gen
1143         Identifier: begin-gen
1143          Identifier: expr: 'fechaDesde'
1143         Identifier: end-gen
1143         FunctionCall: begin-gen
1143          Value: begin-gen
1143           Constant: begin-gen
1143            Constant: ctype: 'Number' -> '1'
1143            Constant: expr: '1'
1143          <-Value: expr: '1'
1143           Constant: end-gen
1143          Value: end-gen
1143          FunctionCall: expr: 'setDate(1)'
1143         FunctionCall: end-gen
1143         Member: expr: 'fechaDesde.setDate(1)'
1143        Member: end-gen
1143        InstructionCall: line: 'fechaDesde.setDate(1)'
1143      <-Source: line: 'fechaDesde.setDate(1)'
1143     <--Switch: line: 'fechaDesde.setDate(1)'
1143    <---Source: line: 'fechaDesde.setDate(1)'
1143   <----Function: line: 'fechaDesde.setDate(1)'
1143  <-----Source: line: 'fechaDesde.setDate(1)'
1143 <------Class: line: 'fechaDesde.setDate(1)'
1143<-------Source: line: 'fechaDesde.setDate(1)'
1144       InstructionCall: end-gen
1144       InstructionCall: begin-gen
1144        Member: begin-gen
1144         Identifier: begin-gen
1144          Identifier: expr: 'fechaDesde'
1144         Identifier: end-gen
1144         FunctionCall: begin-gen
1144          Value: begin-gen
1144           Constant: begin-gen
1144            Constant: ctype: 'Number' -> '1'
1144            Constant: expr: '1'
1144          <-Value: expr: '1'
1144           Constant: end-gen
1144          Value: end-gen
1144          FunctionCall: expr: 'setMonth(1)'
1144         FunctionCall: end-gen
1144         Member: expr: 'fechaDesde.setMonth(1)'
1144        Member: end-gen
1144        InstructionCall: line: 'fechaDesde.setMonth(1)'
1144      <-Source: line: 'fechaDesde.setMonth(1)'
1144     <--Switch: line: 'fechaDesde.setMonth(1)'
1144    <---Source: line: 'fechaDesde.setMonth(1)'
1144   <----Function: line: 'fechaDesde.setMonth(1)'
1144  <-----Source: line: 'fechaDesde.setMonth(1)'
1144 <------Class: line: 'fechaDesde.setMonth(1)'
1144<-------Source: line: 'fechaDesde.setMonth(1)'
1145       InstructionCall: end-gen
1145       InstructionCall: begin-gen
1145        Member: begin-gen
1145         Identifier: begin-gen
1145          Identifier: expr: 'fechaDesde'
1145         Identifier: end-gen
1145         FunctionCall: begin-gen
1145          Value: begin-gen
1145           Identifier: begin-gen
1145            Identifier: expr: 'anio'
1145          <-Value: expr: 'anio'
1145           Identifier: end-gen
1145          Value: end-gen
1145          FunctionCall: expr: 'setYear(anio)'
1145         FunctionCall: end-gen
1145         Member: expr: 'fechaDesde.setYear(anio)'
1145        Member: end-gen
1145        InstructionCall: line: 'fechaDesde.setYear(anio)'
1145      <-Source: line: 'fechaDesde.setYear(anio)'
1145     <--Switch: line: 'fechaDesde.setYear(anio)'
1145    <---Source: line: 'fechaDesde.setYear(anio)'
1145   <----Function: line: 'fechaDesde.setYear(anio)'
1145  <-----Source: line: 'fechaDesde.setYear(anio)'
1145 <------Class: line: 'fechaDesde.setYear(anio)'
1145<-------Source: line: 'fechaDesde.setYear(anio)'
1146       InstructionCall: end-gen
1146       InstructionUpdate: begin-gen
1146        Member: begin-gen
1146         Identifier: begin-gen
1146          Identifier: expr: 'intervalo'
1146         Identifier: end-gen
1146         Identifier: begin-gen
1146          Identifier: expr: 'desde'
1146         Identifier: end-gen
1146         Member: expr: 'intervalo.desde'
1146        Member: end-gen
1146        OpUpdate: begin-gen
1146         OpUpdate: expr: '='
1146        OpUpdate: end-gen
1146        Value: begin-gen
1146         Identifier: begin-gen
1146          Identifier: expr: 'fechaDesde'
1146        <-Value: expr: 'fechaDesde'
1146         Identifier: end-gen
1146        Value: end-gen
1146        InstructionUpdate: line: 'intervalo.desde = fechaDesde'
1146      <-Source: line: 'intervalo.desde = fechaDesde'
1146     <--Switch: line: 'intervalo.desde = fechaDesde'
1146    <---Source: line: 'intervalo.desde = fechaDesde'
1146   <----Function: line: 'intervalo.desde = fechaDesde'
1146  <-----Source: line: 'intervalo.desde = fechaDesde'
1146 <------Class: line: 'intervalo.desde = fechaDesde'
1146<-------Source: line: 'intervalo.desde = fechaDesde'
1147       InstructionUpdate: end-gen
1147       InstructionCall: begin-gen
1147        Member: begin-gen
1147         Identifier: begin-gen
1147          Identifier: expr: 'fechaHasta'
1147         Identifier: end-gen
1147         FunctionCall: begin-gen
1147          Value: begin-gen
1147           Constant: begin-gen
1147            Constant: ctype: 'Number' -> '12'
1147            Constant: expr: '12'
1147          <-Value: expr: '12'
1147           Constant: end-gen
1147          Value: end-gen
1147          FunctionCall: expr: 'setMonth(12)'
1147         FunctionCall: end-gen
1147         Member: expr: 'fechaHasta.setMonth(12)'
1147        Member: end-gen
1147        InstructionCall: line: 'fechaHasta.setMonth(12)'
1147      <-Source: line: 'fechaHasta.setMonth(12)'
1147     <--Switch: line: 'fechaHasta.setMonth(12)'
1147    <---Source: line: 'fechaHasta.setMonth(12)'
1147   <----Function: line: 'fechaHasta.setMonth(12)'
1147  <-----Source: line: 'fechaHasta.setMonth(12)'
1147 <------Class: line: 'fechaHasta.setMonth(12)'
1147<-------Source: line: 'fechaHasta.setMonth(12)'
1148       InstructionCall: end-gen
1148       InstructionCall: begin-gen
1148        Member: begin-gen
1148         Identifier: begin-gen
1148          Identifier: expr: 'fechaHasta'
1148         Identifier: end-gen
1148         FunctionCall: begin-gen
1148          Value: begin-gen
1148           Constant: begin-gen
1148            Constant: ctype: 'Number' -> '31'
1148            Constant: expr: '31'
1148          <-Value: expr: '31'
1148           Constant: end-gen
1148          Value: end-gen
1148          FunctionCall: expr: 'setDate(31)'
1148         FunctionCall: end-gen
1148         Member: expr: 'fechaHasta.setDate(31)'
1148        Member: end-gen
1148        InstructionCall: line: 'fechaHasta.setDate(31)'
1148      <-Source: line: 'fechaHasta.setDate(31)'
1148     <--Switch: line: 'fechaHasta.setDate(31)'
1148    <---Source: line: 'fechaHasta.setDate(31)'
1148   <----Function: line: 'fechaHasta.setDate(31)'
1148  <-----Source: line: 'fechaHasta.setDate(31)'
1148 <------Class: line: 'fechaHasta.setDate(31)'
1148<-------Source: line: 'fechaHasta.setDate(31)'
1149       InstructionCall: end-gen
1149       InstructionCall: begin-gen
1149        Member: begin-gen
1149         Identifier: begin-gen
1149          Identifier: expr: 'fechaHasta'
1149         Identifier: end-gen
1149         FunctionCall: begin-gen
1149          Value: begin-gen
1149           Identifier: begin-gen
1149            Identifier: expr: 'anio'
1149          <-Value: expr: 'anio'
1149           Identifier: end-gen
1149          Value: end-gen
1149          FunctionCall: expr: 'setYear(anio)'
1149         FunctionCall: end-gen
1149         Member: expr: 'fechaHasta.setYear(anio)'
1149        Member: end-gen
1149        InstructionCall: line: 'fechaHasta.setYear(anio)'
1149      <-Source: line: 'fechaHasta.setYear(anio)'
1149     <--Switch: line: 'fechaHasta.setYear(anio)'
1149    <---Source: line: 'fechaHasta.setYear(anio)'
1149   <----Function: line: 'fechaHasta.setYear(anio)'
1149  <-----Source: line: 'fechaHasta.setYear(anio)'
1149 <------Class: line: 'fechaHasta.setYear(anio)'
1149<-------Source: line: 'fechaHasta.setYear(anio)'
1150       InstructionCall: end-gen
1150       InstructionUpdate: begin-gen
1150        Member: begin-gen
1150         Identifier: begin-gen
1150          Identifier: expr: 'intervalo'
1150         Identifier: end-gen
1150         Identifier: begin-gen
1150          Identifier: expr: 'hasta'
1150         Identifier: end-gen
1150         Member: expr: 'intervalo.hasta'
1150        Member: end-gen
1150        OpUpdate: begin-gen
1150         OpUpdate: expr: '='
1150        OpUpdate: end-gen
1150        Value: begin-gen
1150         Identifier: begin-gen
1150          Identifier: expr: 'fechaHasta'
1150        <-Value: expr: 'fechaHasta'
1150         Identifier: end-gen
1150        Value: end-gen
1150        InstructionUpdate: line: 'intervalo.hasta = fechaHasta'
1150      <-Source: line: 'intervalo.hasta = fechaHasta'
1150     <--Switch: line: 'intervalo.hasta = fechaHasta'
1150    <---Source: line: 'intervalo.hasta = fechaHasta'
1150   <----Function: line: 'intervalo.hasta = fechaHasta'
1150  <-----Source: line: 'intervalo.hasta = fechaHasta'
1150 <------Class: line: 'intervalo.hasta = fechaHasta'
1150<-------Source: line: 'intervalo.hasta = fechaHasta'
1151       InstructionUpdate: end-gen
1151       InstructionFlow: begin-gen
1151        InstructionFlow: break: 'break '
1151      <-Source: break: 'break '
1151     <--Switch: line: 's2a_do_work = False # BREAK'
1151    <---Source: line: 's2a_do_work = False # BREAK'
1151   <----Function: line: 's2a_do_work = False # BREAK'
1151  <-----Source: line: 's2a_do_work = False # BREAK'
1151 <------Class: line: 's2a_do_work = False # BREAK'
1151<-------Source: line: 's2a_do_work = False # BREAK'
1152       InstructionFlow: end-gen
1152      Source: end-gen
1152      Switch: end: 'block-if'
1152    <-Source: end: 'block-if'
1152   <--Function: end: 'block-if'
1152  <---Source: end: 'block-if'
1152 <----Class: end: 'block-if'
1152<-----Source: end: 'block-if'
1152      Value: begin-gen
1152       Constant: begin-gen
1152        Constant: ctype: 'String' -> '000009'
1152        Constant: expr: 'u"000009"'
1152      <-Value: expr: 'u"000009"'
1152       Constant: end-gen
1152      Value: end-gen
1152      Switch: line: 'if s2a_when == u"000009": s2a_do_work,s2a_work_done = True,True'
1152    <-Source: line: 'if s2a_when == u"000009": s2a_do_work,s2a_work_done = True,True'
1152   <--Function: line: 'if s2a_when == u"000009": s2a_do_work,s2a_work_done = True,True'
1152  <---Source: line: 'if s2a_when == u"000009": s2a_do_work,s2a_work_done = True,True'
1152 <----Class: line: 'if s2a_when == u"000009": s2a_do_work,s2a_work_done = True,True'
1152<-----Source: line: 'if s2a_when == u"000009": s2a_do_work,s2a_work_done = True,True'
1154      Switch: line: 'if s2a_do_work:'
1154    <-Source: line: 'if s2a_do_work:'
1154   <--Function: line: 'if s2a_do_work:'
1154  <---Source: line: 'if s2a_do_work:'
1154 <----Class: line: 'if s2a_do_work:'
1154<-----Source: line: 'if s2a_do_work:'
1155      Switch: begin: 'block-if'
1155    <-Source: begin: 'block-if'
1155   <--Function: begin: 'block-if'
1155  <---Source: begin: 'block-if'
1155 <----Class: begin: 'block-if'
1155<-----Source: begin: 'block-if'
1155      Source: begin-gen
1155       InstructionUpdate: begin-gen
1155        Member: begin-gen
1155         Identifier: begin-gen
1155          Identifier: expr: 'intervalo'
1155         Identifier: end-gen
1155         Identifier: begin-gen
1155          Identifier: expr: 'desde'
1155         Identifier: end-gen
1155         Member: expr: 'intervalo.desde'
1155        Member: end-gen
1155        OpUpdate: begin-gen
1155         OpUpdate: expr: '='
1155        OpUpdate: end-gen
1155        Value: begin-gen
1155         Constant: begin-gen
1155          Constant: ctype: 'String' -> '1970-01-01'
1155          Constant: expr: 'u"1970-01-01"'
1155        <-Value: expr: 'u"1970-01-01"'
1155         Constant: end-gen
1155        Value: end-gen
1155        InstructionUpdate: line: 'intervalo.desde = u"1970-01-01"'
1155      <-Source: line: 'intervalo.desde = u"1970-01-01"'
1155     <--Switch: line: 'intervalo.desde = u"1970-01-01"'
1155    <---Source: line: 'intervalo.desde = u"1970-01-01"'
1155   <----Function: line: 'intervalo.desde = u"1970-01-01"'
1155  <-----Source: line: 'intervalo.desde = u"1970-01-01"'
1155 <------Class: line: 'intervalo.desde = u"1970-01-01"'
1155<-------Source: line: 'intervalo.desde = u"1970-01-01"'
1156       InstructionUpdate: end-gen
1156       InstructionUpdate: begin-gen
1156        Member: begin-gen
1156         Identifier: begin-gen
1156          Identifier: expr: 'intervalo'
1156         Identifier: end-gen
1156         Identifier: begin-gen
1156          Identifier: expr: 'hasta'
1156         Identifier: end-gen
1156         Member: expr: 'intervalo.hasta'
1156        Member: end-gen
1156        OpUpdate: begin-gen
1156         OpUpdate: expr: '='
1156        OpUpdate: end-gen
1156        Value: begin-gen
1156         Constant: begin-gen
1156          Constant: ctype: 'String' -> '3000-01-01'
1156          Constant: expr: 'u"3000-01-01"'
1156        <-Value: expr: 'u"3000-01-01"'
1156         Constant: end-gen
1156        Value: end-gen
1156        InstructionUpdate: line: 'intervalo.hasta = u"3000-01-01"'
1156      <-Source: line: 'intervalo.hasta = u"3000-01-01"'
1156     <--Switch: line: 'intervalo.hasta = u"3000-01-01"'
1156    <---Source: line: 'intervalo.hasta = u"3000-01-01"'
1156   <----Function: line: 'intervalo.hasta = u"3000-01-01"'
1156  <-----Source: line: 'intervalo.hasta = u"3000-01-01"'
1156 <------Class: line: 'intervalo.hasta = u"3000-01-01"'
1156<-------Source: line: 'intervalo.hasta = u"3000-01-01"'
1157       InstructionUpdate: end-gen
1157       InstructionFlow: begin-gen
1157        InstructionFlow: break: 'break '
1157      <-Source: break: 'break '
1157     <--Switch: line: 's2a_do_work = False # BREAK'
1157    <---Source: line: 's2a_do_work = False # BREAK'
1157   <----Function: line: 's2a_do_work = False # BREAK'
1157  <-----Source: line: 's2a_do_work = False # BREAK'
1157 <------Class: line: 's2a_do_work = False # BREAK'
1157<-------Source: line: 's2a_do_work = False # BREAK'
1158       InstructionFlow: end-gen
1158      Source: end-gen
1158      Switch: end: 'block-if'
1158    <-Source: end: 'block-if'
1158   <--Function: end: 'block-if'
1158  <---Source: end: 'block-if'
1158 <----Class: end: 'block-if'
1158<-----Source: end: 'block-if'
1158      Value: begin-gen
1158       Constant: begin-gen
1158        Constant: ctype: 'String' -> '000010'
1158        Constant: expr: 'u"000010"'
1158      <-Value: expr: 'u"000010"'
1158       Constant: end-gen
1158      Value: end-gen
1158      Switch: line: 'if s2a_when == u"000010": s2a_do_work,s2a_work_done = True,True'
1158    <-Source: line: 'if s2a_when == u"000010": s2a_do_work,s2a_work_done = True,True'
1158   <--Function: line: 'if s2a_when == u"000010": s2a_do_work,s2a_work_done = True,True'
1158  <---Source: line: 'if s2a_when == u"000010": s2a_do_work,s2a_work_done = True,True'
1158 <----Class: line: 'if s2a_when == u"000010": s2a_do_work,s2a_work_done = True,True'
1158<-----Source: line: 'if s2a_when == u"000010": s2a_do_work,s2a_work_done = True,True'
1159      Switch: line: 'if s2a_do_work:'
1159    <-Source: line: 'if s2a_do_work:'
1159   <--Function: line: 'if s2a_do_work:'
1159  <---Source: line: 'if s2a_do_work:'
1159 <----Class: line: 'if s2a_do_work:'
1159<-----Source: line: 'if s2a_do_work:'
1160      Switch: begin: 'block-if'
1160    <-Source: begin: 'block-if'
1160   <--Function: begin: 'block-if'
1160  <---Source: begin: 'block-if'
1160 <----Class: begin: 'block-if'
1160<-----Source: begin: 'block-if'
1160      Source: begin-gen
1160       InstructionUpdate: begin-gen
1160        Member: begin-gen
1160         Identifier: begin-gen
1160          Identifier: expr: 'intervalo'
1160         Identifier: end-gen
1160         Identifier: begin-gen
1160          Identifier: expr: 'desde'
1160         Identifier: end-gen
1160         Member: expr: 'intervalo.desde'
1160        Member: end-gen
1160        OpUpdate: begin-gen
1160         OpUpdate: expr: '='
1160        OpUpdate: end-gen
1160        Value: begin-gen
1160         Constant: begin-gen
1160          Constant: ctype: 'String' -> '1970-01-01'
1160          Constant: expr: 'u"1970-01-01"'
1160        <-Value: expr: 'u"1970-01-01"'
1160         Constant: end-gen
1160        Value: end-gen
1160        InstructionUpdate: line: 'intervalo.desde = u"1970-01-01"'
1160      <-Source: line: 'intervalo.desde = u"1970-01-01"'
1160     <--Switch: line: 'intervalo.desde = u"1970-01-01"'
1160    <---Source: line: 'intervalo.desde = u"1970-01-01"'
1160   <----Function: line: 'intervalo.desde = u"1970-01-01"'
1160  <-----Source: line: 'intervalo.desde = u"1970-01-01"'
1160 <------Class: line: 'intervalo.desde = u"1970-01-01"'
1160<-------Source: line: 'intervalo.desde = u"1970-01-01"'
1161       InstructionUpdate: end-gen
1161       InstructionUpdate: begin-gen
1161        Member: begin-gen
1161         Identifier: begin-gen
1161          Identifier: expr: 'intervalo'
1161         Identifier: end-gen
1161         Identifier: begin-gen
1161          Identifier: expr: 'hasta'
1161         Identifier: end-gen
1161         Member: expr: 'intervalo.hasta'
1161        Member: end-gen
1161        OpUpdate: begin-gen
1161         OpUpdate: expr: '='
1161        OpUpdate: end-gen
1161        Value: begin-gen
1161         Identifier: begin-gen
1161          Identifier: expr: 'fechaHasta'
1161        <-Value: expr: 'fechaHasta'
1161         Identifier: end-gen
1161        Value: end-gen
1161        InstructionUpdate: line: 'intervalo.hasta = fechaHasta'
1161      <-Source: line: 'intervalo.hasta = fechaHasta'
1161     <--Switch: line: 'intervalo.hasta = fechaHasta'
1161    <---Source: line: 'intervalo.hasta = fechaHasta'
1161   <----Function: line: 'intervalo.hasta = fechaHasta'
1161  <-----Source: line: 'intervalo.hasta = fechaHasta'
1161 <------Class: line: 'intervalo.hasta = fechaHasta'
1161<-------Source: line: 'intervalo.hasta = fechaHasta'
1162       InstructionUpdate: end-gen
1162       InstructionFlow: begin-gen
1162        InstructionFlow: break: 'break '
1162      <-Source: break: 'break '
1162     <--Switch: line: 's2a_do_work = False # BREAK'
1162    <---Source: line: 's2a_do_work = False # BREAK'
1162   <----Function: line: 's2a_do_work = False # BREAK'
1162  <-----Source: line: 's2a_do_work = False # BREAK'
1162 <------Class: line: 's2a_do_work = False # BREAK'
1162<-------Source: line: 's2a_do_work = False # BREAK'
1163       InstructionFlow: end-gen
1163      Source: end-gen
1163      Switch: end: 'block-if'
1163    <-Source: end: 'block-if'
1163   <--Function: end: 'block-if'
1163  <---Source: end: 'block-if'
1163 <----Class: end: 'block-if'
1163<-----Source: end: 'block-if'
1163     Switch: end-gen
1163     InstructionFlow: begin-gen
1163      Value: begin-gen
1163       Identifier: begin-gen
1163        Identifier: expr: 'intervalo'
1163      <-Value: expr: 'intervalo'
1163       Identifier: end-gen
1163      Value: end-gen
1163      InstructionFlow: line: 'return intervalo'
1163    <-Source: line: 'return intervalo'
1163   <--Function: line: 'return intervalo'
1163  <---Source: line: 'return intervalo'
1163 <----Class: line: 'return intervalo'
1163<-----Source: line: 'return intervalo'
1164     InstructionFlow: end-gen
1164    Source: end-gen
1164    Function: end: 'block-def-oficial_calcularIntervalo'
1164  <-Source: end: 'block-def-oficial_calcularIntervalo'
1164 <--Class: end: 'block-def-oficial_calcularIntervalo'
1164<---Source: end: 'block-def-oficial_calcularIntervalo'
1165   Function: end-gen
1165   Function: begin-gen
1165    Variable: begin-gen
1165     Variable: expr: 'codSubcuenta'
1165    Variable: end-gen
1165    Variable: begin-gen
1165     Variable: expr: 'idSubcuenta'
1165    Variable: end-gen
1165    Variable: begin-gen
1165     Variable: expr: 'codCliente'
1165    Variable: end-gen
1165    Variable: begin-gen
1165     Variable: expr: 'codEjercicio'
1165    Variable: end-gen
1165    Function: line: 'def oficial_crearSubcuentaCli(self, codSubcuenta = None, idSubcuenta = None, codCliente = None, codEjercicio = None):'
1165  <-Source: line: 'def oficial_crearSubcuentaCli(self, codSubcuenta = None, idSubcuenta = None, codCliente = None, codEjercicio = None):'
1165 <--Class: line: 'def oficial_crearSubcuentaCli(self, codSubcuenta = None, idSubcuenta = None, codCliente = None, codEjercicio = None):'
1165<---Source: line: 'def oficial_crearSubcuentaCli(self, codSubcuenta = None, idSubcuenta = None, codCliente = None, codEjercicio = None):'
1166    Function: begin: 'block-def-oficial_crearSubcuentaCli'
1166  <-Source: begin: 'block-def-oficial_crearSubcuentaCli'
1166 <--Class: begin: 'block-def-oficial_crearSubcuentaCli'
1166<---Source: begin: 'block-def-oficial_crearSubcuentaCli'
1166    Source: begin-gen
1166     DeclarationBlock: begin-gen
1166      Variable: begin-gen
1166       Variable: expr: 'curSubcuentaCli'
1166       Variable: expr: '='
1166       Value: begin-gen
1166        New: begin-gen
1166         FunctionCall: begin-gen
1166          Value: begin-gen
1166           Constant: begin-gen
1166            Constant: ctype: 'String' -> 'co_subcuentascli'
1166            Constant: expr: 'u"co_subcuentascli"'
1166          <-Value: expr: 'u"co_subcuentascli"'
1166           Constant: end-gen
1166          Value: end-gen
1166          FunctionCall: expr: 'FLSqlCursor(u"co_subcuentascli")'
1166        <-New: expr: 'qsatype.FLSqlCursor(u"co_subcuentascli")'
1166       <--Value: expr: 'qsatype.FLSqlCursor(u"co_subcuentascli")'
1166      <---Variable: expr: 'qsatype.FLSqlCursor(u"co_subcuentascli")'
1166         FunctionCall: end-gen
1166        New: end-gen
1166       Value: end-gen
1166      Variable: end-gen
1166      DeclarationBlock: line: 'curSubcuentaCli = qsatype.FLSqlCursor(u"co_subcuentascli")'
1166    <-Source: line: 'curSubcuentaCli = qsatype.FLSqlCursor(u"co_subcuentascli")'
1166   <--Function: line: 'curSubcuentaCli = qsatype.FLSqlCursor(u"co_subcuentascli")'
1166  <---Source: line: 'curSubcuentaCli = qsatype.FLSqlCursor(u"co_subcuentascli")'
1166 <----Class: line: 'curSubcuentaCli = qsatype.FLSqlCursor(u"co_subcuentascli")'
1166<-----Source: line: 'curSubcuentaCli = qsatype.FLSqlCursor(u"co_subcuentascli")'
1167     DeclarationBlock: end-gen
1167     With: begin-gen
1167      Identifier: begin-gen
1167       Identifier: expr: 'curSubcuentaCli'
1167      Identifier: end-gen
1167      With: line: ' #WITH_START'
1167    <-Source: line: ' #WITH_START'
1167   <--Function: line: ' #WITH_START'
1167  <---Source: line: ' #WITH_START'
1167 <----Class: line: ' #WITH_START'
1167<-----Source: line: ' #WITH_START'
1168      Source: begin-gen
1168       InstructionCall: begin-gen
1168        FunctionCall: begin-gen
1168         Value: begin-gen
1168          Member: begin-gen
1168           Identifier: begin-gen
1168            Identifier: expr: 'curSubcuentaCli'
1168           Identifier: end-gen
1168           Identifier: begin-gen
1168            Identifier: expr: 'Insert'
1168           Identifier: end-gen
1168           Member: expr: 'curSubcuentaCli.Insert'
1168         <-Value: expr: 'curSubcuentaCli.Insert'
1168          Member: end-gen
1168         Value: end-gen
1168         FunctionCall: expr: 'setModeAccess(curSubcuentaCli.Insert)'
1168        FunctionCall: end-gen
1168        InstructionCall: line: 'setModeAccess(curSubcuentaCli.Insert)'
1168      <-Source: line: 'setModeAccess(curSubcuentaCli.Insert)'
1168     <--With: line: 'curSubcuentaCli.setModeAccess(curSubcuentaCli.Insert)'
1168    <---Source: line: 'curSubcuentaCli.setModeAccess(curSubcuentaCli.Insert)'
1168   <----Function: line: 'curSubcuentaCli.setModeAccess(curSubcuentaCli.Insert)'
1168  <-----Source: line: 'curSubcuentaCli.setModeAccess(curSubcuentaCli.Insert)'
1168 <------Class: line: 'curSubcuentaCli.setModeAccess(curSubcuentaCli.Insert)'
1168<-------Source: line: 'curSubcuentaCli.setModeAccess(curSubcuentaCli.Insert)'
1169       InstructionCall: end-gen
1169       InstructionCall: begin-gen
1169        FunctionCall: begin-gen
1169         FunctionCall: expr: 'refreshBuffer()'
1169        FunctionCall: end-gen
1169        InstructionCall: line: 'refreshBuffer()'
1169      <-Source: line: 'refreshBuffer()'
1169     <--With: line: 'curSubcuentaCli.refreshBuffer()'
1169    <---Source: line: 'curSubcuentaCli.refreshBuffer()'
1169   <----Function: line: 'curSubcuentaCli.refreshBuffer()'
1169  <-----Source: line: 'curSubcuentaCli.refreshBuffer()'
1169 <------Class: line: 'curSubcuentaCli.refreshBuffer()'
1169<-------Source: line: 'curSubcuentaCli.refreshBuffer()'
1170       InstructionCall: end-gen
1170       InstructionCall: begin-gen
1170        FunctionCall: begin-gen
1170         Value: begin-gen
1170          Constant: begin-gen
1170           Constant: ctype: 'String' -> 'codsubcuenta'
1170           Constant: expr: 'u"codsubcuenta"'
1170         <-Value: expr: 'u"codsubcuenta"'
1170          Constant: end-gen
1170         Value: end-gen
1170         Value: begin-gen
1170          Identifier: begin-gen
1170           Identifier: expr: 'codSubcuenta'
1170         <-Value: expr: 'codSubcuenta'
1170          Identifier: end-gen
1170         Value: end-gen
1170         FunctionCall: expr: 'setValueBuffer(u"codsubcuenta", codSubcuenta)'
1170        FunctionCall: end-gen
1170        InstructionCall: line: 'setValueBuffer(u"codsubcuenta", codSubcuenta)'
1170      <-Source: line: 'setValueBuffer(u"codsubcuenta", codSubcuenta)'
1170     <--With: line: 'curSubcuentaCli.setValueBuffer(u"codsubcuenta", codSubcuenta)'
1170    <---Source: line: 'curSubcuentaCli.setValueBuffer(u"codsubcuenta", codSubcuenta)'
1170   <----Function: line: 'curSubcuentaCli.setValueBuffer(u"codsubcuenta", codSubcuenta)'
1170  <-----Source: line: 'curSubcuentaCli.setValueBuffer(u"codsubcuenta", codSubcuenta)'
1170 <------Class: line: 'curSubcuentaCli.setValueBuffer(u"codsubcuenta", codSubcuenta)'
1170<-------Source: line: 'curSubcuentaCli.setValueBuffer(u"codsubcuenta", codSubcuenta)'
1171       InstructionCall: end-gen
1171       InstructionCall: begin-gen
1171        FunctionCall: begin-gen
1171         Value: begin-gen
1171          Constant: begin-gen
1171           Constant: ctype: 'String' -> 'idSubcuenta'
1171           Constant: expr: 'u"idSubcuenta"'
1171         <-Value: expr: 'u"idSubcuenta"'
1171          Constant: end-gen
1171         Value: end-gen
1171         Value: begin-gen
1171          Identifier: begin-gen
1171           Identifier: expr: 'idSubcuenta'
1171         <-Value: expr: 'idSubcuenta'
1171          Identifier: end-gen
1171         Value: end-gen
1171         FunctionCall: expr: 'setValueBuffer(u"idSubcuenta", idSubcuenta)'
1171        FunctionCall: end-gen
1171        InstructionCall: line: 'setValueBuffer(u"idSubcuenta", idSubcuenta)'
1171      <-Source: line: 'setValueBuffer(u"idSubcuenta", idSubcuenta)'
1171     <--With: line: 'curSubcuentaCli.setValueBuffer(u"idSubcuenta", idSubcuenta)'
1171    <---Source: line: 'curSubcuentaCli.setValueBuffer(u"idSubcuenta", idSubcuenta)'
1171   <----Function: line: 'curSubcuentaCli.setValueBuffer(u"idSubcuenta", idSubcuenta)'
1171  <-----Source: line: 'curSubcuentaCli.setValueBuffer(u"idSubcuenta", idSubcuenta)'
1171 <------Class: line: 'curSubcuentaCli.setValueBuffer(u"idSubcuenta", idSubcuenta)'
1171<-------Source: line: 'curSubcuentaCli.setValueBuffer(u"idSubcuenta", idSubcuenta)'
1172       InstructionCall: end-gen
1172       InstructionCall: begin-gen
1172        FunctionCall: begin-gen
1172         Value: begin-gen
1172          Constant: begin-gen
1172           Constant: ctype: 'String' -> 'codcliente'
1172           Constant: expr: 'u"codcliente"'
1172         <-Value: expr: 'u"codcliente"'
1172          Constant: end-gen
1172         Value: end-gen
1172         Value: begin-gen
1172          Identifier: begin-gen
1172           Identifier: expr: 'codCliente'
1172         <-Value: expr: 'codCliente'
1172          Identifier: end-gen
1172         Value: end-gen
1172         FunctionCall: expr: 'setValueBuffer(u"codcliente", codCliente)'
1172        FunctionCall: end-gen
1172        InstructionCall: line: 'setValueBuffer(u"codcliente", codCliente)'
1172      <-Source: line: 'setValueBuffer(u"codcliente", codCliente)'
1172     <--With: line: 'curSubcuentaCli.setValueBuffer(u"codcliente", codCliente)'
1172    <---Source: line: 'curSubcuentaCli.setValueBuffer(u"codcliente", codCliente)'
1172   <----Function: line: 'curSubcuentaCli.setValueBuffer(u"codcliente", codCliente)'
1172  <-----Source: line: 'curSubcuentaCli.setValueBuffer(u"codcliente", codCliente)'
1172 <------Class: line: 'curSubcuentaCli.setValueBuffer(u"codcliente", codCliente)'
1172<-------Source: line: 'curSubcuentaCli.setValueBuffer(u"codcliente", codCliente)'
1173       InstructionCall: end-gen
1173       InstructionCall: begin-gen
1173        FunctionCall: begin-gen
1173         Value: begin-gen
1173          Constant: begin-gen
1173           Constant: ctype: 'String' -> 'codejercicio'
1173           Constant: expr: 'u"codejercicio"'
1173         <-Value: expr: 'u"codejercicio"'
1173          Constant: end-gen
1173         Value: end-gen
1173         Value: begin-gen
1173          Identifier: begin-gen
1173           Identifier: expr: 'codEjercicio'
1173         <-Value: expr: 'codEjercicio'
1173          Identifier: end-gen
1173         Value: end-gen
1173         FunctionCall: expr: 'setValueBuffer(u"codejercicio", codEjercicio)'
1173        FunctionCall: end-gen
1173        InstructionCall: line: 'setValueBuffer(u"codejercicio", codEjercicio)'
1173      <-Source: line: 'setValueBuffer(u"codejercicio", codEjercicio)'
1173     <--With: line: 'curSubcuentaCli.setValueBuffer(u"codejercicio", codEjercicio)'
1173    <---Source: line: 'curSubcuentaCli.setValueBuffer(u"codejercicio", codEjercicio)'
1173   <----Function: line: 'curSubcuentaCli.setValueBuffer(u"codejercicio", codEjercicio)'
1173  <-----Source: line: 'curSubcuentaCli.setValueBuffer(u"codejercicio", codEjercicio)'
1173 <------Class: line: 'curSubcuentaCli.setValueBuffer(u"codejercicio", codEjercicio)'
1173<-------Source: line: 'curSubcuentaCli.setValueBuffer(u"codejercicio", codEjercicio)'
1174       InstructionCall: end-gen
1174      Source: end-gen
1174      With: line: ' #WITH_END'
1174    <-Source: line: ' #WITH_END'
1174   <--Function: line: ' #WITH_END'
1174  <---Source: line: ' #WITH_END'
1174 <----Class: line: ' #WITH_END'
1174<-----Source: line: ' #WITH_END'
1175     With: end-gen
1175     If: begin-gen
1175      Value: begin-gen
1175       OpUnary: begin-gen
1175        OpUnary: expr: 'not'
1175      <-Value: expr: 'not'
1175        Member: begin-gen
1175         Identifier: begin-gen
1175          Identifier: expr: 'curSubcuentaCli'
1175         Identifier: end-gen
1175         FunctionCall: begin-gen
1175          FunctionCall: expr: 'commitBuffer()'
1175         FunctionCall: end-gen
1175         Member: expr: 'curSubcuentaCli.commitBuffer()'
1175       <-OpUnary: expr: 'curSubcuentaCli.commitBuffer()'
1175      <--Value: expr: 'curSubcuentaCli.commitBuffer()'
1175        Member: end-gen
1175       OpUnary: end-gen
1175      Value: end-gen
1175      If: line: 'if not curSubcuentaCli.commitBuffer():'
1175    <-Source: line: 'if not curSubcuentaCli.commitBuffer():'
1175   <--Function: line: 'if not curSubcuentaCli.commitBuffer():'
1175  <---Source: line: 'if not curSubcuentaCli.commitBuffer():'
1175 <----Class: line: 'if not curSubcuentaCli.commitBuffer():'
1175<-----Source: line: 'if not curSubcuentaCli.commitBuffer():'
1176      If: begin: 'block-if'
1176    <-Source: begin: 'block-if'
1176   <--Function: begin: 'block-if'
1176  <---Source: begin: 'block-if'
1176 <----Class: begin: 'block-if'
1176<-----Source: begin: 'block-if'
1176      Source: begin-gen
1176       InstructionFlow: begin-gen
1176        Value: begin-gen
1176         Identifier: begin-gen
1176          Identifier: expr: 'False'
1176        <-Value: expr: 'False'
1176         Identifier: end-gen
1176        Value: end-gen
1176        InstructionFlow: line: 'return False'
1176      <-Source: line: 'return False'
1176     <--If: line: 'return False'
1176    <---Source: line: 'return False'
1176   <----Function: line: 'return False'
1176  <-----Source: line: 'return False'
1176 <------Class: line: 'return False'
1176<-------Source: line: 'return False'
1177       InstructionFlow: end-gen
1177      Source: end-gen
1177      If: end: 'block-if'
1177    <-Source: end: 'block-if'
1177   <--Function: end: 'block-if'
1177  <---Source: end: 'block-if'
1177 <----Class: end: 'block-if'
1177<-----Source: end: 'block-if'
1177     If: end-gen
1177     InstructionFlow: begin-gen
1177      Value: begin-gen
1177       Identifier: begin-gen
1177        Identifier: expr: 'True'
1177      <-Value: expr: 'True'
1177       Identifier: end-gen
1177      Value: end-gen
1177      InstructionFlow: line: 'return True'
1177    <-Source: line: 'return True'
1177   <--Function: line: 'return True'
1177  <---Source: line: 'return True'
1177 <----Class: line: 'return True'
1177<-----Source: line: 'return True'
1178     InstructionFlow: end-gen
1178    Source: end-gen
1178    Function: end: 'block-def-oficial_crearSubcuentaCli'
1178  <-Source: end: 'block-def-oficial_crearSubcuentaCli'
1178 <--Class: end: 'block-def-oficial_crearSubcuentaCli'
1178<---Source: end: 'block-def-oficial_crearSubcuentaCli'
1179   Function: end-gen
1179   Function: begin-gen
1179    Variable: begin-gen
1179     Variable: expr: 'codSubcuenta'
1179    Variable: end-gen
1179    Variable: begin-gen
1179     Variable: expr: 'idSubcuenta'
1179    Variable: end-gen
1179    Variable: begin-gen
1179     Variable: expr: 'codProveedor'
1179    Variable: end-gen
1179    Variable: begin-gen
1179     Variable: expr: 'codEjercicio'
1179    Variable: end-gen
1179    Function: line: 'def oficial_crearSubcuentaProv(self, codSubcuenta = None, idSubcuenta = None, codProveedor = None, codEjercicio = None):'
1179  <-Source: line: 'def oficial_crearSubcuentaProv(self, codSubcuenta = None, idSubcuenta = None, codProveedor = None, codEjercicio = None):'
1179 <--Class: line: 'def oficial_crearSubcuentaProv(self, codSubcuenta = None, idSubcuenta = None, codProveedor = None, codEjercicio = None):'
1179<---Source: line: 'def oficial_crearSubcuentaProv(self, codSubcuenta = None, idSubcuenta = None, codProveedor = None, codEjercicio = None):'
1180    Function: begin: 'block-def-oficial_crearSubcuentaProv'
1180  <-Source: begin: 'block-def-oficial_crearSubcuentaProv'
1180 <--Class: begin: 'block-def-oficial_crearSubcuentaProv'
1180<---Source: begin: 'block-def-oficial_crearSubcuentaProv'
1180    Source: begin-gen
1180     DeclarationBlock: begin-gen
1180      Variable: begin-gen
1180       Variable: expr: 'curSubcuentaProv'
1180       Variable: expr: '='
1180       Value: begin-gen
1180        New: begin-gen
1180         FunctionCall: begin-gen
1180          Value: begin-gen
1180           Constant: begin-gen
1180            Constant: ctype: 'String' -> 'co_subcuentasprov'
1180            Constant: expr: 'u"co_subcuentasprov"'
1180          <-Value: expr: 'u"co_subcuentasprov"'
1180           Constant: end-gen
1180          Value: end-gen
1180          FunctionCall: expr: 'FLSqlCursor(u"co_subcuentasprov")'
1180        <-New: expr: 'qsatype.FLSqlCursor(u"co_subcuentasprov")'
1180       <--Value: expr: 'qsatype.FLSqlCursor(u"co_subcuentasprov")'
1180      <---Variable: expr: 'qsatype.FLSqlCursor(u"co_subcuentasprov")'
1180         FunctionCall: end-gen
1180        New: end-gen
1180       Value: end-gen
1180      Variable: end-gen
1180      DeclarationBlock: line: 'curSubcuentaProv = qsatype.FLSqlCursor(u"co_subcuentasprov")'
1180    <-Source: line: 'curSubcuentaProv = qsatype.FLSqlCursor(u"co_subcuentasprov")'
1180   <--Function: line: 'curSubcuentaProv = qsatype.FLSqlCursor(u"co_subcuentasprov")'
1180  <---Source: line: 'curSubcuentaProv = qsatype.FLSqlCursor(u"co_subcuentasprov")'
1180 <----Class: line: 'curSubcuentaProv = qsatype.FLSqlCursor(u"co_subcuentasprov")'
1180<-----Source: line: 'curSubcuentaProv = qsatype.FLSqlCursor(u"co_subcuentasprov")'
1181     DeclarationBlock: end-gen
1181     With: begin-gen
1181      Identifier: begin-gen
1181       Identifier: expr: 'curSubcuentaProv'
1181      Identifier: end-gen
1181      With: line: ' #WITH_START'
1181    <-Source: line: ' #WITH_START'
1181   <--Function: line: ' #WITH_START'
1181  <---Source: line: ' #WITH_START'
1181 <----Class: line: ' #WITH_START'
1181<-----Source: line: ' #WITH_START'
1182      Source: begin-gen
1182       InstructionCall: begin-gen
1182        FunctionCall: begin-gen
1182         Value: begin-gen
1182          Member: begin-gen
1182           Identifier: begin-gen
1182            Identifier: expr: 'curSubcuentaProv'
1182           Identifier: end-gen
1182           Identifier: begin-gen
1182            Identifier: expr: 'Insert'
1182           Identifier: end-gen
1182           Member: expr: 'curSubcuentaProv.Insert'
1182         <-Value: expr: 'curSubcuentaProv.Insert'
1182          Member: end-gen
1182         Value: end-gen
1182         FunctionCall: expr: 'setModeAccess(curSubcuentaProv.Insert)'
1182        FunctionCall: end-gen
1182        InstructionCall: line: 'setModeAccess(curSubcuentaProv.Insert)'
1182      <-Source: line: 'setModeAccess(curSubcuentaProv.Insert)'
1182     <--With: line: 'curSubcuentaProv.setModeAccess(curSubcuentaProv.Insert)'
1182    <---Source: line: 'curSubcuentaProv.setModeAccess(curSubcuentaProv.Insert)'
1182   <----Function: line: 'curSubcuentaProv.setModeAccess(curSubcuentaProv.Insert)'
1182  <-----Source: line: 'curSubcuentaProv.setModeAccess(curSubcuentaProv.Insert)'
1182 <------Class: line: 'curSubcuentaProv.setModeAccess(curSubcuentaProv.Insert)'
1182<-------Source: line: 'curSubcuentaProv.setModeAccess(curSubcuentaProv.Insert)'
1183       InstructionCall: end-gen
1183       InstructionCall: begin-gen
1183        FunctionCall: begin-gen
1183         FunctionCall: expr: 'refreshBuffer()'
1183        FunctionCall: end-gen
1183        InstructionCall: line: 'refreshBuffer()'
1183      <-Source: line: 'refreshBuffer()'
1183     <--With: line: 'curSubcuentaProv.refreshBuffer()'
1183    <---Source: line: 'curSubcuentaProv.refreshBuffer()'
1183   <----Function: line: 'curSubcuentaProv.refreshBuffer()'
1183  <-----Source: line: 'curSubcuentaProv.refreshBuffer()'
1183 <------Class: line: 'curSubcuentaProv.refreshBuffer()'
1183<-------Source: line: 'curSubcuentaProv.refreshBuffer()'
1184       InstructionCall: end-gen
1184       InstructionCall: begin-gen
1184        FunctionCall: begin-gen
1184         Value: begin-gen
1184          Constant: begin-gen
1184           Constant: ctype: 'String' -> 'codsubcuenta'
1184           Constant: expr: 'u"codsubcuenta"'
1184         <-Value: expr: 'u"codsubcuenta"'
1184          Constant: end-gen
1184         Value: end-gen
1184         Value: begin-gen
1184          Identifier: begin-gen
1184           Identifier: expr: 'codSubcuenta'
1184         <-Value: expr: 'codSubcuenta'
1184          Identifier: end-gen
1184         Value: end-gen
1184         FunctionCall: expr: 'setValueBuffer(u"codsubcuenta", codSubcuenta)'
1184        FunctionCall: end-gen
1184        InstructionCall: line: 'setValueBuffer(u"codsubcuenta", codSubcuenta)'
1184      <-Source: line: 'setValueBuffer(u"codsubcuenta", codSubcuenta)'
1184     <--With: line: 'curSubcuentaProv.setValueBuffer(u"codsubcuenta", codSubcuenta)'
1184    <---Source: line: 'curSubcuentaProv.setValueBuffer(u"codsubcuenta", codSubcuenta)'
1184   <----Function: line: 'curSubcuentaProv.setValueBuffer(u"codsubcuenta", codSubcuenta)'
1184  <-----Source: line: 'curSubcuentaProv.setValueBuffer(u"codsubcuenta", codSubcuenta)'
1184 <------Class: line: 'curSubcuentaProv.setValueBuffer(u"codsubcuenta", codSubcuenta)'
1184<-------Source: line: 'curSubcuentaProv.setValueBuffer(u"codsubcuenta", codSubcuenta)'
1185       InstructionCall: end-gen
1185       InstructionCall: begin-gen
1185        FunctionCall: begin-gen
1185         Value: begin-gen
1185          Constant: begin-gen
1185           Constant: ctype: 'String' -> 'idSubcuenta'
1185           Constant: expr: 'u"idSubcuenta"'
1185         <-Value: expr: 'u"idSubcuenta"'
1185          Constant: end-gen
1185         Value: end-gen
1185         Value: begin-gen
1185          Identifier: begin-gen
1185           Identifier: expr: 'idSubcuenta'
1185         <-Value: expr: 'idSubcuenta'
1185          Identifier: end-gen
1185         Value: end-gen
1185         FunctionCall: expr: 'setValueBuffer(u"idSubcuenta", idSubcuenta)'
1185        FunctionCall: end-gen
1185        InstructionCall: line: 'setValueBuffer(u"idSubcuenta", idSubcuenta)'
1185      <-Source: line: 'setValueBuffer(u"idSubcuenta", idSubcuenta)'
1185     <--With: line: 'curSubcuentaProv.setValueBuffer(u"idSubcuenta", idSubcuenta)'
1185    <---Source: line: 'curSubcuentaProv.setValueBuffer(u"idSubcuenta", idSubcuenta)'
1185   <----Function: line: 'curSubcuentaProv.setValueBuffer(u"idSubcuenta", idSubcuenta)'
1185  <-----Source: line: 'curSubcuentaProv.setValueBuffer(u"idSubcuenta", idSubcuenta)'
1185 <------Class: line: 'curSubcuentaProv.setValueBuffer(u"idSubcuenta", idSubcuenta)'
1185<-------Source: line: 'curSubcuentaProv.setValueBuffer(u"idSubcuenta", idSubcuenta)'
1186       InstructionCall: end-gen
1186       InstructionCall: begin-gen
1186        FunctionCall: begin-gen
1186         Value: begin-gen
1186          Constant: begin-gen
1186           Constant: ctype: 'String' -> 'codproveedor'
1186           Constant: expr: 'u"codproveedor"'
1186         <-Value: expr: 'u"codproveedor"'
1186          Constant: end-gen
1186         Value: end-gen
1186         Value: begin-gen
1186          Identifier: begin-gen
1186           Identifier: expr: 'codProveedor'
1186         <-Value: expr: 'codProveedor'
1186          Identifier: end-gen
1186         Value: end-gen
1186         FunctionCall: expr: 'setValueBuffer(u"codproveedor", codProveedor)'
1186        FunctionCall: end-gen
1186        InstructionCall: line: 'setValueBuffer(u"codproveedor", codProveedor)'
1186      <-Source: line: 'setValueBuffer(u"codproveedor", codProveedor)'
1186     <--With: line: 'curSubcuentaProv.setValueBuffer(u"codproveedor", codProveedor)'
1186    <---Source: line: 'curSubcuentaProv.setValueBuffer(u"codproveedor", codProveedor)'
1186   <----Function: line: 'curSubcuentaProv.setValueBuffer(u"codproveedor", codProveedor)'
1186  <-----Source: line: 'curSubcuentaProv.setValueBuffer(u"codproveedor", codProveedor)'
1186 <------Class: line: 'curSubcuentaProv.setValueBuffer(u"codproveedor", codProveedor)'
1186<-------Source: line: 'curSubcuentaProv.setValueBuffer(u"codproveedor", codProveedor)'
1187       InstructionCall: end-gen
1187       InstructionCall: begin-gen
1187        FunctionCall: begin-gen
1187         Value: begin-gen
1187          Constant: begin-gen
1187           Constant: ctype: 'String' -> 'codejercicio'
1187           Constant: expr: 'u"codejercicio"'
1187         <-Value: expr: 'u"codejercicio"'
1187          Constant: end-gen
1187         Value: end-gen
1187         Value: begin-gen
1187          Identifier: begin-gen
1187           Identifier: expr: 'codEjercicio'
1187         <-Value: expr: 'codEjercicio'
1187          Identifier: end-gen
1187         Value: end-gen
1187         FunctionCall: expr: 'setValueBuffer(u"codejercicio", codEjercicio)'
1187        FunctionCall: end-gen
1187        InstructionCall: line: 'setValueBuffer(u"codejercicio", codEjercicio)'
1187      <-Source: line: 'setValueBuffer(u"codejercicio", codEjercicio)'
1187     <--With: line: 'curSubcuentaProv.setValueBuffer(u"codejercicio", codEjercicio)'
1187    <---Source: line: 'curSubcuentaProv.setValueBuffer(u"codejercicio", codEjercicio)'
1187   <----Function: line: 'curSubcuentaProv.setValueBuffer(u"codejercicio", codEjercicio)'
1187  <-----Source: line: 'curSubcuentaProv.setValueBuffer(u"codejercicio", codEjercicio)'
1187 <------Class: line: 'curSubcuentaProv.setValueBuffer(u"codejercicio", codEjercicio)'
1187<-------Source: line: 'curSubcuentaProv.setValueBuffer(u"codejercicio", codEjercicio)'
1188       InstructionCall: end-gen
1188      Source: end-gen
1188      With: line: ' #WITH_END'
1188    <-Source: line: ' #WITH_END'
1188   <--Function: line: ' #WITH_END'
1188  <---Source: line: ' #WITH_END'
1188 <----Class: line: ' #WITH_END'
1188<-----Source: line: ' #WITH_END'
1189     With: end-gen
1189     If: begin-gen
1189      Value: begin-gen
1189       OpUnary: begin-gen
1189        OpUnary: expr: 'not'
1189      <-Value: expr: 'not'
1189        Member: begin-gen
1189         Identifier: begin-gen
1189          Identifier: expr: 'curSubcuentaProv'
1189         Identifier: end-gen
1189         FunctionCall: begin-gen
1189          FunctionCall: expr: 'commitBuffer()'
1189         FunctionCall: end-gen
1189         Member: expr: 'curSubcuentaProv.commitBuffer()'
1189       <-OpUnary: expr: 'curSubcuentaProv.commitBuffer()'
1189      <--Value: expr: 'curSubcuentaProv.commitBuffer()'
1189        Member: end-gen
1189       OpUnary: end-gen
1189      Value: end-gen
1189      If: line: 'if not curSubcuentaProv.commitBuffer():'
1189    <-Source: line: 'if not curSubcuentaProv.commitBuffer():'
1189   <--Function: line: 'if not curSubcuentaProv.commitBuffer():'
1189  <---Source: line: 'if not curSubcuentaProv.commitBuffer():'
1189 <----Class: line: 'if not curSubcuentaProv.commitBuffer():'
1189<-----Source: line: 'if not curSubcuentaProv.commitBuffer():'
1190      If: begin: 'block-if'
1190    <-Source: begin: 'block-if'
1190   <--Function: begin: 'block-if'
1190  <---Source: begin: 'block-if'
1190 <----Class: begin: 'block-if'
1190<-----Source: begin: 'block-if'
1190      Source: begin-gen
1190       InstructionFlow: begin-gen
1190        Value: begin-gen
1190         Identifier: begin-gen
1190          Identifier: expr: 'False'
1190        <-Value: expr: 'False'
1190         Identifier: end-gen
1190        Value: end-gen
1190        InstructionFlow: line: 'return False'
1190      <-Source: line: 'return False'
1190     <--If: line: 'return False'
1190    <---Source: line: 'return False'
1190   <----Function: line: 'return False'
1190  <-----Source: line: 'return False'
1190 <------Class: line: 'return False'
1190<-------Source: line: 'return False'
1191       InstructionFlow: end-gen
1191      Source: end-gen
1191      If: end: 'block-if'
1191    <-Source: end: 'block-if'
1191   <--Function: end: 'block-if'
1191  <---Source: end: 'block-if'
1191 <----Class: end: 'block-if'
1191<-----Source: end: 'block-if'
1191     If: end-gen
1191     InstructionFlow: begin-gen
1191      Value: begin-gen
1191       Identifier: begin-gen
1191        Identifier: expr: 'True'
1191      <-Value: expr: 'True'
1191       Identifier: end-gen
1191      Value: end-gen
1191      InstructionFlow: line: 'return True'
1191    <-Source: line: 'return True'
1191   <--Function: line: 'return True'
1191  <---Source: line: 'return True'
1191 <----Class: line: 'return True'
1191<-----Source: line: 'return True'
1192     InstructionFlow: end-gen
1192    Source: end-gen
1192    Function: end: 'block-def-oficial_crearSubcuentaProv'
1192  <-Source: end: 'block-def-oficial_crearSubcuentaProv'
1192 <--Class: end: 'block-def-oficial_crearSubcuentaProv'
1192<---Source: end: 'block-def-oficial_crearSubcuentaProv'
1193   Function: end-gen
1193   Function: begin-gen
1193    Variable: begin-gen
1193     Variable: expr: 'codCliente'
1193    Variable: end-gen
1193    Variable: begin-gen
1193     Variable: expr: 'codSubcuenta'
1193    Variable: end-gen
1193    Variable: begin-gen
1193     Variable: expr: 'nombre'
1193    Variable: end-gen
1193    Function: line: 'def oficial_rellenarSubcuentasCli(self, codCliente = None, codSubcuenta = None, nombre = None):'
1193  <-Source: line: 'def oficial_rellenarSubcuentasCli(self, codCliente = None, codSubcuenta = None, nombre = None):'
1193 <--Class: line: 'def oficial_rellenarSubcuentasCli(self, codCliente = None, codSubcuenta = None, nombre = None):'
1193<---Source: line: 'def oficial_rellenarSubcuentasCli(self, codCliente = None, codSubcuenta = None, nombre = None):'
1194    Function: begin: 'block-def-oficial_rellenarSubcuentasCli'
1194  <-Source: begin: 'block-def-oficial_rellenarSubcuentasCli'
1194 <--Class: begin: 'block-def-oficial_rellenarSubcuentasCli'
1194<---Source: begin: 'block-def-oficial_rellenarSubcuentasCli'
1194    Source: begin-gen
1194     If: begin-gen
1194      Value: begin-gen
1194       OpUnary: begin-gen
1194        OpUnary: expr: 'not'
1194      <-Value: expr: 'not'
1194        Member: begin-gen
1194         Identifier: begin-gen
1194          Identifier: expr: 'sys'
1194         Identifier: end-gen
1194         FunctionCall: begin-gen
1194          Value: begin-gen
1194           Constant: begin-gen
1194            Constant: ctype: 'String' -> 'flcontppal'
1194            Constant: expr: 'u"flcontppal"'
1194          <-Value: expr: 'u"flcontppal"'
1194           Constant: end-gen
1194          Value: end-gen
1194          FunctionCall: expr: 'isLoadedModule(u"flcontppal")'
1194         FunctionCall: end-gen
1194         Member: expr: 'sys.isLoadedModule(u"flcontppal")'
1194       <-OpUnary: expr: 'sys.isLoadedModule(u"flcontppal")'
1194      <--Value: expr: 'sys.isLoadedModule(u"flcontppal")'
1194        Member: end-gen
1194       OpUnary: end-gen
1194      Value: end-gen
1194      If: line: 'if not sys.isLoadedModule(u"flcontppal"):'
1194    <-Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
1194   <--Function: line: 'if not sys.isLoadedModule(u"flcontppal"):'
1194  <---Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
1194 <----Class: line: 'if not sys.isLoadedModule(u"flcontppal"):'
1194<-----Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
1195      If: begin: 'block-if'
1195    <-Source: begin: 'block-if'
1195   <--Function: begin: 'block-if'
1195  <---Source: begin: 'block-if'
1195 <----Class: begin: 'block-if'
1195<-----Source: begin: 'block-if'
1195      Source: begin-gen
1195       InstructionFlow: begin-gen
1195        Value: begin-gen
1195         Identifier: begin-gen
1195          Identifier: expr: 'True'
1195        <-Value: expr: 'True'
1195         Identifier: end-gen
1195        Value: end-gen
1195        InstructionFlow: line: 'return True'
1195      <-Source: line: 'return True'
1195     <--If: line: 'return True'
1195    <---Source: line: 'return True'
1195   <----Function: line: 'return True'
1195  <-----Source: line: 'return True'
1195 <------Class: line: 'return True'
1195<-------Source: line: 'return True'
1196       InstructionFlow: end-gen
1196      Source: end-gen
1196      If: end: 'block-if'
1196    <-Source: end: 'block-if'
1196   <--Function: end: 'block-if'
1196  <---Source: end: 'block-if'
1196 <----Class: end: 'block-if'
1196<-----Source: end: 'block-if'
1196     If: end-gen
1196     If: begin-gen
1196      Value: begin-gen
1196       OpUnary: begin-gen
1196        OpUnary: expr: 'not'
1196      <-Value: expr: 'not'
1196        Identifier: begin-gen
1196         Identifier: expr: 'codSubcuenta'
1196       <-OpUnary: expr: 'codSubcuenta'
1196      <--Value: expr: 'codSubcuenta'
1196        Identifier: end-gen
1196       OpUnary: end-gen
1196      Value: end-gen
1196      If: line: 'if not codSubcuenta:'
1196    <-Source: line: 'if not codSubcuenta:'
1196   <--Function: line: 'if not codSubcuenta:'
1196  <---Source: line: 'if not codSubcuenta:'
1196 <----Class: line: 'if not codSubcuenta:'
1196<-----Source: line: 'if not codSubcuenta:'
1197      If: begin: 'block-if'
1197    <-Source: begin: 'block-if'
1197   <--Function: begin: 'block-if'
1197  <---Source: begin: 'block-if'
1197 <----Class: begin: 'block-if'
1197<-----Source: begin: 'block-if'
1197      Source: begin-gen
1197       InstructionFlow: begin-gen
1197        Value: begin-gen
1197         Identifier: begin-gen
1197          Identifier: expr: 'True'
1197        <-Value: expr: 'True'
1197         Identifier: end-gen
1197        Value: end-gen
1197        InstructionFlow: line: 'return True'
1197      <-Source: line: 'return True'
1197     <--If: line: 'return True'
1197    <---Source: line: 'return True'
1197   <----Function: line: 'return True'
1197  <-----Source: line: 'return True'
1197 <------Class: line: 'return True'
1197<-------Source: line: 'return True'
1198       InstructionFlow: end-gen
1198      Source: end-gen
1198      If: end: 'block-if'
1198    <-Source: end: 'block-if'
1198   <--Function: end: 'block-if'
1198  <---Source: end: 'block-if'
1198 <----Class: end: 'block-if'
1198<-----Source: end: 'block-if'
1198     If: end-gen
1198     DeclarationBlock: begin-gen
1198      Variable: begin-gen
1198       Variable: expr: 'util'
1198       Variable: expr: '='
1198       Value: begin-gen
1198        New: begin-gen
1198         Identifier: begin-gen
1198          Identifier: expr: 'FLUtil'
1198        <-New: expr: 'qsatype.FLUtil()'
1198       <--Value: expr: 'qsatype.FLUtil()'
1198      <---Variable: expr: 'qsatype.FLUtil()'
1198         Identifier: end-gen
1198        New: end-gen
1198       Value: end-gen
1198      Variable: end-gen
1198      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1198    <-Source: line: 'util = qsatype.FLUtil()'
1198   <--Function: line: 'util = qsatype.FLUtil()'
1198  <---Source: line: 'util = qsatype.FLUtil()'
1198 <----Class: line: 'util = qsatype.FLUtil()'
1198<-----Source: line: 'util = qsatype.FLUtil()'
1199     DeclarationBlock: end-gen
1199     DeclarationBlock: begin-gen
1199      Variable: begin-gen
1199       Variable: expr: 'qry'
1199       Variable: expr: '='
1199       Value: begin-gen
1199        New: begin-gen
1199         FunctionCall: begin-gen
1199          FunctionCall: expr: 'FLSqlQuery()'
1199        <-New: expr: 'qsatype.FLSqlQuery()'
1199       <--Value: expr: 'qsatype.FLSqlQuery()'
1199      <---Variable: expr: 'qsatype.FLSqlQuery()'
1199         FunctionCall: end-gen
1199        New: end-gen
1199       Value: end-gen
1199      Variable: end-gen
1199      DeclarationBlock: line: 'qry = qsatype.FLSqlQuery()'
1199    <-Source: line: 'qry = qsatype.FLSqlQuery()'
1199   <--Function: line: 'qry = qsatype.FLSqlQuery()'
1199  <---Source: line: 'qry = qsatype.FLSqlQuery()'
1199 <----Class: line: 'qry = qsatype.FLSqlQuery()'
1199<-----Source: line: 'qry = qsatype.FLSqlQuery()'
1200     DeclarationBlock: end-gen
1200     InstructionCall: begin-gen
1200      Member: begin-gen
1200       Identifier: begin-gen
1200        Identifier: expr: 'qry'
1200       Identifier: end-gen
1200       FunctionCall: begin-gen
1200        Value: begin-gen
1200         Constant: begin-gen
1200          Constant: ctype: 'String' -> 'ejercicios,co_subcuentascli'
1200          Constant: expr: 'u"ejercicios,co_subcuentascli"'
1200        <-Value: expr: 'u"ejercicios,co_subcuentascli"'
1200         Constant: end-gen
1200        Value: end-gen
1200        FunctionCall: expr: 'setTablesList(u"ejercicios,co_subcuentascli")'
1200       FunctionCall: end-gen
1200       Member: expr: 'qry.setTablesList(u"ejercicios,co_subcuentascli")'
1200      Member: end-gen
1200      InstructionCall: line: 'qry.setTablesList(u"ejercicios,co_subcuentascli")'
1200    <-Source: line: 'qry.setTablesList(u"ejercicios,co_subcuentascli")'
1200   <--Function: line: 'qry.setTablesList(u"ejercicios,co_subcuentascli")'
1200  <---Source: line: 'qry.setTablesList(u"ejercicios,co_subcuentascli")'
1200 <----Class: line: 'qry.setTablesList(u"ejercicios,co_subcuentascli")'
1200<-----Source: line: 'qry.setTablesList(u"ejercicios,co_subcuentascli")'
1201     InstructionCall: end-gen
1201     InstructionCall: begin-gen
1201      Member: begin-gen
1201       Identifier: begin-gen
1201        Identifier: expr: 'qry'
1201       Identifier: end-gen
1201       FunctionCall: begin-gen
1201        Value: begin-gen
1201         Constant: begin-gen
1201          Constant: ctype: 'String' -> 'e.codejercicio'
1201          Constant: expr: 'u"e.codejercicio"'
1201        <-Value: expr: 'u"e.codejercicio"'
1201         Constant: end-gen
1201        Value: end-gen
1201        FunctionCall: expr: 'setSelect(u"e.codejercicio")'
1201       FunctionCall: end-gen
1201       Member: expr: 'qry.setSelect(u"e.codejercicio")'
1201      Member: end-gen
1201      InstructionCall: line: 'qry.setSelect(u"e.codejercicio")'
1201    <-Source: line: 'qry.setSelect(u"e.codejercicio")'
1201   <--Function: line: 'qry.setSelect(u"e.codejercicio")'
1201  <---Source: line: 'qry.setSelect(u"e.codejercicio")'
1201 <----Class: line: 'qry.setSelect(u"e.codejercicio")'
1201<-----Source: line: 'qry.setSelect(u"e.codejercicio")'
1202     InstructionCall: end-gen
1202     InstructionCall: begin-gen
1202      Member: begin-gen
1202       Identifier: begin-gen
1202        Identifier: expr: 'qry'
1202       Identifier: end-gen
1202       FunctionCall: begin-gen
1202        Expression: begin-gen
1202         Expression: expr: 'ustr('
1202         Constant: begin-gen
1202          Constant: ctype: 'String' -> "ejercicios e LEFT OUTER JOIN co_subcuentascli s ON e.codejercicio = s.codejercicio AND s.codcliente = '"
1202          Constant: expr: 'u"ejercicios e LEFT OUTER JOIN co_subcuentascli s ON e.codejercicio = s.codejercicio AND s.codcliente = \'"'
1202        <-Expression: expr: 'u"ejercicios e LEFT OUTER JOIN co_subcuentascli s ON e.codejercicio = s.codejercicio AND s.codcliente = \'"'
1202         Constant: end-gen
1202         Expression: expr: ','
1202         Identifier: begin-gen
1202          Identifier: expr: 'codCliente'
1202        <-Expression: expr: 'codCliente'
1202         Identifier: end-gen
1202         Expression: expr: ','
1202         Constant: begin-gen
1202          Constant: ctype: 'String' -> "'"
1202          Constant: expr: 'u"\'"'
1202        <-Expression: expr: 'u"\'"'
1202         Constant: end-gen
1202         Expression: expr: ')'
1202        Expression: end-gen
1202        FunctionCall: expr: 'setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentascli s ON e.codejercicio = s.codejercicio AND s.codcliente = \'" , codCliente , u"\'" ))'
1202       FunctionCall: end-gen
1202       Member: expr: 'qry.setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentascli s ON e.codejercicio = s.codejercicio AND s.codcliente = \'" , codCliente , u"\'" ))'
1202      Member: end-gen
1202      InstructionCall: line: 'qry.setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentascli s ON e.codejercicio = s.codejercicio AND s.codcliente = \'" , codCliente , u"\'" ))'
1202    <-Source: line: 'qry.setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentascli s ON e.codejercicio = s.codejercicio AND s.codcliente = \'" , codCliente , u"\'" ))'
1202   <--Function: line: 'qry.setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentascli s ON e.codejercicio = s.codejercicio AND s.codcliente = \'" , codCliente , u"\'" ))'
1202  <---Source: line: 'qry.setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentascli s ON e.codejercicio = s.codejercicio AND s.codcliente = \'" , codCliente , u"\'" ))'
1202 <----Class: line: 'qry.setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentascli s ON e.codejercicio = s.codejercicio AND s.codcliente = \'" , codCliente , u"\'" ))'
1202<-----Source: line: 'qry.setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentascli s ON e.codejercicio = s.codejercicio AND s.codcliente = \'" , codCliente , u"\'" ))'
1203     InstructionCall: end-gen
1203     InstructionCall: begin-gen
1203      Member: begin-gen
1203       Identifier: begin-gen
1203        Identifier: expr: 'qry'
1203       Identifier: end-gen
1203       FunctionCall: begin-gen
1203        Value: begin-gen
1203         Constant: begin-gen
1203          Constant: ctype: 'String' -> "s.id IS NULL AND e.estado = 'ABIERTO' AND e.fechafin >= CURRENT_DATE"
1203          Constant: expr: 'u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE"'
1203        <-Value: expr: 'u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE"'
1203         Constant: end-gen
1203        Value: end-gen
1203        FunctionCall: expr: 'setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1203       FunctionCall: end-gen
1203       Member: expr: 'qry.setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1203      Member: end-gen
1203      InstructionCall: line: 'qry.setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1203    <-Source: line: 'qry.setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1203   <--Function: line: 'qry.setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1203  <---Source: line: 'qry.setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1203 <----Class: line: 'qry.setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1203<-----Source: line: 'qry.setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1204     InstructionCall: end-gen
1204     If: begin-gen
1204      Value: begin-gen
1204       OpUnary: begin-gen
1204        OpUnary: expr: 'not'
1204      <-Value: expr: 'not'
1204        Member: begin-gen
1204         Identifier: begin-gen
1204          Identifier: expr: 'qry'
1204         Identifier: end-gen
1204         FunctionCall: begin-gen
1204          FunctionCall: expr: 'exec_()'
1204         FunctionCall: end-gen
1204         Member: expr: 'qry.exec_()'
1204       <-OpUnary: expr: 'qry.exec_()'
1204      <--Value: expr: 'qry.exec_()'
1204        Member: end-gen
1204       OpUnary: end-gen
1204      Value: end-gen
1204      If: line: 'if not qry.exec_():'
1204    <-Source: line: 'if not qry.exec_():'
1204   <--Function: line: 'if not qry.exec_():'
1204  <---Source: line: 'if not qry.exec_():'
1204 <----Class: line: 'if not qry.exec_():'
1204<-----Source: line: 'if not qry.exec_():'
1205      If: begin: 'block-if'
1205    <-Source: begin: 'block-if'
1205   <--Function: begin: 'block-if'
1205  <---Source: begin: 'block-if'
1205 <----Class: begin: 'block-if'
1205<-----Source: begin: 'block-if'
1205      Source: begin-gen
1205       InstructionFlow: begin-gen
1205        Value: begin-gen
1205         Identifier: begin-gen
1205          Identifier: expr: 'False'
1205        <-Value: expr: 'False'
1205         Identifier: end-gen
1205        Value: end-gen
1205        InstructionFlow: line: 'return False'
1205      <-Source: line: 'return False'
1205     <--If: line: 'return False'
1205    <---Source: line: 'return False'
1205   <----Function: line: 'return False'
1205  <-----Source: line: 'return False'
1205 <------Class: line: 'return False'
1205<-------Source: line: 'return False'
1206       InstructionFlow: end-gen
1206      Source: end-gen
1206      If: end: 'block-if'
1206    <-Source: end: 'block-if'
1206   <--Function: end: 'block-if'
1206  <---Source: end: 'block-if'
1206 <----Class: end: 'block-if'
1206<-----Source: end: 'block-if'
1206     If: end-gen
1206     DeclarationBlock: begin-gen
1206      Variable: begin-gen
1206       Variable: expr: 'idSubcuenta'
1206       Variable: expr: '='
1206       Variable: expr: '0'
1206      Variable: end-gen
1206      DeclarationBlock: line: 'idSubcuenta = 0'
1206    <-Source: line: 'idSubcuenta = 0'
1206   <--Function: line: 'idSubcuenta = 0'
1206  <---Source: line: 'idSubcuenta = 0'
1206 <----Class: line: 'idSubcuenta = 0'
1206<-----Source: line: 'idSubcuenta = 0'
1207     DeclarationBlock: end-gen
1207     DeclarationBlock: begin-gen
1207      Variable: begin-gen
1207       Variable: expr: 'codEjercicio'
1207       Variable: expr: '='
1207       Variable: expr: '""'
1207      Variable: end-gen
1207      DeclarationBlock: line: 'codEjercicio = ""'
1207    <-Source: line: 'codEjercicio = ""'
1207   <--Function: line: 'codEjercicio = ""'
1207  <---Source: line: 'codEjercicio = ""'
1207 <----Class: line: 'codEjercicio = ""'
1207<-----Source: line: 'codEjercicio = ""'
1208     DeclarationBlock: end-gen
1208     While: begin-gen
1208      Value: begin-gen
1208       Member: begin-gen
1208        Identifier: begin-gen
1208         Identifier: expr: 'qry'
1208        Identifier: end-gen
1208        FunctionCall: begin-gen
1208         FunctionCall: expr: 'next()'
1208        FunctionCall: end-gen
1208        Member: expr: 'qry.next()'
1208      <-Value: expr: 'qry.next()'
1208       Member: end-gen
1208      Value: end-gen
1208      While: line: 'while qry.next():'
1208    <-Source: line: 'while qry.next():'
1208   <--Function: line: 'while qry.next():'
1208  <---Source: line: 'while qry.next():'
1208 <----Class: line: 'while qry.next():'
1208<-----Source: line: 'while qry.next():'
1209      While: begin: 'block-while'
1209    <-Source: begin: 'block-while'
1209   <--Function: begin: 'block-while'
1209  <---Source: begin: 'block-while'
1209 <----Class: begin: 'block-while'
1209<-----Source: begin: 'block-while'
1209      Source: begin-gen
1209       InstructionUpdate: begin-gen
1209        Identifier: begin-gen
1209         Identifier: expr: 'codEjercicio'
1209        Identifier: end-gen
1209        OpUpdate: begin-gen
1209         OpUpdate: expr: '='
1209        OpUpdate: end-gen
1209        Value: begin-gen
1209         Member: begin-gen
1209          Identifier: begin-gen
1209           Identifier: expr: 'qry'
1209          Identifier: end-gen
1209          FunctionCall: begin-gen
1209           Value: begin-gen
1209            Constant: begin-gen
1209             Constant: ctype: 'Number' -> '0'
1209             Constant: expr: '0'
1209           <-Value: expr: '0'
1209            Constant: end-gen
1209           Value: end-gen
1209           FunctionCall: expr: 'value(0)'
1209          FunctionCall: end-gen
1209          Member: expr: 'qry.value(0)'
1209        <-Value: expr: 'qry.value(0)'
1209         Member: end-gen
1209        Value: end-gen
1209        InstructionUpdate: line: 'codEjercicio = qry.value(0)'
1209      <-Source: line: 'codEjercicio = qry.value(0)'
1209     <--While: line: 'codEjercicio = qry.value(0)'
1209    <---Source: line: 'codEjercicio = qry.value(0)'
1209   <----Function: line: 'codEjercicio = qry.value(0)'
1209  <-----Source: line: 'codEjercicio = qry.value(0)'
1209 <------Class: line: 'codEjercicio = qry.value(0)'
1209<-------Source: line: 'codEjercicio = qry.value(0)'
1210       InstructionUpdate: end-gen
1210       If: begin-gen
1210        Value: begin-gen
1210         OpUnary: begin-gen
1210          OpUnary: expr: 'not'
1210        <-Value: expr: 'not'
1210          Member: begin-gen
1210           Identifier: begin-gen
1210            Identifier: expr: 'util'
1210           Identifier: end-gen
1210           FunctionCall: begin-gen
1210            Value: begin-gen
1210             Constant: begin-gen
1210              Constant: ctype: 'String' -> 'co_epigrafes'
1210              Constant: expr: 'u"co_epigrafes"'
1210            <-Value: expr: 'u"co_epigrafes"'
1210             Constant: end-gen
1210            Value: end-gen
1210            Value: begin-gen
1210             Constant: begin-gen
1210              Constant: ctype: 'String' -> 'codepigrafe'
1210              Constant: expr: 'u"codepigrafe"'
1210            <-Value: expr: 'u"codepigrafe"'
1210             Constant: end-gen
1210            Value: end-gen
1210            Expression: begin-gen
1210             Expression: expr: 'ustr('
1210             Constant: begin-gen
1210              Constant: ctype: 'String' -> "codejercicio = '"
1210              Constant: expr: 'u"codejercicio = \'"'
1210            <-Expression: expr: 'u"codejercicio = \'"'
1210             Constant: end-gen
1210             Expression: expr: ','
1210             Identifier: begin-gen
1210              Identifier: expr: 'codEjercicio'
1210            <-Expression: expr: 'codEjercicio'
1210             Identifier: end-gen
1210             Expression: expr: ','
1210             Constant: begin-gen
1210              Constant: ctype: 'String' -> "'"
1210              Constant: expr: 'u"\'"'
1210            <-Expression: expr: 'u"\'"'
1210             Constant: end-gen
1210             Expression: expr: ')'
1210            Expression: end-gen
1210            FunctionCall: expr: 'sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" ))'
1210           FunctionCall: end-gen
1210           Member: expr: 'util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" ))'
1210         <-OpUnary: expr: 'util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" ))'
1210        <--Value: expr: 'util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" ))'
1210          Member: end-gen
1210         OpUnary: end-gen
1210        Value: end-gen
1210        If: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1210      <-Source: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1210     <--While: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1210    <---Source: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1210   <----Function: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1210  <-----Source: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1210 <------Class: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1210<-------Source: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1211        If: begin: 'block-if'
1211      <-Source: begin: 'block-if'
1211     <--While: begin: 'block-if'
1211    <---Source: begin: 'block-if'
1211   <----Function: begin: 'block-if'
1211  <-----Source: begin: 'block-if'
1211 <------Class: begin: 'block-if'
1211<-------Source: begin: 'block-if'
1211        Source: begin-gen
1211         InstructionFlow: begin-gen
1211          InstructionFlow: line: 'continue '
1211        <-Source: line: 'continue '
1211       <--If: line: 'continue '
1211      <---Source: line: 'continue '
1211     <----While: line: 'continue '
1211    <-----Source: line: 'continue '
1211   <------Function: line: 'continue '
1211  <-------Source: line: 'continue '
1211 <--------Class: line: 'continue '
1211<---------Source: line: 'continue '
1212         InstructionFlow: end-gen
1212        Source: end-gen
1212        If: end: 'block-if'
1212      <-Source: end: 'block-if'
1212     <--While: end: 'block-if'
1212    <---Source: end: 'block-if'
1212   <----Function: end: 'block-if'
1212  <-----Source: end: 'block-if'
1212 <------Class: end: 'block-if'
1212<-------Source: end: 'block-if'
1212       If: end-gen
1212       InstructionUpdate: begin-gen
1212        Identifier: begin-gen
1212         Identifier: expr: 'idSubcuenta'
1212        Identifier: end-gen
1212        OpUpdate: begin-gen
1212         OpUpdate: expr: '='
1212        OpUpdate: end-gen
1212        Value: begin-gen
1212         Member: begin-gen
1212          Identifier: begin-gen
1212           Identifier: expr: 'self'
1212          Identifier: end-gen
1212          Identifier: begin-gen
1212           Identifier: expr: 'iface'
1212          Identifier: end-gen
1212          FunctionCall: begin-gen
1212           Value: begin-gen
1212            Identifier: begin-gen
1212             Identifier: expr: 'codSubcuenta'
1212           <-Value: expr: 'codSubcuenta'
1212            Identifier: end-gen
1212           Value: end-gen
1212           Value: begin-gen
1212            Identifier: begin-gen
1212             Identifier: expr: 'nombre'
1212           <-Value: expr: 'nombre'
1212            Identifier: end-gen
1212           Value: end-gen
1212           Value: begin-gen
1212            Constant: begin-gen
1212             Constant: ctype: 'String' -> 'CLIENT'
1212             Constant: expr: 'u"CLIENT"'
1212           <-Value: expr: 'u"CLIENT"'
1212            Constant: end-gen
1212           Value: end-gen
1212           Value: begin-gen
1212            Identifier: begin-gen
1212             Identifier: expr: 'codEjercicio'
1212           <-Value: expr: 'codEjercicio'
1212            Identifier: end-gen
1212           Value: end-gen
1212           FunctionCall: expr: 'crearSubcuenta(codSubcuenta, nombre, u"CLIENT", codEjercicio)'
1212          FunctionCall: end-gen
1212          Member: expr: 'self.iface.crearSubcuenta(codSubcuenta, nombre, u"CLIENT", codEjercicio)'
1212        <-Value: expr: 'self.iface.crearSubcuenta(codSubcuenta, nombre, u"CLIENT", codEjercicio)'
1212         Member: end-gen
1212        Value: end-gen
1212        InstructionUpdate: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"CLIENT", codEjercicio)'
1212      <-Source: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"CLIENT", codEjercicio)'
1212     <--While: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"CLIENT", codEjercicio)'
1212    <---Source: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"CLIENT", codEjercicio)'
1212   <----Function: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"CLIENT", codEjercicio)'
1212  <-----Source: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"CLIENT", codEjercicio)'
1212 <------Class: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"CLIENT", codEjercicio)'
1212<-------Source: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"CLIENT", codEjercicio)'
1213       InstructionUpdate: end-gen
1213       If: begin-gen
1213        Value: begin-gen
1213         OpUnary: begin-gen
1213          OpUnary: expr: 'not'
1213        <-Value: expr: 'not'
1213          Identifier: begin-gen
1213           Identifier: expr: 'idSubcuenta'
1213         <-OpUnary: expr: 'idSubcuenta'
1213        <--Value: expr: 'idSubcuenta'
1213          Identifier: end-gen
1213         OpUnary: end-gen
1213        Value: end-gen
1213        If: line: 'if not idSubcuenta:'
1213      <-Source: line: 'if not idSubcuenta:'
1213     <--While: line: 'if not idSubcuenta:'
1213    <---Source: line: 'if not idSubcuenta:'
1213   <----Function: line: 'if not idSubcuenta:'
1213  <-----Source: line: 'if not idSubcuenta:'
1213 <------Class: line: 'if not idSubcuenta:'
1213<-------Source: line: 'if not idSubcuenta:'
1214        If: begin: 'block-if'
1214      <-Source: begin: 'block-if'
1214     <--While: begin: 'block-if'
1214    <---Source: begin: 'block-if'
1214   <----Function: begin: 'block-if'
1214  <-----Source: begin: 'block-if'
1214 <------Class: begin: 'block-if'
1214<-------Source: begin: 'block-if'
1214        Source: begin-gen
1214         InstructionFlow: begin-gen
1214          Value: begin-gen
1214           Identifier: begin-gen
1214            Identifier: expr: 'False'
1214          <-Value: expr: 'False'
1214           Identifier: end-gen
1214          Value: end-gen
1214          InstructionFlow: line: 'return False'
1214        <-Source: line: 'return False'
1214       <--If: line: 'return False'
1214      <---Source: line: 'return False'
1214     <----While: line: 'return False'
1214    <-----Source: line: 'return False'
1214   <------Function: line: 'return False'
1214  <-------Source: line: 'return False'
1214 <--------Class: line: 'return False'
1214<---------Source: line: 'return False'
1215         InstructionFlow: end-gen
1215        Source: end-gen
1215        If: end: 'block-if'
1215      <-Source: end: 'block-if'
1215     <--While: end: 'block-if'
1215    <---Source: end: 'block-if'
1215   <----Function: end: 'block-if'
1215  <-----Source: end: 'block-if'
1215 <------Class: end: 'block-if'
1215<-------Source: end: 'block-if'
1215       If: end-gen
1215       If: begin-gen
1215        Expression: begin-gen
1215         Identifier: begin-gen
1215          Identifier: expr: 'idSubcuenta'
1215        <-Expression: expr: 'idSubcuenta'
1215         Identifier: end-gen
1215         Compare: begin-gen
1215          Compare: expr: '=='
1215        <-Expression: expr: '=='
1215         Compare: end-gen
1215         Identifier: begin-gen
1215          Identifier: expr: 'True'
1215        <-Expression: expr: 'True'
1215         Identifier: end-gen
1215        Expression: end-gen
1215        If: line: 'if idSubcuenta == True:'
1215      <-Source: line: 'if idSubcuenta == True:'
1215     <--While: line: 'if idSubcuenta == True:'
1215    <---Source: line: 'if idSubcuenta == True:'
1215   <----Function: line: 'if idSubcuenta == True:'
1215  <-----Source: line: 'if idSubcuenta == True:'
1215 <------Class: line: 'if idSubcuenta == True:'
1215<-------Source: line: 'if idSubcuenta == True:'
1216        If: begin: 'block-if'
1216      <-Source: begin: 'block-if'
1216     <--While: begin: 'block-if'
1216    <---Source: begin: 'block-if'
1216   <----Function: begin: 'block-if'
1216  <-----Source: begin: 'block-if'
1216 <------Class: begin: 'block-if'
1216<-------Source: begin: 'block-if'
1216        Source: begin-gen
1216         InstructionFlow: begin-gen
1216          InstructionFlow: line: 'continue '
1216        <-Source: line: 'continue '
1216       <--If: line: 'continue '
1216      <---Source: line: 'continue '
1216     <----While: line: 'continue '
1216    <-----Source: line: 'continue '
1216   <------Function: line: 'continue '
1216  <-------Source: line: 'continue '
1216 <--------Class: line: 'continue '
1216<---------Source: line: 'continue '
1217         InstructionFlow: end-gen
1217        Source: end-gen
1217        If: end: 'block-if'
1217      <-Source: end: 'block-if'
1217     <--While: end: 'block-if'
1217    <---Source: end: 'block-if'
1217   <----Function: end: 'block-if'
1217  <-----Source: end: 'block-if'
1217 <------Class: end: 'block-if'
1217<-------Source: end: 'block-if'
1217       If: end-gen
1217       If: begin-gen
1217        Value: begin-gen
1217         OpUnary: begin-gen
1217          OpUnary: expr: 'not'
1217        <-Value: expr: 'not'
1217          Member: begin-gen
1217           Identifier: begin-gen
1217            Identifier: expr: 'self'
1217           Identifier: end-gen
1217           Identifier: begin-gen
1217            Identifier: expr: 'iface'
1217           Identifier: end-gen
1217           FunctionCall: begin-gen
1217            Value: begin-gen
1217             Identifier: begin-gen
1217              Identifier: expr: 'codSubcuenta'
1217            <-Value: expr: 'codSubcuenta'
1217             Identifier: end-gen
1217            Value: end-gen
1217            Value: begin-gen
1217             Identifier: begin-gen
1217              Identifier: expr: 'idSubcuenta'
1217            <-Value: expr: 'idSubcuenta'
1217             Identifier: end-gen
1217            Value: end-gen
1217            Value: begin-gen
1217             Identifier: begin-gen
1217              Identifier: expr: 'codCliente'
1217            <-Value: expr: 'codCliente'
1217             Identifier: end-gen
1217            Value: end-gen
1217            Value: begin-gen
1217             Identifier: begin-gen
1217              Identifier: expr: 'codEjercicio'
1217            <-Value: expr: 'codEjercicio'
1217             Identifier: end-gen
1217            Value: end-gen
1217            FunctionCall: expr: 'crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
1217           FunctionCall: end-gen
1217           Member: expr: 'self.iface.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
1217         <-OpUnary: expr: 'self.iface.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
1217        <--Value: expr: 'self.iface.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio)'
1217          Member: end-gen
1217         OpUnary: end-gen
1217        Value: end-gen
1217        If: line: 'if not self.iface.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio):'
1217      <-Source: line: 'if not self.iface.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio):'
1217     <--While: line: 'if not self.iface.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio):'
1217    <---Source: line: 'if not self.iface.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio):'
1217   <----Function: line: 'if not self.iface.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio):'
1217  <-----Source: line: 'if not self.iface.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio):'
1217 <------Class: line: 'if not self.iface.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio):'
1217<-------Source: line: 'if not self.iface.crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio):'
1218        If: begin: 'block-if'
1218      <-Source: begin: 'block-if'
1218     <--While: begin: 'block-if'
1218    <---Source: begin: 'block-if'
1218   <----Function: begin: 'block-if'
1218  <-----Source: begin: 'block-if'
1218 <------Class: begin: 'block-if'
1218<-------Source: begin: 'block-if'
1218        Source: begin-gen
1218         InstructionFlow: begin-gen
1218          Value: begin-gen
1218           Identifier: begin-gen
1218            Identifier: expr: 'False'
1218          <-Value: expr: 'False'
1218           Identifier: end-gen
1218          Value: end-gen
1218          InstructionFlow: line: 'return False'
1218        <-Source: line: 'return False'
1218       <--If: line: 'return False'
1218      <---Source: line: 'return False'
1218     <----While: line: 'return False'
1218    <-----Source: line: 'return False'
1218   <------Function: line: 'return False'
1218  <-------Source: line: 'return False'
1218 <--------Class: line: 'return False'
1218<---------Source: line: 'return False'
1219         InstructionFlow: end-gen
1219        Source: end-gen
1219        If: end: 'block-if'
1219      <-Source: end: 'block-if'
1219     <--While: end: 'block-if'
1219    <---Source: end: 'block-if'
1219   <----Function: end: 'block-if'
1219  <-----Source: end: 'block-if'
1219 <------Class: end: 'block-if'
1219<-------Source: end: 'block-if'
1219       If: end-gen
1219      Source: end-gen
1219      While: end: 'block-while'
1219    <-Source: end: 'block-while'
1219   <--Function: end: 'block-while'
1219  <---Source: end: 'block-while'
1219 <----Class: end: 'block-while'
1219<-----Source: end: 'block-while'
1219     While: end-gen
1219     InstructionFlow: begin-gen
1219      Value: begin-gen
1219       Identifier: begin-gen
1219        Identifier: expr: 'True'
1219      <-Value: expr: 'True'
1219       Identifier: end-gen
1219      Value: end-gen
1219      InstructionFlow: line: 'return True'
1219    <-Source: line: 'return True'
1219   <--Function: line: 'return True'
1219  <---Source: line: 'return True'
1219 <----Class: line: 'return True'
1219<-----Source: line: 'return True'
1221     InstructionFlow: end-gen
1221    Source: end-gen
1221    Function: end: 'block-def-oficial_rellenarSubcuentasCli'
1221  <-Source: end: 'block-def-oficial_rellenarSubcuentasCli'
1221 <--Class: end: 'block-def-oficial_rellenarSubcuentasCli'
1221<---Source: end: 'block-def-oficial_rellenarSubcuentasCli'
1222   Function: end-gen
1222   Function: begin-gen
1222    Variable: begin-gen
1222     Variable: expr: 'codProveedor'
1222    Variable: end-gen
1222    Variable: begin-gen
1222     Variable: expr: 'codSubcuenta'
1222    Variable: end-gen
1222    Variable: begin-gen
1222     Variable: expr: 'nombre'
1222    Variable: end-gen
1222    Function: line: 'def oficial_rellenarSubcuentasProv(self, codProveedor = None, codSubcuenta = None, nombre = None):'
1222  <-Source: line: 'def oficial_rellenarSubcuentasProv(self, codProveedor = None, codSubcuenta = None, nombre = None):'
1222 <--Class: line: 'def oficial_rellenarSubcuentasProv(self, codProveedor = None, codSubcuenta = None, nombre = None):'
1222<---Source: line: 'def oficial_rellenarSubcuentasProv(self, codProveedor = None, codSubcuenta = None, nombre = None):'
1223    Function: begin: 'block-def-oficial_rellenarSubcuentasProv'
1223  <-Source: begin: 'block-def-oficial_rellenarSubcuentasProv'
1223 <--Class: begin: 'block-def-oficial_rellenarSubcuentasProv'
1223<---Source: begin: 'block-def-oficial_rellenarSubcuentasProv'
1223    Source: begin-gen
1223     If: begin-gen
1223      Value: begin-gen
1223       OpUnary: begin-gen
1223        OpUnary: expr: 'not'
1223      <-Value: expr: 'not'
1223        Member: begin-gen
1223         Identifier: begin-gen
1223          Identifier: expr: 'sys'
1223         Identifier: end-gen
1223         FunctionCall: begin-gen
1223          Value: begin-gen
1223           Constant: begin-gen
1223            Constant: ctype: 'String' -> 'flcontppal'
1223            Constant: expr: 'u"flcontppal"'
1223          <-Value: expr: 'u"flcontppal"'
1223           Constant: end-gen
1223          Value: end-gen
1223          FunctionCall: expr: 'isLoadedModule(u"flcontppal")'
1223         FunctionCall: end-gen
1223         Member: expr: 'sys.isLoadedModule(u"flcontppal")'
1223       <-OpUnary: expr: 'sys.isLoadedModule(u"flcontppal")'
1223      <--Value: expr: 'sys.isLoadedModule(u"flcontppal")'
1223        Member: end-gen
1223       OpUnary: end-gen
1223      Value: end-gen
1223      If: line: 'if not sys.isLoadedModule(u"flcontppal"):'
1223    <-Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
1223   <--Function: line: 'if not sys.isLoadedModule(u"flcontppal"):'
1223  <---Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
1223 <----Class: line: 'if not sys.isLoadedModule(u"flcontppal"):'
1223<-----Source: line: 'if not sys.isLoadedModule(u"flcontppal"):'
1224      If: begin: 'block-if'
1224    <-Source: begin: 'block-if'
1224   <--Function: begin: 'block-if'
1224  <---Source: begin: 'block-if'
1224 <----Class: begin: 'block-if'
1224<-----Source: begin: 'block-if'
1224      Source: begin-gen
1224       InstructionFlow: begin-gen
1224        InstructionFlow: line: 'return '
1224      <-Source: line: 'return '
1224     <--If: line: 'return '
1224    <---Source: line: 'return '
1224   <----Function: line: 'return '
1224  <-----Source: line: 'return '
1224 <------Class: line: 'return '
1224<-------Source: line: 'return '
1225       InstructionFlow: end-gen
1225      Source: end-gen
1225      If: end: 'block-if'
1225    <-Source: end: 'block-if'
1225   <--Function: end: 'block-if'
1225  <---Source: end: 'block-if'
1225 <----Class: end: 'block-if'
1225<-----Source: end: 'block-if'
1225     If: end-gen
1225     DeclarationBlock: begin-gen
1225      Variable: begin-gen
1225       Variable: expr: 'util'
1225       Variable: expr: '='
1225       Value: begin-gen
1225        New: begin-gen
1225         Identifier: begin-gen
1225          Identifier: expr: 'FLUtil'
1225        <-New: expr: 'qsatype.FLUtil()'
1225       <--Value: expr: 'qsatype.FLUtil()'
1225      <---Variable: expr: 'qsatype.FLUtil()'
1225         Identifier: end-gen
1225        New: end-gen
1225       Value: end-gen
1225      Variable: end-gen
1225      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1225    <-Source: line: 'util = qsatype.FLUtil()'
1225   <--Function: line: 'util = qsatype.FLUtil()'
1225  <---Source: line: 'util = qsatype.FLUtil()'
1225 <----Class: line: 'util = qsatype.FLUtil()'
1225<-----Source: line: 'util = qsatype.FLUtil()'
1226     DeclarationBlock: end-gen
1226     DeclarationBlock: begin-gen
1226      Variable: begin-gen
1226       Variable: expr: 'qry'
1226       Variable: expr: '='
1226       Value: begin-gen
1226        New: begin-gen
1226         FunctionCall: begin-gen
1226          FunctionCall: expr: 'FLSqlQuery()'
1226        <-New: expr: 'qsatype.FLSqlQuery()'
1226       <--Value: expr: 'qsatype.FLSqlQuery()'
1226      <---Variable: expr: 'qsatype.FLSqlQuery()'
1226         FunctionCall: end-gen
1226        New: end-gen
1226       Value: end-gen
1226      Variable: end-gen
1226      DeclarationBlock: line: 'qry = qsatype.FLSqlQuery()'
1226    <-Source: line: 'qry = qsatype.FLSqlQuery()'
1226   <--Function: line: 'qry = qsatype.FLSqlQuery()'
1226  <---Source: line: 'qry = qsatype.FLSqlQuery()'
1226 <----Class: line: 'qry = qsatype.FLSqlQuery()'
1226<-----Source: line: 'qry = qsatype.FLSqlQuery()'
1227     DeclarationBlock: end-gen
1227     InstructionCall: begin-gen
1227      Member: begin-gen
1227       Identifier: begin-gen
1227        Identifier: expr: 'qry'
1227       Identifier: end-gen
1227       FunctionCall: begin-gen
1227        Value: begin-gen
1227         Constant: begin-gen
1227          Constant: ctype: 'String' -> 'ejercicios,co_subcuentasprov'
1227          Constant: expr: 'u"ejercicios,co_subcuentasprov"'
1227        <-Value: expr: 'u"ejercicios,co_subcuentasprov"'
1227         Constant: end-gen
1227        Value: end-gen
1227        FunctionCall: expr: 'setTablesList(u"ejercicios,co_subcuentasprov")'
1227       FunctionCall: end-gen
1227       Member: expr: 'qry.setTablesList(u"ejercicios,co_subcuentasprov")'
1227      Member: end-gen
1227      InstructionCall: line: 'qry.setTablesList(u"ejercicios,co_subcuentasprov")'
1227    <-Source: line: 'qry.setTablesList(u"ejercicios,co_subcuentasprov")'
1227   <--Function: line: 'qry.setTablesList(u"ejercicios,co_subcuentasprov")'
1227  <---Source: line: 'qry.setTablesList(u"ejercicios,co_subcuentasprov")'
1227 <----Class: line: 'qry.setTablesList(u"ejercicios,co_subcuentasprov")'
1227<-----Source: line: 'qry.setTablesList(u"ejercicios,co_subcuentasprov")'
1228     InstructionCall: end-gen
1228     InstructionCall: begin-gen
1228      Member: begin-gen
1228       Identifier: begin-gen
1228        Identifier: expr: 'qry'
1228       Identifier: end-gen
1228       FunctionCall: begin-gen
1228        Value: begin-gen
1228         Constant: begin-gen
1228          Constant: ctype: 'String' -> 'e.codejercicio'
1228          Constant: expr: 'u"e.codejercicio"'
1228        <-Value: expr: 'u"e.codejercicio"'
1228         Constant: end-gen
1228        Value: end-gen
1228        FunctionCall: expr: 'setSelect(u"e.codejercicio")'
1228       FunctionCall: end-gen
1228       Member: expr: 'qry.setSelect(u"e.codejercicio")'
1228      Member: end-gen
1228      InstructionCall: line: 'qry.setSelect(u"e.codejercicio")'
1228    <-Source: line: 'qry.setSelect(u"e.codejercicio")'
1228   <--Function: line: 'qry.setSelect(u"e.codejercicio")'
1228  <---Source: line: 'qry.setSelect(u"e.codejercicio")'
1228 <----Class: line: 'qry.setSelect(u"e.codejercicio")'
1228<-----Source: line: 'qry.setSelect(u"e.codejercicio")'
1229     InstructionCall: end-gen
1229     InstructionCall: begin-gen
1229      Member: begin-gen
1229       Identifier: begin-gen
1229        Identifier: expr: 'qry'
1229       Identifier: end-gen
1229       FunctionCall: begin-gen
1229        Expression: begin-gen
1229         Expression: expr: 'ustr('
1229         Constant: begin-gen
1229          Constant: ctype: 'String' -> "ejercicios e LEFT OUTER JOIN co_subcuentasprov s ON e.codejercicio = s.codejercicio AND s.codproveedor = '"
1229          Constant: expr: 'u"ejercicios e LEFT OUTER JOIN co_subcuentasprov s ON e.codejercicio = s.codejercicio AND s.codproveedor = \'"'
1229        <-Expression: expr: 'u"ejercicios e LEFT OUTER JOIN co_subcuentasprov s ON e.codejercicio = s.codejercicio AND s.codproveedor = \'"'
1229         Constant: end-gen
1229         Expression: expr: ','
1229         Identifier: begin-gen
1229          Identifier: expr: 'codProveedor'
1229        <-Expression: expr: 'codProveedor'
1229         Identifier: end-gen
1229         Expression: expr: ','
1229         Constant: begin-gen
1229          Constant: ctype: 'String' -> "'"
1229          Constant: expr: 'u"\'"'
1229        <-Expression: expr: 'u"\'"'
1229         Constant: end-gen
1229         Expression: expr: ')'
1229        Expression: end-gen
1229        FunctionCall: expr: 'setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentasprov s ON e.codejercicio = s.codejercicio AND s.codproveedor = \'" , codProveedor , u"\'" ))'
1229       FunctionCall: end-gen
1229       Member: expr: 'qry.setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentasprov s ON e.codejercicio = s.codejercicio AND s.codproveedor = \'" , codProveedor , u"\'" ))'
1229      Member: end-gen
1229      InstructionCall: line: 'qry.setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentasprov s ON e.codejercicio = s.codejercicio AND s.codproveedor = \'" , codProveedor , u"\'" ))'
1229    <-Source: line: 'qry.setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentasprov s ON e.codejercicio = s.codejercicio AND s.codproveedor = \'" , codProveedor , u"\'" ))'
1229   <--Function: line: 'qry.setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentasprov s ON e.codejercicio = s.codejercicio AND s.codproveedor = \'" , codProveedor , u"\'" ))'
1229  <---Source: line: 'qry.setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentasprov s ON e.codejercicio = s.codejercicio AND s.codproveedor = \'" , codProveedor , u"\'" ))'
1229 <----Class: line: 'qry.setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentasprov s ON e.codejercicio = s.codejercicio AND s.codproveedor = \'" , codProveedor , u"\'" ))'
1229<-----Source: line: 'qry.setFrom(ustr( u"ejercicios e LEFT OUTER JOIN co_subcuentasprov s ON e.codejercicio = s.codejercicio AND s.codproveedor = \'" , codProveedor , u"\'" ))'
1230     InstructionCall: end-gen
1230     InstructionCall: begin-gen
1230      Member: begin-gen
1230       Identifier: begin-gen
1230        Identifier: expr: 'qry'
1230       Identifier: end-gen
1230       FunctionCall: begin-gen
1230        Value: begin-gen
1230         Constant: begin-gen
1230          Constant: ctype: 'String' -> "s.id IS NULL AND e.estado = 'ABIERTO' AND e.fechafin >= CURRENT_DATE"
1230          Constant: expr: 'u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE"'
1230        <-Value: expr: 'u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE"'
1230         Constant: end-gen
1230        Value: end-gen
1230        FunctionCall: expr: 'setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1230       FunctionCall: end-gen
1230       Member: expr: 'qry.setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1230      Member: end-gen
1230      InstructionCall: line: 'qry.setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1230    <-Source: line: 'qry.setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1230   <--Function: line: 'qry.setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1230  <---Source: line: 'qry.setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1230 <----Class: line: 'qry.setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1230<-----Source: line: 'qry.setWhere(u"s.id IS NULL AND e.estado = \'ABIERTO\' AND e.fechafin >= CURRENT_DATE")'
1231     InstructionCall: end-gen
1231     If: begin-gen
1231      Value: begin-gen
1231       OpUnary: begin-gen
1231        OpUnary: expr: 'not'
1231      <-Value: expr: 'not'
1231        Member: begin-gen
1231         Identifier: begin-gen
1231          Identifier: expr: 'qry'
1231         Identifier: end-gen
1231         FunctionCall: begin-gen
1231          FunctionCall: expr: 'exec_()'
1231         FunctionCall: end-gen
1231         Member: expr: 'qry.exec_()'
1231       <-OpUnary: expr: 'qry.exec_()'
1231      <--Value: expr: 'qry.exec_()'
1231        Member: end-gen
1231       OpUnary: end-gen
1231      Value: end-gen
1231      If: line: 'if not qry.exec_():'
1231    <-Source: line: 'if not qry.exec_():'
1231   <--Function: line: 'if not qry.exec_():'
1231  <---Source: line: 'if not qry.exec_():'
1231 <----Class: line: 'if not qry.exec_():'
1231<-----Source: line: 'if not qry.exec_():'
1232      If: begin: 'block-if'
1232    <-Source: begin: 'block-if'
1232   <--Function: begin: 'block-if'
1232  <---Source: begin: 'block-if'
1232 <----Class: begin: 'block-if'
1232<-----Source: begin: 'block-if'
1232      Source: begin-gen
1232       InstructionFlow: begin-gen
1232        Value: begin-gen
1232         Identifier: begin-gen
1232          Identifier: expr: 'False'
1232        <-Value: expr: 'False'
1232         Identifier: end-gen
1232        Value: end-gen
1232        InstructionFlow: line: 'return False'
1232      <-Source: line: 'return False'
1232     <--If: line: 'return False'
1232    <---Source: line: 'return False'
1232   <----Function: line: 'return False'
1232  <-----Source: line: 'return False'
1232 <------Class: line: 'return False'
1232<-------Source: line: 'return False'
1233       InstructionFlow: end-gen
1233      Source: end-gen
1233      If: end: 'block-if'
1233    <-Source: end: 'block-if'
1233   <--Function: end: 'block-if'
1233  <---Source: end: 'block-if'
1233 <----Class: end: 'block-if'
1233<-----Source: end: 'block-if'
1233     If: end-gen
1233     DeclarationBlock: begin-gen
1233      Variable: begin-gen
1233       Variable: expr: 'idSubcuenta'
1233       Variable: expr: '='
1233       Variable: expr: '0'
1233      Variable: end-gen
1233      DeclarationBlock: line: 'idSubcuenta = 0'
1233    <-Source: line: 'idSubcuenta = 0'
1233   <--Function: line: 'idSubcuenta = 0'
1233  <---Source: line: 'idSubcuenta = 0'
1233 <----Class: line: 'idSubcuenta = 0'
1233<-----Source: line: 'idSubcuenta = 0'
1234     DeclarationBlock: end-gen
1234     DeclarationBlock: begin-gen
1234      Variable: begin-gen
1234       Variable: expr: 'codEjercicio'
1234       Variable: expr: '='
1234       Variable: expr: '""'
1234      Variable: end-gen
1234      DeclarationBlock: line: 'codEjercicio = ""'
1234    <-Source: line: 'codEjercicio = ""'
1234   <--Function: line: 'codEjercicio = ""'
1234  <---Source: line: 'codEjercicio = ""'
1234 <----Class: line: 'codEjercicio = ""'
1234<-----Source: line: 'codEjercicio = ""'
1235     DeclarationBlock: end-gen
1235     While: begin-gen
1235      Value: begin-gen
1235       Member: begin-gen
1235        Identifier: begin-gen
1235         Identifier: expr: 'qry'
1235        Identifier: end-gen
1235        FunctionCall: begin-gen
1235         FunctionCall: expr: 'next()'
1235        FunctionCall: end-gen
1235        Member: expr: 'qry.next()'
1235      <-Value: expr: 'qry.next()'
1235       Member: end-gen
1235      Value: end-gen
1235      While: line: 'while qry.next():'
1235    <-Source: line: 'while qry.next():'
1235   <--Function: line: 'while qry.next():'
1235  <---Source: line: 'while qry.next():'
1235 <----Class: line: 'while qry.next():'
1235<-----Source: line: 'while qry.next():'
1236      While: begin: 'block-while'
1236    <-Source: begin: 'block-while'
1236   <--Function: begin: 'block-while'
1236  <---Source: begin: 'block-while'
1236 <----Class: begin: 'block-while'
1236<-----Source: begin: 'block-while'
1236      Source: begin-gen
1236       InstructionUpdate: begin-gen
1236        Identifier: begin-gen
1236         Identifier: expr: 'codEjercicio'
1236        Identifier: end-gen
1236        OpUpdate: begin-gen
1236         OpUpdate: expr: '='
1236        OpUpdate: end-gen
1236        Value: begin-gen
1236         Member: begin-gen
1236          Identifier: begin-gen
1236           Identifier: expr: 'qry'
1236          Identifier: end-gen
1236          FunctionCall: begin-gen
1236           Value: begin-gen
1236            Constant: begin-gen
1236             Constant: ctype: 'Number' -> '0'
1236             Constant: expr: '0'
1236           <-Value: expr: '0'
1236            Constant: end-gen
1236           Value: end-gen
1236           FunctionCall: expr: 'value(0)'
1236          FunctionCall: end-gen
1236          Member: expr: 'qry.value(0)'
1236        <-Value: expr: 'qry.value(0)'
1236         Member: end-gen
1236        Value: end-gen
1236        InstructionUpdate: line: 'codEjercicio = qry.value(0)'
1236      <-Source: line: 'codEjercicio = qry.value(0)'
1236     <--While: line: 'codEjercicio = qry.value(0)'
1236    <---Source: line: 'codEjercicio = qry.value(0)'
1236   <----Function: line: 'codEjercicio = qry.value(0)'
1236  <-----Source: line: 'codEjercicio = qry.value(0)'
1236 <------Class: line: 'codEjercicio = qry.value(0)'
1236<-------Source: line: 'codEjercicio = qry.value(0)'
1237       InstructionUpdate: end-gen
1237       If: begin-gen
1237        Value: begin-gen
1237         OpUnary: begin-gen
1237          OpUnary: expr: 'not'
1237        <-Value: expr: 'not'
1237          Member: begin-gen
1237           Identifier: begin-gen
1237            Identifier: expr: 'util'
1237           Identifier: end-gen
1237           FunctionCall: begin-gen
1237            Value: begin-gen
1237             Constant: begin-gen
1237              Constant: ctype: 'String' -> 'co_epigrafes'
1237              Constant: expr: 'u"co_epigrafes"'
1237            <-Value: expr: 'u"co_epigrafes"'
1237             Constant: end-gen
1237            Value: end-gen
1237            Value: begin-gen
1237             Constant: begin-gen
1237              Constant: ctype: 'String' -> 'codepigrafe'
1237              Constant: expr: 'u"codepigrafe"'
1237            <-Value: expr: 'u"codepigrafe"'
1237             Constant: end-gen
1237            Value: end-gen
1237            Expression: begin-gen
1237             Expression: expr: 'ustr('
1237             Constant: begin-gen
1237              Constant: ctype: 'String' -> "codejercicio = '"
1237              Constant: expr: 'u"codejercicio = \'"'
1237            <-Expression: expr: 'u"codejercicio = \'"'
1237             Constant: end-gen
1237             Expression: expr: ','
1237             Identifier: begin-gen
1237              Identifier: expr: 'codEjercicio'
1237            <-Expression: expr: 'codEjercicio'
1237             Identifier: end-gen
1237             Expression: expr: ','
1237             Constant: begin-gen
1237              Constant: ctype: 'String' -> "'"
1237              Constant: expr: 'u"\'"'
1237            <-Expression: expr: 'u"\'"'
1237             Constant: end-gen
1237             Expression: expr: ')'
1237            Expression: end-gen
1237            FunctionCall: expr: 'sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" ))'
1237           FunctionCall: end-gen
1237           Member: expr: 'util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" ))'
1237         <-OpUnary: expr: 'util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" ))'
1237        <--Value: expr: 'util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" ))'
1237          Member: end-gen
1237         OpUnary: end-gen
1237        Value: end-gen
1237        If: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1237      <-Source: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1237     <--While: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1237    <---Source: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1237   <----Function: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1237  <-----Source: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1237 <------Class: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1237<-------Source: line: 'if not util.sqlSelect(u"co_epigrafes", u"codepigrafe", ustr( u"codejercicio = \'" , codEjercicio , u"\'" )):'
1238        If: begin: 'block-if'
1238      <-Source: begin: 'block-if'
1238     <--While: begin: 'block-if'
1238    <---Source: begin: 'block-if'
1238   <----Function: begin: 'block-if'
1238  <-----Source: begin: 'block-if'
1238 <------Class: begin: 'block-if'
1238<-------Source: begin: 'block-if'
1238        Source: begin-gen
1238         InstructionFlow: begin-gen
1238          InstructionFlow: line: 'continue '
1238        <-Source: line: 'continue '
1238       <--If: line: 'continue '
1238      <---Source: line: 'continue '
1238     <----While: line: 'continue '
1238    <-----Source: line: 'continue '
1238   <------Function: line: 'continue '
1238  <-------Source: line: 'continue '
1238 <--------Class: line: 'continue '
1238<---------Source: line: 'continue '
1239         InstructionFlow: end-gen
1239        Source: end-gen
1239        If: end: 'block-if'
1239      <-Source: end: 'block-if'
1239     <--While: end: 'block-if'
1239    <---Source: end: 'block-if'
1239   <----Function: end: 'block-if'
1239  <-----Source: end: 'block-if'
1239 <------Class: end: 'block-if'
1239<-------Source: end: 'block-if'
1239       If: end-gen
1239       InstructionUpdate: begin-gen
1239        Identifier: begin-gen
1239         Identifier: expr: 'idSubcuenta'
1239        Identifier: end-gen
1239        OpUpdate: begin-gen
1239         OpUpdate: expr: '='
1239        OpUpdate: end-gen
1239        Value: begin-gen
1239         Member: begin-gen
1239          Identifier: begin-gen
1239           Identifier: expr: 'self'
1239          Identifier: end-gen
1239          Identifier: begin-gen
1239           Identifier: expr: 'iface'
1239          Identifier: end-gen
1239          FunctionCall: begin-gen
1239           Value: begin-gen
1239            Identifier: begin-gen
1239             Identifier: expr: 'codSubcuenta'
1239           <-Value: expr: 'codSubcuenta'
1239            Identifier: end-gen
1239           Value: end-gen
1239           Value: begin-gen
1239            Identifier: begin-gen
1239             Identifier: expr: 'nombre'
1239           <-Value: expr: 'nombre'
1239            Identifier: end-gen
1239           Value: end-gen
1239           Value: begin-gen
1239            Constant: begin-gen
1239             Constant: ctype: 'String' -> 'PROVEE'
1239             Constant: expr: 'u"PROVEE"'
1239           <-Value: expr: 'u"PROVEE"'
1239            Constant: end-gen
1239           Value: end-gen
1239           Value: begin-gen
1239            Identifier: begin-gen
1239             Identifier: expr: 'codEjercicio'
1239           <-Value: expr: 'codEjercicio'
1239            Identifier: end-gen
1239           Value: end-gen
1239           FunctionCall: expr: 'crearSubcuenta(codSubcuenta, nombre, u"PROVEE", codEjercicio)'
1239          FunctionCall: end-gen
1239          Member: expr: 'self.iface.crearSubcuenta(codSubcuenta, nombre, u"PROVEE", codEjercicio)'
1239        <-Value: expr: 'self.iface.crearSubcuenta(codSubcuenta, nombre, u"PROVEE", codEjercicio)'
1239         Member: end-gen
1239        Value: end-gen
1239        InstructionUpdate: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"PROVEE", codEjercicio)'
1239      <-Source: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"PROVEE", codEjercicio)'
1239     <--While: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"PROVEE", codEjercicio)'
1239    <---Source: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"PROVEE", codEjercicio)'
1239   <----Function: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"PROVEE", codEjercicio)'
1239  <-----Source: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"PROVEE", codEjercicio)'
1239 <------Class: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"PROVEE", codEjercicio)'
1239<-------Source: line: 'idSubcuenta = self.iface.crearSubcuenta(codSubcuenta, nombre, u"PROVEE", codEjercicio)'
1240       InstructionUpdate: end-gen
1240       If: begin-gen
1240        Value: begin-gen
1240         OpUnary: begin-gen
1240          OpUnary: expr: 'not'
1240        <-Value: expr: 'not'
1240          Identifier: begin-gen
1240           Identifier: expr: 'idSubcuenta'
1240         <-OpUnary: expr: 'idSubcuenta'
1240        <--Value: expr: 'idSubcuenta'
1240          Identifier: end-gen
1240         OpUnary: end-gen
1240        Value: end-gen
1240        If: line: 'if not idSubcuenta:'
1240      <-Source: line: 'if not idSubcuenta:'
1240     <--While: line: 'if not idSubcuenta:'
1240    <---Source: line: 'if not idSubcuenta:'
1240   <----Function: line: 'if not idSubcuenta:'
1240  <-----Source: line: 'if not idSubcuenta:'
1240 <------Class: line: 'if not idSubcuenta:'
1240<-------Source: line: 'if not idSubcuenta:'
1241        If: begin: 'block-if'
1241      <-Source: begin: 'block-if'
1241     <--While: begin: 'block-if'
1241    <---Source: begin: 'block-if'
1241   <----Function: begin: 'block-if'
1241  <-----Source: begin: 'block-if'
1241 <------Class: begin: 'block-if'
1241<-------Source: begin: 'block-if'
1241        Source: begin-gen
1241         InstructionFlow: begin-gen
1241          Value: begin-gen
1241           Identifier: begin-gen
1241            Identifier: expr: 'False'
1241          <-Value: expr: 'False'
1241           Identifier: end-gen
1241          Value: end-gen
1241          InstructionFlow: line: 'return False'
1241        <-Source: line: 'return False'
1241       <--If: line: 'return False'
1241      <---Source: line: 'return False'
1241     <----While: line: 'return False'
1241    <-----Source: line: 'return False'
1241   <------Function: line: 'return False'
1241  <-------Source: line: 'return False'
1241 <--------Class: line: 'return False'
1241<---------Source: line: 'return False'
1242         InstructionFlow: end-gen
1242        Source: end-gen
1242        If: end: 'block-if'
1242      <-Source: end: 'block-if'
1242     <--While: end: 'block-if'
1242    <---Source: end: 'block-if'
1242   <----Function: end: 'block-if'
1242  <-----Source: end: 'block-if'
1242 <------Class: end: 'block-if'
1242<-------Source: end: 'block-if'
1242       If: end-gen
1242       If: begin-gen
1242        Expression: begin-gen
1242         Identifier: begin-gen
1242          Identifier: expr: 'idSubcuenta'
1242        <-Expression: expr: 'idSubcuenta'
1242         Identifier: end-gen
1242         Compare: begin-gen
1242          Compare: expr: '=='
1242        <-Expression: expr: '=='
1242         Compare: end-gen
1242         Identifier: begin-gen
1242          Identifier: expr: 'True'
1242        <-Expression: expr: 'True'
1242         Identifier: end-gen
1242        Expression: end-gen
1242        If: line: 'if idSubcuenta == True:'
1242      <-Source: line: 'if idSubcuenta == True:'
1242     <--While: line: 'if idSubcuenta == True:'
1242    <---Source: line: 'if idSubcuenta == True:'
1242   <----Function: line: 'if idSubcuenta == True:'
1242  <-----Source: line: 'if idSubcuenta == True:'
1242 <------Class: line: 'if idSubcuenta == True:'
1242<-------Source: line: 'if idSubcuenta == True:'
1243        If: begin: 'block-if'
1243      <-Source: begin: 'block-if'
1243     <--While: begin: 'block-if'
1243    <---Source: begin: 'block-if'
1243   <----Function: begin: 'block-if'
1243  <-----Source: begin: 'block-if'
1243 <------Class: begin: 'block-if'
1243<-------Source: begin: 'block-if'
1243        Source: begin-gen
1243         InstructionFlow: begin-gen
1243          InstructionFlow: line: 'continue '
1243        <-Source: line: 'continue '
1243       <--If: line: 'continue '
1243      <---Source: line: 'continue '
1243     <----While: line: 'continue '
1243    <-----Source: line: 'continue '
1243   <------Function: line: 'continue '
1243  <-------Source: line: 'continue '
1243 <--------Class: line: 'continue '
1243<---------Source: line: 'continue '
1244         InstructionFlow: end-gen
1244        Source: end-gen
1244        If: end: 'block-if'
1244      <-Source: end: 'block-if'
1244     <--While: end: 'block-if'
1244    <---Source: end: 'block-if'
1244   <----Function: end: 'block-if'
1244  <-----Source: end: 'block-if'
1244 <------Class: end: 'block-if'
1244<-------Source: end: 'block-if'
1244       If: end-gen
1244       If: begin-gen
1244        Value: begin-gen
1244         OpUnary: begin-gen
1244          OpUnary: expr: 'not'
1244        <-Value: expr: 'not'
1244          Member: begin-gen
1244           Identifier: begin-gen
1244            Identifier: expr: 'self'
1244           Identifier: end-gen
1244           Identifier: begin-gen
1244            Identifier: expr: 'iface'
1244           Identifier: end-gen
1244           FunctionCall: begin-gen
1244            Value: begin-gen
1244             Identifier: begin-gen
1244              Identifier: expr: 'codSubcuenta'
1244            <-Value: expr: 'codSubcuenta'
1244             Identifier: end-gen
1244            Value: end-gen
1244            Value: begin-gen
1244             Identifier: begin-gen
1244              Identifier: expr: 'idSubcuenta'
1244            <-Value: expr: 'idSubcuenta'
1244             Identifier: end-gen
1244            Value: end-gen
1244            Value: begin-gen
1244             Identifier: begin-gen
1244              Identifier: expr: 'codProveedor'
1244            <-Value: expr: 'codProveedor'
1244             Identifier: end-gen
1244            Value: end-gen
1244            Value: begin-gen
1244             Identifier: begin-gen
1244              Identifier: expr: 'codEjercicio'
1244            <-Value: expr: 'codEjercicio'
1244             Identifier: end-gen
1244            Value: end-gen
1244            FunctionCall: expr: 'crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
1244           FunctionCall: end-gen
1244           Member: expr: 'self.iface.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
1244         <-OpUnary: expr: 'self.iface.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
1244        <--Value: expr: 'self.iface.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio)'
1244          Member: end-gen
1244         OpUnary: end-gen
1244        Value: end-gen
1244        If: line: 'if not self.iface.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio):'
1244      <-Source: line: 'if not self.iface.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio):'
1244     <--While: line: 'if not self.iface.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio):'
1244    <---Source: line: 'if not self.iface.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio):'
1244   <----Function: line: 'if not self.iface.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio):'
1244  <-----Source: line: 'if not self.iface.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio):'
1244 <------Class: line: 'if not self.iface.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio):'
1244<-------Source: line: 'if not self.iface.crearSubcuentaProv(codSubcuenta, idSubcuenta, codProveedor, codEjercicio):'
1245        If: begin: 'block-if'
1245      <-Source: begin: 'block-if'
1245     <--While: begin: 'block-if'
1245    <---Source: begin: 'block-if'
1245   <----Function: begin: 'block-if'
1245  <-----Source: begin: 'block-if'
1245 <------Class: begin: 'block-if'
1245<-------Source: begin: 'block-if'
1245        Source: begin-gen
1245         InstructionFlow: begin-gen
1245          Value: begin-gen
1245           Identifier: begin-gen
1245            Identifier: expr: 'False'
1245          <-Value: expr: 'False'
1245           Identifier: end-gen
1245          Value: end-gen
1245          InstructionFlow: line: 'return False'
1245        <-Source: line: 'return False'
1245       <--If: line: 'return False'
1245      <---Source: line: 'return False'
1245     <----While: line: 'return False'
1245    <-----Source: line: 'return False'
1245   <------Function: line: 'return False'
1245  <-------Source: line: 'return False'
1245 <--------Class: line: 'return False'
1245<---------Source: line: 'return False'
1246         InstructionFlow: end-gen
1246        Source: end-gen
1246        If: end: 'block-if'
1246      <-Source: end: 'block-if'
1246     <--While: end: 'block-if'
1246    <---Source: end: 'block-if'
1246   <----Function: end: 'block-if'
1246  <-----Source: end: 'block-if'
1246 <------Class: end: 'block-if'
1246<-------Source: end: 'block-if'
1246       If: end-gen
1246      Source: end-gen
1246      While: end: 'block-while'
1246    <-Source: end: 'block-while'
1246   <--Function: end: 'block-while'
1246  <---Source: end: 'block-while'
1246 <----Class: end: 'block-while'
1246<-----Source: end: 'block-while'
1246     While: end-gen
1246     InstructionFlow: begin-gen
1246      Value: begin-gen
1246       Identifier: begin-gen
1246        Identifier: expr: 'True'
1246      <-Value: expr: 'True'
1246       Identifier: end-gen
1246      Value: end-gen
1246      InstructionFlow: line: 'return True'
1246    <-Source: line: 'return True'
1246   <--Function: line: 'return True'
1246  <---Source: line: 'return True'
1246 <----Class: line: 'return True'
1246<-----Source: line: 'return True'
1248     InstructionFlow: end-gen
1248    Source: end-gen
1248    Function: end: 'block-def-oficial_rellenarSubcuentasProv'
1248  <-Source: end: 'block-def-oficial_rellenarSubcuentasProv'
1248 <--Class: end: 'block-def-oficial_rellenarSubcuentasProv'
1248<---Source: end: 'block-def-oficial_rellenarSubcuentasProv'
1249   Function: end-gen
1249   Function: begin-gen
1249    Function: line: 'def oficial_automataActivado(self):'
1249  <-Source: line: 'def oficial_automataActivado(self):'
1249 <--Class: line: 'def oficial_automataActivado(self):'
1249<---Source: line: 'def oficial_automataActivado(self):'
1250    Function: begin: 'block-def-oficial_automataActivado'
1250  <-Source: begin: 'block-def-oficial_automataActivado'
1250 <--Class: begin: 'block-def-oficial_automataActivado'
1250<---Source: begin: 'block-def-oficial_automataActivado'
1250    Source: begin-gen
1250     If: begin-gen
1250      Value: begin-gen
1250       OpUnary: begin-gen
1250        OpUnary: expr: 'not'
1250      <-Value: expr: 'not'
1250        Member: begin-gen
1250         Identifier: begin-gen
1250          Identifier: expr: 'sys'
1250         Identifier: end-gen
1250         FunctionCall: begin-gen
1250          Value: begin-gen
1250           Constant: begin-gen
1250            Constant: ctype: 'String' -> 'flautomata'
1250            Constant: expr: 'u"flautomata"'
1250          <-Value: expr: 'u"flautomata"'
1250           Constant: end-gen
1250          Value: end-gen
1250          FunctionCall: expr: 'isLoadedModule(u"flautomata")'
1250         FunctionCall: end-gen
1250         Member: expr: 'sys.isLoadedModule(u"flautomata")'
1250       <-OpUnary: expr: 'sys.isLoadedModule(u"flautomata")'
1250      <--Value: expr: 'sys.isLoadedModule(u"flautomata")'
1250        Member: end-gen
1250       OpUnary: end-gen
1250      Value: end-gen
1250      If: line: 'if not sys.isLoadedModule(u"flautomata"):'
1250    <-Source: line: 'if not sys.isLoadedModule(u"flautomata"):'
1250   <--Function: line: 'if not sys.isLoadedModule(u"flautomata"):'
1250  <---Source: line: 'if not sys.isLoadedModule(u"flautomata"):'
1250 <----Class: line: 'if not sys.isLoadedModule(u"flautomata"):'
1250<-----Source: line: 'if not sys.isLoadedModule(u"flautomata"):'
1251      If: begin: 'block-if'
1251    <-Source: begin: 'block-if'
1251   <--Function: begin: 'block-if'
1251  <---Source: begin: 'block-if'
1251 <----Class: begin: 'block-if'
1251<-----Source: begin: 'block-if'
1251      Source: begin-gen
1251       InstructionFlow: begin-gen
1251        Value: begin-gen
1251         Identifier: begin-gen
1251          Identifier: expr: 'False'
1251        <-Value: expr: 'False'
1251         Identifier: end-gen
1251        Value: end-gen
1251        InstructionFlow: line: 'return False'
1251      <-Source: line: 'return False'
1251     <--If: line: 'return False'
1251    <---Source: line: 'return False'
1251   <----Function: line: 'return False'
1251  <-----Source: line: 'return False'
1251 <------Class: line: 'return False'
1251<-------Source: line: 'return False'
1252       InstructionFlow: end-gen
1252      Source: end-gen
1252      If: end: 'block-if'
1252    <-Source: end: 'block-if'
1252   <--Function: end: 'block-if'
1252  <---Source: end: 'block-if'
1252 <----Class: end: 'block-if'
1252<-----Source: end: 'block-if'
1252     If: end-gen
1252     If: begin-gen
1252      Value: begin-gen
1252       Member: begin-gen
1252        Identifier: begin-gen
1252         Identifier: expr: 'formau_automata'
1252        Identifier: end-gen
1252        Identifier: begin-gen
1252         Identifier: expr: 'iface'
1252        Identifier: end-gen
1252        FunctionCall: begin-gen
1252         FunctionCall: expr: 'pub_activado()'
1252        FunctionCall: end-gen
1252        Member: expr: 'formau_automata.iface.pub_activado()'
1252      <-Value: expr: 'formau_automata.iface.pub_activado()'
1252       Member: end-gen
1252      Value: end-gen
1252      If: line: 'if formau_automata.iface.pub_activado():'
1252    <-Source: line: 'if formau_automata.iface.pub_activado():'
1252   <--Function: line: 'if formau_automata.iface.pub_activado():'
1252  <---Source: line: 'if formau_automata.iface.pub_activado():'
1252 <----Class: line: 'if formau_automata.iface.pub_activado():'
1252<-----Source: line: 'if formau_automata.iface.pub_activado():'
1253      If: begin: 'block-if'
1253    <-Source: begin: 'block-if'
1253   <--Function: begin: 'block-if'
1253  <---Source: begin: 'block-if'
1253 <----Class: begin: 'block-if'
1253<-----Source: begin: 'block-if'
1253      Source: begin-gen
1253       InstructionFlow: begin-gen
1253        Value: begin-gen
1253         Identifier: begin-gen
1253          Identifier: expr: 'True'
1253        <-Value: expr: 'True'
1253         Identifier: end-gen
1253        Value: end-gen
1253        InstructionFlow: line: 'return True'
1253      <-Source: line: 'return True'
1253     <--If: line: 'return True'
1253    <---Source: line: 'return True'
1253   <----Function: line: 'return True'
1253  <-----Source: line: 'return True'
1253 <------Class: line: 'return True'
1253<-------Source: line: 'return True'
1254       InstructionFlow: end-gen
1254      Source: end-gen
1254      If: end: 'block-if'
1254    <-Source: end: 'block-if'
1254   <--Function: end: 'block-if'
1254  <---Source: end: 'block-if'
1254 <----Class: end: 'block-if'
1254<-----Source: end: 'block-if'
1254     If: end-gen
1254     InstructionFlow: begin-gen
1254      Value: begin-gen
1254       Identifier: begin-gen
1254        Identifier: expr: 'False'
1254      <-Value: expr: 'False'
1254       Identifier: end-gen
1254      Value: end-gen
1254      InstructionFlow: line: 'return False'
1254    <-Source: line: 'return False'
1254   <--Function: line: 'return False'
1254  <---Source: line: 'return False'
1254 <----Class: line: 'return False'
1254<-----Source: line: 'return False'
1255     InstructionFlow: end-gen
1255    Source: end-gen
1255    Function: end: 'block-def-oficial_automataActivado'
1255  <-Source: end: 'block-def-oficial_automataActivado'
1255 <--Class: end: 'block-def-oficial_automataActivado'
1255<---Source: end: 'block-def-oficial_automataActivado'
1256   Function: end-gen
1256   Function: begin-gen
1256    Variable: begin-gen
1256     Variable: expr: 'codCliente'
1256    Variable: end-gen
1256    Variable: begin-gen
1256     Variable: expr: 'fecha'
1256    Variable: end-gen
1256    Function: line: 'def oficial_clienteActivo(self, codCliente = None, fecha = None):'
1256  <-Source: line: 'def oficial_clienteActivo(self, codCliente = None, fecha = None):'
1256 <--Class: line: 'def oficial_clienteActivo(self, codCliente = None, fecha = None):'
1256<---Source: line: 'def oficial_clienteActivo(self, codCliente = None, fecha = None):'
1257    Function: begin: 'block-def-oficial_clienteActivo'
1257  <-Source: begin: 'block-def-oficial_clienteActivo'
1257 <--Class: begin: 'block-def-oficial_clienteActivo'
1257<---Source: begin: 'block-def-oficial_clienteActivo'
1257    Source: begin-gen
1257     DeclarationBlock: begin-gen
1257      Variable: begin-gen
1257       Variable: expr: 'util'
1257       Variable: expr: '='
1257       Value: begin-gen
1257        New: begin-gen
1257         Identifier: begin-gen
1257          Identifier: expr: 'FLUtil'
1257        <-New: expr: 'qsatype.FLUtil()'
1257       <--Value: expr: 'qsatype.FLUtil()'
1257      <---Variable: expr: 'qsatype.FLUtil()'
1257         Identifier: end-gen
1257        New: end-gen
1257       Value: end-gen
1257      Variable: end-gen
1257      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1257    <-Source: line: 'util = qsatype.FLUtil()'
1257   <--Function: line: 'util = qsatype.FLUtil()'
1257  <---Source: line: 'util = qsatype.FLUtil()'
1257 <----Class: line: 'util = qsatype.FLUtil()'
1257<-----Source: line: 'util = qsatype.FLUtil()'
1258     DeclarationBlock: end-gen
1258     If: begin-gen
1258      Expression: begin-gen
1258       OpUnary: begin-gen
1258        OpUnary: expr: 'not'
1258      <-Expression: expr: 'not'
1258        Identifier: begin-gen
1258         Identifier: expr: 'codCliente'
1258       <-OpUnary: expr: 'codCliente'
1258      <--Expression: expr: 'codCliente'
1258        Identifier: end-gen
1258       OpUnary: end-gen
1258       Compare: begin-gen
1258        Compare: expr: 'or'
1258      <-Expression: expr: 'or'
1258       Compare: end-gen
1258       Identifier: begin-gen
1258        Identifier: expr: 'codCliente'
1258      <-Expression: expr: 'codCliente'
1258       Identifier: end-gen
1258       Compare: begin-gen
1258        Compare: expr: '=='
1258      <-Expression: expr: '=='
1258       Compare: end-gen
1258       Constant: begin-gen
1258        Constant: ctype: 'String' -> ''
1258        Constant: expr: 'u""'
1258      <-Expression: expr: 'u""'
1258       Constant: end-gen
1258      Expression: end-gen
1258      If: line: 'if not codCliente or codCliente == u"":'
1258    <-Source: line: 'if not codCliente or codCliente == u"":'
1258   <--Function: line: 'if not codCliente or codCliente == u"":'
1258  <---Source: line: 'if not codCliente or codCliente == u"":'
1258 <----Class: line: 'if not codCliente or codCliente == u"":'
1258<-----Source: line: 'if not codCliente or codCliente == u"":'
1259      If: begin: 'block-if'
1259    <-Source: begin: 'block-if'
1259   <--Function: begin: 'block-if'
1259  <---Source: begin: 'block-if'
1259 <----Class: begin: 'block-if'
1259<-----Source: begin: 'block-if'
1259      Source: begin-gen
1259       InstructionFlow: begin-gen
1259        Value: begin-gen
1259         Identifier: begin-gen
1259          Identifier: expr: 'True'
1259        <-Value: expr: 'True'
1259         Identifier: end-gen
1259        Value: end-gen
1259        InstructionFlow: line: 'return True'
1259      <-Source: line: 'return True'
1259     <--If: line: 'return True'
1259    <---Source: line: 'return True'
1259   <----Function: line: 'return True'
1259  <-----Source: line: 'return True'
1259 <------Class: line: 'return True'
1259<-------Source: line: 'return True'
1260       InstructionFlow: end-gen
1260      Source: end-gen
1260      If: end: 'block-if'
1260    <-Source: end: 'block-if'
1260   <--Function: end: 'block-if'
1260  <---Source: end: 'block-if'
1260 <----Class: end: 'block-if'
1260<-----Source: end: 'block-if'
1260     If: end-gen
1260     DeclarationBlock: begin-gen
1260      Variable: begin-gen
1260       Variable: expr: 'qryBaja'
1260       Variable: expr: '='
1260       Value: begin-gen
1260        New: begin-gen
1260         FunctionCall: begin-gen
1260          FunctionCall: expr: 'FLSqlQuery()'
1260        <-New: expr: 'qsatype.FLSqlQuery()'
1260       <--Value: expr: 'qsatype.FLSqlQuery()'
1260      <---Variable: expr: 'qsatype.FLSqlQuery()'
1260         FunctionCall: end-gen
1260        New: end-gen
1260       Value: end-gen
1260      Variable: end-gen
1260      DeclarationBlock: line: 'qryBaja = qsatype.FLSqlQuery()'
1260    <-Source: line: 'qryBaja = qsatype.FLSqlQuery()'
1260   <--Function: line: 'qryBaja = qsatype.FLSqlQuery()'
1260  <---Source: line: 'qryBaja = qsatype.FLSqlQuery()'
1260 <----Class: line: 'qryBaja = qsatype.FLSqlQuery()'
1260<-----Source: line: 'qryBaja = qsatype.FLSqlQuery()'
1261     DeclarationBlock: end-gen
1261     InstructionCall: begin-gen
1261      Member: begin-gen
1261       Identifier: begin-gen
1261        Identifier: expr: 'qryBaja'
1261       Identifier: end-gen
1261       FunctionCall: begin-gen
1261        Value: begin-gen
1261         Constant: begin-gen
1261          Constant: ctype: 'String' -> 'clientes'
1261          Constant: expr: 'u"clientes"'
1261        <-Value: expr: 'u"clientes"'
1261         Constant: end-gen
1261        Value: end-gen
1261        FunctionCall: expr: 'setTablesList(u"clientes")'
1261       FunctionCall: end-gen
1261       Member: expr: 'qryBaja.setTablesList(u"clientes")'
1261      Member: end-gen
1261      InstructionCall: line: 'qryBaja.setTablesList(u"clientes")'
1261    <-Source: line: 'qryBaja.setTablesList(u"clientes")'
1261   <--Function: line: 'qryBaja.setTablesList(u"clientes")'
1261  <---Source: line: 'qryBaja.setTablesList(u"clientes")'
1261 <----Class: line: 'qryBaja.setTablesList(u"clientes")'
1261<-----Source: line: 'qryBaja.setTablesList(u"clientes")'
1262     InstructionCall: end-gen
1262     InstructionCall: begin-gen
1262      Member: begin-gen
1262       Identifier: begin-gen
1262        Identifier: expr: 'qryBaja'
1262       Identifier: end-gen
1262       FunctionCall: begin-gen
1262        Value: begin-gen
1262         Constant: begin-gen
1262          Constant: ctype: 'String' -> 'debaja, fechabaja'
1262          Constant: expr: 'u"debaja, fechabaja"'
1262        <-Value: expr: 'u"debaja, fechabaja"'
1262         Constant: end-gen
1262        Value: end-gen
1262        FunctionCall: expr: 'setSelect(u"debaja, fechabaja")'
1262       FunctionCall: end-gen
1262       Member: expr: 'qryBaja.setSelect(u"debaja, fechabaja")'
1262      Member: end-gen
1262      InstructionCall: line: 'qryBaja.setSelect(u"debaja, fechabaja")'
1262    <-Source: line: 'qryBaja.setSelect(u"debaja, fechabaja")'
1262   <--Function: line: 'qryBaja.setSelect(u"debaja, fechabaja")'
1262  <---Source: line: 'qryBaja.setSelect(u"debaja, fechabaja")'
1262 <----Class: line: 'qryBaja.setSelect(u"debaja, fechabaja")'
1262<-----Source: line: 'qryBaja.setSelect(u"debaja, fechabaja")'
1263     InstructionCall: end-gen
1263     InstructionCall: begin-gen
1263      Member: begin-gen
1263       Identifier: begin-gen
1263        Identifier: expr: 'qryBaja'
1263       Identifier: end-gen
1263       FunctionCall: begin-gen
1263        Value: begin-gen
1263         Constant: begin-gen
1263          Constant: ctype: 'String' -> 'clientes'
1263          Constant: expr: 'u"clientes"'
1263        <-Value: expr: 'u"clientes"'
1263         Constant: end-gen
1263        Value: end-gen
1263        FunctionCall: expr: 'setFrom(u"clientes")'
1263       FunctionCall: end-gen
1263       Member: expr: 'qryBaja.setFrom(u"clientes")'
1263      Member: end-gen
1263      InstructionCall: line: 'qryBaja.setFrom(u"clientes")'
1263    <-Source: line: 'qryBaja.setFrom(u"clientes")'
1263   <--Function: line: 'qryBaja.setFrom(u"clientes")'
1263  <---Source: line: 'qryBaja.setFrom(u"clientes")'
1263 <----Class: line: 'qryBaja.setFrom(u"clientes")'
1263<-----Source: line: 'qryBaja.setFrom(u"clientes")'
1264     InstructionCall: end-gen
1264     InstructionCall: begin-gen
1264      Member: begin-gen
1264       Identifier: begin-gen
1264        Identifier: expr: 'qryBaja'
1264       Identifier: end-gen
1264       FunctionCall: begin-gen
1264        Expression: begin-gen
1264         Expression: expr: 'ustr('
1264         Constant: begin-gen
1264          Constant: ctype: 'String' -> "codcliente = '"
1264          Constant: expr: 'u"codcliente = \'"'
1264        <-Expression: expr: 'u"codcliente = \'"'
1264         Constant: end-gen
1264         Expression: expr: ','
1264         Identifier: begin-gen
1264          Identifier: expr: 'codCliente'
1264        <-Expression: expr: 'codCliente'
1264         Identifier: end-gen
1264         Expression: expr: ','
1264         Constant: begin-gen
1264          Constant: ctype: 'String' -> "'"
1264          Constant: expr: 'u"\'"'
1264        <-Expression: expr: 'u"\'"'
1264         Constant: end-gen
1264         Expression: expr: ')'
1264        Expression: end-gen
1264        FunctionCall: expr: 'setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1264       FunctionCall: end-gen
1264       Member: expr: 'qryBaja.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1264      Member: end-gen
1264      InstructionCall: line: 'qryBaja.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1264    <-Source: line: 'qryBaja.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1264   <--Function: line: 'qryBaja.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1264  <---Source: line: 'qryBaja.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1264 <----Class: line: 'qryBaja.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1264<-----Source: line: 'qryBaja.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1265     InstructionCall: end-gen
1265     InstructionCall: begin-gen
1265      Member: begin-gen
1265       Identifier: begin-gen
1265        Identifier: expr: 'qryBaja'
1265       Identifier: end-gen
1265       FunctionCall: begin-gen
1265        Value: begin-gen
1265         Identifier: begin-gen
1265          Identifier: expr: 'True'
1265        <-Value: expr: 'True'
1265         Identifier: end-gen
1265        Value: end-gen
1265        FunctionCall: expr: 'setForwardOnly(True)'
1265       FunctionCall: end-gen
1265       Member: expr: 'qryBaja.setForwardOnly(True)'
1265      Member: end-gen
1265      InstructionCall: line: 'qryBaja.setForwardOnly(True)'
1265    <-Source: line: 'qryBaja.setForwardOnly(True)'
1265   <--Function: line: 'qryBaja.setForwardOnly(True)'
1265  <---Source: line: 'qryBaja.setForwardOnly(True)'
1265 <----Class: line: 'qryBaja.setForwardOnly(True)'
1265<-----Source: line: 'qryBaja.setForwardOnly(True)'
1266     InstructionCall: end-gen
1266     If: begin-gen
1266      Value: begin-gen
1266       OpUnary: begin-gen
1266        OpUnary: expr: 'not'
1266      <-Value: expr: 'not'
1266        Member: begin-gen
1266         Identifier: begin-gen
1266          Identifier: expr: 'qryBaja'
1266         Identifier: end-gen
1266         FunctionCall: begin-gen
1266          FunctionCall: expr: 'exec_()'
1266         FunctionCall: end-gen
1266         Member: expr: 'qryBaja.exec_()'
1266       <-OpUnary: expr: 'qryBaja.exec_()'
1266      <--Value: expr: 'qryBaja.exec_()'
1266        Member: end-gen
1266       OpUnary: end-gen
1266      Value: end-gen
1266      If: line: 'if not qryBaja.exec_():'
1266    <-Source: line: 'if not qryBaja.exec_():'
1266   <--Function: line: 'if not qryBaja.exec_():'
1266  <---Source: line: 'if not qryBaja.exec_():'
1266 <----Class: line: 'if not qryBaja.exec_():'
1266<-----Source: line: 'if not qryBaja.exec_():'
1267      If: begin: 'block-if'
1267    <-Source: begin: 'block-if'
1267   <--Function: begin: 'block-if'
1267  <---Source: begin: 'block-if'
1267 <----Class: begin: 'block-if'
1267<-----Source: begin: 'block-if'
1267      Source: begin-gen
1267       InstructionFlow: begin-gen
1267        Value: begin-gen
1267         Identifier: begin-gen
1267          Identifier: expr: 'False'
1267        <-Value: expr: 'False'
1267         Identifier: end-gen
1267        Value: end-gen
1267        InstructionFlow: line: 'return False'
1267      <-Source: line: 'return False'
1267     <--If: line: 'return False'
1267    <---Source: line: 'return False'
1267   <----Function: line: 'return False'
1267  <-----Source: line: 'return False'
1267 <------Class: line: 'return False'
1267<-------Source: line: 'return False'
1268       InstructionFlow: end-gen
1268      Source: end-gen
1268      If: end: 'block-if'
1268    <-Source: end: 'block-if'
1268   <--Function: end: 'block-if'
1268  <---Source: end: 'block-if'
1268 <----Class: end: 'block-if'
1268<-----Source: end: 'block-if'
1268     If: end-gen
1268     If: begin-gen
1268      Value: begin-gen
1268       OpUnary: begin-gen
1268        OpUnary: expr: 'not'
1268      <-Value: expr: 'not'
1268        Member: begin-gen
1268         Identifier: begin-gen
1268          Identifier: expr: 'qryBaja'
1268         Identifier: end-gen
1268         FunctionCall: begin-gen
1268          FunctionCall: expr: 'first()'
1268         FunctionCall: end-gen
1268         Member: expr: 'qryBaja.first()'
1268       <-OpUnary: expr: 'qryBaja.first()'
1268      <--Value: expr: 'qryBaja.first()'
1268        Member: end-gen
1268       OpUnary: end-gen
1268      Value: end-gen
1268      If: line: 'if not qryBaja.first():'
1268    <-Source: line: 'if not qryBaja.first():'
1268   <--Function: line: 'if not qryBaja.first():'
1268  <---Source: line: 'if not qryBaja.first():'
1268 <----Class: line: 'if not qryBaja.first():'
1268<-----Source: line: 'if not qryBaja.first():'
1269      If: begin: 'block-if'
1269    <-Source: begin: 'block-if'
1269   <--Function: begin: 'block-if'
1269  <---Source: begin: 'block-if'
1269 <----Class: begin: 'block-if'
1269<-----Source: begin: 'block-if'
1269      Source: begin-gen
1269       InstructionFlow: begin-gen
1269        Value: begin-gen
1269         Identifier: begin-gen
1269          Identifier: expr: 'False'
1269        <-Value: expr: 'False'
1269         Identifier: end-gen
1269        Value: end-gen
1269        InstructionFlow: line: 'return False'
1269      <-Source: line: 'return False'
1269     <--If: line: 'return False'
1269    <---Source: line: 'return False'
1269   <----Function: line: 'return False'
1269  <-----Source: line: 'return False'
1269 <------Class: line: 'return False'
1269<-------Source: line: 'return False'
1270       InstructionFlow: end-gen
1270      Source: end-gen
1270      If: end: 'block-if'
1270    <-Source: end: 'block-if'
1270   <--Function: end: 'block-if'
1270  <---Source: end: 'block-if'
1270 <----Class: end: 'block-if'
1270<-----Source: end: 'block-if'
1270     If: end-gen
1270     If: begin-gen
1270      Value: begin-gen
1270       OpUnary: begin-gen
1270        OpUnary: expr: 'not'
1270      <-Value: expr: 'not'
1270        Member: begin-gen
1270         Identifier: begin-gen
1270          Identifier: expr: 'qryBaja'
1270         Identifier: end-gen
1270         FunctionCall: begin-gen
1270          Value: begin-gen
1270           Constant: begin-gen
1270            Constant: ctype: 'String' -> 'debaja'
1270            Constant: expr: 'u"debaja"'
1270          <-Value: expr: 'u"debaja"'
1270           Constant: end-gen
1270          Value: end-gen
1270          FunctionCall: expr: 'value(u"debaja")'
1270         FunctionCall: end-gen
1270         Member: expr: 'qryBaja.value(u"debaja")'
1270       <-OpUnary: expr: 'qryBaja.value(u"debaja")'
1270      <--Value: expr: 'qryBaja.value(u"debaja")'
1270        Member: end-gen
1270       OpUnary: end-gen
1270      Value: end-gen
1270      If: line: 'if not qryBaja.value(u"debaja"):'
1270    <-Source: line: 'if not qryBaja.value(u"debaja"):'
1270   <--Function: line: 'if not qryBaja.value(u"debaja"):'
1270  <---Source: line: 'if not qryBaja.value(u"debaja"):'
1270 <----Class: line: 'if not qryBaja.value(u"debaja"):'
1270<-----Source: line: 'if not qryBaja.value(u"debaja"):'
1271      If: begin: 'block-if'
1271    <-Source: begin: 'block-if'
1271   <--Function: begin: 'block-if'
1271  <---Source: begin: 'block-if'
1271 <----Class: begin: 'block-if'
1271<-----Source: begin: 'block-if'
1271      Source: begin-gen
1271       InstructionFlow: begin-gen
1271        Value: begin-gen
1271         Identifier: begin-gen
1271          Identifier: expr: 'True'
1271        <-Value: expr: 'True'
1271         Identifier: end-gen
1271        Value: end-gen
1271        InstructionFlow: line: 'return True'
1271      <-Source: line: 'return True'
1271     <--If: line: 'return True'
1271    <---Source: line: 'return True'
1271   <----Function: line: 'return True'
1271  <-----Source: line: 'return True'
1271 <------Class: line: 'return True'
1271<-------Source: line: 'return True'
1272       InstructionFlow: end-gen
1272      Source: end-gen
1272      If: end: 'block-if'
1272    <-Source: end: 'block-if'
1272   <--Function: end: 'block-if'
1272  <---Source: end: 'block-if'
1272 <----Class: end: 'block-if'
1272<-----Source: end: 'block-if'
1272     If: end-gen
1272     If: begin-gen
1272      Expression: begin-gen
1272       Member: begin-gen
1272        Identifier: begin-gen
1272         Identifier: expr: 'util'
1272        Identifier: end-gen
1272        FunctionCall: begin-gen
1272         Value: begin-gen
1272          Identifier: begin-gen
1272           Identifier: expr: 'fecha'
1272         <-Value: expr: 'fecha'
1272          Identifier: end-gen
1272         Value: end-gen
1272         Value: begin-gen
1272          Member: begin-gen
1272           Identifier: begin-gen
1272            Identifier: expr: 'qryBaja'
1272           Identifier: end-gen
1272           FunctionCall: begin-gen
1272            Value: begin-gen
1272             Constant: begin-gen
1272              Constant: ctype: 'String' -> 'fechabaja'
1272              Constant: expr: 'u"fechabaja"'
1272            <-Value: expr: 'u"fechabaja"'
1272             Constant: end-gen
1272            Value: end-gen
1272            FunctionCall: expr: 'value(u"fechabaja")'
1272           FunctionCall: end-gen
1272           Member: expr: 'qryBaja.value(u"fechabaja")'
1272         <-Value: expr: 'qryBaja.value(u"fechabaja")'
1272          Member: end-gen
1272         Value: end-gen
1272         FunctionCall: expr: 'daysTo(fecha, qryBaja.value(u"fechabaja"))'
1272        FunctionCall: end-gen
1272        Member: expr: 'util.daysTo(fecha, qryBaja.value(u"fechabaja"))'
1272      <-Expression: expr: 'util.daysTo(fecha, qryBaja.value(u"fechabaja"))'
1272       Member: end-gen
1272       Compare: begin-gen
1272        Compare: expr: '<='
1272      <-Expression: expr: '<='
1272       Compare: end-gen
1272       Constant: begin-gen
1272        Constant: ctype: 'Number' -> '0'
1272        Constant: expr: '0'
1272      <-Expression: expr: '0'
1272       Constant: end-gen
1272      Expression: end-gen
1272      If: line: 'if util.daysTo(fecha, qryBaja.value(u"fechabaja")) <= 0:'
1272    <-Source: line: 'if util.daysTo(fecha, qryBaja.value(u"fechabaja")) <= 0:'
1272   <--Function: line: 'if util.daysTo(fecha, qryBaja.value(u"fechabaja")) <= 0:'
1272  <---Source: line: 'if util.daysTo(fecha, qryBaja.value(u"fechabaja")) <= 0:'
1272 <----Class: line: 'if util.daysTo(fecha, qryBaja.value(u"fechabaja")) <= 0:'
1272<-----Source: line: 'if util.daysTo(fecha, qryBaja.value(u"fechabaja")) <= 0:'
1273      If: begin: 'block-if'
1273    <-Source: begin: 'block-if'
1273   <--Function: begin: 'block-if'
1273  <---Source: begin: 'block-if'
1273 <----Class: begin: 'block-if'
1273<-----Source: begin: 'block-if'
1273      Source: begin-gen
1273       If: begin-gen
1273        Value: begin-gen
1273         OpUnary: begin-gen
1273          OpUnary: expr: 'not'
1273        <-Value: expr: 'not'
1273          Member: begin-gen
1273           Identifier: begin-gen
1273            Identifier: expr: 'self'
1273           Identifier: end-gen
1273           Identifier: begin-gen
1273            Identifier: expr: 'iface'
1273           Identifier: end-gen
1273           FunctionCall: begin-gen
1273            FunctionCall: expr: 'automataActivado()'
1273           FunctionCall: end-gen
1273           Member: expr: 'self.iface.automataActivado()'
1273         <-OpUnary: expr: 'self.iface.automataActivado()'
1273        <--Value: expr: 'self.iface.automataActivado()'
1273          Member: end-gen
1273         OpUnary: end-gen
1273        Value: end-gen
1273        If: line: 'if not self.iface.automataActivado():'
1273      <-Source: line: 'if not self.iface.automataActivado():'
1273     <--If: line: 'if not self.iface.automataActivado():'
1273    <---Source: line: 'if not self.iface.automataActivado():'
1273   <----Function: line: 'if not self.iface.automataActivado():'
1273  <-----Source: line: 'if not self.iface.automataActivado():'
1273 <------Class: line: 'if not self.iface.automataActivado():'
1273<-------Source: line: 'if not self.iface.automataActivado():'
1274        If: begin: 'block-if'
1274      <-Source: begin: 'block-if'
1274     <--If: begin: 'block-if'
1274    <---Source: begin: 'block-if'
1274   <----Function: begin: 'block-if'
1274  <-----Source: begin: 'block-if'
1274 <------Class: begin: 'block-if'
1274<-------Source: begin: 'block-if'
1274        Source: begin-gen
1274         DeclarationBlock: begin-gen
1274          Variable: begin-gen
1274           Variable: expr: 'fechaDdMmAaaa'
1274           Variable: expr: '='
1274           Value: begin-gen
1274            Member: begin-gen
1274             Identifier: begin-gen
1274              Identifier: expr: 'util'
1274             Identifier: end-gen
1274             FunctionCall: begin-gen
1274              Value: begin-gen
1274               Identifier: begin-gen
1274                Identifier: expr: 'fecha'
1274              <-Value: expr: 'fecha'
1274               Identifier: end-gen
1274              Value: end-gen
1274              FunctionCall: expr: 'dateAMDtoDMA(fecha)'
1274             FunctionCall: end-gen
1274             Member: expr: 'util.dateAMDtoDMA(fecha)'
1274           <-Value: expr: 'util.dateAMDtoDMA(fecha)'
1274          <--Variable: expr: 'util.dateAMDtoDMA(fecha)'
1274            Member: end-gen
1274           Value: end-gen
1274          Variable: end-gen
1274          DeclarationBlock: line: 'fechaDdMmAaaa = util.dateAMDtoDMA(fecha)'
1274        <-Source: line: 'fechaDdMmAaaa = util.dateAMDtoDMA(fecha)'
1274       <--If: line: 'fechaDdMmAaaa = util.dateAMDtoDMA(fecha)'
1274      <---Source: line: 'fechaDdMmAaaa = util.dateAMDtoDMA(fecha)'
1274     <----If: line: 'fechaDdMmAaaa = util.dateAMDtoDMA(fecha)'
1274    <-----Source: line: 'fechaDdMmAaaa = util.dateAMDtoDMA(fecha)'
1274   <------Function: line: 'fechaDdMmAaaa = util.dateAMDtoDMA(fecha)'
1274  <-------Source: line: 'fechaDdMmAaaa = util.dateAMDtoDMA(fecha)'
1274 <--------Class: line: 'fechaDdMmAaaa = util.dateAMDtoDMA(fecha)'
1274<---------Source: line: 'fechaDdMmAaaa = util.dateAMDtoDMA(fecha)'
1275         DeclarationBlock: end-gen
1275         InstructionCall: begin-gen
1275          Member: begin-gen
1275           Identifier: begin-gen
1275            Identifier: expr: 'MessageBox'
1275           Identifier: end-gen
1275           FunctionCall: begin-gen
1275            Value: begin-gen
1275             Member: begin-gen
1275              Identifier: begin-gen
1275               Identifier: expr: 'util'
1275              Identifier: end-gen
1275              FunctionCall: begin-gen
1275               Value: begin-gen
1275                Constant: begin-gen
1275                 Constant: ctype: 'String' -> 'scripts'
1275                 Constant: expr: 'u"scripts"'
1275               <-Value: expr: 'u"scripts"'
1275                Constant: end-gen
1275               Value: end-gen
1275               Value: begin-gen
1275                Constant: begin-gen
1275                 Constant: ctype: 'String' -> 'El cliente está de baja para la fecha especificada (%1)'
1275                 Constant: expr: 'u"El cliente está de baja para la fecha especificada (%1)"'
1275               <-Value: expr: 'u"El cliente está de baja para la fecha especificada (%1)"'
1275                Constant: end-gen
1275               Value: end-gen
1275               FunctionCall: expr: 'translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)")'
1275              FunctionCall: end-gen
1275              FunctionCall: begin-gen
1275               Value: begin-gen
1275                Identifier: begin-gen
1275                 Identifier: expr: 'fechaDdMmAaaa'
1275               <-Value: expr: 'fechaDdMmAaaa'
1275                Identifier: end-gen
1275               Value: end-gen
1275               FunctionCall: expr: 'arg(fechaDdMmAaaa)'
1275              FunctionCall: end-gen
1275              Member: expr: 'util.translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)").arg(fechaDdMmAaaa)'
1275            <-Value: expr: 'util.translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)").arg(fechaDdMmAaaa)'
1275             Member: end-gen
1275            Value: end-gen
1275            Value: begin-gen
1275             Member: begin-gen
1275              Identifier: begin-gen
1275               Identifier: expr: 'MessageBox'
1275              Identifier: end-gen
1275              Identifier: begin-gen
1275               Identifier: expr: 'Ok'
1275              Identifier: end-gen
1275              Member: expr: 'MessageBox.Ok'
1275            <-Value: expr: 'MessageBox.Ok'
1275             Member: end-gen
1275            Value: end-gen
1275            Value: begin-gen
1275             Member: begin-gen
1275              Identifier: begin-gen
1275               Identifier: expr: 'MessageBox'
1275              Identifier: end-gen
1275              Identifier: begin-gen
1275               Identifier: expr: 'NoButton'
1275              Identifier: end-gen
1275              Member: expr: 'MessageBox.NoButton'
1275            <-Value: expr: 'MessageBox.NoButton'
1275             Member: end-gen
1275            Value: end-gen
1275            FunctionCall: expr: 'warning(util.translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)").arg(fechaDdMmAaaa), MessageBox.Ok, MessageBox.NoButton)'
1275           FunctionCall: end-gen
1275           Member: expr: 'MessageBox.warning(util.translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)").arg(fechaDdMmAaaa), MessageBox.Ok, MessageBox.NoButton)'
1275          Member: end-gen
1275          InstructionCall: line: 'MessageBox.warning(util.translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)").arg(fechaDdMmAaaa), MessageBox.Ok, MessageBox.NoButton)'
1275        <-Source: line: 'MessageBox.warning(util.translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)").arg(fechaDdMmAaaa), MessageBox.Ok, MessageBox.NoButton)'
1275       <--If: line: 'MessageBox.warning(util.translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)").arg(fechaDdMmAaaa), MessageBox.Ok, MessageBox.NoButton)'
1275      <---Source: line: 'MessageBox.warning(util.translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)").arg(fechaDdMmAaaa), MessageBox.Ok, MessageBox.NoButton)'
1275     <----If: line: 'MessageBox.warning(util.translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)").arg(fechaDdMmAaaa), MessageBox.Ok, MessageBox.NoButton)'
1275    <-----Source: line: 'MessageBox.warning(util.translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)").arg(fechaDdMmAaaa), MessageBox.Ok, MessageBox.NoButton)'
1275   <------Function: line: 'MessageBox.warning(util.translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)").arg(fechaDdMmAaaa), MessageBox.Ok, MessageBox.NoButton)'
1275  <-------Source: line: 'MessageBox.warning(util.translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)").arg(fechaDdMmAaaa), MessageBox.Ok, MessageBox.NoButton)'
1275 <--------Class: line: 'MessageBox.warning(util.translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)").arg(fechaDdMmAaaa), MessageBox.Ok, MessageBox.NoButton)'
1275<---------Source: line: 'MessageBox.warning(util.translate(u"scripts", u"El cliente está de baja para la fecha especificada (%1)").arg(fechaDdMmAaaa), MessageBox.Ok, MessageBox.NoButton)'
1276         InstructionCall: end-gen
1276        Source: end-gen
1276        If: end: 'block-if'
1276      <-Source: end: 'block-if'
1276     <--If: end: 'block-if'
1276    <---Source: end: 'block-if'
1276   <----Function: end: 'block-if'
1276  <-----Source: end: 'block-if'
1276 <------Class: end: 'block-if'
1276<-------Source: end: 'block-if'
1276       If: end-gen
1276       InstructionFlow: begin-gen
1276        Value: begin-gen
1276         Identifier: begin-gen
1276          Identifier: expr: 'False'
1276        <-Value: expr: 'False'
1276         Identifier: end-gen
1276        Value: end-gen
1276        InstructionFlow: line: 'return False'
1276      <-Source: line: 'return False'
1276     <--If: line: 'return False'
1276    <---Source: line: 'return False'
1276   <----Function: line: 'return False'
1276  <-----Source: line: 'return False'
1276 <------Class: line: 'return False'
1276<-------Source: line: 'return False'
1277       InstructionFlow: end-gen
1277      Source: end-gen
1277      If: end: 'block-if'
1277    <-Source: end: 'block-if'
1277   <--Function: end: 'block-if'
1277  <---Source: end: 'block-if'
1277 <----Class: end: 'block-if'
1277<-----Source: end: 'block-if'
1277     If: end-gen
1277     InstructionFlow: begin-gen
1277      Value: begin-gen
1277       Identifier: begin-gen
1277        Identifier: expr: 'True'
1277      <-Value: expr: 'True'
1277       Identifier: end-gen
1277      Value: end-gen
1277      InstructionFlow: line: 'return True'
1277    <-Source: line: 'return True'
1277   <--Function: line: 'return True'
1277  <---Source: line: 'return True'
1277 <----Class: line: 'return True'
1277<-----Source: line: 'return True'
1279     InstructionFlow: end-gen
1279    Source: end-gen
1279    Function: end: 'block-def-oficial_clienteActivo'
1279  <-Source: end: 'block-def-oficial_clienteActivo'
1279 <--Class: end: 'block-def-oficial_clienteActivo'
1279<---Source: end: 'block-def-oficial_clienteActivo'
1280   Function: end-gen
1280   Function: begin-gen
1280    Variable: begin-gen
1280     Variable: expr: 'formulario'
1280    Variable: end-gen
1280    Variable: begin-gen
1280     Variable: expr: 'campoId'
1280    Variable: end-gen
1280    Variable: begin-gen
1280     Variable: expr: 'campoProvincia'
1280    Variable: end-gen
1280    Variable: begin-gen
1280     Variable: expr: 'campoPais'
1280    Variable: end-gen
1280    Function: line: 'def oficial_obtenerProvincia(self, formulario = None, campoId = None, campoProvincia = None, campoPais = None):'
1280  <-Source: line: 'def oficial_obtenerProvincia(self, formulario = None, campoId = None, campoProvincia = None, campoPais = None):'
1280 <--Class: line: 'def oficial_obtenerProvincia(self, formulario = None, campoId = None, campoProvincia = None, campoPais = None):'
1280<---Source: line: 'def oficial_obtenerProvincia(self, formulario = None, campoId = None, campoProvincia = None, campoPais = None):'
1281    Function: begin: 'block-def-oficial_obtenerProvincia'
1281  <-Source: begin: 'block-def-oficial_obtenerProvincia'
1281 <--Class: begin: 'block-def-oficial_obtenerProvincia'
1281<---Source: begin: 'block-def-oficial_obtenerProvincia'
1281    Source: begin-gen
1281     DeclarationBlock: begin-gen
1281      Variable: begin-gen
1281       Variable: expr: 'util'
1281       Variable: expr: '='
1281       Value: begin-gen
1281        New: begin-gen
1281         Identifier: begin-gen
1281          Identifier: expr: 'FLUtil'
1281        <-New: expr: 'qsatype.FLUtil()'
1281       <--Value: expr: 'qsatype.FLUtil()'
1281      <---Variable: expr: 'qsatype.FLUtil()'
1281         Identifier: end-gen
1281        New: end-gen
1281       Value: end-gen
1281      Variable: end-gen
1281      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1281    <-Source: line: 'util = qsatype.FLUtil()'
1281   <--Function: line: 'util = qsatype.FLUtil()'
1281  <---Source: line: 'util = qsatype.FLUtil()'
1281 <----Class: line: 'util = qsatype.FLUtil()'
1281<-----Source: line: 'util = qsatype.FLUtil()'
1282     DeclarationBlock: end-gen
1282     If: begin-gen
1282      Value: begin-gen
1282       OpUnary: begin-gen
1282        OpUnary: expr: 'not'
1282      <-Value: expr: 'not'
1282        Identifier: begin-gen
1282         Identifier: expr: 'campoId'
1282       <-OpUnary: expr: 'campoId'
1282      <--Value: expr: 'campoId'
1282        Identifier: end-gen
1282       OpUnary: end-gen
1282      Value: end-gen
1282      If: line: 'if not campoId:'
1282    <-Source: line: 'if not campoId:'
1282   <--Function: line: 'if not campoId:'
1282  <---Source: line: 'if not campoId:'
1282 <----Class: line: 'if not campoId:'
1282<-----Source: line: 'if not campoId:'
1283      If: begin: 'block-if'
1283    <-Source: begin: 'block-if'
1283   <--Function: begin: 'block-if'
1283  <---Source: begin: 'block-if'
1283 <----Class: begin: 'block-if'
1283<-----Source: begin: 'block-if'
1283      Source: begin-gen
1283       InstructionUpdate: begin-gen
1283        Identifier: begin-gen
1283         Identifier: expr: 'campoId'
1283        Identifier: end-gen
1283        OpUpdate: begin-gen
1283         OpUpdate: expr: '='
1283        OpUpdate: end-gen
1283        Value: begin-gen
1283         Constant: begin-gen
1283          Constant: ctype: 'String' -> 'idprovincia'
1283          Constant: expr: 'u"idprovincia"'
1283        <-Value: expr: 'u"idprovincia"'
1283         Constant: end-gen
1283        Value: end-gen
1283        InstructionUpdate: line: 'campoId = u"idprovincia"'
1283      <-Source: line: 'campoId = u"idprovincia"'
1283     <--If: line: 'campoId = u"idprovincia"'
1283    <---Source: line: 'campoId = u"idprovincia"'
1283   <----Function: line: 'campoId = u"idprovincia"'
1283  <-----Source: line: 'campoId = u"idprovincia"'
1283 <------Class: line: 'campoId = u"idprovincia"'
1283<-------Source: line: 'campoId = u"idprovincia"'
1284       InstructionUpdate: end-gen
1284      Source: end-gen
1284      If: end: 'block-if'
1284    <-Source: end: 'block-if'
1284   <--Function: end: 'block-if'
1284  <---Source: end: 'block-if'
1284 <----Class: end: 'block-if'
1284<-----Source: end: 'block-if'
1284     If: end-gen
1284     If: begin-gen
1284      Value: begin-gen
1284       OpUnary: begin-gen
1284        OpUnary: expr: 'not'
1284      <-Value: expr: 'not'
1284        Identifier: begin-gen
1284         Identifier: expr: 'campoProvincia'
1284       <-OpUnary: expr: 'campoProvincia'
1284      <--Value: expr: 'campoProvincia'
1284        Identifier: end-gen
1284       OpUnary: end-gen
1284      Value: end-gen
1284      If: line: 'if not campoProvincia:'
1284    <-Source: line: 'if not campoProvincia:'
1284   <--Function: line: 'if not campoProvincia:'
1284  <---Source: line: 'if not campoProvincia:'
1284 <----Class: line: 'if not campoProvincia:'
1284<-----Source: line: 'if not campoProvincia:'
1285      If: begin: 'block-if'
1285    <-Source: begin: 'block-if'
1285   <--Function: begin: 'block-if'
1285  <---Source: begin: 'block-if'
1285 <----Class: begin: 'block-if'
1285<-----Source: begin: 'block-if'
1285      Source: begin-gen
1285       InstructionUpdate: begin-gen
1285        Identifier: begin-gen
1285         Identifier: expr: 'campoProvincia'
1285        Identifier: end-gen
1285        OpUpdate: begin-gen
1285         OpUpdate: expr: '='
1285        OpUpdate: end-gen
1285        Value: begin-gen
1285         Constant: begin-gen
1285          Constant: ctype: 'String' -> 'provincia'
1285          Constant: expr: 'u"provincia"'
1285        <-Value: expr: 'u"provincia"'
1285         Constant: end-gen
1285        Value: end-gen
1285        InstructionUpdate: line: 'campoProvincia = u"provincia"'
1285      <-Source: line: 'campoProvincia = u"provincia"'
1285     <--If: line: 'campoProvincia = u"provincia"'
1285    <---Source: line: 'campoProvincia = u"provincia"'
1285   <----Function: line: 'campoProvincia = u"provincia"'
1285  <-----Source: line: 'campoProvincia = u"provincia"'
1285 <------Class: line: 'campoProvincia = u"provincia"'
1285<-------Source: line: 'campoProvincia = u"provincia"'
1286       InstructionUpdate: end-gen
1286      Source: end-gen
1286      If: end: 'block-if'
1286    <-Source: end: 'block-if'
1286   <--Function: end: 'block-if'
1286  <---Source: end: 'block-if'
1286 <----Class: end: 'block-if'
1286<-----Source: end: 'block-if'
1286     If: end-gen
1286     If: begin-gen
1286      Value: begin-gen
1286       OpUnary: begin-gen
1286        OpUnary: expr: 'not'
1286      <-Value: expr: 'not'
1286        Identifier: begin-gen
1286         Identifier: expr: 'campoPais'
1286       <-OpUnary: expr: 'campoPais'
1286      <--Value: expr: 'campoPais'
1286        Identifier: end-gen
1286       OpUnary: end-gen
1286      Value: end-gen
1286      If: line: 'if not campoPais:'
1286    <-Source: line: 'if not campoPais:'
1286   <--Function: line: 'if not campoPais:'
1286  <---Source: line: 'if not campoPais:'
1286 <----Class: line: 'if not campoPais:'
1286<-----Source: line: 'if not campoPais:'
1287      If: begin: 'block-if'
1287    <-Source: begin: 'block-if'
1287   <--Function: begin: 'block-if'
1287  <---Source: begin: 'block-if'
1287 <----Class: begin: 'block-if'
1287<-----Source: begin: 'block-if'
1287      Source: begin-gen
1287       InstructionUpdate: begin-gen
1287        Identifier: begin-gen
1287         Identifier: expr: 'campoPais'
1287        Identifier: end-gen
1287        OpUpdate: begin-gen
1287         OpUpdate: expr: '='
1287        OpUpdate: end-gen
1287        Value: begin-gen
1287         Constant: begin-gen
1287          Constant: ctype: 'String' -> 'codpais'
1287          Constant: expr: 'u"codpais"'
1287        <-Value: expr: 'u"codpais"'
1287         Constant: end-gen
1287        Value: end-gen
1287        InstructionUpdate: line: 'campoPais = u"codpais"'
1287      <-Source: line: 'campoPais = u"codpais"'
1287     <--If: line: 'campoPais = u"codpais"'
1287    <---Source: line: 'campoPais = u"codpais"'
1287   <----Function: line: 'campoPais = u"codpais"'
1287  <-----Source: line: 'campoPais = u"codpais"'
1287 <------Class: line: 'campoPais = u"codpais"'
1287<-------Source: line: 'campoPais = u"codpais"'
1288       InstructionUpdate: end-gen
1288      Source: end-gen
1288      If: end: 'block-if'
1288    <-Source: end: 'block-if'
1288   <--Function: end: 'block-if'
1288  <---Source: end: 'block-if'
1288 <----Class: end: 'block-if'
1288<-----Source: end: 'block-if'
1288     If: end-gen
1288     DeclarationBlock: begin-gen
1288      Variable: begin-gen
1288       Variable: expr: 'provincia'
1288       Variable: expr: '='
1288       Value: begin-gen
1288        Member: begin-gen
1288         Identifier: begin-gen
1288          Identifier: expr: 'formulario'
1288         Identifier: end-gen
1288         FunctionCall: begin-gen
1288          FunctionCall: expr: 'cursor()'
1288         FunctionCall: end-gen
1288         FunctionCall: begin-gen
1288          Value: begin-gen
1288           Identifier: begin-gen
1288            Identifier: expr: 'campoProvincia'
1288          <-Value: expr: 'campoProvincia'
1288           Identifier: end-gen
1288          Value: end-gen
1288          FunctionCall: expr: 'valueBuffer(campoProvincia)'
1288         FunctionCall: end-gen
1288         Member: expr: 'formulario.cursor().valueBuffer(campoProvincia)'
1288       <-Value: expr: 'formulario.cursor().valueBuffer(campoProvincia)'
1288      <--Variable: expr: 'formulario.cursor().valueBuffer(campoProvincia)'
1288        Member: end-gen
1288       Value: end-gen
1288      Variable: end-gen
1288      DeclarationBlock: line: 'provincia = formulario.cursor().valueBuffer(campoProvincia)'
1288    <-Source: line: 'provincia = formulario.cursor().valueBuffer(campoProvincia)'
1288   <--Function: line: 'provincia = formulario.cursor().valueBuffer(campoProvincia)'
1288  <---Source: line: 'provincia = formulario.cursor().valueBuffer(campoProvincia)'
1288 <----Class: line: 'provincia = formulario.cursor().valueBuffer(campoProvincia)'
1288<-----Source: line: 'provincia = formulario.cursor().valueBuffer(campoProvincia)'
1289     DeclarationBlock: end-gen
1289     If: begin-gen
1289      Expression: begin-gen
1289       OpUnary: begin-gen
1289        OpUnary: expr: 'not'
1289      <-Expression: expr: 'not'
1289        Identifier: begin-gen
1289         Identifier: expr: 'provincia'
1289       <-OpUnary: expr: 'provincia'
1289      <--Expression: expr: 'provincia'
1289        Identifier: end-gen
1289       OpUnary: end-gen
1289       Compare: begin-gen
1289        Compare: expr: 'or'
1289      <-Expression: expr: 'or'
1289       Compare: end-gen
1289       Identifier: begin-gen
1289        Identifier: expr: 'provincia'
1289      <-Expression: expr: 'provincia'
1289       Identifier: end-gen
1289       Compare: begin-gen
1289        Compare: expr: '=='
1289      <-Expression: expr: '=='
1289       Compare: end-gen
1289       Constant: begin-gen
1289        Constant: ctype: 'String' -> ''
1289        Constant: expr: 'u""'
1289      <-Expression: expr: 'u""'
1289       Constant: end-gen
1289      Expression: end-gen
1289      If: line: 'if not provincia or provincia == u"":'
1289    <-Source: line: 'if not provincia or provincia == u"":'
1289   <--Function: line: 'if not provincia or provincia == u"":'
1289  <---Source: line: 'if not provincia or provincia == u"":'
1289 <----Class: line: 'if not provincia or provincia == u"":'
1289<-----Source: line: 'if not provincia or provincia == u"":'
1290      If: begin: 'block-if'
1290    <-Source: begin: 'block-if'
1290   <--Function: begin: 'block-if'
1290  <---Source: begin: 'block-if'
1290 <----Class: begin: 'block-if'
1290<-----Source: begin: 'block-if'
1290      Source: begin-gen
1290       InstructionFlow: begin-gen
1290        InstructionFlow: line: 'return '
1290      <-Source: line: 'return '
1290     <--If: line: 'return '
1290    <---Source: line: 'return '
1290   <----Function: line: 'return '
1290  <-----Source: line: 'return '
1290 <------Class: line: 'return '
1290<-------Source: line: 'return '
1291       InstructionFlow: end-gen
1291      Source: end-gen
1291      If: end: 'block-if'
1291    <-Source: end: 'block-if'
1291   <--Function: end: 'block-if'
1291  <---Source: end: 'block-if'
1291 <----Class: end: 'block-if'
1291<-----Source: end: 'block-if'
1291     If: end-gen
1291     If: begin-gen
1291      Value: begin-gen
1291       Member: begin-gen
1291        Identifier: begin-gen
1291         Identifier: expr: 'provincia'
1291        Identifier: end-gen
1291        FunctionCall: begin-gen
1291         Value: begin-gen
1291          Constant: begin-gen
1291           Constant: ctype: 'String' -> '.'
1291           Constant: expr: 'u"."'
1291         <-Value: expr: 'u"."'
1291          Constant: end-gen
1291         Value: end-gen
1291         FunctionCall: expr: 'endswith(u".")'
1291        FunctionCall: end-gen
1291        Member: expr: 'provincia.endswith(u".")'
1291      <-Value: expr: 'provincia.endswith(u".")'
1291       Member: end-gen
1291      Value: end-gen
1291      If: line: 'if provincia.endswith(u"."):'
1291    <-Source: line: 'if provincia.endswith(u"."):'
1291   <--Function: line: 'if provincia.endswith(u"."):'
1291  <---Source: line: 'if provincia.endswith(u"."):'
1291 <----Class: line: 'if provincia.endswith(u"."):'
1291<-----Source: line: 'if provincia.endswith(u"."):'
1292      If: begin: 'block-if'
1292    <-Source: begin: 'block-if'
1292   <--Function: begin: 'block-if'
1292  <---Source: begin: 'block-if'
1292 <----Class: begin: 'block-if'
1292<-----Source: begin: 'block-if'
1292      Source: begin-gen
1292       InstructionCall: begin-gen
1292        Member: begin-gen
1292         Identifier: begin-gen
1292          Identifier: expr: 'formulario'
1292         Identifier: end-gen
1292         FunctionCall: begin-gen
1292          FunctionCall: expr: 'cursor()'
1292         FunctionCall: end-gen
1292         FunctionCall: begin-gen
1292          Value: begin-gen
1292           Identifier: begin-gen
1292            Identifier: expr: 'campoId'
1292          <-Value: expr: 'campoId'
1292           Identifier: end-gen
1292          Value: end-gen
1292          FunctionCall: expr: 'setNull(campoId)'
1292         FunctionCall: end-gen
1292         Member: expr: 'formulario.cursor().setNull(campoId)'
1292        Member: end-gen
1292        InstructionCall: line: 'formulario.cursor().setNull(campoId)'
1292      <-Source: line: 'formulario.cursor().setNull(campoId)'
1292     <--If: line: 'formulario.cursor().setNull(campoId)'
1292    <---Source: line: 'formulario.cursor().setNull(campoId)'
1292   <----Function: line: 'formulario.cursor().setNull(campoId)'
1292  <-----Source: line: 'formulario.cursor().setNull(campoId)'
1292 <------Class: line: 'formulario.cursor().setNull(campoId)'
1292<-------Source: line: 'formulario.cursor().setNull(campoId)'
1293       InstructionCall: end-gen
1293       InstructionUpdate: begin-gen
1293        Identifier: begin-gen
1293         Identifier: expr: 'provincia'
1293        Identifier: end-gen
1293        OpUpdate: begin-gen
1293         OpUpdate: expr: '='
1293        OpUpdate: end-gen
1293        Value: begin-gen
1293         Member: begin-gen
1293          Identifier: begin-gen
1293           Identifier: expr: 'provincia'
1293          Identifier: end-gen
1293          FunctionCall: begin-gen
1293           Expression: begin-gen
1293            Member: begin-gen
1293             Identifier: begin-gen
1293              Identifier: expr: 'provincia'
1293             Identifier: end-gen
1293             Identifier: begin-gen
1293              Identifier: expr: 'length'
1293             Identifier: end-gen
1293             Member: expr: 'len(provincia)'
1293           <-Expression: expr: 'len(provincia)'
1293            Member: end-gen
1293            OpMath: begin-gen
1293             OpMath: expr: '-'
1293           <-Expression: expr: '-'
1293            OpMath: end-gen
1293            Constant: begin-gen
1293             Constant: ctype: 'Number' -> '1'
1293             Constant: expr: '1'
1293           <-Expression: expr: '1'
1293            Constant: end-gen
1293           Expression: end-gen
1293           FunctionCall: expr: 'left(len(provincia) - 1)'
1293          FunctionCall: end-gen
1293          Member: expr: 'provincia[0:len(provincia) - 1]'
1293        <-Value: expr: 'provincia[0:len(provincia) - 1]'
1293         Member: end-gen
1293        Value: end-gen
1293        InstructionUpdate: line: 'provincia = provincia[0:len(provincia) - 1]'
1293      <-Source: line: 'provincia = provincia[0:len(provincia) - 1]'
1293     <--If: line: 'provincia = provincia[0:len(provincia) - 1]'
1293    <---Source: line: 'provincia = provincia[0:len(provincia) - 1]'
1293   <----Function: line: 'provincia = provincia[0:len(provincia) - 1]'
1293  <-----Source: line: 'provincia = provincia[0:len(provincia) - 1]'
1293 <------Class: line: 'provincia = provincia[0:len(provincia) - 1]'
1293<-------Source: line: 'provincia = provincia[0:len(provincia) - 1]'
1294       InstructionUpdate: end-gen
1294       InstructionUpdate: begin-gen
1294        Identifier: begin-gen
1294         Identifier: expr: 'provincia'
1294        Identifier: end-gen
1294        OpUpdate: begin-gen
1294         OpUpdate: expr: '='
1294        OpUpdate: end-gen
1294        Value: begin-gen
1294         Member: begin-gen
1294          Identifier: begin-gen
1294           Identifier: expr: 'provincia'
1294          Identifier: end-gen
1294          FunctionCall: begin-gen
1294           FunctionCall: expr: 'toUpperCase()'
1294          FunctionCall: end-gen
1294          Member: expr: 'provincia.toUpperCase()'
1294        <-Value: expr: 'provincia.toUpperCase()'
1294         Member: end-gen
1294        Value: end-gen
1294        InstructionUpdate: line: 'provincia = provincia.toUpperCase()'
1294      <-Source: line: 'provincia = provincia.toUpperCase()'
1294     <--If: line: 'provincia = provincia.toUpperCase()'
1294    <---Source: line: 'provincia = provincia.toUpperCase()'
1294   <----Function: line: 'provincia = provincia.toUpperCase()'
1294  <-----Source: line: 'provincia = provincia.toUpperCase()'
1294 <------Class: line: 'provincia = provincia.toUpperCase()'
1294<-------Source: line: 'provincia = provincia.toUpperCase()'
1295       InstructionUpdate: end-gen
1295       DeclarationBlock: begin-gen
1295        Variable: begin-gen
1295         Variable: expr: 'where'
1295         Variable: expr: '='
1295         Expression: begin-gen
1295          Expression: expr: 'ustr('
1295        <-Variable: expr: 'ustr('
1295          Constant: begin-gen
1295           Constant: ctype: 'String' -> "UPPER(provincia) LIKE '"
1295           Constant: expr: 'u"UPPER(provincia) LIKE \'"'
1295         <-Expression: expr: 'u"UPPER(provincia) LIKE \'"'
1295        <--Variable: expr: 'u"UPPER(provincia) LIKE \'"'
1295          Constant: end-gen
1295          Expression: expr: ','
1295        <-Variable: expr: ','
1295          Identifier: begin-gen
1295           Identifier: expr: 'provincia'
1295         <-Expression: expr: 'provincia'
1295        <--Variable: expr: 'provincia'
1295          Identifier: end-gen
1295          Expression: expr: ','
1295        <-Variable: expr: ','
1295          Constant: begin-gen
1295           Constant: ctype: 'String' -> "%'"
1295           Constant: expr: 'u"%\'"'
1295         <-Expression: expr: 'u"%\'"'
1295        <--Variable: expr: 'u"%\'"'
1295          Constant: end-gen
1295          Expression: expr: ')'
1295        <-Variable: expr: ')'
1295         Expression: end-gen
1295        Variable: end-gen
1295        DeclarationBlock: line: 'where = ustr( u"UPPER(provincia) LIKE \'" , provincia , u"%\'" )'
1295      <-Source: line: 'where = ustr( u"UPPER(provincia) LIKE \'" , provincia , u"%\'" )'
1295     <--If: line: 'where = ustr( u"UPPER(provincia) LIKE \'" , provincia , u"%\'" )'
1295    <---Source: line: 'where = ustr( u"UPPER(provincia) LIKE \'" , provincia , u"%\'" )'
1295   <----Function: line: 'where = ustr( u"UPPER(provincia) LIKE \'" , provincia , u"%\'" )'
1295  <-----Source: line: 'where = ustr( u"UPPER(provincia) LIKE \'" , provincia , u"%\'" )'
1295 <------Class: line: 'where = ustr( u"UPPER(provincia) LIKE \'" , provincia , u"%\'" )'
1295<-------Source: line: 'where = ustr( u"UPPER(provincia) LIKE \'" , provincia , u"%\'" )'
1296       DeclarationBlock: end-gen
1296       DeclarationBlock: begin-gen
1296        Variable: begin-gen
1296         Variable: expr: 'codPais'
1296         Variable: expr: '='
1296         Value: begin-gen
1296          Member: begin-gen
1296           Identifier: begin-gen
1296            Identifier: expr: 'formulario'
1296           Identifier: end-gen
1296           FunctionCall: begin-gen
1296            FunctionCall: expr: 'cursor()'
1296           FunctionCall: end-gen
1296           FunctionCall: begin-gen
1296            Value: begin-gen
1296             Identifier: begin-gen
1296              Identifier: expr: 'campoPais'
1296            <-Value: expr: 'campoPais'
1296             Identifier: end-gen
1296            Value: end-gen
1296            FunctionCall: expr: 'valueBuffer(campoPais)'
1296           FunctionCall: end-gen
1296           Member: expr: 'formulario.cursor().valueBuffer(campoPais)'
1296         <-Value: expr: 'formulario.cursor().valueBuffer(campoPais)'
1296        <--Variable: expr: 'formulario.cursor().valueBuffer(campoPais)'
1296          Member: end-gen
1296         Value: end-gen
1296        Variable: end-gen
1296        DeclarationBlock: line: 'codPais = formulario.cursor().valueBuffer(campoPais)'
1296      <-Source: line: 'codPais = formulario.cursor().valueBuffer(campoPais)'
1296     <--If: line: 'codPais = formulario.cursor().valueBuffer(campoPais)'
1296    <---Source: line: 'codPais = formulario.cursor().valueBuffer(campoPais)'
1296   <----Function: line: 'codPais = formulario.cursor().valueBuffer(campoPais)'
1296  <-----Source: line: 'codPais = formulario.cursor().valueBuffer(campoPais)'
1296 <------Class: line: 'codPais = formulario.cursor().valueBuffer(campoPais)'
1296<-------Source: line: 'codPais = formulario.cursor().valueBuffer(campoPais)'
1297       DeclarationBlock: end-gen
1297       If: begin-gen
1297        Expression: begin-gen
1297         Identifier: begin-gen
1297          Identifier: expr: 'codPais'
1297        <-Expression: expr: 'codPais'
1297         Identifier: end-gen
1297         Compare: begin-gen
1297          Compare: expr: 'and'
1297        <-Expression: expr: 'and'
1297         Compare: end-gen
1297         Identifier: begin-gen
1297          Identifier: expr: 'codPais'
1297        <-Expression: expr: 'codPais'
1297         Identifier: end-gen
1297         Compare: begin-gen
1297          Compare: expr: '!='
1297        <-Expression: expr: '!='
1297         Compare: end-gen
1297         Constant: begin-gen
1297          Constant: ctype: 'String' -> ''
1297          Constant: expr: 'u""'
1297        <-Expression: expr: 'u""'
1297         Constant: end-gen
1297        Expression: end-gen
1297        If: line: 'if codPais and codPais != u"":'
1297      <-Source: line: 'if codPais and codPais != u"":'
1297     <--If: line: 'if codPais and codPais != u"":'
1297    <---Source: line: 'if codPais and codPais != u"":'
1297   <----Function: line: 'if codPais and codPais != u"":'
1297  <-----Source: line: 'if codPais and codPais != u"":'
1297 <------Class: line: 'if codPais and codPais != u"":'
1297<-------Source: line: 'if codPais and codPais != u"":'
1298        If: begin: 'block-if'
1298      <-Source: begin: 'block-if'
1298     <--If: begin: 'block-if'
1298    <---Source: begin: 'block-if'
1298   <----Function: begin: 'block-if'
1298  <-----Source: begin: 'block-if'
1298 <------Class: begin: 'block-if'
1298<-------Source: begin: 'block-if'
1298        Source: begin-gen
1298         InstructionUpdate: begin-gen
1298          Identifier: begin-gen
1298           Identifier: expr: 'where'
1298          Identifier: end-gen
1298          OpUpdate: begin-gen
1298           OpUpdate: expr: '+='
1298          OpUpdate: end-gen
1298          Expression: begin-gen
1298           Expression: expr: 'ustr('
1298           Constant: begin-gen
1298            Constant: ctype: 'String' -> " AND codpais = '"
1298            Constant: expr: 'u" AND codpais = \'"'
1298          <-Expression: expr: 'u" AND codpais = \'"'
1298           Constant: end-gen
1298           Expression: expr: ','
1298           Identifier: begin-gen
1298            Identifier: expr: 'codPais'
1298          <-Expression: expr: 'codPais'
1298           Identifier: end-gen
1298           Expression: expr: ','
1298           Constant: begin-gen
1298            Constant: ctype: 'String' -> "'"
1298            Constant: expr: 'u"\'"'
1298          <-Expression: expr: 'u"\'"'
1298           Constant: end-gen
1298           Expression: expr: ')'
1298          Expression: end-gen
1298          InstructionUpdate: line: 'where += ustr( u" AND codpais = \'" , codPais , u"\'" )'
1298        <-Source: line: 'where += ustr( u" AND codpais = \'" , codPais , u"\'" )'
1298       <--If: line: 'where += ustr( u" AND codpais = \'" , codPais , u"\'" )'
1298      <---Source: line: 'where += ustr( u" AND codpais = \'" , codPais , u"\'" )'
1298     <----If: line: 'where += ustr( u" AND codpais = \'" , codPais , u"\'" )'
1298    <-----Source: line: 'where += ustr( u" AND codpais = \'" , codPais , u"\'" )'
1298   <------Function: line: 'where += ustr( u" AND codpais = \'" , codPais , u"\'" )'
1298  <-------Source: line: 'where += ustr( u" AND codpais = \'" , codPais , u"\'" )'
1298 <--------Class: line: 'where += ustr( u" AND codpais = \'" , codPais , u"\'" )'
1298<---------Source: line: 'where += ustr( u" AND codpais = \'" , codPais , u"\'" )'
1299         InstructionUpdate: end-gen
1299        Source: end-gen
1299        If: end: 'block-if'
1299      <-Source: end: 'block-if'
1299     <--If: end: 'block-if'
1299    <---Source: end: 'block-if'
1299   <----Function: end: 'block-if'
1299  <-----Source: end: 'block-if'
1299 <------Class: end: 'block-if'
1299<-------Source: end: 'block-if'
1299       If: end-gen
1299       DeclarationBlock: begin-gen
1299        Variable: begin-gen
1299         Variable: expr: 'qryProvincia'
1299         Variable: expr: '='
1299         Value: begin-gen
1299          New: begin-gen
1299           Identifier: begin-gen
1299            Identifier: expr: 'FLSqlQuery'
1299          <-New: expr: 'qsatype.FLSqlQuery()'
1299         <--Value: expr: 'qsatype.FLSqlQuery()'
1299        <---Variable: expr: 'qsatype.FLSqlQuery()'
1299           Identifier: end-gen
1299          New: end-gen
1299         Value: end-gen
1299        Variable: end-gen
1299        DeclarationBlock: line: 'qryProvincia = qsatype.FLSqlQuery()'
1299      <-Source: line: 'qryProvincia = qsatype.FLSqlQuery()'
1299     <--If: line: 'qryProvincia = qsatype.FLSqlQuery()'
1299    <---Source: line: 'qryProvincia = qsatype.FLSqlQuery()'
1299   <----Function: line: 'qryProvincia = qsatype.FLSqlQuery()'
1299  <-----Source: line: 'qryProvincia = qsatype.FLSqlQuery()'
1299 <------Class: line: 'qryProvincia = qsatype.FLSqlQuery()'
1299<-------Source: line: 'qryProvincia = qsatype.FLSqlQuery()'
1300       DeclarationBlock: end-gen
1300       With: begin-gen
1300        Identifier: begin-gen
1300         Identifier: expr: 'qryProvincia'
1300        Identifier: end-gen
1300        With: line: ' #WITH_START'
1300      <-Source: line: ' #WITH_START'
1300     <--If: line: ' #WITH_START'
1300    <---Source: line: ' #WITH_START'
1300   <----Function: line: ' #WITH_START'
1300  <-----Source: line: ' #WITH_START'
1300 <------Class: line: ' #WITH_START'
1300<-------Source: line: ' #WITH_START'
1301        Source: begin-gen
1301         InstructionCall: begin-gen
1301          FunctionCall: begin-gen
1301           Value: begin-gen
1301            Constant: begin-gen
1301             Constant: ctype: 'String' -> 'provincias'
1301             Constant: expr: 'u"provincias"'
1301           <-Value: expr: 'u"provincias"'
1301            Constant: end-gen
1301           Value: end-gen
1301           FunctionCall: expr: 'setTablesList(u"provincias")'
1301          FunctionCall: end-gen
1301          InstructionCall: line: 'setTablesList(u"provincias")'
1301        <-Source: line: 'setTablesList(u"provincias")'
1301       <--With: line: 'qryProvincia.setTablesList(u"provincias")'
1301      <---Source: line: 'qryProvincia.setTablesList(u"provincias")'
1301     <----If: line: 'qryProvincia.setTablesList(u"provincias")'
1301    <-----Source: line: 'qryProvincia.setTablesList(u"provincias")'
1301   <------Function: line: 'qryProvincia.setTablesList(u"provincias")'
1301  <-------Source: line: 'qryProvincia.setTablesList(u"provincias")'
1301 <--------Class: line: 'qryProvincia.setTablesList(u"provincias")'
1301<---------Source: line: 'qryProvincia.setTablesList(u"provincias")'
1302         InstructionCall: end-gen
1302         InstructionCall: begin-gen
1302          FunctionCall: begin-gen
1302           Value: begin-gen
1302            Constant: begin-gen
1302             Constant: ctype: 'String' -> 'idprovincia'
1302             Constant: expr: 'u"idprovincia"'
1302           <-Value: expr: 'u"idprovincia"'
1302            Constant: end-gen
1302           Value: end-gen
1302           FunctionCall: expr: 'setSelect(u"idprovincia")'
1302          FunctionCall: end-gen
1302          InstructionCall: line: 'setSelect(u"idprovincia")'
1302        <-Source: line: 'setSelect(u"idprovincia")'
1302       <--With: line: 'qryProvincia.setSelect(u"idprovincia")'
1302      <---Source: line: 'qryProvincia.setSelect(u"idprovincia")'
1302     <----If: line: 'qryProvincia.setSelect(u"idprovincia")'
1302    <-----Source: line: 'qryProvincia.setSelect(u"idprovincia")'
1302   <------Function: line: 'qryProvincia.setSelect(u"idprovincia")'
1302  <-------Source: line: 'qryProvincia.setSelect(u"idprovincia")'
1302 <--------Class: line: 'qryProvincia.setSelect(u"idprovincia")'
1302<---------Source: line: 'qryProvincia.setSelect(u"idprovincia")'
1303         InstructionCall: end-gen
1303         InstructionCall: begin-gen
1303          FunctionCall: begin-gen
1303           Value: begin-gen
1303            Constant: begin-gen
1303             Constant: ctype: 'String' -> 'provincias'
1303             Constant: expr: 'u"provincias"'
1303           <-Value: expr: 'u"provincias"'
1303            Constant: end-gen
1303           Value: end-gen
1303           FunctionCall: expr: 'setFrom(u"provincias")'
1303          FunctionCall: end-gen
1303          InstructionCall: line: 'setFrom(u"provincias")'
1303        <-Source: line: 'setFrom(u"provincias")'
1303       <--With: line: 'qryProvincia.setFrom(u"provincias")'
1303      <---Source: line: 'qryProvincia.setFrom(u"provincias")'
1303     <----If: line: 'qryProvincia.setFrom(u"provincias")'
1303    <-----Source: line: 'qryProvincia.setFrom(u"provincias")'
1303   <------Function: line: 'qryProvincia.setFrom(u"provincias")'
1303  <-------Source: line: 'qryProvincia.setFrom(u"provincias")'
1303 <--------Class: line: 'qryProvincia.setFrom(u"provincias")'
1303<---------Source: line: 'qryProvincia.setFrom(u"provincias")'
1304         InstructionCall: end-gen
1304         InstructionCall: begin-gen
1304          FunctionCall: begin-gen
1304           Value: begin-gen
1304            Identifier: begin-gen
1304             Identifier: expr: 'True'
1304           <-Value: expr: 'True'
1304            Identifier: end-gen
1304           Value: end-gen
1304           FunctionCall: expr: 'setForwardOnly(True)'
1304          FunctionCall: end-gen
1304          InstructionCall: line: 'setForwardOnly(True)'
1304        <-Source: line: 'setForwardOnly(True)'
1304       <--With: line: 'qryProvincia.setForwardOnly(True)'
1304      <---Source: line: 'qryProvincia.setForwardOnly(True)'
1304     <----If: line: 'qryProvincia.setForwardOnly(True)'
1304    <-----Source: line: 'qryProvincia.setForwardOnly(True)'
1304   <------Function: line: 'qryProvincia.setForwardOnly(True)'
1304  <-------Source: line: 'qryProvincia.setForwardOnly(True)'
1304 <--------Class: line: 'qryProvincia.setForwardOnly(True)'
1304<---------Source: line: 'qryProvincia.setForwardOnly(True)'
1305         InstructionCall: end-gen
1305        Source: end-gen
1305        With: line: ' #WITH_END'
1305      <-Source: line: ' #WITH_END'
1305     <--If: line: ' #WITH_END'
1305    <---Source: line: ' #WITH_END'
1305   <----Function: line: ' #WITH_END'
1305  <-----Source: line: ' #WITH_END'
1305 <------Class: line: ' #WITH_END'
1305<-------Source: line: ' #WITH_END'
1306       With: end-gen
1306       InstructionCall: begin-gen
1306        Member: begin-gen
1306         Identifier: begin-gen
1306          Identifier: expr: 'qryProvincia'
1306         Identifier: end-gen
1306         FunctionCall: begin-gen
1306          Value: begin-gen
1306           Identifier: begin-gen
1306            Identifier: expr: 'where'
1306          <-Value: expr: 'where'
1306           Identifier: end-gen
1306          Value: end-gen
1306          FunctionCall: expr: 'setWhere(where)'
1306         FunctionCall: end-gen
1306         Member: expr: 'qryProvincia.setWhere(where)'
1306        Member: end-gen
1306        InstructionCall: line: 'qryProvincia.setWhere(where)'
1306      <-Source: line: 'qryProvincia.setWhere(where)'
1306     <--If: line: 'qryProvincia.setWhere(where)'
1306    <---Source: line: 'qryProvincia.setWhere(where)'
1306   <----Function: line: 'qryProvincia.setWhere(where)'
1306  <-----Source: line: 'qryProvincia.setWhere(where)'
1306 <------Class: line: 'qryProvincia.setWhere(where)'
1306<-------Source: line: 'qryProvincia.setWhere(where)'
1307       InstructionCall: end-gen
1307       If: begin-gen
1307        Value: begin-gen
1307         OpUnary: begin-gen
1307          OpUnary: expr: 'not'
1307        <-Value: expr: 'not'
1307          Member: begin-gen
1307           Identifier: begin-gen
1307            Identifier: expr: 'qryProvincia'
1307           Identifier: end-gen
1307           FunctionCall: begin-gen
1307            FunctionCall: expr: 'exec_()'
1307           FunctionCall: end-gen
1307           Member: expr: 'qryProvincia.exec_()'
1307         <-OpUnary: expr: 'qryProvincia.exec_()'
1307        <--Value: expr: 'qryProvincia.exec_()'
1307          Member: end-gen
1307         OpUnary: end-gen
1307        Value: end-gen
1307        If: line: 'if not qryProvincia.exec_():'
1307      <-Source: line: 'if not qryProvincia.exec_():'
1307     <--If: line: 'if not qryProvincia.exec_():'
1307    <---Source: line: 'if not qryProvincia.exec_():'
1307   <----Function: line: 'if not qryProvincia.exec_():'
1307  <-----Source: line: 'if not qryProvincia.exec_():'
1307 <------Class: line: 'if not qryProvincia.exec_():'
1307<-------Source: line: 'if not qryProvincia.exec_():'
1308        If: begin: 'block-if'
1308      <-Source: begin: 'block-if'
1308     <--If: begin: 'block-if'
1308    <---Source: begin: 'block-if'
1308   <----Function: begin: 'block-if'
1308  <-----Source: begin: 'block-if'
1308 <------Class: begin: 'block-if'
1308<-------Source: begin: 'block-if'
1308        Source: begin-gen
1308         InstructionFlow: begin-gen
1308          Value: begin-gen
1308           Identifier: begin-gen
1308            Identifier: expr: 'False'
1308          <-Value: expr: 'False'
1308           Identifier: end-gen
1308          Value: end-gen
1308          InstructionFlow: line: 'return False'
1308        <-Source: line: 'return False'
1308       <--If: line: 'return False'
1308      <---Source: line: 'return False'
1308     <----If: line: 'return False'
1308    <-----Source: line: 'return False'
1308   <------Function: line: 'return False'
1308  <-------Source: line: 'return False'
1308 <--------Class: line: 'return False'
1308<---------Source: line: 'return False'
1309         InstructionFlow: end-gen
1309        Source: end-gen
1309        If: end: 'block-if'
1309      <-Source: end: 'block-if'
1309     <--If: end: 'block-if'
1309    <---Source: end: 'block-if'
1309   <----Function: end: 'block-if'
1309  <-----Source: end: 'block-if'
1309 <------Class: end: 'block-if'
1309<-------Source: end: 'block-if'
1309       If: end-gen
1309       Switch: begin-gen
1309        Value: begin-gen
1309         Member: begin-gen
1309          Identifier: begin-gen
1309           Identifier: expr: 'qryProvincia'
1309          Identifier: end-gen
1309          FunctionCall: begin-gen
1309           FunctionCall: expr: 'size()'
1309          FunctionCall: end-gen
1309          Member: expr: 'qryProvincia.size()'
1309        <-Value: expr: 'qryProvincia.size()'
1309         Member: end-gen
1309        Value: end-gen
1309        Switch: line: 'sc0_when = qryProvincia.size()'
1309      <-Source: line: 'sc0_when = qryProvincia.size()'
1309     <--If: line: 'sc0_when = qryProvincia.size()'
1309    <---Source: line: 'sc0_when = qryProvincia.size()'
1309   <----Function: line: 'sc0_when = qryProvincia.size()'
1309  <-----Source: line: 'sc0_when = qryProvincia.size()'
1309 <------Class: line: 'sc0_when = qryProvincia.size()'
1309<-------Source: line: 'sc0_when = qryProvincia.size()'
1310        Switch: line: 'sc0_do_work,sc0_work_done = False,False'
1310      <-Source: line: 'sc0_do_work,sc0_work_done = False,False'
1310     <--If: line: 'sc0_do_work,sc0_work_done = False,False'
1310    <---Source: line: 'sc0_do_work,sc0_work_done = False,False'
1310   <----Function: line: 'sc0_do_work,sc0_work_done = False,False'
1310  <-----Source: line: 'sc0_do_work,sc0_work_done = False,False'
1310 <------Class: line: 'sc0_do_work,sc0_work_done = False,False'
1310<-------Source: line: 'sc0_do_work,sc0_work_done = False,False'
1311        Value: begin-gen
1311         Constant: begin-gen
1311          Constant: ctype: 'Number' -> '0'
1311          Constant: expr: '0'
1311        <-Value: expr: '0'
1311         Constant: end-gen
1311        Value: end-gen
1311        Switch: line: 'if sc0_when == 0: sc0_do_work,sc0_work_done = True,True'
1311      <-Source: line: 'if sc0_when == 0: sc0_do_work,sc0_work_done = True,True'
1311     <--If: line: 'if sc0_when == 0: sc0_do_work,sc0_work_done = True,True'
1311    <---Source: line: 'if sc0_when == 0: sc0_do_work,sc0_work_done = True,True'
1311   <----Function: line: 'if sc0_when == 0: sc0_do_work,sc0_work_done = True,True'
1311  <-----Source: line: 'if sc0_when == 0: sc0_do_work,sc0_work_done = True,True'
1311 <------Class: line: 'if sc0_when == 0: sc0_do_work,sc0_work_done = True,True'
1311<-------Source: line: 'if sc0_when == 0: sc0_do_work,sc0_work_done = True,True'
1312        Switch: line: 'if sc0_do_work:'
1312      <-Source: line: 'if sc0_do_work:'
1312     <--If: line: 'if sc0_do_work:'
1312    <---Source: line: 'if sc0_do_work:'
1312   <----Function: line: 'if sc0_do_work:'
1312  <-----Source: line: 'if sc0_do_work:'
1312 <------Class: line: 'if sc0_do_work:'
1312<-------Source: line: 'if sc0_do_work:'
1313        Switch: begin: 'block-if'
1313      <-Source: begin: 'block-if'
1313     <--If: begin: 'block-if'
1313    <---Source: begin: 'block-if'
1313   <----Function: begin: 'block-if'
1313  <-----Source: begin: 'block-if'
1313 <------Class: begin: 'block-if'
1313<-------Source: begin: 'block-if'
1313        Source: begin-gen
1313         InstructionFlow: begin-gen
1313          InstructionFlow: line: 'return '
1313        <-Source: line: 'return '
1313       <--Switch: line: 'return '
1313      <---Source: line: 'return '
1313     <----If: line: 'return '
1313    <-----Source: line: 'return '
1313   <------Function: line: 'return '
1313  <-------Source: line: 'return '
1313 <--------Class: line: 'return '
1313<---------Source: line: 'return '
1314         InstructionFlow: end-gen
1314        Source: end-gen
1314        Switch: end: 'block-if'
1314      <-Source: end: 'block-if'
1314     <--If: end: 'block-if'
1314    <---Source: end: 'block-if'
1314   <----Function: end: 'block-if'
1314  <-----Source: end: 'block-if'
1314 <------Class: end: 'block-if'
1314<-------Source: end: 'block-if'
1314        Value: begin-gen
1314         Constant: begin-gen
1314          Constant: ctype: 'Number' -> '1'
1314          Constant: expr: '1'
1314        <-Value: expr: '1'
1314         Constant: end-gen
1314        Value: end-gen
1314        Switch: line: 'if sc0_when == 1: sc0_do_work,sc0_work_done = True,True'
1314      <-Source: line: 'if sc0_when == 1: sc0_do_work,sc0_work_done = True,True'
1314     <--If: line: 'if sc0_when == 1: sc0_do_work,sc0_work_done = True,True'
1314    <---Source: line: 'if sc0_when == 1: sc0_do_work,sc0_work_done = True,True'
1314   <----Function: line: 'if sc0_when == 1: sc0_do_work,sc0_work_done = True,True'
1314  <-----Source: line: 'if sc0_when == 1: sc0_do_work,sc0_work_done = True,True'
1314 <------Class: line: 'if sc0_when == 1: sc0_do_work,sc0_work_done = True,True'
1314<-------Source: line: 'if sc0_when == 1: sc0_do_work,sc0_work_done = True,True'
1315        Switch: line: 'if sc0_do_work:'
1315      <-Source: line: 'if sc0_do_work:'
1315     <--If: line: 'if sc0_do_work:'
1315    <---Source: line: 'if sc0_do_work:'
1315   <----Function: line: 'if sc0_do_work:'
1315  <-----Source: line: 'if sc0_do_work:'
1315 <------Class: line: 'if sc0_do_work:'
1315<-------Source: line: 'if sc0_do_work:'
1316        Switch: begin: 'block-if'
1316      <-Source: begin: 'block-if'
1316     <--If: begin: 'block-if'
1316    <---Source: begin: 'block-if'
1316   <----Function: begin: 'block-if'
1316  <-----Source: begin: 'block-if'
1316 <------Class: begin: 'block-if'
1316<-------Source: begin: 'block-if'
1316        Source: begin-gen
1316         If: begin-gen
1316          Value: begin-gen
1316           OpUnary: begin-gen
1316            OpUnary: expr: 'not'
1316          <-Value: expr: 'not'
1316            Member: begin-gen
1316             Identifier: begin-gen
1316              Identifier: expr: 'qryProvincia'
1316             Identifier: end-gen
1316             FunctionCall: begin-gen
1316              FunctionCall: expr: 'first()'
1316             FunctionCall: end-gen
1316             Member: expr: 'qryProvincia.first()'
1316           <-OpUnary: expr: 'qryProvincia.first()'
1316          <--Value: expr: 'qryProvincia.first()'
1316            Member: end-gen
1316           OpUnary: end-gen
1316          Value: end-gen
1316          If: line: 'if not qryProvincia.first():'
1316        <-Source: line: 'if not qryProvincia.first():'
1316       <--Switch: line: 'if not qryProvincia.first():'
1316      <---Source: line: 'if not qryProvincia.first():'
1316     <----If: line: 'if not qryProvincia.first():'
1316    <-----Source: line: 'if not qryProvincia.first():'
1316   <------Function: line: 'if not qryProvincia.first():'
1316  <-------Source: line: 'if not qryProvincia.first():'
1316 <--------Class: line: 'if not qryProvincia.first():'
1316<---------Source: line: 'if not qryProvincia.first():'
1317          If: begin: 'block-if'
1317        <-Source: begin: 'block-if'
1317       <--Switch: begin: 'block-if'
1317      <---Source: begin: 'block-if'
1317     <----If: begin: 'block-if'
1317    <-----Source: begin: 'block-if'
1317   <------Function: begin: 'block-if'
1317  <-------Source: begin: 'block-if'
1317 <--------Class: begin: 'block-if'
1317<---------Source: begin: 'block-if'
1317          Source: begin-gen
1317           InstructionFlow: begin-gen
1317            Value: begin-gen
1317             Identifier: begin-gen
1317              Identifier: expr: 'False'
1317            <-Value: expr: 'False'
1317             Identifier: end-gen
1317            Value: end-gen
1317            InstructionFlow: line: 'return False'
1317          <-Source: line: 'return False'
1317         <--If: line: 'return False'
1317        <---Source: line: 'return False'
1317       <----Switch: line: 'return False'
1317      <-----Source: line: 'return False'
1317     <------If: line: 'return False'
1317    <-------Source: line: 'return False'
1317   <--------Function: line: 'return False'
1317  <---------Source: line: 'return False'
1317 <----------Class: line: 'return False'
1317<-----------Source: line: 'return False'
1318           InstructionFlow: end-gen
1318          Source: end-gen
1318          If: end: 'block-if'
1318        <-Source: end: 'block-if'
1318       <--Switch: end: 'block-if'
1318      <---Source: end: 'block-if'
1318     <----If: end: 'block-if'
1318    <-----Source: end: 'block-if'
1318   <------Function: end: 'block-if'
1318  <-------Source: end: 'block-if'
1318 <--------Class: end: 'block-if'
1318<---------Source: end: 'block-if'
1318         If: end-gen
1318         InstructionCall: begin-gen
1318          Member: begin-gen
1318           Identifier: begin-gen
1318            Identifier: expr: 'formulario'
1318           Identifier: end-gen
1318           FunctionCall: begin-gen
1318            FunctionCall: expr: 'cursor()'
1318           FunctionCall: end-gen
1318           FunctionCall: begin-gen
1318            Value: begin-gen
1318             Identifier: begin-gen
1318              Identifier: expr: 'campoId'
1318            <-Value: expr: 'campoId'
1318             Identifier: end-gen
1318            Value: end-gen
1318            Value: begin-gen
1318             Member: begin-gen
1318              Identifier: begin-gen
1318               Identifier: expr: 'qryProvincia'
1318              Identifier: end-gen
1318              FunctionCall: begin-gen
1318               Value: begin-gen
1318                Constant: begin-gen
1318                 Constant: ctype: 'String' -> 'idprovincia'
1318                 Constant: expr: 'u"idprovincia"'
1318               <-Value: expr: 'u"idprovincia"'
1318                Constant: end-gen
1318               Value: end-gen
1318               FunctionCall: expr: 'value(u"idprovincia")'
1318              FunctionCall: end-gen
1318              Member: expr: 'qryProvincia.value(u"idprovincia")'
1318            <-Value: expr: 'qryProvincia.value(u"idprovincia")'
1318             Member: end-gen
1318            Value: end-gen
1318            FunctionCall: expr: 'setValueBuffer(campoId, qryProvincia.value(u"idprovincia"))'
1318           FunctionCall: end-gen
1318           Member: expr: 'formulario.cursor().setValueBuffer(campoId, qryProvincia.value(u"idprovincia"))'
1318          Member: end-gen
1318          InstructionCall: line: 'formulario.cursor().setValueBuffer(campoId, qryProvincia.value(u"idprovincia"))'
1318        <-Source: line: 'formulario.cursor().setValueBuffer(campoId, qryProvincia.value(u"idprovincia"))'
1318       <--Switch: line: 'formulario.cursor().setValueBuffer(campoId, qryProvincia.value(u"idprovincia"))'
1318      <---Source: line: 'formulario.cursor().setValueBuffer(campoId, qryProvincia.value(u"idprovincia"))'
1318     <----If: line: 'formulario.cursor().setValueBuffer(campoId, qryProvincia.value(u"idprovincia"))'
1318    <-----Source: line: 'formulario.cursor().setValueBuffer(campoId, qryProvincia.value(u"idprovincia"))'
1318   <------Function: line: 'formulario.cursor().setValueBuffer(campoId, qryProvincia.value(u"idprovincia"))'
1318  <-------Source: line: 'formulario.cursor().setValueBuffer(campoId, qryProvincia.value(u"idprovincia"))'
1318 <--------Class: line: 'formulario.cursor().setValueBuffer(campoId, qryProvincia.value(u"idprovincia"))'
1318<---------Source: line: 'formulario.cursor().setValueBuffer(campoId, qryProvincia.value(u"idprovincia"))'
1319         InstructionCall: end-gen
1319         InstructionFlow: begin-gen
1319          InstructionFlow: break: 'break '
1319        <-Source: break: 'break '
1319       <--Switch: line: 'sc0_do_work = False # BREAK'
1319      <---Source: line: 'sc0_do_work = False # BREAK'
1319     <----If: line: 'sc0_do_work = False # BREAK'
1319    <-----Source: line: 'sc0_do_work = False # BREAK'
1319   <------Function: line: 'sc0_do_work = False # BREAK'
1319  <-------Source: line: 'sc0_do_work = False # BREAK'
1319 <--------Class: line: 'sc0_do_work = False # BREAK'
1319<---------Source: line: 'sc0_do_work = False # BREAK'
1320         InstructionFlow: end-gen
1320        Source: end-gen
1320        Switch: end: 'block-if'
1320      <-Source: end: 'block-if'
1320     <--If: end: 'block-if'
1320    <---Source: end: 'block-if'
1320   <----Function: end: 'block-if'
1320  <-----Source: end: 'block-if'
1320 <------Class: end: 'block-if'
1320<-------Source: end: 'block-if'
1320        Switch: line: 'if not sc0_work_done: sc0_do_work,sc0_work_done = True,True'
1320      <-Source: line: 'if not sc0_work_done: sc0_do_work,sc0_work_done = True,True'
1320     <--If: line: 'if not sc0_work_done: sc0_do_work,sc0_work_done = True,True'
1320    <---Source: line: 'if not sc0_work_done: sc0_do_work,sc0_work_done = True,True'
1320   <----Function: line: 'if not sc0_work_done: sc0_do_work,sc0_work_done = True,True'
1320  <-----Source: line: 'if not sc0_work_done: sc0_do_work,sc0_work_done = True,True'
1320 <------Class: line: 'if not sc0_work_done: sc0_do_work,sc0_work_done = True,True'
1320<-------Source: line: 'if not sc0_work_done: sc0_do_work,sc0_work_done = True,True'
1322        Switch: line: 'if sc0_do_work:'
1322      <-Source: line: 'if sc0_do_work:'
1322     <--If: line: 'if sc0_do_work:'
1322    <---Source: line: 'if sc0_do_work:'
1322   <----Function: line: 'if sc0_do_work:'
1322  <-----Source: line: 'if sc0_do_work:'
1322 <------Class: line: 'if sc0_do_work:'
1322<-------Source: line: 'if sc0_do_work:'
1323        Switch: begin: 'block-if'
1323      <-Source: begin: 'block-if'
1323     <--If: begin: 'block-if'
1323    <---Source: begin: 'block-if'
1323   <----Function: begin: 'block-if'
1323  <-----Source: begin: 'block-if'
1323 <------Class: begin: 'block-if'
1323<-------Source: begin: 'block-if'
1323        Source: begin-gen
1323         DeclarationBlock: begin-gen
1323          Variable: begin-gen
1323           Variable: expr: 'listaProvincias'
1323           Variable: expr: '='
1323           Value: begin-gen
1323            Constant: begin-gen
1323             Constant: ctype: 'String' -> ''
1323             Constant: expr: 'u""'
1323           <-Value: expr: 'u""'
1323          <--Variable: expr: 'u""'
1323            Constant: end-gen
1323           Value: end-gen
1323          Variable: end-gen
1323          DeclarationBlock: line: 'listaProvincias = u""'
1323        <-Source: line: 'listaProvincias = u""'
1323       <--Switch: line: 'listaProvincias = u""'
1323      <---Source: line: 'listaProvincias = u""'
1323     <----If: line: 'listaProvincias = u""'
1323    <-----Source: line: 'listaProvincias = u""'
1323   <------Function: line: 'listaProvincias = u""'
1323  <-------Source: line: 'listaProvincias = u""'
1323 <--------Class: line: 'listaProvincias = u""'
1323<---------Source: line: 'listaProvincias = u""'
1324         DeclarationBlock: end-gen
1324         While: begin-gen
1324          Value: begin-gen
1324           Member: begin-gen
1324            Identifier: begin-gen
1324             Identifier: expr: 'qryProvincia'
1324            Identifier: end-gen
1324            FunctionCall: begin-gen
1324             FunctionCall: expr: 'next()'
1324            FunctionCall: end-gen
1324            Member: expr: 'qryProvincia.next()'
1324          <-Value: expr: 'qryProvincia.next()'
1324           Member: end-gen
1324          Value: end-gen
1324          While: line: 'while qryProvincia.next():'
1324        <-Source: line: 'while qryProvincia.next():'
1324       <--Switch: line: 'while qryProvincia.next():'
1324      <---Source: line: 'while qryProvincia.next():'
1324     <----If: line: 'while qryProvincia.next():'
1324    <-----Source: line: 'while qryProvincia.next():'
1324   <------Function: line: 'while qryProvincia.next():'
1324  <-------Source: line: 'while qryProvincia.next():'
1324 <--------Class: line: 'while qryProvincia.next():'
1324<---------Source: line: 'while qryProvincia.next():'
1325          While: begin: 'block-while'
1325        <-Source: begin: 'block-while'
1325       <--Switch: begin: 'block-while'
1325      <---Source: begin: 'block-while'
1325     <----If: begin: 'block-while'
1325    <-----Source: begin: 'block-while'
1325   <------Function: begin: 'block-while'
1325  <-------Source: begin: 'block-while'
1325 <--------Class: begin: 'block-while'
1325<---------Source: begin: 'block-while'
1325          Source: begin-gen
1325           If: begin-gen
1325            Expression: begin-gen
1325             Identifier: begin-gen
1325              Identifier: expr: 'listaProvincias'
1325            <-Expression: expr: 'listaProvincias'
1325             Identifier: end-gen
1325             Compare: begin-gen
1325              Compare: expr: '!='
1325            <-Expression: expr: '!='
1325             Compare: end-gen
1325             Constant: begin-gen
1325              Constant: ctype: 'String' -> ''
1325              Constant: expr: 'u""'
1325            <-Expression: expr: 'u""'
1325             Constant: end-gen
1325            Expression: end-gen
1325            If: line: 'if listaProvincias != u"":'
1325          <-Source: line: 'if listaProvincias != u"":'
1325         <--While: line: 'if listaProvincias != u"":'
1325        <---Source: line: 'if listaProvincias != u"":'
1325       <----Switch: line: 'if listaProvincias != u"":'
1325      <-----Source: line: 'if listaProvincias != u"":'
1325     <------If: line: 'if listaProvincias != u"":'
1325    <-------Source: line: 'if listaProvincias != u"":'
1325   <--------Function: line: 'if listaProvincias != u"":'
1325  <---------Source: line: 'if listaProvincias != u"":'
1325 <----------Class: line: 'if listaProvincias != u"":'
1325<-----------Source: line: 'if listaProvincias != u"":'
1326            If: begin: 'block-if'
1326          <-Source: begin: 'block-if'
1326         <--While: begin: 'block-if'
1326        <---Source: begin: 'block-if'
1326       <----Switch: begin: 'block-if'
1326      <-----Source: begin: 'block-if'
1326     <------If: begin: 'block-if'
1326    <-------Source: begin: 'block-if'
1326   <--------Function: begin: 'block-if'
1326  <---------Source: begin: 'block-if'
1326 <----------Class: begin: 'block-if'
1326<-----------Source: begin: 'block-if'
1326            Source: begin-gen
1326             InstructionUpdate: begin-gen
1326              Identifier: begin-gen
1326               Identifier: expr: 'listaProvincias'
1326              Identifier: end-gen
1326              OpUpdate: begin-gen
1326               OpUpdate: expr: '+='
1326              OpUpdate: end-gen
1326              Value: begin-gen
1326               Constant: begin-gen
1326                Constant: ctype: 'String' -> ', '
1326                Constant: expr: 'u", "'
1326              <-Value: expr: 'u", "'
1326               Constant: end-gen
1326              Value: end-gen
1326              InstructionUpdate: line: 'listaProvincias += u", "'
1326            <-Source: line: 'listaProvincias += u", "'
1326           <--If: line: 'listaProvincias += u", "'
1326          <---Source: line: 'listaProvincias += u", "'
1326         <----While: line: 'listaProvincias += u", "'
1326        <-----Source: line: 'listaProvincias += u", "'
1326       <------Switch: line: 'listaProvincias += u", "'
1326      <-------Source: line: 'listaProvincias += u", "'
1326     <--------If: line: 'listaProvincias += u", "'
1326    <---------Source: line: 'listaProvincias += u", "'
1326   <----------Function: line: 'listaProvincias += u", "'
1326  <-----------Source: line: 'listaProvincias += u", "'
1326 <------------Class: line: 'listaProvincias += u", "'
1326<-------------Source: line: 'listaProvincias += u", "'
1327             InstructionUpdate: end-gen
1327            Source: end-gen
1327            If: end: 'block-if'
1327          <-Source: end: 'block-if'
1327         <--While: end: 'block-if'
1327        <---Source: end: 'block-if'
1327       <----Switch: end: 'block-if'
1327      <-----Source: end: 'block-if'
1327     <------If: end: 'block-if'
1327    <-------Source: end: 'block-if'
1327   <--------Function: end: 'block-if'
1327  <---------Source: end: 'block-if'
1327 <----------Class: end: 'block-if'
1327<-----------Source: end: 'block-if'
1327           If: end-gen
1327           InstructionUpdate: begin-gen
1327            Identifier: begin-gen
1327             Identifier: expr: 'listaProvincias'
1327            Identifier: end-gen
1327            OpUpdate: begin-gen
1327             OpUpdate: expr: '+='
1327            OpUpdate: end-gen
1327            Value: begin-gen
1327             Member: begin-gen
1327              Identifier: begin-gen
1327               Identifier: expr: 'qryProvincia'
1327              Identifier: end-gen
1327              FunctionCall: begin-gen
1327               Value: begin-gen
1327                Constant: begin-gen
1327                 Constant: ctype: 'String' -> 'idprovincia'
1327                 Constant: expr: 'u"idprovincia"'
1327               <-Value: expr: 'u"idprovincia"'
1327                Constant: end-gen
1327               Value: end-gen
1327               FunctionCall: expr: 'value(u"idprovincia")'
1327              FunctionCall: end-gen
1327              Member: expr: 'qryProvincia.value(u"idprovincia")'
1327            <-Value: expr: 'qryProvincia.value(u"idprovincia")'
1327             Member: end-gen
1327            Value: end-gen
1327            InstructionUpdate: line: 'listaProvincias += qryProvincia.value(u"idprovincia")'
1327          <-Source: line: 'listaProvincias += qryProvincia.value(u"idprovincia")'
1327         <--While: line: 'listaProvincias += qryProvincia.value(u"idprovincia")'
1327        <---Source: line: 'listaProvincias += qryProvincia.value(u"idprovincia")'
1327       <----Switch: line: 'listaProvincias += qryProvincia.value(u"idprovincia")'
1327      <-----Source: line: 'listaProvincias += qryProvincia.value(u"idprovincia")'
1327     <------If: line: 'listaProvincias += qryProvincia.value(u"idprovincia")'
1327    <-------Source: line: 'listaProvincias += qryProvincia.value(u"idprovincia")'
1327   <--------Function: line: 'listaProvincias += qryProvincia.value(u"idprovincia")'
1327  <---------Source: line: 'listaProvincias += qryProvincia.value(u"idprovincia")'
1327 <----------Class: line: 'listaProvincias += qryProvincia.value(u"idprovincia")'
1327<-----------Source: line: 'listaProvincias += qryProvincia.value(u"idprovincia")'
1328           InstructionUpdate: end-gen
1328          Source: end-gen
1328          While: end: 'block-while'
1328        <-Source: end: 'block-while'
1328       <--Switch: end: 'block-while'
1328      <---Source: end: 'block-while'
1328     <----If: end: 'block-while'
1328    <-----Source: end: 'block-while'
1328   <------Function: end: 'block-while'
1328  <-------Source: end: 'block-while'
1328 <--------Class: end: 'block-while'
1328<---------Source: end: 'block-while'
1328         While: end-gen
1328         DeclarationBlock: begin-gen
1328          Variable: begin-gen
1328           Variable: expr: 'f'
1328           Variable: expr: '='
1328           Value: begin-gen
1328            New: begin-gen
1328             FunctionCall: begin-gen
1328              Value: begin-gen
1328               Constant: begin-gen
1328                Constant: ctype: 'String' -> 'provincias'
1328                Constant: expr: 'u"provincias"'
1328              <-Value: expr: 'u"provincias"'
1328               Constant: end-gen
1328              Value: end-gen
1328              FunctionCall: expr: 'FLFormSearchDB(u"provincias")'
1328            <-New: expr: 'qsatype.FLFormSearchDB(u"provincias")'
1328           <--Value: expr: 'qsatype.FLFormSearchDB(u"provincias")'
1328          <---Variable: expr: 'qsatype.FLFormSearchDB(u"provincias")'
1328             FunctionCall: end-gen
1328            New: end-gen
1328           Value: end-gen
1328          Variable: end-gen
1328          DeclarationBlock: line: 'f = qsatype.FLFormSearchDB(u"provincias")'
1328        <-Source: line: 'f = qsatype.FLFormSearchDB(u"provincias")'
1328       <--Switch: line: 'f = qsatype.FLFormSearchDB(u"provincias")'
1328      <---Source: line: 'f = qsatype.FLFormSearchDB(u"provincias")'
1328     <----If: line: 'f = qsatype.FLFormSearchDB(u"provincias")'
1328    <-----Source: line: 'f = qsatype.FLFormSearchDB(u"provincias")'
1328   <------Function: line: 'f = qsatype.FLFormSearchDB(u"provincias")'
1328  <-------Source: line: 'f = qsatype.FLFormSearchDB(u"provincias")'
1328 <--------Class: line: 'f = qsatype.FLFormSearchDB(u"provincias")'
1328<---------Source: line: 'f = qsatype.FLFormSearchDB(u"provincias")'
1329         DeclarationBlock: end-gen
1329         DeclarationBlock: begin-gen
1329          Variable: begin-gen
1329           Variable: expr: 'curProvincias'
1329           Variable: expr: '='
1329           Value: begin-gen
1329            Member: begin-gen
1329             Identifier: begin-gen
1329              Identifier: expr: 'f'
1329             Identifier: end-gen
1329             FunctionCall: begin-gen
1329              FunctionCall: expr: 'cursor()'
1329             FunctionCall: end-gen
1329             Member: expr: 'f.cursor()'
1329           <-Value: expr: 'f.cursor()'
1329          <--Variable: expr: 'f.cursor()'
1329            Member: end-gen
1329           Value: end-gen
1329          Variable: end-gen
1329          DeclarationBlock: line: 'curProvincias = f.cursor()'
1329        <-Source: line: 'curProvincias = f.cursor()'
1329       <--Switch: line: 'curProvincias = f.cursor()'
1329      <---Source: line: 'curProvincias = f.cursor()'
1329     <----If: line: 'curProvincias = f.cursor()'
1329    <-----Source: line: 'curProvincias = f.cursor()'
1329   <------Function: line: 'curProvincias = f.cursor()'
1329  <-------Source: line: 'curProvincias = f.cursor()'
1329 <--------Class: line: 'curProvincias = f.cursor()'
1329<---------Source: line: 'curProvincias = f.cursor()'
1330         DeclarationBlock: end-gen
1330         InstructionCall: begin-gen
1330          Member: begin-gen
1330           Identifier: begin-gen
1330            Identifier: expr: 'curProvincias'
1330           Identifier: end-gen
1330           FunctionCall: begin-gen
1330            Expression: begin-gen
1330             Expression: expr: 'ustr('
1330             Constant: begin-gen
1330              Constant: ctype: 'String' -> 'idprovincia IN ('
1330              Constant: expr: 'u"idprovincia IN ("'
1330            <-Expression: expr: 'u"idprovincia IN ("'
1330             Constant: end-gen
1330             Expression: expr: ','
1330             Identifier: begin-gen
1330              Identifier: expr: 'listaProvincias'
1330            <-Expression: expr: 'listaProvincias'
1330             Identifier: end-gen
1330             Expression: expr: ','
1330             Constant: begin-gen
1330              Constant: ctype: 'String' -> ')'
1330              Constant: expr: 'u")"'
1330            <-Expression: expr: 'u")"'
1330             Constant: end-gen
1330             Expression: expr: ')'
1330            Expression: end-gen
1330            FunctionCall: expr: 'setMainFilter(ustr( u"idprovincia IN (" , listaProvincias , u")" ))'
1330           FunctionCall: end-gen
1330           Member: expr: 'curProvincias.setMainFilter(ustr( u"idprovincia IN (" , listaProvincias , u")" ))'
1330          Member: end-gen
1330          InstructionCall: line: 'curProvincias.setMainFilter(ustr( u"idprovincia IN (" , listaProvincias , u")" ))'
1330        <-Source: line: 'curProvincias.setMainFilter(ustr( u"idprovincia IN (" , listaProvincias , u")" ))'
1330       <--Switch: line: 'curProvincias.setMainFilter(ustr( u"idprovincia IN (" , listaProvincias , u")" ))'
1330      <---Source: line: 'curProvincias.setMainFilter(ustr( u"idprovincia IN (" , listaProvincias , u")" ))'
1330     <----If: line: 'curProvincias.setMainFilter(ustr( u"idprovincia IN (" , listaProvincias , u")" ))'
1330    <-----Source: line: 'curProvincias.setMainFilter(ustr( u"idprovincia IN (" , listaProvincias , u")" ))'
1330   <------Function: line: 'curProvincias.setMainFilter(ustr( u"idprovincia IN (" , listaProvincias , u")" ))'
1330  <-------Source: line: 'curProvincias.setMainFilter(ustr( u"idprovincia IN (" , listaProvincias , u")" ))'
1330 <--------Class: line: 'curProvincias.setMainFilter(ustr( u"idprovincia IN (" , listaProvincias , u")" ))'
1330<---------Source: line: 'curProvincias.setMainFilter(ustr( u"idprovincia IN (" , listaProvincias , u")" ))'
1331         InstructionCall: end-gen
1331         InstructionCall: begin-gen
1331          Member: begin-gen
1331           Identifier: begin-gen
1331            Identifier: expr: 'f'
1331           Identifier: end-gen
1331           FunctionCall: begin-gen
1331            FunctionCall: expr: 'setMainWidget()'
1331           FunctionCall: end-gen
1331           Member: expr: 'f.setMainWidget()'
1331          Member: end-gen
1331          InstructionCall: line: 'f.setMainWidget()'
1331        <-Source: line: 'f.setMainWidget()'
1331       <--Switch: line: 'f.setMainWidget()'
1331      <---Source: line: 'f.setMainWidget()'
1331     <----If: line: 'f.setMainWidget()'
1331    <-----Source: line: 'f.setMainWidget()'
1331   <------Function: line: 'f.setMainWidget()'
1331  <-------Source: line: 'f.setMainWidget()'
1331 <--------Class: line: 'f.setMainWidget()'
1331<---------Source: line: 'f.setMainWidget()'
1332         InstructionCall: end-gen
1332         DeclarationBlock: begin-gen
1332          Variable: begin-gen
1332           Variable: expr: 'idProvincia'
1332           Variable: expr: '='
1332           Value: begin-gen
1332            Member: begin-gen
1332             Identifier: begin-gen
1332              Identifier: expr: 'f'
1332             Identifier: end-gen
1332             FunctionCall: begin-gen
1332              Value: begin-gen
1332               Constant: begin-gen
1332                Constant: ctype: 'String' -> 'idprovincia'
1332                Constant: expr: 'u"idprovincia"'
1332              <-Value: expr: 'u"idprovincia"'
1332               Constant: end-gen
1332              Value: end-gen
1332              FunctionCall: expr: 'exec_(u"idprovincia")'
1332             FunctionCall: end-gen
1332             Member: expr: 'f.exec_(u"idprovincia")'
1332           <-Value: expr: 'f.exec_(u"idprovincia")'
1332          <--Variable: expr: 'f.exec_(u"idprovincia")'
1332            Member: end-gen
1332           Value: end-gen
1332          Variable: end-gen
1332          DeclarationBlock: line: 'idProvincia = f.exec_(u"idprovincia")'
1332        <-Source: line: 'idProvincia = f.exec_(u"idprovincia")'
1332       <--Switch: line: 'idProvincia = f.exec_(u"idprovincia")'
1332      <---Source: line: 'idProvincia = f.exec_(u"idprovincia")'
1332     <----If: line: 'idProvincia = f.exec_(u"idprovincia")'
1332    <-----Source: line: 'idProvincia = f.exec_(u"idprovincia")'
1332   <------Function: line: 'idProvincia = f.exec_(u"idprovincia")'
1332  <-------Source: line: 'idProvincia = f.exec_(u"idprovincia")'
1332 <--------Class: line: 'idProvincia = f.exec_(u"idprovincia")'
1332<---------Source: line: 'idProvincia = f.exec_(u"idprovincia")'
1333         DeclarationBlock: end-gen
1333         If: begin-gen
1333          Value: begin-gen
1333           Identifier: begin-gen
1333            Identifier: expr: 'idProvincia'
1333          <-Value: expr: 'idProvincia'
1333           Identifier: end-gen
1333          Value: end-gen
1333          If: line: 'if idProvincia:'
1333        <-Source: line: 'if idProvincia:'
1333       <--Switch: line: 'if idProvincia:'
1333      <---Source: line: 'if idProvincia:'
1333     <----If: line: 'if idProvincia:'
1333    <-----Source: line: 'if idProvincia:'
1333   <------Function: line: 'if idProvincia:'
1333  <-------Source: line: 'if idProvincia:'
1333 <--------Class: line: 'if idProvincia:'
1333<---------Source: line: 'if idProvincia:'
1334          If: begin: 'block-if'
1334        <-Source: begin: 'block-if'
1334       <--Switch: begin: 'block-if'
1334      <---Source: begin: 'block-if'
1334     <----If: begin: 'block-if'
1334    <-----Source: begin: 'block-if'
1334   <------Function: begin: 'block-if'
1334  <-------Source: begin: 'block-if'
1334 <--------Class: begin: 'block-if'
1334<---------Source: begin: 'block-if'
1334          Source: begin-gen
1334           InstructionCall: begin-gen
1334            Member: begin-gen
1334             Identifier: begin-gen
1334              Identifier: expr: 'formulario'
1334             Identifier: end-gen
1334             FunctionCall: begin-gen
1334              FunctionCall: expr: 'cursor()'
1334             FunctionCall: end-gen
1334             FunctionCall: begin-gen
1334              Value: begin-gen
1334               Identifier: begin-gen
1334                Identifier: expr: 'campoId'
1334              <-Value: expr: 'campoId'
1334               Identifier: end-gen
1334              Value: end-gen
1334              Value: begin-gen
1334               Identifier: begin-gen
1334                Identifier: expr: 'idProvincia'
1334              <-Value: expr: 'idProvincia'
1334               Identifier: end-gen
1334              Value: end-gen
1334              FunctionCall: expr: 'setValueBuffer(campoId, idProvincia)'
1334             FunctionCall: end-gen
1334             Member: expr: 'formulario.cursor().setValueBuffer(campoId, idProvincia)'
1334            Member: end-gen
1334            InstructionCall: line: 'formulario.cursor().setValueBuffer(campoId, idProvincia)'
1334          <-Source: line: 'formulario.cursor().setValueBuffer(campoId, idProvincia)'
1334         <--If: line: 'formulario.cursor().setValueBuffer(campoId, idProvincia)'
1334        <---Source: line: 'formulario.cursor().setValueBuffer(campoId, idProvincia)'
1334       <----Switch: line: 'formulario.cursor().setValueBuffer(campoId, idProvincia)'
1334      <-----Source: line: 'formulario.cursor().setValueBuffer(campoId, idProvincia)'
1334     <------If: line: 'formulario.cursor().setValueBuffer(campoId, idProvincia)'
1334    <-------Source: line: 'formulario.cursor().setValueBuffer(campoId, idProvincia)'
1334   <--------Function: line: 'formulario.cursor().setValueBuffer(campoId, idProvincia)'
1334  <---------Source: line: 'formulario.cursor().setValueBuffer(campoId, idProvincia)'
1334 <----------Class: line: 'formulario.cursor().setValueBuffer(campoId, idProvincia)'
1334<-----------Source: line: 'formulario.cursor().setValueBuffer(campoId, idProvincia)'
1335           InstructionCall: end-gen
1335          Source: end-gen
1335          If: end: 'block-if'
1335        <-Source: end: 'block-if'
1335       <--Switch: end: 'block-if'
1335      <---Source: end: 'block-if'
1335     <----If: end: 'block-if'
1335    <-----Source: end: 'block-if'
1335   <------Function: end: 'block-if'
1335  <-------Source: end: 'block-if'
1335 <--------Class: end: 'block-if'
1335<---------Source: end: 'block-if'
1335         If: end-gen
1335         InstructionFlow: begin-gen
1335          InstructionFlow: break: 'break '
1335        <-Source: break: 'break '
1335       <--Switch: line: 'sc0_do_work = False # BREAK'
1335      <---Source: line: 'sc0_do_work = False # BREAK'
1335     <----If: line: 'sc0_do_work = False # BREAK'
1335    <-----Source: line: 'sc0_do_work = False # BREAK'
1335   <------Function: line: 'sc0_do_work = False # BREAK'
1335  <-------Source: line: 'sc0_do_work = False # BREAK'
1335 <--------Class: line: 'sc0_do_work = False # BREAK'
1335<---------Source: line: 'sc0_do_work = False # BREAK'
1336         InstructionFlow: end-gen
1336        Source: end-gen
1336        Switch: end: 'block-if'
1336      <-Source: end: 'block-if'
1336     <--If: end: 'block-if'
1336    <---Source: end: 'block-if'
1336   <----Function: end: 'block-if'
1336  <-----Source: end: 'block-if'
1336 <------Class: end: 'block-if'
1336<-------Source: end: 'block-if'
1336       Switch: end-gen
1336      Source: end-gen
1336      If: end: 'block-if'
1336    <-Source: end: 'block-if'
1336   <--Function: end: 'block-if'
1336  <---Source: end: 'block-if'
1336 <----Class: end: 'block-if'
1336<-----Source: end: 'block-if'
1336     If: end-gen
1336    Source: end-gen
1336    Function: end: 'block-def-oficial_obtenerProvincia'
1336  <-Source: end: 'block-def-oficial_obtenerProvincia'
1336 <--Class: end: 'block-def-oficial_obtenerProvincia'
1336<---Source: end: 'block-def-oficial_obtenerProvincia'
1337   Function: end-gen
1337   Function: begin-gen
1337    Function: line: 'def oficial_actualizarContactos20070525(self):'
1337  <-Source: line: 'def oficial_actualizarContactos20070525(self):'
1337 <--Class: line: 'def oficial_actualizarContactos20070525(self):'
1337<---Source: line: 'def oficial_actualizarContactos20070525(self):'
1338    Function: begin: 'block-def-oficial_actualizarContactos20070525'
1338  <-Source: begin: 'block-def-oficial_actualizarContactos20070525'
1338 <--Class: begin: 'block-def-oficial_actualizarContactos20070525'
1338<---Source: begin: 'block-def-oficial_actualizarContactos20070525'
1338    Source: begin-gen
1338     DeclarationBlock: begin-gen
1338      Variable: begin-gen
1338       Variable: expr: 'util'
1338       Variable: expr: '='
1338       Variable: expr: 'qsatype.FLUtil()'
1338      Variable: end-gen
1338      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1338    <-Source: line: 'util = qsatype.FLUtil()'
1338   <--Function: line: 'util = qsatype.FLUtil()'
1338  <---Source: line: 'util = qsatype.FLUtil()'
1338 <----Class: line: 'util = qsatype.FLUtil()'
1338<-----Source: line: 'util = qsatype.FLUtil()'
1339     DeclarationBlock: end-gen
1339     DeclarationBlock: begin-gen
1339      Variable: begin-gen
1339       Variable: expr: 'qryClientes'
1339       Variable: expr: '='
1339       Value: begin-gen
1339        New: begin-gen
1339         FunctionCall: begin-gen
1339          FunctionCall: expr: 'FLSqlQuery()'
1339        <-New: expr: 'qsatype.FLSqlQuery()'
1339       <--Value: expr: 'qsatype.FLSqlQuery()'
1339      <---Variable: expr: 'qsatype.FLSqlQuery()'
1339         FunctionCall: end-gen
1339        New: end-gen
1339       Value: end-gen
1339      Variable: end-gen
1339      DeclarationBlock: line: 'qryClientes = qsatype.FLSqlQuery()'
1339    <-Source: line: 'qryClientes = qsatype.FLSqlQuery()'
1339   <--Function: line: 'qryClientes = qsatype.FLSqlQuery()'
1339  <---Source: line: 'qryClientes = qsatype.FLSqlQuery()'
1339 <----Class: line: 'qryClientes = qsatype.FLSqlQuery()'
1339<-----Source: line: 'qryClientes = qsatype.FLSqlQuery()'
1340     DeclarationBlock: end-gen
1340     InstructionCall: begin-gen
1340      Member: begin-gen
1340       Identifier: begin-gen
1340        Identifier: expr: 'qryClientes'
1340       Identifier: end-gen
1340       FunctionCall: begin-gen
1340        Value: begin-gen
1340         Constant: begin-gen
1340          Constant: ctype: 'String' -> 'clientes'
1340          Constant: expr: 'u"clientes"'
1340        <-Value: expr: 'u"clientes"'
1340         Constant: end-gen
1340        Value: end-gen
1340        FunctionCall: expr: 'setTablesList(u"clientes")'
1340       FunctionCall: end-gen
1340       Member: expr: 'qryClientes.setTablesList(u"clientes")'
1340      Member: end-gen
1340      InstructionCall: line: 'qryClientes.setTablesList(u"clientes")'
1340    <-Source: line: 'qryClientes.setTablesList(u"clientes")'
1340   <--Function: line: 'qryClientes.setTablesList(u"clientes")'
1340  <---Source: line: 'qryClientes.setTablesList(u"clientes")'
1340 <----Class: line: 'qryClientes.setTablesList(u"clientes")'
1340<-----Source: line: 'qryClientes.setTablesList(u"clientes")'
1341     InstructionCall: end-gen
1341     InstructionCall: begin-gen
1341      Member: begin-gen
1341       Identifier: begin-gen
1341        Identifier: expr: 'qryClientes'
1341       Identifier: end-gen
1341       FunctionCall: begin-gen
1341        Value: begin-gen
1341         Constant: begin-gen
1341          Constant: ctype: 'String' -> 'clientes'
1341          Constant: expr: 'u"clientes"'
1341        <-Value: expr: 'u"clientes"'
1341         Constant: end-gen
1341        Value: end-gen
1341        FunctionCall: expr: 'setFrom(u"clientes")'
1341       FunctionCall: end-gen
1341       Member: expr: 'qryClientes.setFrom(u"clientes")'
1341      Member: end-gen
1341      InstructionCall: line: 'qryClientes.setFrom(u"clientes")'
1341    <-Source: line: 'qryClientes.setFrom(u"clientes")'
1341   <--Function: line: 'qryClientes.setFrom(u"clientes")'
1341  <---Source: line: 'qryClientes.setFrom(u"clientes")'
1341 <----Class: line: 'qryClientes.setFrom(u"clientes")'
1341<-----Source: line: 'qryClientes.setFrom(u"clientes")'
1342     InstructionCall: end-gen
1342     InstructionCall: begin-gen
1342      Member: begin-gen
1342       Identifier: begin-gen
1342        Identifier: expr: 'qryClientes'
1342       Identifier: end-gen
1342       FunctionCall: begin-gen
1342        Value: begin-gen
1342         Constant: begin-gen
1342          Constant: ctype: 'String' -> 'codcliente,codcontacto,contacto'
1342          Constant: expr: 'u"codcliente,codcontacto,contacto"'
1342        <-Value: expr: 'u"codcliente,codcontacto,contacto"'
1342         Constant: end-gen
1342        Value: end-gen
1342        FunctionCall: expr: 'setSelect(u"codcliente,codcontacto,contacto")'
1342       FunctionCall: end-gen
1342       Member: expr: 'qryClientes.setSelect(u"codcliente,codcontacto,contacto")'
1342      Member: end-gen
1342      InstructionCall: line: 'qryClientes.setSelect(u"codcliente,codcontacto,contacto")'
1342    <-Source: line: 'qryClientes.setSelect(u"codcliente,codcontacto,contacto")'
1342   <--Function: line: 'qryClientes.setSelect(u"codcliente,codcontacto,contacto")'
1342  <---Source: line: 'qryClientes.setSelect(u"codcliente,codcontacto,contacto")'
1342 <----Class: line: 'qryClientes.setSelect(u"codcliente,codcontacto,contacto")'
1342<-----Source: line: 'qryClientes.setSelect(u"codcliente,codcontacto,contacto")'
1343     InstructionCall: end-gen
1343     InstructionCall: begin-gen
1343      Member: begin-gen
1343       Identifier: begin-gen
1343        Identifier: expr: 'qryClientes'
1343       Identifier: end-gen
1343       FunctionCall: begin-gen
1343        Value: begin-gen
1343         Constant: begin-gen
1343          Constant: ctype: 'String' -> ''
1343          Constant: expr: 'u""'
1343        <-Value: expr: 'u""'
1343         Constant: end-gen
1343        Value: end-gen
1343        FunctionCall: expr: 'setWhere(u"")'
1343       FunctionCall: end-gen
1343       Member: expr: 'qryClientes.setWhere(u"")'
1343      Member: end-gen
1343      InstructionCall: line: 'qryClientes.setWhere(u"")'
1343    <-Source: line: 'qryClientes.setWhere(u"")'
1343   <--Function: line: 'qryClientes.setWhere(u"")'
1343  <---Source: line: 'qryClientes.setWhere(u"")'
1343 <----Class: line: 'qryClientes.setWhere(u"")'
1343<-----Source: line: 'qryClientes.setWhere(u"")'
1344     InstructionCall: end-gen
1344     If: begin-gen
1344      Value: begin-gen
1344       OpUnary: begin-gen
1344        OpUnary: expr: 'not'
1344      <-Value: expr: 'not'
1344        Member: begin-gen
1344         Identifier: begin-gen
1344          Identifier: expr: 'qryClientes'
1344         Identifier: end-gen
1344         FunctionCall: begin-gen
1344          FunctionCall: expr: 'exec_()'
1344         FunctionCall: end-gen
1344         Member: expr: 'qryClientes.exec_()'
1344       <-OpUnary: expr: 'qryClientes.exec_()'
1344      <--Value: expr: 'qryClientes.exec_()'
1344        Member: end-gen
1344       OpUnary: end-gen
1344      Value: end-gen
1344      If: line: 'if not qryClientes.exec_():'
1344    <-Source: line: 'if not qryClientes.exec_():'
1344   <--Function: line: 'if not qryClientes.exec_():'
1344  <---Source: line: 'if not qryClientes.exec_():'
1344 <----Class: line: 'if not qryClientes.exec_():'
1344<-----Source: line: 'if not qryClientes.exec_():'
1345      If: begin: 'block-if'
1345    <-Source: begin: 'block-if'
1345   <--Function: begin: 'block-if'
1345  <---Source: begin: 'block-if'
1345 <----Class: begin: 'block-if'
1345<-----Source: begin: 'block-if'
1345      Source: begin-gen
1345       InstructionFlow: begin-gen
1345        Value: begin-gen
1345         Identifier: begin-gen
1345          Identifier: expr: 'False'
1345        <-Value: expr: 'False'
1345         Identifier: end-gen
1345        Value: end-gen
1345        InstructionFlow: line: 'return False'
1345      <-Source: line: 'return False'
1345     <--If: line: 'return False'
1345    <---Source: line: 'return False'
1345   <----Function: line: 'return False'
1345  <-----Source: line: 'return False'
1345 <------Class: line: 'return False'
1345<-------Source: line: 'return False'
1346       InstructionFlow: end-gen
1346      Source: end-gen
1346      If: end: 'block-if'
1346    <-Source: end: 'block-if'
1346   <--Function: end: 'block-if'
1346  <---Source: end: 'block-if'
1346 <----Class: end: 'block-if'
1346<-----Source: end: 'block-if'
1346     If: end-gen
1346     InstructionCall: begin-gen
1346      Member: begin-gen
1346       Identifier: begin-gen
1346        Identifier: expr: 'util'
1346       Identifier: end-gen
1346       FunctionCall: begin-gen
1346        Value: begin-gen
1346         Member: begin-gen
1346          Identifier: begin-gen
1346           Identifier: expr: 'util'
1346          Identifier: end-gen
1346          FunctionCall: begin-gen
1346           Value: begin-gen
1346            Constant: begin-gen
1346             Constant: ctype: 'String' -> 'scripts'
1346             Constant: expr: 'u"scripts"'
1346           <-Value: expr: 'u"scripts"'
1346            Constant: end-gen
1346           Value: end-gen
1346           Value: begin-gen
1346            Constant: begin-gen
1346             Constant: ctype: 'String' -> 'Reorganizando Contactos'
1346             Constant: expr: 'u"Reorganizando Contactos"'
1346           <-Value: expr: 'u"Reorganizando Contactos"'
1346            Constant: end-gen
1346           Value: end-gen
1346           FunctionCall: expr: 'translate(u"scripts", u"Reorganizando Contactos")'
1346          FunctionCall: end-gen
1346          Member: expr: 'util.translate(u"scripts", u"Reorganizando Contactos")'
1346        <-Value: expr: 'util.translate(u"scripts", u"Reorganizando Contactos")'
1346         Member: end-gen
1346        Value: end-gen
1346        Value: begin-gen
1346         Member: begin-gen
1346          Identifier: begin-gen
1346           Identifier: expr: 'qryClientes'
1346          Identifier: end-gen
1346          FunctionCall: begin-gen
1346           FunctionCall: expr: 'size()'
1346          FunctionCall: end-gen
1346          Member: expr: 'qryClientes.size()'
1346        <-Value: expr: 'qryClientes.size()'
1346         Member: end-gen
1346        Value: end-gen
1346        FunctionCall: expr: 'createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryClientes.size())'
1346       FunctionCall: end-gen
1346       Member: expr: 'util.createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryClientes.size())'
1346      Member: end-gen
1346      InstructionCall: line: 'util.createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryClientes.size())'
1346    <-Source: line: 'util.createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryClientes.size())'
1346   <--Function: line: 'util.createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryClientes.size())'
1346  <---Source: line: 'util.createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryClientes.size())'
1346 <----Class: line: 'util.createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryClientes.size())'
1346<-----Source: line: 'util.createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryClientes.size())'
1347     InstructionCall: end-gen
1347     InstructionCall: begin-gen
1347      Member: begin-gen
1347       Identifier: begin-gen
1347        Identifier: expr: 'util'
1347       Identifier: end-gen
1347       FunctionCall: begin-gen
1347        Value: begin-gen
1347         Constant: begin-gen
1347          Constant: ctype: 'Number' -> '0'
1347          Constant: expr: '0'
1347        <-Value: expr: '0'
1347         Constant: end-gen
1347        Value: end-gen
1347        FunctionCall: expr: 'setProgress(0)'
1347       FunctionCall: end-gen
1347       Member: expr: 'util.setProgress(0)'
1347      Member: end-gen
1347      InstructionCall: line: 'util.setProgress(0)'
1347    <-Source: line: 'util.setProgress(0)'
1347   <--Function: line: 'util.setProgress(0)'
1347  <---Source: line: 'util.setProgress(0)'
1347 <----Class: line: 'util.setProgress(0)'
1347<-----Source: line: 'util.setProgress(0)'
1348     InstructionCall: end-gen
1348     DeclarationBlock: begin-gen
1348      Variable: begin-gen
1348       Variable: expr: 'cont'
1348       Variable: expr: '='
1348       Value: begin-gen
1348        Constant: begin-gen
1348         Constant: ctype: 'Number' -> '1'
1348         Constant: expr: '1'
1348       <-Value: expr: '1'
1348      <--Variable: expr: '1'
1348        Constant: end-gen
1348       Value: end-gen
1348      Variable: end-gen
1348      DeclarationBlock: line: 'cont = 1'
1348    <-Source: line: 'cont = 1'
1348   <--Function: line: 'cont = 1'
1348  <---Source: line: 'cont = 1'
1348 <----Class: line: 'cont = 1'
1348<-----Source: line: 'cont = 1'
1349     DeclarationBlock: end-gen
1349     While: begin-gen
1349      Value: begin-gen
1349       Member: begin-gen
1349        Identifier: begin-gen
1349         Identifier: expr: 'qryClientes'
1349        Identifier: end-gen
1349        FunctionCall: begin-gen
1349         FunctionCall: expr: 'next()'
1349        FunctionCall: end-gen
1349        Member: expr: 'qryClientes.next()'
1349      <-Value: expr: 'qryClientes.next()'
1349       Member: end-gen
1349      Value: end-gen
1349      While: line: 'while qryClientes.next():'
1349    <-Source: line: 'while qryClientes.next():'
1349   <--Function: line: 'while qryClientes.next():'
1349  <---Source: line: 'while qryClientes.next():'
1349 <----Class: line: 'while qryClientes.next():'
1349<-----Source: line: 'while qryClientes.next():'
1350      While: begin: 'block-while'
1350    <-Source: begin: 'block-while'
1350   <--Function: begin: 'block-while'
1350  <---Source: begin: 'block-while'
1350 <----Class: begin: 'block-while'
1350<-----Source: begin: 'block-while'
1350      Source: begin-gen
1350       InstructionCall: begin-gen
1350        Member: begin-gen
1350         Identifier: begin-gen
1350          Identifier: expr: 'util'
1350         Identifier: end-gen
1350         FunctionCall: begin-gen
1350          Value: begin-gen
1350           Identifier: begin-gen
1350            Identifier: expr: 'cont'
1350          <-Value: expr: 'cont'
1350           Identifier: end-gen
1350          Value: end-gen
1350          FunctionCall: expr: 'setProgress(cont)'
1350         FunctionCall: end-gen
1350         Member: expr: 'util.setProgress(cont)'
1350        Member: end-gen
1350        InstructionCall: line: 'util.setProgress(cont)'
1350      <-Source: line: 'util.setProgress(cont)'
1350     <--While: line: 'util.setProgress(cont)'
1350    <---Source: line: 'util.setProgress(cont)'
1350   <----Function: line: 'util.setProgress(cont)'
1350  <-----Source: line: 'util.setProgress(cont)'
1350 <------Class: line: 'util.setProgress(cont)'
1350<-------Source: line: 'util.setProgress(cont)'
1351       InstructionCall: end-gen
1351       InstructionUpdate: begin-gen
1351        Identifier: begin-gen
1351         Identifier: expr: 'cont'
1351        Identifier: end-gen
1351        OpUpdate: begin-gen
1351         OpUpdate: expr: '+='
1351        OpUpdate: end-gen
1351        Value: begin-gen
1351         Constant: begin-gen
1351          Constant: ctype: 'Number' -> '1'
1351          Constant: expr: '1'
1351        <-Value: expr: '1'
1351         Constant: end-gen
1351        Value: end-gen
1351        InstructionUpdate: line: 'cont += 1'
1351      <-Source: line: 'cont += 1'
1351     <--While: line: 'cont += 1'
1351    <---Source: line: 'cont += 1'
1351   <----Function: line: 'cont += 1'
1351  <-----Source: line: 'cont += 1'
1351 <------Class: line: 'cont += 1'
1351<-------Source: line: 'cont += 1'
1352       InstructionUpdate: end-gen
1352       DeclarationBlock: begin-gen
1352        Variable: begin-gen
1352         Variable: expr: 'codCliente'
1352         Variable: expr: '='
1352         Value: begin-gen
1352          Member: begin-gen
1352           Identifier: begin-gen
1352            Identifier: expr: 'qryClientes'
1352           Identifier: end-gen
1352           FunctionCall: begin-gen
1352            Value: begin-gen
1352             Constant: begin-gen
1352              Constant: ctype: 'String' -> 'codcliente'
1352              Constant: expr: 'u"codcliente"'
1352            <-Value: expr: 'u"codcliente"'
1352             Constant: end-gen
1352            Value: end-gen
1352            FunctionCall: expr: 'value(u"codcliente")'
1352           FunctionCall: end-gen
1352           Member: expr: 'qryClientes.value(u"codcliente")'
1352         <-Value: expr: 'qryClientes.value(u"codcliente")'
1352        <--Variable: expr: 'qryClientes.value(u"codcliente")'
1352          Member: end-gen
1352         Value: end-gen
1352        Variable: end-gen
1352        DeclarationBlock: line: 'codCliente = qryClientes.value(u"codcliente")'
1352      <-Source: line: 'codCliente = qryClientes.value(u"codcliente")'
1352     <--While: line: 'codCliente = qryClientes.value(u"codcliente")'
1352    <---Source: line: 'codCliente = qryClientes.value(u"codcliente")'
1352   <----Function: line: 'codCliente = qryClientes.value(u"codcliente")'
1352  <-----Source: line: 'codCliente = qryClientes.value(u"codcliente")'
1352 <------Class: line: 'codCliente = qryClientes.value(u"codcliente")'
1352<-------Source: line: 'codCliente = qryClientes.value(u"codcliente")'
1353       DeclarationBlock: end-gen
1353       If: begin-gen
1353        Value: begin-gen
1353         OpUnary: begin-gen
1353          OpUnary: expr: 'not'
1353        <-Value: expr: 'not'
1353          Identifier: begin-gen
1353           Identifier: expr: 'codCliente'
1353         <-OpUnary: expr: 'codCliente'
1353        <--Value: expr: 'codCliente'
1353          Identifier: end-gen
1353         OpUnary: end-gen
1353        Value: end-gen
1353        If: line: 'if not codCliente:'
1353      <-Source: line: 'if not codCliente:'
1353     <--While: line: 'if not codCliente:'
1353    <---Source: line: 'if not codCliente:'
1353   <----Function: line: 'if not codCliente:'
1353  <-----Source: line: 'if not codCliente:'
1353 <------Class: line: 'if not codCliente:'
1353<-------Source: line: 'if not codCliente:'
1354        If: begin: 'block-if'
1354      <-Source: begin: 'block-if'
1354     <--While: begin: 'block-if'
1354    <---Source: begin: 'block-if'
1354   <----Function: begin: 'block-if'
1354  <-----Source: begin: 'block-if'
1354 <------Class: begin: 'block-if'
1354<-------Source: begin: 'block-if'
1354        Source: begin-gen
1354         InstructionCall: begin-gen
1354          Member: begin-gen
1354           Identifier: begin-gen
1354            Identifier: expr: 'util'
1354           Identifier: end-gen
1354           FunctionCall: begin-gen
1354            FunctionCall: expr: 'destroyProgressDialog()'
1354           FunctionCall: end-gen
1354           Member: expr: 'util.destroyProgressDialog()'
1354          Member: end-gen
1354          InstructionCall: line: 'util.destroyProgressDialog()'
1354        <-Source: line: 'util.destroyProgressDialog()'
1354       <--If: line: 'util.destroyProgressDialog()'
1354      <---Source: line: 'util.destroyProgressDialog()'
1354     <----While: line: 'util.destroyProgressDialog()'
1354    <-----Source: line: 'util.destroyProgressDialog()'
1354   <------Function: line: 'util.destroyProgressDialog()'
1354  <-------Source: line: 'util.destroyProgressDialog()'
1354 <--------Class: line: 'util.destroyProgressDialog()'
1354<---------Source: line: 'util.destroyProgressDialog()'
1355         InstructionCall: end-gen
1355         InstructionFlow: begin-gen
1355          Value: begin-gen
1355           Identifier: begin-gen
1355            Identifier: expr: 'False'
1355          <-Value: expr: 'False'
1355           Identifier: end-gen
1355          Value: end-gen
1355          InstructionFlow: line: 'return False'
1355        <-Source: line: 'return False'
1355       <--If: line: 'return False'
1355      <---Source: line: 'return False'
1355     <----While: line: 'return False'
1355    <-----Source: line: 'return False'
1355   <------Function: line: 'return False'
1355  <-------Source: line: 'return False'
1355 <--------Class: line: 'return False'
1355<---------Source: line: 'return False'
1356         InstructionFlow: end-gen
1356        Source: end-gen
1356        If: end: 'block-if'
1356      <-Source: end: 'block-if'
1356     <--While: end: 'block-if'
1356    <---Source: end: 'block-if'
1356   <----Function: end: 'block-if'
1356  <-----Source: end: 'block-if'
1356 <------Class: end: 'block-if'
1356<-------Source: end: 'block-if'
1356       If: end-gen
1356       DeclarationBlock: begin-gen
1356        Variable: begin-gen
1356         Variable: expr: 'qryAgenda'
1356         Variable: expr: '='
1356         Value: begin-gen
1356          New: begin-gen
1356           FunctionCall: begin-gen
1356            FunctionCall: expr: 'FLSqlQuery()'
1356          <-New: expr: 'qsatype.FLSqlQuery()'
1356         <--Value: expr: 'qsatype.FLSqlQuery()'
1356        <---Variable: expr: 'qsatype.FLSqlQuery()'
1356           FunctionCall: end-gen
1356          New: end-gen
1356         Value: end-gen
1356        Variable: end-gen
1356        DeclarationBlock: line: 'qryAgenda = qsatype.FLSqlQuery()'
1356      <-Source: line: 'qryAgenda = qsatype.FLSqlQuery()'
1356     <--While: line: 'qryAgenda = qsatype.FLSqlQuery()'
1356    <---Source: line: 'qryAgenda = qsatype.FLSqlQuery()'
1356   <----Function: line: 'qryAgenda = qsatype.FLSqlQuery()'
1356  <-----Source: line: 'qryAgenda = qsatype.FLSqlQuery()'
1356 <------Class: line: 'qryAgenda = qsatype.FLSqlQuery()'
1356<-------Source: line: 'qryAgenda = qsatype.FLSqlQuery()'
1357       DeclarationBlock: end-gen
1357       InstructionCall: begin-gen
1357        Member: begin-gen
1357         Identifier: begin-gen
1357          Identifier: expr: 'qryAgenda'
1357         Identifier: end-gen
1357         FunctionCall: begin-gen
1357          Value: begin-gen
1357           Constant: begin-gen
1357            Constant: ctype: 'String' -> 'contactosclientes'
1357            Constant: expr: 'u"contactosclientes"'
1357          <-Value: expr: 'u"contactosclientes"'
1357           Constant: end-gen
1357          Value: end-gen
1357          FunctionCall: expr: 'setTablesList(u"contactosclientes")'
1357         FunctionCall: end-gen
1357         Member: expr: 'qryAgenda.setTablesList(u"contactosclientes")'
1357        Member: end-gen
1357        InstructionCall: line: 'qryAgenda.setTablesList(u"contactosclientes")'
1357      <-Source: line: 'qryAgenda.setTablesList(u"contactosclientes")'
1357     <--While: line: 'qryAgenda.setTablesList(u"contactosclientes")'
1357    <---Source: line: 'qryAgenda.setTablesList(u"contactosclientes")'
1357   <----Function: line: 'qryAgenda.setTablesList(u"contactosclientes")'
1357  <-----Source: line: 'qryAgenda.setTablesList(u"contactosclientes")'
1357 <------Class: line: 'qryAgenda.setTablesList(u"contactosclientes")'
1357<-------Source: line: 'qryAgenda.setTablesList(u"contactosclientes")'
1358       InstructionCall: end-gen
1358       InstructionCall: begin-gen
1358        Member: begin-gen
1358         Identifier: begin-gen
1358          Identifier: expr: 'qryAgenda'
1358         Identifier: end-gen
1358         FunctionCall: begin-gen
1358          Value: begin-gen
1358           Constant: begin-gen
1358            Constant: ctype: 'String' -> 'contactosclientes'
1358            Constant: expr: 'u"contactosclientes"'
1358          <-Value: expr: 'u"contactosclientes"'
1358           Constant: end-gen
1358          Value: end-gen
1358          FunctionCall: expr: 'setFrom(u"contactosclientes")'
1358         FunctionCall: end-gen
1358         Member: expr: 'qryAgenda.setFrom(u"contactosclientes")'
1358        Member: end-gen
1358        InstructionCall: line: 'qryAgenda.setFrom(u"contactosclientes")'
1358      <-Source: line: 'qryAgenda.setFrom(u"contactosclientes")'
1358     <--While: line: 'qryAgenda.setFrom(u"contactosclientes")'
1358    <---Source: line: 'qryAgenda.setFrom(u"contactosclientes")'
1358   <----Function: line: 'qryAgenda.setFrom(u"contactosclientes")'
1358  <-----Source: line: 'qryAgenda.setFrom(u"contactosclientes")'
1358 <------Class: line: 'qryAgenda.setFrom(u"contactosclientes")'
1358<-------Source: line: 'qryAgenda.setFrom(u"contactosclientes")'
1359       InstructionCall: end-gen
1359       InstructionCall: begin-gen
1359        Member: begin-gen
1359         Identifier: begin-gen
1359          Identifier: expr: 'qryAgenda'
1359         Identifier: end-gen
1359         FunctionCall: begin-gen
1359          Value: begin-gen
1359           Constant: begin-gen
1359            Constant: ctype: 'String' -> 'contacto,cargo,telefono,fax,email,id,codcliente'
1359            Constant: expr: 'u"contacto,cargo,telefono,fax,email,id,codcliente"'
1359          <-Value: expr: 'u"contacto,cargo,telefono,fax,email,id,codcliente"'
1359           Constant: end-gen
1359          Value: end-gen
1359          FunctionCall: expr: 'setSelect(u"contacto,cargo,telefono,fax,email,id,codcliente")'
1359         FunctionCall: end-gen
1359         Member: expr: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codcliente")'
1359        Member: end-gen
1359        InstructionCall: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codcliente")'
1359      <-Source: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codcliente")'
1359     <--While: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codcliente")'
1359    <---Source: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codcliente")'
1359   <----Function: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codcliente")'
1359  <-----Source: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codcliente")'
1359 <------Class: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codcliente")'
1359<-------Source: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codcliente")'
1360       InstructionCall: end-gen
1360       InstructionCall: begin-gen
1360        Member: begin-gen
1360         Identifier: begin-gen
1360          Identifier: expr: 'qryAgenda'
1360         Identifier: end-gen
1360         FunctionCall: begin-gen
1360          Expression: begin-gen
1360           Expression: expr: 'ustr('
1360           Constant: begin-gen
1360            Constant: ctype: 'String' -> "codcliente = '"
1360            Constant: expr: 'u"codcliente = \'"'
1360          <-Expression: expr: 'u"codcliente = \'"'
1360           Constant: end-gen
1360           Expression: expr: ','
1360           Identifier: begin-gen
1360            Identifier: expr: 'codCliente'
1360          <-Expression: expr: 'codCliente'
1360           Identifier: end-gen
1360           Expression: expr: ','
1360           Constant: begin-gen
1360            Constant: ctype: 'String' -> "'"
1360            Constant: expr: 'u"\'"'
1360          <-Expression: expr: 'u"\'"'
1360           Constant: end-gen
1360           Expression: expr: ')'
1360          Expression: end-gen
1360          FunctionCall: expr: 'setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1360         FunctionCall: end-gen
1360         Member: expr: 'qryAgenda.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1360        Member: end-gen
1360        InstructionCall: line: 'qryAgenda.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1360      <-Source: line: 'qryAgenda.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1360     <--While: line: 'qryAgenda.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1360    <---Source: line: 'qryAgenda.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1360   <----Function: line: 'qryAgenda.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1360  <-----Source: line: 'qryAgenda.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1360 <------Class: line: 'qryAgenda.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1360<-------Source: line: 'qryAgenda.setWhere(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1361       InstructionCall: end-gen
1361       If: begin-gen
1361        Value: begin-gen
1361         OpUnary: begin-gen
1361          OpUnary: expr: 'not'
1361        <-Value: expr: 'not'
1361          Member: begin-gen
1361           Identifier: begin-gen
1361            Identifier: expr: 'qryAgenda'
1361           Identifier: end-gen
1361           FunctionCall: begin-gen
1361            FunctionCall: expr: 'exec_()'
1361           FunctionCall: end-gen
1361           Member: expr: 'qryAgenda.exec_()'
1361         <-OpUnary: expr: 'qryAgenda.exec_()'
1361        <--Value: expr: 'qryAgenda.exec_()'
1361          Member: end-gen
1361         OpUnary: end-gen
1361        Value: end-gen
1361        If: line: 'if not qryAgenda.exec_():'
1361      <-Source: line: 'if not qryAgenda.exec_():'
1361     <--While: line: 'if not qryAgenda.exec_():'
1361    <---Source: line: 'if not qryAgenda.exec_():'
1361   <----Function: line: 'if not qryAgenda.exec_():'
1361  <-----Source: line: 'if not qryAgenda.exec_():'
1361 <------Class: line: 'if not qryAgenda.exec_():'
1361<-------Source: line: 'if not qryAgenda.exec_():'
1362        If: begin: 'block-if'
1362      <-Source: begin: 'block-if'
1362     <--While: begin: 'block-if'
1362    <---Source: begin: 'block-if'
1362   <----Function: begin: 'block-if'
1362  <-----Source: begin: 'block-if'
1362 <------Class: begin: 'block-if'
1362<-------Source: begin: 'block-if'
1362        Source: begin-gen
1362         InstructionCall: begin-gen
1362          Member: begin-gen
1362           Identifier: begin-gen
1362            Identifier: expr: 'util'
1362           Identifier: end-gen
1362           FunctionCall: begin-gen
1362            FunctionCall: expr: 'destroyProgressDialog()'
1362           FunctionCall: end-gen
1362           Member: expr: 'util.destroyProgressDialog()'
1362          Member: end-gen
1362          InstructionCall: line: 'util.destroyProgressDialog()'
1362        <-Source: line: 'util.destroyProgressDialog()'
1362       <--If: line: 'util.destroyProgressDialog()'
1362      <---Source: line: 'util.destroyProgressDialog()'
1362     <----While: line: 'util.destroyProgressDialog()'
1362    <-----Source: line: 'util.destroyProgressDialog()'
1362   <------Function: line: 'util.destroyProgressDialog()'
1362  <-------Source: line: 'util.destroyProgressDialog()'
1362 <--------Class: line: 'util.destroyProgressDialog()'
1362<---------Source: line: 'util.destroyProgressDialog()'
1363         InstructionCall: end-gen
1363         InstructionFlow: begin-gen
1363          Value: begin-gen
1363           Identifier: begin-gen
1363            Identifier: expr: 'False'
1363          <-Value: expr: 'False'
1363           Identifier: end-gen
1363          Value: end-gen
1363          InstructionFlow: line: 'return False'
1363        <-Source: line: 'return False'
1363       <--If: line: 'return False'
1363      <---Source: line: 'return False'
1363     <----While: line: 'return False'
1363    <-----Source: line: 'return False'
1363   <------Function: line: 'return False'
1363  <-------Source: line: 'return False'
1363 <--------Class: line: 'return False'
1363<---------Source: line: 'return False'
1364         InstructionFlow: end-gen
1364        Source: end-gen
1364        If: end: 'block-if'
1364      <-Source: end: 'block-if'
1364     <--While: end: 'block-if'
1364    <---Source: end: 'block-if'
1364   <----Function: end: 'block-if'
1364  <-----Source: end: 'block-if'
1364 <------Class: end: 'block-if'
1364<-------Source: end: 'block-if'
1364       If: end-gen
1364       If: begin-gen
1364        Value: begin-gen
1364         Member: begin-gen
1364          Identifier: begin-gen
1364           Identifier: expr: 'sys'
1364          Identifier: end-gen
1364          FunctionCall: begin-gen
1364           Value: begin-gen
1364            Constant: begin-gen
1364             Constant: ctype: 'String' -> 'flcrm_ppal'
1364             Constant: expr: 'u"flcrm_ppal"'
1364           <-Value: expr: 'u"flcrm_ppal"'
1364            Constant: end-gen
1364           Value: end-gen
1364           FunctionCall: expr: 'isLoadedModule(u"flcrm_ppal")'
1364          FunctionCall: end-gen
1364          Member: expr: 'sys.isLoadedModule(u"flcrm_ppal")'
1364        <-Value: expr: 'sys.isLoadedModule(u"flcrm_ppal")'
1364         Member: end-gen
1364        Value: end-gen
1364        If: line: 'if sys.isLoadedModule(u"flcrm_ppal"):'
1364      <-Source: line: 'if sys.isLoadedModule(u"flcrm_ppal"):'
1364     <--While: line: 'if sys.isLoadedModule(u"flcrm_ppal"):'
1364    <---Source: line: 'if sys.isLoadedModule(u"flcrm_ppal"):'
1364   <----Function: line: 'if sys.isLoadedModule(u"flcrm_ppal"):'
1364  <-----Source: line: 'if sys.isLoadedModule(u"flcrm_ppal"):'
1364 <------Class: line: 'if sys.isLoadedModule(u"flcrm_ppal"):'
1364<-------Source: line: 'if sys.isLoadedModule(u"flcrm_ppal"):'
1365        If: begin: 'block-if'
1365      <-Source: begin: 'block-if'
1365     <--While: begin: 'block-if'
1365    <---Source: begin: 'block-if'
1365   <----Function: begin: 'block-if'
1365  <-----Source: begin: 'block-if'
1365 <------Class: begin: 'block-if'
1365<-------Source: begin: 'block-if'
1365        Source: begin-gen
1365         DeclarationBlock: begin-gen
1365          Variable: begin-gen
1365           Variable: expr: 'qryClientesContactos'
1365           Variable: expr: '='
1365           Value: begin-gen
1365            New: begin-gen
1365             FunctionCall: begin-gen
1365              FunctionCall: expr: 'FLSqlQuery()'
1365            <-New: expr: 'qsatype.FLSqlQuery()'
1365           <--Value: expr: 'qsatype.FLSqlQuery()'
1365          <---Variable: expr: 'qsatype.FLSqlQuery()'
1365             FunctionCall: end-gen
1365            New: end-gen
1365           Value: end-gen
1365          Variable: end-gen
1365          DeclarationBlock: line: 'qryClientesContactos = qsatype.FLSqlQuery()'
1365        <-Source: line: 'qryClientesContactos = qsatype.FLSqlQuery()'
1365       <--If: line: 'qryClientesContactos = qsatype.FLSqlQuery()'
1365      <---Source: line: 'qryClientesContactos = qsatype.FLSqlQuery()'
1365     <----While: line: 'qryClientesContactos = qsatype.FLSqlQuery()'
1365    <-----Source: line: 'qryClientesContactos = qsatype.FLSqlQuery()'
1365   <------Function: line: 'qryClientesContactos = qsatype.FLSqlQuery()'
1365  <-------Source: line: 'qryClientesContactos = qsatype.FLSqlQuery()'
1365 <--------Class: line: 'qryClientesContactos = qsatype.FLSqlQuery()'
1365<---------Source: line: 'qryClientesContactos = qsatype.FLSqlQuery()'
1366         DeclarationBlock: end-gen
1366         InstructionCall: begin-gen
1366          Member: begin-gen
1366           Identifier: begin-gen
1366            Identifier: expr: 'qryClientesContactos'
1366           Identifier: end-gen
1366           FunctionCall: begin-gen
1366            Value: begin-gen
1366             Constant: begin-gen
1366              Constant: ctype: 'String' -> 'crm_clientescontactos'
1366              Constant: expr: 'u"crm_clientescontactos"'
1366            <-Value: expr: 'u"crm_clientescontactos"'
1366             Constant: end-gen
1366            Value: end-gen
1366            FunctionCall: expr: 'setTablesList(u"crm_clientescontactos")'
1366           FunctionCall: end-gen
1366           Member: expr: 'qryClientesContactos.setTablesList(u"crm_clientescontactos")'
1366          Member: end-gen
1366          InstructionCall: line: 'qryClientesContactos.setTablesList(u"crm_clientescontactos")'
1366        <-Source: line: 'qryClientesContactos.setTablesList(u"crm_clientescontactos")'
1366       <--If: line: 'qryClientesContactos.setTablesList(u"crm_clientescontactos")'
1366      <---Source: line: 'qryClientesContactos.setTablesList(u"crm_clientescontactos")'
1366     <----While: line: 'qryClientesContactos.setTablesList(u"crm_clientescontactos")'
1366    <-----Source: line: 'qryClientesContactos.setTablesList(u"crm_clientescontactos")'
1366   <------Function: line: 'qryClientesContactos.setTablesList(u"crm_clientescontactos")'
1366  <-------Source: line: 'qryClientesContactos.setTablesList(u"crm_clientescontactos")'
1366 <--------Class: line: 'qryClientesContactos.setTablesList(u"crm_clientescontactos")'
1366<---------Source: line: 'qryClientesContactos.setTablesList(u"crm_clientescontactos")'
1367         InstructionCall: end-gen
1367         InstructionCall: begin-gen
1367          Member: begin-gen
1367           Identifier: begin-gen
1367            Identifier: expr: 'qryClientesContactos'
1367           Identifier: end-gen
1367           FunctionCall: begin-gen
1367            Value: begin-gen
1367             Constant: begin-gen
1367              Constant: ctype: 'String' -> 'crm_clientescontactos'
1367              Constant: expr: 'u"crm_clientescontactos"'
1367            <-Value: expr: 'u"crm_clientescontactos"'
1367             Constant: end-gen
1367            Value: end-gen
1367            FunctionCall: expr: 'setFrom(u"crm_clientescontactos")'
1367           FunctionCall: end-gen
1367           Member: expr: 'qryClientesContactos.setFrom(u"crm_clientescontactos")'
1367          Member: end-gen
1367          InstructionCall: line: 'qryClientesContactos.setFrom(u"crm_clientescontactos")'
1367        <-Source: line: 'qryClientesContactos.setFrom(u"crm_clientescontactos")'
1367       <--If: line: 'qryClientesContactos.setFrom(u"crm_clientescontactos")'
1367      <---Source: line: 'qryClientesContactos.setFrom(u"crm_clientescontactos")'
1367     <----While: line: 'qryClientesContactos.setFrom(u"crm_clientescontactos")'
1367    <-----Source: line: 'qryClientesContactos.setFrom(u"crm_clientescontactos")'
1367   <------Function: line: 'qryClientesContactos.setFrom(u"crm_clientescontactos")'
1367  <-------Source: line: 'qryClientesContactos.setFrom(u"crm_clientescontactos")'
1367 <--------Class: line: 'qryClientesContactos.setFrom(u"crm_clientescontactos")'
1367<---------Source: line: 'qryClientesContactos.setFrom(u"crm_clientescontactos")'
1368         InstructionCall: end-gen
1368         InstructionCall: begin-gen
1368          Member: begin-gen
1368           Identifier: begin-gen
1368            Identifier: expr: 'qryClientesContactos'
1368           Identifier: end-gen
1368           FunctionCall: begin-gen
1368            Value: begin-gen
1368             Constant: begin-gen
1368              Constant: ctype: 'String' -> 'codcontacto'
1368              Constant: expr: 'u"codcontacto"'
1368            <-Value: expr: 'u"codcontacto"'
1368             Constant: end-gen
1368            Value: end-gen
1368            FunctionCall: expr: 'setSelect(u"codcontacto")'
1368           FunctionCall: end-gen
1368           Member: expr: 'qryClientesContactos.setSelect(u"codcontacto")'
1368          Member: end-gen
1368          InstructionCall: line: 'qryClientesContactos.setSelect(u"codcontacto")'
1368        <-Source: line: 'qryClientesContactos.setSelect(u"codcontacto")'
1368       <--If: line: 'qryClientesContactos.setSelect(u"codcontacto")'
1368      <---Source: line: 'qryClientesContactos.setSelect(u"codcontacto")'
1368     <----While: line: 'qryClientesContactos.setSelect(u"codcontacto")'
1368    <-----Source: line: 'qryClientesContactos.setSelect(u"codcontacto")'
1368   <------Function: line: 'qryClientesContactos.setSelect(u"codcontacto")'
1368  <-------Source: line: 'qryClientesContactos.setSelect(u"codcontacto")'
1368 <--------Class: line: 'qryClientesContactos.setSelect(u"codcontacto")'
1368<---------Source: line: 'qryClientesContactos.setSelect(u"codcontacto")'
1369         InstructionCall: end-gen
1369         InstructionCall: begin-gen
1369          Member: begin-gen
1369           Identifier: begin-gen
1369            Identifier: expr: 'qryClientesContactos'
1369           Identifier: end-gen
1369           FunctionCall: begin-gen
1369            Expression: begin-gen
1369             Expression: expr: 'ustr('
1369             Constant: begin-gen
1369              Constant: ctype: 'String' -> "codcliente = '"
1369              Constant: expr: 'u"codcliente = \'"'
1369            <-Expression: expr: 'u"codcliente = \'"'
1369             Constant: end-gen
1369             Expression: expr: ','
1369             Identifier: begin-gen
1369              Identifier: expr: 'codCliente'
1369            <-Expression: expr: 'codCliente'
1369             Identifier: end-gen
1369             Expression: expr: ','
1369             Constant: begin-gen
1369              Constant: ctype: 'String' -> "' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = '"
1369              Constant: expr: 'u"\' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = \'"'
1369            <-Expression: expr: 'u"\' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = \'"'
1369             Constant: end-gen
1369             Expression: expr: ','
1369             Identifier: begin-gen
1369              Identifier: expr: 'codCliente'
1369            <-Expression: expr: 'codCliente'
1369             Identifier: end-gen
1369             Expression: expr: ','
1369             Constant: begin-gen
1369              Constant: ctype: 'String' -> "')"
1369              Constant: expr: 'u"\')"'
1369            <-Expression: expr: 'u"\')"'
1369             Constant: end-gen
1369             Expression: expr: ')'
1369            Expression: end-gen
1369            FunctionCall: expr: 'setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = \'" , codCliente , u"\')" ))'
1369           FunctionCall: end-gen
1369           Member: expr: 'qryClientesContactos.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = \'" , codCliente , u"\')" ))'
1369          Member: end-gen
1369          InstructionCall: line: 'qryClientesContactos.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = \'" , codCliente , u"\')" ))'
1369        <-Source: line: 'qryClientesContactos.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = \'" , codCliente , u"\')" ))'
1369       <--If: line: 'qryClientesContactos.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = \'" , codCliente , u"\')" ))'
1369      <---Source: line: 'qryClientesContactos.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = \'" , codCliente , u"\')" ))'
1369     <----While: line: 'qryClientesContactos.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = \'" , codCliente , u"\')" ))'
1369    <-----Source: line: 'qryClientesContactos.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = \'" , codCliente , u"\')" ))'
1369   <------Function: line: 'qryClientesContactos.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = \'" , codCliente , u"\')" ))'
1369  <-------Source: line: 'qryClientesContactos.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = \'" , codCliente , u"\')" ))'
1369 <--------Class: line: 'qryClientesContactos.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = \'" , codCliente , u"\')" ))'
1369<---------Source: line: 'qryClientesContactos.setWhere(ustr( u"codcliente = \'" , codCliente , u"\' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = \'" , codCliente , u"\')" ))'
1370         InstructionCall: end-gen
1370         If: begin-gen
1370          Value: begin-gen
1370           OpUnary: begin-gen
1370            OpUnary: expr: 'not'
1370          <-Value: expr: 'not'
1370            Member: begin-gen
1370             Identifier: begin-gen
1370              Identifier: expr: 'qryClientesContactos'
1370             Identifier: end-gen
1370             FunctionCall: begin-gen
1370              FunctionCall: expr: 'exec_()'
1370             FunctionCall: end-gen
1370             Member: expr: 'qryClientesContactos.exec_()'
1370           <-OpUnary: expr: 'qryClientesContactos.exec_()'
1370          <--Value: expr: 'qryClientesContactos.exec_()'
1370            Member: end-gen
1370           OpUnary: end-gen
1370          Value: end-gen
1370          If: line: 'if not qryClientesContactos.exec_():'
1370        <-Source: line: 'if not qryClientesContactos.exec_():'
1370       <--If: line: 'if not qryClientesContactos.exec_():'
1370      <---Source: line: 'if not qryClientesContactos.exec_():'
1370     <----While: line: 'if not qryClientesContactos.exec_():'
1370    <-----Source: line: 'if not qryClientesContactos.exec_():'
1370   <------Function: line: 'if not qryClientesContactos.exec_():'
1370  <-------Source: line: 'if not qryClientesContactos.exec_():'
1370 <--------Class: line: 'if not qryClientesContactos.exec_():'
1370<---------Source: line: 'if not qryClientesContactos.exec_():'
1371          If: begin: 'block-if'
1371        <-Source: begin: 'block-if'
1371       <--If: begin: 'block-if'
1371      <---Source: begin: 'block-if'
1371     <----While: begin: 'block-if'
1371    <-----Source: begin: 'block-if'
1371   <------Function: begin: 'block-if'
1371  <-------Source: begin: 'block-if'
1371 <--------Class: begin: 'block-if'
1371<---------Source: begin: 'block-if'
1371          Source: begin-gen
1371           InstructionCall: begin-gen
1371            Member: begin-gen
1371             Identifier: begin-gen
1371              Identifier: expr: 'util'
1371             Identifier: end-gen
1371             FunctionCall: begin-gen
1371              FunctionCall: expr: 'destroyProgressDialog()'
1371             FunctionCall: end-gen
1371             Member: expr: 'util.destroyProgressDialog()'
1371            Member: end-gen
1371            InstructionCall: line: 'util.destroyProgressDialog()'
1371          <-Source: line: 'util.destroyProgressDialog()'
1371         <--If: line: 'util.destroyProgressDialog()'
1371        <---Source: line: 'util.destroyProgressDialog()'
1371       <----If: line: 'util.destroyProgressDialog()'
1371      <-----Source: line: 'util.destroyProgressDialog()'
1371     <------While: line: 'util.destroyProgressDialog()'
1371    <-------Source: line: 'util.destroyProgressDialog()'
1371   <--------Function: line: 'util.destroyProgressDialog()'
1371  <---------Source: line: 'util.destroyProgressDialog()'
1371 <----------Class: line: 'util.destroyProgressDialog()'
1371<-----------Source: line: 'util.destroyProgressDialog()'
1372           InstructionCall: end-gen
1372           InstructionFlow: begin-gen
1372            Value: begin-gen
1372             Identifier: begin-gen
1372              Identifier: expr: 'False'
1372            <-Value: expr: 'False'
1372             Identifier: end-gen
1372            Value: end-gen
1372            InstructionFlow: line: 'return False'
1372          <-Source: line: 'return False'
1372         <--If: line: 'return False'
1372        <---Source: line: 'return False'
1372       <----If: line: 'return False'
1372      <-----Source: line: 'return False'
1372     <------While: line: 'return False'
1372    <-------Source: line: 'return False'
1372   <--------Function: line: 'return False'
1372  <---------Source: line: 'return False'
1372 <----------Class: line: 'return False'
1372<-----------Source: line: 'return False'
1373           InstructionFlow: end-gen
1373          Source: end-gen
1373          If: end: 'block-if'
1373        <-Source: end: 'block-if'
1373       <--If: end: 'block-if'
1373      <---Source: end: 'block-if'
1373     <----While: end: 'block-if'
1373    <-----Source: end: 'block-if'
1373   <------Function: end: 'block-if'
1373  <-------Source: end: 'block-if'
1373 <--------Class: end: 'block-if'
1373<---------Source: end: 'block-if'
1373         If: end-gen
1373         While: begin-gen
1373          Value: begin-gen
1373           Member: begin-gen
1373            Identifier: begin-gen
1373             Identifier: expr: 'qryClientesContactos'
1373            Identifier: end-gen
1373            FunctionCall: begin-gen
1373             FunctionCall: expr: 'next()'
1373            FunctionCall: end-gen
1373            Member: expr: 'qryClientesContactos.next()'
1373          <-Value: expr: 'qryClientesContactos.next()'
1373           Member: end-gen
1373          Value: end-gen
1373          While: line: 'while qryClientesContactos.next():'
1373        <-Source: line: 'while qryClientesContactos.next():'
1373       <--If: line: 'while qryClientesContactos.next():'
1373      <---Source: line: 'while qryClientesContactos.next():'
1373     <----While: line: 'while qryClientesContactos.next():'
1373    <-----Source: line: 'while qryClientesContactos.next():'
1373   <------Function: line: 'while qryClientesContactos.next():'
1373  <-------Source: line: 'while qryClientesContactos.next():'
1373 <--------Class: line: 'while qryClientesContactos.next():'
1373<---------Source: line: 'while qryClientesContactos.next():'
1374          While: begin: 'block-while'
1374        <-Source: begin: 'block-while'
1374       <--If: begin: 'block-while'
1374      <---Source: begin: 'block-while'
1374     <----While: begin: 'block-while'
1374    <-----Source: begin: 'block-while'
1374   <------Function: begin: 'block-while'
1374  <-------Source: begin: 'block-while'
1374 <--------Class: begin: 'block-while'
1374<---------Source: begin: 'block-while'
1374          Source: begin-gen
1374           InstructionCall: begin-gen
1374            Member: begin-gen
1374             Identifier: begin-gen
1374              Identifier: expr: 'self'
1374             Identifier: end-gen
1374             Identifier: begin-gen
1374              Identifier: expr: 'iface'
1374             Identifier: end-gen
1374             FunctionCall: begin-gen
1374              Value: begin-gen
1374               Identifier: begin-gen
1374                Identifier: expr: 'codCliente'
1374              <-Value: expr: 'codCliente'
1374               Identifier: end-gen
1374              Value: end-gen
1374              Value: begin-gen
1374               Member: begin-gen
1374                Identifier: begin-gen
1374                 Identifier: expr: 'qryClientesContactos'
1374                Identifier: end-gen
1374                FunctionCall: begin-gen
1374                 Value: begin-gen
1374                  Constant: begin-gen
1374                   Constant: ctype: 'String' -> 'codcontacto'
1374                   Constant: expr: 'u"codcontacto"'
1374                 <-Value: expr: 'u"codcontacto"'
1374                  Constant: end-gen
1374                 Value: end-gen
1374                 FunctionCall: expr: 'value(u"codcontacto")'
1374                FunctionCall: end-gen
1374                Member: expr: 'qryClientesContactos.value(u"codcontacto")'
1374              <-Value: expr: 'qryClientesContactos.value(u"codcontacto")'
1374               Member: end-gen
1374              Value: end-gen
1374              FunctionCall: expr: 'actualizarContactosDeAgenda20070525(codCliente, qryClientesContactos.value(u"codcontacto"))'
1374             FunctionCall: end-gen
1374             Member: expr: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, qryClientesContactos.value(u"codcontacto"))'
1374            Member: end-gen
1374            InstructionCall: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, qryClientesContactos.value(u"codcontacto"))'
1374          <-Source: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, qryClientesContactos.value(u"codcontacto"))'
1374         <--While: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, qryClientesContactos.value(u"codcontacto"))'
1374        <---Source: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, qryClientesContactos.value(u"codcontacto"))'
1374       <----If: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, qryClientesContactos.value(u"codcontacto"))'
1374      <-----Source: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, qryClientesContactos.value(u"codcontacto"))'
1374     <------While: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, qryClientesContactos.value(u"codcontacto"))'
1374    <-------Source: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, qryClientesContactos.value(u"codcontacto"))'
1374   <--------Function: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, qryClientesContactos.value(u"codcontacto"))'
1374  <---------Source: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, qryClientesContactos.value(u"codcontacto"))'
1374 <----------Class: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, qryClientesContactos.value(u"codcontacto"))'
1374<-----------Source: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, qryClientesContactos.value(u"codcontacto"))'
1375           InstructionCall: end-gen
1375          Source: end-gen
1375          While: end: 'block-while'
1375        <-Source: end: 'block-while'
1375       <--If: end: 'block-while'
1375      <---Source: end: 'block-while'
1375     <----While: end: 'block-while'
1375    <-----Source: end: 'block-while'
1375   <------Function: end: 'block-while'
1375  <-------Source: end: 'block-while'
1375 <--------Class: end: 'block-while'
1375<---------Source: end: 'block-while'
1375         While: end-gen
1375        Source: end-gen
1375        If: end: 'block-if'
1375      <-Source: end: 'block-if'
1375     <--While: end: 'block-if'
1375    <---Source: end: 'block-if'
1375   <----Function: end: 'block-if'
1375  <-----Source: end: 'block-if'
1375 <------Class: end: 'block-if'
1375<-------Source: end: 'block-if'
1375       If: end-gen
1375       While: begin-gen
1375        Value: begin-gen
1375         Member: begin-gen
1375          Identifier: begin-gen
1375           Identifier: expr: 'qryAgenda'
1375          Identifier: end-gen
1375          FunctionCall: begin-gen
1375           FunctionCall: expr: 'next()'
1375          FunctionCall: end-gen
1375          Member: expr: 'qryAgenda.next()'
1375        <-Value: expr: 'qryAgenda.next()'
1375         Member: end-gen
1375        Value: end-gen
1375        While: line: 'while qryAgenda.next():'
1375      <-Source: line: 'while qryAgenda.next():'
1375     <--While: line: 'while qryAgenda.next():'
1375    <---Source: line: 'while qryAgenda.next():'
1375   <----Function: line: 'while qryAgenda.next():'
1375  <-----Source: line: 'while qryAgenda.next():'
1375 <------Class: line: 'while qryAgenda.next():'
1375<-------Source: line: 'while qryAgenda.next():'
1377        While: begin: 'block-while'
1377      <-Source: begin: 'block-while'
1377     <--While: begin: 'block-while'
1377    <---Source: begin: 'block-while'
1377   <----Function: begin: 'block-while'
1377  <-----Source: begin: 'block-while'
1377 <------Class: begin: 'block-while'
1377<-------Source: begin: 'block-while'
1377        Source: begin-gen
1377         DeclarationBlock: begin-gen
1377          Variable: begin-gen
1377           Variable: expr: 'nombreCon'
1377           Variable: expr: '='
1377           Value: begin-gen
1377            Member: begin-gen
1377             Identifier: begin-gen
1377              Identifier: expr: 'qryAgenda'
1377             Identifier: end-gen
1377             FunctionCall: begin-gen
1377              Value: begin-gen
1377               Constant: begin-gen
1377                Constant: ctype: 'String' -> 'contacto'
1377                Constant: expr: 'u"contacto"'
1377              <-Value: expr: 'u"contacto"'
1377               Constant: end-gen
1377              Value: end-gen
1377              FunctionCall: expr: 'value(u"contacto")'
1377             FunctionCall: end-gen
1377             Member: expr: 'qryAgenda.value(u"contacto")'
1377           <-Value: expr: 'qryAgenda.value(u"contacto")'
1377          <--Variable: expr: 'qryAgenda.value(u"contacto")'
1377            Member: end-gen
1377           Value: end-gen
1377          Variable: end-gen
1377          DeclarationBlock: line: 'nombreCon = qryAgenda.value(u"contacto")'
1377        <-Source: line: 'nombreCon = qryAgenda.value(u"contacto")'
1377       <--While: line: 'nombreCon = qryAgenda.value(u"contacto")'
1377      <---Source: line: 'nombreCon = qryAgenda.value(u"contacto")'
1377     <----While: line: 'nombreCon = qryAgenda.value(u"contacto")'
1377    <-----Source: line: 'nombreCon = qryAgenda.value(u"contacto")'
1377   <------Function: line: 'nombreCon = qryAgenda.value(u"contacto")'
1377  <-------Source: line: 'nombreCon = qryAgenda.value(u"contacto")'
1377 <--------Class: line: 'nombreCon = qryAgenda.value(u"contacto")'
1377<---------Source: line: 'nombreCon = qryAgenda.value(u"contacto")'
1378         DeclarationBlock: end-gen
1378         DeclarationBlock: begin-gen
1378          Variable: begin-gen
1378           Variable: expr: 'cargoCon'
1378           Variable: expr: '='
1378           Value: begin-gen
1378            Member: begin-gen
1378             Identifier: begin-gen
1378              Identifier: expr: 'qryAgenda'
1378             Identifier: end-gen
1378             FunctionCall: begin-gen
1378              Value: begin-gen
1378               Constant: begin-gen
1378                Constant: ctype: 'String' -> 'cargo'
1378                Constant: expr: 'u"cargo"'
1378              <-Value: expr: 'u"cargo"'
1378               Constant: end-gen
1378              Value: end-gen
1378              FunctionCall: expr: 'value(u"cargo")'
1378             FunctionCall: end-gen
1378             Member: expr: 'qryAgenda.value(u"cargo")'
1378           <-Value: expr: 'qryAgenda.value(u"cargo")'
1378          <--Variable: expr: 'qryAgenda.value(u"cargo")'
1378            Member: end-gen
1378           Value: end-gen
1378          Variable: end-gen
1378          DeclarationBlock: line: 'cargoCon = qryAgenda.value(u"cargo")'
1378        <-Source: line: 'cargoCon = qryAgenda.value(u"cargo")'
1378       <--While: line: 'cargoCon = qryAgenda.value(u"cargo")'
1378      <---Source: line: 'cargoCon = qryAgenda.value(u"cargo")'
1378     <----While: line: 'cargoCon = qryAgenda.value(u"cargo")'
1378    <-----Source: line: 'cargoCon = qryAgenda.value(u"cargo")'
1378   <------Function: line: 'cargoCon = qryAgenda.value(u"cargo")'
1378  <-------Source: line: 'cargoCon = qryAgenda.value(u"cargo")'
1378 <--------Class: line: 'cargoCon = qryAgenda.value(u"cargo")'
1378<---------Source: line: 'cargoCon = qryAgenda.value(u"cargo")'
1379         DeclarationBlock: end-gen
1379         DeclarationBlock: begin-gen
1379          Variable: begin-gen
1379           Variable: expr: 'telefonoCon'
1379           Variable: expr: '='
1379           Value: begin-gen
1379            Member: begin-gen
1379             Identifier: begin-gen
1379              Identifier: expr: 'qryAgenda'
1379             Identifier: end-gen
1379             FunctionCall: begin-gen
1379              Value: begin-gen
1379               Constant: begin-gen
1379                Constant: ctype: 'String' -> 'telefono'
1379                Constant: expr: 'u"telefono"'
1379              <-Value: expr: 'u"telefono"'
1379               Constant: end-gen
1379              Value: end-gen
1379              FunctionCall: expr: 'value(u"telefono")'
1379             FunctionCall: end-gen
1379             Member: expr: 'qryAgenda.value(u"telefono")'
1379           <-Value: expr: 'qryAgenda.value(u"telefono")'
1379          <--Variable: expr: 'qryAgenda.value(u"telefono")'
1379            Member: end-gen
1379           Value: end-gen
1379          Variable: end-gen
1379          DeclarationBlock: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1379        <-Source: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1379       <--While: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1379      <---Source: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1379     <----While: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1379    <-----Source: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1379   <------Function: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1379  <-------Source: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1379 <--------Class: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1379<---------Source: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1380         DeclarationBlock: end-gen
1380         DeclarationBlock: begin-gen
1380          Variable: begin-gen
1380           Variable: expr: 'faxCon'
1380           Variable: expr: '='
1380           Value: begin-gen
1380            Member: begin-gen
1380             Identifier: begin-gen
1380              Identifier: expr: 'qryAgenda'
1380             Identifier: end-gen
1380             FunctionCall: begin-gen
1380              Value: begin-gen
1380               Constant: begin-gen
1380                Constant: ctype: 'String' -> 'fax'
1380                Constant: expr: 'u"fax"'
1380              <-Value: expr: 'u"fax"'
1380               Constant: end-gen
1380              Value: end-gen
1380              FunctionCall: expr: 'value(u"fax")'
1380             FunctionCall: end-gen
1380             Member: expr: 'qryAgenda.value(u"fax")'
1380           <-Value: expr: 'qryAgenda.value(u"fax")'
1380          <--Variable: expr: 'qryAgenda.value(u"fax")'
1380            Member: end-gen
1380           Value: end-gen
1380          Variable: end-gen
1380          DeclarationBlock: line: 'faxCon = qryAgenda.value(u"fax")'
1380        <-Source: line: 'faxCon = qryAgenda.value(u"fax")'
1380       <--While: line: 'faxCon = qryAgenda.value(u"fax")'
1380      <---Source: line: 'faxCon = qryAgenda.value(u"fax")'
1380     <----While: line: 'faxCon = qryAgenda.value(u"fax")'
1380    <-----Source: line: 'faxCon = qryAgenda.value(u"fax")'
1380   <------Function: line: 'faxCon = qryAgenda.value(u"fax")'
1380  <-------Source: line: 'faxCon = qryAgenda.value(u"fax")'
1380 <--------Class: line: 'faxCon = qryAgenda.value(u"fax")'
1380<---------Source: line: 'faxCon = qryAgenda.value(u"fax")'
1381         DeclarationBlock: end-gen
1381         DeclarationBlock: begin-gen
1381          Variable: begin-gen
1381           Variable: expr: 'emailCon'
1381           Variable: expr: '='
1381           Value: begin-gen
1381            Member: begin-gen
1381             Identifier: begin-gen
1381              Identifier: expr: 'qryAgenda'
1381             Identifier: end-gen
1381             FunctionCall: begin-gen
1381              Value: begin-gen
1381               Constant: begin-gen
1381                Constant: ctype: 'String' -> 'email'
1381                Constant: expr: 'u"email"'
1381              <-Value: expr: 'u"email"'
1381               Constant: end-gen
1381              Value: end-gen
1381              FunctionCall: expr: 'value(u"email")'
1381             FunctionCall: end-gen
1381             Member: expr: 'qryAgenda.value(u"email")'
1381           <-Value: expr: 'qryAgenda.value(u"email")'
1381          <--Variable: expr: 'qryAgenda.value(u"email")'
1381            Member: end-gen
1381           Value: end-gen
1381          Variable: end-gen
1381          DeclarationBlock: line: 'emailCon = qryAgenda.value(u"email")'
1381        <-Source: line: 'emailCon = qryAgenda.value(u"email")'
1381       <--While: line: 'emailCon = qryAgenda.value(u"email")'
1381      <---Source: line: 'emailCon = qryAgenda.value(u"email")'
1381     <----While: line: 'emailCon = qryAgenda.value(u"email")'
1381    <-----Source: line: 'emailCon = qryAgenda.value(u"email")'
1381   <------Function: line: 'emailCon = qryAgenda.value(u"email")'
1381  <-------Source: line: 'emailCon = qryAgenda.value(u"email")'
1381 <--------Class: line: 'emailCon = qryAgenda.value(u"email")'
1381<---------Source: line: 'emailCon = qryAgenda.value(u"email")'
1382         DeclarationBlock: end-gen
1382         DeclarationBlock: begin-gen
1382          Variable: begin-gen
1382           Variable: expr: 'idAgenda'
1382           Variable: expr: '='
1382           Value: begin-gen
1382            Member: begin-gen
1382             Identifier: begin-gen
1382              Identifier: expr: 'qryAgenda'
1382             Identifier: end-gen
1382             FunctionCall: begin-gen
1382              Value: begin-gen
1382               Constant: begin-gen
1382                Constant: ctype: 'String' -> 'id'
1382                Constant: expr: 'u"id"'
1382              <-Value: expr: 'u"id"'
1382               Constant: end-gen
1382              Value: end-gen
1382              FunctionCall: expr: 'value(u"id")'
1382             FunctionCall: end-gen
1382             Member: expr: 'qryAgenda.value(u"id")'
1382           <-Value: expr: 'qryAgenda.value(u"id")'
1382          <--Variable: expr: 'qryAgenda.value(u"id")'
1382            Member: end-gen
1382           Value: end-gen
1382          Variable: end-gen
1382          DeclarationBlock: line: 'idAgenda = qryAgenda.value(u"id")'
1382        <-Source: line: 'idAgenda = qryAgenda.value(u"id")'
1382       <--While: line: 'idAgenda = qryAgenda.value(u"id")'
1382      <---Source: line: 'idAgenda = qryAgenda.value(u"id")'
1382     <----While: line: 'idAgenda = qryAgenda.value(u"id")'
1382    <-----Source: line: 'idAgenda = qryAgenda.value(u"id")'
1382   <------Function: line: 'idAgenda = qryAgenda.value(u"id")'
1382  <-------Source: line: 'idAgenda = qryAgenda.value(u"id")'
1382 <--------Class: line: 'idAgenda = qryAgenda.value(u"id")'
1382<---------Source: line: 'idAgenda = qryAgenda.value(u"id")'
1383         DeclarationBlock: end-gen
1383         If: begin-gen
1383          Expression: begin-gen
1383           OpUnary: begin-gen
1383            OpUnary: expr: 'not'
1383          <-Expression: expr: 'not'
1383            Identifier: begin-gen
1383             Identifier: expr: 'idAgenda'
1383           <-OpUnary: expr: 'idAgenda'
1383          <--Expression: expr: 'idAgenda'
1383            Identifier: end-gen
1383           OpUnary: end-gen
1383           Compare: begin-gen
1383            Compare: expr: 'or'
1383          <-Expression: expr: 'or'
1383           Compare: end-gen
1383           Identifier: begin-gen
1383            Identifier: expr: 'idAgenda'
1383          <-Expression: expr: 'idAgenda'
1383           Identifier: end-gen
1383           Compare: begin-gen
1383            Compare: expr: '=='
1383          <-Expression: expr: '=='
1383           Compare: end-gen
1383           Constant: begin-gen
1383            Constant: ctype: 'Number' -> '0'
1383            Constant: expr: '0'
1383          <-Expression: expr: '0'
1383           Constant: end-gen
1383          Expression: end-gen
1383          If: line: 'if not idAgenda or idAgenda == 0:'
1383        <-Source: line: 'if not idAgenda or idAgenda == 0:'
1383       <--While: line: 'if not idAgenda or idAgenda == 0:'
1383      <---Source: line: 'if not idAgenda or idAgenda == 0:'
1383     <----While: line: 'if not idAgenda or idAgenda == 0:'
1383    <-----Source: line: 'if not idAgenda or idAgenda == 0:'
1383   <------Function: line: 'if not idAgenda or idAgenda == 0:'
1383  <-------Source: line: 'if not idAgenda or idAgenda == 0:'
1383 <--------Class: line: 'if not idAgenda or idAgenda == 0:'
1383<---------Source: line: 'if not idAgenda or idAgenda == 0:'
1384          If: begin: 'block-if'
1384        <-Source: begin: 'block-if'
1384       <--While: begin: 'block-if'
1384      <---Source: begin: 'block-if'
1384     <----While: begin: 'block-if'
1384    <-----Source: begin: 'block-if'
1384   <------Function: begin: 'block-if'
1384  <-------Source: begin: 'block-if'
1384 <--------Class: begin: 'block-if'
1384<---------Source: begin: 'block-if'
1384          Source: begin-gen
1384           InstructionCall: begin-gen
1384            Member: begin-gen
1384             Identifier: begin-gen
1384              Identifier: expr: 'util'
1384             Identifier: end-gen
1384             FunctionCall: begin-gen
1384              FunctionCall: expr: 'destroyProgressDialog()'
1384             FunctionCall: end-gen
1384             Member: expr: 'util.destroyProgressDialog()'
1384            Member: end-gen
1384            InstructionCall: line: 'util.destroyProgressDialog()'
1384          <-Source: line: 'util.destroyProgressDialog()'
1384         <--If: line: 'util.destroyProgressDialog()'
1384        <---Source: line: 'util.destroyProgressDialog()'
1384       <----While: line: 'util.destroyProgressDialog()'
1384      <-----Source: line: 'util.destroyProgressDialog()'
1384     <------While: line: 'util.destroyProgressDialog()'
1384    <-------Source: line: 'util.destroyProgressDialog()'
1384   <--------Function: line: 'util.destroyProgressDialog()'
1384  <---------Source: line: 'util.destroyProgressDialog()'
1384 <----------Class: line: 'util.destroyProgressDialog()'
1384<-----------Source: line: 'util.destroyProgressDialog()'
1385           InstructionCall: end-gen
1385           InstructionFlow: begin-gen
1385            Value: begin-gen
1385             Identifier: begin-gen
1385              Identifier: expr: 'False'
1385            <-Value: expr: 'False'
1385             Identifier: end-gen
1385            Value: end-gen
1385            InstructionFlow: line: 'return False'
1385          <-Source: line: 'return False'
1385         <--If: line: 'return False'
1385        <---Source: line: 'return False'
1385       <----While: line: 'return False'
1385      <-----Source: line: 'return False'
1385     <------While: line: 'return False'
1385    <-------Source: line: 'return False'
1385   <--------Function: line: 'return False'
1385  <---------Source: line: 'return False'
1385 <----------Class: line: 'return False'
1385<-----------Source: line: 'return False'
1386           InstructionFlow: end-gen
1386          Source: end-gen
1386          If: end: 'block-if'
1386        <-Source: end: 'block-if'
1386       <--While: end: 'block-if'
1386      <---Source: end: 'block-if'
1386     <----While: end: 'block-if'
1386    <-----Source: end: 'block-if'
1386   <------Function: end: 'block-if'
1386  <-------Source: end: 'block-if'
1386 <--------Class: end: 'block-if'
1386<---------Source: end: 'block-if'
1386         If: end-gen
1386         DeclarationBlock: begin-gen
1386          Variable: begin-gen
1386           Variable: expr: 'qryContactos'
1386           Variable: expr: '='
1386           Value: begin-gen
1386            New: begin-gen
1386             FunctionCall: begin-gen
1386              FunctionCall: expr: 'FLSqlQuery()'
1386            <-New: expr: 'qsatype.FLSqlQuery()'
1386           <--Value: expr: 'qsatype.FLSqlQuery()'
1386          <---Variable: expr: 'qsatype.FLSqlQuery()'
1386             FunctionCall: end-gen
1386            New: end-gen
1386           Value: end-gen
1386          Variable: end-gen
1386          DeclarationBlock: line: 'qryContactos = qsatype.FLSqlQuery()'
1386        <-Source: line: 'qryContactos = qsatype.FLSqlQuery()'
1386       <--While: line: 'qryContactos = qsatype.FLSqlQuery()'
1386      <---Source: line: 'qryContactos = qsatype.FLSqlQuery()'
1386     <----While: line: 'qryContactos = qsatype.FLSqlQuery()'
1386    <-----Source: line: 'qryContactos = qsatype.FLSqlQuery()'
1386   <------Function: line: 'qryContactos = qsatype.FLSqlQuery()'
1386  <-------Source: line: 'qryContactos = qsatype.FLSqlQuery()'
1386 <--------Class: line: 'qryContactos = qsatype.FLSqlQuery()'
1386<---------Source: line: 'qryContactos = qsatype.FLSqlQuery()'
1387         DeclarationBlock: end-gen
1387         InstructionCall: begin-gen
1387          Member: begin-gen
1387           Identifier: begin-gen
1387            Identifier: expr: 'qryContactos'
1387           Identifier: end-gen
1387           FunctionCall: begin-gen
1387            Value: begin-gen
1387             Constant: begin-gen
1387              Constant: ctype: 'String' -> 'crm_contactos,contactosclientes'
1387              Constant: expr: 'u"crm_contactos,contactosclientes"'
1387            <-Value: expr: 'u"crm_contactos,contactosclientes"'
1387             Constant: end-gen
1387            Value: end-gen
1387            FunctionCall: expr: 'setTablesList(u"crm_contactos,contactosclientes")'
1387           FunctionCall: end-gen
1387           Member: expr: 'qryContactos.setTablesList(u"crm_contactos,contactosclientes")'
1387          Member: end-gen
1387          InstructionCall: line: 'qryContactos.setTablesList(u"crm_contactos,contactosclientes")'
1387        <-Source: line: 'qryContactos.setTablesList(u"crm_contactos,contactosclientes")'
1387       <--While: line: 'qryContactos.setTablesList(u"crm_contactos,contactosclientes")'
1387      <---Source: line: 'qryContactos.setTablesList(u"crm_contactos,contactosclientes")'
1387     <----While: line: 'qryContactos.setTablesList(u"crm_contactos,contactosclientes")'
1387    <-----Source: line: 'qryContactos.setTablesList(u"crm_contactos,contactosclientes")'
1387   <------Function: line: 'qryContactos.setTablesList(u"crm_contactos,contactosclientes")'
1387  <-------Source: line: 'qryContactos.setTablesList(u"crm_contactos,contactosclientes")'
1387 <--------Class: line: 'qryContactos.setTablesList(u"crm_contactos,contactosclientes")'
1387<---------Source: line: 'qryContactos.setTablesList(u"crm_contactos,contactosclientes")'
1388         InstructionCall: end-gen
1388         InstructionCall: begin-gen
1388          Member: begin-gen
1388           Identifier: begin-gen
1388            Identifier: expr: 'qryContactos'
1388           Identifier: end-gen
1388           FunctionCall: begin-gen
1388            Value: begin-gen
1388             Constant: begin-gen
1388              Constant: ctype: 'String' -> 'crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto'
1388              Constant: expr: 'u"crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto"'
1388            <-Value: expr: 'u"crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto"'
1388             Constant: end-gen
1388            Value: end-gen
1388            FunctionCall: expr: 'setFrom(u"crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto")'
1388           FunctionCall: end-gen
1388           Member: expr: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto")'
1388          Member: end-gen
1388          InstructionCall: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto")'
1388        <-Source: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto")'
1388       <--While: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto")'
1388      <---Source: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto")'
1388     <----While: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto")'
1388    <-----Source: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto")'
1388   <------Function: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto")'
1388  <-------Source: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto")'
1388 <--------Class: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto")'
1388<---------Source: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto")'
1389         InstructionCall: end-gen
1389         InstructionCall: begin-gen
1389          Member: begin-gen
1389           Identifier: begin-gen
1389            Identifier: expr: 'qryContactos'
1389           Identifier: end-gen
1389           FunctionCall: begin-gen
1389            Value: begin-gen
1389             Constant: begin-gen
1389              Constant: ctype: 'String' -> 'crm_contactos.codcontacto'
1389              Constant: expr: 'u"crm_contactos.codcontacto"'
1389            <-Value: expr: 'u"crm_contactos.codcontacto"'
1389             Constant: end-gen
1389            Value: end-gen
1389            FunctionCall: expr: 'setSelect(u"crm_contactos.codcontacto")'
1389           FunctionCall: end-gen
1389           Member: expr: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1389          Member: end-gen
1389          InstructionCall: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1389        <-Source: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1389       <--While: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1389      <---Source: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1389     <----While: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1389    <-----Source: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1389   <------Function: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1389  <-------Source: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1389 <--------Class: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1389<---------Source: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1390         InstructionCall: end-gen
1390         InstructionCall: begin-gen
1390          Member: begin-gen
1390           Identifier: begin-gen
1390            Identifier: expr: 'qryContactos'
1390           Identifier: end-gen
1390           FunctionCall: begin-gen
1390            Expression: begin-gen
1390             Expression: expr: 'ustr('
1390             Constant: begin-gen
1390              Constant: ctype: 'String' -> "crm_contactos.nombre = '"
1390              Constant: expr: 'u"crm_contactos.nombre = \'"'
1390            <-Expression: expr: 'u"crm_contactos.nombre = \'"'
1390             Constant: end-gen
1390             Expression: expr: ','
1390             Identifier: begin-gen
1390              Identifier: expr: 'nombreCon'
1390            <-Expression: expr: 'nombreCon'
1390             Identifier: end-gen
1390             Expression: expr: ','
1390             Constant: begin-gen
1390              Constant: ctype: 'String' -> "' AND (contactosclientes.codcliente = '"
1390              Constant: expr: 'u"\' AND (contactosclientes.codcliente = \'"'
1390            <-Expression: expr: 'u"\' AND (contactosclientes.codcliente = \'"'
1390             Constant: end-gen
1390             Expression: expr: ','
1390             Identifier: begin-gen
1390              Identifier: expr: 'codCliente'
1390            <-Expression: expr: 'codCliente'
1390             Identifier: end-gen
1390             Expression: expr: ','
1390             Constant: begin-gen
1390              Constant: ctype: 'String' -> "' AND (crm_contactos.email = '"
1390              Constant: expr: 'u"\' AND (crm_contactos.email = \'"'
1390            <-Expression: expr: 'u"\' AND (crm_contactos.email = \'"'
1390             Constant: end-gen
1390             Expression: expr: ','
1390             Identifier: begin-gen
1390              Identifier: expr: 'emailCon'
1390            <-Expression: expr: 'emailCon'
1390             Identifier: end-gen
1390             Expression: expr: ','
1390             Constant: begin-gen
1390              Constant: ctype: 'String' -> "' AND crm_contactos.telefono1 = '"
1390              Constant: expr: 'u"\' AND crm_contactos.telefono1 = \'"'
1390            <-Expression: expr: 'u"\' AND crm_contactos.telefono1 = \'"'
1390             Constant: end-gen
1390             Expression: expr: ','
1390             Identifier: begin-gen
1390              Identifier: expr: 'telefonoCon'
1390            <-Expression: expr: 'telefonoCon'
1390             Identifier: end-gen
1390             Expression: expr: ','
1390             Constant: begin-gen
1390              Constant: ctype: 'String' -> "'))"
1390              Constant: expr: 'u"\'))"'
1390            <-Expression: expr: 'u"\'))"'
1390             Constant: end-gen
1390             Expression: expr: ')'
1390            Expression: end-gen
1390            FunctionCall: expr: 'setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosclientes.codcliente = \'" , codCliente , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1390           FunctionCall: end-gen
1390           Member: expr: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosclientes.codcliente = \'" , codCliente , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1390          Member: end-gen
1390          InstructionCall: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosclientes.codcliente = \'" , codCliente , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1390        <-Source: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosclientes.codcliente = \'" , codCliente , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1390       <--While: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosclientes.codcliente = \'" , codCliente , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1390      <---Source: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosclientes.codcliente = \'" , codCliente , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1390     <----While: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosclientes.codcliente = \'" , codCliente , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1390    <-----Source: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosclientes.codcliente = \'" , codCliente , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1390   <------Function: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosclientes.codcliente = \'" , codCliente , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1390  <-------Source: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosclientes.codcliente = \'" , codCliente , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1390 <--------Class: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosclientes.codcliente = \'" , codCliente , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1390<---------Source: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosclientes.codcliente = \'" , codCliente , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1391         InstructionCall: end-gen
1391         If: begin-gen
1391          Value: begin-gen
1391           OpUnary: begin-gen
1391            OpUnary: expr: 'not'
1391          <-Value: expr: 'not'
1391            Member: begin-gen
1391             Identifier: begin-gen
1391              Identifier: expr: 'qryContactos'
1391             Identifier: end-gen
1391             FunctionCall: begin-gen
1391              FunctionCall: expr: 'exec_()'
1391             FunctionCall: end-gen
1391             Member: expr: 'qryContactos.exec_()'
1391           <-OpUnary: expr: 'qryContactos.exec_()'
1391          <--Value: expr: 'qryContactos.exec_()'
1391            Member: end-gen
1391           OpUnary: end-gen
1391          Value: end-gen
1391          If: line: 'if not qryContactos.exec_():'
1391        <-Source: line: 'if not qryContactos.exec_():'
1391       <--While: line: 'if not qryContactos.exec_():'
1391      <---Source: line: 'if not qryContactos.exec_():'
1391     <----While: line: 'if not qryContactos.exec_():'
1391    <-----Source: line: 'if not qryContactos.exec_():'
1391   <------Function: line: 'if not qryContactos.exec_():'
1391  <-------Source: line: 'if not qryContactos.exec_():'
1391 <--------Class: line: 'if not qryContactos.exec_():'
1391<---------Source: line: 'if not qryContactos.exec_():'
1392          If: begin: 'block-if'
1392        <-Source: begin: 'block-if'
1392       <--While: begin: 'block-if'
1392      <---Source: begin: 'block-if'
1392     <----While: begin: 'block-if'
1392    <-----Source: begin: 'block-if'
1392   <------Function: begin: 'block-if'
1392  <-------Source: begin: 'block-if'
1392 <--------Class: begin: 'block-if'
1392<---------Source: begin: 'block-if'
1392          Source: begin-gen
1392           InstructionCall: begin-gen
1392            Member: begin-gen
1392             Identifier: begin-gen
1392              Identifier: expr: 'util'
1392             Identifier: end-gen
1392             FunctionCall: begin-gen
1392              FunctionCall: expr: 'destroyProgressDialog()'
1392             FunctionCall: end-gen
1392             Member: expr: 'util.destroyProgressDialog()'
1392            Member: end-gen
1392            InstructionCall: line: 'util.destroyProgressDialog()'
1392          <-Source: line: 'util.destroyProgressDialog()'
1392         <--If: line: 'util.destroyProgressDialog()'
1392        <---Source: line: 'util.destroyProgressDialog()'
1392       <----While: line: 'util.destroyProgressDialog()'
1392      <-----Source: line: 'util.destroyProgressDialog()'
1392     <------While: line: 'util.destroyProgressDialog()'
1392    <-------Source: line: 'util.destroyProgressDialog()'
1392   <--------Function: line: 'util.destroyProgressDialog()'
1392  <---------Source: line: 'util.destroyProgressDialog()'
1392 <----------Class: line: 'util.destroyProgressDialog()'
1392<-----------Source: line: 'util.destroyProgressDialog()'
1393           InstructionCall: end-gen
1393           InstructionFlow: begin-gen
1393            Value: begin-gen
1393             Identifier: begin-gen
1393              Identifier: expr: 'False'
1393            <-Value: expr: 'False'
1393             Identifier: end-gen
1393            Value: end-gen
1393            InstructionFlow: line: 'return False'
1393          <-Source: line: 'return False'
1393         <--If: line: 'return False'
1393        <---Source: line: 'return False'
1393       <----While: line: 'return False'
1393      <-----Source: line: 'return False'
1393     <------While: line: 'return False'
1393    <-------Source: line: 'return False'
1393   <--------Function: line: 'return False'
1393  <---------Source: line: 'return False'
1393 <----------Class: line: 'return False'
1393<-----------Source: line: 'return False'
1394           InstructionFlow: end-gen
1394          Source: end-gen
1394          If: end: 'block-if'
1394        <-Source: end: 'block-if'
1394       <--While: end: 'block-if'
1394      <---Source: end: 'block-if'
1394     <----While: end: 'block-if'
1394    <-----Source: end: 'block-if'
1394   <------Function: end: 'block-if'
1394  <-------Source: end: 'block-if'
1394 <--------Class: end: 'block-if'
1394<---------Source: end: 'block-if'
1394         If: end-gen
1394         DeclarationBlock: begin-gen
1394          Variable: begin-gen
1394           Variable: expr: 'codContacto'
1394           Variable: expr: '='
1394           Value: begin-gen
1394            Constant: begin-gen
1394             Constant: ctype: 'String' -> ''
1394             Constant: expr: 'u""'
1394           <-Value: expr: 'u""'
1394          <--Variable: expr: 'u""'
1394            Constant: end-gen
1394           Value: end-gen
1394          Variable: end-gen
1394          DeclarationBlock: line: 'codContacto = u""'
1394        <-Source: line: 'codContacto = u""'
1394       <--While: line: 'codContacto = u""'
1394      <---Source: line: 'codContacto = u""'
1394     <----While: line: 'codContacto = u""'
1394    <-----Source: line: 'codContacto = u""'
1394   <------Function: line: 'codContacto = u""'
1394  <-------Source: line: 'codContacto = u""'
1394 <--------Class: line: 'codContacto = u""'
1394<---------Source: line: 'codContacto = u""'
1395         DeclarationBlock: end-gen
1395         If: begin-gen
1395          Value: begin-gen
1395           Member: begin-gen
1395            Identifier: begin-gen
1395             Identifier: expr: 'qryContactos'
1395            Identifier: end-gen
1395            FunctionCall: begin-gen
1395             FunctionCall: expr: 'first()'
1395            FunctionCall: end-gen
1395            Member: expr: 'qryContactos.first()'
1395          <-Value: expr: 'qryContactos.first()'
1395           Member: end-gen
1395          Value: end-gen
1395          If: line: 'if qryContactos.first():'
1395        <-Source: line: 'if qryContactos.first():'
1395       <--While: line: 'if qryContactos.first():'
1395      <---Source: line: 'if qryContactos.first():'
1395     <----While: line: 'if qryContactos.first():'
1395    <-----Source: line: 'if qryContactos.first():'
1395   <------Function: line: 'if qryContactos.first():'
1395  <-------Source: line: 'if qryContactos.first():'
1395 <--------Class: line: 'if qryContactos.first():'
1395<---------Source: line: 'if qryContactos.first():'
1396          If: begin: 'block-if'
1396        <-Source: begin: 'block-if'
1396       <--While: begin: 'block-if'
1396      <---Source: begin: 'block-if'
1396     <----While: begin: 'block-if'
1396    <-----Source: begin: 'block-if'
1396   <------Function: begin: 'block-if'
1396  <-------Source: begin: 'block-if'
1396 <--------Class: begin: 'block-if'
1396<---------Source: begin: 'block-if'
1396          Source: begin-gen
1396           InstructionUpdate: begin-gen
1396            Identifier: begin-gen
1396             Identifier: expr: 'codContacto'
1396            Identifier: end-gen
1396            OpUpdate: begin-gen
1396             OpUpdate: expr: '='
1396            OpUpdate: end-gen
1396            Value: begin-gen
1396             Member: begin-gen
1396              Identifier: begin-gen
1396               Identifier: expr: 'qryContactos'
1396              Identifier: end-gen
1396              FunctionCall: begin-gen
1396               Value: begin-gen
1396                Constant: begin-gen
1396                 Constant: ctype: 'String' -> 'crm_contactos.codcontacto'
1396                 Constant: expr: 'u"crm_contactos.codcontacto"'
1396               <-Value: expr: 'u"crm_contactos.codcontacto"'
1396                Constant: end-gen
1396               Value: end-gen
1396               FunctionCall: expr: 'value(u"crm_contactos.codcontacto")'
1396              FunctionCall: end-gen
1396              Member: expr: 'qryContactos.value(u"crm_contactos.codcontacto")'
1396            <-Value: expr: 'qryContactos.value(u"crm_contactos.codcontacto")'
1396             Member: end-gen
1396            Value: end-gen
1396            InstructionUpdate: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1396          <-Source: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1396         <--If: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1396        <---Source: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1396       <----While: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1396      <-----Source: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1396     <------While: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1396    <-------Source: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1396   <--------Function: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1396  <---------Source: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1396 <----------Class: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1396<-----------Source: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1397           InstructionUpdate: end-gen
1397          Source: end-gen
1397          If: end: 'block-if'
1397        <-Source: end: 'block-if'
1397       <--While: end: 'block-if'
1397      <---Source: end: 'block-if'
1397     <----While: end: 'block-if'
1397    <-----Source: end: 'block-if'
1397   <------Function: end: 'block-if'
1397  <-------Source: end: 'block-if'
1397 <--------Class: end: 'block-if'
1397<---------Source: end: 'block-if'
1397         If: end-gen
1397         If: begin-gen
1397          Value: begin-gen
1397           OpUnary: begin-gen
1397            OpUnary: expr: 'not'
1397          <-Value: expr: 'not'
1397            Member: begin-gen
1397             Identifier: begin-gen
1397              Identifier: expr: 'self'
1397             Identifier: end-gen
1397             Identifier: begin-gen
1397              Identifier: expr: 'iface'
1397             Identifier: end-gen
1397             FunctionCall: begin-gen
1397              Value: begin-gen
1397               Identifier: begin-gen
1397                Identifier: expr: 'codCliente'
1397              <-Value: expr: 'codCliente'
1397               Identifier: end-gen
1397              Value: end-gen
1397              Value: begin-gen
1397               Identifier: begin-gen
1397                Identifier: expr: 'codContacto'
1397              <-Value: expr: 'codContacto'
1397               Identifier: end-gen
1397              Value: end-gen
1397              Value: begin-gen
1397               Identifier: begin-gen
1397                Identifier: expr: 'nombreCon'
1397              <-Value: expr: 'nombreCon'
1397               Identifier: end-gen
1397              Value: end-gen
1397              Value: begin-gen
1397               Identifier: begin-gen
1397                Identifier: expr: 'cargoCon'
1397              <-Value: expr: 'cargoCon'
1397               Identifier: end-gen
1397              Value: end-gen
1397              Value: begin-gen
1397               Identifier: begin-gen
1397                Identifier: expr: 'telefonoCon'
1397              <-Value: expr: 'telefonoCon'
1397               Identifier: end-gen
1397              Value: end-gen
1397              Value: begin-gen
1397               Identifier: begin-gen
1397                Identifier: expr: 'faxCon'
1397              <-Value: expr: 'faxCon'
1397               Identifier: end-gen
1397              Value: end-gen
1397              Value: begin-gen
1397               Identifier: begin-gen
1397                Identifier: expr: 'emailCon'
1397              <-Value: expr: 'emailCon'
1397               Identifier: end-gen
1397              Value: end-gen
1397              Value: begin-gen
1397               Identifier: begin-gen
1397                Identifier: expr: 'idAgenda'
1397              <-Value: expr: 'idAgenda'
1397               Identifier: end-gen
1397              Value: end-gen
1397              FunctionCall: expr: 'actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
1397             FunctionCall: end-gen
1397             Member: expr: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
1397           <-OpUnary: expr: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
1397          <--Value: expr: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
1397            Member: end-gen
1397           OpUnary: end-gen
1397          Value: end-gen
1397          If: line: 'if not self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1397        <-Source: line: 'if not self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1397       <--While: line: 'if not self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1397      <---Source: line: 'if not self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1397     <----While: line: 'if not self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1397    <-----Source: line: 'if not self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1397   <------Function: line: 'if not self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1397  <-------Source: line: 'if not self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1397 <--------Class: line: 'if not self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1397<---------Source: line: 'if not self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1398          If: begin: 'block-if'
1398        <-Source: begin: 'block-if'
1398       <--While: begin: 'block-if'
1398      <---Source: begin: 'block-if'
1398     <----While: begin: 'block-if'
1398    <-----Source: begin: 'block-if'
1398   <------Function: begin: 'block-if'
1398  <-------Source: begin: 'block-if'
1398 <--------Class: begin: 'block-if'
1398<---------Source: begin: 'block-if'
1398          Source: begin-gen
1398           InstructionCall: begin-gen
1398            Member: begin-gen
1398             Identifier: begin-gen
1398              Identifier: expr: 'util'
1398             Identifier: end-gen
1398             FunctionCall: begin-gen
1398              FunctionCall: expr: 'destroyProgressDialog()'
1398             FunctionCall: end-gen
1398             Member: expr: 'util.destroyProgressDialog()'
1398            Member: end-gen
1398            InstructionCall: line: 'util.destroyProgressDialog()'
1398          <-Source: line: 'util.destroyProgressDialog()'
1398         <--If: line: 'util.destroyProgressDialog()'
1398        <---Source: line: 'util.destroyProgressDialog()'
1398       <----While: line: 'util.destroyProgressDialog()'
1398      <-----Source: line: 'util.destroyProgressDialog()'
1398     <------While: line: 'util.destroyProgressDialog()'
1398    <-------Source: line: 'util.destroyProgressDialog()'
1398   <--------Function: line: 'util.destroyProgressDialog()'
1398  <---------Source: line: 'util.destroyProgressDialog()'
1398 <----------Class: line: 'util.destroyProgressDialog()'
1398<-----------Source: line: 'util.destroyProgressDialog()'
1399           InstructionCall: end-gen
1399           InstructionFlow: begin-gen
1399            Value: begin-gen
1399             Identifier: begin-gen
1399              Identifier: expr: 'False'
1399            <-Value: expr: 'False'
1399             Identifier: end-gen
1399            Value: end-gen
1399            InstructionFlow: line: 'return False'
1399          <-Source: line: 'return False'
1399         <--If: line: 'return False'
1399        <---Source: line: 'return False'
1399       <----While: line: 'return False'
1399      <-----Source: line: 'return False'
1399     <------While: line: 'return False'
1399    <-------Source: line: 'return False'
1399   <--------Function: line: 'return False'
1399  <---------Source: line: 'return False'
1399 <----------Class: line: 'return False'
1399<-----------Source: line: 'return False'
1400           InstructionFlow: end-gen
1400          Source: end-gen
1400          If: end: 'block-if'
1400        <-Source: end: 'block-if'
1400       <--While: end: 'block-if'
1400      <---Source: end: 'block-if'
1400     <----While: end: 'block-if'
1400    <-----Source: end: 'block-if'
1400   <------Function: end: 'block-if'
1400  <-------Source: end: 'block-if'
1400 <--------Class: end: 'block-if'
1400<---------Source: end: 'block-if'
1400         If: end-gen
1400        Source: end-gen
1400        While: end: 'block-while'
1400      <-Source: end: 'block-while'
1400     <--While: end: 'block-while'
1400    <---Source: end: 'block-while'
1400   <----Function: end: 'block-while'
1400  <-----Source: end: 'block-while'
1400 <------Class: end: 'block-while'
1400<-------Source: end: 'block-while'
1400       While: end-gen
1400       If: begin-gen
1400        Expression: begin-gen
1400         Parentheses: begin-gen
1400          Parentheses: expr: '('
1400        <-Expression: expr: '('
1400          Member: begin-gen
1400           Identifier: begin-gen
1400            Identifier: expr: 'qryClientes'
1400           Identifier: end-gen
1400           FunctionCall: begin-gen
1400            Value: begin-gen
1400             Constant: begin-gen
1400              Constant: ctype: 'String' -> 'contacto'
1400              Constant: expr: 'u"contacto"'
1400            <-Value: expr: 'u"contacto"'
1400             Constant: end-gen
1400            Value: end-gen
1400            FunctionCall: expr: 'value(u"contacto")'
1400           FunctionCall: end-gen
1400           Member: expr: 'qryClientes.value(u"contacto")'
1400         <-Parentheses: expr: 'qryClientes.value(u"contacto")'
1400        <--Expression: expr: 'qryClientes.value(u"contacto")'
1400          Member: end-gen
1400          Compare: begin-gen
1400           Compare: expr: 'and'
1400         <-Parentheses: expr: 'and'
1400        <--Expression: expr: 'and'
1400          Compare: end-gen
1400          Member: begin-gen
1400           Identifier: begin-gen
1400            Identifier: expr: 'qryClientes'
1400           Identifier: end-gen
1400           FunctionCall: begin-gen
1400            Value: begin-gen
1400             Constant: begin-gen
1400              Constant: ctype: 'String' -> 'contacto'
1400              Constant: expr: 'u"contacto"'
1400            <-Value: expr: 'u"contacto"'
1400             Constant: end-gen
1400            Value: end-gen
1400            FunctionCall: expr: 'value(u"contacto")'
1400           FunctionCall: end-gen
1400           Member: expr: 'qryClientes.value(u"contacto")'
1400         <-Parentheses: expr: 'qryClientes.value(u"contacto")'
1400        <--Expression: expr: 'qryClientes.value(u"contacto")'
1400          Member: end-gen
1400          Compare: begin-gen
1400           Compare: expr: '!='
1400         <-Parentheses: expr: '!='
1400        <--Expression: expr: '!='
1400          Compare: end-gen
1400          Constant: begin-gen
1400           Constant: ctype: 'String' -> ''
1400           Constant: expr: 'u""'
1400         <-Parentheses: expr: 'u""'
1400        <--Expression: expr: 'u""'
1400          Constant: end-gen
1400          Parentheses: expr: ')'
1400        <-Expression: expr: ')'
1400         Parentheses: end-gen
1400         Compare: begin-gen
1400          Compare: expr: 'and'
1400        <-Expression: expr: 'and'
1400         Compare: end-gen
1400         Parentheses: begin-gen
1400          Parentheses: expr: '('
1400        <-Expression: expr: '('
1400          OpUnary: begin-gen
1400           OpUnary: expr: 'not'
1400         <-Parentheses: expr: 'not'
1400        <--Expression: expr: 'not'
1400           Member: begin-gen
1400            Identifier: begin-gen
1400             Identifier: expr: 'qryClientes'
1400            Identifier: end-gen
1400            FunctionCall: begin-gen
1400             Value: begin-gen
1400              Constant: begin-gen
1400               Constant: ctype: 'String' -> 'codcontacto'
1400               Constant: expr: 'u"codcontacto"'
1400             <-Value: expr: 'u"codcontacto"'
1400              Constant: end-gen
1400             Value: end-gen
1400             FunctionCall: expr: 'value(u"codcontacto")'
1400            FunctionCall: end-gen
1400            Member: expr: 'qryClientes.value(u"codcontacto")'
1400          <-OpUnary: expr: 'qryClientes.value(u"codcontacto")'
1400         <--Parentheses: expr: 'qryClientes.value(u"codcontacto")'
1400        <---Expression: expr: 'qryClientes.value(u"codcontacto")'
1400           Member: end-gen
1400          OpUnary: end-gen
1400          Compare: begin-gen
1400           Compare: expr: 'or'
1400         <-Parentheses: expr: 'or'
1400        <--Expression: expr: 'or'
1400          Compare: end-gen
1400          Member: begin-gen
1400           Identifier: begin-gen
1400            Identifier: expr: 'qryClientes'
1400           Identifier: end-gen
1400           FunctionCall: begin-gen
1400            Value: begin-gen
1400             Constant: begin-gen
1400              Constant: ctype: 'String' -> 'codcontacto'
1400              Constant: expr: 'u"codcontacto"'
1400            <-Value: expr: 'u"codcontacto"'
1400             Constant: end-gen
1400            Value: end-gen
1400            FunctionCall: expr: 'value(u"codcontacto")'
1400           FunctionCall: end-gen
1400           Member: expr: 'qryClientes.value(u"codcontacto")'
1400         <-Parentheses: expr: 'qryClientes.value(u"codcontacto")'
1400        <--Expression: expr: 'qryClientes.value(u"codcontacto")'
1400          Member: end-gen
1400          Compare: begin-gen
1400           Compare: expr: '=='
1400         <-Parentheses: expr: '=='
1400        <--Expression: expr: '=='
1400          Compare: end-gen
1400          Constant: begin-gen
1400           Constant: ctype: 'String' -> ''
1400           Constant: expr: 'u""'
1400         <-Parentheses: expr: 'u""'
1400        <--Expression: expr: 'u""'
1400          Constant: end-gen
1400          Parentheses: expr: ')'
1400        <-Expression: expr: ')'
1400         Parentheses: end-gen
1400        Expression: end-gen
1400        If: line: 'if ( qryClientes.value(u"contacto") and qryClientes.value(u"contacto") != u"" ) and ( not qryClientes.value(u"codcontacto") or qryClientes.value(u"codcontacto") == u"" ):'
1400      <-Source: line: 'if ( qryClientes.value(u"contacto") and qryClientes.value(u"contacto") != u"" ) and ( not qryClientes.value(u"codcontacto") or qryClientes.value(u"codcontacto") == u"" ):'
1400     <--While: line: 'if ( qryClientes.value(u"contacto") and qryClientes.value(u"contacto") != u"" ) and ( not qryClientes.value(u"codcontacto") or qryClientes.value(u"codcontacto") == u"" ):'
1400    <---Source: line: 'if ( qryClientes.value(u"contacto") and qryClientes.value(u"contacto") != u"" ) and ( not qryClientes.value(u"codcontacto") or qryClientes.value(u"codcontacto") == u"" ):'
1400   <----Function: line: 'if ( qryClientes.value(u"contacto") and qryClientes.value(u"contacto") != u"" ) and ( not qryClientes.value(u"codcontacto") or qryClientes.value(u"codcontacto") == u"" ):'
1400  <-----Source: line: 'if ( qryClientes.value(u"contacto") and qryClientes.value(u"contacto") != u"" ) and ( not qryClientes.value(u"codcontacto") or qryClientes.value(u"codcontacto") == u"" ):'
1400 <------Class: line: 'if ( qryClientes.value(u"contacto") and qryClientes.value(u"contacto") != u"" ) and ( not qryClientes.value(u"codcontacto") or qryClientes.value(u"codcontacto") == u"" ):'
1400<-------Source: line: 'if ( qryClientes.value(u"contacto") and qryClientes.value(u"contacto") != u"" ) and ( not qryClientes.value(u"codcontacto") or qryClientes.value(u"codcontacto") == u"" ):'
1402        If: begin: 'block-if'
1402      <-Source: begin: 'block-if'
1402     <--While: begin: 'block-if'
1402    <---Source: begin: 'block-if'
1402   <----Function: begin: 'block-if'
1402  <-----Source: begin: 'block-if'
1402 <------Class: begin: 'block-if'
1402<-------Source: begin: 'block-if'
1402        Source: begin-gen
1402         InstructionUpdate: begin-gen
1402          Identifier: begin-gen
1402           Identifier: expr: 'codContacto'
1402          Identifier: end-gen
1402          OpUpdate: begin-gen
1402           OpUpdate: expr: '='
1402          OpUpdate: end-gen
1402          Value: begin-gen
1402           Member: begin-gen
1402            Identifier: begin-gen
1402             Identifier: expr: 'util'
1402            Identifier: end-gen
1402            FunctionCall: begin-gen
1402             Value: begin-gen
1402              Constant: begin-gen
1402               Constant: ctype: 'String' -> 'crm_contactos'
1402               Constant: expr: 'u"crm_contactos"'
1402             <-Value: expr: 'u"crm_contactos"'
1402              Constant: end-gen
1402             Value: end-gen
1402             Value: begin-gen
1402              Constant: begin-gen
1402               Constant: ctype: 'String' -> 'codcontacto'
1402               Constant: expr: 'u"codcontacto"'
1402             <-Value: expr: 'u"codcontacto"'
1402              Constant: end-gen
1402             Value: end-gen
1402             Expression: begin-gen
1402              Expression: expr: 'ustr('
1402              Constant: begin-gen
1402               Constant: ctype: 'String' -> "nombre = '"
1402               Constant: expr: 'u"nombre = \'"'
1402             <-Expression: expr: 'u"nombre = \'"'
1402              Constant: end-gen
1402              Expression: expr: ','
1402              Member: begin-gen
1402               Identifier: begin-gen
1402                Identifier: expr: 'self'
1402               Identifier: end-gen
1402               Identifier: begin-gen
1402                Identifier: expr: 'iface'
1402               Identifier: end-gen
1402               FunctionCall: begin-gen
1402                Value: begin-gen
1402                 Member: begin-gen
1402                  Identifier: begin-gen
1402                   Identifier: expr: 'qryClientes'
1402                  Identifier: end-gen
1402                  FunctionCall: begin-gen
1402                   Value: begin-gen
1402                    Constant: begin-gen
1402                     Constant: ctype: 'String' -> 'contacto'
1402                     Constant: expr: 'u"contacto"'
1402                   <-Value: expr: 'u"contacto"'
1402                    Constant: end-gen
1402                   Value: end-gen
1402                   FunctionCall: expr: 'value(u"contacto")'
1402                  FunctionCall: end-gen
1402                  Member: expr: 'qryClientes.value(u"contacto")'
1402                <-Value: expr: 'qryClientes.value(u"contacto")'
1402                 Member: end-gen
1402                Value: end-gen
1402                FunctionCall: expr: 'escapeQuote(qryClientes.value(u"contacto"))'
1402               FunctionCall: end-gen
1402               Member: expr: 'self.iface.escapeQuote(qryClientes.value(u"contacto"))'
1402             <-Expression: expr: 'self.iface.escapeQuote(qryClientes.value(u"contacto"))'
1402              Member: end-gen
1402              Expression: expr: ','
1402              Constant: begin-gen
1402               Constant: ctype: 'String' -> "'"
1402               Constant: expr: 'u"\'"'
1402             <-Expression: expr: 'u"\'"'
1402              Constant: end-gen
1402              Expression: expr: ')'
1402             Expression: end-gen
1402             FunctionCall: expr: 'sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , self.iface.escapeQuote(qryClientes.value(u"contacto")) , u"\'" ))'
1402            FunctionCall: end-gen
1402            Member: expr: 'util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , self.iface.escapeQuote(qryClientes.value(u"contacto")) , u"\'" ))'
1402          <-Value: expr: 'util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , self.iface.escapeQuote(qryClientes.value(u"contacto")) , u"\'" ))'
1402           Member: end-gen
1402          Value: end-gen
1402          InstructionUpdate: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , self.iface.escapeQuote(qryClientes.value(u"contacto")) , u"\'" ))'
1402        <-Source: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , self.iface.escapeQuote(qryClientes.value(u"contacto")) , u"\'" ))'
1402       <--If: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , self.iface.escapeQuote(qryClientes.value(u"contacto")) , u"\'" ))'
1402      <---Source: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , self.iface.escapeQuote(qryClientes.value(u"contacto")) , u"\'" ))'
1402     <----While: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , self.iface.escapeQuote(qryClientes.value(u"contacto")) , u"\'" ))'
1402    <-----Source: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , self.iface.escapeQuote(qryClientes.value(u"contacto")) , u"\'" ))'
1402   <------Function: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , self.iface.escapeQuote(qryClientes.value(u"contacto")) , u"\'" ))'
1402  <-------Source: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , self.iface.escapeQuote(qryClientes.value(u"contacto")) , u"\'" ))'
1402 <--------Class: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , self.iface.escapeQuote(qryClientes.value(u"contacto")) , u"\'" ))'
1402<---------Source: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , self.iface.escapeQuote(qryClientes.value(u"contacto")) , u"\'" ))'
1403         InstructionUpdate: end-gen
1403         If: begin-gen
1403          Value: begin-gen
1403           Identifier: begin-gen
1403            Identifier: expr: 'codContacto'
1403          <-Value: expr: 'codContacto'
1403           Identifier: end-gen
1403          Value: end-gen
1403          If: line: 'if codContacto:'
1403        <-Source: line: 'if codContacto:'
1403       <--If: line: 'if codContacto:'
1403      <---Source: line: 'if codContacto:'
1403     <----While: line: 'if codContacto:'
1403    <-----Source: line: 'if codContacto:'
1403   <------Function: line: 'if codContacto:'
1403  <-------Source: line: 'if codContacto:'
1403 <--------Class: line: 'if codContacto:'
1403<---------Source: line: 'if codContacto:'
1404          If: begin: 'block-if'
1404        <-Source: begin: 'block-if'
1404       <--If: begin: 'block-if'
1404      <---Source: begin: 'block-if'
1404     <----While: begin: 'block-if'
1404    <-----Source: begin: 'block-if'
1404   <------Function: begin: 'block-if'
1404  <-------Source: begin: 'block-if'
1404 <--------Class: begin: 'block-if'
1404<---------Source: begin: 'block-if'
1404          Source: begin-gen
1404           InstructionCall: begin-gen
1404            Member: begin-gen
1404             Identifier: begin-gen
1404              Identifier: expr: 'self'
1404             Identifier: end-gen
1404             Identifier: begin-gen
1404              Identifier: expr: 'iface'
1404             Identifier: end-gen
1404             FunctionCall: begin-gen
1404              Value: begin-gen
1404               Identifier: begin-gen
1404                Identifier: expr: 'codCliente'
1404              <-Value: expr: 'codCliente'
1404               Identifier: end-gen
1404              Value: end-gen
1404              Value: begin-gen
1404               Identifier: begin-gen
1404                Identifier: expr: 'codContacto'
1404              <-Value: expr: 'codContacto'
1404               Identifier: end-gen
1404              Value: end-gen
1404              Value: begin-gen
1404               Member: begin-gen
1404                Identifier: begin-gen
1404                 Identifier: expr: 'qryClientes'
1404                Identifier: end-gen
1404                FunctionCall: begin-gen
1404                 Value: begin-gen
1404                  Constant: begin-gen
1404                   Constant: ctype: 'String' -> 'contacto'
1404                   Constant: expr: 'u"contacto"'
1404                 <-Value: expr: 'u"contacto"'
1404                  Constant: end-gen
1404                 Value: end-gen
1404                 FunctionCall: expr: 'value(u"contacto")'
1404                FunctionCall: end-gen
1404                Member: expr: 'qryClientes.value(u"contacto")'
1404              <-Value: expr: 'qryClientes.value(u"contacto")'
1404               Member: end-gen
1404              Value: end-gen
1404              FunctionCall: expr: 'actualizarContactosDeAgenda20070525(codCliente, codContacto, qryClientes.value(u"contacto"))'
1404             FunctionCall: end-gen
1404             Member: expr: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, qryClientes.value(u"contacto"))'
1404            Member: end-gen
1404            InstructionCall: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, qryClientes.value(u"contacto"))'
1404          <-Source: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, qryClientes.value(u"contacto"))'
1404         <--If: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, qryClientes.value(u"contacto"))'
1404        <---Source: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, qryClientes.value(u"contacto"))'
1404       <----If: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, qryClientes.value(u"contacto"))'
1404      <-----Source: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, qryClientes.value(u"contacto"))'
1404     <------While: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, qryClientes.value(u"contacto"))'
1404    <-------Source: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, qryClientes.value(u"contacto"))'
1404   <--------Function: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, qryClientes.value(u"contacto"))'
1404  <---------Source: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, qryClientes.value(u"contacto"))'
1404 <----------Class: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, qryClientes.value(u"contacto"))'
1404<-----------Source: line: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, codContacto, qryClientes.value(u"contacto"))'
1405           InstructionCall: end-gen
1405          Source: end-gen
1405          If: end: 'block-if'
1405        <-Source: end: 'block-if'
1405       <--If: end: 'block-if'
1405      <---Source: end: 'block-if'
1405     <----While: end: 'block-if'
1405    <-----Source: end: 'block-if'
1405   <------Function: end: 'block-if'
1405  <-------Source: end: 'block-if'
1405 <--------Class: end: 'block-if'
1405<---------Source: end: 'block-if'
1405          If: line: 'else:'
1405        <-Source: line: 'else:'
1405       <--If: line: 'else:'
1405      <---Source: line: 'else:'
1405     <----While: line: 'else:'
1405    <-----Source: line: 'else:'
1405   <------Function: line: 'else:'
1405  <-------Source: line: 'else:'
1405 <--------Class: line: 'else:'
1405<---------Source: line: 'else:'
1406          If: begin: 'block-else'
1406        <-Source: begin: 'block-else'
1406       <--If: begin: 'block-else'
1406      <---Source: begin: 'block-else'
1406     <----While: begin: 'block-else'
1406    <-----Source: begin: 'block-else'
1406   <------Function: begin: 'block-else'
1406  <-------Source: begin: 'block-else'
1406 <--------Class: begin: 'block-else'
1406<---------Source: begin: 'block-else'
1406          Source: begin-gen
1406           InstructionUpdate: begin-gen
1406            Identifier: begin-gen
1406             Identifier: expr: 'codContacto'
1406            Identifier: end-gen
1406            OpUpdate: begin-gen
1406             OpUpdate: expr: '='
1406            OpUpdate: end-gen
1406            Value: begin-gen
1406             Member: begin-gen
1406              Identifier: begin-gen
1406               Identifier: expr: 'self'
1406              Identifier: end-gen
1406              Identifier: begin-gen
1406               Identifier: expr: 'iface'
1406              Identifier: end-gen
1406              FunctionCall: begin-gen
1406               Value: begin-gen
1406                Identifier: begin-gen
1406                 Identifier: expr: 'codCliente'
1406               <-Value: expr: 'codCliente'
1406                Identifier: end-gen
1406               Value: end-gen
1406               Value: begin-gen
1406                Constant: begin-gen
1406                 Constant: ctype: 'String' -> ''
1406                 Constant: expr: 'u""'
1406               <-Value: expr: 'u""'
1406                Constant: end-gen
1406               Value: end-gen
1406               Value: begin-gen
1406                Member: begin-gen
1406                 Identifier: begin-gen
1406                  Identifier: expr: 'qryClientes'
1406                 Identifier: end-gen
1406                 FunctionCall: begin-gen
1406                  Value: begin-gen
1406                   Constant: begin-gen
1406                    Constant: ctype: 'String' -> 'contacto'
1406                    Constant: expr: 'u"contacto"'
1406                  <-Value: expr: 'u"contacto"'
1406                   Constant: end-gen
1406                  Value: end-gen
1406                  FunctionCall: expr: 'value(u"contacto")'
1406                 FunctionCall: end-gen
1406                 Member: expr: 'qryClientes.value(u"contacto")'
1406               <-Value: expr: 'qryClientes.value(u"contacto")'
1406                Member: end-gen
1406               Value: end-gen
1406               FunctionCall: expr: 'actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1406              FunctionCall: end-gen
1406              Member: expr: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1406            <-Value: expr: 'self.iface.actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1406             Member: end-gen
1406            Value: end-gen
1406            InstructionUpdate: line: 'codContacto = self.iface.actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1406          <-Source: line: 'codContacto = self.iface.actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1406         <--If: line: 'codContacto = self.iface.actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1406        <---Source: line: 'codContacto = self.iface.actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1406       <----If: line: 'codContacto = self.iface.actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1406      <-----Source: line: 'codContacto = self.iface.actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1406     <------While: line: 'codContacto = self.iface.actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1406    <-------Source: line: 'codContacto = self.iface.actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1406   <--------Function: line: 'codContacto = self.iface.actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1406  <---------Source: line: 'codContacto = self.iface.actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1406 <----------Class: line: 'codContacto = self.iface.actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1406<-----------Source: line: 'codContacto = self.iface.actualizarContactosDeAgenda20070525(codCliente, u"", qryClientes.value(u"contacto"))'
1407           InstructionUpdate: end-gen
1407          Source: end-gen
1407          If: end: 'block-else'
1407        <-Source: end: 'block-else'
1407       <--If: end: 'block-else'
1407      <---Source: end: 'block-else'
1407     <----While: end: 'block-else'
1407    <-----Source: end: 'block-else'
1407   <------Function: end: 'block-else'
1407  <-------Source: end: 'block-else'
1407 <--------Class: end: 'block-else'
1407<---------Source: end: 'block-else'
1408         If: end-gen
1408         If: begin-gen
1408          Value: begin-gen
1408           OpUnary: begin-gen
1408            OpUnary: expr: 'not'
1408          <-Value: expr: 'not'
1408            Identifier: begin-gen
1408             Identifier: expr: 'codContacto'
1408           <-OpUnary: expr: 'codContacto'
1408          <--Value: expr: 'codContacto'
1408            Identifier: end-gen
1408           OpUnary: end-gen
1408          Value: end-gen
1408          If: line: 'if not codContacto:'
1408        <-Source: line: 'if not codContacto:'
1408       <--If: line: 'if not codContacto:'
1408      <---Source: line: 'if not codContacto:'
1408     <----While: line: 'if not codContacto:'
1408    <-----Source: line: 'if not codContacto:'
1408   <------Function: line: 'if not codContacto:'
1408  <-------Source: line: 'if not codContacto:'
1408 <--------Class: line: 'if not codContacto:'
1408<---------Source: line: 'if not codContacto:'
1409          If: begin: 'block-if'
1409        <-Source: begin: 'block-if'
1409       <--If: begin: 'block-if'
1409      <---Source: begin: 'block-if'
1409     <----While: begin: 'block-if'
1409    <-----Source: begin: 'block-if'
1409   <------Function: begin: 'block-if'
1409  <-------Source: begin: 'block-if'
1409 <--------Class: begin: 'block-if'
1409<---------Source: begin: 'block-if'
1409          Source: begin-gen
1409           InstructionCall: begin-gen
1409            Member: begin-gen
1409             Identifier: begin-gen
1409              Identifier: expr: 'util'
1409             Identifier: end-gen
1409             FunctionCall: begin-gen
1409              FunctionCall: expr: 'destroyProgressDialog()'
1409             FunctionCall: end-gen
1409             Member: expr: 'util.destroyProgressDialog()'
1409            Member: end-gen
1409            InstructionCall: line: 'util.destroyProgressDialog()'
1409          <-Source: line: 'util.destroyProgressDialog()'
1409         <--If: line: 'util.destroyProgressDialog()'
1409        <---Source: line: 'util.destroyProgressDialog()'
1409       <----If: line: 'util.destroyProgressDialog()'
1409      <-----Source: line: 'util.destroyProgressDialog()'
1409     <------While: line: 'util.destroyProgressDialog()'
1409    <-------Source: line: 'util.destroyProgressDialog()'
1409   <--------Function: line: 'util.destroyProgressDialog()'
1409  <---------Source: line: 'util.destroyProgressDialog()'
1409 <----------Class: line: 'util.destroyProgressDialog()'
1409<-----------Source: line: 'util.destroyProgressDialog()'
1410           InstructionCall: end-gen
1410           InstructionFlow: begin-gen
1410            Value: begin-gen
1410             Identifier: begin-gen
1410              Identifier: expr: 'False'
1410            <-Value: expr: 'False'
1410             Identifier: end-gen
1410            Value: end-gen
1410            InstructionFlow: line: 'return False'
1410          <-Source: line: 'return False'
1410         <--If: line: 'return False'
1410        <---Source: line: 'return False'
1410       <----If: line: 'return False'
1410      <-----Source: line: 'return False'
1410     <------While: line: 'return False'
1410    <-------Source: line: 'return False'
1410   <--------Function: line: 'return False'
1410  <---------Source: line: 'return False'
1410 <----------Class: line: 'return False'
1410<-----------Source: line: 'return False'
1411           InstructionFlow: end-gen
1411          Source: end-gen
1411          If: end: 'block-if'
1411        <-Source: end: 'block-if'
1411       <--If: end: 'block-if'
1411      <---Source: end: 'block-if'
1411     <----While: end: 'block-if'
1411    <-----Source: end: 'block-if'
1411   <------Function: end: 'block-if'
1411  <-------Source: end: 'block-if'
1411 <--------Class: end: 'block-if'
1411<---------Source: end: 'block-if'
1411         If: end-gen
1411         DeclarationBlock: begin-gen
1411          Variable: begin-gen
1411           Variable: expr: 'curCliente'
1411           Variable: expr: '='
1411           Value: begin-gen
1411            New: begin-gen
1411             FunctionCall: begin-gen
1411              Value: begin-gen
1411               Constant: begin-gen
1411                Constant: ctype: 'String' -> 'clientes'
1411                Constant: expr: 'u"clientes"'
1411              <-Value: expr: 'u"clientes"'
1411               Constant: end-gen
1411              Value: end-gen
1411              FunctionCall: expr: 'FLSqlCursor(u"clientes")'
1411            <-New: expr: 'qsatype.FLSqlCursor(u"clientes")'
1411           <--Value: expr: 'qsatype.FLSqlCursor(u"clientes")'
1411          <---Variable: expr: 'qsatype.FLSqlCursor(u"clientes")'
1411             FunctionCall: end-gen
1411            New: end-gen
1411           Value: end-gen
1411          Variable: end-gen
1411          DeclarationBlock: line: 'curCliente = qsatype.FLSqlCursor(u"clientes")'
1411        <-Source: line: 'curCliente = qsatype.FLSqlCursor(u"clientes")'
1411       <--If: line: 'curCliente = qsatype.FLSqlCursor(u"clientes")'
1411      <---Source: line: 'curCliente = qsatype.FLSqlCursor(u"clientes")'
1411     <----While: line: 'curCliente = qsatype.FLSqlCursor(u"clientes")'
1411    <-----Source: line: 'curCliente = qsatype.FLSqlCursor(u"clientes")'
1411   <------Function: line: 'curCliente = qsatype.FLSqlCursor(u"clientes")'
1411  <-------Source: line: 'curCliente = qsatype.FLSqlCursor(u"clientes")'
1411 <--------Class: line: 'curCliente = qsatype.FLSqlCursor(u"clientes")'
1411<---------Source: line: 'curCliente = qsatype.FLSqlCursor(u"clientes")'
1412         DeclarationBlock: end-gen
1412         InstructionCall: begin-gen
1412          Member: begin-gen
1412           Identifier: begin-gen
1412            Identifier: expr: 'curCliente'
1412           Identifier: end-gen
1412           FunctionCall: begin-gen
1412            Expression: begin-gen
1412             Expression: expr: 'ustr('
1412             Constant: begin-gen
1412              Constant: ctype: 'String' -> "codcliente = '"
1412              Constant: expr: 'u"codcliente = \'"'
1412            <-Expression: expr: 'u"codcliente = \'"'
1412             Constant: end-gen
1412             Expression: expr: ','
1412             Identifier: begin-gen
1412              Identifier: expr: 'codCliente'
1412            <-Expression: expr: 'codCliente'
1412             Identifier: end-gen
1412             Expression: expr: ','
1412             Constant: begin-gen
1412              Constant: ctype: 'String' -> "'"
1412              Constant: expr: 'u"\'"'
1412            <-Expression: expr: 'u"\'"'
1412             Constant: end-gen
1412             Expression: expr: ')'
1412            Expression: end-gen
1412            FunctionCall: expr: 'select(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1412           FunctionCall: end-gen
1412           Member: expr: 'curCliente.select(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1412          Member: end-gen
1412          InstructionCall: line: 'curCliente.select(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1412        <-Source: line: 'curCliente.select(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1412       <--If: line: 'curCliente.select(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1412      <---Source: line: 'curCliente.select(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1412     <----While: line: 'curCliente.select(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1412    <-----Source: line: 'curCliente.select(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1412   <------Function: line: 'curCliente.select(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1412  <-------Source: line: 'curCliente.select(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1412 <--------Class: line: 'curCliente.select(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1412<---------Source: line: 'curCliente.select(ustr( u"codcliente = \'" , codCliente , u"\'" ))'
1413         InstructionCall: end-gen
1413         InstructionCall: begin-gen
1413          Member: begin-gen
1413           Identifier: begin-gen
1413            Identifier: expr: 'curCliente'
1413           Identifier: end-gen
1413           FunctionCall: begin-gen
1413            Value: begin-gen
1413             Member: begin-gen
1413              Identifier: begin-gen
1413               Identifier: expr: 'curCliente'
1413              Identifier: end-gen
1413              Identifier: begin-gen
1413               Identifier: expr: 'Edit'
1413              Identifier: end-gen
1413              Member: expr: 'curCliente.Edit'
1413            <-Value: expr: 'curCliente.Edit'
1413             Member: end-gen
1413            Value: end-gen
1413            FunctionCall: expr: 'setModeAccess(curCliente.Edit)'
1413           FunctionCall: end-gen
1413           Member: expr: 'curCliente.setModeAccess(curCliente.Edit)'
1413          Member: end-gen
1413          InstructionCall: line: 'curCliente.setModeAccess(curCliente.Edit)'
1413        <-Source: line: 'curCliente.setModeAccess(curCliente.Edit)'
1413       <--If: line: 'curCliente.setModeAccess(curCliente.Edit)'
1413      <---Source: line: 'curCliente.setModeAccess(curCliente.Edit)'
1413     <----While: line: 'curCliente.setModeAccess(curCliente.Edit)'
1413    <-----Source: line: 'curCliente.setModeAccess(curCliente.Edit)'
1413   <------Function: line: 'curCliente.setModeAccess(curCliente.Edit)'
1413  <-------Source: line: 'curCliente.setModeAccess(curCliente.Edit)'
1413 <--------Class: line: 'curCliente.setModeAccess(curCliente.Edit)'
1413<---------Source: line: 'curCliente.setModeAccess(curCliente.Edit)'
1414         InstructionCall: end-gen
1414         If: begin-gen
1414          Value: begin-gen
1414           OpUnary: begin-gen
1414            OpUnary: expr: 'not'
1414          <-Value: expr: 'not'
1414            Member: begin-gen
1414             Identifier: begin-gen
1414              Identifier: expr: 'curCliente'
1414             Identifier: end-gen
1414             FunctionCall: begin-gen
1414              FunctionCall: expr: 'first()'
1414             FunctionCall: end-gen
1414             Member: expr: 'curCliente.first()'
1414           <-OpUnary: expr: 'curCliente.first()'
1414          <--Value: expr: 'curCliente.first()'
1414            Member: end-gen
1414           OpUnary: end-gen
1414          Value: end-gen
1414          If: line: 'if not curCliente.first():'
1414        <-Source: line: 'if not curCliente.first():'
1414       <--If: line: 'if not curCliente.first():'
1414      <---Source: line: 'if not curCliente.first():'
1414     <----While: line: 'if not curCliente.first():'
1414    <-----Source: line: 'if not curCliente.first():'
1414   <------Function: line: 'if not curCliente.first():'
1414  <-------Source: line: 'if not curCliente.first():'
1414 <--------Class: line: 'if not curCliente.first():'
1414<---------Source: line: 'if not curCliente.first():'
1415          If: begin: 'block-if'
1415        <-Source: begin: 'block-if'
1415       <--If: begin: 'block-if'
1415      <---Source: begin: 'block-if'
1415     <----While: begin: 'block-if'
1415    <-----Source: begin: 'block-if'
1415   <------Function: begin: 'block-if'
1415  <-------Source: begin: 'block-if'
1415 <--------Class: begin: 'block-if'
1415<---------Source: begin: 'block-if'
1415          Source: begin-gen
1415           InstructionCall: begin-gen
1415            Member: begin-gen
1415             Identifier: begin-gen
1415              Identifier: expr: 'util'
1415             Identifier: end-gen
1415             FunctionCall: begin-gen
1415              FunctionCall: expr: 'destroyProgressDialog()'
1415             FunctionCall: end-gen
1415             Member: expr: 'util.destroyProgressDialog()'
1415            Member: end-gen
1415            InstructionCall: line: 'util.destroyProgressDialog()'
1415          <-Source: line: 'util.destroyProgressDialog()'
1415         <--If: line: 'util.destroyProgressDialog()'
1415        <---Source: line: 'util.destroyProgressDialog()'
1415       <----If: line: 'util.destroyProgressDialog()'
1415      <-----Source: line: 'util.destroyProgressDialog()'
1415     <------While: line: 'util.destroyProgressDialog()'
1415    <-------Source: line: 'util.destroyProgressDialog()'
1415   <--------Function: line: 'util.destroyProgressDialog()'
1415  <---------Source: line: 'util.destroyProgressDialog()'
1415 <----------Class: line: 'util.destroyProgressDialog()'
1415<-----------Source: line: 'util.destroyProgressDialog()'
1416           InstructionCall: end-gen
1416           InstructionFlow: begin-gen
1416            Value: begin-gen
1416             Identifier: begin-gen
1416              Identifier: expr: 'False'
1416            <-Value: expr: 'False'
1416             Identifier: end-gen
1416            Value: end-gen
1416            InstructionFlow: line: 'return False'
1416          <-Source: line: 'return False'
1416         <--If: line: 'return False'
1416        <---Source: line: 'return False'
1416       <----If: line: 'return False'
1416      <-----Source: line: 'return False'
1416     <------While: line: 'return False'
1416    <-------Source: line: 'return False'
1416   <--------Function: line: 'return False'
1416  <---------Source: line: 'return False'
1416 <----------Class: line: 'return False'
1416<-----------Source: line: 'return False'
1417           InstructionFlow: end-gen
1417          Source: end-gen
1417          If: end: 'block-if'
1417        <-Source: end: 'block-if'
1417       <--If: end: 'block-if'
1417      <---Source: end: 'block-if'
1417     <----While: end: 'block-if'
1417    <-----Source: end: 'block-if'
1417   <------Function: end: 'block-if'
1417  <-------Source: end: 'block-if'
1417 <--------Class: end: 'block-if'
1417<---------Source: end: 'block-if'
1417         If: end-gen
1417         InstructionCall: begin-gen
1417          Member: begin-gen
1417           Identifier: begin-gen
1417            Identifier: expr: 'curCliente'
1417           Identifier: end-gen
1417           FunctionCall: begin-gen
1417            FunctionCall: expr: 'refreshBuffer()'
1417           FunctionCall: end-gen
1417           Member: expr: 'curCliente.refreshBuffer()'
1417          Member: end-gen
1417          InstructionCall: line: 'curCliente.refreshBuffer()'
1417        <-Source: line: 'curCliente.refreshBuffer()'
1417       <--If: line: 'curCliente.refreshBuffer()'
1417      <---Source: line: 'curCliente.refreshBuffer()'
1417     <----While: line: 'curCliente.refreshBuffer()'
1417    <-----Source: line: 'curCliente.refreshBuffer()'
1417   <------Function: line: 'curCliente.refreshBuffer()'
1417  <-------Source: line: 'curCliente.refreshBuffer()'
1417 <--------Class: line: 'curCliente.refreshBuffer()'
1417<---------Source: line: 'curCliente.refreshBuffer()'
1418         InstructionCall: end-gen
1418         InstructionCall: begin-gen
1418          Member: begin-gen
1418           Identifier: begin-gen
1418            Identifier: expr: 'curCliente'
1418           Identifier: end-gen
1418           FunctionCall: begin-gen
1418            Value: begin-gen
1418             Constant: begin-gen
1418              Constant: ctype: 'String' -> 'codcontacto'
1418              Constant: expr: 'u"codcontacto"'
1418            <-Value: expr: 'u"codcontacto"'
1418             Constant: end-gen
1418            Value: end-gen
1418            Value: begin-gen
1418             Identifier: begin-gen
1418              Identifier: expr: 'codContacto'
1418            <-Value: expr: 'codContacto'
1418             Identifier: end-gen
1418            Value: end-gen
1418            FunctionCall: expr: 'setValueBuffer(u"codcontacto", codContacto)'
1418           FunctionCall: end-gen
1418           Member: expr: 'curCliente.setValueBuffer(u"codcontacto", codContacto)'
1418          Member: end-gen
1418          InstructionCall: line: 'curCliente.setValueBuffer(u"codcontacto", codContacto)'
1418        <-Source: line: 'curCliente.setValueBuffer(u"codcontacto", codContacto)'
1418       <--If: line: 'curCliente.setValueBuffer(u"codcontacto", codContacto)'
1418      <---Source: line: 'curCliente.setValueBuffer(u"codcontacto", codContacto)'
1418     <----While: line: 'curCliente.setValueBuffer(u"codcontacto", codContacto)'
1418    <-----Source: line: 'curCliente.setValueBuffer(u"codcontacto", codContacto)'
1418   <------Function: line: 'curCliente.setValueBuffer(u"codcontacto", codContacto)'
1418  <-------Source: line: 'curCliente.setValueBuffer(u"codcontacto", codContacto)'
1418 <--------Class: line: 'curCliente.setValueBuffer(u"codcontacto", codContacto)'
1418<---------Source: line: 'curCliente.setValueBuffer(u"codcontacto", codContacto)'
1419         InstructionCall: end-gen
1419         If: begin-gen
1419          Value: begin-gen
1419           OpUnary: begin-gen
1419            OpUnary: expr: 'not'
1419          <-Value: expr: 'not'
1419            Member: begin-gen
1419             Identifier: begin-gen
1419              Identifier: expr: 'curCliente'
1419             Identifier: end-gen
1419             FunctionCall: begin-gen
1419              FunctionCall: expr: 'commitBuffer()'
1419             FunctionCall: end-gen
1419             Member: expr: 'curCliente.commitBuffer()'
1419           <-OpUnary: expr: 'curCliente.commitBuffer()'
1419          <--Value: expr: 'curCliente.commitBuffer()'
1419            Member: end-gen
1419           OpUnary: end-gen
1419          Value: end-gen
1419          If: line: 'if not curCliente.commitBuffer():'
1419        <-Source: line: 'if not curCliente.commitBuffer():'
1419       <--If: line: 'if not curCliente.commitBuffer():'
1419      <---Source: line: 'if not curCliente.commitBuffer():'
1419     <----While: line: 'if not curCliente.commitBuffer():'
1419    <-----Source: line: 'if not curCliente.commitBuffer():'
1419   <------Function: line: 'if not curCliente.commitBuffer():'
1419  <-------Source: line: 'if not curCliente.commitBuffer():'
1419 <--------Class: line: 'if not curCliente.commitBuffer():'
1419<---------Source: line: 'if not curCliente.commitBuffer():'
1420          If: begin: 'block-if'
1420        <-Source: begin: 'block-if'
1420       <--If: begin: 'block-if'
1420      <---Source: begin: 'block-if'
1420     <----While: begin: 'block-if'
1420    <-----Source: begin: 'block-if'
1420   <------Function: begin: 'block-if'
1420  <-------Source: begin: 'block-if'
1420 <--------Class: begin: 'block-if'
1420<---------Source: begin: 'block-if'
1420          Source: begin-gen
1420           InstructionCall: begin-gen
1420            Member: begin-gen
1420             Identifier: begin-gen
1420              Identifier: expr: 'util'
1420             Identifier: end-gen
1420             FunctionCall: begin-gen
1420              FunctionCall: expr: 'destroyProgressDialog()'
1420             FunctionCall: end-gen
1420             Member: expr: 'util.destroyProgressDialog()'
1420            Member: end-gen
1420            InstructionCall: line: 'util.destroyProgressDialog()'
1420          <-Source: line: 'util.destroyProgressDialog()'
1420         <--If: line: 'util.destroyProgressDialog()'
1420        <---Source: line: 'util.destroyProgressDialog()'
1420       <----If: line: 'util.destroyProgressDialog()'
1420      <-----Source: line: 'util.destroyProgressDialog()'
1420     <------While: line: 'util.destroyProgressDialog()'
1420    <-------Source: line: 'util.destroyProgressDialog()'
1420   <--------Function: line: 'util.destroyProgressDialog()'
1420  <---------Source: line: 'util.destroyProgressDialog()'
1420 <----------Class: line: 'util.destroyProgressDialog()'
1420<-----------Source: line: 'util.destroyProgressDialog()'
1421           InstructionCall: end-gen
1421           InstructionFlow: begin-gen
1421            Value: begin-gen
1421             Identifier: begin-gen
1421              Identifier: expr: 'False'
1421            <-Value: expr: 'False'
1421             Identifier: end-gen
1421            Value: end-gen
1421            InstructionFlow: line: 'return False'
1421          <-Source: line: 'return False'
1421         <--If: line: 'return False'
1421        <---Source: line: 'return False'
1421       <----If: line: 'return False'
1421      <-----Source: line: 'return False'
1421     <------While: line: 'return False'
1421    <-------Source: line: 'return False'
1421   <--------Function: line: 'return False'
1421  <---------Source: line: 'return False'
1421 <----------Class: line: 'return False'
1421<-----------Source: line: 'return False'
1422           InstructionFlow: end-gen
1422          Source: end-gen
1422          If: end: 'block-if'
1422        <-Source: end: 'block-if'
1422       <--If: end: 'block-if'
1422      <---Source: end: 'block-if'
1422     <----While: end: 'block-if'
1422    <-----Source: end: 'block-if'
1422   <------Function: end: 'block-if'
1422  <-------Source: end: 'block-if'
1422 <--------Class: end: 'block-if'
1422<---------Source: end: 'block-if'
1422         If: end-gen
1422        Source: end-gen
1422        If: end: 'block-if'
1422      <-Source: end: 'block-if'
1422     <--While: end: 'block-if'
1422    <---Source: end: 'block-if'
1422   <----Function: end: 'block-if'
1422  <-----Source: end: 'block-if'
1422 <------Class: end: 'block-if'
1422<-------Source: end: 'block-if'
1422       If: end-gen
1422      Source: end-gen
1422      While: end: 'block-while'
1422    <-Source: end: 'block-while'
1422   <--Function: end: 'block-while'
1422  <---Source: end: 'block-while'
1422 <----Class: end: 'block-while'
1422<-----Source: end: 'block-while'
1422     While: end-gen
1422     InstructionCall: begin-gen
1422      Member: begin-gen
1422       Identifier: begin-gen
1422        Identifier: expr: 'util'
1422       Identifier: end-gen
1422       FunctionCall: begin-gen
1422        Value: begin-gen
1422         Member: begin-gen
1422          Identifier: begin-gen
1422           Identifier: expr: 'qryClientes'
1422          Identifier: end-gen
1422          FunctionCall: begin-gen
1422           FunctionCall: expr: 'size()'
1422          FunctionCall: end-gen
1422          Member: expr: 'qryClientes.size()'
1422        <-Value: expr: 'qryClientes.size()'
1422         Member: end-gen
1422        Value: end-gen
1422        FunctionCall: expr: 'setProgress(qryClientes.size())'
1422       FunctionCall: end-gen
1422       Member: expr: 'util.setProgress(qryClientes.size())'
1422      Member: end-gen
1422      InstructionCall: line: 'util.setProgress(qryClientes.size())'
1422    <-Source: line: 'util.setProgress(qryClientes.size())'
1422   <--Function: line: 'util.setProgress(qryClientes.size())'
1422  <---Source: line: 'util.setProgress(qryClientes.size())'
1422 <----Class: line: 'util.setProgress(qryClientes.size())'
1422<-----Source: line: 'util.setProgress(qryClientes.size())'
1424     InstructionCall: end-gen
1424     InstructionCall: begin-gen
1424      Member: begin-gen
1424       Identifier: begin-gen
1424        Identifier: expr: 'util'
1424       Identifier: end-gen
1424       FunctionCall: begin-gen
1424        FunctionCall: expr: 'destroyProgressDialog()'
1424       FunctionCall: end-gen
1424       Member: expr: 'util.destroyProgressDialog()'
1424      Member: end-gen
1424      InstructionCall: line: 'util.destroyProgressDialog()'
1424    <-Source: line: 'util.destroyProgressDialog()'
1424   <--Function: line: 'util.destroyProgressDialog()'
1424  <---Source: line: 'util.destroyProgressDialog()'
1424 <----Class: line: 'util.destroyProgressDialog()'
1424<-----Source: line: 'util.destroyProgressDialog()'
1425     InstructionCall: end-gen
1425     InstructionFlow: begin-gen
1425      Value: begin-gen
1425       Identifier: begin-gen
1425        Identifier: expr: 'True'
1425      <-Value: expr: 'True'
1425       Identifier: end-gen
1425      Value: end-gen
1425      InstructionFlow: line: 'return True'
1425    <-Source: line: 'return True'
1425   <--Function: line: 'return True'
1425  <---Source: line: 'return True'
1425 <----Class: line: 'return True'
1425<-----Source: line: 'return True'
1426     InstructionFlow: end-gen
1426    Source: end-gen
1426    Function: end: 'block-def-oficial_actualizarContactos20070525'
1426  <-Source: end: 'block-def-oficial_actualizarContactos20070525'
1426 <--Class: end: 'block-def-oficial_actualizarContactos20070525'
1426<---Source: end: 'block-def-oficial_actualizarContactos20070525'
1427   Function: end-gen
1427   Function: begin-gen
1427    Function: line: 'def oficial_actualizarContactosProv20070702(self):'
1427  <-Source: line: 'def oficial_actualizarContactosProv20070702(self):'
1427 <--Class: line: 'def oficial_actualizarContactosProv20070702(self):'
1427<---Source: line: 'def oficial_actualizarContactosProv20070702(self):'
1428    Function: begin: 'block-def-oficial_actualizarContactosProv20070702'
1428  <-Source: begin: 'block-def-oficial_actualizarContactosProv20070702'
1428 <--Class: begin: 'block-def-oficial_actualizarContactosProv20070702'
1428<---Source: begin: 'block-def-oficial_actualizarContactosProv20070702'
1428    Source: begin-gen
1428     DeclarationBlock: begin-gen
1428      Variable: begin-gen
1428       Variable: expr: 'util'
1428       Variable: expr: '='
1428       Variable: expr: 'qsatype.FLUtil()'
1428      Variable: end-gen
1428      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1428    <-Source: line: 'util = qsatype.FLUtil()'
1428   <--Function: line: 'util = qsatype.FLUtil()'
1428  <---Source: line: 'util = qsatype.FLUtil()'
1428 <----Class: line: 'util = qsatype.FLUtil()'
1428<-----Source: line: 'util = qsatype.FLUtil()'
1429     DeclarationBlock: end-gen
1429     DeclarationBlock: begin-gen
1429      Variable: begin-gen
1429       Variable: expr: 'qryProveedores'
1429       Variable: expr: '='
1429       Value: begin-gen
1429        New: begin-gen
1429         FunctionCall: begin-gen
1429          FunctionCall: expr: 'FLSqlQuery()'
1429        <-New: expr: 'qsatype.FLSqlQuery()'
1429       <--Value: expr: 'qsatype.FLSqlQuery()'
1429      <---Variable: expr: 'qsatype.FLSqlQuery()'
1429         FunctionCall: end-gen
1429        New: end-gen
1429       Value: end-gen
1429      Variable: end-gen
1429      DeclarationBlock: line: 'qryProveedores = qsatype.FLSqlQuery()'
1429    <-Source: line: 'qryProveedores = qsatype.FLSqlQuery()'
1429   <--Function: line: 'qryProveedores = qsatype.FLSqlQuery()'
1429  <---Source: line: 'qryProveedores = qsatype.FLSqlQuery()'
1429 <----Class: line: 'qryProveedores = qsatype.FLSqlQuery()'
1429<-----Source: line: 'qryProveedores = qsatype.FLSqlQuery()'
1430     DeclarationBlock: end-gen
1430     InstructionCall: begin-gen
1430      Member: begin-gen
1430       Identifier: begin-gen
1430        Identifier: expr: 'qryProveedores'
1430       Identifier: end-gen
1430       FunctionCall: begin-gen
1430        Value: begin-gen
1430         Constant: begin-gen
1430          Constant: ctype: 'String' -> 'proveedores'
1430          Constant: expr: 'u"proveedores"'
1430        <-Value: expr: 'u"proveedores"'
1430         Constant: end-gen
1430        Value: end-gen
1430        FunctionCall: expr: 'setTablesList(u"proveedores")'
1430       FunctionCall: end-gen
1430       Member: expr: 'qryProveedores.setTablesList(u"proveedores")'
1430      Member: end-gen
1430      InstructionCall: line: 'qryProveedores.setTablesList(u"proveedores")'
1430    <-Source: line: 'qryProveedores.setTablesList(u"proveedores")'
1430   <--Function: line: 'qryProveedores.setTablesList(u"proveedores")'
1430  <---Source: line: 'qryProveedores.setTablesList(u"proveedores")'
1430 <----Class: line: 'qryProveedores.setTablesList(u"proveedores")'
1430<-----Source: line: 'qryProveedores.setTablesList(u"proveedores")'
1431     InstructionCall: end-gen
1431     InstructionCall: begin-gen
1431      Member: begin-gen
1431       Identifier: begin-gen
1431        Identifier: expr: 'qryProveedores'
1431       Identifier: end-gen
1431       FunctionCall: begin-gen
1431        Value: begin-gen
1431         Constant: begin-gen
1431          Constant: ctype: 'String' -> 'proveedores'
1431          Constant: expr: 'u"proveedores"'
1431        <-Value: expr: 'u"proveedores"'
1431         Constant: end-gen
1431        Value: end-gen
1431        FunctionCall: expr: 'setFrom(u"proveedores")'
1431       FunctionCall: end-gen
1431       Member: expr: 'qryProveedores.setFrom(u"proveedores")'
1431      Member: end-gen
1431      InstructionCall: line: 'qryProveedores.setFrom(u"proveedores")'
1431    <-Source: line: 'qryProveedores.setFrom(u"proveedores")'
1431   <--Function: line: 'qryProveedores.setFrom(u"proveedores")'
1431  <---Source: line: 'qryProveedores.setFrom(u"proveedores")'
1431 <----Class: line: 'qryProveedores.setFrom(u"proveedores")'
1431<-----Source: line: 'qryProveedores.setFrom(u"proveedores")'
1432     InstructionCall: end-gen
1432     InstructionCall: begin-gen
1432      Member: begin-gen
1432       Identifier: begin-gen
1432        Identifier: expr: 'qryProveedores'
1432       Identifier: end-gen
1432       FunctionCall: begin-gen
1432        Value: begin-gen
1432         Constant: begin-gen
1432          Constant: ctype: 'String' -> 'codproveedor,codcontacto,contacto'
1432          Constant: expr: 'u"codproveedor,codcontacto,contacto"'
1432        <-Value: expr: 'u"codproveedor,codcontacto,contacto"'
1432         Constant: end-gen
1432        Value: end-gen
1432        FunctionCall: expr: 'setSelect(u"codproveedor,codcontacto,contacto")'
1432       FunctionCall: end-gen
1432       Member: expr: 'qryProveedores.setSelect(u"codproveedor,codcontacto,contacto")'
1432      Member: end-gen
1432      InstructionCall: line: 'qryProveedores.setSelect(u"codproveedor,codcontacto,contacto")'
1432    <-Source: line: 'qryProveedores.setSelect(u"codproveedor,codcontacto,contacto")'
1432   <--Function: line: 'qryProveedores.setSelect(u"codproveedor,codcontacto,contacto")'
1432  <---Source: line: 'qryProveedores.setSelect(u"codproveedor,codcontacto,contacto")'
1432 <----Class: line: 'qryProveedores.setSelect(u"codproveedor,codcontacto,contacto")'
1432<-----Source: line: 'qryProveedores.setSelect(u"codproveedor,codcontacto,contacto")'
1433     InstructionCall: end-gen
1433     InstructionCall: begin-gen
1433      Member: begin-gen
1433       Identifier: begin-gen
1433        Identifier: expr: 'qryProveedores'
1433       Identifier: end-gen
1433       FunctionCall: begin-gen
1433        Value: begin-gen
1433         Constant: begin-gen
1433          Constant: ctype: 'String' -> ''
1433          Constant: expr: 'u""'
1433        <-Value: expr: 'u""'
1433         Constant: end-gen
1433        Value: end-gen
1433        FunctionCall: expr: 'setWhere(u"")'
1433       FunctionCall: end-gen
1433       Member: expr: 'qryProveedores.setWhere(u"")'
1433      Member: end-gen
1433      InstructionCall: line: 'qryProveedores.setWhere(u"")'
1433    <-Source: line: 'qryProveedores.setWhere(u"")'
1433   <--Function: line: 'qryProveedores.setWhere(u"")'
1433  <---Source: line: 'qryProveedores.setWhere(u"")'
1433 <----Class: line: 'qryProveedores.setWhere(u"")'
1433<-----Source: line: 'qryProveedores.setWhere(u"")'
1434     InstructionCall: end-gen
1434     If: begin-gen
1434      Value: begin-gen
1434       OpUnary: begin-gen
1434        OpUnary: expr: 'not'
1434      <-Value: expr: 'not'
1434        Member: begin-gen
1434         Identifier: begin-gen
1434          Identifier: expr: 'qryProveedores'
1434         Identifier: end-gen
1434         FunctionCall: begin-gen
1434          FunctionCall: expr: 'exec_()'
1434         FunctionCall: end-gen
1434         Member: expr: 'qryProveedores.exec_()'
1434       <-OpUnary: expr: 'qryProveedores.exec_()'
1434      <--Value: expr: 'qryProveedores.exec_()'
1434        Member: end-gen
1434       OpUnary: end-gen
1434      Value: end-gen
1434      If: line: 'if not qryProveedores.exec_():'
1434    <-Source: line: 'if not qryProveedores.exec_():'
1434   <--Function: line: 'if not qryProveedores.exec_():'
1434  <---Source: line: 'if not qryProveedores.exec_():'
1434 <----Class: line: 'if not qryProveedores.exec_():'
1434<-----Source: line: 'if not qryProveedores.exec_():'
1435      If: begin: 'block-if'
1435    <-Source: begin: 'block-if'
1435   <--Function: begin: 'block-if'
1435  <---Source: begin: 'block-if'
1435 <----Class: begin: 'block-if'
1435<-----Source: begin: 'block-if'
1435      Source: begin-gen
1435       InstructionFlow: begin-gen
1435        Value: begin-gen
1435         Identifier: begin-gen
1435          Identifier: expr: 'False'
1435        <-Value: expr: 'False'
1435         Identifier: end-gen
1435        Value: end-gen
1435        InstructionFlow: line: 'return False'
1435      <-Source: line: 'return False'
1435     <--If: line: 'return False'
1435    <---Source: line: 'return False'
1435   <----Function: line: 'return False'
1435  <-----Source: line: 'return False'
1435 <------Class: line: 'return False'
1435<-------Source: line: 'return False'
1436       InstructionFlow: end-gen
1436      Source: end-gen
1436      If: end: 'block-if'
1436    <-Source: end: 'block-if'
1436   <--Function: end: 'block-if'
1436  <---Source: end: 'block-if'
1436 <----Class: end: 'block-if'
1436<-----Source: end: 'block-if'
1436     If: end-gen
1436     InstructionCall: begin-gen
1436      Member: begin-gen
1436       Identifier: begin-gen
1436        Identifier: expr: 'util'
1436       Identifier: end-gen
1436       FunctionCall: begin-gen
1436        Value: begin-gen
1436         Member: begin-gen
1436          Identifier: begin-gen
1436           Identifier: expr: 'util'
1436          Identifier: end-gen
1436          FunctionCall: begin-gen
1436           Value: begin-gen
1436            Constant: begin-gen
1436             Constant: ctype: 'String' -> 'scripts'
1436             Constant: expr: 'u"scripts"'
1436           <-Value: expr: 'u"scripts"'
1436            Constant: end-gen
1436           Value: end-gen
1436           Value: begin-gen
1436            Constant: begin-gen
1436             Constant: ctype: 'String' -> 'Reorganizando Contactos'
1436             Constant: expr: 'u"Reorganizando Contactos"'
1436           <-Value: expr: 'u"Reorganizando Contactos"'
1436            Constant: end-gen
1436           Value: end-gen
1436           FunctionCall: expr: 'translate(u"scripts", u"Reorganizando Contactos")'
1436          FunctionCall: end-gen
1436          Member: expr: 'util.translate(u"scripts", u"Reorganizando Contactos")'
1436        <-Value: expr: 'util.translate(u"scripts", u"Reorganizando Contactos")'
1436         Member: end-gen
1436        Value: end-gen
1436        Value: begin-gen
1436         Member: begin-gen
1436          Identifier: begin-gen
1436           Identifier: expr: 'qryProveedores'
1436          Identifier: end-gen
1436          FunctionCall: begin-gen
1436           FunctionCall: expr: 'size()'
1436          FunctionCall: end-gen
1436          Member: expr: 'qryProveedores.size()'
1436        <-Value: expr: 'qryProveedores.size()'
1436         Member: end-gen
1436        Value: end-gen
1436        FunctionCall: expr: 'createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryProveedores.size())'
1436       FunctionCall: end-gen
1436       Member: expr: 'util.createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryProveedores.size())'
1436      Member: end-gen
1436      InstructionCall: line: 'util.createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryProveedores.size())'
1436    <-Source: line: 'util.createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryProveedores.size())'
1436   <--Function: line: 'util.createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryProveedores.size())'
1436  <---Source: line: 'util.createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryProveedores.size())'
1436 <----Class: line: 'util.createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryProveedores.size())'
1436<-----Source: line: 'util.createProgressDialog(util.translate(u"scripts", u"Reorganizando Contactos"), qryProveedores.size())'
1437     InstructionCall: end-gen
1437     InstructionCall: begin-gen
1437      Member: begin-gen
1437       Identifier: begin-gen
1437        Identifier: expr: 'util'
1437       Identifier: end-gen
1437       FunctionCall: begin-gen
1437        Value: begin-gen
1437         Constant: begin-gen
1437          Constant: ctype: 'Number' -> '0'
1437          Constant: expr: '0'
1437        <-Value: expr: '0'
1437         Constant: end-gen
1437        Value: end-gen
1437        FunctionCall: expr: 'setProgress(0)'
1437       FunctionCall: end-gen
1437       Member: expr: 'util.setProgress(0)'
1437      Member: end-gen
1437      InstructionCall: line: 'util.setProgress(0)'
1437    <-Source: line: 'util.setProgress(0)'
1437   <--Function: line: 'util.setProgress(0)'
1437  <---Source: line: 'util.setProgress(0)'
1437 <----Class: line: 'util.setProgress(0)'
1437<-----Source: line: 'util.setProgress(0)'
1438     InstructionCall: end-gen
1438     DeclarationBlock: begin-gen
1438      Variable: begin-gen
1438       Variable: expr: 'cont'
1438       Variable: expr: '='
1438       Value: begin-gen
1438        Constant: begin-gen
1438         Constant: ctype: 'Number' -> '1'
1438         Constant: expr: '1'
1438       <-Value: expr: '1'
1438      <--Variable: expr: '1'
1438        Constant: end-gen
1438       Value: end-gen
1438      Variable: end-gen
1438      DeclarationBlock: line: 'cont = 1'
1438    <-Source: line: 'cont = 1'
1438   <--Function: line: 'cont = 1'
1438  <---Source: line: 'cont = 1'
1438 <----Class: line: 'cont = 1'
1438<-----Source: line: 'cont = 1'
1439     DeclarationBlock: end-gen
1439     While: begin-gen
1439      Value: begin-gen
1439       Member: begin-gen
1439        Identifier: begin-gen
1439         Identifier: expr: 'qryProveedores'
1439        Identifier: end-gen
1439        FunctionCall: begin-gen
1439         FunctionCall: expr: 'next()'
1439        FunctionCall: end-gen
1439        Member: expr: 'qryProveedores.next()'
1439      <-Value: expr: 'qryProveedores.next()'
1439       Member: end-gen
1439      Value: end-gen
1439      While: line: 'while qryProveedores.next():'
1439    <-Source: line: 'while qryProveedores.next():'
1439   <--Function: line: 'while qryProveedores.next():'
1439  <---Source: line: 'while qryProveedores.next():'
1439 <----Class: line: 'while qryProveedores.next():'
1439<-----Source: line: 'while qryProveedores.next():'
1440      While: begin: 'block-while'
1440    <-Source: begin: 'block-while'
1440   <--Function: begin: 'block-while'
1440  <---Source: begin: 'block-while'
1440 <----Class: begin: 'block-while'
1440<-----Source: begin: 'block-while'
1440      Source: begin-gen
1440       InstructionCall: begin-gen
1440        Member: begin-gen
1440         Identifier: begin-gen
1440          Identifier: expr: 'util'
1440         Identifier: end-gen
1440         FunctionCall: begin-gen
1440          Value: begin-gen
1440           Identifier: begin-gen
1440            Identifier: expr: 'cont'
1440          <-Value: expr: 'cont'
1440           Identifier: end-gen
1440          Value: end-gen
1440          FunctionCall: expr: 'setProgress(cont)'
1440         FunctionCall: end-gen
1440         Member: expr: 'util.setProgress(cont)'
1440        Member: end-gen
1440        InstructionCall: line: 'util.setProgress(cont)'
1440      <-Source: line: 'util.setProgress(cont)'
1440     <--While: line: 'util.setProgress(cont)'
1440    <---Source: line: 'util.setProgress(cont)'
1440   <----Function: line: 'util.setProgress(cont)'
1440  <-----Source: line: 'util.setProgress(cont)'
1440 <------Class: line: 'util.setProgress(cont)'
1440<-------Source: line: 'util.setProgress(cont)'
1441       InstructionCall: end-gen
1441       InstructionUpdate: begin-gen
1441        Identifier: begin-gen
1441         Identifier: expr: 'cont'
1441        Identifier: end-gen
1441        OpUpdate: begin-gen
1441         OpUpdate: expr: '+='
1441        OpUpdate: end-gen
1441        Value: begin-gen
1441         Constant: begin-gen
1441          Constant: ctype: 'Number' -> '1'
1441          Constant: expr: '1'
1441        <-Value: expr: '1'
1441         Constant: end-gen
1441        Value: end-gen
1441        InstructionUpdate: line: 'cont += 1'
1441      <-Source: line: 'cont += 1'
1441     <--While: line: 'cont += 1'
1441    <---Source: line: 'cont += 1'
1441   <----Function: line: 'cont += 1'
1441  <-----Source: line: 'cont += 1'
1441 <------Class: line: 'cont += 1'
1441<-------Source: line: 'cont += 1'
1442       InstructionUpdate: end-gen
1442       DeclarationBlock: begin-gen
1442        Variable: begin-gen
1442         Variable: expr: 'codProveedor'
1442         Variable: expr: '='
1442         Value: begin-gen
1442          Member: begin-gen
1442           Identifier: begin-gen
1442            Identifier: expr: 'qryProveedores'
1442           Identifier: end-gen
1442           FunctionCall: begin-gen
1442            Value: begin-gen
1442             Constant: begin-gen
1442              Constant: ctype: 'String' -> 'codproveedor'
1442              Constant: expr: 'u"codproveedor"'
1442            <-Value: expr: 'u"codproveedor"'
1442             Constant: end-gen
1442            Value: end-gen
1442            FunctionCall: expr: 'value(u"codproveedor")'
1442           FunctionCall: end-gen
1442           Member: expr: 'qryProveedores.value(u"codproveedor")'
1442         <-Value: expr: 'qryProveedores.value(u"codproveedor")'
1442        <--Variable: expr: 'qryProveedores.value(u"codproveedor")'
1442          Member: end-gen
1442         Value: end-gen
1442        Variable: end-gen
1442        DeclarationBlock: line: 'codProveedor = qryProveedores.value(u"codproveedor")'
1442      <-Source: line: 'codProveedor = qryProveedores.value(u"codproveedor")'
1442     <--While: line: 'codProveedor = qryProveedores.value(u"codproveedor")'
1442    <---Source: line: 'codProveedor = qryProveedores.value(u"codproveedor")'
1442   <----Function: line: 'codProveedor = qryProveedores.value(u"codproveedor")'
1442  <-----Source: line: 'codProveedor = qryProveedores.value(u"codproveedor")'
1442 <------Class: line: 'codProveedor = qryProveedores.value(u"codproveedor")'
1442<-------Source: line: 'codProveedor = qryProveedores.value(u"codproveedor")'
1443       DeclarationBlock: end-gen
1443       If: begin-gen
1443        Value: begin-gen
1443         OpUnary: begin-gen
1443          OpUnary: expr: 'not'
1443        <-Value: expr: 'not'
1443          Identifier: begin-gen
1443           Identifier: expr: 'codProveedor'
1443         <-OpUnary: expr: 'codProveedor'
1443        <--Value: expr: 'codProveedor'
1443          Identifier: end-gen
1443         OpUnary: end-gen
1443        Value: end-gen
1443        If: line: 'if not codProveedor:'
1443      <-Source: line: 'if not codProveedor:'
1443     <--While: line: 'if not codProveedor:'
1443    <---Source: line: 'if not codProveedor:'
1443   <----Function: line: 'if not codProveedor:'
1443  <-----Source: line: 'if not codProveedor:'
1443 <------Class: line: 'if not codProveedor:'
1443<-------Source: line: 'if not codProveedor:'
1444        If: begin: 'block-if'
1444      <-Source: begin: 'block-if'
1444     <--While: begin: 'block-if'
1444    <---Source: begin: 'block-if'
1444   <----Function: begin: 'block-if'
1444  <-----Source: begin: 'block-if'
1444 <------Class: begin: 'block-if'
1444<-------Source: begin: 'block-if'
1444        Source: begin-gen
1444         InstructionCall: begin-gen
1444          Member: begin-gen
1444           Identifier: begin-gen
1444            Identifier: expr: 'util'
1444           Identifier: end-gen
1444           FunctionCall: begin-gen
1444            FunctionCall: expr: 'destroyProgressDialog()'
1444           FunctionCall: end-gen
1444           Member: expr: 'util.destroyProgressDialog()'
1444          Member: end-gen
1444          InstructionCall: line: 'util.destroyProgressDialog()'
1444        <-Source: line: 'util.destroyProgressDialog()'
1444       <--If: line: 'util.destroyProgressDialog()'
1444      <---Source: line: 'util.destroyProgressDialog()'
1444     <----While: line: 'util.destroyProgressDialog()'
1444    <-----Source: line: 'util.destroyProgressDialog()'
1444   <------Function: line: 'util.destroyProgressDialog()'
1444  <-------Source: line: 'util.destroyProgressDialog()'
1444 <--------Class: line: 'util.destroyProgressDialog()'
1444<---------Source: line: 'util.destroyProgressDialog()'
1445         InstructionCall: end-gen
1445         InstructionFlow: begin-gen
1445          Value: begin-gen
1445           Identifier: begin-gen
1445            Identifier: expr: 'False'
1445          <-Value: expr: 'False'
1445           Identifier: end-gen
1445          Value: end-gen
1445          InstructionFlow: line: 'return False'
1445        <-Source: line: 'return False'
1445       <--If: line: 'return False'
1445      <---Source: line: 'return False'
1445     <----While: line: 'return False'
1445    <-----Source: line: 'return False'
1445   <------Function: line: 'return False'
1445  <-------Source: line: 'return False'
1445 <--------Class: line: 'return False'
1445<---------Source: line: 'return False'
1446         InstructionFlow: end-gen
1446        Source: end-gen
1446        If: end: 'block-if'
1446      <-Source: end: 'block-if'
1446     <--While: end: 'block-if'
1446    <---Source: end: 'block-if'
1446   <----Function: end: 'block-if'
1446  <-----Source: end: 'block-if'
1446 <------Class: end: 'block-if'
1446<-------Source: end: 'block-if'
1446       If: end-gen
1446       DeclarationBlock: begin-gen
1446        Variable: begin-gen
1446         Variable: expr: 'qryAgenda'
1446         Variable: expr: '='
1446         Value: begin-gen
1446          New: begin-gen
1446           FunctionCall: begin-gen
1446            FunctionCall: expr: 'FLSqlQuery()'
1446          <-New: expr: 'qsatype.FLSqlQuery()'
1446         <--Value: expr: 'qsatype.FLSqlQuery()'
1446        <---Variable: expr: 'qsatype.FLSqlQuery()'
1446           FunctionCall: end-gen
1446          New: end-gen
1446         Value: end-gen
1446        Variable: end-gen
1446        DeclarationBlock: line: 'qryAgenda = qsatype.FLSqlQuery()'
1446      <-Source: line: 'qryAgenda = qsatype.FLSqlQuery()'
1446     <--While: line: 'qryAgenda = qsatype.FLSqlQuery()'
1446    <---Source: line: 'qryAgenda = qsatype.FLSqlQuery()'
1446   <----Function: line: 'qryAgenda = qsatype.FLSqlQuery()'
1446  <-----Source: line: 'qryAgenda = qsatype.FLSqlQuery()'
1446 <------Class: line: 'qryAgenda = qsatype.FLSqlQuery()'
1446<-------Source: line: 'qryAgenda = qsatype.FLSqlQuery()'
1447       DeclarationBlock: end-gen
1447       InstructionCall: begin-gen
1447        Member: begin-gen
1447         Identifier: begin-gen
1447          Identifier: expr: 'qryAgenda'
1447         Identifier: end-gen
1447         FunctionCall: begin-gen
1447          Value: begin-gen
1447           Constant: begin-gen
1447            Constant: ctype: 'String' -> 'contactosproveedores'
1447            Constant: expr: 'u"contactosproveedores"'
1447          <-Value: expr: 'u"contactosproveedores"'
1447           Constant: end-gen
1447          Value: end-gen
1447          FunctionCall: expr: 'setTablesList(u"contactosproveedores")'
1447         FunctionCall: end-gen
1447         Member: expr: 'qryAgenda.setTablesList(u"contactosproveedores")'
1447        Member: end-gen
1447        InstructionCall: line: 'qryAgenda.setTablesList(u"contactosproveedores")'
1447      <-Source: line: 'qryAgenda.setTablesList(u"contactosproveedores")'
1447     <--While: line: 'qryAgenda.setTablesList(u"contactosproveedores")'
1447    <---Source: line: 'qryAgenda.setTablesList(u"contactosproveedores")'
1447   <----Function: line: 'qryAgenda.setTablesList(u"contactosproveedores")'
1447  <-----Source: line: 'qryAgenda.setTablesList(u"contactosproveedores")'
1447 <------Class: line: 'qryAgenda.setTablesList(u"contactosproveedores")'
1447<-------Source: line: 'qryAgenda.setTablesList(u"contactosproveedores")'
1448       InstructionCall: end-gen
1448       InstructionCall: begin-gen
1448        Member: begin-gen
1448         Identifier: begin-gen
1448          Identifier: expr: 'qryAgenda'
1448         Identifier: end-gen
1448         FunctionCall: begin-gen
1448          Value: begin-gen
1448           Constant: begin-gen
1448            Constant: ctype: 'String' -> 'contactosproveedores'
1448            Constant: expr: 'u"contactosproveedores"'
1448          <-Value: expr: 'u"contactosproveedores"'
1448           Constant: end-gen
1448          Value: end-gen
1448          FunctionCall: expr: 'setFrom(u"contactosproveedores")'
1448         FunctionCall: end-gen
1448         Member: expr: 'qryAgenda.setFrom(u"contactosproveedores")'
1448        Member: end-gen
1448        InstructionCall: line: 'qryAgenda.setFrom(u"contactosproveedores")'
1448      <-Source: line: 'qryAgenda.setFrom(u"contactosproveedores")'
1448     <--While: line: 'qryAgenda.setFrom(u"contactosproveedores")'
1448    <---Source: line: 'qryAgenda.setFrom(u"contactosproveedores")'
1448   <----Function: line: 'qryAgenda.setFrom(u"contactosproveedores")'
1448  <-----Source: line: 'qryAgenda.setFrom(u"contactosproveedores")'
1448 <------Class: line: 'qryAgenda.setFrom(u"contactosproveedores")'
1448<-------Source: line: 'qryAgenda.setFrom(u"contactosproveedores")'
1449       InstructionCall: end-gen
1449       InstructionCall: begin-gen
1449        Member: begin-gen
1449         Identifier: begin-gen
1449          Identifier: expr: 'qryAgenda'
1449         Identifier: end-gen
1449         FunctionCall: begin-gen
1449          Value: begin-gen
1449           Constant: begin-gen
1449            Constant: ctype: 'String' -> 'contacto,cargo,telefono,fax,email,id,codproveedor'
1449            Constant: expr: 'u"contacto,cargo,telefono,fax,email,id,codproveedor"'
1449          <-Value: expr: 'u"contacto,cargo,telefono,fax,email,id,codproveedor"'
1449           Constant: end-gen
1449          Value: end-gen
1449          FunctionCall: expr: 'setSelect(u"contacto,cargo,telefono,fax,email,id,codproveedor")'
1449         FunctionCall: end-gen
1449         Member: expr: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codproveedor")'
1449        Member: end-gen
1449        InstructionCall: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codproveedor")'
1449      <-Source: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codproveedor")'
1449     <--While: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codproveedor")'
1449    <---Source: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codproveedor")'
1449   <----Function: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codproveedor")'
1449  <-----Source: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codproveedor")'
1449 <------Class: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codproveedor")'
1449<-------Source: line: 'qryAgenda.setSelect(u"contacto,cargo,telefono,fax,email,id,codproveedor")'
1450       InstructionCall: end-gen
1450       InstructionCall: begin-gen
1450        Member: begin-gen
1450         Identifier: begin-gen
1450          Identifier: expr: 'qryAgenda'
1450         Identifier: end-gen
1450         FunctionCall: begin-gen
1450          Expression: begin-gen
1450           Expression: expr: 'ustr('
1450           Constant: begin-gen
1450            Constant: ctype: 'String' -> "codproveedor = '"
1450            Constant: expr: 'u"codproveedor = \'"'
1450          <-Expression: expr: 'u"codproveedor = \'"'
1450           Constant: end-gen
1450           Expression: expr: ','
1450           Identifier: begin-gen
1450            Identifier: expr: 'codProveedor'
1450          <-Expression: expr: 'codProveedor'
1450           Identifier: end-gen
1450           Expression: expr: ','
1450           Constant: begin-gen
1450            Constant: ctype: 'String' -> "'"
1450            Constant: expr: 'u"\'"'
1450          <-Expression: expr: 'u"\'"'
1450           Constant: end-gen
1450           Expression: expr: ')'
1450          Expression: end-gen
1450          FunctionCall: expr: 'setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1450         FunctionCall: end-gen
1450         Member: expr: 'qryAgenda.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1450        Member: end-gen
1450        InstructionCall: line: 'qryAgenda.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1450      <-Source: line: 'qryAgenda.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1450     <--While: line: 'qryAgenda.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1450    <---Source: line: 'qryAgenda.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1450   <----Function: line: 'qryAgenda.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1450  <-----Source: line: 'qryAgenda.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1450 <------Class: line: 'qryAgenda.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1450<-------Source: line: 'qryAgenda.setWhere(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1451       InstructionCall: end-gen
1451       If: begin-gen
1451        Value: begin-gen
1451         OpUnary: begin-gen
1451          OpUnary: expr: 'not'
1451        <-Value: expr: 'not'
1451          Member: begin-gen
1451           Identifier: begin-gen
1451            Identifier: expr: 'qryAgenda'
1451           Identifier: end-gen
1451           FunctionCall: begin-gen
1451            FunctionCall: expr: 'exec_()'
1451           FunctionCall: end-gen
1451           Member: expr: 'qryAgenda.exec_()'
1451         <-OpUnary: expr: 'qryAgenda.exec_()'
1451        <--Value: expr: 'qryAgenda.exec_()'
1451          Member: end-gen
1451         OpUnary: end-gen
1451        Value: end-gen
1451        If: line: 'if not qryAgenda.exec_():'
1451      <-Source: line: 'if not qryAgenda.exec_():'
1451     <--While: line: 'if not qryAgenda.exec_():'
1451    <---Source: line: 'if not qryAgenda.exec_():'
1451   <----Function: line: 'if not qryAgenda.exec_():'
1451  <-----Source: line: 'if not qryAgenda.exec_():'
1451 <------Class: line: 'if not qryAgenda.exec_():'
1451<-------Source: line: 'if not qryAgenda.exec_():'
1452        If: begin: 'block-if'
1452      <-Source: begin: 'block-if'
1452     <--While: begin: 'block-if'
1452    <---Source: begin: 'block-if'
1452   <----Function: begin: 'block-if'
1452  <-----Source: begin: 'block-if'
1452 <------Class: begin: 'block-if'
1452<-------Source: begin: 'block-if'
1452        Source: begin-gen
1452         InstructionCall: begin-gen
1452          Member: begin-gen
1452           Identifier: begin-gen
1452            Identifier: expr: 'util'
1452           Identifier: end-gen
1452           FunctionCall: begin-gen
1452            FunctionCall: expr: 'destroyProgressDialog()'
1452           FunctionCall: end-gen
1452           Member: expr: 'util.destroyProgressDialog()'
1452          Member: end-gen
1452          InstructionCall: line: 'util.destroyProgressDialog()'
1452        <-Source: line: 'util.destroyProgressDialog()'
1452       <--If: line: 'util.destroyProgressDialog()'
1452      <---Source: line: 'util.destroyProgressDialog()'
1452     <----While: line: 'util.destroyProgressDialog()'
1452    <-----Source: line: 'util.destroyProgressDialog()'
1452   <------Function: line: 'util.destroyProgressDialog()'
1452  <-------Source: line: 'util.destroyProgressDialog()'
1452 <--------Class: line: 'util.destroyProgressDialog()'
1452<---------Source: line: 'util.destroyProgressDialog()'
1453         InstructionCall: end-gen
1453         InstructionFlow: begin-gen
1453          Value: begin-gen
1453           Identifier: begin-gen
1453            Identifier: expr: 'False'
1453          <-Value: expr: 'False'
1453           Identifier: end-gen
1453          Value: end-gen
1453          InstructionFlow: line: 'return False'
1453        <-Source: line: 'return False'
1453       <--If: line: 'return False'
1453      <---Source: line: 'return False'
1453     <----While: line: 'return False'
1453    <-----Source: line: 'return False'
1453   <------Function: line: 'return False'
1453  <-------Source: line: 'return False'
1453 <--------Class: line: 'return False'
1453<---------Source: line: 'return False'
1454         InstructionFlow: end-gen
1454        Source: end-gen
1454        If: end: 'block-if'
1454      <-Source: end: 'block-if'
1454     <--While: end: 'block-if'
1454    <---Source: end: 'block-if'
1454   <----Function: end: 'block-if'
1454  <-----Source: end: 'block-if'
1454 <------Class: end: 'block-if'
1454<-------Source: end: 'block-if'
1454       If: end-gen
1454       While: begin-gen
1454        Value: begin-gen
1454         Member: begin-gen
1454          Identifier: begin-gen
1454           Identifier: expr: 'qryAgenda'
1454          Identifier: end-gen
1454          FunctionCall: begin-gen
1454           FunctionCall: expr: 'next()'
1454          FunctionCall: end-gen
1454          Member: expr: 'qryAgenda.next()'
1454        <-Value: expr: 'qryAgenda.next()'
1454         Member: end-gen
1454        Value: end-gen
1454        While: line: 'while qryAgenda.next():'
1454      <-Source: line: 'while qryAgenda.next():'
1454     <--While: line: 'while qryAgenda.next():'
1454    <---Source: line: 'while qryAgenda.next():'
1454   <----Function: line: 'while qryAgenda.next():'
1454  <-----Source: line: 'while qryAgenda.next():'
1454 <------Class: line: 'while qryAgenda.next():'
1454<-------Source: line: 'while qryAgenda.next():'
1455        While: begin: 'block-while'
1455      <-Source: begin: 'block-while'
1455     <--While: begin: 'block-while'
1455    <---Source: begin: 'block-while'
1455   <----Function: begin: 'block-while'
1455  <-----Source: begin: 'block-while'
1455 <------Class: begin: 'block-while'
1455<-------Source: begin: 'block-while'
1455        Source: begin-gen
1455         DeclarationBlock: begin-gen
1455          Variable: begin-gen
1455           Variable: expr: 'nombreCon'
1455           Variable: expr: '='
1455           Value: begin-gen
1455            Member: begin-gen
1455             Identifier: begin-gen
1455              Identifier: expr: 'qryAgenda'
1455             Identifier: end-gen
1455             FunctionCall: begin-gen
1455              Value: begin-gen
1455               Constant: begin-gen
1455                Constant: ctype: 'String' -> 'contacto'
1455                Constant: expr: 'u"contacto"'
1455              <-Value: expr: 'u"contacto"'
1455               Constant: end-gen
1455              Value: end-gen
1455              FunctionCall: expr: 'value(u"contacto")'
1455             FunctionCall: end-gen
1455             Member: expr: 'qryAgenda.value(u"contacto")'
1455           <-Value: expr: 'qryAgenda.value(u"contacto")'
1455          <--Variable: expr: 'qryAgenda.value(u"contacto")'
1455            Member: end-gen
1455           Value: end-gen
1455          Variable: end-gen
1455          DeclarationBlock: line: 'nombreCon = qryAgenda.value(u"contacto")'
1455        <-Source: line: 'nombreCon = qryAgenda.value(u"contacto")'
1455       <--While: line: 'nombreCon = qryAgenda.value(u"contacto")'
1455      <---Source: line: 'nombreCon = qryAgenda.value(u"contacto")'
1455     <----While: line: 'nombreCon = qryAgenda.value(u"contacto")'
1455    <-----Source: line: 'nombreCon = qryAgenda.value(u"contacto")'
1455   <------Function: line: 'nombreCon = qryAgenda.value(u"contacto")'
1455  <-------Source: line: 'nombreCon = qryAgenda.value(u"contacto")'
1455 <--------Class: line: 'nombreCon = qryAgenda.value(u"contacto")'
1455<---------Source: line: 'nombreCon = qryAgenda.value(u"contacto")'
1456         DeclarationBlock: end-gen
1456         DeclarationBlock: begin-gen
1456          Variable: begin-gen
1456           Variable: expr: 'cargoCon'
1456           Variable: expr: '='
1456           Value: begin-gen
1456            Member: begin-gen
1456             Identifier: begin-gen
1456              Identifier: expr: 'qryAgenda'
1456             Identifier: end-gen
1456             FunctionCall: begin-gen
1456              Value: begin-gen
1456               Constant: begin-gen
1456                Constant: ctype: 'String' -> 'cargo'
1456                Constant: expr: 'u"cargo"'
1456              <-Value: expr: 'u"cargo"'
1456               Constant: end-gen
1456              Value: end-gen
1456              FunctionCall: expr: 'value(u"cargo")'
1456             FunctionCall: end-gen
1456             Member: expr: 'qryAgenda.value(u"cargo")'
1456           <-Value: expr: 'qryAgenda.value(u"cargo")'
1456          <--Variable: expr: 'qryAgenda.value(u"cargo")'
1456            Member: end-gen
1456           Value: end-gen
1456          Variable: end-gen
1456          DeclarationBlock: line: 'cargoCon = qryAgenda.value(u"cargo")'
1456        <-Source: line: 'cargoCon = qryAgenda.value(u"cargo")'
1456       <--While: line: 'cargoCon = qryAgenda.value(u"cargo")'
1456      <---Source: line: 'cargoCon = qryAgenda.value(u"cargo")'
1456     <----While: line: 'cargoCon = qryAgenda.value(u"cargo")'
1456    <-----Source: line: 'cargoCon = qryAgenda.value(u"cargo")'
1456   <------Function: line: 'cargoCon = qryAgenda.value(u"cargo")'
1456  <-------Source: line: 'cargoCon = qryAgenda.value(u"cargo")'
1456 <--------Class: line: 'cargoCon = qryAgenda.value(u"cargo")'
1456<---------Source: line: 'cargoCon = qryAgenda.value(u"cargo")'
1457         DeclarationBlock: end-gen
1457         DeclarationBlock: begin-gen
1457          Variable: begin-gen
1457           Variable: expr: 'telefonoCon'
1457           Variable: expr: '='
1457           Value: begin-gen
1457            Member: begin-gen
1457             Identifier: begin-gen
1457              Identifier: expr: 'qryAgenda'
1457             Identifier: end-gen
1457             FunctionCall: begin-gen
1457              Value: begin-gen
1457               Constant: begin-gen
1457                Constant: ctype: 'String' -> 'telefono'
1457                Constant: expr: 'u"telefono"'
1457              <-Value: expr: 'u"telefono"'
1457               Constant: end-gen
1457              Value: end-gen
1457              FunctionCall: expr: 'value(u"telefono")'
1457             FunctionCall: end-gen
1457             Member: expr: 'qryAgenda.value(u"telefono")'
1457           <-Value: expr: 'qryAgenda.value(u"telefono")'
1457          <--Variable: expr: 'qryAgenda.value(u"telefono")'
1457            Member: end-gen
1457           Value: end-gen
1457          Variable: end-gen
1457          DeclarationBlock: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1457        <-Source: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1457       <--While: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1457      <---Source: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1457     <----While: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1457    <-----Source: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1457   <------Function: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1457  <-------Source: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1457 <--------Class: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1457<---------Source: line: 'telefonoCon = qryAgenda.value(u"telefono")'
1458         DeclarationBlock: end-gen
1458         DeclarationBlock: begin-gen
1458          Variable: begin-gen
1458           Variable: expr: 'faxCon'
1458           Variable: expr: '='
1458           Value: begin-gen
1458            Member: begin-gen
1458             Identifier: begin-gen
1458              Identifier: expr: 'qryAgenda'
1458             Identifier: end-gen
1458             FunctionCall: begin-gen
1458              Value: begin-gen
1458               Constant: begin-gen
1458                Constant: ctype: 'String' -> 'fax'
1458                Constant: expr: 'u"fax"'
1458              <-Value: expr: 'u"fax"'
1458               Constant: end-gen
1458              Value: end-gen
1458              FunctionCall: expr: 'value(u"fax")'
1458             FunctionCall: end-gen
1458             Member: expr: 'qryAgenda.value(u"fax")'
1458           <-Value: expr: 'qryAgenda.value(u"fax")'
1458          <--Variable: expr: 'qryAgenda.value(u"fax")'
1458            Member: end-gen
1458           Value: end-gen
1458          Variable: end-gen
1458          DeclarationBlock: line: 'faxCon = qryAgenda.value(u"fax")'
1458        <-Source: line: 'faxCon = qryAgenda.value(u"fax")'
1458       <--While: line: 'faxCon = qryAgenda.value(u"fax")'
1458      <---Source: line: 'faxCon = qryAgenda.value(u"fax")'
1458     <----While: line: 'faxCon = qryAgenda.value(u"fax")'
1458    <-----Source: line: 'faxCon = qryAgenda.value(u"fax")'
1458   <------Function: line: 'faxCon = qryAgenda.value(u"fax")'
1458  <-------Source: line: 'faxCon = qryAgenda.value(u"fax")'
1458 <--------Class: line: 'faxCon = qryAgenda.value(u"fax")'
1458<---------Source: line: 'faxCon = qryAgenda.value(u"fax")'
1459         DeclarationBlock: end-gen
1459         DeclarationBlock: begin-gen
1459          Variable: begin-gen
1459           Variable: expr: 'emailCon'
1459           Variable: expr: '='
1459           Value: begin-gen
1459            Member: begin-gen
1459             Identifier: begin-gen
1459              Identifier: expr: 'qryAgenda'
1459             Identifier: end-gen
1459             FunctionCall: begin-gen
1459              Value: begin-gen
1459               Constant: begin-gen
1459                Constant: ctype: 'String' -> 'email'
1459                Constant: expr: 'u"email"'
1459              <-Value: expr: 'u"email"'
1459               Constant: end-gen
1459              Value: end-gen
1459              FunctionCall: expr: 'value(u"email")'
1459             FunctionCall: end-gen
1459             Member: expr: 'qryAgenda.value(u"email")'
1459           <-Value: expr: 'qryAgenda.value(u"email")'
1459          <--Variable: expr: 'qryAgenda.value(u"email")'
1459            Member: end-gen
1459           Value: end-gen
1459          Variable: end-gen
1459          DeclarationBlock: line: 'emailCon = qryAgenda.value(u"email")'
1459        <-Source: line: 'emailCon = qryAgenda.value(u"email")'
1459       <--While: line: 'emailCon = qryAgenda.value(u"email")'
1459      <---Source: line: 'emailCon = qryAgenda.value(u"email")'
1459     <----While: line: 'emailCon = qryAgenda.value(u"email")'
1459    <-----Source: line: 'emailCon = qryAgenda.value(u"email")'
1459   <------Function: line: 'emailCon = qryAgenda.value(u"email")'
1459  <-------Source: line: 'emailCon = qryAgenda.value(u"email")'
1459 <--------Class: line: 'emailCon = qryAgenda.value(u"email")'
1459<---------Source: line: 'emailCon = qryAgenda.value(u"email")'
1460         DeclarationBlock: end-gen
1460         DeclarationBlock: begin-gen
1460          Variable: begin-gen
1460           Variable: expr: 'idAgenda'
1460           Variable: expr: '='
1460           Value: begin-gen
1460            Member: begin-gen
1460             Identifier: begin-gen
1460              Identifier: expr: 'qryAgenda'
1460             Identifier: end-gen
1460             FunctionCall: begin-gen
1460              Value: begin-gen
1460               Constant: begin-gen
1460                Constant: ctype: 'String' -> 'id'
1460                Constant: expr: 'u"id"'
1460              <-Value: expr: 'u"id"'
1460               Constant: end-gen
1460              Value: end-gen
1460              FunctionCall: expr: 'value(u"id")'
1460             FunctionCall: end-gen
1460             Member: expr: 'qryAgenda.value(u"id")'
1460           <-Value: expr: 'qryAgenda.value(u"id")'
1460          <--Variable: expr: 'qryAgenda.value(u"id")'
1460            Member: end-gen
1460           Value: end-gen
1460          Variable: end-gen
1460          DeclarationBlock: line: 'idAgenda = qryAgenda.value(u"id")'
1460        <-Source: line: 'idAgenda = qryAgenda.value(u"id")'
1460       <--While: line: 'idAgenda = qryAgenda.value(u"id")'
1460      <---Source: line: 'idAgenda = qryAgenda.value(u"id")'
1460     <----While: line: 'idAgenda = qryAgenda.value(u"id")'
1460    <-----Source: line: 'idAgenda = qryAgenda.value(u"id")'
1460   <------Function: line: 'idAgenda = qryAgenda.value(u"id")'
1460  <-------Source: line: 'idAgenda = qryAgenda.value(u"id")'
1460 <--------Class: line: 'idAgenda = qryAgenda.value(u"id")'
1460<---------Source: line: 'idAgenda = qryAgenda.value(u"id")'
1461         DeclarationBlock: end-gen
1461         If: begin-gen
1461          Expression: begin-gen
1461           OpUnary: begin-gen
1461            OpUnary: expr: 'not'
1461          <-Expression: expr: 'not'
1461            Identifier: begin-gen
1461             Identifier: expr: 'idAgenda'
1461           <-OpUnary: expr: 'idAgenda'
1461          <--Expression: expr: 'idAgenda'
1461            Identifier: end-gen
1461           OpUnary: end-gen
1461           Compare: begin-gen
1461            Compare: expr: 'or'
1461          <-Expression: expr: 'or'
1461           Compare: end-gen
1461           Identifier: begin-gen
1461            Identifier: expr: 'idAgenda'
1461          <-Expression: expr: 'idAgenda'
1461           Identifier: end-gen
1461           Compare: begin-gen
1461            Compare: expr: '=='
1461          <-Expression: expr: '=='
1461           Compare: end-gen
1461           Constant: begin-gen
1461            Constant: ctype: 'Number' -> '0'
1461            Constant: expr: '0'
1461          <-Expression: expr: '0'
1461           Constant: end-gen
1461          Expression: end-gen
1461          If: line: 'if not idAgenda or idAgenda == 0:'
1461        <-Source: line: 'if not idAgenda or idAgenda == 0:'
1461       <--While: line: 'if not idAgenda or idAgenda == 0:'
1461      <---Source: line: 'if not idAgenda or idAgenda == 0:'
1461     <----While: line: 'if not idAgenda or idAgenda == 0:'
1461    <-----Source: line: 'if not idAgenda or idAgenda == 0:'
1461   <------Function: line: 'if not idAgenda or idAgenda == 0:'
1461  <-------Source: line: 'if not idAgenda or idAgenda == 0:'
1461 <--------Class: line: 'if not idAgenda or idAgenda == 0:'
1461<---------Source: line: 'if not idAgenda or idAgenda == 0:'
1462          If: begin: 'block-if'
1462        <-Source: begin: 'block-if'
1462       <--While: begin: 'block-if'
1462      <---Source: begin: 'block-if'
1462     <----While: begin: 'block-if'
1462    <-----Source: begin: 'block-if'
1462   <------Function: begin: 'block-if'
1462  <-------Source: begin: 'block-if'
1462 <--------Class: begin: 'block-if'
1462<---------Source: begin: 'block-if'
1462          Source: begin-gen
1462           InstructionCall: begin-gen
1462            Member: begin-gen
1462             Identifier: begin-gen
1462              Identifier: expr: 'util'
1462             Identifier: end-gen
1462             FunctionCall: begin-gen
1462              FunctionCall: expr: 'destroyProgressDialog()'
1462             FunctionCall: end-gen
1462             Member: expr: 'util.destroyProgressDialog()'
1462            Member: end-gen
1462            InstructionCall: line: 'util.destroyProgressDialog()'
1462          <-Source: line: 'util.destroyProgressDialog()'
1462         <--If: line: 'util.destroyProgressDialog()'
1462        <---Source: line: 'util.destroyProgressDialog()'
1462       <----While: line: 'util.destroyProgressDialog()'
1462      <-----Source: line: 'util.destroyProgressDialog()'
1462     <------While: line: 'util.destroyProgressDialog()'
1462    <-------Source: line: 'util.destroyProgressDialog()'
1462   <--------Function: line: 'util.destroyProgressDialog()'
1462  <---------Source: line: 'util.destroyProgressDialog()'
1462 <----------Class: line: 'util.destroyProgressDialog()'
1462<-----------Source: line: 'util.destroyProgressDialog()'
1463           InstructionCall: end-gen
1463           InstructionFlow: begin-gen
1463            Value: begin-gen
1463             Identifier: begin-gen
1463              Identifier: expr: 'False'
1463            <-Value: expr: 'False'
1463             Identifier: end-gen
1463            Value: end-gen
1463            InstructionFlow: line: 'return False'
1463          <-Source: line: 'return False'
1463         <--If: line: 'return False'
1463        <---Source: line: 'return False'
1463       <----While: line: 'return False'
1463      <-----Source: line: 'return False'
1463     <------While: line: 'return False'
1463    <-------Source: line: 'return False'
1463   <--------Function: line: 'return False'
1463  <---------Source: line: 'return False'
1463 <----------Class: line: 'return False'
1463<-----------Source: line: 'return False'
1464           InstructionFlow: end-gen
1464          Source: end-gen
1464          If: end: 'block-if'
1464        <-Source: end: 'block-if'
1464       <--While: end: 'block-if'
1464      <---Source: end: 'block-if'
1464     <----While: end: 'block-if'
1464    <-----Source: end: 'block-if'
1464   <------Function: end: 'block-if'
1464  <-------Source: end: 'block-if'
1464 <--------Class: end: 'block-if'
1464<---------Source: end: 'block-if'
1464         If: end-gen
1464         DeclarationBlock: begin-gen
1464          Variable: begin-gen
1464           Variable: expr: 'qryContactos'
1464           Variable: expr: '='
1464           Value: begin-gen
1464            New: begin-gen
1464             FunctionCall: begin-gen
1464              FunctionCall: expr: 'FLSqlQuery()'
1464            <-New: expr: 'qsatype.FLSqlQuery()'
1464           <--Value: expr: 'qsatype.FLSqlQuery()'
1464          <---Variable: expr: 'qsatype.FLSqlQuery()'
1464             FunctionCall: end-gen
1464            New: end-gen
1464           Value: end-gen
1464          Variable: end-gen
1464          DeclarationBlock: line: 'qryContactos = qsatype.FLSqlQuery()'
1464        <-Source: line: 'qryContactos = qsatype.FLSqlQuery()'
1464       <--While: line: 'qryContactos = qsatype.FLSqlQuery()'
1464      <---Source: line: 'qryContactos = qsatype.FLSqlQuery()'
1464     <----While: line: 'qryContactos = qsatype.FLSqlQuery()'
1464    <-----Source: line: 'qryContactos = qsatype.FLSqlQuery()'
1464   <------Function: line: 'qryContactos = qsatype.FLSqlQuery()'
1464  <-------Source: line: 'qryContactos = qsatype.FLSqlQuery()'
1464 <--------Class: line: 'qryContactos = qsatype.FLSqlQuery()'
1464<---------Source: line: 'qryContactos = qsatype.FLSqlQuery()'
1465         DeclarationBlock: end-gen
1465         InstructionCall: begin-gen
1465          Member: begin-gen
1465           Identifier: begin-gen
1465            Identifier: expr: 'qryContactos'
1465           Identifier: end-gen
1465           FunctionCall: begin-gen
1465            Value: begin-gen
1465             Constant: begin-gen
1465              Constant: ctype: 'String' -> 'crm_contactos,contactosproveedores'
1465              Constant: expr: 'u"crm_contactos,contactosproveedores"'
1465            <-Value: expr: 'u"crm_contactos,contactosproveedores"'
1465             Constant: end-gen
1465            Value: end-gen
1465            FunctionCall: expr: 'setTablesList(u"crm_contactos,contactosproveedores")'
1465           FunctionCall: end-gen
1465           Member: expr: 'qryContactos.setTablesList(u"crm_contactos,contactosproveedores")'
1465          Member: end-gen
1465          InstructionCall: line: 'qryContactos.setTablesList(u"crm_contactos,contactosproveedores")'
1465        <-Source: line: 'qryContactos.setTablesList(u"crm_contactos,contactosproveedores")'
1465       <--While: line: 'qryContactos.setTablesList(u"crm_contactos,contactosproveedores")'
1465      <---Source: line: 'qryContactos.setTablesList(u"crm_contactos,contactosproveedores")'
1465     <----While: line: 'qryContactos.setTablesList(u"crm_contactos,contactosproveedores")'
1465    <-----Source: line: 'qryContactos.setTablesList(u"crm_contactos,contactosproveedores")'
1465   <------Function: line: 'qryContactos.setTablesList(u"crm_contactos,contactosproveedores")'
1465  <-------Source: line: 'qryContactos.setTablesList(u"crm_contactos,contactosproveedores")'
1465 <--------Class: line: 'qryContactos.setTablesList(u"crm_contactos,contactosproveedores")'
1465<---------Source: line: 'qryContactos.setTablesList(u"crm_contactos,contactosproveedores")'
1466         InstructionCall: end-gen
1466         InstructionCall: begin-gen
1466          Member: begin-gen
1466           Identifier: begin-gen
1466            Identifier: expr: 'qryContactos'
1466           Identifier: end-gen
1466           FunctionCall: begin-gen
1466            Value: begin-gen
1466             Constant: begin-gen
1466              Constant: ctype: 'String' -> 'crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto'
1466              Constant: expr: 'u"crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto"'
1466            <-Value: expr: 'u"crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto"'
1466             Constant: end-gen
1466            Value: end-gen
1466            FunctionCall: expr: 'setFrom(u"crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto")'
1466           FunctionCall: end-gen
1466           Member: expr: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto")'
1466          Member: end-gen
1466          InstructionCall: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto")'
1466        <-Source: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto")'
1466       <--While: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto")'
1466      <---Source: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto")'
1466     <----While: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto")'
1466    <-----Source: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto")'
1466   <------Function: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto")'
1466  <-------Source: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto")'
1466 <--------Class: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto")'
1466<---------Source: line: 'qryContactos.setFrom(u"crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto")'
1467         InstructionCall: end-gen
1467         InstructionCall: begin-gen
1467          Member: begin-gen
1467           Identifier: begin-gen
1467            Identifier: expr: 'qryContactos'
1467           Identifier: end-gen
1467           FunctionCall: begin-gen
1467            Value: begin-gen
1467             Constant: begin-gen
1467              Constant: ctype: 'String' -> 'crm_contactos.codcontacto'
1467              Constant: expr: 'u"crm_contactos.codcontacto"'
1467            <-Value: expr: 'u"crm_contactos.codcontacto"'
1467             Constant: end-gen
1467            Value: end-gen
1467            FunctionCall: expr: 'setSelect(u"crm_contactos.codcontacto")'
1467           FunctionCall: end-gen
1467           Member: expr: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1467          Member: end-gen
1467          InstructionCall: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1467        <-Source: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1467       <--While: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1467      <---Source: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1467     <----While: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1467    <-----Source: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1467   <------Function: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1467  <-------Source: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1467 <--------Class: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1467<---------Source: line: 'qryContactos.setSelect(u"crm_contactos.codcontacto")'
1468         InstructionCall: end-gen
1468         InstructionCall: begin-gen
1468          Member: begin-gen
1468           Identifier: begin-gen
1468            Identifier: expr: 'qryContactos'
1468           Identifier: end-gen
1468           FunctionCall: begin-gen
1468            Expression: begin-gen
1468             Expression: expr: 'ustr('
1468             Constant: begin-gen
1468              Constant: ctype: 'String' -> "crm_contactos.nombre = '"
1468              Constant: expr: 'u"crm_contactos.nombre = \'"'
1468            <-Expression: expr: 'u"crm_contactos.nombre = \'"'
1468             Constant: end-gen
1468             Expression: expr: ','
1468             Identifier: begin-gen
1468              Identifier: expr: 'nombreCon'
1468            <-Expression: expr: 'nombreCon'
1468             Identifier: end-gen
1468             Expression: expr: ','
1468             Constant: begin-gen
1468              Constant: ctype: 'String' -> "' AND (contactosproveedores.codproveedor = '"
1468              Constant: expr: 'u"\' AND (contactosproveedores.codproveedor = \'"'
1468            <-Expression: expr: 'u"\' AND (contactosproveedores.codproveedor = \'"'
1468             Constant: end-gen
1468             Expression: expr: ','
1468             Identifier: begin-gen
1468              Identifier: expr: 'codProveedor'
1468            <-Expression: expr: 'codProveedor'
1468             Identifier: end-gen
1468             Expression: expr: ','
1468             Constant: begin-gen
1468              Constant: ctype: 'String' -> "' AND (crm_contactos.email = '"
1468              Constant: expr: 'u"\' AND (crm_contactos.email = \'"'
1468            <-Expression: expr: 'u"\' AND (crm_contactos.email = \'"'
1468             Constant: end-gen
1468             Expression: expr: ','
1468             Identifier: begin-gen
1468              Identifier: expr: 'emailCon'
1468            <-Expression: expr: 'emailCon'
1468             Identifier: end-gen
1468             Expression: expr: ','
1468             Constant: begin-gen
1468              Constant: ctype: 'String' -> "' AND crm_contactos.telefono1 = '"
1468              Constant: expr: 'u"\' AND crm_contactos.telefono1 = \'"'
1468            <-Expression: expr: 'u"\' AND crm_contactos.telefono1 = \'"'
1468             Constant: end-gen
1468             Expression: expr: ','
1468             Identifier: begin-gen
1468              Identifier: expr: 'telefonoCon'
1468            <-Expression: expr: 'telefonoCon'
1468             Identifier: end-gen
1468             Expression: expr: ','
1468             Constant: begin-gen
1468              Constant: ctype: 'String' -> "'))"
1468              Constant: expr: 'u"\'))"'
1468            <-Expression: expr: 'u"\'))"'
1468             Constant: end-gen
1468             Expression: expr: ')'
1468            Expression: end-gen
1468            FunctionCall: expr: 'setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosproveedores.codproveedor = \'" , codProveedor , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1468           FunctionCall: end-gen
1468           Member: expr: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosproveedores.codproveedor = \'" , codProveedor , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1468          Member: end-gen
1468          InstructionCall: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosproveedores.codproveedor = \'" , codProveedor , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1468        <-Source: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosproveedores.codproveedor = \'" , codProveedor , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1468       <--While: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosproveedores.codproveedor = \'" , codProveedor , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1468      <---Source: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosproveedores.codproveedor = \'" , codProveedor , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1468     <----While: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosproveedores.codproveedor = \'" , codProveedor , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1468    <-----Source: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosproveedores.codproveedor = \'" , codProveedor , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1468   <------Function: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosproveedores.codproveedor = \'" , codProveedor , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1468  <-------Source: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosproveedores.codproveedor = \'" , codProveedor , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1468 <--------Class: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosproveedores.codproveedor = \'" , codProveedor , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1468<---------Source: line: 'qryContactos.setWhere(ustr( u"crm_contactos.nombre = \'" , nombreCon , u"\' AND (contactosproveedores.codproveedor = \'" , codProveedor , u"\' AND (crm_contactos.email = \'" , emailCon , u"\' AND crm_contactos.telefono1 = \'" , telefonoCon , u"\'))" ))'
1469         InstructionCall: end-gen
1469         If: begin-gen
1469          Value: begin-gen
1469           OpUnary: begin-gen
1469            OpUnary: expr: 'not'
1469          <-Value: expr: 'not'
1469            Member: begin-gen
1469             Identifier: begin-gen
1469              Identifier: expr: 'qryContactos'
1469             Identifier: end-gen
1469             FunctionCall: begin-gen
1469              FunctionCall: expr: 'exec_()'
1469             FunctionCall: end-gen
1469             Member: expr: 'qryContactos.exec_()'
1469           <-OpUnary: expr: 'qryContactos.exec_()'
1469          <--Value: expr: 'qryContactos.exec_()'
1469            Member: end-gen
1469           OpUnary: end-gen
1469          Value: end-gen
1469          If: line: 'if not qryContactos.exec_():'
1469        <-Source: line: 'if not qryContactos.exec_():'
1469       <--While: line: 'if not qryContactos.exec_():'
1469      <---Source: line: 'if not qryContactos.exec_():'
1469     <----While: line: 'if not qryContactos.exec_():'
1469    <-----Source: line: 'if not qryContactos.exec_():'
1469   <------Function: line: 'if not qryContactos.exec_():'
1469  <-------Source: line: 'if not qryContactos.exec_():'
1469 <--------Class: line: 'if not qryContactos.exec_():'
1469<---------Source: line: 'if not qryContactos.exec_():'
1470          If: begin: 'block-if'
1470        <-Source: begin: 'block-if'
1470       <--While: begin: 'block-if'
1470      <---Source: begin: 'block-if'
1470     <----While: begin: 'block-if'
1470    <-----Source: begin: 'block-if'
1470   <------Function: begin: 'block-if'
1470  <-------Source: begin: 'block-if'
1470 <--------Class: begin: 'block-if'
1470<---------Source: begin: 'block-if'
1470          Source: begin-gen
1470           InstructionCall: begin-gen
1470            Member: begin-gen
1470             Identifier: begin-gen
1470              Identifier: expr: 'util'
1470             Identifier: end-gen
1470             FunctionCall: begin-gen
1470              FunctionCall: expr: 'destroyProgressDialog()'
1470             FunctionCall: end-gen
1470             Member: expr: 'util.destroyProgressDialog()'
1470            Member: end-gen
1470            InstructionCall: line: 'util.destroyProgressDialog()'
1470          <-Source: line: 'util.destroyProgressDialog()'
1470         <--If: line: 'util.destroyProgressDialog()'
1470        <---Source: line: 'util.destroyProgressDialog()'
1470       <----While: line: 'util.destroyProgressDialog()'
1470      <-----Source: line: 'util.destroyProgressDialog()'
1470     <------While: line: 'util.destroyProgressDialog()'
1470    <-------Source: line: 'util.destroyProgressDialog()'
1470   <--------Function: line: 'util.destroyProgressDialog()'
1470  <---------Source: line: 'util.destroyProgressDialog()'
1470 <----------Class: line: 'util.destroyProgressDialog()'
1470<-----------Source: line: 'util.destroyProgressDialog()'
1471           InstructionCall: end-gen
1471           InstructionFlow: begin-gen
1471            Value: begin-gen
1471             Identifier: begin-gen
1471              Identifier: expr: 'False'
1471            <-Value: expr: 'False'
1471             Identifier: end-gen
1471            Value: end-gen
1471            InstructionFlow: line: 'return False'
1471          <-Source: line: 'return False'
1471         <--If: line: 'return False'
1471        <---Source: line: 'return False'
1471       <----While: line: 'return False'
1471      <-----Source: line: 'return False'
1471     <------While: line: 'return False'
1471    <-------Source: line: 'return False'
1471   <--------Function: line: 'return False'
1471  <---------Source: line: 'return False'
1471 <----------Class: line: 'return False'
1471<-----------Source: line: 'return False'
1472           InstructionFlow: end-gen
1472          Source: end-gen
1472          If: end: 'block-if'
1472        <-Source: end: 'block-if'
1472       <--While: end: 'block-if'
1472      <---Source: end: 'block-if'
1472     <----While: end: 'block-if'
1472    <-----Source: end: 'block-if'
1472   <------Function: end: 'block-if'
1472  <-------Source: end: 'block-if'
1472 <--------Class: end: 'block-if'
1472<---------Source: end: 'block-if'
1472         If: end-gen
1472         DeclarationBlock: begin-gen
1472          Variable: begin-gen
1472           Variable: expr: 'codContacto'
1472           Variable: expr: '='
1472           Value: begin-gen
1472            Constant: begin-gen
1472             Constant: ctype: 'String' -> ''
1472             Constant: expr: 'u""'
1472           <-Value: expr: 'u""'
1472          <--Variable: expr: 'u""'
1472            Constant: end-gen
1472           Value: end-gen
1472          Variable: end-gen
1472          DeclarationBlock: line: 'codContacto = u""'
1472        <-Source: line: 'codContacto = u""'
1472       <--While: line: 'codContacto = u""'
1472      <---Source: line: 'codContacto = u""'
1472     <----While: line: 'codContacto = u""'
1472    <-----Source: line: 'codContacto = u""'
1472   <------Function: line: 'codContacto = u""'
1472  <-------Source: line: 'codContacto = u""'
1472 <--------Class: line: 'codContacto = u""'
1472<---------Source: line: 'codContacto = u""'
1473         DeclarationBlock: end-gen
1473         If: begin-gen
1473          Value: begin-gen
1473           Member: begin-gen
1473            Identifier: begin-gen
1473             Identifier: expr: 'qryContactos'
1473            Identifier: end-gen
1473            FunctionCall: begin-gen
1473             FunctionCall: expr: 'first()'
1473            FunctionCall: end-gen
1473            Member: expr: 'qryContactos.first()'
1473          <-Value: expr: 'qryContactos.first()'
1473           Member: end-gen
1473          Value: end-gen
1473          If: line: 'if qryContactos.first():'
1473        <-Source: line: 'if qryContactos.first():'
1473       <--While: line: 'if qryContactos.first():'
1473      <---Source: line: 'if qryContactos.first():'
1473     <----While: line: 'if qryContactos.first():'
1473    <-----Source: line: 'if qryContactos.first():'
1473   <------Function: line: 'if qryContactos.first():'
1473  <-------Source: line: 'if qryContactos.first():'
1473 <--------Class: line: 'if qryContactos.first():'
1473<---------Source: line: 'if qryContactos.first():'
1474          If: begin: 'block-if'
1474        <-Source: begin: 'block-if'
1474       <--While: begin: 'block-if'
1474      <---Source: begin: 'block-if'
1474     <----While: begin: 'block-if'
1474    <-----Source: begin: 'block-if'
1474   <------Function: begin: 'block-if'
1474  <-------Source: begin: 'block-if'
1474 <--------Class: begin: 'block-if'
1474<---------Source: begin: 'block-if'
1474          Source: begin-gen
1474           InstructionUpdate: begin-gen
1474            Identifier: begin-gen
1474             Identifier: expr: 'codContacto'
1474            Identifier: end-gen
1474            OpUpdate: begin-gen
1474             OpUpdate: expr: '='
1474            OpUpdate: end-gen
1474            Value: begin-gen
1474             Member: begin-gen
1474              Identifier: begin-gen
1474               Identifier: expr: 'qryContactos'
1474              Identifier: end-gen
1474              FunctionCall: begin-gen
1474               Value: begin-gen
1474                Constant: begin-gen
1474                 Constant: ctype: 'String' -> 'crm_contactos.codcontacto'
1474                 Constant: expr: 'u"crm_contactos.codcontacto"'
1474               <-Value: expr: 'u"crm_contactos.codcontacto"'
1474                Constant: end-gen
1474               Value: end-gen
1474               FunctionCall: expr: 'value(u"crm_contactos.codcontacto")'
1474              FunctionCall: end-gen
1474              Member: expr: 'qryContactos.value(u"crm_contactos.codcontacto")'
1474            <-Value: expr: 'qryContactos.value(u"crm_contactos.codcontacto")'
1474             Member: end-gen
1474            Value: end-gen
1474            InstructionUpdate: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1474          <-Source: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1474         <--If: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1474        <---Source: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1474       <----While: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1474      <-----Source: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1474     <------While: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1474    <-------Source: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1474   <--------Function: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1474  <---------Source: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1474 <----------Class: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1474<-----------Source: line: 'codContacto = qryContactos.value(u"crm_contactos.codcontacto")'
1475           InstructionUpdate: end-gen
1475          Source: end-gen
1475          If: end: 'block-if'
1475        <-Source: end: 'block-if'
1475       <--While: end: 'block-if'
1475      <---Source: end: 'block-if'
1475     <----While: end: 'block-if'
1475    <-----Source: end: 'block-if'
1475   <------Function: end: 'block-if'
1475  <-------Source: end: 'block-if'
1475 <--------Class: end: 'block-if'
1475<---------Source: end: 'block-if'
1475         If: end-gen
1475         If: begin-gen
1475          Value: begin-gen
1475           OpUnary: begin-gen
1475            OpUnary: expr: 'not'
1475          <-Value: expr: 'not'
1475            Member: begin-gen
1475             Identifier: begin-gen
1475              Identifier: expr: 'self'
1475             Identifier: end-gen
1475             Identifier: begin-gen
1475              Identifier: expr: 'iface'
1475             Identifier: end-gen
1475             FunctionCall: begin-gen
1475              Value: begin-gen
1475               Identifier: begin-gen
1475                Identifier: expr: 'codProveedor'
1475              <-Value: expr: 'codProveedor'
1475               Identifier: end-gen
1475              Value: end-gen
1475              Value: begin-gen
1475               Identifier: begin-gen
1475                Identifier: expr: 'codContacto'
1475              <-Value: expr: 'codContacto'
1475               Identifier: end-gen
1475              Value: end-gen
1475              Value: begin-gen
1475               Identifier: begin-gen
1475                Identifier: expr: 'nombreCon'
1475              <-Value: expr: 'nombreCon'
1475               Identifier: end-gen
1475              Value: end-gen
1475              Value: begin-gen
1475               Identifier: begin-gen
1475                Identifier: expr: 'cargoCon'
1475              <-Value: expr: 'cargoCon'
1475               Identifier: end-gen
1475              Value: end-gen
1475              Value: begin-gen
1475               Identifier: begin-gen
1475                Identifier: expr: 'telefonoCon'
1475              <-Value: expr: 'telefonoCon'
1475               Identifier: end-gen
1475              Value: end-gen
1475              Value: begin-gen
1475               Identifier: begin-gen
1475                Identifier: expr: 'faxCon'
1475              <-Value: expr: 'faxCon'
1475               Identifier: end-gen
1475              Value: end-gen
1475              Value: begin-gen
1475               Identifier: begin-gen
1475                Identifier: expr: 'emailCon'
1475              <-Value: expr: 'emailCon'
1475               Identifier: end-gen
1475              Value: end-gen
1475              Value: begin-gen
1475               Identifier: begin-gen
1475                Identifier: expr: 'idAgenda'
1475              <-Value: expr: 'idAgenda'
1475               Identifier: end-gen
1475              Value: end-gen
1475              FunctionCall: expr: 'actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
1475             FunctionCall: end-gen
1475             Member: expr: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
1475           <-OpUnary: expr: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
1475          <--Value: expr: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda)'
1475            Member: end-gen
1475           OpUnary: end-gen
1475          Value: end-gen
1475          If: line: 'if not self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1475        <-Source: line: 'if not self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1475       <--While: line: 'if not self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1475      <---Source: line: 'if not self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1475     <----While: line: 'if not self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1475    <-----Source: line: 'if not self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1475   <------Function: line: 'if not self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1475  <-------Source: line: 'if not self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1475 <--------Class: line: 'if not self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1475<---------Source: line: 'if not self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, nombreCon, cargoCon, telefonoCon, faxCon, emailCon, idAgenda):'
1476          If: begin: 'block-if'
1476        <-Source: begin: 'block-if'
1476       <--While: begin: 'block-if'
1476      <---Source: begin: 'block-if'
1476     <----While: begin: 'block-if'
1476    <-----Source: begin: 'block-if'
1476   <------Function: begin: 'block-if'
1476  <-------Source: begin: 'block-if'
1476 <--------Class: begin: 'block-if'
1476<---------Source: begin: 'block-if'
1476          Source: begin-gen
1476           InstructionCall: begin-gen
1476            Member: begin-gen
1476             Identifier: begin-gen
1476              Identifier: expr: 'util'
1476             Identifier: end-gen
1476             FunctionCall: begin-gen
1476              FunctionCall: expr: 'destroyProgressDialog()'
1476             FunctionCall: end-gen
1476             Member: expr: 'util.destroyProgressDialog()'
1476            Member: end-gen
1476            InstructionCall: line: 'util.destroyProgressDialog()'
1476          <-Source: line: 'util.destroyProgressDialog()'
1476         <--If: line: 'util.destroyProgressDialog()'
1476        <---Source: line: 'util.destroyProgressDialog()'
1476       <----While: line: 'util.destroyProgressDialog()'
1476      <-----Source: line: 'util.destroyProgressDialog()'
1476     <------While: line: 'util.destroyProgressDialog()'
1476    <-------Source: line: 'util.destroyProgressDialog()'
1476   <--------Function: line: 'util.destroyProgressDialog()'
1476  <---------Source: line: 'util.destroyProgressDialog()'
1476 <----------Class: line: 'util.destroyProgressDialog()'
1476<-----------Source: line: 'util.destroyProgressDialog()'
1477           InstructionCall: end-gen
1477           InstructionFlow: begin-gen
1477            Value: begin-gen
1477             Identifier: begin-gen
1477              Identifier: expr: 'False'
1477            <-Value: expr: 'False'
1477             Identifier: end-gen
1477            Value: end-gen
1477            InstructionFlow: line: 'return False'
1477          <-Source: line: 'return False'
1477         <--If: line: 'return False'
1477        <---Source: line: 'return False'
1477       <----While: line: 'return False'
1477      <-----Source: line: 'return False'
1477     <------While: line: 'return False'
1477    <-------Source: line: 'return False'
1477   <--------Function: line: 'return False'
1477  <---------Source: line: 'return False'
1477 <----------Class: line: 'return False'
1477<-----------Source: line: 'return False'
1478           InstructionFlow: end-gen
1478          Source: end-gen
1478          If: end: 'block-if'
1478        <-Source: end: 'block-if'
1478       <--While: end: 'block-if'
1478      <---Source: end: 'block-if'
1478     <----While: end: 'block-if'
1478    <-----Source: end: 'block-if'
1478   <------Function: end: 'block-if'
1478  <-------Source: end: 'block-if'
1478 <--------Class: end: 'block-if'
1478<---------Source: end: 'block-if'
1478         If: end-gen
1478        Source: end-gen
1478        While: end: 'block-while'
1478      <-Source: end: 'block-while'
1478     <--While: end: 'block-while'
1478    <---Source: end: 'block-while'
1478   <----Function: end: 'block-while'
1478  <-----Source: end: 'block-while'
1478 <------Class: end: 'block-while'
1478<-------Source: end: 'block-while'
1478       While: end-gen
1478       If: begin-gen
1478        Expression: begin-gen
1478         Parentheses: begin-gen
1478          Parentheses: expr: '('
1478        <-Expression: expr: '('
1478          Member: begin-gen
1478           Identifier: begin-gen
1478            Identifier: expr: 'qryProveedores'
1478           Identifier: end-gen
1478           FunctionCall: begin-gen
1478            Value: begin-gen
1478             Constant: begin-gen
1478              Constant: ctype: 'String' -> 'contacto'
1478              Constant: expr: 'u"contacto"'
1478            <-Value: expr: 'u"contacto"'
1478             Constant: end-gen
1478            Value: end-gen
1478            FunctionCall: expr: 'value(u"contacto")'
1478           FunctionCall: end-gen
1478           Member: expr: 'qryProveedores.value(u"contacto")'
1478         <-Parentheses: expr: 'qryProveedores.value(u"contacto")'
1478        <--Expression: expr: 'qryProveedores.value(u"contacto")'
1478          Member: end-gen
1478          Compare: begin-gen
1478           Compare: expr: 'and'
1478         <-Parentheses: expr: 'and'
1478        <--Expression: expr: 'and'
1478          Compare: end-gen
1478          Member: begin-gen
1478           Identifier: begin-gen
1478            Identifier: expr: 'qryProveedores'
1478           Identifier: end-gen
1478           FunctionCall: begin-gen
1478            Value: begin-gen
1478             Constant: begin-gen
1478              Constant: ctype: 'String' -> 'contacto'
1478              Constant: expr: 'u"contacto"'
1478            <-Value: expr: 'u"contacto"'
1478             Constant: end-gen
1478            Value: end-gen
1478            FunctionCall: expr: 'value(u"contacto")'
1478           FunctionCall: end-gen
1478           Member: expr: 'qryProveedores.value(u"contacto")'
1478         <-Parentheses: expr: 'qryProveedores.value(u"contacto")'
1478        <--Expression: expr: 'qryProveedores.value(u"contacto")'
1478          Member: end-gen
1478          Compare: begin-gen
1478           Compare: expr: '!='
1478         <-Parentheses: expr: '!='
1478        <--Expression: expr: '!='
1478          Compare: end-gen
1478          Constant: begin-gen
1478           Constant: ctype: 'String' -> ''
1478           Constant: expr: 'u""'
1478         <-Parentheses: expr: 'u""'
1478        <--Expression: expr: 'u""'
1478          Constant: end-gen
1478          Parentheses: expr: ')'
1478        <-Expression: expr: ')'
1478         Parentheses: end-gen
1478         Compare: begin-gen
1478          Compare: expr: 'and'
1478        <-Expression: expr: 'and'
1478         Compare: end-gen
1478         Parentheses: begin-gen
1478          Parentheses: expr: '('
1478        <-Expression: expr: '('
1478          OpUnary: begin-gen
1478           OpUnary: expr: 'not'
1478         <-Parentheses: expr: 'not'
1478        <--Expression: expr: 'not'
1478           Member: begin-gen
1478            Identifier: begin-gen
1478             Identifier: expr: 'qryProveedores'
1478            Identifier: end-gen
1478            FunctionCall: begin-gen
1478             Value: begin-gen
1478              Constant: begin-gen
1478               Constant: ctype: 'String' -> 'codcontacto'
1478               Constant: expr: 'u"codcontacto"'
1478             <-Value: expr: 'u"codcontacto"'
1478              Constant: end-gen
1478             Value: end-gen
1478             FunctionCall: expr: 'value(u"codcontacto")'
1478            FunctionCall: end-gen
1478            Member: expr: 'qryProveedores.value(u"codcontacto")'
1478          <-OpUnary: expr: 'qryProveedores.value(u"codcontacto")'
1478         <--Parentheses: expr: 'qryProveedores.value(u"codcontacto")'
1478        <---Expression: expr: 'qryProveedores.value(u"codcontacto")'
1478           Member: end-gen
1478          OpUnary: end-gen
1478          Compare: begin-gen
1478           Compare: expr: 'or'
1478         <-Parentheses: expr: 'or'
1478        <--Expression: expr: 'or'
1478          Compare: end-gen
1478          Member: begin-gen
1478           Identifier: begin-gen
1478            Identifier: expr: 'qryProveedores'
1478           Identifier: end-gen
1478           FunctionCall: begin-gen
1478            Value: begin-gen
1478             Constant: begin-gen
1478              Constant: ctype: 'String' -> 'codcontacto'
1478              Constant: expr: 'u"codcontacto"'
1478            <-Value: expr: 'u"codcontacto"'
1478             Constant: end-gen
1478            Value: end-gen
1478            FunctionCall: expr: 'value(u"codcontacto")'
1478           FunctionCall: end-gen
1478           Member: expr: 'qryProveedores.value(u"codcontacto")'
1478         <-Parentheses: expr: 'qryProveedores.value(u"codcontacto")'
1478        <--Expression: expr: 'qryProveedores.value(u"codcontacto")'
1478          Member: end-gen
1478          Compare: begin-gen
1478           Compare: expr: '=='
1478         <-Parentheses: expr: '=='
1478        <--Expression: expr: '=='
1478          Compare: end-gen
1478          Constant: begin-gen
1478           Constant: ctype: 'String' -> ''
1478           Constant: expr: 'u""'
1478         <-Parentheses: expr: 'u""'
1478        <--Expression: expr: 'u""'
1478          Constant: end-gen
1478          Parentheses: expr: ')'
1478        <-Expression: expr: ')'
1478         Parentheses: end-gen
1478        Expression: end-gen
1478        If: line: 'if ( qryProveedores.value(u"contacto") and qryProveedores.value(u"contacto") != u"" ) and ( not qryProveedores.value(u"codcontacto") or qryProveedores.value(u"codcontacto") == u"" ):'
1478      <-Source: line: 'if ( qryProveedores.value(u"contacto") and qryProveedores.value(u"contacto") != u"" ) and ( not qryProveedores.value(u"codcontacto") or qryProveedores.value(u"codcontacto") == u"" ):'
1478     <--While: line: 'if ( qryProveedores.value(u"contacto") and qryProveedores.value(u"contacto") != u"" ) and ( not qryProveedores.value(u"codcontacto") or qryProveedores.value(u"codcontacto") == u"" ):'
1478    <---Source: line: 'if ( qryProveedores.value(u"contacto") and qryProveedores.value(u"contacto") != u"" ) and ( not qryProveedores.value(u"codcontacto") or qryProveedores.value(u"codcontacto") == u"" ):'
1478   <----Function: line: 'if ( qryProveedores.value(u"contacto") and qryProveedores.value(u"contacto") != u"" ) and ( not qryProveedores.value(u"codcontacto") or qryProveedores.value(u"codcontacto") == u"" ):'
1478  <-----Source: line: 'if ( qryProveedores.value(u"contacto") and qryProveedores.value(u"contacto") != u"" ) and ( not qryProveedores.value(u"codcontacto") or qryProveedores.value(u"codcontacto") == u"" ):'
1478 <------Class: line: 'if ( qryProveedores.value(u"contacto") and qryProveedores.value(u"contacto") != u"" ) and ( not qryProveedores.value(u"codcontacto") or qryProveedores.value(u"codcontacto") == u"" ):'
1478<-------Source: line: 'if ( qryProveedores.value(u"contacto") and qryProveedores.value(u"contacto") != u"" ) and ( not qryProveedores.value(u"codcontacto") or qryProveedores.value(u"codcontacto") == u"" ):'
1480        If: begin: 'block-if'
1480      <-Source: begin: 'block-if'
1480     <--While: begin: 'block-if'
1480    <---Source: begin: 'block-if'
1480   <----Function: begin: 'block-if'
1480  <-----Source: begin: 'block-if'
1480 <------Class: begin: 'block-if'
1480<-------Source: begin: 'block-if'
1480        Source: begin-gen
1480         InstructionUpdate: begin-gen
1480          Identifier: begin-gen
1480           Identifier: expr: 'codContacto'
1480          Identifier: end-gen
1480          OpUpdate: begin-gen
1480           OpUpdate: expr: '='
1480          OpUpdate: end-gen
1480          Value: begin-gen
1480           Member: begin-gen
1480            Identifier: begin-gen
1480             Identifier: expr: 'util'
1480            Identifier: end-gen
1480            FunctionCall: begin-gen
1480             Value: begin-gen
1480              Constant: begin-gen
1480               Constant: ctype: 'String' -> 'crm_contactos'
1480               Constant: expr: 'u"crm_contactos"'
1480             <-Value: expr: 'u"crm_contactos"'
1480              Constant: end-gen
1480             Value: end-gen
1480             Value: begin-gen
1480              Constant: begin-gen
1480               Constant: ctype: 'String' -> 'codcontacto'
1480               Constant: expr: 'u"codcontacto"'
1480             <-Value: expr: 'u"codcontacto"'
1480              Constant: end-gen
1480             Value: end-gen
1480             Expression: begin-gen
1480              Expression: expr: 'ustr('
1480              Constant: begin-gen
1480               Constant: ctype: 'String' -> "nombre = '"
1480               Constant: expr: 'u"nombre = \'"'
1480             <-Expression: expr: 'u"nombre = \'"'
1480              Constant: end-gen
1480              Expression: expr: ','
1480              Member: begin-gen
1480               Identifier: begin-gen
1480                Identifier: expr: 'qryProveedores'
1480               Identifier: end-gen
1480               FunctionCall: begin-gen
1480                Value: begin-gen
1480                 Constant: begin-gen
1480                  Constant: ctype: 'String' -> 'contacto'
1480                  Constant: expr: 'u"contacto"'
1480                <-Value: expr: 'u"contacto"'
1480                 Constant: end-gen
1480                Value: end-gen
1480                FunctionCall: expr: 'value(u"contacto")'
1480               FunctionCall: end-gen
1480               Member: expr: 'qryProveedores.value(u"contacto")'
1480             <-Expression: expr: 'qryProveedores.value(u"contacto")'
1480              Member: end-gen
1480              Expression: expr: ','
1480              Constant: begin-gen
1480               Constant: ctype: 'String' -> "'"
1480               Constant: expr: 'u"\'"'
1480             <-Expression: expr: 'u"\'"'
1480              Constant: end-gen
1480              Expression: expr: ')'
1480             Expression: end-gen
1480             FunctionCall: expr: 'sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , qryProveedores.value(u"contacto") , u"\'" ))'
1480            FunctionCall: end-gen
1480            Member: expr: 'util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , qryProveedores.value(u"contacto") , u"\'" ))'
1480          <-Value: expr: 'util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , qryProveedores.value(u"contacto") , u"\'" ))'
1480           Member: end-gen
1480          Value: end-gen
1480          InstructionUpdate: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , qryProveedores.value(u"contacto") , u"\'" ))'
1480        <-Source: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , qryProveedores.value(u"contacto") , u"\'" ))'
1480       <--If: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , qryProveedores.value(u"contacto") , u"\'" ))'
1480      <---Source: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , qryProveedores.value(u"contacto") , u"\'" ))'
1480     <----While: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , qryProveedores.value(u"contacto") , u"\'" ))'
1480    <-----Source: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , qryProveedores.value(u"contacto") , u"\'" ))'
1480   <------Function: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , qryProveedores.value(u"contacto") , u"\'" ))'
1480  <-------Source: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , qryProveedores.value(u"contacto") , u"\'" ))'
1480 <--------Class: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , qryProveedores.value(u"contacto") , u"\'" ))'
1480<---------Source: line: 'codContacto = util.sqlSelect(u"crm_contactos", u"codcontacto", ustr( u"nombre = \'" , qryProveedores.value(u"contacto") , u"\'" ))'
1481         InstructionUpdate: end-gen
1481         If: begin-gen
1481          Value: begin-gen
1481           Identifier: begin-gen
1481            Identifier: expr: 'codContacto'
1481          <-Value: expr: 'codContacto'
1481           Identifier: end-gen
1481          Value: end-gen
1481          If: line: 'if codContacto:'
1481        <-Source: line: 'if codContacto:'
1481       <--If: line: 'if codContacto:'
1481      <---Source: line: 'if codContacto:'
1481     <----While: line: 'if codContacto:'
1481    <-----Source: line: 'if codContacto:'
1481   <------Function: line: 'if codContacto:'
1481  <-------Source: line: 'if codContacto:'
1481 <--------Class: line: 'if codContacto:'
1481<---------Source: line: 'if codContacto:'
1482          If: begin: 'block-if'
1482        <-Source: begin: 'block-if'
1482       <--If: begin: 'block-if'
1482      <---Source: begin: 'block-if'
1482     <----While: begin: 'block-if'
1482    <-----Source: begin: 'block-if'
1482   <------Function: begin: 'block-if'
1482  <-------Source: begin: 'block-if'
1482 <--------Class: begin: 'block-if'
1482<---------Source: begin: 'block-if'
1482          Source: begin-gen
1482           InstructionCall: begin-gen
1482            Member: begin-gen
1482             Identifier: begin-gen
1482              Identifier: expr: 'self'
1482             Identifier: end-gen
1482             Identifier: begin-gen
1482              Identifier: expr: 'iface'
1482             Identifier: end-gen
1482             FunctionCall: begin-gen
1482              Value: begin-gen
1482               Identifier: begin-gen
1482                Identifier: expr: 'codProveedor'
1482              <-Value: expr: 'codProveedor'
1482               Identifier: end-gen
1482              Value: end-gen
1482              Value: begin-gen
1482               Identifier: begin-gen
1482                Identifier: expr: 'codContacto'
1482              <-Value: expr: 'codContacto'
1482               Identifier: end-gen
1482              Value: end-gen
1482              Value: begin-gen
1482               Member: begin-gen
1482                Identifier: begin-gen
1482                 Identifier: expr: 'qryProveedores'
1482                Identifier: end-gen
1482                FunctionCall: begin-gen
1482                 Value: begin-gen
1482                  Constant: begin-gen
1482                   Constant: ctype: 'String' -> 'contacto'
1482                   Constant: expr: 'u"contacto"'
1482                 <-Value: expr: 'u"contacto"'
1482                  Constant: end-gen
1482                 Value: end-gen
1482                 FunctionCall: expr: 'value(u"contacto")'
1482                FunctionCall: end-gen
1482                Member: expr: 'qryProveedores.value(u"contacto")'
1482              <-Value: expr: 'qryProveedores.value(u"contacto")'
1482               Member: end-gen
1482              Value: end-gen
1482              FunctionCall: expr: 'actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, qryProveedores.value(u"contacto"))'
1482             FunctionCall: end-gen
1482             Member: expr: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, qryProveedores.value(u"contacto"))'
1482            Member: end-gen
1482            InstructionCall: line: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, qryProveedores.value(u"contacto"))'
1482          <-Source: line: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, qryProveedores.value(u"contacto"))'
1482         <--If: line: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, qryProveedores.value(u"contacto"))'
1482        <---Source: line: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, qryProveedores.value(u"contacto"))'
1482       <----If: line: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, qryProveedores.value(u"contacto"))'
1482      <-----Source: line: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, qryProveedores.value(u"contacto"))'
1482     <------While: line: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, qryProveedores.value(u"contacto"))'
1482    <-------Source: line: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, qryProveedores.value(u"contacto"))'
1482   <--------Function: line: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, qryProveedores.value(u"contacto"))'
1482  <---------Source: line: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, qryProveedores.value(u"contacto"))'
1482 <----------Class: line: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, qryProveedores.value(u"contacto"))'
1482<-----------Source: line: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, codContacto, qryProveedores.value(u"contacto"))'
1483           InstructionCall: end-gen
1483          Source: end-gen
1483          If: end: 'block-if'
1483        <-Source: end: 'block-if'
1483       <--If: end: 'block-if'
1483      <---Source: end: 'block-if'
1483     <----While: end: 'block-if'
1483    <-----Source: end: 'block-if'
1483   <------Function: end: 'block-if'
1483  <-------Source: end: 'block-if'
1483 <--------Class: end: 'block-if'
1483<---------Source: end: 'block-if'
1483          If: line: 'else:'
1483        <-Source: line: 'else:'
1483       <--If: line: 'else:'
1483      <---Source: line: 'else:'
1483     <----While: line: 'else:'
1483    <-----Source: line: 'else:'
1483   <------Function: line: 'else:'
1483  <-------Source: line: 'else:'
1483 <--------Class: line: 'else:'
1483<---------Source: line: 'else:'
1484          If: begin: 'block-else'
1484        <-Source: begin: 'block-else'
1484       <--If: begin: 'block-else'
1484      <---Source: begin: 'block-else'
1484     <----While: begin: 'block-else'
1484    <-----Source: begin: 'block-else'
1484   <------Function: begin: 'block-else'
1484  <-------Source: begin: 'block-else'
1484 <--------Class: begin: 'block-else'
1484<---------Source: begin: 'block-else'
1484          Source: begin-gen
1484           InstructionUpdate: begin-gen
1484            Identifier: begin-gen
1484             Identifier: expr: 'codContacto'
1484            Identifier: end-gen
1484            OpUpdate: begin-gen
1484             OpUpdate: expr: '='
1484            OpUpdate: end-gen
1484            Value: begin-gen
1484             Member: begin-gen
1484              Identifier: begin-gen
1484               Identifier: expr: 'self'
1484              Identifier: end-gen
1484              Identifier: begin-gen
1484               Identifier: expr: 'iface'
1484              Identifier: end-gen
1484              FunctionCall: begin-gen
1484               Value: begin-gen
1484                Identifier: begin-gen
1484                 Identifier: expr: 'codProveedor'
1484               <-Value: expr: 'codProveedor'
1484                Identifier: end-gen
1484               Value: end-gen
1484               Value: begin-gen
1484                Constant: begin-gen
1484                 Constant: ctype: 'String' -> ''
1484                 Constant: expr: 'u""'
1484               <-Value: expr: 'u""'
1484                Constant: end-gen
1484               Value: end-gen
1484               Value: begin-gen
1484                Member: begin-gen
1484                 Identifier: begin-gen
1484                  Identifier: expr: 'qryProveedores'
1484                 Identifier: end-gen
1484                 FunctionCall: begin-gen
1484                  Value: begin-gen
1484                   Constant: begin-gen
1484                    Constant: ctype: 'String' -> 'contacto'
1484                    Constant: expr: 'u"contacto"'
1484                  <-Value: expr: 'u"contacto"'
1484                   Constant: end-gen
1484                  Value: end-gen
1484                  FunctionCall: expr: 'value(u"contacto")'
1484                 FunctionCall: end-gen
1484                 Member: expr: 'qryProveedores.value(u"contacto")'
1484               <-Value: expr: 'qryProveedores.value(u"contacto")'
1484                Member: end-gen
1484               Value: end-gen
1484               FunctionCall: expr: 'actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1484              FunctionCall: end-gen
1484              Member: expr: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1484            <-Value: expr: 'self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1484             Member: end-gen
1484            Value: end-gen
1484            InstructionUpdate: line: 'codContacto = self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1484          <-Source: line: 'codContacto = self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1484         <--If: line: 'codContacto = self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1484        <---Source: line: 'codContacto = self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1484       <----If: line: 'codContacto = self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1484      <-----Source: line: 'codContacto = self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1484     <------While: line: 'codContacto = self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1484    <-------Source: line: 'codContacto = self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1484   <--------Function: line: 'codContacto = self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1484  <---------Source: line: 'codContacto = self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1484 <----------Class: line: 'codContacto = self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1484<-----------Source: line: 'codContacto = self.iface.actualizarContactosDeAgendaProv20070702(codProveedor, u"", qryProveedores.value(u"contacto"))'
1485           InstructionUpdate: end-gen
1485          Source: end-gen
1485          If: end: 'block-else'
1485        <-Source: end: 'block-else'
1485       <--If: end: 'block-else'
1485      <---Source: end: 'block-else'
1485     <----While: end: 'block-else'
1485    <-----Source: end: 'block-else'
1485   <------Function: end: 'block-else'
1485  <-------Source: end: 'block-else'
1485 <--------Class: end: 'block-else'
1485<---------Source: end: 'block-else'
1486         If: end-gen
1486         If: begin-gen
1486          Value: begin-gen
1486           OpUnary: begin-gen
1486            OpUnary: expr: 'not'
1486          <-Value: expr: 'not'
1486            Identifier: begin-gen
1486             Identifier: expr: 'codContacto'
1486           <-OpUnary: expr: 'codContacto'
1486          <--Value: expr: 'codContacto'
1486            Identifier: end-gen
1486           OpUnary: end-gen
1486          Value: end-gen
1486          If: line: 'if not codContacto:'
1486        <-Source: line: 'if not codContacto:'
1486       <--If: line: 'if not codContacto:'
1486      <---Source: line: 'if not codContacto:'
1486     <----While: line: 'if not codContacto:'
1486    <-----Source: line: 'if not codContacto:'
1486   <------Function: line: 'if not codContacto:'
1486  <-------Source: line: 'if not codContacto:'
1486 <--------Class: line: 'if not codContacto:'
1486<---------Source: line: 'if not codContacto:'
1487          If: begin: 'block-if'
1487        <-Source: begin: 'block-if'
1487       <--If: begin: 'block-if'
1487      <---Source: begin: 'block-if'
1487     <----While: begin: 'block-if'
1487    <-----Source: begin: 'block-if'
1487   <------Function: begin: 'block-if'
1487  <-------Source: begin: 'block-if'
1487 <--------Class: begin: 'block-if'
1487<---------Source: begin: 'block-if'
1487          Source: begin-gen
1487           InstructionCall: begin-gen
1487            Member: begin-gen
1487             Identifier: begin-gen
1487              Identifier: expr: 'util'
1487             Identifier: end-gen
1487             FunctionCall: begin-gen
1487              FunctionCall: expr: 'destroyProgressDialog()'
1487             FunctionCall: end-gen
1487             Member: expr: 'util.destroyProgressDialog()'
1487            Member: end-gen
1487            InstructionCall: line: 'util.destroyProgressDialog()'
1487          <-Source: line: 'util.destroyProgressDialog()'
1487         <--If: line: 'util.destroyProgressDialog()'
1487        <---Source: line: 'util.destroyProgressDialog()'
1487       <----If: line: 'util.destroyProgressDialog()'
1487      <-----Source: line: 'util.destroyProgressDialog()'
1487     <------While: line: 'util.destroyProgressDialog()'
1487    <-------Source: line: 'util.destroyProgressDialog()'
1487   <--------Function: line: 'util.destroyProgressDialog()'
1487  <---------Source: line: 'util.destroyProgressDialog()'
1487 <----------Class: line: 'util.destroyProgressDialog()'
1487<-----------Source: line: 'util.destroyProgressDialog()'
1488           InstructionCall: end-gen
1488           InstructionFlow: begin-gen
1488            Value: begin-gen
1488             Identifier: begin-gen
1488              Identifier: expr: 'False'
1488            <-Value: expr: 'False'
1488             Identifier: end-gen
1488            Value: end-gen
1488            InstructionFlow: line: 'return False'
1488          <-Source: line: 'return False'
1488         <--If: line: 'return False'
1488        <---Source: line: 'return False'
1488       <----If: line: 'return False'
1488      <-----Source: line: 'return False'
1488     <------While: line: 'return False'
1488    <-------Source: line: 'return False'
1488   <--------Function: line: 'return False'
1488  <---------Source: line: 'return False'
1488 <----------Class: line: 'return False'
1488<-----------Source: line: 'return False'
1489           InstructionFlow: end-gen
1489          Source: end-gen
1489          If: end: 'block-if'
1489        <-Source: end: 'block-if'
1489       <--If: end: 'block-if'
1489      <---Source: end: 'block-if'
1489     <----While: end: 'block-if'
1489    <-----Source: end: 'block-if'
1489   <------Function: end: 'block-if'
1489  <-------Source: end: 'block-if'
1489 <--------Class: end: 'block-if'
1489<---------Source: end: 'block-if'
1489         If: end-gen
1489         DeclarationBlock: begin-gen
1489          Variable: begin-gen
1489           Variable: expr: 'curProveedor'
1489           Variable: expr: '='
1489           Value: begin-gen
1489            New: begin-gen
1489             FunctionCall: begin-gen
1489              Value: begin-gen
1489               Constant: begin-gen
1489                Constant: ctype: 'String' -> 'proveedores'
1489                Constant: expr: 'u"proveedores"'
1489              <-Value: expr: 'u"proveedores"'
1489               Constant: end-gen
1489              Value: end-gen
1489              FunctionCall: expr: 'FLSqlCursor(u"proveedores")'
1489            <-New: expr: 'qsatype.FLSqlCursor(u"proveedores")'
1489           <--Value: expr: 'qsatype.FLSqlCursor(u"proveedores")'
1489          <---Variable: expr: 'qsatype.FLSqlCursor(u"proveedores")'
1489             FunctionCall: end-gen
1489            New: end-gen
1489           Value: end-gen
1489          Variable: end-gen
1489          DeclarationBlock: line: 'curProveedor = qsatype.FLSqlCursor(u"proveedores")'
1489        <-Source: line: 'curProveedor = qsatype.FLSqlCursor(u"proveedores")'
1489       <--If: line: 'curProveedor = qsatype.FLSqlCursor(u"proveedores")'
1489      <---Source: line: 'curProveedor = qsatype.FLSqlCursor(u"proveedores")'
1489     <----While: line: 'curProveedor = qsatype.FLSqlCursor(u"proveedores")'
1489    <-----Source: line: 'curProveedor = qsatype.FLSqlCursor(u"proveedores")'
1489   <------Function: line: 'curProveedor = qsatype.FLSqlCursor(u"proveedores")'
1489  <-------Source: line: 'curProveedor = qsatype.FLSqlCursor(u"proveedores")'
1489 <--------Class: line: 'curProveedor = qsatype.FLSqlCursor(u"proveedores")'
1489<---------Source: line: 'curProveedor = qsatype.FLSqlCursor(u"proveedores")'
1490         DeclarationBlock: end-gen
1490         InstructionCall: begin-gen
1490          Member: begin-gen
1490           Identifier: begin-gen
1490            Identifier: expr: 'curProveedor'
1490           Identifier: end-gen
1490           FunctionCall: begin-gen
1490            Expression: begin-gen
1490             Expression: expr: 'ustr('
1490             Constant: begin-gen
1490              Constant: ctype: 'String' -> "codproveedor = '"
1490              Constant: expr: 'u"codproveedor = \'"'
1490            <-Expression: expr: 'u"codproveedor = \'"'
1490             Constant: end-gen
1490             Expression: expr: ','
1490             Identifier: begin-gen
1490              Identifier: expr: 'codProveedor'
1490            <-Expression: expr: 'codProveedor'
1490             Identifier: end-gen
1490             Expression: expr: ','
1490             Constant: begin-gen
1490              Constant: ctype: 'String' -> "'"
1490              Constant: expr: 'u"\'"'
1490            <-Expression: expr: 'u"\'"'
1490             Constant: end-gen
1490             Expression: expr: ')'
1490            Expression: end-gen
1490            FunctionCall: expr: 'select(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1490           FunctionCall: end-gen
1490           Member: expr: 'curProveedor.select(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1490          Member: end-gen
1490          InstructionCall: line: 'curProveedor.select(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1490        <-Source: line: 'curProveedor.select(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1490       <--If: line: 'curProveedor.select(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1490      <---Source: line: 'curProveedor.select(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1490     <----While: line: 'curProveedor.select(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1490    <-----Source: line: 'curProveedor.select(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1490   <------Function: line: 'curProveedor.select(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1490  <-------Source: line: 'curProveedor.select(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1490 <--------Class: line: 'curProveedor.select(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1490<---------Source: line: 'curProveedor.select(ustr( u"codproveedor = \'" , codProveedor , u"\'" ))'
1491         InstructionCall: end-gen
1491         InstructionCall: begin-gen
1491          Member: begin-gen
1491           Identifier: begin-gen
1491            Identifier: expr: 'curProveedor'
1491           Identifier: end-gen
1491           FunctionCall: begin-gen
1491            Value: begin-gen
1491             Member: begin-gen
1491              Identifier: begin-gen
1491               Identifier: expr: 'curProveedor'
1491              Identifier: end-gen
1491              Identifier: begin-gen
1491               Identifier: expr: 'Edit'
1491              Identifier: end-gen
1491              Member: expr: 'curProveedor.Edit'
1491            <-Value: expr: 'curProveedor.Edit'
1491             Member: end-gen
1491            Value: end-gen
1491            FunctionCall: expr: 'setModeAccess(curProveedor.Edit)'
1491           FunctionCall: end-gen
1491           Member: expr: 'curProveedor.setModeAccess(curProveedor.Edit)'
1491          Member: end-gen
1491          InstructionCall: line: 'curProveedor.setModeAccess(curProveedor.Edit)'
1491        <-Source: line: 'curProveedor.setModeAccess(curProveedor.Edit)'
1491       <--If: line: 'curProveedor.setModeAccess(curProveedor.Edit)'
1491      <---Source: line: 'curProveedor.setModeAccess(curProveedor.Edit)'
1491     <----While: line: 'curProveedor.setModeAccess(curProveedor.Edit)'
1491    <-----Source: line: 'curProveedor.setModeAccess(curProveedor.Edit)'
1491   <------Function: line: 'curProveedor.setModeAccess(curProveedor.Edit)'
1491  <-------Source: line: 'curProveedor.setModeAccess(curProveedor.Edit)'
1491 <--------Class: line: 'curProveedor.setModeAccess(curProveedor.Edit)'
1491<---------Source: line: 'curProveedor.setModeAccess(curProveedor.Edit)'
1492         InstructionCall: end-gen
1492         If: begin-gen
1492          Value: begin-gen
1492           OpUnary: begin-gen
1492            OpUnary: expr: 'not'
1492          <-Value: expr: 'not'
1492            Member: begin-gen
1492             Identifier: begin-gen
1492              Identifier: expr: 'curProveedor'
1492             Identifier: end-gen
1492             FunctionCall: begin-gen
1492              FunctionCall: expr: 'first()'
1492             FunctionCall: end-gen
1492             Member: expr: 'curProveedor.first()'
1492           <-OpUnary: expr: 'curProveedor.first()'
1492          <--Value: expr: 'curProveedor.first()'
1492            Member: end-gen
1492           OpUnary: end-gen
1492          Value: end-gen
1492          If: line: 'if not curProveedor.first():'
1492        <-Source: line: 'if not curProveedor.first():'
1492       <--If: line: 'if not curProveedor.first():'
1492      <---Source: line: 'if not curProveedor.first():'
1492     <----While: line: 'if not curProveedor.first():'
1492    <-----Source: line: 'if not curProveedor.first():'
1492   <------Function: line: 'if not curProveedor.first():'
1492  <-------Source: line: 'if not curProveedor.first():'
1492 <--------Class: line: 'if not curProveedor.first():'
1492<---------Source: line: 'if not curProveedor.first():'
1493          If: begin: 'block-if'
1493        <-Source: begin: 'block-if'
1493       <--If: begin: 'block-if'
1493      <---Source: begin: 'block-if'
1493     <----While: begin: 'block-if'
1493    <-----Source: begin: 'block-if'
1493   <------Function: begin: 'block-if'
1493  <-------Source: begin: 'block-if'
1493 <--------Class: begin: 'block-if'
1493<---------Source: begin: 'block-if'
1493          Source: begin-gen
1493           InstructionCall: begin-gen
1493            Member: begin-gen
1493             Identifier: begin-gen
1493              Identifier: expr: 'util'
1493             Identifier: end-gen
1493             FunctionCall: begin-gen
1493              FunctionCall: expr: 'destroyProgressDialog()'
1493             FunctionCall: end-gen
1493             Member: expr: 'util.destroyProgressDialog()'
1493            Member: end-gen
1493            InstructionCall: line: 'util.destroyProgressDialog()'
1493          <-Source: line: 'util.destroyProgressDialog()'
1493         <--If: line: 'util.destroyProgressDialog()'
1493        <---Source: line: 'util.destroyProgressDialog()'
1493       <----If: line: 'util.destroyProgressDialog()'
1493      <-----Source: line: 'util.destroyProgressDialog()'
1493     <------While: line: 'util.destroyProgressDialog()'
1493    <-------Source: line: 'util.destroyProgressDialog()'
1493   <--------Function: line: 'util.destroyProgressDialog()'
1493  <---------Source: line: 'util.destroyProgressDialog()'
1493 <----------Class: line: 'util.destroyProgressDialog()'
1493<-----------Source: line: 'util.destroyProgressDialog()'
1494           InstructionCall: end-gen
1494           InstructionFlow: begin-gen
1494            Value: begin-gen
1494             Identifier: begin-gen
1494              Identifier: expr: 'False'
1494            <-Value: expr: 'False'
1494             Identifier: end-gen
1494            Value: end-gen
1494            InstructionFlow: line: 'return False'
1494          <-Source: line: 'return False'
1494         <--If: line: 'return False'
1494        <---Source: line: 'return False'
1494       <----If: line: 'return False'
1494      <-----Source: line: 'return False'
1494     <------While: line: 'return False'
1494    <-------Source: line: 'return False'
1494   <--------Function: line: 'return False'
1494  <---------Source: line: 'return False'
1494 <----------Class: line: 'return False'
1494<-----------Source: line: 'return False'
1495           InstructionFlow: end-gen
1495          Source: end-gen
1495          If: end: 'block-if'
1495        <-Source: end: 'block-if'
1495       <--If: end: 'block-if'
1495      <---Source: end: 'block-if'
1495     <----While: end: 'block-if'
1495    <-----Source: end: 'block-if'
1495   <------Function: end: 'block-if'
1495  <-------Source: end: 'block-if'
1495 <--------Class: end: 'block-if'
1495<---------Source: end: 'block-if'
1495         If: end-gen
1495         InstructionCall: begin-gen
1495          Member: begin-gen
1495           Identifier: begin-gen
1495            Identifier: expr: 'curProveedor'
1495           Identifier: end-gen
1495           FunctionCall: begin-gen
1495            FunctionCall: expr: 'refreshBuffer()'
1495           FunctionCall: end-gen
1495           Member: expr: 'curProveedor.refreshBuffer()'
1495          Member: end-gen
1495          InstructionCall: line: 'curProveedor.refreshBuffer()'
1495        <-Source: line: 'curProveedor.refreshBuffer()'
1495       <--If: line: 'curProveedor.refreshBuffer()'
1495      <---Source: line: 'curProveedor.refreshBuffer()'
1495     <----While: line: 'curProveedor.refreshBuffer()'
1495    <-----Source: line: 'curProveedor.refreshBuffer()'
1495   <------Function: line: 'curProveedor.refreshBuffer()'
1495  <-------Source: line: 'curProveedor.refreshBuffer()'
1495 <--------Class: line: 'curProveedor.refreshBuffer()'
1495<---------Source: line: 'curProveedor.refreshBuffer()'
1496         InstructionCall: end-gen
1496         InstructionCall: begin-gen
1496          Member: begin-gen
1496           Identifier: begin-gen
1496            Identifier: expr: 'curProveedor'
1496           Identifier: end-gen
1496           FunctionCall: begin-gen
1496            Value: begin-gen
1496             Constant: begin-gen
1496              Constant: ctype: 'String' -> 'codcontacto'
1496              Constant: expr: 'u"codcontacto"'
1496            <-Value: expr: 'u"codcontacto"'
1496             Constant: end-gen
1496            Value: end-gen
1496            Value: begin-gen
1496             Identifier: begin-gen
1496              Identifier: expr: 'codContacto'
1496            <-Value: expr: 'codContacto'
1496             Identifier: end-gen
1496            Value: end-gen
1496            FunctionCall: expr: 'setValueBuffer(u"codcontacto", codContacto)'
1496           FunctionCall: end-gen
1496           Member: expr: 'curProveedor.setValueBuffer(u"codcontacto", codContacto)'
1496          Member: end-gen
1496          InstructionCall: line: 'curProveedor.setValueBuffer(u"codcontacto", codContacto)'
1496        <-Source: line: 'curProveedor.setValueBuffer(u"codcontacto", codContacto)'
1496       <--If: line: 'curProveedor.setValueBuffer(u"codcontacto", codContacto)'
1496      <---Source: line: 'curProveedor.setValueBuffer(u"codcontacto", codContacto)'
1496     <----While: line: 'curProveedor.setValueBuffer(u"codcontacto", codContacto)'
1496    <-----Source: line: 'curProveedor.setValueBuffer(u"codcontacto", codContacto)'
1496   <------Function: line: 'curProveedor.setValueBuffer(u"codcontacto", codContacto)'
1496  <-------Source: line: 'curProveedor.setValueBuffer(u"codcontacto", codContacto)'
1496 <--------Class: line: 'curProveedor.setValueBuffer(u"codcontacto", codContacto)'
1496<---------Source: line: 'curProveedor.setValueBuffer(u"codcontacto", codContacto)'
1497         InstructionCall: end-gen
1497         If: begin-gen
1497          Value: begin-gen
1497           OpUnary: begin-gen
1497            OpUnary: expr: 'not'
1497          <-Value: expr: 'not'
1497            Member: begin-gen
1497             Identifier: begin-gen
1497              Identifier: expr: 'curProveedor'
1497             Identifier: end-gen
1497             FunctionCall: begin-gen
1497              FunctionCall: expr: 'commitBuffer()'
1497             FunctionCall: end-gen
1497             Member: expr: 'curProveedor.commitBuffer()'
1497           <-OpUnary: expr: 'curProveedor.commitBuffer()'
1497          <--Value: expr: 'curProveedor.commitBuffer()'
1497            Member: end-gen
1497           OpUnary: end-gen
1497          Value: end-gen
1497          If: line: 'if not curProveedor.commitBuffer():'
1497        <-Source: line: 'if not curProveedor.commitBuffer():'
1497       <--If: line: 'if not curProveedor.commitBuffer():'
1497      <---Source: line: 'if not curProveedor.commitBuffer():'
1497     <----While: line: 'if not curProveedor.commitBuffer():'
1497    <-----Source: line: 'if not curProveedor.commitBuffer():'
1497   <------Function: line: 'if not curProveedor.commitBuffer():'
1497  <-------Source: line: 'if not curProveedor.commitBuffer():'
1497 <--------Class: line: 'if not curProveedor.commitBuffer():'
1497<---------Source: line: 'if not curProveedor.commitBuffer():'
1498          If: begin: 'block-if'
1498        <-Source: begin: 'block-if'
1498       <--If: begin: 'block-if'
1498      <---Source: begin: 'block-if'
1498     <----While: begin: 'block-if'
1498    <-----Source: begin: 'block-if'
1498   <------Function: begin: 'block-if'
1498  <-------Source: begin: 'block-if'
1498 <--------Class: begin: 'block-if'
1498<---------Source: begin: 'block-if'
1498          Source: begin-gen
1498           InstructionCall: begin-gen
1498            Member: begin-gen
1498             Identifier: begin-gen
1498              Identifier: expr: 'util'
1498             Identifier: end-gen
1498             FunctionCall: begin-gen
1498              FunctionCall: expr: 'destroyProgressDialog()'
1498             FunctionCall: end-gen
1498             Member: expr: 'util.destroyProgressDialog()'
1498            Member: end-gen
1498            InstructionCall: line: 'util.destroyProgressDialog()'
1498          <-Source: line: 'util.destroyProgressDialog()'
1498         <--If: line: 'util.destroyProgressDialog()'
1498        <---Source: line: 'util.destroyProgressDialog()'
1498       <----If: line: 'util.destroyProgressDialog()'
1498      <-----Source: line: 'util.destroyProgressDialog()'
1498     <------While: line: 'util.destroyProgressDialog()'
1498    <-------Source: line: 'util.destroyProgressDialog()'
1498   <--------Function: line: 'util.destroyProgressDialog()'
1498  <---------Source: line: 'util.destroyProgressDialog()'
1498 <----------Class: line: 'util.destroyProgressDialog()'
1498<-----------Source: line: 'util.destroyProgressDialog()'
1499           InstructionCall: end-gen
1499           InstructionFlow: begin-gen
1499            Value: begin-gen
1499             Identifier: begin-gen
1499              Identifier: expr: 'False'
1499            <-Value: expr: 'False'
1499             Identifier: end-gen
1499            Value: end-gen
1499            InstructionFlow: line: 'return False'
1499          <-Source: line: 'return False'
1499         <--If: line: 'return False'
1499        <---Source: line: 'return False'
1499       <----If: line: 'return False'
1499      <-----Source: line: 'return False'
1499     <------While: line: 'return False'
1499    <-------Source: line: 'return False'
1499   <--------Function: line: 'return False'
1499  <---------Source: line: 'return False'
1499 <----------Class: line: 'return False'
1499<-----------Source: line: 'return False'
1500           InstructionFlow: end-gen
1500          Source: end-gen
1500          If: end: 'block-if'
1500        <-Source: end: 'block-if'
1500       <--If: end: 'block-if'
1500      <---Source: end: 'block-if'
1500     <----While: end: 'block-if'
1500    <-----Source: end: 'block-if'
1500   <------Function: end: 'block-if'
1500  <-------Source: end: 'block-if'
1500 <--------Class: end: 'block-if'
1500<---------Source: end: 'block-if'
1500         If: end-gen
1500        Source: end-gen
1500        If: end: 'block-if'
1500      <-Source: end: 'block-if'
1500     <--While: end: 'block-if'
1500    <---Source: end: 'block-if'
1500   <----Function: end: 'block-if'
1500  <-----Source: end: 'block-if'
1500 <------Class: end: 'block-if'
1500<-------Source: end: 'block-if'
1500       If: end-gen
1500      Source: end-gen
1500      While: end: 'block-while'
1500    <-Source: end: 'block-while'
1500   <--Function: end: 'block-while'
1500  <---Source: end: 'block-while'
1500 <----Class: end: 'block-while'
1500<-----Source: end: 'block-while'
1500     While: end-gen
1500     InstructionCall: begin-gen
1500      Member: begin-gen
1500       Identifier: begin-gen
1500        Identifier: expr: 'util'
1500       Identifier: end-gen
1500       FunctionCall: begin-gen
1500        Value: begin-gen
1500         Member: begin-gen
1500          Identifier: begin-gen
1500           Identifier: expr: 'qryProveedores'
1500          Identifier: end-gen
1500          FunctionCall: begin-gen
1500           FunctionCall: expr: 'size()'
1500          FunctionCall: end-gen
1500          Member: expr: 'qryProveedores.size()'
1500        <-Value: expr: 'qryProveedores.size()'
1500         Member: end-gen
1500        Value: end-gen
1500        FunctionCall: expr: 'setProgress(qryProveedores.size())'
1500       FunctionCall: end-gen
1500       Member: expr: 'util.setProgress(qryProveedores.size())'
1500      Member: end-gen
1500      InstructionCall: line: 'util.setProgress(qryProveedores.size())'
1500    <-Source: line: 'util.setProgress(qryProveedores.size())'
1500   <--Function: line: 'util.setProgress(qryProveedores.size())'
1500  <---Source: line: 'util.setProgress(qryProveedores.size())'
1500 <----Class: line: 'util.setProgress(qryProveedores.size())'
1500<-----Source: line: 'util.setProgress(qryProveedores.size())'
1502     InstructionCall: end-gen
1502     InstructionCall: begin-gen
1502      Member: begin-gen
1502       Identifier: begin-gen
1502        Identifier: expr: 'util'
1502       Identifier: end-gen
1502       FunctionCall: begin-gen
1502        FunctionCall: expr: 'destroyProgressDialog()'
1502       FunctionCall: end-gen
1502       Member: expr: 'util.destroyProgressDialog()'
1502      Member: end-gen
1502      InstructionCall: line: 'util.destroyProgressDialog()'
1502    <-Source: line: 'util.destroyProgressDialog()'
1502   <--Function: line: 'util.destroyProgressDialog()'
1502  <---Source: line: 'util.destroyProgressDialog()'
1502 <----Class: line: 'util.destroyProgressDialog()'
1502<-----Source: line: 'util.destroyProgressDialog()'
1503     InstructionCall: end-gen
1503     InstructionFlow: begin-gen
1503      Value: begin-gen
1503       Identifier: begin-gen
1503        Identifier: expr: 'True'
1503      <-Value: expr: 'True'
1503       Identifier: end-gen
1503      Value: end-gen
1503      InstructionFlow: line: 'return True'
1503    <-Source: line: 'return True'
1503   <--Function: line: 'return True'
1503  <---Source: line: 'return True'
1503 <----Class: line: 'return True'
1503<-----Source: line: 'return True'
1504     InstructionFlow: end-gen
1504    Source: end-gen
1504    Function: end: 'block-def-oficial_actualizarContactosProv20070702'
1504  <-Source: end: 'block-def-oficial_actualizarContactosProv20070702'
1504 <--Class: end: 'block-def-oficial_actualizarContactosProv20070702'
1504<---Source: end: 'block-def-oficial_actualizarContactosProv20070702'
1505   Function: end-gen
1505   Function: begin-gen
1505    Variable: begin-gen
1505     Variable: expr: 'codCliente'
1505    Variable: end-gen
1505    Variable: begin-gen
1505     Variable: expr: 'codContacto'
1505    Variable: end-gen
1505    Variable: begin-gen
1505     Variable: expr: 'nombreCon'
1505    Variable: end-gen
1505    Variable: begin-gen
1505     Variable: expr: 'cargoCon'
1505    Variable: end-gen
1505    Variable: begin-gen
1505     Variable: expr: 'telefonoCon'
1505    Variable: end-gen
1505    Variable: begin-gen
1505     Variable: expr: 'faxCon'
1505    Variable: end-gen
1505    Variable: begin-gen
1505     Variable: expr: 'emailCon'
1505    Variable: end-gen
1505    Variable: begin-gen
1505     Variable: expr: 'idAgenda'
1505    Variable: end-gen
1505    Function: line: 'def oficial_actualizarContactosDeAgenda20070525(self, codCliente = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
1505  <-Source: line: 'def oficial_actualizarContactosDeAgenda20070525(self, codCliente = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
1505 <--Class: line: 'def oficial_actualizarContactosDeAgenda20070525(self, codCliente = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
1505<---Source: line: 'def oficial_actualizarContactosDeAgenda20070525(self, codCliente = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
1506    Function: begin: 'block-def-oficial_actualizarContactosDeAgenda20070525'
1506  <-Source: begin: 'block-def-oficial_actualizarContactosDeAgenda20070525'
1506 <--Class: begin: 'block-def-oficial_actualizarContactosDeAgenda20070525'
1506<---Source: begin: 'block-def-oficial_actualizarContactosDeAgenda20070525'
1506    Source: begin-gen
1506     DeclarationBlock: begin-gen
1506      Variable: begin-gen
1506       Variable: expr: 'util'
1506       Variable: expr: '='
1506       Variable: expr: 'qsatype.FLUtil()'
1506      Variable: end-gen
1506      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1506    <-Source: line: 'util = qsatype.FLUtil()'
1506   <--Function: line: 'util = qsatype.FLUtil()'
1506  <---Source: line: 'util = qsatype.FLUtil()'
1506 <----Class: line: 'util = qsatype.FLUtil()'
1506<-----Source: line: 'util = qsatype.FLUtil()'
1507     DeclarationBlock: end-gen
1507     DeclarationBlock: begin-gen
1507      Variable: begin-gen
1507       Variable: expr: 'curContactos'
1507       Variable: expr: '='
1507       Value: begin-gen
1507        New: begin-gen
1507         FunctionCall: begin-gen
1507          Value: begin-gen
1507           Constant: begin-gen
1507            Constant: ctype: 'String' -> 'crm_contactos'
1507            Constant: expr: 'u"crm_contactos"'
1507          <-Value: expr: 'u"crm_contactos"'
1507           Constant: end-gen
1507          Value: end-gen
1507          FunctionCall: expr: 'FLSqlCursor(u"crm_contactos")'
1507        <-New: expr: 'qsatype.FLSqlCursor(u"crm_contactos")'
1507       <--Value: expr: 'qsatype.FLSqlCursor(u"crm_contactos")'
1507      <---Variable: expr: 'qsatype.FLSqlCursor(u"crm_contactos")'
1507         FunctionCall: end-gen
1507        New: end-gen
1507       Value: end-gen
1507      Variable: end-gen
1507      DeclarationBlock: line: 'curContactos = qsatype.FLSqlCursor(u"crm_contactos")'
1507    <-Source: line: 'curContactos = qsatype.FLSqlCursor(u"crm_contactos")'
1507   <--Function: line: 'curContactos = qsatype.FLSqlCursor(u"crm_contactos")'
1507  <---Source: line: 'curContactos = qsatype.FLSqlCursor(u"crm_contactos")'
1507 <----Class: line: 'curContactos = qsatype.FLSqlCursor(u"crm_contactos")'
1507<-----Source: line: 'curContactos = qsatype.FLSqlCursor(u"crm_contactos")'
1508     DeclarationBlock: end-gen
1508     DeclarationBlock: begin-gen
1508      Variable: begin-gen
1508       Variable: expr: 'curAgenda'
1508       Variable: expr: '='
1508       Value: begin-gen
1508        New: begin-gen
1508         FunctionCall: begin-gen
1508          Value: begin-gen
1508           Constant: begin-gen
1508            Constant: ctype: 'String' -> 'contactosclientes'
1508            Constant: expr: 'u"contactosclientes"'
1508          <-Value: expr: 'u"contactosclientes"'
1508           Constant: end-gen
1508          Value: end-gen
1508          FunctionCall: expr: 'FLSqlCursor(u"contactosclientes")'
1508        <-New: expr: 'qsatype.FLSqlCursor(u"contactosclientes")'
1508       <--Value: expr: 'qsatype.FLSqlCursor(u"contactosclientes")'
1508      <---Variable: expr: 'qsatype.FLSqlCursor(u"contactosclientes")'
1508         FunctionCall: end-gen
1508        New: end-gen
1508       Value: end-gen
1508      Variable: end-gen
1508      DeclarationBlock: line: 'curAgenda = qsatype.FLSqlCursor(u"contactosclientes")'
1508    <-Source: line: 'curAgenda = qsatype.FLSqlCursor(u"contactosclientes")'
1508   <--Function: line: 'curAgenda = qsatype.FLSqlCursor(u"contactosclientes")'
1508  <---Source: line: 'curAgenda = qsatype.FLSqlCursor(u"contactosclientes")'
1508 <----Class: line: 'curAgenda = qsatype.FLSqlCursor(u"contactosclientes")'
1508<-----Source: line: 'curAgenda = qsatype.FLSqlCursor(u"contactosclientes")'
1509     DeclarationBlock: end-gen
1509     If: begin-gen
1509      Expression: begin-gen
1509       Identifier: begin-gen
1509        Identifier: expr: 'codContacto'
1509      <-Expression: expr: 'codContacto'
1509       Identifier: end-gen
1509       Compare: begin-gen
1509        Compare: expr: 'and'
1509      <-Expression: expr: 'and'
1509       Compare: end-gen
1509       Identifier: begin-gen
1509        Identifier: expr: 'codContacto'
1509      <-Expression: expr: 'codContacto'
1509       Identifier: end-gen
1509       Compare: begin-gen
1509        Compare: expr: '!='
1509      <-Expression: expr: '!='
1509       Compare: end-gen
1509       Constant: begin-gen
1509        Constant: ctype: 'String' -> ''
1509        Constant: expr: 'u""'
1509      <-Expression: expr: 'u""'
1509       Constant: end-gen
1509      Expression: end-gen
1509      If: line: 'if codContacto and codContacto != u"":'
1509    <-Source: line: 'if codContacto and codContacto != u"":'
1509   <--Function: line: 'if codContacto and codContacto != u"":'
1509  <---Source: line: 'if codContacto and codContacto != u"":'
1509 <----Class: line: 'if codContacto and codContacto != u"":'
1509<-----Source: line: 'if codContacto and codContacto != u"":'
1510      If: begin: 'block-if'
1510    <-Source: begin: 'block-if'
1510   <--Function: begin: 'block-if'
1510  <---Source: begin: 'block-if'
1510 <----Class: begin: 'block-if'
1510<-----Source: begin: 'block-if'
1510      Source: begin-gen
1510       InstructionCall: begin-gen
1510        Member: begin-gen
1510         Identifier: begin-gen
1510          Identifier: expr: 'curContactos'
1510         Identifier: end-gen
1510         FunctionCall: begin-gen
1510          Expression: begin-gen
1510           Expression: expr: 'ustr('
1510           Constant: begin-gen
1510            Constant: ctype: 'String' -> "codcontacto = '"
1510            Constant: expr: 'u"codcontacto = \'"'
1510          <-Expression: expr: 'u"codcontacto = \'"'
1510           Constant: end-gen
1510           Expression: expr: ','
1510           Identifier: begin-gen
1510            Identifier: expr: 'codContacto'
1510          <-Expression: expr: 'codContacto'
1510           Identifier: end-gen
1510           Expression: expr: ','
1510           Constant: begin-gen
1510            Constant: ctype: 'String' -> "'"
1510            Constant: expr: 'u"\'"'
1510          <-Expression: expr: 'u"\'"'
1510           Constant: end-gen
1510           Expression: expr: ')'
1510          Expression: end-gen
1510          FunctionCall: expr: 'select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1510         FunctionCall: end-gen
1510         Member: expr: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1510        Member: end-gen
1510        InstructionCall: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1510      <-Source: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1510     <--If: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1510    <---Source: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1510   <----Function: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1510  <-----Source: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1510 <------Class: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1510<-------Source: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1511       InstructionCall: end-gen
1511       If: begin-gen
1511        Value: begin-gen
1511         OpUnary: begin-gen
1511          OpUnary: expr: 'not'
1511        <-Value: expr: 'not'
1511          Member: begin-gen
1511           Identifier: begin-gen
1511            Identifier: expr: 'curContactos'
1511           Identifier: end-gen
1511           FunctionCall: begin-gen
1511            FunctionCall: expr: 'first()'
1511           FunctionCall: end-gen
1511           Member: expr: 'curContactos.first()'
1511         <-OpUnary: expr: 'curContactos.first()'
1511        <--Value: expr: 'curContactos.first()'
1511          Member: end-gen
1511         OpUnary: end-gen
1511        Value: end-gen
1511        If: line: 'if not curContactos.first():'
1511      <-Source: line: 'if not curContactos.first():'
1511     <--If: line: 'if not curContactos.first():'
1511    <---Source: line: 'if not curContactos.first():'
1511   <----Function: line: 'if not curContactos.first():'
1511  <-----Source: line: 'if not curContactos.first():'
1511 <------Class: line: 'if not curContactos.first():'
1511<-------Source: line: 'if not curContactos.first():'
1512        If: begin: 'block-if'
1512      <-Source: begin: 'block-if'
1512     <--If: begin: 'block-if'
1512    <---Source: begin: 'block-if'
1512   <----Function: begin: 'block-if'
1512  <-----Source: begin: 'block-if'
1512 <------Class: begin: 'block-if'
1512<-------Source: begin: 'block-if'
1512        Source: begin-gen
1512         InstructionFlow: begin-gen
1512          Value: begin-gen
1512           Identifier: begin-gen
1512            Identifier: expr: 'False'
1512          <-Value: expr: 'False'
1512           Identifier: end-gen
1512          Value: end-gen
1512          InstructionFlow: line: 'return False'
1512        <-Source: line: 'return False'
1512       <--If: line: 'return False'
1512      <---Source: line: 'return False'
1512     <----If: line: 'return False'
1512    <-----Source: line: 'return False'
1512   <------Function: line: 'return False'
1512  <-------Source: line: 'return False'
1512 <--------Class: line: 'return False'
1512<---------Source: line: 'return False'
1513         InstructionFlow: end-gen
1513        Source: end-gen
1513        If: end: 'block-if'
1513      <-Source: end: 'block-if'
1513     <--If: end: 'block-if'
1513    <---Source: end: 'block-if'
1513   <----Function: end: 'block-if'
1513  <-----Source: end: 'block-if'
1513 <------Class: end: 'block-if'
1513<-------Source: end: 'block-if'
1513       If: end-gen
1513       InstructionCall: begin-gen
1513        Member: begin-gen
1513         Identifier: begin-gen
1513          Identifier: expr: 'curContactos'
1513         Identifier: end-gen
1513         FunctionCall: begin-gen
1513          Value: begin-gen
1513           Member: begin-gen
1513            Identifier: begin-gen
1513             Identifier: expr: 'curContactos'
1513            Identifier: end-gen
1513            Identifier: begin-gen
1513             Identifier: expr: 'Edit'
1513            Identifier: end-gen
1513            Member: expr: 'curContactos.Edit'
1513          <-Value: expr: 'curContactos.Edit'
1513           Member: end-gen
1513          Value: end-gen
1513          FunctionCall: expr: 'setModeAccess(curContactos.Edit)'
1513         FunctionCall: end-gen
1513         Member: expr: 'curContactos.setModeAccess(curContactos.Edit)'
1513        Member: end-gen
1513        InstructionCall: line: 'curContactos.setModeAccess(curContactos.Edit)'
1513      <-Source: line: 'curContactos.setModeAccess(curContactos.Edit)'
1513     <--If: line: 'curContactos.setModeAccess(curContactos.Edit)'
1513    <---Source: line: 'curContactos.setModeAccess(curContactos.Edit)'
1513   <----Function: line: 'curContactos.setModeAccess(curContactos.Edit)'
1513  <-----Source: line: 'curContactos.setModeAccess(curContactos.Edit)'
1513 <------Class: line: 'curContactos.setModeAccess(curContactos.Edit)'
1513<-------Source: line: 'curContactos.setModeAccess(curContactos.Edit)'
1514       InstructionCall: end-gen
1514       InstructionCall: begin-gen
1514        Member: begin-gen
1514         Identifier: begin-gen
1514          Identifier: expr: 'curContactos'
1514         Identifier: end-gen
1514         FunctionCall: begin-gen
1514          FunctionCall: expr: 'refreshBuffer()'
1514         FunctionCall: end-gen
1514         Member: expr: 'curContactos.refreshBuffer()'
1514        Member: end-gen
1514        InstructionCall: line: 'curContactos.refreshBuffer()'
1514      <-Source: line: 'curContactos.refreshBuffer()'
1514     <--If: line: 'curContactos.refreshBuffer()'
1514    <---Source: line: 'curContactos.refreshBuffer()'
1514   <----Function: line: 'curContactos.refreshBuffer()'
1514  <-----Source: line: 'curContactos.refreshBuffer()'
1514 <------Class: line: 'curContactos.refreshBuffer()'
1514<-------Source: line: 'curContactos.refreshBuffer()'
1515       InstructionCall: end-gen
1515       If: begin-gen
1515        Expression: begin-gen
1515         OpUnary: begin-gen
1515          OpUnary: expr: 'not'
1515        <-Expression: expr: 'not'
1515          Member: begin-gen
1515           Identifier: begin-gen
1515            Identifier: expr: 'curContactos'
1515           Identifier: end-gen
1515           FunctionCall: begin-gen
1515            Value: begin-gen
1515             Constant: begin-gen
1515              Constant: ctype: 'String' -> 'cargo'
1515              Constant: expr: 'u"cargo"'
1515            <-Value: expr: 'u"cargo"'
1515             Constant: end-gen
1515            Value: end-gen
1515            FunctionCall: expr: 'valueBuffer(u"cargo")'
1515           FunctionCall: end-gen
1515           Member: expr: 'curContactos.valueBuffer(u"cargo")'
1515         <-OpUnary: expr: 'curContactos.valueBuffer(u"cargo")'
1515        <--Expression: expr: 'curContactos.valueBuffer(u"cargo")'
1515          Member: end-gen
1515         OpUnary: end-gen
1515         Compare: begin-gen
1515          Compare: expr: 'or'
1515        <-Expression: expr: 'or'
1515         Compare: end-gen
1515         Member: begin-gen
1515          Identifier: begin-gen
1515           Identifier: expr: 'curContactos'
1515          Identifier: end-gen
1515          FunctionCall: begin-gen
1515           Value: begin-gen
1515            Constant: begin-gen
1515             Constant: ctype: 'String' -> 'cargo'
1515             Constant: expr: 'u"cargo"'
1515           <-Value: expr: 'u"cargo"'
1515            Constant: end-gen
1515           Value: end-gen
1515           FunctionCall: expr: 'valueBuffer(u"cargo")'
1515          FunctionCall: end-gen
1515          Member: expr: 'curContactos.valueBuffer(u"cargo")'
1515        <-Expression: expr: 'curContactos.valueBuffer(u"cargo")'
1515         Member: end-gen
1515         Compare: begin-gen
1515          Compare: expr: '=='
1515        <-Expression: expr: '=='
1515         Compare: end-gen
1515         Constant: begin-gen
1515          Constant: ctype: 'String' -> ''
1515          Constant: expr: 'u""'
1515        <-Expression: expr: 'u""'
1515         Constant: end-gen
1515        Expression: end-gen
1515        If: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1515      <-Source: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1515     <--If: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1515    <---Source: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1515   <----Function: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1515  <-----Source: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1515 <------Class: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1515<-------Source: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1516        If: begin: 'block-if'
1516      <-Source: begin: 'block-if'
1516     <--If: begin: 'block-if'
1516    <---Source: begin: 'block-if'
1516   <----Function: begin: 'block-if'
1516  <-----Source: begin: 'block-if'
1516 <------Class: begin: 'block-if'
1516<-------Source: begin: 'block-if'
1516        Source: begin-gen
1516         InstructionCall: begin-gen
1516          Member: begin-gen
1516           Identifier: begin-gen
1516            Identifier: expr: 'curContactos'
1516           Identifier: end-gen
1516           FunctionCall: begin-gen
1516            Value: begin-gen
1516             Constant: begin-gen
1516              Constant: ctype: 'String' -> 'cargo'
1516              Constant: expr: 'u"cargo"'
1516            <-Value: expr: 'u"cargo"'
1516             Constant: end-gen
1516            Value: end-gen
1516            Value: begin-gen
1516             Identifier: begin-gen
1516              Identifier: expr: 'cargoCon'
1516            <-Value: expr: 'cargoCon'
1516             Identifier: end-gen
1516            Value: end-gen
1516            FunctionCall: expr: 'setValueBuffer(u"cargo", cargoCon)'
1516           FunctionCall: end-gen
1516           Member: expr: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1516          Member: end-gen
1516          InstructionCall: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1516        <-Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1516       <--If: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1516      <---Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1516     <----If: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1516    <-----Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1516   <------Function: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1516  <-------Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1516 <--------Class: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1516<---------Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1517         InstructionCall: end-gen
1517        Source: end-gen
1517        If: end: 'block-if'
1517      <-Source: end: 'block-if'
1517     <--If: end: 'block-if'
1517    <---Source: end: 'block-if'
1517   <----Function: end: 'block-if'
1517  <-----Source: end: 'block-if'
1517 <------Class: end: 'block-if'
1517<-------Source: end: 'block-if'
1517       If: end-gen
1517       If: begin-gen
1517        Expression: begin-gen
1517         OpUnary: begin-gen
1517          OpUnary: expr: 'not'
1517        <-Expression: expr: 'not'
1517          Member: begin-gen
1517           Identifier: begin-gen
1517            Identifier: expr: 'curContactos'
1517           Identifier: end-gen
1517           FunctionCall: begin-gen
1517            Value: begin-gen
1517             Constant: begin-gen
1517              Constant: ctype: 'String' -> 'telefono1'
1517              Constant: expr: 'u"telefono1"'
1517            <-Value: expr: 'u"telefono1"'
1517             Constant: end-gen
1517            Value: end-gen
1517            FunctionCall: expr: 'valueBuffer(u"telefono1")'
1517           FunctionCall: end-gen
1517           Member: expr: 'curContactos.valueBuffer(u"telefono1")'
1517         <-OpUnary: expr: 'curContactos.valueBuffer(u"telefono1")'
1517        <--Expression: expr: 'curContactos.valueBuffer(u"telefono1")'
1517          Member: end-gen
1517         OpUnary: end-gen
1517         Compare: begin-gen
1517          Compare: expr: 'or'
1517        <-Expression: expr: 'or'
1517         Compare: end-gen
1517         Member: begin-gen
1517          Identifier: begin-gen
1517           Identifier: expr: 'curContactos'
1517          Identifier: end-gen
1517          FunctionCall: begin-gen
1517           Value: begin-gen
1517            Constant: begin-gen
1517             Constant: ctype: 'String' -> 'telefono1'
1517             Constant: expr: 'u"telefono1"'
1517           <-Value: expr: 'u"telefono1"'
1517            Constant: end-gen
1517           Value: end-gen
1517           FunctionCall: expr: 'valueBuffer(u"telefono1")'
1517          FunctionCall: end-gen
1517          Member: expr: 'curContactos.valueBuffer(u"telefono1")'
1517        <-Expression: expr: 'curContactos.valueBuffer(u"telefono1")'
1517         Member: end-gen
1517         Compare: begin-gen
1517          Compare: expr: '=='
1517        <-Expression: expr: '=='
1517         Compare: end-gen
1517         Constant: begin-gen
1517          Constant: ctype: 'String' -> ''
1517          Constant: expr: 'u""'
1517        <-Expression: expr: 'u""'
1517         Constant: end-gen
1517        Expression: end-gen
1517        If: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1517      <-Source: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1517     <--If: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1517    <---Source: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1517   <----Function: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1517  <-----Source: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1517 <------Class: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1517<-------Source: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1518        If: begin: 'block-if'
1518      <-Source: begin: 'block-if'
1518     <--If: begin: 'block-if'
1518    <---Source: begin: 'block-if'
1518   <----Function: begin: 'block-if'
1518  <-----Source: begin: 'block-if'
1518 <------Class: begin: 'block-if'
1518<-------Source: begin: 'block-if'
1518        Source: begin-gen
1518         InstructionCall: begin-gen
1518          Member: begin-gen
1518           Identifier: begin-gen
1518            Identifier: expr: 'curContactos'
1518           Identifier: end-gen
1518           FunctionCall: begin-gen
1518            Value: begin-gen
1518             Constant: begin-gen
1518              Constant: ctype: 'String' -> 'telefono1'
1518              Constant: expr: 'u"telefono1"'
1518            <-Value: expr: 'u"telefono1"'
1518             Constant: end-gen
1518            Value: end-gen
1518            Value: begin-gen
1518             Identifier: begin-gen
1518              Identifier: expr: 'telefonoCon'
1518            <-Value: expr: 'telefonoCon'
1518             Identifier: end-gen
1518            Value: end-gen
1518            FunctionCall: expr: 'setValueBuffer(u"telefono1", telefonoCon)'
1518           FunctionCall: end-gen
1518           Member: expr: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1518          Member: end-gen
1518          InstructionCall: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1518        <-Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1518       <--If: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1518      <---Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1518     <----If: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1518    <-----Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1518   <------Function: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1518  <-------Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1518 <--------Class: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1518<---------Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1519         InstructionCall: end-gen
1519        Source: end-gen
1519        If: end: 'block-if'
1519      <-Source: end: 'block-if'
1519     <--If: end: 'block-if'
1519    <---Source: end: 'block-if'
1519   <----Function: end: 'block-if'
1519  <-----Source: end: 'block-if'
1519 <------Class: end: 'block-if'
1519<-------Source: end: 'block-if'
1519        If: line: 'else:'
1519      <-Source: line: 'else:'
1519     <--If: line: 'else:'
1519    <---Source: line: 'else:'
1519   <----Function: line: 'else:'
1519  <-----Source: line: 'else:'
1519 <------Class: line: 'else:'
1519<-------Source: line: 'else:'
1520        If: begin: 'block-else'
1520      <-Source: begin: 'block-else'
1520     <--If: begin: 'block-else'
1520    <---Source: begin: 'block-else'
1520   <----Function: begin: 'block-else'
1520  <-----Source: begin: 'block-else'
1520 <------Class: begin: 'block-else'
1520<-------Source: begin: 'block-else'
1520        Source: begin-gen
1520         If: begin-gen
1520          Expression: begin-gen
1520           OpUnary: begin-gen
1520            OpUnary: expr: 'not'
1520          <-Expression: expr: 'not'
1520            Member: begin-gen
1520             Identifier: begin-gen
1520              Identifier: expr: 'curContactos'
1520             Identifier: end-gen
1520             FunctionCall: begin-gen
1520              Value: begin-gen
1520               Constant: begin-gen
1520                Constant: ctype: 'String' -> 'telefono2'
1520                Constant: expr: 'u"telefono2"'
1520              <-Value: expr: 'u"telefono2"'
1520               Constant: end-gen
1520              Value: end-gen
1520              FunctionCall: expr: 'valueBuffer(u"telefono2")'
1520             FunctionCall: end-gen
1520             Member: expr: 'curContactos.valueBuffer(u"telefono2")'
1520           <-OpUnary: expr: 'curContactos.valueBuffer(u"telefono2")'
1520          <--Expression: expr: 'curContactos.valueBuffer(u"telefono2")'
1520            Member: end-gen
1520           OpUnary: end-gen
1520           Compare: begin-gen
1520            Compare: expr: 'or'
1520          <-Expression: expr: 'or'
1520           Compare: end-gen
1520           Member: begin-gen
1520            Identifier: begin-gen
1520             Identifier: expr: 'curContactos'
1520            Identifier: end-gen
1520            FunctionCall: begin-gen
1520             Value: begin-gen
1520              Constant: begin-gen
1520               Constant: ctype: 'String' -> 'telefono2'
1520               Constant: expr: 'u"telefono2"'
1520             <-Value: expr: 'u"telefono2"'
1520              Constant: end-gen
1520             Value: end-gen
1520             FunctionCall: expr: 'valueBuffer(u"telefono2")'
1520            FunctionCall: end-gen
1520            Member: expr: 'curContactos.valueBuffer(u"telefono2")'
1520          <-Expression: expr: 'curContactos.valueBuffer(u"telefono2")'
1520           Member: end-gen
1520           Compare: begin-gen
1520            Compare: expr: '=='
1520          <-Expression: expr: '=='
1520           Compare: end-gen
1520           Constant: begin-gen
1520            Constant: ctype: 'String' -> ''
1520            Constant: expr: 'u""'
1520          <-Expression: expr: 'u""'
1520           Constant: end-gen
1520          Expression: end-gen
1520          If: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1520        <-Source: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1520       <--If: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1520      <---Source: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1520     <----If: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1520    <-----Source: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1520   <------Function: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1520  <-------Source: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1520 <--------Class: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1520<---------Source: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1521          If: begin: 'block-if'
1521        <-Source: begin: 'block-if'
1521       <--If: begin: 'block-if'
1521      <---Source: begin: 'block-if'
1521     <----If: begin: 'block-if'
1521    <-----Source: begin: 'block-if'
1521   <------Function: begin: 'block-if'
1521  <-------Source: begin: 'block-if'
1521 <--------Class: begin: 'block-if'
1521<---------Source: begin: 'block-if'
1521          Source: begin-gen
1521           InstructionCall: begin-gen
1521            Member: begin-gen
1521             Identifier: begin-gen
1521              Identifier: expr: 'curContactos'
1521             Identifier: end-gen
1521             FunctionCall: begin-gen
1521              Value: begin-gen
1521               Constant: begin-gen
1521                Constant: ctype: 'String' -> 'telefono2'
1521                Constant: expr: 'u"telefono2"'
1521              <-Value: expr: 'u"telefono2"'
1521               Constant: end-gen
1521              Value: end-gen
1521              Value: begin-gen
1521               Identifier: begin-gen
1521                Identifier: expr: 'telefonoCon'
1521              <-Value: expr: 'telefonoCon'
1521               Identifier: end-gen
1521              Value: end-gen
1521              FunctionCall: expr: 'setValueBuffer(u"telefono2", telefonoCon)'
1521             FunctionCall: end-gen
1521             Member: expr: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1521            Member: end-gen
1521            InstructionCall: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1521          <-Source: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1521         <--If: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1521        <---Source: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1521       <----If: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1521      <-----Source: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1521     <------If: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1521    <-------Source: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1521   <--------Function: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1521  <---------Source: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1521 <----------Class: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1521<-----------Source: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1522           InstructionCall: end-gen
1522          Source: end-gen
1522          If: end: 'block-if'
1522        <-Source: end: 'block-if'
1522       <--If: end: 'block-if'
1522      <---Source: end: 'block-if'
1522     <----If: end: 'block-if'
1522    <-----Source: end: 'block-if'
1522   <------Function: end: 'block-if'
1522  <-------Source: end: 'block-if'
1522 <--------Class: end: 'block-if'
1522<---------Source: end: 'block-if'
1522         If: end-gen
1522        Source: end-gen
1522        If: end: 'block-else'
1522      <-Source: end: 'block-else'
1522     <--If: end: 'block-else'
1522    <---Source: end: 'block-else'
1522   <----Function: end: 'block-else'
1522  <-----Source: end: 'block-else'
1522 <------Class: end: 'block-else'
1522<-------Source: end: 'block-else'
1523       If: end-gen
1523       If: begin-gen
1523        Expression: begin-gen
1523         OpUnary: begin-gen
1523          OpUnary: expr: 'not'
1523        <-Expression: expr: 'not'
1523          Member: begin-gen
1523           Identifier: begin-gen
1523            Identifier: expr: 'curContactos'
1523           Identifier: end-gen
1523           FunctionCall: begin-gen
1523            Value: begin-gen
1523             Constant: begin-gen
1523              Constant: ctype: 'String' -> 'fax'
1523              Constant: expr: 'u"fax"'
1523            <-Value: expr: 'u"fax"'
1523             Constant: end-gen
1523            Value: end-gen
1523            FunctionCall: expr: 'valueBuffer(u"fax")'
1523           FunctionCall: end-gen
1523           Member: expr: 'curContactos.valueBuffer(u"fax")'
1523         <-OpUnary: expr: 'curContactos.valueBuffer(u"fax")'
1523        <--Expression: expr: 'curContactos.valueBuffer(u"fax")'
1523          Member: end-gen
1523         OpUnary: end-gen
1523         Compare: begin-gen
1523          Compare: expr: 'or'
1523        <-Expression: expr: 'or'
1523         Compare: end-gen
1523         Member: begin-gen
1523          Identifier: begin-gen
1523           Identifier: expr: 'curContactos'
1523          Identifier: end-gen
1523          FunctionCall: begin-gen
1523           Value: begin-gen
1523            Constant: begin-gen
1523             Constant: ctype: 'String' -> 'fax'
1523             Constant: expr: 'u"fax"'
1523           <-Value: expr: 'u"fax"'
1523            Constant: end-gen
1523           Value: end-gen
1523           FunctionCall: expr: 'valueBuffer(u"fax")'
1523          FunctionCall: end-gen
1523          Member: expr: 'curContactos.valueBuffer(u"fax")'
1523        <-Expression: expr: 'curContactos.valueBuffer(u"fax")'
1523         Member: end-gen
1523         Compare: begin-gen
1523          Compare: expr: '=='
1523        <-Expression: expr: '=='
1523         Compare: end-gen
1523         Constant: begin-gen
1523          Constant: ctype: 'String' -> ''
1523          Constant: expr: 'u""'
1523        <-Expression: expr: 'u""'
1523         Constant: end-gen
1523        Expression: end-gen
1523        If: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1523      <-Source: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1523     <--If: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1523    <---Source: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1523   <----Function: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1523  <-----Source: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1523 <------Class: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1523<-------Source: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1524        If: begin: 'block-if'
1524      <-Source: begin: 'block-if'
1524     <--If: begin: 'block-if'
1524    <---Source: begin: 'block-if'
1524   <----Function: begin: 'block-if'
1524  <-----Source: begin: 'block-if'
1524 <------Class: begin: 'block-if'
1524<-------Source: begin: 'block-if'
1524        Source: begin-gen
1524         InstructionCall: begin-gen
1524          Member: begin-gen
1524           Identifier: begin-gen
1524            Identifier: expr: 'curContactos'
1524           Identifier: end-gen
1524           FunctionCall: begin-gen
1524            Value: begin-gen
1524             Constant: begin-gen
1524              Constant: ctype: 'String' -> 'fax'
1524              Constant: expr: 'u"fax"'
1524            <-Value: expr: 'u"fax"'
1524             Constant: end-gen
1524            Value: end-gen
1524            Value: begin-gen
1524             Identifier: begin-gen
1524              Identifier: expr: 'faxCon'
1524            <-Value: expr: 'faxCon'
1524             Identifier: end-gen
1524            Value: end-gen
1524            FunctionCall: expr: 'setValueBuffer(u"fax", faxCon)'
1524           FunctionCall: end-gen
1524           Member: expr: 'curContactos.setValueBuffer(u"fax", faxCon)'
1524          Member: end-gen
1524          InstructionCall: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1524        <-Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1524       <--If: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1524      <---Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1524     <----If: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1524    <-----Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1524   <------Function: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1524  <-------Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1524 <--------Class: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1524<---------Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1525         InstructionCall: end-gen
1525        Source: end-gen
1525        If: end: 'block-if'
1525      <-Source: end: 'block-if'
1525     <--If: end: 'block-if'
1525    <---Source: end: 'block-if'
1525   <----Function: end: 'block-if'
1525  <-----Source: end: 'block-if'
1525 <------Class: end: 'block-if'
1525<-------Source: end: 'block-if'
1525       If: end-gen
1525       If: begin-gen
1525        Expression: begin-gen
1525         OpUnary: begin-gen
1525          OpUnary: expr: 'not'
1525        <-Expression: expr: 'not'
1525          Member: begin-gen
1525           Identifier: begin-gen
1525            Identifier: expr: 'curContactos'
1525           Identifier: end-gen
1525           FunctionCall: begin-gen
1525            Value: begin-gen
1525             Constant: begin-gen
1525              Constant: ctype: 'String' -> 'email'
1525              Constant: expr: 'u"email"'
1525            <-Value: expr: 'u"email"'
1525             Constant: end-gen
1525            Value: end-gen
1525            FunctionCall: expr: 'valueBuffer(u"email")'
1525           FunctionCall: end-gen
1525           Member: expr: 'curContactos.valueBuffer(u"email")'
1525         <-OpUnary: expr: 'curContactos.valueBuffer(u"email")'
1525        <--Expression: expr: 'curContactos.valueBuffer(u"email")'
1525          Member: end-gen
1525         OpUnary: end-gen
1525         Compare: begin-gen
1525          Compare: expr: 'or'
1525        <-Expression: expr: 'or'
1525         Compare: end-gen
1525         Member: begin-gen
1525          Identifier: begin-gen
1525           Identifier: expr: 'curContactos'
1525          Identifier: end-gen
1525          FunctionCall: begin-gen
1525           Value: begin-gen
1525            Constant: begin-gen
1525             Constant: ctype: 'String' -> 'email'
1525             Constant: expr: 'u"email"'
1525           <-Value: expr: 'u"email"'
1525            Constant: end-gen
1525           Value: end-gen
1525           FunctionCall: expr: 'valueBuffer(u"email")'
1525          FunctionCall: end-gen
1525          Member: expr: 'curContactos.valueBuffer(u"email")'
1525        <-Expression: expr: 'curContactos.valueBuffer(u"email")'
1525         Member: end-gen
1525         Compare: begin-gen
1525          Compare: expr: '=='
1525        <-Expression: expr: '=='
1525         Compare: end-gen
1525         Constant: begin-gen
1525          Constant: ctype: 'String' -> ''
1525          Constant: expr: 'u""'
1525        <-Expression: expr: 'u""'
1525         Constant: end-gen
1525        Expression: end-gen
1525        If: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1525      <-Source: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1525     <--If: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1525    <---Source: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1525   <----Function: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1525  <-----Source: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1525 <------Class: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1525<-------Source: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1526        If: begin: 'block-if'
1526      <-Source: begin: 'block-if'
1526     <--If: begin: 'block-if'
1526    <---Source: begin: 'block-if'
1526   <----Function: begin: 'block-if'
1526  <-----Source: begin: 'block-if'
1526 <------Class: begin: 'block-if'
1526<-------Source: begin: 'block-if'
1526        Source: begin-gen
1526         InstructionCall: begin-gen
1526          Member: begin-gen
1526           Identifier: begin-gen
1526            Identifier: expr: 'curContactos'
1526           Identifier: end-gen
1526           FunctionCall: begin-gen
1526            Value: begin-gen
1526             Constant: begin-gen
1526              Constant: ctype: 'String' -> 'email'
1526              Constant: expr: 'u"email"'
1526            <-Value: expr: 'u"email"'
1526             Constant: end-gen
1526            Value: end-gen
1526            Value: begin-gen
1526             Identifier: begin-gen
1526              Identifier: expr: 'emailCon'
1526            <-Value: expr: 'emailCon'
1526             Identifier: end-gen
1526            Value: end-gen
1526            FunctionCall: expr: 'setValueBuffer(u"email", emailCon)'
1526           FunctionCall: end-gen
1526           Member: expr: 'curContactos.setValueBuffer(u"email", emailCon)'
1526          Member: end-gen
1526          InstructionCall: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1526        <-Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1526       <--If: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1526      <---Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1526     <----If: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1526    <-----Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1526   <------Function: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1526  <-------Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1526 <--------Class: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1526<---------Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1527         InstructionCall: end-gen
1527        Source: end-gen
1527        If: end: 'block-if'
1527      <-Source: end: 'block-if'
1527     <--If: end: 'block-if'
1527    <---Source: end: 'block-if'
1527   <----Function: end: 'block-if'
1527  <-----Source: end: 'block-if'
1527 <------Class: end: 'block-if'
1527<-------Source: end: 'block-if'
1527       If: end-gen
1527      Source: end-gen
1527      If: end: 'block-if'
1527    <-Source: end: 'block-if'
1527   <--Function: end: 'block-if'
1527  <---Source: end: 'block-if'
1527 <----Class: end: 'block-if'
1527<-----Source: end: 'block-if'
1527      If: line: 'else:'
1527    <-Source: line: 'else:'
1527   <--Function: line: 'else:'
1527  <---Source: line: 'else:'
1527 <----Class: line: 'else:'
1527<-----Source: line: 'else:'
1529      If: begin: 'block-else'
1529    <-Source: begin: 'block-else'
1529   <--Function: begin: 'block-else'
1529  <---Source: begin: 'block-else'
1529 <----Class: begin: 'block-else'
1529<-----Source: begin: 'block-else'
1529      Source: begin-gen
1529       With: begin-gen
1529        Identifier: begin-gen
1529         Identifier: expr: 'curContactos'
1529        Identifier: end-gen
1529        With: line: ' #WITH_START'
1529      <-Source: line: ' #WITH_START'
1529     <--If: line: ' #WITH_START'
1529    <---Source: line: ' #WITH_START'
1529   <----Function: line: ' #WITH_START'
1529  <-----Source: line: ' #WITH_START'
1529 <------Class: line: ' #WITH_START'
1529<-------Source: line: ' #WITH_START'
1530        Source: begin-gen
1530         InstructionCall: begin-gen
1530          FunctionCall: begin-gen
1530           Value: begin-gen
1530            Identifier: begin-gen
1530             Identifier: expr: 'Insert'
1530           <-Value: expr: 'Insert'
1530            Identifier: end-gen
1530           Value: end-gen
1530           FunctionCall: expr: 'setModeAccess(Insert)'
1530          FunctionCall: end-gen
1530          InstructionCall: line: 'setModeAccess(Insert)'
1530        <-Source: line: 'setModeAccess(Insert)'
1530       <--With: line: 'curContactos.setModeAccess(Insert)'
1530      <---Source: line: 'curContactos.setModeAccess(Insert)'
1530     <----If: line: 'curContactos.setModeAccess(Insert)'
1530    <-----Source: line: 'curContactos.setModeAccess(Insert)'
1530   <------Function: line: 'curContactos.setModeAccess(Insert)'
1530  <-------Source: line: 'curContactos.setModeAccess(Insert)'
1530 <--------Class: line: 'curContactos.setModeAccess(Insert)'
1530<---------Source: line: 'curContactos.setModeAccess(Insert)'
1531         InstructionCall: end-gen
1531         InstructionCall: begin-gen
1531          FunctionCall: begin-gen
1531           FunctionCall: expr: 'refreshBuffer()'
1531          FunctionCall: end-gen
1531          InstructionCall: line: 'refreshBuffer()'
1531        <-Source: line: 'refreshBuffer()'
1531       <--With: line: 'curContactos.refreshBuffer()'
1531      <---Source: line: 'curContactos.refreshBuffer()'
1531     <----If: line: 'curContactos.refreshBuffer()'
1531    <-----Source: line: 'curContactos.refreshBuffer()'
1531   <------Function: line: 'curContactos.refreshBuffer()'
1531  <-------Source: line: 'curContactos.refreshBuffer()'
1531 <--------Class: line: 'curContactos.refreshBuffer()'
1531<---------Source: line: 'curContactos.refreshBuffer()'
1532         InstructionCall: end-gen
1532         InstructionCall: begin-gen
1532          FunctionCall: begin-gen
1532           Value: begin-gen
1532            Constant: begin-gen
1532             Constant: ctype: 'String' -> 'codcontacto'
1532             Constant: expr: 'u"codcontacto"'
1532           <-Value: expr: 'u"codcontacto"'
1532            Constant: end-gen
1532           Value: end-gen
1532           Value: begin-gen
1532            Member: begin-gen
1532             Identifier: begin-gen
1532              Identifier: expr: 'util'
1532             Identifier: end-gen
1532             FunctionCall: begin-gen
1532              Value: begin-gen
1532               Constant: begin-gen
1532                Constant: ctype: 'String' -> 'codcontacto'
1532                Constant: expr: 'u"codcontacto"'
1532              <-Value: expr: 'u"codcontacto"'
1532               Constant: end-gen
1532              Value: end-gen
1532              Value: begin-gen
1532               Identifier: begin-gen
1532                Identifier: expr: 'self'
1532              <-Value: expr: 'self'
1532               Identifier: end-gen
1532              Value: end-gen
1532              FunctionCall: expr: 'nextCounter(u"codcontacto", self)'
1532             FunctionCall: end-gen
1532             Member: expr: 'util.nextCounter(u"codcontacto", self)'
1532           <-Value: expr: 'util.nextCounter(u"codcontacto", self)'
1532            Member: end-gen
1532           Value: end-gen
1532           FunctionCall: expr: 'setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1532          FunctionCall: end-gen
1532          InstructionCall: line: 'setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1532        <-Source: line: 'setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1532       <--With: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1532      <---Source: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1532     <----If: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1532    <-----Source: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1532   <------Function: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1532  <-------Source: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1532 <--------Class: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1532<---------Source: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1533         InstructionCall: end-gen
1533         InstructionCall: begin-gen
1533          FunctionCall: begin-gen
1533           Value: begin-gen
1533            Constant: begin-gen
1533             Constant: ctype: 'String' -> 'nombre'
1533             Constant: expr: 'u"nombre"'
1533           <-Value: expr: 'u"nombre"'
1533            Constant: end-gen
1533           Value: end-gen
1533           Value: begin-gen
1533            Identifier: begin-gen
1533             Identifier: expr: 'nombreCon'
1533           <-Value: expr: 'nombreCon'
1533            Identifier: end-gen
1533           Value: end-gen
1533           FunctionCall: expr: 'setValueBuffer(u"nombre", nombreCon)'
1533          FunctionCall: end-gen
1533          InstructionCall: line: 'setValueBuffer(u"nombre", nombreCon)'
1533        <-Source: line: 'setValueBuffer(u"nombre", nombreCon)'
1533       <--With: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1533      <---Source: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1533     <----If: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1533    <-----Source: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1533   <------Function: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1533  <-------Source: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1533 <--------Class: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1533<---------Source: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1534         InstructionCall: end-gen
1534         InstructionCall: begin-gen
1534          FunctionCall: begin-gen
1534           Value: begin-gen
1534            Constant: begin-gen
1534             Constant: ctype: 'String' -> 'email'
1534             Constant: expr: 'u"email"'
1534           <-Value: expr: 'u"email"'
1534            Constant: end-gen
1534           Value: end-gen
1534           Value: begin-gen
1534            Identifier: begin-gen
1534             Identifier: expr: 'emailCon'
1534           <-Value: expr: 'emailCon'
1534            Identifier: end-gen
1534           Value: end-gen
1534           FunctionCall: expr: 'setValueBuffer(u"email", emailCon)'
1534          FunctionCall: end-gen
1534          InstructionCall: line: 'setValueBuffer(u"email", emailCon)'
1534        <-Source: line: 'setValueBuffer(u"email", emailCon)'
1534       <--With: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1534      <---Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1534     <----If: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1534    <-----Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1534   <------Function: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1534  <-------Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1534 <--------Class: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1534<---------Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1535         InstructionCall: end-gen
1535         InstructionCall: begin-gen
1535          FunctionCall: begin-gen
1535           Value: begin-gen
1535            Constant: begin-gen
1535             Constant: ctype: 'String' -> 'telefono1'
1535             Constant: expr: 'u"telefono1"'
1535           <-Value: expr: 'u"telefono1"'
1535            Constant: end-gen
1535           Value: end-gen
1535           Value: begin-gen
1535            Identifier: begin-gen
1535             Identifier: expr: 'telefonoCon'
1535           <-Value: expr: 'telefonoCon'
1535            Identifier: end-gen
1535           Value: end-gen
1535           FunctionCall: expr: 'setValueBuffer(u"telefono1", telefonoCon)'
1535          FunctionCall: end-gen
1535          InstructionCall: line: 'setValueBuffer(u"telefono1", telefonoCon)'
1535        <-Source: line: 'setValueBuffer(u"telefono1", telefonoCon)'
1535       <--With: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1535      <---Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1535     <----If: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1535    <-----Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1535   <------Function: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1535  <-------Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1535 <--------Class: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1535<---------Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1536         InstructionCall: end-gen
1536         InstructionCall: begin-gen
1536          FunctionCall: begin-gen
1536           Value: begin-gen
1536            Constant: begin-gen
1536             Constant: ctype: 'String' -> 'cargo'
1536             Constant: expr: 'u"cargo"'
1536           <-Value: expr: 'u"cargo"'
1536            Constant: end-gen
1536           Value: end-gen
1536           Value: begin-gen
1536            Identifier: begin-gen
1536             Identifier: expr: 'cargoCon'
1536           <-Value: expr: 'cargoCon'
1536            Identifier: end-gen
1536           Value: end-gen
1536           FunctionCall: expr: 'setValueBuffer(u"cargo", cargoCon)'
1536          FunctionCall: end-gen
1536          InstructionCall: line: 'setValueBuffer(u"cargo", cargoCon)'
1536        <-Source: line: 'setValueBuffer(u"cargo", cargoCon)'
1536       <--With: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1536      <---Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1536     <----If: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1536    <-----Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1536   <------Function: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1536  <-------Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1536 <--------Class: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1536<---------Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1537         InstructionCall: end-gen
1537         InstructionCall: begin-gen
1537          FunctionCall: begin-gen
1537           Value: begin-gen
1537            Constant: begin-gen
1537             Constant: ctype: 'String' -> 'fax'
1537             Constant: expr: 'u"fax"'
1537           <-Value: expr: 'u"fax"'
1537            Constant: end-gen
1537           Value: end-gen
1537           Value: begin-gen
1537            Identifier: begin-gen
1537             Identifier: expr: 'faxCon'
1537           <-Value: expr: 'faxCon'
1537            Identifier: end-gen
1537           Value: end-gen
1537           FunctionCall: expr: 'setValueBuffer(u"fax", faxCon)'
1537          FunctionCall: end-gen
1537          InstructionCall: line: 'setValueBuffer(u"fax", faxCon)'
1537        <-Source: line: 'setValueBuffer(u"fax", faxCon)'
1537       <--With: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1537      <---Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1537     <----If: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1537    <-----Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1537   <------Function: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1537  <-------Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1537 <--------Class: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1537<---------Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1538         InstructionCall: end-gen
1538        Source: end-gen
1538        With: line: ' #WITH_END'
1538      <-Source: line: ' #WITH_END'
1538     <--If: line: ' #WITH_END'
1538    <---Source: line: ' #WITH_END'
1538   <----Function: line: ' #WITH_END'
1538  <-----Source: line: ' #WITH_END'
1538 <------Class: line: ' #WITH_END'
1538<-------Source: line: ' #WITH_END'
1539       With: end-gen
1539       If: begin-gen
1539        Value: begin-gen
1539         OpUnary: begin-gen
1539          OpUnary: expr: 'not'
1539        <-Value: expr: 'not'
1539          Member: begin-gen
1539           Identifier: begin-gen
1539            Identifier: expr: 'curContactos'
1539           Identifier: end-gen
1539           FunctionCall: begin-gen
1539            FunctionCall: expr: 'commitBuffer()'
1539           FunctionCall: end-gen
1539           Member: expr: 'curContactos.commitBuffer()'
1539         <-OpUnary: expr: 'curContactos.commitBuffer()'
1539        <--Value: expr: 'curContactos.commitBuffer()'
1539          Member: end-gen
1539         OpUnary: end-gen
1539        Value: end-gen
1539        If: line: 'if not curContactos.commitBuffer():'
1539      <-Source: line: 'if not curContactos.commitBuffer():'
1539     <--If: line: 'if not curContactos.commitBuffer():'
1539    <---Source: line: 'if not curContactos.commitBuffer():'
1539   <----Function: line: 'if not curContactos.commitBuffer():'
1539  <-----Source: line: 'if not curContactos.commitBuffer():'
1539 <------Class: line: 'if not curContactos.commitBuffer():'
1539<-------Source: line: 'if not curContactos.commitBuffer():'
1540        If: begin: 'block-if'
1540      <-Source: begin: 'block-if'
1540     <--If: begin: 'block-if'
1540    <---Source: begin: 'block-if'
1540   <----Function: begin: 'block-if'
1540  <-----Source: begin: 'block-if'
1540 <------Class: begin: 'block-if'
1540<-------Source: begin: 'block-if'
1540        Source: begin-gen
1540         InstructionFlow: begin-gen
1540          Value: begin-gen
1540           Identifier: begin-gen
1540            Identifier: expr: 'False'
1540          <-Value: expr: 'False'
1540           Identifier: end-gen
1540          Value: end-gen
1540          InstructionFlow: line: 'return False'
1540        <-Source: line: 'return False'
1540       <--If: line: 'return False'
1540      <---Source: line: 'return False'
1540     <----If: line: 'return False'
1540    <-----Source: line: 'return False'
1540   <------Function: line: 'return False'
1540  <-------Source: line: 'return False'
1540 <--------Class: line: 'return False'
1540<---------Source: line: 'return False'
1541         InstructionFlow: end-gen
1541        Source: end-gen
1541        If: end: 'block-if'
1541      <-Source: end: 'block-if'
1541     <--If: end: 'block-if'
1541    <---Source: end: 'block-if'
1541   <----Function: end: 'block-if'
1541  <-----Source: end: 'block-if'
1541 <------Class: end: 'block-if'
1541<-------Source: end: 'block-if'
1541       If: end-gen
1541       InstructionUpdate: begin-gen
1541        Identifier: begin-gen
1541         Identifier: expr: 'codContacto'
1541        Identifier: end-gen
1541        OpUpdate: begin-gen
1541         OpUpdate: expr: '='
1541        OpUpdate: end-gen
1541        Value: begin-gen
1541         Member: begin-gen
1541          Identifier: begin-gen
1541           Identifier: expr: 'curContactos'
1541          Identifier: end-gen
1541          FunctionCall: begin-gen
1541           Value: begin-gen
1541            Constant: begin-gen
1541             Constant: ctype: 'String' -> 'codcontacto'
1541             Constant: expr: 'u"codcontacto"'
1541           <-Value: expr: 'u"codcontacto"'
1541            Constant: end-gen
1541           Value: end-gen
1541           FunctionCall: expr: 'valueBuffer(u"codcontacto")'
1541          FunctionCall: end-gen
1541          Member: expr: 'curContactos.valueBuffer(u"codcontacto")'
1541        <-Value: expr: 'curContactos.valueBuffer(u"codcontacto")'
1541         Member: end-gen
1541        Value: end-gen
1541        InstructionUpdate: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1541      <-Source: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1541     <--If: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1541    <---Source: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1541   <----Function: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1541  <-----Source: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1541 <------Class: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1541<-------Source: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1542       InstructionUpdate: end-gen
1542       If: begin-gen
1542        Value: begin-gen
1542         OpUnary: begin-gen
1542          OpUnary: expr: 'not'
1542        <-Value: expr: 'not'
1542          Identifier: begin-gen
1542           Identifier: expr: 'codContacto'
1542         <-OpUnary: expr: 'codContacto'
1542        <--Value: expr: 'codContacto'
1542          Identifier: end-gen
1542         OpUnary: end-gen
1542        Value: end-gen
1542        If: line: 'if not codContacto:'
1542      <-Source: line: 'if not codContacto:'
1542     <--If: line: 'if not codContacto:'
1542    <---Source: line: 'if not codContacto:'
1542   <----Function: line: 'if not codContacto:'
1542  <-----Source: line: 'if not codContacto:'
1542 <------Class: line: 'if not codContacto:'
1542<-------Source: line: 'if not codContacto:'
1543        If: begin: 'block-if'
1543      <-Source: begin: 'block-if'
1543     <--If: begin: 'block-if'
1543    <---Source: begin: 'block-if'
1543   <----Function: begin: 'block-if'
1543  <-----Source: begin: 'block-if'
1543 <------Class: begin: 'block-if'
1543<-------Source: begin: 'block-if'
1543        Source: begin-gen
1543         InstructionFlow: begin-gen
1543          Value: begin-gen
1543           Identifier: begin-gen
1543            Identifier: expr: 'False'
1543          <-Value: expr: 'False'
1543           Identifier: end-gen
1543          Value: end-gen
1543          InstructionFlow: line: 'return False'
1543        <-Source: line: 'return False'
1543       <--If: line: 'return False'
1543      <---Source: line: 'return False'
1543     <----If: line: 'return False'
1543    <-----Source: line: 'return False'
1543   <------Function: line: 'return False'
1543  <-------Source: line: 'return False'
1543 <--------Class: line: 'return False'
1543<---------Source: line: 'return False'
1544         InstructionFlow: end-gen
1544        Source: end-gen
1544        If: end: 'block-if'
1544      <-Source: end: 'block-if'
1544     <--If: end: 'block-if'
1544    <---Source: end: 'block-if'
1544   <----Function: end: 'block-if'
1544  <-----Source: end: 'block-if'
1544 <------Class: end: 'block-if'
1544<-------Source: end: 'block-if'
1544       If: end-gen
1544      Source: end-gen
1544      If: end: 'block-else'
1544    <-Source: end: 'block-else'
1544   <--Function: end: 'block-else'
1544  <---Source: end: 'block-else'
1544 <----Class: end: 'block-else'
1544<-----Source: end: 'block-else'
1545     If: end-gen
1545     If: begin-gen
1545      Expression: begin-gen
1545       OpUnary: begin-gen
1545        OpUnary: expr: 'not'
1545      <-Expression: expr: 'not'
1545        Identifier: begin-gen
1545         Identifier: expr: 'idAgenda'
1545       <-OpUnary: expr: 'idAgenda'
1545      <--Expression: expr: 'idAgenda'
1545        Identifier: end-gen
1545       OpUnary: end-gen
1545       Compare: begin-gen
1545        Compare: expr: 'or'
1545      <-Expression: expr: 'or'
1545       Compare: end-gen
1545       Identifier: begin-gen
1545        Identifier: expr: 'idAgenda'
1545      <-Expression: expr: 'idAgenda'
1545       Identifier: end-gen
1545       Compare: begin-gen
1545        Compare: expr: '=='
1545      <-Expression: expr: '=='
1545       Compare: end-gen
1545       Constant: begin-gen
1545        Constant: ctype: 'Number' -> '0'
1545        Constant: expr: '0'
1545      <-Expression: expr: '0'
1545       Constant: end-gen
1545      Expression: end-gen
1545      If: line: 'if not idAgenda or idAgenda == 0:'
1545    <-Source: line: 'if not idAgenda or idAgenda == 0:'
1545   <--Function: line: 'if not idAgenda or idAgenda == 0:'
1545  <---Source: line: 'if not idAgenda or idAgenda == 0:'
1545 <----Class: line: 'if not idAgenda or idAgenda == 0:'
1545<-----Source: line: 'if not idAgenda or idAgenda == 0:'
1546      If: begin: 'block-if'
1546    <-Source: begin: 'block-if'
1546   <--Function: begin: 'block-if'
1546  <---Source: begin: 'block-if'
1546 <----Class: begin: 'block-if'
1546<-----Source: begin: 'block-if'
1546      Source: begin-gen
1546       If: begin-gen
1546        Value: begin-gen
1546         OpUnary: begin-gen
1546          OpUnary: expr: 'not'
1546        <-Value: expr: 'not'
1546          Member: begin-gen
1546           Identifier: begin-gen
1546            Identifier: expr: 'util'
1546           Identifier: end-gen
1546           FunctionCall: begin-gen
1546            Value: begin-gen
1546             Constant: begin-gen
1546              Constant: ctype: 'String' -> 'contactosclientes'
1546              Constant: expr: 'u"contactosclientes"'
1546            <-Value: expr: 'u"contactosclientes"'
1546             Constant: end-gen
1546            Value: end-gen
1546            Value: begin-gen
1546             Constant: begin-gen
1546              Constant: ctype: 'String' -> 'id'
1546              Constant: expr: 'u"id"'
1546            <-Value: expr: 'u"id"'
1546             Constant: end-gen
1546            Value: end-gen
1546            Expression: begin-gen
1546             Expression: expr: 'ustr('
1546             Constant: begin-gen
1546              Constant: ctype: 'String' -> "codcontacto = '"
1546              Constant: expr: 'u"codcontacto = \'"'
1546            <-Expression: expr: 'u"codcontacto = \'"'
1546             Constant: end-gen
1546             Expression: expr: ','
1546             Identifier: begin-gen
1546              Identifier: expr: 'codContacto'
1546            <-Expression: expr: 'codContacto'
1546             Identifier: end-gen
1546             Expression: expr: ','
1546             Constant: begin-gen
1546              Constant: ctype: 'String' -> "' AND codcliente = '"
1546              Constant: expr: 'u"\' AND codcliente = \'"'
1546            <-Expression: expr: 'u"\' AND codcliente = \'"'
1546             Constant: end-gen
1546             Expression: expr: ','
1546             Identifier: begin-gen
1546              Identifier: expr: 'codCliente'
1546            <-Expression: expr: 'codCliente'
1546             Identifier: end-gen
1546             Expression: expr: ','
1546             Constant: begin-gen
1546              Constant: ctype: 'String' -> "'"
1546              Constant: expr: 'u"\'"'
1546            <-Expression: expr: 'u"\'"'
1546             Constant: end-gen
1546             Expression: expr: ')'
1546            Expression: end-gen
1546            FunctionCall: expr: 'sqlSelect(u"contactosclientes", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codcliente = \'" , codCliente , u"\'" ))'
1546           FunctionCall: end-gen
1546           Member: expr: 'util.sqlSelect(u"contactosclientes", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codcliente = \'" , codCliente , u"\'" ))'
1546         <-OpUnary: expr: 'util.sqlSelect(u"contactosclientes", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codcliente = \'" , codCliente , u"\'" ))'
1546        <--Value: expr: 'util.sqlSelect(u"contactosclientes", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codcliente = \'" , codCliente , u"\'" ))'
1546          Member: end-gen
1546         OpUnary: end-gen
1546        Value: end-gen
1546        If: line: 'if not util.sqlSelect(u"contactosclientes", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codcliente = \'" , codCliente , u"\'" )):'
1546      <-Source: line: 'if not util.sqlSelect(u"contactosclientes", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codcliente = \'" , codCliente , u"\'" )):'
1546     <--If: line: 'if not util.sqlSelect(u"contactosclientes", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codcliente = \'" , codCliente , u"\'" )):'
1546    <---Source: line: 'if not util.sqlSelect(u"contactosclientes", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codcliente = \'" , codCliente , u"\'" )):'
1546   <----Function: line: 'if not util.sqlSelect(u"contactosclientes", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codcliente = \'" , codCliente , u"\'" )):'
1546  <-----Source: line: 'if not util.sqlSelect(u"contactosclientes", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codcliente = \'" , codCliente , u"\'" )):'
1546 <------Class: line: 'if not util.sqlSelect(u"contactosclientes", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codcliente = \'" , codCliente , u"\'" )):'
1546<-------Source: line: 'if not util.sqlSelect(u"contactosclientes", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codcliente = \'" , codCliente , u"\'" )):'
1547        If: begin: 'block-if'
1547      <-Source: begin: 'block-if'
1547     <--If: begin: 'block-if'
1547    <---Source: begin: 'block-if'
1547   <----Function: begin: 'block-if'
1547  <-----Source: begin: 'block-if'
1547 <------Class: begin: 'block-if'
1547<-------Source: begin: 'block-if'
1547        Source: begin-gen
1547         InstructionCall: begin-gen
1547          Member: begin-gen
1547           Identifier: begin-gen
1547            Identifier: expr: 'curAgenda'
1547           Identifier: end-gen
1547           FunctionCall: begin-gen
1547            Value: begin-gen
1547             Member: begin-gen
1547              Identifier: begin-gen
1547               Identifier: expr: 'curAgenda'
1547              Identifier: end-gen
1547              Identifier: begin-gen
1547               Identifier: expr: 'Insert'
1547              Identifier: end-gen
1547              Member: expr: 'curAgenda.Insert'
1547            <-Value: expr: 'curAgenda.Insert'
1547             Member: end-gen
1547            Value: end-gen
1547            FunctionCall: expr: 'setModeAccess(curAgenda.Insert)'
1547           FunctionCall: end-gen
1547           Member: expr: 'curAgenda.setModeAccess(curAgenda.Insert)'
1547          Member: end-gen
1547          InstructionCall: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1547        <-Source: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1547       <--If: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1547      <---Source: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1547     <----If: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1547    <-----Source: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1547   <------Function: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1547  <-------Source: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1547 <--------Class: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1547<---------Source: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1548         InstructionCall: end-gen
1548         InstructionCall: begin-gen
1548          Member: begin-gen
1548           Identifier: begin-gen
1548            Identifier: expr: 'curAgenda'
1548           Identifier: end-gen
1548           FunctionCall: begin-gen
1548            FunctionCall: expr: 'refreshBuffer()'
1548           FunctionCall: end-gen
1548           Member: expr: 'curAgenda.refreshBuffer()'
1548          Member: end-gen
1548          InstructionCall: line: 'curAgenda.refreshBuffer()'
1548        <-Source: line: 'curAgenda.refreshBuffer()'
1548       <--If: line: 'curAgenda.refreshBuffer()'
1548      <---Source: line: 'curAgenda.refreshBuffer()'
1548     <----If: line: 'curAgenda.refreshBuffer()'
1548    <-----Source: line: 'curAgenda.refreshBuffer()'
1548   <------Function: line: 'curAgenda.refreshBuffer()'
1548  <-------Source: line: 'curAgenda.refreshBuffer()'
1548 <--------Class: line: 'curAgenda.refreshBuffer()'
1548<---------Source: line: 'curAgenda.refreshBuffer()'
1549         InstructionCall: end-gen
1549         InstructionCall: begin-gen
1549          Member: begin-gen
1549           Identifier: begin-gen
1549            Identifier: expr: 'curAgenda'
1549           Identifier: end-gen
1549           FunctionCall: begin-gen
1549            Value: begin-gen
1549             Constant: begin-gen
1549              Constant: ctype: 'String' -> 'codcliente'
1549              Constant: expr: 'u"codcliente"'
1549            <-Value: expr: 'u"codcliente"'
1549             Constant: end-gen
1549            Value: end-gen
1549            Value: begin-gen
1549             Identifier: begin-gen
1549              Identifier: expr: 'codCliente'
1549            <-Value: expr: 'codCliente'
1549             Identifier: end-gen
1549            Value: end-gen
1549            FunctionCall: expr: 'setValueBuffer(u"codcliente", codCliente)'
1549           FunctionCall: end-gen
1549           Member: expr: 'curAgenda.setValueBuffer(u"codcliente", codCliente)'
1549          Member: end-gen
1549          InstructionCall: line: 'curAgenda.setValueBuffer(u"codcliente", codCliente)'
1549        <-Source: line: 'curAgenda.setValueBuffer(u"codcliente", codCliente)'
1549       <--If: line: 'curAgenda.setValueBuffer(u"codcliente", codCliente)'
1549      <---Source: line: 'curAgenda.setValueBuffer(u"codcliente", codCliente)'
1549     <----If: line: 'curAgenda.setValueBuffer(u"codcliente", codCliente)'
1549    <-----Source: line: 'curAgenda.setValueBuffer(u"codcliente", codCliente)'
1549   <------Function: line: 'curAgenda.setValueBuffer(u"codcliente", codCliente)'
1549  <-------Source: line: 'curAgenda.setValueBuffer(u"codcliente", codCliente)'
1549 <--------Class: line: 'curAgenda.setValueBuffer(u"codcliente", codCliente)'
1549<---------Source: line: 'curAgenda.setValueBuffer(u"codcliente", codCliente)'
1550         InstructionCall: end-gen
1550         InstructionCall: begin-gen
1550          Member: begin-gen
1550           Identifier: begin-gen
1550            Identifier: expr: 'curAgenda'
1550           Identifier: end-gen
1550           FunctionCall: begin-gen
1550            Value: begin-gen
1550             Constant: begin-gen
1550              Constant: ctype: 'String' -> 'codcontacto'
1550              Constant: expr: 'u"codcontacto"'
1550            <-Value: expr: 'u"codcontacto"'
1550             Constant: end-gen
1550            Value: end-gen
1550            Value: begin-gen
1550             Identifier: begin-gen
1550              Identifier: expr: 'codContacto'
1550            <-Value: expr: 'codContacto'
1550             Identifier: end-gen
1550            Value: end-gen
1550            FunctionCall: expr: 'setValueBuffer(u"codcontacto", codContacto)'
1550           FunctionCall: end-gen
1550           Member: expr: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1550          Member: end-gen
1550          InstructionCall: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1550        <-Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1550       <--If: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1550      <---Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1550     <----If: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1550    <-----Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1550   <------Function: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1550  <-------Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1550 <--------Class: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1550<---------Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1551         InstructionCall: end-gen
1551         If: begin-gen
1551          Value: begin-gen
1551           OpUnary: begin-gen
1551            OpUnary: expr: 'not'
1551          <-Value: expr: 'not'
1551            Member: begin-gen
1551             Identifier: begin-gen
1551              Identifier: expr: 'curAgenda'
1551             Identifier: end-gen
1551             FunctionCall: begin-gen
1551              FunctionCall: expr: 'commitBuffer()'
1551             FunctionCall: end-gen
1551             Member: expr: 'curAgenda.commitBuffer()'
1551           <-OpUnary: expr: 'curAgenda.commitBuffer()'
1551          <--Value: expr: 'curAgenda.commitBuffer()'
1551            Member: end-gen
1551           OpUnary: end-gen
1551          Value: end-gen
1551          If: line: 'if not curAgenda.commitBuffer():'
1551        <-Source: line: 'if not curAgenda.commitBuffer():'
1551       <--If: line: 'if not curAgenda.commitBuffer():'
1551      <---Source: line: 'if not curAgenda.commitBuffer():'
1551     <----If: line: 'if not curAgenda.commitBuffer():'
1551    <-----Source: line: 'if not curAgenda.commitBuffer():'
1551   <------Function: line: 'if not curAgenda.commitBuffer():'
1551  <-------Source: line: 'if not curAgenda.commitBuffer():'
1551 <--------Class: line: 'if not curAgenda.commitBuffer():'
1551<---------Source: line: 'if not curAgenda.commitBuffer():'
1552          If: begin: 'block-if'
1552        <-Source: begin: 'block-if'
1552       <--If: begin: 'block-if'
1552      <---Source: begin: 'block-if'
1552     <----If: begin: 'block-if'
1552    <-----Source: begin: 'block-if'
1552   <------Function: begin: 'block-if'
1552  <-------Source: begin: 'block-if'
1552 <--------Class: begin: 'block-if'
1552<---------Source: begin: 'block-if'
1552          Source: begin-gen
1552           InstructionFlow: begin-gen
1552            Value: begin-gen
1552             Identifier: begin-gen
1552              Identifier: expr: 'False'
1552            <-Value: expr: 'False'
1552             Identifier: end-gen
1552            Value: end-gen
1552            InstructionFlow: line: 'return False'
1552          <-Source: line: 'return False'
1552         <--If: line: 'return False'
1552        <---Source: line: 'return False'
1552       <----If: line: 'return False'
1552      <-----Source: line: 'return False'
1552     <------If: line: 'return False'
1552    <-------Source: line: 'return False'
1552   <--------Function: line: 'return False'
1552  <---------Source: line: 'return False'
1552 <----------Class: line: 'return False'
1552<-----------Source: line: 'return False'
1553           InstructionFlow: end-gen
1553          Source: end-gen
1553          If: end: 'block-if'
1553        <-Source: end: 'block-if'
1553       <--If: end: 'block-if'
1553      <---Source: end: 'block-if'
1553     <----If: end: 'block-if'
1553    <-----Source: end: 'block-if'
1553   <------Function: end: 'block-if'
1553  <-------Source: end: 'block-if'
1553 <--------Class: end: 'block-if'
1553<---------Source: end: 'block-if'
1553         If: end-gen
1553        Source: end-gen
1553        If: end: 'block-if'
1553      <-Source: end: 'block-if'
1553     <--If: end: 'block-if'
1553    <---Source: end: 'block-if'
1553   <----Function: end: 'block-if'
1553  <-----Source: end: 'block-if'
1553 <------Class: end: 'block-if'
1553<-------Source: end: 'block-if'
1553       If: end-gen
1553      Source: end-gen
1553      If: end: 'block-if'
1553    <-Source: end: 'block-if'
1553   <--Function: end: 'block-if'
1553  <---Source: end: 'block-if'
1553 <----Class: end: 'block-if'
1553<-----Source: end: 'block-if'
1553      If: line: 'else:'
1553    <-Source: line: 'else:'
1553   <--Function: line: 'else:'
1553  <---Source: line: 'else:'
1553 <----Class: line: 'else:'
1553<-----Source: line: 'else:'
1555      If: begin: 'block-else'
1555    <-Source: begin: 'block-else'
1555   <--Function: begin: 'block-else'
1555  <---Source: begin: 'block-else'
1555 <----Class: begin: 'block-else'
1555<-----Source: begin: 'block-else'
1555      Source: begin-gen
1555       InstructionCall: begin-gen
1555        Member: begin-gen
1555         Identifier: begin-gen
1555          Identifier: expr: 'curAgenda'
1555         Identifier: end-gen
1555         FunctionCall: begin-gen
1555          Expression: begin-gen
1555           Expression: expr: 'ustr('
1555           Constant: begin-gen
1555            Constant: ctype: 'String' -> 'id = '
1555            Constant: expr: 'u"id = "'
1555          <-Expression: expr: 'u"id = "'
1555           Constant: end-gen
1555           Expression: expr: ','
1555           Identifier: begin-gen
1555            Identifier: expr: 'idAgenda'
1555          <-Expression: expr: 'idAgenda'
1555           Identifier: end-gen
1555           Expression: expr: ')'
1555          Expression: end-gen
1555          FunctionCall: expr: 'select(ustr( u"id = " , idAgenda ))'
1555         FunctionCall: end-gen
1555         Member: expr: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1555        Member: end-gen
1555        InstructionCall: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1555      <-Source: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1555     <--If: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1555    <---Source: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1555   <----Function: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1555  <-----Source: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1555 <------Class: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1555<-------Source: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1556       InstructionCall: end-gen
1556       If: begin-gen
1556        Value: begin-gen
1556         OpUnary: begin-gen
1556          OpUnary: expr: 'not'
1556        <-Value: expr: 'not'
1556          Member: begin-gen
1556           Identifier: begin-gen
1556            Identifier: expr: 'curAgenda'
1556           Identifier: end-gen
1556           FunctionCall: begin-gen
1556            FunctionCall: expr: 'first()'
1556           FunctionCall: end-gen
1556           Member: expr: 'curAgenda.first()'
1556         <-OpUnary: expr: 'curAgenda.first()'
1556        <--Value: expr: 'curAgenda.first()'
1556          Member: end-gen
1556         OpUnary: end-gen
1556        Value: end-gen
1556        If: line: 'if not curAgenda.first():'
1556      <-Source: line: 'if not curAgenda.first():'
1556     <--If: line: 'if not curAgenda.first():'
1556    <---Source: line: 'if not curAgenda.first():'
1556   <----Function: line: 'if not curAgenda.first():'
1556  <-----Source: line: 'if not curAgenda.first():'
1556 <------Class: line: 'if not curAgenda.first():'
1556<-------Source: line: 'if not curAgenda.first():'
1557        If: begin: 'block-if'
1557      <-Source: begin: 'block-if'
1557     <--If: begin: 'block-if'
1557    <---Source: begin: 'block-if'
1557   <----Function: begin: 'block-if'
1557  <-----Source: begin: 'block-if'
1557 <------Class: begin: 'block-if'
1557<-------Source: begin: 'block-if'
1557        Source: begin-gen
1557         InstructionFlow: begin-gen
1557          Value: begin-gen
1557           Identifier: begin-gen
1557            Identifier: expr: 'False'
1557          <-Value: expr: 'False'
1557           Identifier: end-gen
1557          Value: end-gen
1557          InstructionFlow: line: 'return False'
1557        <-Source: line: 'return False'
1557       <--If: line: 'return False'
1557      <---Source: line: 'return False'
1557     <----If: line: 'return False'
1557    <-----Source: line: 'return False'
1557   <------Function: line: 'return False'
1557  <-------Source: line: 'return False'
1557 <--------Class: line: 'return False'
1557<---------Source: line: 'return False'
1558         InstructionFlow: end-gen
1558        Source: end-gen
1558        If: end: 'block-if'
1558      <-Source: end: 'block-if'
1558     <--If: end: 'block-if'
1558    <---Source: end: 'block-if'
1558   <----Function: end: 'block-if'
1558  <-----Source: end: 'block-if'
1558 <------Class: end: 'block-if'
1558<-------Source: end: 'block-if'
1558       If: end-gen
1558       InstructionCall: begin-gen
1558        Member: begin-gen
1558         Identifier: begin-gen
1558          Identifier: expr: 'curAgenda'
1558         Identifier: end-gen
1558         FunctionCall: begin-gen
1558          Value: begin-gen
1558           Member: begin-gen
1558            Identifier: begin-gen
1558             Identifier: expr: 'curAgenda'
1558            Identifier: end-gen
1558            Identifier: begin-gen
1558             Identifier: expr: 'Edit'
1558            Identifier: end-gen
1558            Member: expr: 'curAgenda.Edit'
1558          <-Value: expr: 'curAgenda.Edit'
1558           Member: end-gen
1558          Value: end-gen
1558          FunctionCall: expr: 'setModeAccess(curAgenda.Edit)'
1558         FunctionCall: end-gen
1558         Member: expr: 'curAgenda.setModeAccess(curAgenda.Edit)'
1558        Member: end-gen
1558        InstructionCall: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1558      <-Source: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1558     <--If: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1558    <---Source: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1558   <----Function: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1558  <-----Source: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1558 <------Class: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1558<-------Source: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1559       InstructionCall: end-gen
1559       InstructionCall: begin-gen
1559        Member: begin-gen
1559         Identifier: begin-gen
1559          Identifier: expr: 'curAgenda'
1559         Identifier: end-gen
1559         FunctionCall: begin-gen
1559          FunctionCall: expr: 'refreshBuffer()'
1559         FunctionCall: end-gen
1559         Member: expr: 'curAgenda.refreshBuffer()'
1559        Member: end-gen
1559        InstructionCall: line: 'curAgenda.refreshBuffer()'
1559      <-Source: line: 'curAgenda.refreshBuffer()'
1559     <--If: line: 'curAgenda.refreshBuffer()'
1559    <---Source: line: 'curAgenda.refreshBuffer()'
1559   <----Function: line: 'curAgenda.refreshBuffer()'
1559  <-----Source: line: 'curAgenda.refreshBuffer()'
1559 <------Class: line: 'curAgenda.refreshBuffer()'
1559<-------Source: line: 'curAgenda.refreshBuffer()'
1560       InstructionCall: end-gen
1560       InstructionCall: begin-gen
1560        Member: begin-gen
1560         Identifier: begin-gen
1560          Identifier: expr: 'curAgenda'
1560         Identifier: end-gen
1560         FunctionCall: begin-gen
1560          Value: begin-gen
1560           Constant: begin-gen
1560            Constant: ctype: 'String' -> 'codcontacto'
1560            Constant: expr: 'u"codcontacto"'
1560          <-Value: expr: 'u"codcontacto"'
1560           Constant: end-gen
1560          Value: end-gen
1560          Value: begin-gen
1560           Identifier: begin-gen
1560            Identifier: expr: 'codContacto'
1560          <-Value: expr: 'codContacto'
1560           Identifier: end-gen
1560          Value: end-gen
1560          FunctionCall: expr: 'setValueBuffer(u"codcontacto", codContacto)'
1560         FunctionCall: end-gen
1560         Member: expr: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1560        Member: end-gen
1560        InstructionCall: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1560      <-Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1560     <--If: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1560    <---Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1560   <----Function: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1560  <-----Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1560 <------Class: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1560<-------Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1561       InstructionCall: end-gen
1561       If: begin-gen
1561        Value: begin-gen
1561         OpUnary: begin-gen
1561          OpUnary: expr: 'not'
1561        <-Value: expr: 'not'
1561          Member: begin-gen
1561           Identifier: begin-gen
1561            Identifier: expr: 'curAgenda'
1561           Identifier: end-gen
1561           FunctionCall: begin-gen
1561            FunctionCall: expr: 'commitBuffer()'
1561           FunctionCall: end-gen
1561           Member: expr: 'curAgenda.commitBuffer()'
1561         <-OpUnary: expr: 'curAgenda.commitBuffer()'
1561        <--Value: expr: 'curAgenda.commitBuffer()'
1561          Member: end-gen
1561         OpUnary: end-gen
1561        Value: end-gen
1561        If: line: 'if not curAgenda.commitBuffer():'
1561      <-Source: line: 'if not curAgenda.commitBuffer():'
1561     <--If: line: 'if not curAgenda.commitBuffer():'
1561    <---Source: line: 'if not curAgenda.commitBuffer():'
1561   <----Function: line: 'if not curAgenda.commitBuffer():'
1561  <-----Source: line: 'if not curAgenda.commitBuffer():'
1561 <------Class: line: 'if not curAgenda.commitBuffer():'
1561<-------Source: line: 'if not curAgenda.commitBuffer():'
1562        If: begin: 'block-if'
1562      <-Source: begin: 'block-if'
1562     <--If: begin: 'block-if'
1562    <---Source: begin: 'block-if'
1562   <----Function: begin: 'block-if'
1562  <-----Source: begin: 'block-if'
1562 <------Class: begin: 'block-if'
1562<-------Source: begin: 'block-if'
1562        Source: begin-gen
1562         InstructionFlow: begin-gen
1562          Value: begin-gen
1562           Identifier: begin-gen
1562            Identifier: expr: 'False'
1562          <-Value: expr: 'False'
1562           Identifier: end-gen
1562          Value: end-gen
1562          InstructionFlow: line: 'return False'
1562        <-Source: line: 'return False'
1562       <--If: line: 'return False'
1562      <---Source: line: 'return False'
1562     <----If: line: 'return False'
1562    <-----Source: line: 'return False'
1562   <------Function: line: 'return False'
1562  <-------Source: line: 'return False'
1562 <--------Class: line: 'return False'
1562<---------Source: line: 'return False'
1563         InstructionFlow: end-gen
1563        Source: end-gen
1563        If: end: 'block-if'
1563      <-Source: end: 'block-if'
1563     <--If: end: 'block-if'
1563    <---Source: end: 'block-if'
1563   <----Function: end: 'block-if'
1563  <-----Source: end: 'block-if'
1563 <------Class: end: 'block-if'
1563<-------Source: end: 'block-if'
1563       If: end-gen
1563      Source: end-gen
1563      If: end: 'block-else'
1563    <-Source: end: 'block-else'
1563   <--Function: end: 'block-else'
1563  <---Source: end: 'block-else'
1563 <----Class: end: 'block-else'
1563<-----Source: end: 'block-else'
1564     If: end-gen
1564     InstructionFlow: begin-gen
1564      Value: begin-gen
1564       Identifier: begin-gen
1564        Identifier: expr: 'codContacto'
1564      <-Value: expr: 'codContacto'
1564       Identifier: end-gen
1564      Value: end-gen
1564      InstructionFlow: line: 'return codContacto'
1564    <-Source: line: 'return codContacto'
1564   <--Function: line: 'return codContacto'
1564  <---Source: line: 'return codContacto'
1564 <----Class: line: 'return codContacto'
1564<-----Source: line: 'return codContacto'
1565     InstructionFlow: end-gen
1565    Source: end-gen
1565    Function: end: 'block-def-oficial_actualizarContactosDeAgenda20070525'
1565  <-Source: end: 'block-def-oficial_actualizarContactosDeAgenda20070525'
1565 <--Class: end: 'block-def-oficial_actualizarContactosDeAgenda20070525'
1565<---Source: end: 'block-def-oficial_actualizarContactosDeAgenda20070525'
1566   Function: end-gen
1566   Function: begin-gen
1566    Variable: begin-gen
1566     Variable: expr: 'cursor'
1566    Variable: end-gen
1566    Variable: begin-gen
1566     Variable: expr: 'evento'
1566    Variable: end-gen
1566    Function: line: 'def oficial_lanzarEvento(self, cursor = None, evento = None):'
1566  <-Source: line: 'def oficial_lanzarEvento(self, cursor = None, evento = None):'
1566 <--Class: line: 'def oficial_lanzarEvento(self, cursor = None, evento = None):'
1566<---Source: line: 'def oficial_lanzarEvento(self, cursor = None, evento = None):'
1567    Function: begin: 'block-def-oficial_lanzarEvento'
1567  <-Source: begin: 'block-def-oficial_lanzarEvento'
1567 <--Class: begin: 'block-def-oficial_lanzarEvento'
1567<---Source: begin: 'block-def-oficial_lanzarEvento'
1567    Source: begin-gen
1567     DeclarationBlock: begin-gen
1567      Variable: begin-gen
1567       Variable: expr: 'datosEvento'
1567       Variable: expr: '='
1567       Value: begin-gen
1567        Constant: begin-gen
1567         Constant: ctype: None -> None
1567         Constant: expr: '[]'
1567       <-Value: expr: '[]'
1567      <--Variable: expr: 'qsatype.Array()'
1567        Constant: end-gen
1567       Value: end-gen
1567      Variable: end-gen
1567      DeclarationBlock: line: 'datosEvento = qsatype.Array()'
1567    <-Source: line: 'datosEvento = qsatype.Array()'
1567   <--Function: line: 'datosEvento = qsatype.Array()'
1567  <---Source: line: 'datosEvento = qsatype.Array()'
1567 <----Class: line: 'datosEvento = qsatype.Array()'
1567<-----Source: line: 'datosEvento = qsatype.Array()'
1568     DeclarationBlock: end-gen
1568     InstructionUpdate: begin-gen
1568      ArrayMember: begin-gen
1568       Identifier: begin-gen
1568        Identifier: expr: 'datosEvento'
1568       Identifier: end-gen
1568       Value: begin-gen
1568        Constant: begin-gen
1568         Constant: ctype: 'String' -> 'tipoobjeto'
1568         Constant: expr: 'u"tipoobjeto"'
1568       <-Value: expr: 'u"tipoobjeto"'
1568        Constant: end-gen
1568       Value: end-gen
1568       ArrayMember: expr: 'datosEvento[u"tipoobjeto"]'
1568      ArrayMember: end-gen
1568      OpUpdate: begin-gen
1568       OpUpdate: expr: '='
1568      OpUpdate: end-gen
1568      Value: begin-gen
1568       Member: begin-gen
1568        Identifier: begin-gen
1568         Identifier: expr: 'cursor'
1568        Identifier: end-gen
1568        FunctionCall: begin-gen
1568         FunctionCall: expr: 'table()'
1568        FunctionCall: end-gen
1568        Member: expr: 'cursor.table()'
1568      <-Value: expr: 'cursor.table()'
1568       Member: end-gen
1568      Value: end-gen
1568      InstructionUpdate: line: 'datosEvento[u"tipoobjeto"] = cursor.table()'
1568    <-Source: line: 'datosEvento[u"tipoobjeto"] = cursor.table()'
1568   <--Function: line: 'datosEvento[u"tipoobjeto"] = cursor.table()'
1568  <---Source: line: 'datosEvento[u"tipoobjeto"] = cursor.table()'
1568 <----Class: line: 'datosEvento[u"tipoobjeto"] = cursor.table()'
1568<-----Source: line: 'datosEvento[u"tipoobjeto"] = cursor.table()'
1569     InstructionUpdate: end-gen
1569     InstructionUpdate: begin-gen
1569      ArrayMember: begin-gen
1569       Identifier: begin-gen
1569        Identifier: expr: 'datosEvento'
1569       Identifier: end-gen
1569       Value: begin-gen
1569        Constant: begin-gen
1569         Constant: ctype: 'String' -> 'idobjeto'
1569         Constant: expr: 'u"idobjeto"'
1569       <-Value: expr: 'u"idobjeto"'
1569        Constant: end-gen
1569       Value: end-gen
1569       ArrayMember: expr: 'datosEvento[u"idobjeto"]'
1569      ArrayMember: end-gen
1569      OpUpdate: begin-gen
1569       OpUpdate: expr: '='
1569      OpUpdate: end-gen
1569      Value: begin-gen
1569       Member: begin-gen
1569        Identifier: begin-gen
1569         Identifier: expr: 'cursor'
1569        Identifier: end-gen
1569        FunctionCall: begin-gen
1569         Value: begin-gen
1569          Member: begin-gen
1569           Identifier: begin-gen
1569            Identifier: expr: 'cursor'
1569           Identifier: end-gen
1569           FunctionCall: begin-gen
1569            FunctionCall: expr: 'primaryKey()'
1569           FunctionCall: end-gen
1569           Member: expr: 'cursor.primaryKey()'
1569         <-Value: expr: 'cursor.primaryKey()'
1569          Member: end-gen
1569         Value: end-gen
1569         FunctionCall: expr: 'valueBuffer(cursor.primaryKey())'
1569        FunctionCall: end-gen
1569        Member: expr: 'cursor.valueBuffer(cursor.primaryKey())'
1569      <-Value: expr: 'cursor.valueBuffer(cursor.primaryKey())'
1569       Member: end-gen
1569      Value: end-gen
1569      InstructionUpdate: line: 'datosEvento[u"idobjeto"] = cursor.valueBuffer(cursor.primaryKey())'
1569    <-Source: line: 'datosEvento[u"idobjeto"] = cursor.valueBuffer(cursor.primaryKey())'
1569   <--Function: line: 'datosEvento[u"idobjeto"] = cursor.valueBuffer(cursor.primaryKey())'
1569  <---Source: line: 'datosEvento[u"idobjeto"] = cursor.valueBuffer(cursor.primaryKey())'
1569 <----Class: line: 'datosEvento[u"idobjeto"] = cursor.valueBuffer(cursor.primaryKey())'
1569<-----Source: line: 'datosEvento[u"idobjeto"] = cursor.valueBuffer(cursor.primaryKey())'
1570     InstructionUpdate: end-gen
1570     InstructionUpdate: begin-gen
1570      ArrayMember: begin-gen
1570       Identifier: begin-gen
1570        Identifier: expr: 'datosEvento'
1570       Identifier: end-gen
1570       Value: begin-gen
1570        Constant: begin-gen
1570         Constant: ctype: 'String' -> 'evento'
1570         Constant: expr: 'u"evento"'
1570       <-Value: expr: 'u"evento"'
1570        Constant: end-gen
1570       Value: end-gen
1570       ArrayMember: expr: 'datosEvento[u"evento"]'
1570      ArrayMember: end-gen
1570      OpUpdate: begin-gen
1570       OpUpdate: expr: '='
1570      OpUpdate: end-gen
1570      Value: begin-gen
1570       Identifier: begin-gen
1570        Identifier: expr: 'evento'
1570      <-Value: expr: 'evento'
1570       Identifier: end-gen
1570      Value: end-gen
1570      InstructionUpdate: line: 'datosEvento[u"evento"] = evento'
1570    <-Source: line: 'datosEvento[u"evento"] = evento'
1570   <--Function: line: 'datosEvento[u"evento"] = evento'
1570  <---Source: line: 'datosEvento[u"evento"] = evento'
1570 <----Class: line: 'datosEvento[u"evento"] = evento'
1570<-----Source: line: 'datosEvento[u"evento"] = evento'
1571     InstructionUpdate: end-gen
1571     If: begin-gen
1571      Value: begin-gen
1571       OpUnary: begin-gen
1571        OpUnary: expr: 'not'
1571      <-Value: expr: 'not'
1571        Member: begin-gen
1571         Identifier: begin-gen
1571          Identifier: expr: 'flcolaproc'
1571         Identifier: end-gen
1571         Identifier: begin-gen
1571          Identifier: expr: 'iface'
1571         Identifier: end-gen
1571         FunctionCall: begin-gen
1571          Value: begin-gen
1571           Identifier: begin-gen
1571            Identifier: expr: 'datosEvento'
1571          <-Value: expr: 'datosEvento'
1571           Identifier: end-gen
1571          Value: end-gen
1571          FunctionCall: expr: 'pub_procesarEvento(datosEvento)'
1571         FunctionCall: end-gen
1571         Member: expr: 'flcolaproc.iface.pub_procesarEvento(datosEvento)'
1571       <-OpUnary: expr: 'flcolaproc.iface.pub_procesarEvento(datosEvento)'
1571      <--Value: expr: 'flcolaproc.iface.pub_procesarEvento(datosEvento)'
1571        Member: end-gen
1571       OpUnary: end-gen
1571      Value: end-gen
1571      If: line: 'if not flcolaproc.iface.pub_procesarEvento(datosEvento):'
1571    <-Source: line: 'if not flcolaproc.iface.pub_procesarEvento(datosEvento):'
1571   <--Function: line: 'if not flcolaproc.iface.pub_procesarEvento(datosEvento):'
1571  <---Source: line: 'if not flcolaproc.iface.pub_procesarEvento(datosEvento):'
1571 <----Class: line: 'if not flcolaproc.iface.pub_procesarEvento(datosEvento):'
1571<-----Source: line: 'if not flcolaproc.iface.pub_procesarEvento(datosEvento):'
1572      If: begin: 'block-if'
1572    <-Source: begin: 'block-if'
1572   <--Function: begin: 'block-if'
1572  <---Source: begin: 'block-if'
1572 <----Class: begin: 'block-if'
1572<-----Source: begin: 'block-if'
1572      Source: begin-gen
1572       InstructionFlow: begin-gen
1572        Value: begin-gen
1572         Identifier: begin-gen
1572          Identifier: expr: 'False'
1572        <-Value: expr: 'False'
1572         Identifier: end-gen
1572        Value: end-gen
1572        InstructionFlow: line: 'return False'
1572      <-Source: line: 'return False'
1572     <--If: line: 'return False'
1572    <---Source: line: 'return False'
1572   <----Function: line: 'return False'
1572  <-----Source: line: 'return False'
1572 <------Class: line: 'return False'
1572<-------Source: line: 'return False'
1573       InstructionFlow: end-gen
1573      Source: end-gen
1573      If: end: 'block-if'
1573    <-Source: end: 'block-if'
1573   <--Function: end: 'block-if'
1573  <---Source: end: 'block-if'
1573 <----Class: end: 'block-if'
1573<-----Source: end: 'block-if'
1573     If: end-gen
1573     InstructionFlow: begin-gen
1573      Value: begin-gen
1573       Identifier: begin-gen
1573        Identifier: expr: 'True'
1573      <-Value: expr: 'True'
1573       Identifier: end-gen
1573      Value: end-gen
1573      InstructionFlow: line: 'return True'
1573    <-Source: line: 'return True'
1573   <--Function: line: 'return True'
1573  <---Source: line: 'return True'
1573 <----Class: line: 'return True'
1573<-----Source: line: 'return True'
1574     InstructionFlow: end-gen
1574    Source: end-gen
1574    Function: end: 'block-def-oficial_lanzarEvento'
1574  <-Source: end: 'block-def-oficial_lanzarEvento'
1574 <--Class: end: 'block-def-oficial_lanzarEvento'
1574<---Source: end: 'block-def-oficial_lanzarEvento'
1575   Function: end-gen
1575   Function: begin-gen
1575    Variable: begin-gen
1575     Variable: expr: 'codProveedor'
1575    Variable: end-gen
1575    Variable: begin-gen
1575     Variable: expr: 'codContacto'
1575    Variable: end-gen
1575    Variable: begin-gen
1575     Variable: expr: 'nombreCon'
1575    Variable: end-gen
1575    Variable: begin-gen
1575     Variable: expr: 'cargoCon'
1575    Variable: end-gen
1575    Variable: begin-gen
1575     Variable: expr: 'telefonoCon'
1575    Variable: end-gen
1575    Variable: begin-gen
1575     Variable: expr: 'faxCon'
1575    Variable: end-gen
1575    Variable: begin-gen
1575     Variable: expr: 'emailCon'
1575    Variable: end-gen
1575    Variable: begin-gen
1575     Variable: expr: 'idAgenda'
1575    Variable: end-gen
1575    Function: line: 'def oficial_actualizarContactosDeAgendaProv20070702(self, codProveedor = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
1575  <-Source: line: 'def oficial_actualizarContactosDeAgendaProv20070702(self, codProveedor = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
1575 <--Class: line: 'def oficial_actualizarContactosDeAgendaProv20070702(self, codProveedor = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
1575<---Source: line: 'def oficial_actualizarContactosDeAgendaProv20070702(self, codProveedor = None, codContacto = None, nombreCon = None, cargoCon = None, telefonoCon = None, faxCon = None, emailCon = None, idAgenda = None):'
1576    Function: begin: 'block-def-oficial_actualizarContactosDeAgendaProv20070702'
1576  <-Source: begin: 'block-def-oficial_actualizarContactosDeAgendaProv20070702'
1576 <--Class: begin: 'block-def-oficial_actualizarContactosDeAgendaProv20070702'
1576<---Source: begin: 'block-def-oficial_actualizarContactosDeAgendaProv20070702'
1576    Source: begin-gen
1576     DeclarationBlock: begin-gen
1576      Variable: begin-gen
1576       Variable: expr: 'util'
1576       Variable: expr: '='
1576       Variable: expr: 'qsatype.FLUtil()'
1576      Variable: end-gen
1576      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1576    <-Source: line: 'util = qsatype.FLUtil()'
1576   <--Function: line: 'util = qsatype.FLUtil()'
1576  <---Source: line: 'util = qsatype.FLUtil()'
1576 <----Class: line: 'util = qsatype.FLUtil()'
1576<-----Source: line: 'util = qsatype.FLUtil()'
1577     DeclarationBlock: end-gen
1577     DeclarationBlock: begin-gen
1577      Variable: begin-gen
1577       Variable: expr: 'curContactos'
1577       Variable: expr: '='
1577       Value: begin-gen
1577        New: begin-gen
1577         FunctionCall: begin-gen
1577          Value: begin-gen
1577           Constant: begin-gen
1577            Constant: ctype: 'String' -> 'crm_contactos'
1577            Constant: expr: 'u"crm_contactos"'
1577          <-Value: expr: 'u"crm_contactos"'
1577           Constant: end-gen
1577          Value: end-gen
1577          FunctionCall: expr: 'FLSqlCursor(u"crm_contactos")'
1577        <-New: expr: 'qsatype.FLSqlCursor(u"crm_contactos")'
1577       <--Value: expr: 'qsatype.FLSqlCursor(u"crm_contactos")'
1577      <---Variable: expr: 'qsatype.FLSqlCursor(u"crm_contactos")'
1577         FunctionCall: end-gen
1577        New: end-gen
1577       Value: end-gen
1577      Variable: end-gen
1577      DeclarationBlock: line: 'curContactos = qsatype.FLSqlCursor(u"crm_contactos")'
1577    <-Source: line: 'curContactos = qsatype.FLSqlCursor(u"crm_contactos")'
1577   <--Function: line: 'curContactos = qsatype.FLSqlCursor(u"crm_contactos")'
1577  <---Source: line: 'curContactos = qsatype.FLSqlCursor(u"crm_contactos")'
1577 <----Class: line: 'curContactos = qsatype.FLSqlCursor(u"crm_contactos")'
1577<-----Source: line: 'curContactos = qsatype.FLSqlCursor(u"crm_contactos")'
1578     DeclarationBlock: end-gen
1578     DeclarationBlock: begin-gen
1578      Variable: begin-gen
1578       Variable: expr: 'curAgenda'
1578       Variable: expr: '='
1578       Value: begin-gen
1578        New: begin-gen
1578         FunctionCall: begin-gen
1578          Value: begin-gen
1578           Constant: begin-gen
1578            Constant: ctype: 'String' -> 'contactosproveedores'
1578            Constant: expr: 'u"contactosproveedores"'
1578          <-Value: expr: 'u"contactosproveedores"'
1578           Constant: end-gen
1578          Value: end-gen
1578          FunctionCall: expr: 'FLSqlCursor(u"contactosproveedores")'
1578        <-New: expr: 'qsatype.FLSqlCursor(u"contactosproveedores")'
1578       <--Value: expr: 'qsatype.FLSqlCursor(u"contactosproveedores")'
1578      <---Variable: expr: 'qsatype.FLSqlCursor(u"contactosproveedores")'
1578         FunctionCall: end-gen
1578        New: end-gen
1578       Value: end-gen
1578      Variable: end-gen
1578      DeclarationBlock: line: 'curAgenda = qsatype.FLSqlCursor(u"contactosproveedores")'
1578    <-Source: line: 'curAgenda = qsatype.FLSqlCursor(u"contactosproveedores")'
1578   <--Function: line: 'curAgenda = qsatype.FLSqlCursor(u"contactosproveedores")'
1578  <---Source: line: 'curAgenda = qsatype.FLSqlCursor(u"contactosproveedores")'
1578 <----Class: line: 'curAgenda = qsatype.FLSqlCursor(u"contactosproveedores")'
1578<-----Source: line: 'curAgenda = qsatype.FLSqlCursor(u"contactosproveedores")'
1579     DeclarationBlock: end-gen
1579     If: begin-gen
1579      Expression: begin-gen
1579       Identifier: begin-gen
1579        Identifier: expr: 'codContacto'
1579      <-Expression: expr: 'codContacto'
1579       Identifier: end-gen
1579       Compare: begin-gen
1579        Compare: expr: 'and'
1579      <-Expression: expr: 'and'
1579       Compare: end-gen
1579       Identifier: begin-gen
1579        Identifier: expr: 'codContacto'
1579      <-Expression: expr: 'codContacto'
1579       Identifier: end-gen
1579       Compare: begin-gen
1579        Compare: expr: '!='
1579      <-Expression: expr: '!='
1579       Compare: end-gen
1579       Constant: begin-gen
1579        Constant: ctype: 'String' -> ''
1579        Constant: expr: 'u""'
1579      <-Expression: expr: 'u""'
1579       Constant: end-gen
1579      Expression: end-gen
1579      If: line: 'if codContacto and codContacto != u"":'
1579    <-Source: line: 'if codContacto and codContacto != u"":'
1579   <--Function: line: 'if codContacto and codContacto != u"":'
1579  <---Source: line: 'if codContacto and codContacto != u"":'
1579 <----Class: line: 'if codContacto and codContacto != u"":'
1579<-----Source: line: 'if codContacto and codContacto != u"":'
1580      If: begin: 'block-if'
1580    <-Source: begin: 'block-if'
1580   <--Function: begin: 'block-if'
1580  <---Source: begin: 'block-if'
1580 <----Class: begin: 'block-if'
1580<-----Source: begin: 'block-if'
1580      Source: begin-gen
1580       InstructionCall: begin-gen
1580        Member: begin-gen
1580         Identifier: begin-gen
1580          Identifier: expr: 'curContactos'
1580         Identifier: end-gen
1580         FunctionCall: begin-gen
1580          Expression: begin-gen
1580           Expression: expr: 'ustr('
1580           Constant: begin-gen
1580            Constant: ctype: 'String' -> "codcontacto = '"
1580            Constant: expr: 'u"codcontacto = \'"'
1580          <-Expression: expr: 'u"codcontacto = \'"'
1580           Constant: end-gen
1580           Expression: expr: ','
1580           Identifier: begin-gen
1580            Identifier: expr: 'codContacto'
1580          <-Expression: expr: 'codContacto'
1580           Identifier: end-gen
1580           Expression: expr: ','
1580           Constant: begin-gen
1580            Constant: ctype: 'String' -> "'"
1580            Constant: expr: 'u"\'"'
1580          <-Expression: expr: 'u"\'"'
1580           Constant: end-gen
1580           Expression: expr: ')'
1580          Expression: end-gen
1580          FunctionCall: expr: 'select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1580         FunctionCall: end-gen
1580         Member: expr: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1580        Member: end-gen
1580        InstructionCall: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1580      <-Source: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1580     <--If: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1580    <---Source: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1580   <----Function: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1580  <-----Source: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1580 <------Class: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1580<-------Source: line: 'curContactos.select(ustr( u"codcontacto = \'" , codContacto , u"\'" ))'
1581       InstructionCall: end-gen
1581       If: begin-gen
1581        Value: begin-gen
1581         OpUnary: begin-gen
1581          OpUnary: expr: 'not'
1581        <-Value: expr: 'not'
1581          Member: begin-gen
1581           Identifier: begin-gen
1581            Identifier: expr: 'curContactos'
1581           Identifier: end-gen
1581           FunctionCall: begin-gen
1581            FunctionCall: expr: 'first()'
1581           FunctionCall: end-gen
1581           Member: expr: 'curContactos.first()'
1581         <-OpUnary: expr: 'curContactos.first()'
1581        <--Value: expr: 'curContactos.first()'
1581          Member: end-gen
1581         OpUnary: end-gen
1581        Value: end-gen
1581        If: line: 'if not curContactos.first():'
1581      <-Source: line: 'if not curContactos.first():'
1581     <--If: line: 'if not curContactos.first():'
1581    <---Source: line: 'if not curContactos.first():'
1581   <----Function: line: 'if not curContactos.first():'
1581  <-----Source: line: 'if not curContactos.first():'
1581 <------Class: line: 'if not curContactos.first():'
1581<-------Source: line: 'if not curContactos.first():'
1582        If: begin: 'block-if'
1582      <-Source: begin: 'block-if'
1582     <--If: begin: 'block-if'
1582    <---Source: begin: 'block-if'
1582   <----Function: begin: 'block-if'
1582  <-----Source: begin: 'block-if'
1582 <------Class: begin: 'block-if'
1582<-------Source: begin: 'block-if'
1582        Source: begin-gen
1582         InstructionFlow: begin-gen
1582          Value: begin-gen
1582           Identifier: begin-gen
1582            Identifier: expr: 'False'
1582          <-Value: expr: 'False'
1582           Identifier: end-gen
1582          Value: end-gen
1582          InstructionFlow: line: 'return False'
1582        <-Source: line: 'return False'
1582       <--If: line: 'return False'
1582      <---Source: line: 'return False'
1582     <----If: line: 'return False'
1582    <-----Source: line: 'return False'
1582   <------Function: line: 'return False'
1582  <-------Source: line: 'return False'
1582 <--------Class: line: 'return False'
1582<---------Source: line: 'return False'
1583         InstructionFlow: end-gen
1583        Source: end-gen
1583        If: end: 'block-if'
1583      <-Source: end: 'block-if'
1583     <--If: end: 'block-if'
1583    <---Source: end: 'block-if'
1583   <----Function: end: 'block-if'
1583  <-----Source: end: 'block-if'
1583 <------Class: end: 'block-if'
1583<-------Source: end: 'block-if'
1583       If: end-gen
1583       InstructionCall: begin-gen
1583        Member: begin-gen
1583         Identifier: begin-gen
1583          Identifier: expr: 'curContactos'
1583         Identifier: end-gen
1583         FunctionCall: begin-gen
1583          Value: begin-gen
1583           Member: begin-gen
1583            Identifier: begin-gen
1583             Identifier: expr: 'curContactos'
1583            Identifier: end-gen
1583            Identifier: begin-gen
1583             Identifier: expr: 'Edit'
1583            Identifier: end-gen
1583            Member: expr: 'curContactos.Edit'
1583          <-Value: expr: 'curContactos.Edit'
1583           Member: end-gen
1583          Value: end-gen
1583          FunctionCall: expr: 'setModeAccess(curContactos.Edit)'
1583         FunctionCall: end-gen
1583         Member: expr: 'curContactos.setModeAccess(curContactos.Edit)'
1583        Member: end-gen
1583        InstructionCall: line: 'curContactos.setModeAccess(curContactos.Edit)'
1583      <-Source: line: 'curContactos.setModeAccess(curContactos.Edit)'
1583     <--If: line: 'curContactos.setModeAccess(curContactos.Edit)'
1583    <---Source: line: 'curContactos.setModeAccess(curContactos.Edit)'
1583   <----Function: line: 'curContactos.setModeAccess(curContactos.Edit)'
1583  <-----Source: line: 'curContactos.setModeAccess(curContactos.Edit)'
1583 <------Class: line: 'curContactos.setModeAccess(curContactos.Edit)'
1583<-------Source: line: 'curContactos.setModeAccess(curContactos.Edit)'
1584       InstructionCall: end-gen
1584       InstructionCall: begin-gen
1584        Member: begin-gen
1584         Identifier: begin-gen
1584          Identifier: expr: 'curContactos'
1584         Identifier: end-gen
1584         FunctionCall: begin-gen
1584          FunctionCall: expr: 'refreshBuffer()'
1584         FunctionCall: end-gen
1584         Member: expr: 'curContactos.refreshBuffer()'
1584        Member: end-gen
1584        InstructionCall: line: 'curContactos.refreshBuffer()'
1584      <-Source: line: 'curContactos.refreshBuffer()'
1584     <--If: line: 'curContactos.refreshBuffer()'
1584    <---Source: line: 'curContactos.refreshBuffer()'
1584   <----Function: line: 'curContactos.refreshBuffer()'
1584  <-----Source: line: 'curContactos.refreshBuffer()'
1584 <------Class: line: 'curContactos.refreshBuffer()'
1584<-------Source: line: 'curContactos.refreshBuffer()'
1585       InstructionCall: end-gen
1585       If: begin-gen
1585        Expression: begin-gen
1585         OpUnary: begin-gen
1585          OpUnary: expr: 'not'
1585        <-Expression: expr: 'not'
1585          Member: begin-gen
1585           Identifier: begin-gen
1585            Identifier: expr: 'curContactos'
1585           Identifier: end-gen
1585           FunctionCall: begin-gen
1585            Value: begin-gen
1585             Constant: begin-gen
1585              Constant: ctype: 'String' -> 'cargo'
1585              Constant: expr: 'u"cargo"'
1585            <-Value: expr: 'u"cargo"'
1585             Constant: end-gen
1585            Value: end-gen
1585            FunctionCall: expr: 'valueBuffer(u"cargo")'
1585           FunctionCall: end-gen
1585           Member: expr: 'curContactos.valueBuffer(u"cargo")'
1585         <-OpUnary: expr: 'curContactos.valueBuffer(u"cargo")'
1585        <--Expression: expr: 'curContactos.valueBuffer(u"cargo")'
1585          Member: end-gen
1585         OpUnary: end-gen
1585         Compare: begin-gen
1585          Compare: expr: 'or'
1585        <-Expression: expr: 'or'
1585         Compare: end-gen
1585         Member: begin-gen
1585          Identifier: begin-gen
1585           Identifier: expr: 'curContactos'
1585          Identifier: end-gen
1585          FunctionCall: begin-gen
1585           Value: begin-gen
1585            Constant: begin-gen
1585             Constant: ctype: 'String' -> 'cargo'
1585             Constant: expr: 'u"cargo"'
1585           <-Value: expr: 'u"cargo"'
1585            Constant: end-gen
1585           Value: end-gen
1585           FunctionCall: expr: 'valueBuffer(u"cargo")'
1585          FunctionCall: end-gen
1585          Member: expr: 'curContactos.valueBuffer(u"cargo")'
1585        <-Expression: expr: 'curContactos.valueBuffer(u"cargo")'
1585         Member: end-gen
1585         Compare: begin-gen
1585          Compare: expr: '=='
1585        <-Expression: expr: '=='
1585         Compare: end-gen
1585         Constant: begin-gen
1585          Constant: ctype: 'String' -> ''
1585          Constant: expr: 'u""'
1585        <-Expression: expr: 'u""'
1585         Constant: end-gen
1585        Expression: end-gen
1585        If: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1585      <-Source: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1585     <--If: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1585    <---Source: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1585   <----Function: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1585  <-----Source: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1585 <------Class: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1585<-------Source: line: 'if not curContactos.valueBuffer(u"cargo") or curContactos.valueBuffer(u"cargo") == u"":'
1586        If: begin: 'block-if'
1586      <-Source: begin: 'block-if'
1586     <--If: begin: 'block-if'
1586    <---Source: begin: 'block-if'
1586   <----Function: begin: 'block-if'
1586  <-----Source: begin: 'block-if'
1586 <------Class: begin: 'block-if'
1586<-------Source: begin: 'block-if'
1586        Source: begin-gen
1586         InstructionCall: begin-gen
1586          Member: begin-gen
1586           Identifier: begin-gen
1586            Identifier: expr: 'curContactos'
1586           Identifier: end-gen
1586           FunctionCall: begin-gen
1586            Value: begin-gen
1586             Constant: begin-gen
1586              Constant: ctype: 'String' -> 'cargo'
1586              Constant: expr: 'u"cargo"'
1586            <-Value: expr: 'u"cargo"'
1586             Constant: end-gen
1586            Value: end-gen
1586            Value: begin-gen
1586             Identifier: begin-gen
1586              Identifier: expr: 'cargoCon'
1586            <-Value: expr: 'cargoCon'
1586             Identifier: end-gen
1586            Value: end-gen
1586            FunctionCall: expr: 'setValueBuffer(u"cargo", cargoCon)'
1586           FunctionCall: end-gen
1586           Member: expr: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1586          Member: end-gen
1586          InstructionCall: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1586        <-Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1586       <--If: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1586      <---Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1586     <----If: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1586    <-----Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1586   <------Function: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1586  <-------Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1586 <--------Class: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1586<---------Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1587         InstructionCall: end-gen
1587        Source: end-gen
1587        If: end: 'block-if'
1587      <-Source: end: 'block-if'
1587     <--If: end: 'block-if'
1587    <---Source: end: 'block-if'
1587   <----Function: end: 'block-if'
1587  <-----Source: end: 'block-if'
1587 <------Class: end: 'block-if'
1587<-------Source: end: 'block-if'
1587       If: end-gen
1587       If: begin-gen
1587        Expression: begin-gen
1587         OpUnary: begin-gen
1587          OpUnary: expr: 'not'
1587        <-Expression: expr: 'not'
1587          Member: begin-gen
1587           Identifier: begin-gen
1587            Identifier: expr: 'curContactos'
1587           Identifier: end-gen
1587           FunctionCall: begin-gen
1587            Value: begin-gen
1587             Constant: begin-gen
1587              Constant: ctype: 'String' -> 'telefono1'
1587              Constant: expr: 'u"telefono1"'
1587            <-Value: expr: 'u"telefono1"'
1587             Constant: end-gen
1587            Value: end-gen
1587            FunctionCall: expr: 'valueBuffer(u"telefono1")'
1587           FunctionCall: end-gen
1587           Member: expr: 'curContactos.valueBuffer(u"telefono1")'
1587         <-OpUnary: expr: 'curContactos.valueBuffer(u"telefono1")'
1587        <--Expression: expr: 'curContactos.valueBuffer(u"telefono1")'
1587          Member: end-gen
1587         OpUnary: end-gen
1587         Compare: begin-gen
1587          Compare: expr: 'or'
1587        <-Expression: expr: 'or'
1587         Compare: end-gen
1587         Member: begin-gen
1587          Identifier: begin-gen
1587           Identifier: expr: 'curContactos'
1587          Identifier: end-gen
1587          FunctionCall: begin-gen
1587           Value: begin-gen
1587            Constant: begin-gen
1587             Constant: ctype: 'String' -> 'telefono1'
1587             Constant: expr: 'u"telefono1"'
1587           <-Value: expr: 'u"telefono1"'
1587            Constant: end-gen
1587           Value: end-gen
1587           FunctionCall: expr: 'valueBuffer(u"telefono1")'
1587          FunctionCall: end-gen
1587          Member: expr: 'curContactos.valueBuffer(u"telefono1")'
1587        <-Expression: expr: 'curContactos.valueBuffer(u"telefono1")'
1587         Member: end-gen
1587         Compare: begin-gen
1587          Compare: expr: '=='
1587        <-Expression: expr: '=='
1587         Compare: end-gen
1587         Constant: begin-gen
1587          Constant: ctype: 'String' -> ''
1587          Constant: expr: 'u""'
1587        <-Expression: expr: 'u""'
1587         Constant: end-gen
1587        Expression: end-gen
1587        If: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1587      <-Source: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1587     <--If: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1587    <---Source: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1587   <----Function: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1587  <-----Source: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1587 <------Class: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1587<-------Source: line: 'if not curContactos.valueBuffer(u"telefono1") or curContactos.valueBuffer(u"telefono1") == u"":'
1588        If: begin: 'block-if'
1588      <-Source: begin: 'block-if'
1588     <--If: begin: 'block-if'
1588    <---Source: begin: 'block-if'
1588   <----Function: begin: 'block-if'
1588  <-----Source: begin: 'block-if'
1588 <------Class: begin: 'block-if'
1588<-------Source: begin: 'block-if'
1588        Source: begin-gen
1588         InstructionCall: begin-gen
1588          Member: begin-gen
1588           Identifier: begin-gen
1588            Identifier: expr: 'curContactos'
1588           Identifier: end-gen
1588           FunctionCall: begin-gen
1588            Value: begin-gen
1588             Constant: begin-gen
1588              Constant: ctype: 'String' -> 'telefono1'
1588              Constant: expr: 'u"telefono1"'
1588            <-Value: expr: 'u"telefono1"'
1588             Constant: end-gen
1588            Value: end-gen
1588            Value: begin-gen
1588             Identifier: begin-gen
1588              Identifier: expr: 'telefonoCon'
1588            <-Value: expr: 'telefonoCon'
1588             Identifier: end-gen
1588            Value: end-gen
1588            FunctionCall: expr: 'setValueBuffer(u"telefono1", telefonoCon)'
1588           FunctionCall: end-gen
1588           Member: expr: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1588          Member: end-gen
1588          InstructionCall: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1588        <-Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1588       <--If: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1588      <---Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1588     <----If: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1588    <-----Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1588   <------Function: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1588  <-------Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1588 <--------Class: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1588<---------Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1589         InstructionCall: end-gen
1589        Source: end-gen
1589        If: end: 'block-if'
1589      <-Source: end: 'block-if'
1589     <--If: end: 'block-if'
1589    <---Source: end: 'block-if'
1589   <----Function: end: 'block-if'
1589  <-----Source: end: 'block-if'
1589 <------Class: end: 'block-if'
1589<-------Source: end: 'block-if'
1589        If: line: 'else:'
1589      <-Source: line: 'else:'
1589     <--If: line: 'else:'
1589    <---Source: line: 'else:'
1589   <----Function: line: 'else:'
1589  <-----Source: line: 'else:'
1589 <------Class: line: 'else:'
1589<-------Source: line: 'else:'
1590        If: begin: 'block-else'
1590      <-Source: begin: 'block-else'
1590     <--If: begin: 'block-else'
1590    <---Source: begin: 'block-else'
1590   <----Function: begin: 'block-else'
1590  <-----Source: begin: 'block-else'
1590 <------Class: begin: 'block-else'
1590<-------Source: begin: 'block-else'
1590        Source: begin-gen
1590         If: begin-gen
1590          Expression: begin-gen
1590           OpUnary: begin-gen
1590            OpUnary: expr: 'not'
1590          <-Expression: expr: 'not'
1590            Member: begin-gen
1590             Identifier: begin-gen
1590              Identifier: expr: 'curContactos'
1590             Identifier: end-gen
1590             FunctionCall: begin-gen
1590              Value: begin-gen
1590               Constant: begin-gen
1590                Constant: ctype: 'String' -> 'telefono2'
1590                Constant: expr: 'u"telefono2"'
1590              <-Value: expr: 'u"telefono2"'
1590               Constant: end-gen
1590              Value: end-gen
1590              FunctionCall: expr: 'valueBuffer(u"telefono2")'
1590             FunctionCall: end-gen
1590             Member: expr: 'curContactos.valueBuffer(u"telefono2")'
1590           <-OpUnary: expr: 'curContactos.valueBuffer(u"telefono2")'
1590          <--Expression: expr: 'curContactos.valueBuffer(u"telefono2")'
1590            Member: end-gen
1590           OpUnary: end-gen
1590           Compare: begin-gen
1590            Compare: expr: 'or'
1590          <-Expression: expr: 'or'
1590           Compare: end-gen
1590           Member: begin-gen
1590            Identifier: begin-gen
1590             Identifier: expr: 'curContactos'
1590            Identifier: end-gen
1590            FunctionCall: begin-gen
1590             Value: begin-gen
1590              Constant: begin-gen
1590               Constant: ctype: 'String' -> 'telefono2'
1590               Constant: expr: 'u"telefono2"'
1590             <-Value: expr: 'u"telefono2"'
1590              Constant: end-gen
1590             Value: end-gen
1590             FunctionCall: expr: 'valueBuffer(u"telefono2")'
1590            FunctionCall: end-gen
1590            Member: expr: 'curContactos.valueBuffer(u"telefono2")'
1590          <-Expression: expr: 'curContactos.valueBuffer(u"telefono2")'
1590           Member: end-gen
1590           Compare: begin-gen
1590            Compare: expr: '=='
1590          <-Expression: expr: '=='
1590           Compare: end-gen
1590           Constant: begin-gen
1590            Constant: ctype: 'String' -> ''
1590            Constant: expr: 'u""'
1590          <-Expression: expr: 'u""'
1590           Constant: end-gen
1590          Expression: end-gen
1590          If: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1590        <-Source: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1590       <--If: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1590      <---Source: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1590     <----If: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1590    <-----Source: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1590   <------Function: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1590  <-------Source: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1590 <--------Class: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1590<---------Source: line: 'if not curContactos.valueBuffer(u"telefono2") or curContactos.valueBuffer(u"telefono2") == u"":'
1591          If: begin: 'block-if'
1591        <-Source: begin: 'block-if'
1591       <--If: begin: 'block-if'
1591      <---Source: begin: 'block-if'
1591     <----If: begin: 'block-if'
1591    <-----Source: begin: 'block-if'
1591   <------Function: begin: 'block-if'
1591  <-------Source: begin: 'block-if'
1591 <--------Class: begin: 'block-if'
1591<---------Source: begin: 'block-if'
1591          Source: begin-gen
1591           InstructionCall: begin-gen
1591            Member: begin-gen
1591             Identifier: begin-gen
1591              Identifier: expr: 'curContactos'
1591             Identifier: end-gen
1591             FunctionCall: begin-gen
1591              Value: begin-gen
1591               Constant: begin-gen
1591                Constant: ctype: 'String' -> 'telefono2'
1591                Constant: expr: 'u"telefono2"'
1591              <-Value: expr: 'u"telefono2"'
1591               Constant: end-gen
1591              Value: end-gen
1591              Value: begin-gen
1591               Identifier: begin-gen
1591                Identifier: expr: 'telefonoCon'
1591              <-Value: expr: 'telefonoCon'
1591               Identifier: end-gen
1591              Value: end-gen
1591              FunctionCall: expr: 'setValueBuffer(u"telefono2", telefonoCon)'
1591             FunctionCall: end-gen
1591             Member: expr: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1591            Member: end-gen
1591            InstructionCall: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1591          <-Source: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1591         <--If: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1591        <---Source: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1591       <----If: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1591      <-----Source: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1591     <------If: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1591    <-------Source: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1591   <--------Function: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1591  <---------Source: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1591 <----------Class: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1591<-----------Source: line: 'curContactos.setValueBuffer(u"telefono2", telefonoCon)'
1592           InstructionCall: end-gen
1592          Source: end-gen
1592          If: end: 'block-if'
1592        <-Source: end: 'block-if'
1592       <--If: end: 'block-if'
1592      <---Source: end: 'block-if'
1592     <----If: end: 'block-if'
1592    <-----Source: end: 'block-if'
1592   <------Function: end: 'block-if'
1592  <-------Source: end: 'block-if'
1592 <--------Class: end: 'block-if'
1592<---------Source: end: 'block-if'
1592         If: end-gen
1592        Source: end-gen
1592        If: end: 'block-else'
1592      <-Source: end: 'block-else'
1592     <--If: end: 'block-else'
1592    <---Source: end: 'block-else'
1592   <----Function: end: 'block-else'
1592  <-----Source: end: 'block-else'
1592 <------Class: end: 'block-else'
1592<-------Source: end: 'block-else'
1593       If: end-gen
1593       If: begin-gen
1593        Expression: begin-gen
1593         OpUnary: begin-gen
1593          OpUnary: expr: 'not'
1593        <-Expression: expr: 'not'
1593          Member: begin-gen
1593           Identifier: begin-gen
1593            Identifier: expr: 'curContactos'
1593           Identifier: end-gen
1593           FunctionCall: begin-gen
1593            Value: begin-gen
1593             Constant: begin-gen
1593              Constant: ctype: 'String' -> 'fax'
1593              Constant: expr: 'u"fax"'
1593            <-Value: expr: 'u"fax"'
1593             Constant: end-gen
1593            Value: end-gen
1593            FunctionCall: expr: 'valueBuffer(u"fax")'
1593           FunctionCall: end-gen
1593           Member: expr: 'curContactos.valueBuffer(u"fax")'
1593         <-OpUnary: expr: 'curContactos.valueBuffer(u"fax")'
1593        <--Expression: expr: 'curContactos.valueBuffer(u"fax")'
1593          Member: end-gen
1593         OpUnary: end-gen
1593         Compare: begin-gen
1593          Compare: expr: 'or'
1593        <-Expression: expr: 'or'
1593         Compare: end-gen
1593         Member: begin-gen
1593          Identifier: begin-gen
1593           Identifier: expr: 'curContactos'
1593          Identifier: end-gen
1593          FunctionCall: begin-gen
1593           Value: begin-gen
1593            Constant: begin-gen
1593             Constant: ctype: 'String' -> 'fax'
1593             Constant: expr: 'u"fax"'
1593           <-Value: expr: 'u"fax"'
1593            Constant: end-gen
1593           Value: end-gen
1593           FunctionCall: expr: 'valueBuffer(u"fax")'
1593          FunctionCall: end-gen
1593          Member: expr: 'curContactos.valueBuffer(u"fax")'
1593        <-Expression: expr: 'curContactos.valueBuffer(u"fax")'
1593         Member: end-gen
1593         Compare: begin-gen
1593          Compare: expr: '=='
1593        <-Expression: expr: '=='
1593         Compare: end-gen
1593         Constant: begin-gen
1593          Constant: ctype: 'String' -> ''
1593          Constant: expr: 'u""'
1593        <-Expression: expr: 'u""'
1593         Constant: end-gen
1593        Expression: end-gen
1593        If: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1593      <-Source: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1593     <--If: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1593    <---Source: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1593   <----Function: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1593  <-----Source: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1593 <------Class: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1593<-------Source: line: 'if not curContactos.valueBuffer(u"fax") or curContactos.valueBuffer(u"fax") == u"":'
1594        If: begin: 'block-if'
1594      <-Source: begin: 'block-if'
1594     <--If: begin: 'block-if'
1594    <---Source: begin: 'block-if'
1594   <----Function: begin: 'block-if'
1594  <-----Source: begin: 'block-if'
1594 <------Class: begin: 'block-if'
1594<-------Source: begin: 'block-if'
1594        Source: begin-gen
1594         InstructionCall: begin-gen
1594          Member: begin-gen
1594           Identifier: begin-gen
1594            Identifier: expr: 'curContactos'
1594           Identifier: end-gen
1594           FunctionCall: begin-gen
1594            Value: begin-gen
1594             Constant: begin-gen
1594              Constant: ctype: 'String' -> 'fax'
1594              Constant: expr: 'u"fax"'
1594            <-Value: expr: 'u"fax"'
1594             Constant: end-gen
1594            Value: end-gen
1594            Value: begin-gen
1594             Identifier: begin-gen
1594              Identifier: expr: 'faxCon'
1594            <-Value: expr: 'faxCon'
1594             Identifier: end-gen
1594            Value: end-gen
1594            FunctionCall: expr: 'setValueBuffer(u"fax", faxCon)'
1594           FunctionCall: end-gen
1594           Member: expr: 'curContactos.setValueBuffer(u"fax", faxCon)'
1594          Member: end-gen
1594          InstructionCall: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1594        <-Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1594       <--If: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1594      <---Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1594     <----If: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1594    <-----Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1594   <------Function: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1594  <-------Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1594 <--------Class: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1594<---------Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1595         InstructionCall: end-gen
1595        Source: end-gen
1595        If: end: 'block-if'
1595      <-Source: end: 'block-if'
1595     <--If: end: 'block-if'
1595    <---Source: end: 'block-if'
1595   <----Function: end: 'block-if'
1595  <-----Source: end: 'block-if'
1595 <------Class: end: 'block-if'
1595<-------Source: end: 'block-if'
1595       If: end-gen
1595       If: begin-gen
1595        Expression: begin-gen
1595         OpUnary: begin-gen
1595          OpUnary: expr: 'not'
1595        <-Expression: expr: 'not'
1595          Member: begin-gen
1595           Identifier: begin-gen
1595            Identifier: expr: 'curContactos'
1595           Identifier: end-gen
1595           FunctionCall: begin-gen
1595            Value: begin-gen
1595             Constant: begin-gen
1595              Constant: ctype: 'String' -> 'email'
1595              Constant: expr: 'u"email"'
1595            <-Value: expr: 'u"email"'
1595             Constant: end-gen
1595            Value: end-gen
1595            FunctionCall: expr: 'valueBuffer(u"email")'
1595           FunctionCall: end-gen
1595           Member: expr: 'curContactos.valueBuffer(u"email")'
1595         <-OpUnary: expr: 'curContactos.valueBuffer(u"email")'
1595        <--Expression: expr: 'curContactos.valueBuffer(u"email")'
1595          Member: end-gen
1595         OpUnary: end-gen
1595         Compare: begin-gen
1595          Compare: expr: 'or'
1595        <-Expression: expr: 'or'
1595         Compare: end-gen
1595         Member: begin-gen
1595          Identifier: begin-gen
1595           Identifier: expr: 'curContactos'
1595          Identifier: end-gen
1595          FunctionCall: begin-gen
1595           Value: begin-gen
1595            Constant: begin-gen
1595             Constant: ctype: 'String' -> 'email'
1595             Constant: expr: 'u"email"'
1595           <-Value: expr: 'u"email"'
1595            Constant: end-gen
1595           Value: end-gen
1595           FunctionCall: expr: 'valueBuffer(u"email")'
1595          FunctionCall: end-gen
1595          Member: expr: 'curContactos.valueBuffer(u"email")'
1595        <-Expression: expr: 'curContactos.valueBuffer(u"email")'
1595         Member: end-gen
1595         Compare: begin-gen
1595          Compare: expr: '=='
1595        <-Expression: expr: '=='
1595         Compare: end-gen
1595         Constant: begin-gen
1595          Constant: ctype: 'String' -> ''
1595          Constant: expr: 'u""'
1595        <-Expression: expr: 'u""'
1595         Constant: end-gen
1595        Expression: end-gen
1595        If: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1595      <-Source: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1595     <--If: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1595    <---Source: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1595   <----Function: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1595  <-----Source: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1595 <------Class: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1595<-------Source: line: 'if not curContactos.valueBuffer(u"email") or curContactos.valueBuffer(u"email") == u"":'
1596        If: begin: 'block-if'
1596      <-Source: begin: 'block-if'
1596     <--If: begin: 'block-if'
1596    <---Source: begin: 'block-if'
1596   <----Function: begin: 'block-if'
1596  <-----Source: begin: 'block-if'
1596 <------Class: begin: 'block-if'
1596<-------Source: begin: 'block-if'
1596        Source: begin-gen
1596         InstructionCall: begin-gen
1596          Member: begin-gen
1596           Identifier: begin-gen
1596            Identifier: expr: 'curContactos'
1596           Identifier: end-gen
1596           FunctionCall: begin-gen
1596            Value: begin-gen
1596             Constant: begin-gen
1596              Constant: ctype: 'String' -> 'email'
1596              Constant: expr: 'u"email"'
1596            <-Value: expr: 'u"email"'
1596             Constant: end-gen
1596            Value: end-gen
1596            Value: begin-gen
1596             Identifier: begin-gen
1596              Identifier: expr: 'emailCon'
1596            <-Value: expr: 'emailCon'
1596             Identifier: end-gen
1596            Value: end-gen
1596            FunctionCall: expr: 'setValueBuffer(u"email", emailCon)'
1596           FunctionCall: end-gen
1596           Member: expr: 'curContactos.setValueBuffer(u"email", emailCon)'
1596          Member: end-gen
1596          InstructionCall: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1596        <-Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1596       <--If: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1596      <---Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1596     <----If: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1596    <-----Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1596   <------Function: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1596  <-------Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1596 <--------Class: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1596<---------Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1597         InstructionCall: end-gen
1597        Source: end-gen
1597        If: end: 'block-if'
1597      <-Source: end: 'block-if'
1597     <--If: end: 'block-if'
1597    <---Source: end: 'block-if'
1597   <----Function: end: 'block-if'
1597  <-----Source: end: 'block-if'
1597 <------Class: end: 'block-if'
1597<-------Source: end: 'block-if'
1597       If: end-gen
1597      Source: end-gen
1597      If: end: 'block-if'
1597    <-Source: end: 'block-if'
1597   <--Function: end: 'block-if'
1597  <---Source: end: 'block-if'
1597 <----Class: end: 'block-if'
1597<-----Source: end: 'block-if'
1597      If: line: 'else:'
1597    <-Source: line: 'else:'
1597   <--Function: line: 'else:'
1597  <---Source: line: 'else:'
1597 <----Class: line: 'else:'
1597<-----Source: line: 'else:'
1599      If: begin: 'block-else'
1599    <-Source: begin: 'block-else'
1599   <--Function: begin: 'block-else'
1599  <---Source: begin: 'block-else'
1599 <----Class: begin: 'block-else'
1599<-----Source: begin: 'block-else'
1599      Source: begin-gen
1599       With: begin-gen
1599        Identifier: begin-gen
1599         Identifier: expr: 'curContactos'
1599        Identifier: end-gen
1599        With: line: ' #WITH_START'
1599      <-Source: line: ' #WITH_START'
1599     <--If: line: ' #WITH_START'
1599    <---Source: line: ' #WITH_START'
1599   <----Function: line: ' #WITH_START'
1599  <-----Source: line: ' #WITH_START'
1599 <------Class: line: ' #WITH_START'
1599<-------Source: line: ' #WITH_START'
1600        Source: begin-gen
1600         InstructionCall: begin-gen
1600          FunctionCall: begin-gen
1600           Value: begin-gen
1600            Identifier: begin-gen
1600             Identifier: expr: 'Insert'
1600           <-Value: expr: 'Insert'
1600            Identifier: end-gen
1600           Value: end-gen
1600           FunctionCall: expr: 'setModeAccess(Insert)'
1600          FunctionCall: end-gen
1600          InstructionCall: line: 'setModeAccess(Insert)'
1600        <-Source: line: 'setModeAccess(Insert)'
1600       <--With: line: 'curContactos.setModeAccess(Insert)'
1600      <---Source: line: 'curContactos.setModeAccess(Insert)'
1600     <----If: line: 'curContactos.setModeAccess(Insert)'
1600    <-----Source: line: 'curContactos.setModeAccess(Insert)'
1600   <------Function: line: 'curContactos.setModeAccess(Insert)'
1600  <-------Source: line: 'curContactos.setModeAccess(Insert)'
1600 <--------Class: line: 'curContactos.setModeAccess(Insert)'
1600<---------Source: line: 'curContactos.setModeAccess(Insert)'
1601         InstructionCall: end-gen
1601         InstructionCall: begin-gen
1601          FunctionCall: begin-gen
1601           FunctionCall: expr: 'refreshBuffer()'
1601          FunctionCall: end-gen
1601          InstructionCall: line: 'refreshBuffer()'
1601        <-Source: line: 'refreshBuffer()'
1601       <--With: line: 'curContactos.refreshBuffer()'
1601      <---Source: line: 'curContactos.refreshBuffer()'
1601     <----If: line: 'curContactos.refreshBuffer()'
1601    <-----Source: line: 'curContactos.refreshBuffer()'
1601   <------Function: line: 'curContactos.refreshBuffer()'
1601  <-------Source: line: 'curContactos.refreshBuffer()'
1601 <--------Class: line: 'curContactos.refreshBuffer()'
1601<---------Source: line: 'curContactos.refreshBuffer()'
1602         InstructionCall: end-gen
1602         InstructionCall: begin-gen
1602          FunctionCall: begin-gen
1602           Value: begin-gen
1602            Constant: begin-gen
1602             Constant: ctype: 'String' -> 'codcontacto'
1602             Constant: expr: 'u"codcontacto"'
1602           <-Value: expr: 'u"codcontacto"'
1602            Constant: end-gen
1602           Value: end-gen
1602           Value: begin-gen
1602            Member: begin-gen
1602             Identifier: begin-gen
1602              Identifier: expr: 'util'
1602             Identifier: end-gen
1602             FunctionCall: begin-gen
1602              Value: begin-gen
1602               Constant: begin-gen
1602                Constant: ctype: 'String' -> 'codcontacto'
1602                Constant: expr: 'u"codcontacto"'
1602              <-Value: expr: 'u"codcontacto"'
1602               Constant: end-gen
1602              Value: end-gen
1602              Value: begin-gen
1602               Identifier: begin-gen
1602                Identifier: expr: 'self'
1602              <-Value: expr: 'self'
1602               Identifier: end-gen
1602              Value: end-gen
1602              FunctionCall: expr: 'nextCounter(u"codcontacto", self)'
1602             FunctionCall: end-gen
1602             Member: expr: 'util.nextCounter(u"codcontacto", self)'
1602           <-Value: expr: 'util.nextCounter(u"codcontacto", self)'
1602            Member: end-gen
1602           Value: end-gen
1602           FunctionCall: expr: 'setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1602          FunctionCall: end-gen
1602          InstructionCall: line: 'setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1602        <-Source: line: 'setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1602       <--With: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1602      <---Source: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1602     <----If: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1602    <-----Source: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1602   <------Function: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1602  <-------Source: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1602 <--------Class: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1602<---------Source: line: 'curContactos.setValueBuffer(u"codcontacto", util.nextCounter(u"codcontacto", self))'
1603         InstructionCall: end-gen
1603         InstructionCall: begin-gen
1603          FunctionCall: begin-gen
1603           Value: begin-gen
1603            Constant: begin-gen
1603             Constant: ctype: 'String' -> 'nombre'
1603             Constant: expr: 'u"nombre"'
1603           <-Value: expr: 'u"nombre"'
1603            Constant: end-gen
1603           Value: end-gen
1603           Value: begin-gen
1603            Identifier: begin-gen
1603             Identifier: expr: 'nombreCon'
1603           <-Value: expr: 'nombreCon'
1603            Identifier: end-gen
1603           Value: end-gen
1603           FunctionCall: expr: 'setValueBuffer(u"nombre", nombreCon)'
1603          FunctionCall: end-gen
1603          InstructionCall: line: 'setValueBuffer(u"nombre", nombreCon)'
1603        <-Source: line: 'setValueBuffer(u"nombre", nombreCon)'
1603       <--With: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1603      <---Source: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1603     <----If: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1603    <-----Source: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1603   <------Function: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1603  <-------Source: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1603 <--------Class: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1603<---------Source: line: 'curContactos.setValueBuffer(u"nombre", nombreCon)'
1604         InstructionCall: end-gen
1604         InstructionCall: begin-gen
1604          FunctionCall: begin-gen
1604           Value: begin-gen
1604            Constant: begin-gen
1604             Constant: ctype: 'String' -> 'email'
1604             Constant: expr: 'u"email"'
1604           <-Value: expr: 'u"email"'
1604            Constant: end-gen
1604           Value: end-gen
1604           Value: begin-gen
1604            Identifier: begin-gen
1604             Identifier: expr: 'emailCon'
1604           <-Value: expr: 'emailCon'
1604            Identifier: end-gen
1604           Value: end-gen
1604           FunctionCall: expr: 'setValueBuffer(u"email", emailCon)'
1604          FunctionCall: end-gen
1604          InstructionCall: line: 'setValueBuffer(u"email", emailCon)'
1604        <-Source: line: 'setValueBuffer(u"email", emailCon)'
1604       <--With: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1604      <---Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1604     <----If: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1604    <-----Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1604   <------Function: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1604  <-------Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1604 <--------Class: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1604<---------Source: line: 'curContactos.setValueBuffer(u"email", emailCon)'
1605         InstructionCall: end-gen
1605         InstructionCall: begin-gen
1605          FunctionCall: begin-gen
1605           Value: begin-gen
1605            Constant: begin-gen
1605             Constant: ctype: 'String' -> 'telefono1'
1605             Constant: expr: 'u"telefono1"'
1605           <-Value: expr: 'u"telefono1"'
1605            Constant: end-gen
1605           Value: end-gen
1605           Value: begin-gen
1605            Identifier: begin-gen
1605             Identifier: expr: 'telefonoCon'
1605           <-Value: expr: 'telefonoCon'
1605            Identifier: end-gen
1605           Value: end-gen
1605           FunctionCall: expr: 'setValueBuffer(u"telefono1", telefonoCon)'
1605          FunctionCall: end-gen
1605          InstructionCall: line: 'setValueBuffer(u"telefono1", telefonoCon)'
1605        <-Source: line: 'setValueBuffer(u"telefono1", telefonoCon)'
1605       <--With: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1605      <---Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1605     <----If: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1605    <-----Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1605   <------Function: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1605  <-------Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1605 <--------Class: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1605<---------Source: line: 'curContactos.setValueBuffer(u"telefono1", telefonoCon)'
1606         InstructionCall: end-gen
1606         InstructionCall: begin-gen
1606          FunctionCall: begin-gen
1606           Value: begin-gen
1606            Constant: begin-gen
1606             Constant: ctype: 'String' -> 'cargo'
1606             Constant: expr: 'u"cargo"'
1606           <-Value: expr: 'u"cargo"'
1606            Constant: end-gen
1606           Value: end-gen
1606           Value: begin-gen
1606            Identifier: begin-gen
1606             Identifier: expr: 'cargoCon'
1606           <-Value: expr: 'cargoCon'
1606            Identifier: end-gen
1606           Value: end-gen
1606           FunctionCall: expr: 'setValueBuffer(u"cargo", cargoCon)'
1606          FunctionCall: end-gen
1606          InstructionCall: line: 'setValueBuffer(u"cargo", cargoCon)'
1606        <-Source: line: 'setValueBuffer(u"cargo", cargoCon)'
1606       <--With: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1606      <---Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1606     <----If: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1606    <-----Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1606   <------Function: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1606  <-------Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1606 <--------Class: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1606<---------Source: line: 'curContactos.setValueBuffer(u"cargo", cargoCon)'
1607         InstructionCall: end-gen
1607         InstructionCall: begin-gen
1607          FunctionCall: begin-gen
1607           Value: begin-gen
1607            Constant: begin-gen
1607             Constant: ctype: 'String' -> 'fax'
1607             Constant: expr: 'u"fax"'
1607           <-Value: expr: 'u"fax"'
1607            Constant: end-gen
1607           Value: end-gen
1607           Value: begin-gen
1607            Identifier: begin-gen
1607             Identifier: expr: 'faxCon'
1607           <-Value: expr: 'faxCon'
1607            Identifier: end-gen
1607           Value: end-gen
1607           FunctionCall: expr: 'setValueBuffer(u"fax", faxCon)'
1607          FunctionCall: end-gen
1607          InstructionCall: line: 'setValueBuffer(u"fax", faxCon)'
1607        <-Source: line: 'setValueBuffer(u"fax", faxCon)'
1607       <--With: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1607      <---Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1607     <----If: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1607    <-----Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1607   <------Function: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1607  <-------Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1607 <--------Class: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1607<---------Source: line: 'curContactos.setValueBuffer(u"fax", faxCon)'
1608         InstructionCall: end-gen
1608        Source: end-gen
1608        With: line: ' #WITH_END'
1608      <-Source: line: ' #WITH_END'
1608     <--If: line: ' #WITH_END'
1608    <---Source: line: ' #WITH_END'
1608   <----Function: line: ' #WITH_END'
1608  <-----Source: line: ' #WITH_END'
1608 <------Class: line: ' #WITH_END'
1608<-------Source: line: ' #WITH_END'
1609       With: end-gen
1609       If: begin-gen
1609        Value: begin-gen
1609         OpUnary: begin-gen
1609          OpUnary: expr: 'not'
1609        <-Value: expr: 'not'
1609          Member: begin-gen
1609           Identifier: begin-gen
1609            Identifier: expr: 'curContactos'
1609           Identifier: end-gen
1609           FunctionCall: begin-gen
1609            FunctionCall: expr: 'commitBuffer()'
1609           FunctionCall: end-gen
1609           Member: expr: 'curContactos.commitBuffer()'
1609         <-OpUnary: expr: 'curContactos.commitBuffer()'
1609        <--Value: expr: 'curContactos.commitBuffer()'
1609          Member: end-gen
1609         OpUnary: end-gen
1609        Value: end-gen
1609        If: line: 'if not curContactos.commitBuffer():'
1609      <-Source: line: 'if not curContactos.commitBuffer():'
1609     <--If: line: 'if not curContactos.commitBuffer():'
1609    <---Source: line: 'if not curContactos.commitBuffer():'
1609   <----Function: line: 'if not curContactos.commitBuffer():'
1609  <-----Source: line: 'if not curContactos.commitBuffer():'
1609 <------Class: line: 'if not curContactos.commitBuffer():'
1609<-------Source: line: 'if not curContactos.commitBuffer():'
1610        If: begin: 'block-if'
1610      <-Source: begin: 'block-if'
1610     <--If: begin: 'block-if'
1610    <---Source: begin: 'block-if'
1610   <----Function: begin: 'block-if'
1610  <-----Source: begin: 'block-if'
1610 <------Class: begin: 'block-if'
1610<-------Source: begin: 'block-if'
1610        Source: begin-gen
1610         InstructionFlow: begin-gen
1610          Value: begin-gen
1610           Identifier: begin-gen
1610            Identifier: expr: 'False'
1610          <-Value: expr: 'False'
1610           Identifier: end-gen
1610          Value: end-gen
1610          InstructionFlow: line: 'return False'
1610        <-Source: line: 'return False'
1610       <--If: line: 'return False'
1610      <---Source: line: 'return False'
1610     <----If: line: 'return False'
1610    <-----Source: line: 'return False'
1610   <------Function: line: 'return False'
1610  <-------Source: line: 'return False'
1610 <--------Class: line: 'return False'
1610<---------Source: line: 'return False'
1611         InstructionFlow: end-gen
1611        Source: end-gen
1611        If: end: 'block-if'
1611      <-Source: end: 'block-if'
1611     <--If: end: 'block-if'
1611    <---Source: end: 'block-if'
1611   <----Function: end: 'block-if'
1611  <-----Source: end: 'block-if'
1611 <------Class: end: 'block-if'
1611<-------Source: end: 'block-if'
1611       If: end-gen
1611       InstructionUpdate: begin-gen
1611        Identifier: begin-gen
1611         Identifier: expr: 'codContacto'
1611        Identifier: end-gen
1611        OpUpdate: begin-gen
1611         OpUpdate: expr: '='
1611        OpUpdate: end-gen
1611        Value: begin-gen
1611         Member: begin-gen
1611          Identifier: begin-gen
1611           Identifier: expr: 'curContactos'
1611          Identifier: end-gen
1611          FunctionCall: begin-gen
1611           Value: begin-gen
1611            Constant: begin-gen
1611             Constant: ctype: 'String' -> 'codcontacto'
1611             Constant: expr: 'u"codcontacto"'
1611           <-Value: expr: 'u"codcontacto"'
1611            Constant: end-gen
1611           Value: end-gen
1611           FunctionCall: expr: 'valueBuffer(u"codcontacto")'
1611          FunctionCall: end-gen
1611          Member: expr: 'curContactos.valueBuffer(u"codcontacto")'
1611        <-Value: expr: 'curContactos.valueBuffer(u"codcontacto")'
1611         Member: end-gen
1611        Value: end-gen
1611        InstructionUpdate: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1611      <-Source: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1611     <--If: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1611    <---Source: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1611   <----Function: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1611  <-----Source: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1611 <------Class: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1611<-------Source: line: 'codContacto = curContactos.valueBuffer(u"codcontacto")'
1612       InstructionUpdate: end-gen
1612       If: begin-gen
1612        Value: begin-gen
1612         OpUnary: begin-gen
1612          OpUnary: expr: 'not'
1612        <-Value: expr: 'not'
1612          Identifier: begin-gen
1612           Identifier: expr: 'codContacto'
1612         <-OpUnary: expr: 'codContacto'
1612        <--Value: expr: 'codContacto'
1612          Identifier: end-gen
1612         OpUnary: end-gen
1612        Value: end-gen
1612        If: line: 'if not codContacto:'
1612      <-Source: line: 'if not codContacto:'
1612     <--If: line: 'if not codContacto:'
1612    <---Source: line: 'if not codContacto:'
1612   <----Function: line: 'if not codContacto:'
1612  <-----Source: line: 'if not codContacto:'
1612 <------Class: line: 'if not codContacto:'
1612<-------Source: line: 'if not codContacto:'
1613        If: begin: 'block-if'
1613      <-Source: begin: 'block-if'
1613     <--If: begin: 'block-if'
1613    <---Source: begin: 'block-if'
1613   <----Function: begin: 'block-if'
1613  <-----Source: begin: 'block-if'
1613 <------Class: begin: 'block-if'
1613<-------Source: begin: 'block-if'
1613        Source: begin-gen
1613         InstructionFlow: begin-gen
1613          Value: begin-gen
1613           Identifier: begin-gen
1613            Identifier: expr: 'False'
1613          <-Value: expr: 'False'
1613           Identifier: end-gen
1613          Value: end-gen
1613          InstructionFlow: line: 'return False'
1613        <-Source: line: 'return False'
1613       <--If: line: 'return False'
1613      <---Source: line: 'return False'
1613     <----If: line: 'return False'
1613    <-----Source: line: 'return False'
1613   <------Function: line: 'return False'
1613  <-------Source: line: 'return False'
1613 <--------Class: line: 'return False'
1613<---------Source: line: 'return False'
1614         InstructionFlow: end-gen
1614        Source: end-gen
1614        If: end: 'block-if'
1614      <-Source: end: 'block-if'
1614     <--If: end: 'block-if'
1614    <---Source: end: 'block-if'
1614   <----Function: end: 'block-if'
1614  <-----Source: end: 'block-if'
1614 <------Class: end: 'block-if'
1614<-------Source: end: 'block-if'
1614       If: end-gen
1614      Source: end-gen
1614      If: end: 'block-else'
1614    <-Source: end: 'block-else'
1614   <--Function: end: 'block-else'
1614  <---Source: end: 'block-else'
1614 <----Class: end: 'block-else'
1614<-----Source: end: 'block-else'
1615     If: end-gen
1615     If: begin-gen
1615      Expression: begin-gen
1615       OpUnary: begin-gen
1615        OpUnary: expr: 'not'
1615      <-Expression: expr: 'not'
1615        Identifier: begin-gen
1615         Identifier: expr: 'idAgenda'
1615       <-OpUnary: expr: 'idAgenda'
1615      <--Expression: expr: 'idAgenda'
1615        Identifier: end-gen
1615       OpUnary: end-gen
1615       Compare: begin-gen
1615        Compare: expr: 'or'
1615      <-Expression: expr: 'or'
1615       Compare: end-gen
1615       Identifier: begin-gen
1615        Identifier: expr: 'idAgenda'
1615      <-Expression: expr: 'idAgenda'
1615       Identifier: end-gen
1615       Compare: begin-gen
1615        Compare: expr: '=='
1615      <-Expression: expr: '=='
1615       Compare: end-gen
1615       Constant: begin-gen
1615        Constant: ctype: 'Number' -> '0'
1615        Constant: expr: '0'
1615      <-Expression: expr: '0'
1615       Constant: end-gen
1615      Expression: end-gen
1615      If: line: 'if not idAgenda or idAgenda == 0:'
1615    <-Source: line: 'if not idAgenda or idAgenda == 0:'
1615   <--Function: line: 'if not idAgenda or idAgenda == 0:'
1615  <---Source: line: 'if not idAgenda or idAgenda == 0:'
1615 <----Class: line: 'if not idAgenda or idAgenda == 0:'
1615<-----Source: line: 'if not idAgenda or idAgenda == 0:'
1616      If: begin: 'block-if'
1616    <-Source: begin: 'block-if'
1616   <--Function: begin: 'block-if'
1616  <---Source: begin: 'block-if'
1616 <----Class: begin: 'block-if'
1616<-----Source: begin: 'block-if'
1616      Source: begin-gen
1616       If: begin-gen
1616        Value: begin-gen
1616         OpUnary: begin-gen
1616          OpUnary: expr: 'not'
1616        <-Value: expr: 'not'
1616          Member: begin-gen
1616           Identifier: begin-gen
1616            Identifier: expr: 'util'
1616           Identifier: end-gen
1616           FunctionCall: begin-gen
1616            Value: begin-gen
1616             Constant: begin-gen
1616              Constant: ctype: 'String' -> 'contactosproveedores'
1616              Constant: expr: 'u"contactosproveedores"'
1616            <-Value: expr: 'u"contactosproveedores"'
1616             Constant: end-gen
1616            Value: end-gen
1616            Value: begin-gen
1616             Constant: begin-gen
1616              Constant: ctype: 'String' -> 'id'
1616              Constant: expr: 'u"id"'
1616            <-Value: expr: 'u"id"'
1616             Constant: end-gen
1616            Value: end-gen
1616            Expression: begin-gen
1616             Expression: expr: 'ustr('
1616             Constant: begin-gen
1616              Constant: ctype: 'String' -> "codcontacto = '"
1616              Constant: expr: 'u"codcontacto = \'"'
1616            <-Expression: expr: 'u"codcontacto = \'"'
1616             Constant: end-gen
1616             Expression: expr: ','
1616             Identifier: begin-gen
1616              Identifier: expr: 'codContacto'
1616            <-Expression: expr: 'codContacto'
1616             Identifier: end-gen
1616             Expression: expr: ','
1616             Constant: begin-gen
1616              Constant: ctype: 'String' -> "' AND codproveedor = '"
1616              Constant: expr: 'u"\' AND codproveedor = \'"'
1616            <-Expression: expr: 'u"\' AND codproveedor = \'"'
1616             Constant: end-gen
1616             Expression: expr: ','
1616             Identifier: begin-gen
1616              Identifier: expr: 'codProveedor'
1616            <-Expression: expr: 'codProveedor'
1616             Identifier: end-gen
1616             Expression: expr: ','
1616             Constant: begin-gen
1616              Constant: ctype: 'String' -> "'"
1616              Constant: expr: 'u"\'"'
1616            <-Expression: expr: 'u"\'"'
1616             Constant: end-gen
1616             Expression: expr: ')'
1616            Expression: end-gen
1616            FunctionCall: expr: 'sqlSelect(u"contactosproveedores", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codproveedor = \'" , codProveedor , u"\'" ))'
1616           FunctionCall: end-gen
1616           Member: expr: 'util.sqlSelect(u"contactosproveedores", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codproveedor = \'" , codProveedor , u"\'" ))'
1616         <-OpUnary: expr: 'util.sqlSelect(u"contactosproveedores", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codproveedor = \'" , codProveedor , u"\'" ))'
1616        <--Value: expr: 'util.sqlSelect(u"contactosproveedores", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codproveedor = \'" , codProveedor , u"\'" ))'
1616          Member: end-gen
1616         OpUnary: end-gen
1616        Value: end-gen
1616        If: line: 'if not util.sqlSelect(u"contactosproveedores", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codproveedor = \'" , codProveedor , u"\'" )):'
1616      <-Source: line: 'if not util.sqlSelect(u"contactosproveedores", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codproveedor = \'" , codProveedor , u"\'" )):'
1616     <--If: line: 'if not util.sqlSelect(u"contactosproveedores", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codproveedor = \'" , codProveedor , u"\'" )):'
1616    <---Source: line: 'if not util.sqlSelect(u"contactosproveedores", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codproveedor = \'" , codProveedor , u"\'" )):'
1616   <----Function: line: 'if not util.sqlSelect(u"contactosproveedores", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codproveedor = \'" , codProveedor , u"\'" )):'
1616  <-----Source: line: 'if not util.sqlSelect(u"contactosproveedores", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codproveedor = \'" , codProveedor , u"\'" )):'
1616 <------Class: line: 'if not util.sqlSelect(u"contactosproveedores", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codproveedor = \'" , codProveedor , u"\'" )):'
1616<-------Source: line: 'if not util.sqlSelect(u"contactosproveedores", u"id", ustr( u"codcontacto = \'" , codContacto , u"\' AND codproveedor = \'" , codProveedor , u"\'" )):'
1617        If: begin: 'block-if'
1617      <-Source: begin: 'block-if'
1617     <--If: begin: 'block-if'
1617    <---Source: begin: 'block-if'
1617   <----Function: begin: 'block-if'
1617  <-----Source: begin: 'block-if'
1617 <------Class: begin: 'block-if'
1617<-------Source: begin: 'block-if'
1617        Source: begin-gen
1617         InstructionCall: begin-gen
1617          Member: begin-gen
1617           Identifier: begin-gen
1617            Identifier: expr: 'curAgenda'
1617           Identifier: end-gen
1617           FunctionCall: begin-gen
1617            Value: begin-gen
1617             Member: begin-gen
1617              Identifier: begin-gen
1617               Identifier: expr: 'curAgenda'
1617              Identifier: end-gen
1617              Identifier: begin-gen
1617               Identifier: expr: 'Insert'
1617              Identifier: end-gen
1617              Member: expr: 'curAgenda.Insert'
1617            <-Value: expr: 'curAgenda.Insert'
1617             Member: end-gen
1617            Value: end-gen
1617            FunctionCall: expr: 'setModeAccess(curAgenda.Insert)'
1617           FunctionCall: end-gen
1617           Member: expr: 'curAgenda.setModeAccess(curAgenda.Insert)'
1617          Member: end-gen
1617          InstructionCall: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1617        <-Source: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1617       <--If: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1617      <---Source: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1617     <----If: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1617    <-----Source: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1617   <------Function: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1617  <-------Source: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1617 <--------Class: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1617<---------Source: line: 'curAgenda.setModeAccess(curAgenda.Insert)'
1618         InstructionCall: end-gen
1618         InstructionCall: begin-gen
1618          Member: begin-gen
1618           Identifier: begin-gen
1618            Identifier: expr: 'curAgenda'
1618           Identifier: end-gen
1618           FunctionCall: begin-gen
1618            FunctionCall: expr: 'refreshBuffer()'
1618           FunctionCall: end-gen
1618           Member: expr: 'curAgenda.refreshBuffer()'
1618          Member: end-gen
1618          InstructionCall: line: 'curAgenda.refreshBuffer()'
1618        <-Source: line: 'curAgenda.refreshBuffer()'
1618       <--If: line: 'curAgenda.refreshBuffer()'
1618      <---Source: line: 'curAgenda.refreshBuffer()'
1618     <----If: line: 'curAgenda.refreshBuffer()'
1618    <-----Source: line: 'curAgenda.refreshBuffer()'
1618   <------Function: line: 'curAgenda.refreshBuffer()'
1618  <-------Source: line: 'curAgenda.refreshBuffer()'
1618 <--------Class: line: 'curAgenda.refreshBuffer()'
1618<---------Source: line: 'curAgenda.refreshBuffer()'
1619         InstructionCall: end-gen
1619         InstructionCall: begin-gen
1619          Member: begin-gen
1619           Identifier: begin-gen
1619            Identifier: expr: 'curAgenda'
1619           Identifier: end-gen
1619           FunctionCall: begin-gen
1619            Value: begin-gen
1619             Constant: begin-gen
1619              Constant: ctype: 'String' -> 'codproveedor'
1619              Constant: expr: 'u"codproveedor"'
1619            <-Value: expr: 'u"codproveedor"'
1619             Constant: end-gen
1619            Value: end-gen
1619            Value: begin-gen
1619             Identifier: begin-gen
1619              Identifier: expr: 'codProveedor'
1619            <-Value: expr: 'codProveedor'
1619             Identifier: end-gen
1619            Value: end-gen
1619            FunctionCall: expr: 'setValueBuffer(u"codproveedor", codProveedor)'
1619           FunctionCall: end-gen
1619           Member: expr: 'curAgenda.setValueBuffer(u"codproveedor", codProveedor)'
1619          Member: end-gen
1619          InstructionCall: line: 'curAgenda.setValueBuffer(u"codproveedor", codProveedor)'
1619        <-Source: line: 'curAgenda.setValueBuffer(u"codproveedor", codProveedor)'
1619       <--If: line: 'curAgenda.setValueBuffer(u"codproveedor", codProveedor)'
1619      <---Source: line: 'curAgenda.setValueBuffer(u"codproveedor", codProveedor)'
1619     <----If: line: 'curAgenda.setValueBuffer(u"codproveedor", codProveedor)'
1619    <-----Source: line: 'curAgenda.setValueBuffer(u"codproveedor", codProveedor)'
1619   <------Function: line: 'curAgenda.setValueBuffer(u"codproveedor", codProveedor)'
1619  <-------Source: line: 'curAgenda.setValueBuffer(u"codproveedor", codProveedor)'
1619 <--------Class: line: 'curAgenda.setValueBuffer(u"codproveedor", codProveedor)'
1619<---------Source: line: 'curAgenda.setValueBuffer(u"codproveedor", codProveedor)'
1620         InstructionCall: end-gen
1620         InstructionCall: begin-gen
1620          Member: begin-gen
1620           Identifier: begin-gen
1620            Identifier: expr: 'curAgenda'
1620           Identifier: end-gen
1620           FunctionCall: begin-gen
1620            Value: begin-gen
1620             Constant: begin-gen
1620              Constant: ctype: 'String' -> 'codcontacto'
1620              Constant: expr: 'u"codcontacto"'
1620            <-Value: expr: 'u"codcontacto"'
1620             Constant: end-gen
1620            Value: end-gen
1620            Value: begin-gen
1620             Identifier: begin-gen
1620              Identifier: expr: 'codContacto'
1620            <-Value: expr: 'codContacto'
1620             Identifier: end-gen
1620            Value: end-gen
1620            FunctionCall: expr: 'setValueBuffer(u"codcontacto", codContacto)'
1620           FunctionCall: end-gen
1620           Member: expr: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1620          Member: end-gen
1620          InstructionCall: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1620        <-Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1620       <--If: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1620      <---Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1620     <----If: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1620    <-----Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1620   <------Function: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1620  <-------Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1620 <--------Class: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1620<---------Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1621         InstructionCall: end-gen
1621         If: begin-gen
1621          Value: begin-gen
1621           OpUnary: begin-gen
1621            OpUnary: expr: 'not'
1621          <-Value: expr: 'not'
1621            Member: begin-gen
1621             Identifier: begin-gen
1621              Identifier: expr: 'curAgenda'
1621             Identifier: end-gen
1621             FunctionCall: begin-gen
1621              FunctionCall: expr: 'commitBuffer()'
1621             FunctionCall: end-gen
1621             Member: expr: 'curAgenda.commitBuffer()'
1621           <-OpUnary: expr: 'curAgenda.commitBuffer()'
1621          <--Value: expr: 'curAgenda.commitBuffer()'
1621            Member: end-gen
1621           OpUnary: end-gen
1621          Value: end-gen
1621          If: line: 'if not curAgenda.commitBuffer():'
1621        <-Source: line: 'if not curAgenda.commitBuffer():'
1621       <--If: line: 'if not curAgenda.commitBuffer():'
1621      <---Source: line: 'if not curAgenda.commitBuffer():'
1621     <----If: line: 'if not curAgenda.commitBuffer():'
1621    <-----Source: line: 'if not curAgenda.commitBuffer():'
1621   <------Function: line: 'if not curAgenda.commitBuffer():'
1621  <-------Source: line: 'if not curAgenda.commitBuffer():'
1621 <--------Class: line: 'if not curAgenda.commitBuffer():'
1621<---------Source: line: 'if not curAgenda.commitBuffer():'
1622          If: begin: 'block-if'
1622        <-Source: begin: 'block-if'
1622       <--If: begin: 'block-if'
1622      <---Source: begin: 'block-if'
1622     <----If: begin: 'block-if'
1622    <-----Source: begin: 'block-if'
1622   <------Function: begin: 'block-if'
1622  <-------Source: begin: 'block-if'
1622 <--------Class: begin: 'block-if'
1622<---------Source: begin: 'block-if'
1622          Source: begin-gen
1622           InstructionFlow: begin-gen
1622            Value: begin-gen
1622             Identifier: begin-gen
1622              Identifier: expr: 'False'
1622            <-Value: expr: 'False'
1622             Identifier: end-gen
1622            Value: end-gen
1622            InstructionFlow: line: 'return False'
1622          <-Source: line: 'return False'
1622         <--If: line: 'return False'
1622        <---Source: line: 'return False'
1622       <----If: line: 'return False'
1622      <-----Source: line: 'return False'
1622     <------If: line: 'return False'
1622    <-------Source: line: 'return False'
1622   <--------Function: line: 'return False'
1622  <---------Source: line: 'return False'
1622 <----------Class: line: 'return False'
1622<-----------Source: line: 'return False'
1623           InstructionFlow: end-gen
1623          Source: end-gen
1623          If: end: 'block-if'
1623        <-Source: end: 'block-if'
1623       <--If: end: 'block-if'
1623      <---Source: end: 'block-if'
1623     <----If: end: 'block-if'
1623    <-----Source: end: 'block-if'
1623   <------Function: end: 'block-if'
1623  <-------Source: end: 'block-if'
1623 <--------Class: end: 'block-if'
1623<---------Source: end: 'block-if'
1623         If: end-gen
1623        Source: end-gen
1623        If: end: 'block-if'
1623      <-Source: end: 'block-if'
1623     <--If: end: 'block-if'
1623    <---Source: end: 'block-if'
1623   <----Function: end: 'block-if'
1623  <-----Source: end: 'block-if'
1623 <------Class: end: 'block-if'
1623<-------Source: end: 'block-if'
1623       If: end-gen
1623      Source: end-gen
1623      If: end: 'block-if'
1623    <-Source: end: 'block-if'
1623   <--Function: end: 'block-if'
1623  <---Source: end: 'block-if'
1623 <----Class: end: 'block-if'
1623<-----Source: end: 'block-if'
1623      If: line: 'else:'
1623    <-Source: line: 'else:'
1623   <--Function: line: 'else:'
1623  <---Source: line: 'else:'
1623 <----Class: line: 'else:'
1623<-----Source: line: 'else:'
1625      If: begin: 'block-else'
1625    <-Source: begin: 'block-else'
1625   <--Function: begin: 'block-else'
1625  <---Source: begin: 'block-else'
1625 <----Class: begin: 'block-else'
1625<-----Source: begin: 'block-else'
1625      Source: begin-gen
1625       InstructionCall: begin-gen
1625        Member: begin-gen
1625         Identifier: begin-gen
1625          Identifier: expr: 'curAgenda'
1625         Identifier: end-gen
1625         FunctionCall: begin-gen
1625          Expression: begin-gen
1625           Expression: expr: 'ustr('
1625           Constant: begin-gen
1625            Constant: ctype: 'String' -> 'id = '
1625            Constant: expr: 'u"id = "'
1625          <-Expression: expr: 'u"id = "'
1625           Constant: end-gen
1625           Expression: expr: ','
1625           Identifier: begin-gen
1625            Identifier: expr: 'idAgenda'
1625          <-Expression: expr: 'idAgenda'
1625           Identifier: end-gen
1625           Expression: expr: ')'
1625          Expression: end-gen
1625          FunctionCall: expr: 'select(ustr( u"id = " , idAgenda ))'
1625         FunctionCall: end-gen
1625         Member: expr: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1625        Member: end-gen
1625        InstructionCall: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1625      <-Source: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1625     <--If: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1625    <---Source: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1625   <----Function: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1625  <-----Source: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1625 <------Class: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1625<-------Source: line: 'curAgenda.select(ustr( u"id = " , idAgenda ))'
1626       InstructionCall: end-gen
1626       If: begin-gen
1626        Value: begin-gen
1626         OpUnary: begin-gen
1626          OpUnary: expr: 'not'
1626        <-Value: expr: 'not'
1626          Member: begin-gen
1626           Identifier: begin-gen
1626            Identifier: expr: 'curAgenda'
1626           Identifier: end-gen
1626           FunctionCall: begin-gen
1626            FunctionCall: expr: 'first()'
1626           FunctionCall: end-gen
1626           Member: expr: 'curAgenda.first()'
1626         <-OpUnary: expr: 'curAgenda.first()'
1626        <--Value: expr: 'curAgenda.first()'
1626          Member: end-gen
1626         OpUnary: end-gen
1626        Value: end-gen
1626        If: line: 'if not curAgenda.first():'
1626      <-Source: line: 'if not curAgenda.first():'
1626     <--If: line: 'if not curAgenda.first():'
1626    <---Source: line: 'if not curAgenda.first():'
1626   <----Function: line: 'if not curAgenda.first():'
1626  <-----Source: line: 'if not curAgenda.first():'
1626 <------Class: line: 'if not curAgenda.first():'
1626<-------Source: line: 'if not curAgenda.first():'
1627        If: begin: 'block-if'
1627      <-Source: begin: 'block-if'
1627     <--If: begin: 'block-if'
1627    <---Source: begin: 'block-if'
1627   <----Function: begin: 'block-if'
1627  <-----Source: begin: 'block-if'
1627 <------Class: begin: 'block-if'
1627<-------Source: begin: 'block-if'
1627        Source: begin-gen
1627         InstructionFlow: begin-gen
1627          Value: begin-gen
1627           Identifier: begin-gen
1627            Identifier: expr: 'False'
1627          <-Value: expr: 'False'
1627           Identifier: end-gen
1627          Value: end-gen
1627          InstructionFlow: line: 'return False'
1627        <-Source: line: 'return False'
1627       <--If: line: 'return False'
1627      <---Source: line: 'return False'
1627     <----If: line: 'return False'
1627    <-----Source: line: 'return False'
1627   <------Function: line: 'return False'
1627  <-------Source: line: 'return False'
1627 <--------Class: line: 'return False'
1627<---------Source: line: 'return False'
1628         InstructionFlow: end-gen
1628        Source: end-gen
1628        If: end: 'block-if'
1628      <-Source: end: 'block-if'
1628     <--If: end: 'block-if'
1628    <---Source: end: 'block-if'
1628   <----Function: end: 'block-if'
1628  <-----Source: end: 'block-if'
1628 <------Class: end: 'block-if'
1628<-------Source: end: 'block-if'
1628       If: end-gen
1628       InstructionCall: begin-gen
1628        Member: begin-gen
1628         Identifier: begin-gen
1628          Identifier: expr: 'curAgenda'
1628         Identifier: end-gen
1628         FunctionCall: begin-gen
1628          Value: begin-gen
1628           Member: begin-gen
1628            Identifier: begin-gen
1628             Identifier: expr: 'curAgenda'
1628            Identifier: end-gen
1628            Identifier: begin-gen
1628             Identifier: expr: 'Edit'
1628            Identifier: end-gen
1628            Member: expr: 'curAgenda.Edit'
1628          <-Value: expr: 'curAgenda.Edit'
1628           Member: end-gen
1628          Value: end-gen
1628          FunctionCall: expr: 'setModeAccess(curAgenda.Edit)'
1628         FunctionCall: end-gen
1628         Member: expr: 'curAgenda.setModeAccess(curAgenda.Edit)'
1628        Member: end-gen
1628        InstructionCall: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1628      <-Source: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1628     <--If: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1628    <---Source: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1628   <----Function: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1628  <-----Source: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1628 <------Class: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1628<-------Source: line: 'curAgenda.setModeAccess(curAgenda.Edit)'
1629       InstructionCall: end-gen
1629       InstructionCall: begin-gen
1629        Member: begin-gen
1629         Identifier: begin-gen
1629          Identifier: expr: 'curAgenda'
1629         Identifier: end-gen
1629         FunctionCall: begin-gen
1629          FunctionCall: expr: 'refreshBuffer()'
1629         FunctionCall: end-gen
1629         Member: expr: 'curAgenda.refreshBuffer()'
1629        Member: end-gen
1629        InstructionCall: line: 'curAgenda.refreshBuffer()'
1629      <-Source: line: 'curAgenda.refreshBuffer()'
1629     <--If: line: 'curAgenda.refreshBuffer()'
1629    <---Source: line: 'curAgenda.refreshBuffer()'
1629   <----Function: line: 'curAgenda.refreshBuffer()'
1629  <-----Source: line: 'curAgenda.refreshBuffer()'
1629 <------Class: line: 'curAgenda.refreshBuffer()'
1629<-------Source: line: 'curAgenda.refreshBuffer()'
1630       InstructionCall: end-gen
1630       InstructionCall: begin-gen
1630        Member: begin-gen
1630         Identifier: begin-gen
1630          Identifier: expr: 'curAgenda'
1630         Identifier: end-gen
1630         FunctionCall: begin-gen
1630          Value: begin-gen
1630           Constant: begin-gen
1630            Constant: ctype: 'String' -> 'codcontacto'
1630            Constant: expr: 'u"codcontacto"'
1630          <-Value: expr: 'u"codcontacto"'
1630           Constant: end-gen
1630          Value: end-gen
1630          Value: begin-gen
1630           Identifier: begin-gen
1630            Identifier: expr: 'codContacto'
1630          <-Value: expr: 'codContacto'
1630           Identifier: end-gen
1630          Value: end-gen
1630          FunctionCall: expr: 'setValueBuffer(u"codcontacto", codContacto)'
1630         FunctionCall: end-gen
1630         Member: expr: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1630        Member: end-gen
1630        InstructionCall: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1630      <-Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1630     <--If: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1630    <---Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1630   <----Function: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1630  <-----Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1630 <------Class: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1630<-------Source: line: 'curAgenda.setValueBuffer(u"codcontacto", codContacto)'
1631       InstructionCall: end-gen
1631       If: begin-gen
1631        Value: begin-gen
1631         OpUnary: begin-gen
1631          OpUnary: expr: 'not'
1631        <-Value: expr: 'not'
1631          Member: begin-gen
1631           Identifier: begin-gen
1631            Identifier: expr: 'curAgenda'
1631           Identifier: end-gen
1631           FunctionCall: begin-gen
1631            FunctionCall: expr: 'commitBuffer()'
1631           FunctionCall: end-gen
1631           Member: expr: 'curAgenda.commitBuffer()'
1631         <-OpUnary: expr: 'curAgenda.commitBuffer()'
1631        <--Value: expr: 'curAgenda.commitBuffer()'
1631          Member: end-gen
1631         OpUnary: end-gen
1631        Value: end-gen
1631        If: line: 'if not curAgenda.commitBuffer():'
1631      <-Source: line: 'if not curAgenda.commitBuffer():'
1631     <--If: line: 'if not curAgenda.commitBuffer():'
1631    <---Source: line: 'if not curAgenda.commitBuffer():'
1631   <----Function: line: 'if not curAgenda.commitBuffer():'
1631  <-----Source: line: 'if not curAgenda.commitBuffer():'
1631 <------Class: line: 'if not curAgenda.commitBuffer():'
1631<-------Source: line: 'if not curAgenda.commitBuffer():'
1632        If: begin: 'block-if'
1632      <-Source: begin: 'block-if'
1632     <--If: begin: 'block-if'
1632    <---Source: begin: 'block-if'
1632   <----Function: begin: 'block-if'
1632  <-----Source: begin: 'block-if'
1632 <------Class: begin: 'block-if'
1632<-------Source: begin: 'block-if'
1632        Source: begin-gen
1632         InstructionFlow: begin-gen
1632          Value: begin-gen
1632           Identifier: begin-gen
1632            Identifier: expr: 'False'
1632          <-Value: expr: 'False'
1632           Identifier: end-gen
1632          Value: end-gen
1632          InstructionFlow: line: 'return False'
1632        <-Source: line: 'return False'
1632       <--If: line: 'return False'
1632      <---Source: line: 'return False'
1632     <----If: line: 'return False'
1632    <-----Source: line: 'return False'
1632   <------Function: line: 'return False'
1632  <-------Source: line: 'return False'
1632 <--------Class: line: 'return False'
1632<---------Source: line: 'return False'
1633         InstructionFlow: end-gen
1633        Source: end-gen
1633        If: end: 'block-if'
1633      <-Source: end: 'block-if'
1633     <--If: end: 'block-if'
1633    <---Source: end: 'block-if'
1633   <----Function: end: 'block-if'
1633  <-----Source: end: 'block-if'
1633 <------Class: end: 'block-if'
1633<-------Source: end: 'block-if'
1633       If: end-gen
1633      Source: end-gen
1633      If: end: 'block-else'
1633    <-Source: end: 'block-else'
1633   <--Function: end: 'block-else'
1633  <---Source: end: 'block-else'
1633 <----Class: end: 'block-else'
1633<-----Source: end: 'block-else'
1634     If: end-gen
1634     InstructionFlow: begin-gen
1634      Value: begin-gen
1634       Identifier: begin-gen
1634        Identifier: expr: 'codContacto'
1634      <-Value: expr: 'codContacto'
1634       Identifier: end-gen
1634      Value: end-gen
1634      InstructionFlow: line: 'return codContacto'
1634    <-Source: line: 'return codContacto'
1634   <--Function: line: 'return codContacto'
1634  <---Source: line: 'return codContacto'
1634 <----Class: line: 'return codContacto'
1634<-----Source: line: 'return codContacto'
1635     InstructionFlow: end-gen
1635    Source: end-gen
1635    Function: end: 'block-def-oficial_actualizarContactosDeAgendaProv20070702'
1635  <-Source: end: 'block-def-oficial_actualizarContactosDeAgendaProv20070702'
1635 <--Class: end: 'block-def-oficial_actualizarContactosDeAgendaProv20070702'
1635<---Source: end: 'block-def-oficial_actualizarContactosDeAgendaProv20070702'
1636   Function: end-gen
1636   Function: begin-gen
1636    Variable: begin-gen
1636     Variable: expr: 'opciones'
1636    Variable: end-gen
1636    Variable: begin-gen
1636     Variable: expr: 'titulo'
1636    Variable: end-gen
1636    Function: line: 'def oficial_elegirOpcion(self, opciones = None, titulo = None):'
1636  <-Source: line: 'def oficial_elegirOpcion(self, opciones = None, titulo = None):'
1636 <--Class: line: 'def oficial_elegirOpcion(self, opciones = None, titulo = None):'
1636<---Source: line: 'def oficial_elegirOpcion(self, opciones = None, titulo = None):'
1637    Function: begin: 'block-def-oficial_elegirOpcion'
1637  <-Source: begin: 'block-def-oficial_elegirOpcion'
1637 <--Class: begin: 'block-def-oficial_elegirOpcion'
1637<---Source: begin: 'block-def-oficial_elegirOpcion'
1637    Source: begin-gen
1637     DeclarationBlock: begin-gen
1637      Variable: begin-gen
1637       Variable: expr: 'util'
1637       Variable: expr: '='
1637       Value: begin-gen
1637        New: begin-gen
1637         FunctionCall: begin-gen
1637          FunctionCall: expr: 'FLUtil()'
1637        <-New: expr: 'qsatype.FLUtil()'
1637       <--Value: expr: 'qsatype.FLUtil()'
1637      <---Variable: expr: 'qsatype.FLUtil()'
1637         FunctionCall: end-gen
1637        New: end-gen
1637       Value: end-gen
1637      Variable: end-gen
1637      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1637    <-Source: line: 'util = qsatype.FLUtil()'
1637   <--Function: line: 'util = qsatype.FLUtil()'
1637  <---Source: line: 'util = qsatype.FLUtil()'
1637 <----Class: line: 'util = qsatype.FLUtil()'
1637<-----Source: line: 'util = qsatype.FLUtil()'
1638     DeclarationBlock: end-gen
1638     DeclarationBlock: begin-gen
1638      Variable: begin-gen
1638       Variable: expr: 'dialog'
1638       Variable: expr: '='
1638       Value: begin-gen
1638        New: begin-gen
1638         Identifier: begin-gen
1638          Identifier: expr: 'Dialog'
1638        <-New: expr: 'qsatype.Dialog()'
1638       <--Value: expr: 'qsatype.Dialog()'
1638      <---Variable: expr: 'qsatype.Dialog()'
1638         Identifier: end-gen
1638        New: end-gen
1638       Value: end-gen
1638      Variable: end-gen
1638      DeclarationBlock: line: 'dialog = qsatype.Dialog()'
1638    <-Source: line: 'dialog = qsatype.Dialog()'
1638   <--Function: line: 'dialog = qsatype.Dialog()'
1638  <---Source: line: 'dialog = qsatype.Dialog()'
1638 <----Class: line: 'dialog = qsatype.Dialog()'
1638<-----Source: line: 'dialog = qsatype.Dialog()'
1639     DeclarationBlock: end-gen
1639     InstructionUpdate: begin-gen
1639      Member: begin-gen
1639       Identifier: begin-gen
1639        Identifier: expr: 'dialog'
1639       Identifier: end-gen
1639       Identifier: begin-gen
1639        Identifier: expr: 'okButtonText'
1639       Identifier: end-gen
1639       Member: expr: 'dialog.okButtonText'
1639      Member: end-gen
1639      OpUpdate: begin-gen
1639       OpUpdate: expr: '='
1639      OpUpdate: end-gen
1639      Value: begin-gen
1639       Member: begin-gen
1639        Identifier: begin-gen
1639         Identifier: expr: 'util'
1639        Identifier: end-gen
1639        FunctionCall: begin-gen
1639         Value: begin-gen
1639          Constant: begin-gen
1639           Constant: ctype: 'String' -> 'scripts'
1639           Constant: expr: 'u"scripts"'
1639         <-Value: expr: 'u"scripts"'
1639          Constant: end-gen
1639         Value: end-gen
1639         Value: begin-gen
1639          Constant: begin-gen
1639           Constant: ctype: 'String' -> 'Aceptar'
1639           Constant: expr: 'u"Aceptar"'
1639         <-Value: expr: 'u"Aceptar"'
1639          Constant: end-gen
1639         Value: end-gen
1639         FunctionCall: expr: 'translate(u"scripts", u"Aceptar")'
1639        FunctionCall: end-gen
1639        Member: expr: 'util.translate(u"scripts", u"Aceptar")'
1639      <-Value: expr: 'util.translate(u"scripts", u"Aceptar")'
1639       Member: end-gen
1639      Value: end-gen
1639      InstructionUpdate: line: 'dialog.okButtonText = util.translate(u"scripts", u"Aceptar")'
1639    <-Source: line: 'dialog.okButtonText = util.translate(u"scripts", u"Aceptar")'
1639   <--Function: line: 'dialog.okButtonText = util.translate(u"scripts", u"Aceptar")'
1639  <---Source: line: 'dialog.okButtonText = util.translate(u"scripts", u"Aceptar")'
1639 <----Class: line: 'dialog.okButtonText = util.translate(u"scripts", u"Aceptar")'
1639<-----Source: line: 'dialog.okButtonText = util.translate(u"scripts", u"Aceptar")'
1640     InstructionUpdate: end-gen
1640     InstructionUpdate: begin-gen
1640      Member: begin-gen
1640       Identifier: begin-gen
1640        Identifier: expr: 'dialog'
1640       Identifier: end-gen
1640       Identifier: begin-gen
1640        Identifier: expr: 'cancelButtonText'
1640       Identifier: end-gen
1640       Member: expr: 'dialog.cancelButtonText'
1640      Member: end-gen
1640      OpUpdate: begin-gen
1640       OpUpdate: expr: '='
1640      OpUpdate: end-gen
1640      Value: begin-gen
1640       Member: begin-gen
1640        Identifier: begin-gen
1640         Identifier: expr: 'util'
1640        Identifier: end-gen
1640        FunctionCall: begin-gen
1640         Value: begin-gen
1640          Constant: begin-gen
1640           Constant: ctype: 'String' -> 'scripts'
1640           Constant: expr: 'u"scripts"'
1640         <-Value: expr: 'u"scripts"'
1640          Constant: end-gen
1640         Value: end-gen
1640         Value: begin-gen
1640          Constant: begin-gen
1640           Constant: ctype: 'String' -> 'Cancelar'
1640           Constant: expr: 'u"Cancelar"'
1640         <-Value: expr: 'u"Cancelar"'
1640          Constant: end-gen
1640         Value: end-gen
1640         FunctionCall: expr: 'translate(u"scripts", u"Cancelar")'
1640        FunctionCall: end-gen
1640        Member: expr: 'util.translate(u"scripts", u"Cancelar")'
1640      <-Value: expr: 'util.translate(u"scripts", u"Cancelar")'
1640       Member: end-gen
1640      Value: end-gen
1640      InstructionUpdate: line: 'dialog.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
1640    <-Source: line: 'dialog.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
1640   <--Function: line: 'dialog.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
1640  <---Source: line: 'dialog.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
1640 <----Class: line: 'dialog.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
1640<-----Source: line: 'dialog.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
1641     InstructionUpdate: end-gen
1641     InstructionUpdate: begin-gen
1641      Member: begin-gen
1641       Identifier: begin-gen
1641        Identifier: expr: 'dialog'
1641       Identifier: end-gen
1641       Identifier: begin-gen
1641        Identifier: expr: 'title'
1641       Identifier: end-gen
1641       Member: expr: 'dialog.title'
1641      Member: end-gen
1641      OpUpdate: begin-gen
1641       OpUpdate: expr: '='
1641      OpUpdate: end-gen
1641      Value: begin-gen
1641       Identifier: begin-gen
1641        Identifier: expr: 'titulo'
1641      <-Value: expr: 'titulo'
1641       Identifier: end-gen
1641      Value: end-gen
1641      InstructionUpdate: line: 'dialog.title = titulo'
1641    <-Source: line: 'dialog.title = titulo'
1641   <--Function: line: 'dialog.title = titulo'
1641  <---Source: line: 'dialog.title = titulo'
1641 <----Class: line: 'dialog.title = titulo'
1641<-----Source: line: 'dialog.title = titulo'
1642     InstructionUpdate: end-gen
1642     DeclarationBlock: begin-gen
1642      Variable: begin-gen
1642       Variable: expr: 'bgroup'
1642       Variable: expr: '='
1642       Value: begin-gen
1642        New: begin-gen
1642         Identifier: begin-gen
1642          Identifier: expr: 'GroupBox'
1642        <-New: expr: 'qsatype.GroupBox()'
1642       <--Value: expr: 'qsatype.GroupBox()'
1642      <---Variable: expr: 'qsatype.GroupBox()'
1642         Identifier: end-gen
1642        New: end-gen
1642       Value: end-gen
1642      Variable: end-gen
1642      DeclarationBlock: line: 'bgroup = qsatype.GroupBox()'
1642    <-Source: line: 'bgroup = qsatype.GroupBox()'
1642   <--Function: line: 'bgroup = qsatype.GroupBox()'
1642  <---Source: line: 'bgroup = qsatype.GroupBox()'
1642 <----Class: line: 'bgroup = qsatype.GroupBox()'
1642<-----Source: line: 'bgroup = qsatype.GroupBox()'
1643     DeclarationBlock: end-gen
1643     InstructionCall: begin-gen
1643      Member: begin-gen
1643       Identifier: begin-gen
1643        Identifier: expr: 'dialog'
1643       Identifier: end-gen
1643       FunctionCall: begin-gen
1643        Value: begin-gen
1643         Identifier: begin-gen
1643          Identifier: expr: 'bgroup'
1643        <-Value: expr: 'bgroup'
1643         Identifier: end-gen
1643        Value: end-gen
1643        FunctionCall: expr: 'add(bgroup)'
1643       FunctionCall: end-gen
1643       Member: expr: 'dialog.add(bgroup)'
1643      Member: end-gen
1643      InstructionCall: line: 'dialog.add(bgroup)'
1643    <-Source: line: 'dialog.add(bgroup)'
1643   <--Function: line: 'dialog.add(bgroup)'
1643  <---Source: line: 'dialog.add(bgroup)'
1643 <----Class: line: 'dialog.add(bgroup)'
1643<-----Source: line: 'dialog.add(bgroup)'
1644     InstructionCall: end-gen
1644     DeclarationBlock: begin-gen
1644      Variable: begin-gen
1644       Variable: expr: 'rB'
1644       Variable: expr: '='
1644       Value: begin-gen
1644        Constant: begin-gen
1644         Constant: ctype: None -> None
1644         Constant: expr: '[]'
1644       <-Value: expr: '[]'
1644      <--Variable: expr: 'qsatype.Array()'
1644        Constant: end-gen
1644       Value: end-gen
1644      Variable: end-gen
1644      DeclarationBlock: line: 'rB = qsatype.Array()'
1644    <-Source: line: 'rB = qsatype.Array()'
1644   <--Function: line: 'rB = qsatype.Array()'
1644  <---Source: line: 'rB = qsatype.Array()'
1644 <----Class: line: 'rB = qsatype.Array()'
1644<-----Source: line: 'rB = qsatype.Array()'
1645     DeclarationBlock: end-gen
1645     For: begin-gen
1645      Variable: begin-gen
1645       Variable: expr: 'i'
1645       Variable: expr: '='
1645       Value: begin-gen
1645        Constant: begin-gen
1645         Constant: ctype: 'Number' -> '0'
1645         Constant: expr: '0'
1645       <-Value: expr: '0'
1645      <--Variable: expr: '0'
1645        Constant: end-gen
1645       Value: end-gen
1645      Variable: end-gen
1645      For: line: 'i = 0'
1645    <-Source: line: 'i = 0'
1645   <--Function: line: 'i = 0'
1645  <---Source: line: 'i = 0'
1645 <----Class: line: 'i = 0'
1645<-----Source: line: 'i = 0'
1646      For: line: 'while_pass = True'
1646    <-Source: line: 'while_pass = True'
1646   <--Function: line: 'while_pass = True'
1646  <---Source: line: 'while_pass = True'
1646 <----Class: line: 'while_pass = True'
1646<-----Source: line: 'while_pass = True'
1647      InlineUpdate: begin-gen
1647       Identifier: begin-gen
1647        Identifier: expr: 'i'
1647       Identifier: end-gen
1647       InlineUpdate: expr: 'i'
1647       InlineUpdate: line+1: 'i += 1'
1647      InlineUpdate: end-gen
1647      Expression: begin-gen
1647       Identifier: begin-gen
1647        Identifier: expr: 'i'
1647      <-Expression: expr: 'i'
1647       Identifier: end-gen
1647       Compare: begin-gen
1647        Compare: expr: '<'
1647      <-Expression: expr: '<'
1647       Compare: end-gen
1647       Member: begin-gen
1647        Identifier: begin-gen
1647         Identifier: expr: 'opciones'
1647        Identifier: end-gen
1647        Identifier: begin-gen
1647         Identifier: expr: 'length'
1647        Identifier: end-gen
1647        Member: expr: 'len(opciones)'
1647      <-Expression: expr: 'len(opciones)'
1647       Member: end-gen
1647      Expression: end-gen
1647      For: line: 'while i < len(opciones):'
1647    <-Source: line: 'while i < len(opciones):'
1647   <--Function: line: 'while i < len(opciones):'
1647  <---Source: line: 'while i < len(opciones):'
1647 <----Class: line: 'while i < len(opciones):'
1647<-----Source: line: 'while i < len(opciones):'
1648      For: begin: 'block-for'
1648    <-Source: begin: 'block-for'
1648   <--Function: begin: 'block-for'
1648  <---Source: begin: 'block-for'
1648 <----Class: begin: 'block-for'
1648<-----Source: begin: 'block-for'
1648      For: line: 'if not while_pass:'
1648    <-Source: line: 'if not while_pass:'
1648   <--Function: line: 'if not while_pass:'
1648  <---Source: line: 'if not while_pass:'
1648 <----Class: line: 'if not while_pass:'
1648<-----Source: line: 'if not while_pass:'
1649      For: begin: 'block-while_pass'
1649    <-Source: begin: 'block-while_pass'
1649   <--Function: begin: 'block-while_pass'
1649  <---Source: begin: 'block-while_pass'
1649 <----Class: begin: 'block-while_pass'
1649<-----Source: begin: 'block-while_pass'
1649      For: line: 'i += 1'
1649    <-Source: line: 'i += 1'
1649   <--Function: line: 'i += 1'
1649  <---Source: line: 'i += 1'
1649 <----Class: line: 'i += 1'
1649<-----Source: line: 'i += 1'
1650      For: line: 'while_pass = True'
1650    <-Source: line: 'while_pass = True'
1650   <--Function: line: 'while_pass = True'
1650  <---Source: line: 'while_pass = True'
1650 <----Class: line: 'while_pass = True'
1650<-----Source: line: 'while_pass = True'
1651      For: line: 'continue'
1651    <-Source: line: 'continue'
1651   <--Function: line: 'continue'
1651  <---Source: line: 'continue'
1651 <----Class: line: 'continue'
1651<-----Source: line: 'continue'
1652      For: end: 'block-while_pass'
1652    <-Source: end: 'block-while_pass'
1652   <--Function: end: 'block-while_pass'
1652  <---Source: end: 'block-while_pass'
1652 <----Class: end: 'block-while_pass'
1652<-----Source: end: 'block-while_pass'
1652      For: line: 'while_pass = False'
1652    <-Source: line: 'while_pass = False'
1652   <--Function: line: 'while_pass = False'
1652  <---Source: line: 'while_pass = False'
1652 <----Class: line: 'while_pass = False'
1652<-----Source: line: 'while_pass = False'
1653      Source: begin-gen
1653       InstructionUpdate: begin-gen
1653        ArrayMember: begin-gen
1653         Identifier: begin-gen
1653          Identifier: expr: 'rB'
1653         Identifier: end-gen
1653         Value: begin-gen
1653          Identifier: begin-gen
1653           Identifier: expr: 'i'
1653         <-Value: expr: 'i'
1653          Identifier: end-gen
1653         Value: end-gen
1653         ArrayMember: expr: 'rB[i]'
1653        ArrayMember: end-gen
1653        OpUpdate: begin-gen
1653         OpUpdate: expr: '='
1653        OpUpdate: end-gen
1653        Value: begin-gen
1653         New: begin-gen
1653          Identifier: begin-gen
1653           Identifier: expr: 'RadioButton'
1653         <-New: expr: 'qsatype.RadioButton()'
1653        <--Value: expr: 'qsatype.RadioButton()'
1653          Identifier: end-gen
1653         New: end-gen
1653        Value: end-gen
1653        InstructionUpdate: line: 'rB[i] = qsatype.RadioButton()'
1653      <-Source: line: 'rB[i] = qsatype.RadioButton()'
1653     <--For: line: 'rB[i] = qsatype.RadioButton()'
1653    <---Source: line: 'rB[i] = qsatype.RadioButton()'
1653   <----Function: line: 'rB[i] = qsatype.RadioButton()'
1653  <-----Source: line: 'rB[i] = qsatype.RadioButton()'
1653 <------Class: line: 'rB[i] = qsatype.RadioButton()'
1653<-------Source: line: 'rB[i] = qsatype.RadioButton()'
1654       InstructionUpdate: end-gen
1654       InstructionCall: begin-gen
1654        Member: begin-gen
1654         Identifier: begin-gen
1654          Identifier: expr: 'bgroup'
1654         Identifier: end-gen
1654         FunctionCall: begin-gen
1654          Value: begin-gen
1654           ArrayMember: begin-gen
1654            Identifier: begin-gen
1654             Identifier: expr: 'rB'
1654            Identifier: end-gen
1654            Value: begin-gen
1654             Identifier: begin-gen
1654              Identifier: expr: 'i'
1654            <-Value: expr: 'i'
1654             Identifier: end-gen
1654            Value: end-gen
1654            ArrayMember: expr: 'rB[i]'
1654          <-Value: expr: 'rB[i]'
1654           ArrayMember: end-gen
1654          Value: end-gen
1654          FunctionCall: expr: 'add(rB[i])'
1654         FunctionCall: end-gen
1654         Member: expr: 'bgroup.add(rB[i])'
1654        Member: end-gen
1654        InstructionCall: line: 'bgroup.add(rB[i])'
1654      <-Source: line: 'bgroup.add(rB[i])'
1654     <--For: line: 'bgroup.add(rB[i])'
1654    <---Source: line: 'bgroup.add(rB[i])'
1654   <----Function: line: 'bgroup.add(rB[i])'
1654  <-----Source: line: 'bgroup.add(rB[i])'
1654 <------Class: line: 'bgroup.add(rB[i])'
1654<-------Source: line: 'bgroup.add(rB[i])'
1655       InstructionCall: end-gen
1655       InstructionUpdate: begin-gen
1655        Member: begin-gen
1655         ArrayMember: begin-gen
1655          Identifier: begin-gen
1655           Identifier: expr: 'rB'
1655          Identifier: end-gen
1655          Value: begin-gen
1655           Identifier: begin-gen
1655            Identifier: expr: 'i'
1655          <-Value: expr: 'i'
1655           Identifier: end-gen
1655          Value: end-gen
1655          ArrayMember: expr: 'rB[i]'
1655         ArrayMember: end-gen
1655         Identifier: begin-gen
1655          Identifier: expr: 'text'
1655         Identifier: end-gen
1655         Member: expr: 'rB[i].text'
1655        Member: end-gen
1655        OpUpdate: begin-gen
1655         OpUpdate: expr: '='
1655        OpUpdate: end-gen
1655        Value: begin-gen
1655         ArrayMember: begin-gen
1655          Identifier: begin-gen
1655           Identifier: expr: 'opciones'
1655          Identifier: end-gen
1655          Value: begin-gen
1655           Identifier: begin-gen
1655            Identifier: expr: 'i'
1655          <-Value: expr: 'i'
1655           Identifier: end-gen
1655          Value: end-gen
1655          ArrayMember: expr: 'opciones[i]'
1655        <-Value: expr: 'opciones[i]'
1655         ArrayMember: end-gen
1655        Value: end-gen
1655        InstructionUpdate: line: 'rB[i].text = opciones[i]'
1655      <-Source: line: 'rB[i].text = opciones[i]'
1655     <--For: line: 'rB[i].text = opciones[i]'
1655    <---Source: line: 'rB[i].text = opciones[i]'
1655   <----Function: line: 'rB[i].text = opciones[i]'
1655  <-----Source: line: 'rB[i].text = opciones[i]'
1655 <------Class: line: 'rB[i].text = opciones[i]'
1655<-------Source: line: 'rB[i].text = opciones[i]'
1656       InstructionUpdate: end-gen
1656       If: begin-gen
1656        Expression: begin-gen
1656         Identifier: begin-gen
1656          Identifier: expr: 'i'
1656        <-Expression: expr: 'i'
1656         Identifier: end-gen
1656         Compare: begin-gen
1656          Compare: expr: '=='
1656        <-Expression: expr: '=='
1656         Compare: end-gen
1656         Constant: begin-gen
1656          Constant: ctype: 'Number' -> '0'
1656          Constant: expr: '0'
1656        <-Expression: expr: '0'
1656         Constant: end-gen
1656        Expression: end-gen
1656        If: line: 'if i == 0:'
1656      <-Source: line: 'if i == 0:'
1656     <--For: line: 'if i == 0:'
1656    <---Source: line: 'if i == 0:'
1656   <----Function: line: 'if i == 0:'
1656  <-----Source: line: 'if i == 0:'
1656 <------Class: line: 'if i == 0:'
1656<-------Source: line: 'if i == 0:'
1657        If: begin: 'block-if'
1657      <-Source: begin: 'block-if'
1657     <--For: begin: 'block-if'
1657    <---Source: begin: 'block-if'
1657   <----Function: begin: 'block-if'
1657  <-----Source: begin: 'block-if'
1657 <------Class: begin: 'block-if'
1657<-------Source: begin: 'block-if'
1657        Source: begin-gen
1657         InstructionUpdate: begin-gen
1657          Member: begin-gen
1657           ArrayMember: begin-gen
1657            Identifier: begin-gen
1657             Identifier: expr: 'rB'
1657            Identifier: end-gen
1657            Value: begin-gen
1657             Identifier: begin-gen
1657              Identifier: expr: 'i'
1657            <-Value: expr: 'i'
1657             Identifier: end-gen
1657            Value: end-gen
1657            ArrayMember: expr: 'rB[i]'
1657           ArrayMember: end-gen
1657           Identifier: begin-gen
1657            Identifier: expr: 'checked'
1657           Identifier: end-gen
1657           Member: expr: 'rB[i].checked'
1657          Member: end-gen
1657          OpUpdate: begin-gen
1657           OpUpdate: expr: '='
1657          OpUpdate: end-gen
1657          Value: begin-gen
1657           Identifier: begin-gen
1657            Identifier: expr: 'True'
1657          <-Value: expr: 'True'
1657           Identifier: end-gen
1657          Value: end-gen
1657          InstructionUpdate: line: 'rB[i].checked = True'
1657        <-Source: line: 'rB[i].checked = True'
1657       <--If: line: 'rB[i].checked = True'
1657      <---Source: line: 'rB[i].checked = True'
1657     <----For: line: 'rB[i].checked = True'
1657    <-----Source: line: 'rB[i].checked = True'
1657   <------Function: line: 'rB[i].checked = True'
1657  <-------Source: line: 'rB[i].checked = True'
1657 <--------Class: line: 'rB[i].checked = True'
1657<---------Source: line: 'rB[i].checked = True'
1658         InstructionUpdate: end-gen
1658        Source: end-gen
1658        If: end: 'block-if'
1658      <-Source: end: 'block-if'
1658     <--For: end: 'block-if'
1658    <---Source: end: 'block-if'
1658   <----Function: end: 'block-if'
1658  <-----Source: end: 'block-if'
1658 <------Class: end: 'block-if'
1658<-------Source: end: 'block-if'
1658        If: line: 'else:'
1658      <-Source: line: 'else:'
1658     <--For: line: 'else:'
1658    <---Source: line: 'else:'
1658   <----Function: line: 'else:'
1658  <-----Source: line: 'else:'
1658 <------Class: line: 'else:'
1658<-------Source: line: 'else:'
1659        If: begin: 'block-else'
1659      <-Source: begin: 'block-else'
1659     <--For: begin: 'block-else'
1659    <---Source: begin: 'block-else'
1659   <----Function: begin: 'block-else'
1659  <-----Source: begin: 'block-else'
1659 <------Class: begin: 'block-else'
1659<-------Source: begin: 'block-else'
1659        Source: begin-gen
1659         InstructionUpdate: begin-gen
1659          Member: begin-gen
1659           ArrayMember: begin-gen
1659            Identifier: begin-gen
1659             Identifier: expr: 'rB'
1659            Identifier: end-gen
1659            Value: begin-gen
1659             Identifier: begin-gen
1659              Identifier: expr: 'i'
1659            <-Value: expr: 'i'
1659             Identifier: end-gen
1659            Value: end-gen
1659            ArrayMember: expr: 'rB[i]'
1659           ArrayMember: end-gen
1659           Identifier: begin-gen
1659            Identifier: expr: 'checked'
1659           Identifier: end-gen
1659           Member: expr: 'rB[i].checked'
1659          Member: end-gen
1659          OpUpdate: begin-gen
1659           OpUpdate: expr: '='
1659          OpUpdate: end-gen
1659          Value: begin-gen
1659           Identifier: begin-gen
1659            Identifier: expr: 'False'
1659          <-Value: expr: 'False'
1659           Identifier: end-gen
1659          Value: end-gen
1659          InstructionUpdate: line: 'rB[i].checked = False'
1659        <-Source: line: 'rB[i].checked = False'
1659       <--If: line: 'rB[i].checked = False'
1659      <---Source: line: 'rB[i].checked = False'
1659     <----For: line: 'rB[i].checked = False'
1659    <-----Source: line: 'rB[i].checked = False'
1659   <------Function: line: 'rB[i].checked = False'
1659  <-------Source: line: 'rB[i].checked = False'
1659 <--------Class: line: 'rB[i].checked = False'
1659<---------Source: line: 'rB[i].checked = False'
1660         InstructionUpdate: end-gen
1660        Source: end-gen
1660        If: end: 'block-else'
1660      <-Source: end: 'block-else'
1660     <--For: end: 'block-else'
1660    <---Source: end: 'block-else'
1660   <----Function: end: 'block-else'
1660  <-----Source: end: 'block-else'
1660 <------Class: end: 'block-else'
1660<-------Source: end: 'block-else'
1661       If: end-gen
1661       If: begin-gen
1661        Expression: begin-gen
1661         Parentheses: begin-gen
1661          Parentheses: expr: '('
1661        <-Expression: expr: '('
1661          Identifier: begin-gen
1661           Identifier: expr: 'i'
1661         <-Parentheses: expr: 'i'
1661        <--Expression: expr: 'i'
1661          Identifier: end-gen
1661          OpMath: begin-gen
1661           OpMath: expr: '+'
1661         <-Parentheses: expr: '+'
1661        <--Expression: expr: '+'
1661          OpMath: end-gen
1661          Constant: begin-gen
1661           Constant: ctype: 'Number' -> '1'
1661           Constant: expr: '1'
1661         <-Parentheses: expr: '1'
1661        <--Expression: expr: '1'
1661          Constant: end-gen
1661          Parentheses: expr: ')'
1661        <-Expression: expr: ')'
1661         Parentheses: end-gen
1661         OpMath: begin-gen
1661          OpMath: expr: '%'
1661        <-Expression: expr: '%'
1661         OpMath: end-gen
1661         Constant: begin-gen
1661          Constant: ctype: 'Number' -> '25'
1661          Constant: expr: '25'
1661        <-Expression: expr: '25'
1661         Constant: end-gen
1661         Compare: begin-gen
1661          Compare: expr: '=='
1661        <-Expression: expr: '=='
1661         Compare: end-gen
1661         Constant: begin-gen
1661          Constant: ctype: 'Number' -> '0'
1661          Constant: expr: '0'
1661        <-Expression: expr: '0'
1661         Constant: end-gen
1661        Expression: end-gen
1661        If: line: 'if ( i + 1 ) % 25 == 0:'
1661      <-Source: line: 'if ( i + 1 ) % 25 == 0:'
1661     <--For: line: 'if ( i + 1 ) % 25 == 0:'
1661    <---Source: line: 'if ( i + 1 ) % 25 == 0:'
1661   <----Function: line: 'if ( i + 1 ) % 25 == 0:'
1661  <-----Source: line: 'if ( i + 1 ) % 25 == 0:'
1661 <------Class: line: 'if ( i + 1 ) % 25 == 0:'
1661<-------Source: line: 'if ( i + 1 ) % 25 == 0:'
1662        If: begin: 'block-if'
1662      <-Source: begin: 'block-if'
1662     <--For: begin: 'block-if'
1662    <---Source: begin: 'block-if'
1662   <----Function: begin: 'block-if'
1662  <-----Source: begin: 'block-if'
1662 <------Class: begin: 'block-if'
1662<-------Source: begin: 'block-if'
1662        Source: begin-gen
1662         InstructionCall: begin-gen
1662          Member: begin-gen
1662           Identifier: begin-gen
1662            Identifier: expr: 'bgroup'
1662           Identifier: end-gen
1662           FunctionCall: begin-gen
1662            FunctionCall: expr: 'newColumn()'
1662           FunctionCall: end-gen
1662           Member: expr: 'bgroup.newColumn()'
1662          Member: end-gen
1662          InstructionCall: line: 'bgroup.newColumn()'
1662        <-Source: line: 'bgroup.newColumn()'
1662       <--If: line: 'bgroup.newColumn()'
1662      <---Source: line: 'bgroup.newColumn()'
1662     <----For: line: 'bgroup.newColumn()'
1662    <-----Source: line: 'bgroup.newColumn()'
1662   <------Function: line: 'bgroup.newColumn()'
1662  <-------Source: line: 'bgroup.newColumn()'
1662 <--------Class: line: 'bgroup.newColumn()'
1662<---------Source: line: 'bgroup.newColumn()'
1663         InstructionCall: end-gen
1663        Source: end-gen
1663        If: end: 'block-if'
1663      <-Source: end: 'block-if'
1663     <--For: end: 'block-if'
1663    <---Source: end: 'block-if'
1663   <----Function: end: 'block-if'
1663  <-----Source: end: 'block-if'
1663 <------Class: end: 'block-if'
1663<-------Source: end: 'block-if'
1663       If: end-gen
1663      Source: end-gen
1663      For: line: 'i += 1'
1663    <-Source: line: 'i += 1'
1663   <--Function: line: 'i += 1'
1663  <---Source: line: 'i += 1'
1663 <----Class: line: 'i += 1'
1663<-----Source: line: 'i += 1'
1664      For: line: 'while_pass = True'
1664    <-Source: line: 'while_pass = True'
1664   <--Function: line: 'while_pass = True'
1664  <---Source: line: 'while_pass = True'
1664 <----Class: line: 'while_pass = True'
1664<-----Source: line: 'while_pass = True'
1665      For: line: 'try:'
1665    <-Source: line: 'try:'
1665   <--Function: line: 'try:'
1665  <---Source: line: 'try:'
1665 <----Class: line: 'try:'
1665<-----Source: line: 'try:'
1666      For: begin: 'block-error-catch'
1666    <-Source: begin: 'block-error-catch'
1666   <--Function: begin: 'block-error-catch'
1666  <---Source: begin: 'block-error-catch'
1666 <----Class: begin: 'block-error-catch'
1666<-----Source: begin: 'block-error-catch'
1666      For: line: 'i < len(opciones)'
1666    <-Source: line: 'i < len(opciones)'
1666   <--Function: line: 'i < len(opciones)'
1666  <---Source: line: 'i < len(opciones)'
1666 <----Class: line: 'i < len(opciones)'
1666<-----Source: line: 'i < len(opciones)'
1667      For: end: 'block-error-catch'
1667    <-Source: end: 'block-error-catch'
1667   <--Function: end: 'block-error-catch'
1667  <---Source: end: 'block-error-catch'
1667 <----Class: end: 'block-error-catch'
1667<-----Source: end: 'block-error-catch'
1667      For: line: 'except: break'
1667    <-Source: line: 'except: break'
1667   <--Function: line: 'except: break'
1667  <---Source: line: 'except: break'
1667 <----Class: line: 'except: break'
1667<-----Source: line: 'except: break'
1668      For: end: 'block-for'
1668    <-Source: end: 'block-for'
1668   <--Function: end: 'block-for'
1668  <---Source: end: 'block-for'
1668 <----Class: end: 'block-for'
1668<-----Source: end: 'block-for'
1668     For: end-gen
1668     If: begin-gen
1668      Value: begin-gen
1668       Member: begin-gen
1668        Identifier: begin-gen
1668         Identifier: expr: 'dialog'
1668        Identifier: end-gen
1668        FunctionCall: begin-gen
1668         FunctionCall: expr: 'exec_()'
1668        FunctionCall: end-gen
1668        Member: expr: 'dialog.exec_()'
1668      <-Value: expr: 'dialog.exec_()'
1668       Member: end-gen
1668      Value: end-gen
1668      If: line: 'if dialog.exec_():'
1668    <-Source: line: 'if dialog.exec_():'
1668   <--Function: line: 'if dialog.exec_():'
1668  <---Source: line: 'if dialog.exec_():'
1668 <----Class: line: 'if dialog.exec_():'
1668<-----Source: line: 'if dialog.exec_():'
1670      If: begin: 'block-if'
1670    <-Source: begin: 'block-if'
1670   <--Function: begin: 'block-if'
1670  <---Source: begin: 'block-if'
1670 <----Class: begin: 'block-if'
1670<-----Source: begin: 'block-if'
1670      Source: begin-gen
1670       For: begin-gen
1670        Variable: begin-gen
1670         Variable: expr: 'i'
1670         Variable: expr: '='
1670         Value: begin-gen
1670          Constant: begin-gen
1670           Constant: ctype: 'Number' -> '0'
1670           Constant: expr: '0'
1670         <-Value: expr: '0'
1670        <--Variable: expr: '0'
1670          Constant: end-gen
1670         Value: end-gen
1670        Variable: end-gen
1670        For: line: 'i = 0'
1670      <-Source: line: 'i = 0'
1670     <--If: line: 'i = 0'
1670    <---Source: line: 'i = 0'
1670   <----Function: line: 'i = 0'
1670  <-----Source: line: 'i = 0'
1670 <------Class: line: 'i = 0'
1670<-------Source: line: 'i = 0'
1671        For: line: 'while_pass = True'
1671      <-Source: line: 'while_pass = True'
1671     <--If: line: 'while_pass = True'
1671    <---Source: line: 'while_pass = True'
1671   <----Function: line: 'while_pass = True'
1671  <-----Source: line: 'while_pass = True'
1671 <------Class: line: 'while_pass = True'
1671<-------Source: line: 'while_pass = True'
1672        InlineUpdate: begin-gen
1672         Identifier: begin-gen
1672          Identifier: expr: 'i'
1672         Identifier: end-gen
1672         InlineUpdate: expr: 'i'
1672         InlineUpdate: line+1: 'i += 1'
1672        InlineUpdate: end-gen
1672        Expression: begin-gen
1672         Identifier: begin-gen
1672          Identifier: expr: 'i'
1672        <-Expression: expr: 'i'
1672         Identifier: end-gen
1672         Compare: begin-gen
1672          Compare: expr: '<'
1672        <-Expression: expr: '<'
1672         Compare: end-gen
1672         Member: begin-gen
1672          Identifier: begin-gen
1672           Identifier: expr: 'opciones'
1672          Identifier: end-gen
1672          Identifier: begin-gen
1672           Identifier: expr: 'length'
1672          Identifier: end-gen
1672          Member: expr: 'len(opciones)'
1672        <-Expression: expr: 'len(opciones)'
1672         Member: end-gen
1672        Expression: end-gen
1672        For: line: 'while i < len(opciones):'
1672      <-Source: line: 'while i < len(opciones):'
1672     <--If: line: 'while i < len(opciones):'
1672    <---Source: line: 'while i < len(opciones):'
1672   <----Function: line: 'while i < len(opciones):'
1672  <-----Source: line: 'while i < len(opciones):'
1672 <------Class: line: 'while i < len(opciones):'
1672<-------Source: line: 'while i < len(opciones):'
1673        For: begin: 'block-for'
1673      <-Source: begin: 'block-for'
1673     <--If: begin: 'block-for'
1673    <---Source: begin: 'block-for'
1673   <----Function: begin: 'block-for'
1673  <-----Source: begin: 'block-for'
1673 <------Class: begin: 'block-for'
1673<-------Source: begin: 'block-for'
1673        For: line: 'if not while_pass:'
1673      <-Source: line: 'if not while_pass:'
1673     <--If: line: 'if not while_pass:'
1673    <---Source: line: 'if not while_pass:'
1673   <----Function: line: 'if not while_pass:'
1673  <-----Source: line: 'if not while_pass:'
1673 <------Class: line: 'if not while_pass:'
1673<-------Source: line: 'if not while_pass:'
1674        For: begin: 'block-while_pass'
1674      <-Source: begin: 'block-while_pass'
1674     <--If: begin: 'block-while_pass'
1674    <---Source: begin: 'block-while_pass'
1674   <----Function: begin: 'block-while_pass'
1674  <-----Source: begin: 'block-while_pass'
1674 <------Class: begin: 'block-while_pass'
1674<-------Source: begin: 'block-while_pass'
1674        For: line: 'i += 1'
1674      <-Source: line: 'i += 1'
1674     <--If: line: 'i += 1'
1674    <---Source: line: 'i += 1'
1674   <----Function: line: 'i += 1'
1674  <-----Source: line: 'i += 1'
1674 <------Class: line: 'i += 1'
1674<-------Source: line: 'i += 1'
1675        For: line: 'while_pass = True'
1675      <-Source: line: 'while_pass = True'
1675     <--If: line: 'while_pass = True'
1675    <---Source: line: 'while_pass = True'
1675   <----Function: line: 'while_pass = True'
1675  <-----Source: line: 'while_pass = True'
1675 <------Class: line: 'while_pass = True'
1675<-------Source: line: 'while_pass = True'
1676        For: line: 'continue'
1676      <-Source: line: 'continue'
1676     <--If: line: 'continue'
1676    <---Source: line: 'continue'
1676   <----Function: line: 'continue'
1676  <-----Source: line: 'continue'
1676 <------Class: line: 'continue'
1676<-------Source: line: 'continue'
1677        For: end: 'block-while_pass'
1677      <-Source: end: 'block-while_pass'
1677     <--If: end: 'block-while_pass'
1677    <---Source: end: 'block-while_pass'
1677   <----Function: end: 'block-while_pass'
1677  <-----Source: end: 'block-while_pass'
1677 <------Class: end: 'block-while_pass'
1677<-------Source: end: 'block-while_pass'
1677        For: line: 'while_pass = False'
1677      <-Source: line: 'while_pass = False'
1677     <--If: line: 'while_pass = False'
1677    <---Source: line: 'while_pass = False'
1677   <----Function: line: 'while_pass = False'
1677  <-----Source: line: 'while_pass = False'
1677 <------Class: line: 'while_pass = False'
1677<-------Source: line: 'while_pass = False'
1678        Source: begin-gen
1678         If: begin-gen
1678          Expression: begin-gen
1678           Member: begin-gen
1678            ArrayMember: begin-gen
1678             Identifier: begin-gen
1678              Identifier: expr: 'rB'
1678             Identifier: end-gen
1678             Value: begin-gen
1678              Identifier: begin-gen
1678               Identifier: expr: 'i'
1678             <-Value: expr: 'i'
1678              Identifier: end-gen
1678             Value: end-gen
1678             ArrayMember: expr: 'rB[i]'
1678            ArrayMember: end-gen
1678            Identifier: begin-gen
1678             Identifier: expr: 'checked'
1678            Identifier: end-gen
1678            Member: expr: 'rB[i].checked'
1678          <-Expression: expr: 'rB[i].checked'
1678           Member: end-gen
1678           Compare: begin-gen
1678            Compare: expr: '=='
1678          <-Expression: expr: '=='
1678           Compare: end-gen
1678           Identifier: begin-gen
1678            Identifier: expr: 'True'
1678          <-Expression: expr: 'True'
1678           Identifier: end-gen
1678          Expression: end-gen
1678          If: line: 'if rB[i].checked == True:'
1678        <-Source: line: 'if rB[i].checked == True:'
1678       <--For: line: 'if rB[i].checked == True:'
1678      <---Source: line: 'if rB[i].checked == True:'
1678     <----If: line: 'if rB[i].checked == True:'
1678    <-----Source: line: 'if rB[i].checked == True:'
1678   <------Function: line: 'if rB[i].checked == True:'
1678  <-------Source: line: 'if rB[i].checked == True:'
1678 <--------Class: line: 'if rB[i].checked == True:'
1678<---------Source: line: 'if rB[i].checked == True:'
1679          If: begin: 'block-if'
1679        <-Source: begin: 'block-if'
1679       <--For: begin: 'block-if'
1679      <---Source: begin: 'block-if'
1679     <----If: begin: 'block-if'
1679    <-----Source: begin: 'block-if'
1679   <------Function: begin: 'block-if'
1679  <-------Source: begin: 'block-if'
1679 <--------Class: begin: 'block-if'
1679<---------Source: begin: 'block-if'
1679          Source: begin-gen
1679           InstructionFlow: begin-gen
1679            Value: begin-gen
1679             Identifier: begin-gen
1679              Identifier: expr: 'i'
1679            <-Value: expr: 'i'
1679             Identifier: end-gen
1679            Value: end-gen
1679            InstructionFlow: line: 'return i'
1679          <-Source: line: 'return i'
1679         <--If: line: 'return i'
1679        <---Source: line: 'return i'
1679       <----For: line: 'return i'
1679      <-----Source: line: 'return i'
1679     <------If: line: 'return i'
1679    <-------Source: line: 'return i'
1679   <--------Function: line: 'return i'
1679  <---------Source: line: 'return i'
1679 <----------Class: line: 'return i'
1679<-----------Source: line: 'return i'
1680           InstructionFlow: end-gen
1680          Source: end-gen
1680          If: end: 'block-if'
1680        <-Source: end: 'block-if'
1680       <--For: end: 'block-if'
1680      <---Source: end: 'block-if'
1680     <----If: end: 'block-if'
1680    <-----Source: end: 'block-if'
1680   <------Function: end: 'block-if'
1680  <-------Source: end: 'block-if'
1680 <--------Class: end: 'block-if'
1680<---------Source: end: 'block-if'
1680         If: end-gen
1680        Source: end-gen
1680        For: line: 'i += 1'
1680      <-Source: line: 'i += 1'
1680     <--If: line: 'i += 1'
1680    <---Source: line: 'i += 1'
1680   <----Function: line: 'i += 1'
1680  <-----Source: line: 'i += 1'
1680 <------Class: line: 'i += 1'
1680<-------Source: line: 'i += 1'
1681        For: line: 'while_pass = True'
1681      <-Source: line: 'while_pass = True'
1681     <--If: line: 'while_pass = True'
1681    <---Source: line: 'while_pass = True'
1681   <----Function: line: 'while_pass = True'
1681  <-----Source: line: 'while_pass = True'
1681 <------Class: line: 'while_pass = True'
1681<-------Source: line: 'while_pass = True'
1682        For: line: 'try:'
1682      <-Source: line: 'try:'
1682     <--If: line: 'try:'
1682    <---Source: line: 'try:'
1682   <----Function: line: 'try:'
1682  <-----Source: line: 'try:'
1682 <------Class: line: 'try:'
1682<-------Source: line: 'try:'
1683        For: begin: 'block-error-catch'
1683      <-Source: begin: 'block-error-catch'
1683     <--If: begin: 'block-error-catch'
1683    <---Source: begin: 'block-error-catch'
1683   <----Function: begin: 'block-error-catch'
1683  <-----Source: begin: 'block-error-catch'
1683 <------Class: begin: 'block-error-catch'
1683<-------Source: begin: 'block-error-catch'
1683        For: line: 'i < len(opciones)'
1683      <-Source: line: 'i < len(opciones)'
1683     <--If: line: 'i < len(opciones)'
1683    <---Source: line: 'i < len(opciones)'
1683   <----Function: line: 'i < len(opciones)'
1683  <-----Source: line: 'i < len(opciones)'
1683 <------Class: line: 'i < len(opciones)'
1683<-------Source: line: 'i < len(opciones)'
1684        For: end: 'block-error-catch'
1684      <-Source: end: 'block-error-catch'
1684     <--If: end: 'block-error-catch'
1684    <---Source: end: 'block-error-catch'
1684   <----Function: end: 'block-error-catch'
1684  <-----Source: end: 'block-error-catch'
1684 <------Class: end: 'block-error-catch'
1684<-------Source: end: 'block-error-catch'
1684        For: line: 'except: break'
1684      <-Source: line: 'except: break'
1684     <--If: line: 'except: break'
1684    <---Source: line: 'except: break'
1684   <----Function: line: 'except: break'
1684  <-----Source: line: 'except: break'
1684 <------Class: line: 'except: break'
1684<-------Source: line: 'except: break'
1685        For: end: 'block-for'
1685      <-Source: end: 'block-for'
1685     <--If: end: 'block-for'
1685    <---Source: end: 'block-for'
1685   <----Function: end: 'block-for'
1685  <-----Source: end: 'block-for'
1685 <------Class: end: 'block-for'
1685<-------Source: end: 'block-for'
1685       For: end-gen
1685      Source: end-gen
1685      If: end: 'block-if'
1685    <-Source: end: 'block-if'
1685   <--Function: end: 'block-if'
1685  <---Source: end: 'block-if'
1685 <----Class: end: 'block-if'
1685<-----Source: end: 'block-if'
1685      If: line: 'else:'
1685    <-Source: line: 'else:'
1685   <--Function: line: 'else:'
1685  <---Source: line: 'else:'
1685 <----Class: line: 'else:'
1685<-----Source: line: 'else:'
1687      If: begin: 'block-else'
1687    <-Source: begin: 'block-else'
1687   <--Function: begin: 'block-else'
1687  <---Source: begin: 'block-else'
1687 <----Class: begin: 'block-else'
1687<-----Source: begin: 'block-else'
1687      Source: begin-gen
1687       InstructionFlow: begin-gen
1687        Value: begin-gen
1687         OpUnary: begin-gen
1687          OpUnary: expr: '-'
1687        <-Value: expr: '-'
1687          Constant: begin-gen
1687           Constant: ctype: 'Number' -> '1'
1687           Constant: expr: '1'
1687         <-OpUnary: expr: '1'
1687        <--Value: expr: '1'
1687          Constant: end-gen
1687         OpUnary: end-gen
1687        Value: end-gen
1687        InstructionFlow: line: 'return - 1'
1687      <-Source: line: 'return - 1'
1687     <--If: line: 'return - 1'
1687    <---Source: line: 'return - 1'
1687   <----Function: line: 'return - 1'
1687  <-----Source: line: 'return - 1'
1687 <------Class: line: 'return - 1'
1687<-------Source: line: 'return - 1'
1688       InstructionFlow: end-gen
1688      Source: end-gen
1688      If: end: 'block-else'
1688    <-Source: end: 'block-else'
1688   <--Function: end: 'block-else'
1688  <---Source: end: 'block-else'
1688 <----Class: end: 'block-else'
1688<-----Source: end: 'block-else'
1689     If: end-gen
1689    Source: end-gen
1689    Function: end: 'block-def-oficial_elegirOpcion'
1689  <-Source: end: 'block-def-oficial_elegirOpcion'
1689 <--Class: end: 'block-def-oficial_elegirOpcion'
1689<---Source: end: 'block-def-oficial_elegirOpcion'
1690   Function: end-gen
1690   Function: begin-gen
1690    Variable: begin-gen
1690     Variable: expr: 'fecha'
1690    Variable: end-gen
1690    Function: line: 'def oficial_textoFecha(self, fecha = None):'
1690  <-Source: line: 'def oficial_textoFecha(self, fecha = None):'
1690 <--Class: line: 'def oficial_textoFecha(self, fecha = None):'
1690<---Source: line: 'def oficial_textoFecha(self, fecha = None):'
1691    Function: begin: 'block-def-oficial_textoFecha'
1691  <-Source: begin: 'block-def-oficial_textoFecha'
1691 <--Class: begin: 'block-def-oficial_textoFecha'
1691<---Source: begin: 'block-def-oficial_textoFecha'
1691    Source: begin-gen
1691     DeclarationBlock: begin-gen
1691      Variable: begin-gen
1691       Variable: expr: 'util'
1691       Variable: expr: '='
1691       Variable: expr: 'qsatype.FLUtil()'
1691      Variable: end-gen
1691      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1691    <-Source: line: 'util = qsatype.FLUtil()'
1691   <--Function: line: 'util = qsatype.FLUtil()'
1691  <---Source: line: 'util = qsatype.FLUtil()'
1691 <----Class: line: 'util = qsatype.FLUtil()'
1691<-----Source: line: 'util = qsatype.FLUtil()'
1692     DeclarationBlock: end-gen
1692     If: begin-gen
1692      Expression: begin-gen
1692       OpUnary: begin-gen
1692        OpUnary: expr: 'not'
1692      <-Expression: expr: 'not'
1692        Identifier: begin-gen
1692         Identifier: expr: 'fecha'
1692       <-OpUnary: expr: 'fecha'
1692      <--Expression: expr: 'fecha'
1692        Identifier: end-gen
1692       OpUnary: end-gen
1692       Compare: begin-gen
1692        Compare: expr: 'or'
1692      <-Expression: expr: 'or'
1692       Compare: end-gen
1692       Identifier: begin-gen
1692        Identifier: expr: 'fecha'
1692      <-Expression: expr: 'fecha'
1692       Identifier: end-gen
1692       Compare: begin-gen
1692        Compare: expr: '=='
1692      <-Expression: expr: '=='
1692       Compare: end-gen
1692       Constant: begin-gen
1692        Constant: ctype: 'String' -> ''
1692        Constant: expr: 'u""'
1692      <-Expression: expr: 'u""'
1692       Constant: end-gen
1692      Expression: end-gen
1692      If: line: 'if not fecha or fecha == u"":'
1692    <-Source: line: 'if not fecha or fecha == u"":'
1692   <--Function: line: 'if not fecha or fecha == u"":'
1692  <---Source: line: 'if not fecha or fecha == u"":'
1692 <----Class: line: 'if not fecha or fecha == u"":'
1692<-----Source: line: 'if not fecha or fecha == u"":'
1693      If: begin: 'block-if'
1693    <-Source: begin: 'block-if'
1693   <--Function: begin: 'block-if'
1693  <---Source: begin: 'block-if'
1693 <----Class: begin: 'block-if'
1693<-----Source: begin: 'block-if'
1693      Source: begin-gen
1693       InstructionFlow: begin-gen
1693        Value: begin-gen
1693         Constant: begin-gen
1693          Constant: ctype: 'String' -> ''
1693          Constant: expr: 'u""'
1693        <-Value: expr: 'u""'
1693         Constant: end-gen
1693        Value: end-gen
1693        InstructionFlow: line: 'return u""'
1693      <-Source: line: 'return u""'
1693     <--If: line: 'return u""'
1693    <---Source: line: 'return u""'
1693   <----Function: line: 'return u""'
1693  <-----Source: line: 'return u""'
1693 <------Class: line: 'return u""'
1693<-------Source: line: 'return u""'
1694       InstructionFlow: end-gen
1694      Source: end-gen
1694      If: end: 'block-if'
1694    <-Source: end: 'block-if'
1694   <--Function: end: 'block-if'
1694  <---Source: end: 'block-if'
1694 <----Class: end: 'block-if'
1694<-----Source: end: 'block-if'
1694     If: end-gen
1694     DeclarationBlock: begin-gen
1694      Variable: begin-gen
1694       Variable: expr: 'mes'
1694       Variable: expr: '='
1694       Value: begin-gen
1694        Member: begin-gen
1694         Identifier: begin-gen
1694          Identifier: expr: 'fecha'
1694         Identifier: end-gen
1694         FunctionCall: begin-gen
1694          Value: begin-gen
1694           Constant: begin-gen
1694            Constant: ctype: 'Number' -> '5'
1694            Constant: expr: '5'
1694          <-Value: expr: '5'
1694           Constant: end-gen
1694          Value: end-gen
1694          Value: begin-gen
1694           Constant: begin-gen
1694            Constant: ctype: 'Number' -> '2'
1694            Constant: expr: '2'
1694          <-Value: expr: '2'
1694           Constant: end-gen
1694          Value: end-gen
1694          FunctionCall: expr: 'mid(5, 2)'
1694         FunctionCall: end-gen
1694         Member: expr: 'fecha[5:5 +  2]'
1694       <-Value: expr: 'fecha[5:5 +  2]'
1694      <--Variable: expr: 'fecha[5:5 +  2]'
1694        Member: end-gen
1694       Value: end-gen
1694      Variable: end-gen
1694      DeclarationBlock: line: 'mes = fecha[5:5 +  2]'
1694    <-Source: line: 'mes = fecha[5:5 +  2]'
1694   <--Function: line: 'mes = fecha[5:5 +  2]'
1694  <---Source: line: 'mes = fecha[5:5 +  2]'
1694 <----Class: line: 'mes = fecha[5:5 +  2]'
1694<-----Source: line: 'mes = fecha[5:5 +  2]'
1695     DeclarationBlock: end-gen
1695     DeclarationBlock: begin-gen
1695      Variable: begin-gen
1695       Variable: expr: 'textoMes'
1695       Variable: expr: '='
1695       Variable: expr: '""'
1695      Variable: end-gen
1695      DeclarationBlock: line: 'textoMes = ""'
1695    <-Source: line: 'textoMes = ""'
1695   <--Function: line: 'textoMes = ""'
1695  <---Source: line: 'textoMes = ""'
1695 <----Class: line: 'textoMes = ""'
1695<-----Source: line: 'textoMes = ""'
1696     DeclarationBlock: end-gen
1696     Switch: begin-gen
1696      Value: begin-gen
1696       Identifier: begin-gen
1696        Identifier: expr: 'mes'
1696      <-Value: expr: 'mes'
1696       Identifier: end-gen
1696      Value: end-gen
1696      Switch: line: 'sd4_when = mes'
1696    <-Source: line: 'sd4_when = mes'
1696   <--Function: line: 'sd4_when = mes'
1696  <---Source: line: 'sd4_when = mes'
1696 <----Class: line: 'sd4_when = mes'
1696<-----Source: line: 'sd4_when = mes'
1697      Switch: line: 'sd4_do_work,sd4_work_done = False,False'
1697    <-Source: line: 'sd4_do_work,sd4_work_done = False,False'
1697   <--Function: line: 'sd4_do_work,sd4_work_done = False,False'
1697  <---Source: line: 'sd4_do_work,sd4_work_done = False,False'
1697 <----Class: line: 'sd4_do_work,sd4_work_done = False,False'
1697<-----Source: line: 'sd4_do_work,sd4_work_done = False,False'
1698      Value: begin-gen
1698       Constant: begin-gen
1698        Constant: ctype: 'String' -> '01'
1698        Constant: expr: 'u"01"'
1698      <-Value: expr: 'u"01"'
1698       Constant: end-gen
1698      Value: end-gen
1698      Switch: line: 'if sd4_when == u"01": sd4_do_work,sd4_work_done = True,True'
1698    <-Source: line: 'if sd4_when == u"01": sd4_do_work,sd4_work_done = True,True'
1698   <--Function: line: 'if sd4_when == u"01": sd4_do_work,sd4_work_done = True,True'
1698  <---Source: line: 'if sd4_when == u"01": sd4_do_work,sd4_work_done = True,True'
1698 <----Class: line: 'if sd4_when == u"01": sd4_do_work,sd4_work_done = True,True'
1698<-----Source: line: 'if sd4_when == u"01": sd4_do_work,sd4_work_done = True,True'
1699      Switch: line: 'if sd4_do_work:'
1699    <-Source: line: 'if sd4_do_work:'
1699   <--Function: line: 'if sd4_do_work:'
1699  <---Source: line: 'if sd4_do_work:'
1699 <----Class: line: 'if sd4_do_work:'
1699<-----Source: line: 'if sd4_do_work:'
1700      Switch: begin: 'block-if'
1700    <-Source: begin: 'block-if'
1700   <--Function: begin: 'block-if'
1700  <---Source: begin: 'block-if'
1700 <----Class: begin: 'block-if'
1700<-----Source: begin: 'block-if'
1700      Source: begin-gen
1700       InstructionUpdate: begin-gen
1700        Identifier: begin-gen
1700         Identifier: expr: 'textoMes'
1700        Identifier: end-gen
1700        OpUpdate: begin-gen
1700         OpUpdate: expr: '='
1700        OpUpdate: end-gen
1700        Value: begin-gen
1700         Member: begin-gen
1700          Identifier: begin-gen
1700           Identifier: expr: 'util'
1700          Identifier: end-gen
1700          FunctionCall: begin-gen
1700           Value: begin-gen
1700            Constant: begin-gen
1700             Constant: ctype: 'String' -> 'scripts'
1700             Constant: expr: 'u"scripts"'
1700           <-Value: expr: 'u"scripts"'
1700            Constant: end-gen
1700           Value: end-gen
1700           Value: begin-gen
1700            Constant: begin-gen
1700             Constant: ctype: 'String' -> 'Enero'
1700             Constant: expr: 'u"Enero"'
1700           <-Value: expr: 'u"Enero"'
1700            Constant: end-gen
1700           Value: end-gen
1700           FunctionCall: expr: 'translate(u"scripts", u"Enero")'
1700          FunctionCall: end-gen
1700          Member: expr: 'util.translate(u"scripts", u"Enero")'
1700        <-Value: expr: 'util.translate(u"scripts", u"Enero")'
1700         Member: end-gen
1700        Value: end-gen
1700        InstructionUpdate: line: 'textoMes = util.translate(u"scripts", u"Enero")'
1700      <-Source: line: 'textoMes = util.translate(u"scripts", u"Enero")'
1700     <--Switch: line: 'textoMes = util.translate(u"scripts", u"Enero")'
1700    <---Source: line: 'textoMes = util.translate(u"scripts", u"Enero")'
1700   <----Function: line: 'textoMes = util.translate(u"scripts", u"Enero")'
1700  <-----Source: line: 'textoMes = util.translate(u"scripts", u"Enero")'
1700 <------Class: line: 'textoMes = util.translate(u"scripts", u"Enero")'
1700<-------Source: line: 'textoMes = util.translate(u"scripts", u"Enero")'
1701       InstructionUpdate: end-gen
1701       InstructionFlow: begin-gen
1701        InstructionFlow: break: 'break '
1701      <-Source: break: 'break '
1701     <--Switch: line: 'sd4_do_work = False # BREAK'
1701    <---Source: line: 'sd4_do_work = False # BREAK'
1701   <----Function: line: 'sd4_do_work = False # BREAK'
1701  <-----Source: line: 'sd4_do_work = False # BREAK'
1701 <------Class: line: 'sd4_do_work = False # BREAK'
1701<-------Source: line: 'sd4_do_work = False # BREAK'
1702       InstructionFlow: end-gen
1702      Source: end-gen
1702      Switch: end: 'block-if'
1702    <-Source: end: 'block-if'
1702   <--Function: end: 'block-if'
1702  <---Source: end: 'block-if'
1702 <----Class: end: 'block-if'
1702<-----Source: end: 'block-if'
1702      Value: begin-gen
1702       Constant: begin-gen
1702        Constant: ctype: 'String' -> '02'
1702        Constant: expr: 'u"02"'
1702      <-Value: expr: 'u"02"'
1702       Constant: end-gen
1702      Value: end-gen
1702      Switch: line: 'if sd4_when == u"02": sd4_do_work,sd4_work_done = True,True'
1702    <-Source: line: 'if sd4_when == u"02": sd4_do_work,sd4_work_done = True,True'
1702   <--Function: line: 'if sd4_when == u"02": sd4_do_work,sd4_work_done = True,True'
1702  <---Source: line: 'if sd4_when == u"02": sd4_do_work,sd4_work_done = True,True'
1702 <----Class: line: 'if sd4_when == u"02": sd4_do_work,sd4_work_done = True,True'
1702<-----Source: line: 'if sd4_when == u"02": sd4_do_work,sd4_work_done = True,True'
1703      Switch: line: 'if sd4_do_work:'
1703    <-Source: line: 'if sd4_do_work:'
1703   <--Function: line: 'if sd4_do_work:'
1703  <---Source: line: 'if sd4_do_work:'
1703 <----Class: line: 'if sd4_do_work:'
1703<-----Source: line: 'if sd4_do_work:'
1704      Switch: begin: 'block-if'
1704    <-Source: begin: 'block-if'
1704   <--Function: begin: 'block-if'
1704  <---Source: begin: 'block-if'
1704 <----Class: begin: 'block-if'
1704<-----Source: begin: 'block-if'
1704      Source: begin-gen
1704       InstructionUpdate: begin-gen
1704        Identifier: begin-gen
1704         Identifier: expr: 'textoMes'
1704        Identifier: end-gen
1704        OpUpdate: begin-gen
1704         OpUpdate: expr: '='
1704        OpUpdate: end-gen
1704        Value: begin-gen
1704         Member: begin-gen
1704          Identifier: begin-gen
1704           Identifier: expr: 'util'
1704          Identifier: end-gen
1704          FunctionCall: begin-gen
1704           Value: begin-gen
1704            Constant: begin-gen
1704             Constant: ctype: 'String' -> 'scripts'
1704             Constant: expr: 'u"scripts"'
1704           <-Value: expr: 'u"scripts"'
1704            Constant: end-gen
1704           Value: end-gen
1704           Value: begin-gen
1704            Constant: begin-gen
1704             Constant: ctype: 'String' -> 'Febrero'
1704             Constant: expr: 'u"Febrero"'
1704           <-Value: expr: 'u"Febrero"'
1704            Constant: end-gen
1704           Value: end-gen
1704           FunctionCall: expr: 'translate(u"scripts", u"Febrero")'
1704          FunctionCall: end-gen
1704          Member: expr: 'util.translate(u"scripts", u"Febrero")'
1704        <-Value: expr: 'util.translate(u"scripts", u"Febrero")'
1704         Member: end-gen
1704        Value: end-gen
1704        InstructionUpdate: line: 'textoMes = util.translate(u"scripts", u"Febrero")'
1704      <-Source: line: 'textoMes = util.translate(u"scripts", u"Febrero")'
1704     <--Switch: line: 'textoMes = util.translate(u"scripts", u"Febrero")'
1704    <---Source: line: 'textoMes = util.translate(u"scripts", u"Febrero")'
1704   <----Function: line: 'textoMes = util.translate(u"scripts", u"Febrero")'
1704  <-----Source: line: 'textoMes = util.translate(u"scripts", u"Febrero")'
1704 <------Class: line: 'textoMes = util.translate(u"scripts", u"Febrero")'
1704<-------Source: line: 'textoMes = util.translate(u"scripts", u"Febrero")'
1705       InstructionUpdate: end-gen
1705       InstructionFlow: begin-gen
1705        InstructionFlow: break: 'break '
1705      <-Source: break: 'break '
1705     <--Switch: line: 'sd4_do_work = False # BREAK'
1705    <---Source: line: 'sd4_do_work = False # BREAK'
1705   <----Function: line: 'sd4_do_work = False # BREAK'
1705  <-----Source: line: 'sd4_do_work = False # BREAK'
1705 <------Class: line: 'sd4_do_work = False # BREAK'
1705<-------Source: line: 'sd4_do_work = False # BREAK'
1706       InstructionFlow: end-gen
1706      Source: end-gen
1706      Switch: end: 'block-if'
1706    <-Source: end: 'block-if'
1706   <--Function: end: 'block-if'
1706  <---Source: end: 'block-if'
1706 <----Class: end: 'block-if'
1706<-----Source: end: 'block-if'
1706      Value: begin-gen
1706       Constant: begin-gen
1706        Constant: ctype: 'String' -> '03'
1706        Constant: expr: 'u"03"'
1706      <-Value: expr: 'u"03"'
1706       Constant: end-gen
1706      Value: end-gen
1706      Switch: line: 'if sd4_when == u"03": sd4_do_work,sd4_work_done = True,True'
1706    <-Source: line: 'if sd4_when == u"03": sd4_do_work,sd4_work_done = True,True'
1706   <--Function: line: 'if sd4_when == u"03": sd4_do_work,sd4_work_done = True,True'
1706  <---Source: line: 'if sd4_when == u"03": sd4_do_work,sd4_work_done = True,True'
1706 <----Class: line: 'if sd4_when == u"03": sd4_do_work,sd4_work_done = True,True'
1706<-----Source: line: 'if sd4_when == u"03": sd4_do_work,sd4_work_done = True,True'
1707      Switch: line: 'if sd4_do_work:'
1707    <-Source: line: 'if sd4_do_work:'
1707   <--Function: line: 'if sd4_do_work:'
1707  <---Source: line: 'if sd4_do_work:'
1707 <----Class: line: 'if sd4_do_work:'
1707<-----Source: line: 'if sd4_do_work:'
1708      Switch: begin: 'block-if'
1708    <-Source: begin: 'block-if'
1708   <--Function: begin: 'block-if'
1708  <---Source: begin: 'block-if'
1708 <----Class: begin: 'block-if'
1708<-----Source: begin: 'block-if'
1708      Source: begin-gen
1708       InstructionUpdate: begin-gen
1708        Identifier: begin-gen
1708         Identifier: expr: 'textoMes'
1708        Identifier: end-gen
1708        OpUpdate: begin-gen
1708         OpUpdate: expr: '='
1708        OpUpdate: end-gen
1708        Value: begin-gen
1708         Member: begin-gen
1708          Identifier: begin-gen
1708           Identifier: expr: 'util'
1708          Identifier: end-gen
1708          FunctionCall: begin-gen
1708           Value: begin-gen
1708            Constant: begin-gen
1708             Constant: ctype: 'String' -> 'scripts'
1708             Constant: expr: 'u"scripts"'
1708           <-Value: expr: 'u"scripts"'
1708            Constant: end-gen
1708           Value: end-gen
1708           Value: begin-gen
1708            Constant: begin-gen
1708             Constant: ctype: 'String' -> 'Marzo'
1708             Constant: expr: 'u"Marzo"'
1708           <-Value: expr: 'u"Marzo"'
1708            Constant: end-gen
1708           Value: end-gen
1708           FunctionCall: expr: 'translate(u"scripts", u"Marzo")'
1708          FunctionCall: end-gen
1708          Member: expr: 'util.translate(u"scripts", u"Marzo")'
1708        <-Value: expr: 'util.translate(u"scripts", u"Marzo")'
1708         Member: end-gen
1708        Value: end-gen
1708        InstructionUpdate: line: 'textoMes = util.translate(u"scripts", u"Marzo")'
1708      <-Source: line: 'textoMes = util.translate(u"scripts", u"Marzo")'
1708     <--Switch: line: 'textoMes = util.translate(u"scripts", u"Marzo")'
1708    <---Source: line: 'textoMes = util.translate(u"scripts", u"Marzo")'
1708   <----Function: line: 'textoMes = util.translate(u"scripts", u"Marzo")'
1708  <-----Source: line: 'textoMes = util.translate(u"scripts", u"Marzo")'
1708 <------Class: line: 'textoMes = util.translate(u"scripts", u"Marzo")'
1708<-------Source: line: 'textoMes = util.translate(u"scripts", u"Marzo")'
1709       InstructionUpdate: end-gen
1709       InstructionFlow: begin-gen
1709        InstructionFlow: break: 'break '
1709      <-Source: break: 'break '
1709     <--Switch: line: 'sd4_do_work = False # BREAK'
1709    <---Source: line: 'sd4_do_work = False # BREAK'
1709   <----Function: line: 'sd4_do_work = False # BREAK'
1709  <-----Source: line: 'sd4_do_work = False # BREAK'
1709 <------Class: line: 'sd4_do_work = False # BREAK'
1709<-------Source: line: 'sd4_do_work = False # BREAK'
1710       InstructionFlow: end-gen
1710      Source: end-gen
1710      Switch: end: 'block-if'
1710    <-Source: end: 'block-if'
1710   <--Function: end: 'block-if'
1710  <---Source: end: 'block-if'
1710 <----Class: end: 'block-if'
1710<-----Source: end: 'block-if'
1710      Value: begin-gen
1710       Constant: begin-gen
1710        Constant: ctype: 'String' -> '04'
1710        Constant: expr: 'u"04"'
1710      <-Value: expr: 'u"04"'
1710       Constant: end-gen
1710      Value: end-gen
1710      Switch: line: 'if sd4_when == u"04": sd4_do_work,sd4_work_done = True,True'
1710    <-Source: line: 'if sd4_when == u"04": sd4_do_work,sd4_work_done = True,True'
1710   <--Function: line: 'if sd4_when == u"04": sd4_do_work,sd4_work_done = True,True'
1710  <---Source: line: 'if sd4_when == u"04": sd4_do_work,sd4_work_done = True,True'
1710 <----Class: line: 'if sd4_when == u"04": sd4_do_work,sd4_work_done = True,True'
1710<-----Source: line: 'if sd4_when == u"04": sd4_do_work,sd4_work_done = True,True'
1711      Switch: line: 'if sd4_do_work:'
1711    <-Source: line: 'if sd4_do_work:'
1711   <--Function: line: 'if sd4_do_work:'
1711  <---Source: line: 'if sd4_do_work:'
1711 <----Class: line: 'if sd4_do_work:'
1711<-----Source: line: 'if sd4_do_work:'
1712      Switch: begin: 'block-if'
1712    <-Source: begin: 'block-if'
1712   <--Function: begin: 'block-if'
1712  <---Source: begin: 'block-if'
1712 <----Class: begin: 'block-if'
1712<-----Source: begin: 'block-if'
1712      Source: begin-gen
1712       InstructionUpdate: begin-gen
1712        Identifier: begin-gen
1712         Identifier: expr: 'textoMes'
1712        Identifier: end-gen
1712        OpUpdate: begin-gen
1712         OpUpdate: expr: '='
1712        OpUpdate: end-gen
1712        Value: begin-gen
1712         Member: begin-gen
1712          Identifier: begin-gen
1712           Identifier: expr: 'util'
1712          Identifier: end-gen
1712          FunctionCall: begin-gen
1712           Value: begin-gen
1712            Constant: begin-gen
1712             Constant: ctype: 'String' -> 'scripts'
1712             Constant: expr: 'u"scripts"'
1712           <-Value: expr: 'u"scripts"'
1712            Constant: end-gen
1712           Value: end-gen
1712           Value: begin-gen
1712            Constant: begin-gen
1712             Constant: ctype: 'String' -> 'Abril'
1712             Constant: expr: 'u"Abril"'
1712           <-Value: expr: 'u"Abril"'
1712            Constant: end-gen
1712           Value: end-gen
1712           FunctionCall: expr: 'translate(u"scripts", u"Abril")'
1712          FunctionCall: end-gen
1712          Member: expr: 'util.translate(u"scripts", u"Abril")'
1712        <-Value: expr: 'util.translate(u"scripts", u"Abril")'
1712         Member: end-gen
1712        Value: end-gen
1712        InstructionUpdate: line: 'textoMes = util.translate(u"scripts", u"Abril")'
1712      <-Source: line: 'textoMes = util.translate(u"scripts", u"Abril")'
1712     <--Switch: line: 'textoMes = util.translate(u"scripts", u"Abril")'
1712    <---Source: line: 'textoMes = util.translate(u"scripts", u"Abril")'
1712   <----Function: line: 'textoMes = util.translate(u"scripts", u"Abril")'
1712  <-----Source: line: 'textoMes = util.translate(u"scripts", u"Abril")'
1712 <------Class: line: 'textoMes = util.translate(u"scripts", u"Abril")'
1712<-------Source: line: 'textoMes = util.translate(u"scripts", u"Abril")'
1713       InstructionUpdate: end-gen
1713       InstructionFlow: begin-gen
1713        InstructionFlow: break: 'break '
1713      <-Source: break: 'break '
1713     <--Switch: line: 'sd4_do_work = False # BREAK'
1713    <---Source: line: 'sd4_do_work = False # BREAK'
1713   <----Function: line: 'sd4_do_work = False # BREAK'
1713  <-----Source: line: 'sd4_do_work = False # BREAK'
1713 <------Class: line: 'sd4_do_work = False # BREAK'
1713<-------Source: line: 'sd4_do_work = False # BREAK'
1714       InstructionFlow: end-gen
1714      Source: end-gen
1714      Switch: end: 'block-if'
1714    <-Source: end: 'block-if'
1714   <--Function: end: 'block-if'
1714  <---Source: end: 'block-if'
1714 <----Class: end: 'block-if'
1714<-----Source: end: 'block-if'
1714      Value: begin-gen
1714       Constant: begin-gen
1714        Constant: ctype: 'String' -> '05'
1714        Constant: expr: 'u"05"'
1714      <-Value: expr: 'u"05"'
1714       Constant: end-gen
1714      Value: end-gen
1714      Switch: line: 'if sd4_when == u"05": sd4_do_work,sd4_work_done = True,True'
1714    <-Source: line: 'if sd4_when == u"05": sd4_do_work,sd4_work_done = True,True'
1714   <--Function: line: 'if sd4_when == u"05": sd4_do_work,sd4_work_done = True,True'
1714  <---Source: line: 'if sd4_when == u"05": sd4_do_work,sd4_work_done = True,True'
1714 <----Class: line: 'if sd4_when == u"05": sd4_do_work,sd4_work_done = True,True'
1714<-----Source: line: 'if sd4_when == u"05": sd4_do_work,sd4_work_done = True,True'
1715      Switch: line: 'if sd4_do_work:'
1715    <-Source: line: 'if sd4_do_work:'
1715   <--Function: line: 'if sd4_do_work:'
1715  <---Source: line: 'if sd4_do_work:'
1715 <----Class: line: 'if sd4_do_work:'
1715<-----Source: line: 'if sd4_do_work:'
1716      Switch: begin: 'block-if'
1716    <-Source: begin: 'block-if'
1716   <--Function: begin: 'block-if'
1716  <---Source: begin: 'block-if'
1716 <----Class: begin: 'block-if'
1716<-----Source: begin: 'block-if'
1716      Source: begin-gen
1716       InstructionUpdate: begin-gen
1716        Identifier: begin-gen
1716         Identifier: expr: 'textoMes'
1716        Identifier: end-gen
1716        OpUpdate: begin-gen
1716         OpUpdate: expr: '='
1716        OpUpdate: end-gen
1716        Value: begin-gen
1716         Member: begin-gen
1716          Identifier: begin-gen
1716           Identifier: expr: 'util'
1716          Identifier: end-gen
1716          FunctionCall: begin-gen
1716           Value: begin-gen
1716            Constant: begin-gen
1716             Constant: ctype: 'String' -> 'scripts'
1716             Constant: expr: 'u"scripts"'
1716           <-Value: expr: 'u"scripts"'
1716            Constant: end-gen
1716           Value: end-gen
1716           Value: begin-gen
1716            Constant: begin-gen
1716             Constant: ctype: 'String' -> 'Mayo'
1716             Constant: expr: 'u"Mayo"'
1716           <-Value: expr: 'u"Mayo"'
1716            Constant: end-gen
1716           Value: end-gen
1716           FunctionCall: expr: 'translate(u"scripts", u"Mayo")'
1716          FunctionCall: end-gen
1716          Member: expr: 'util.translate(u"scripts", u"Mayo")'
1716        <-Value: expr: 'util.translate(u"scripts", u"Mayo")'
1716         Member: end-gen
1716        Value: end-gen
1716        InstructionUpdate: line: 'textoMes = util.translate(u"scripts", u"Mayo")'
1716      <-Source: line: 'textoMes = util.translate(u"scripts", u"Mayo")'
1716     <--Switch: line: 'textoMes = util.translate(u"scripts", u"Mayo")'
1716    <---Source: line: 'textoMes = util.translate(u"scripts", u"Mayo")'
1716   <----Function: line: 'textoMes = util.translate(u"scripts", u"Mayo")'
1716  <-----Source: line: 'textoMes = util.translate(u"scripts", u"Mayo")'
1716 <------Class: line: 'textoMes = util.translate(u"scripts", u"Mayo")'
1716<-------Source: line: 'textoMes = util.translate(u"scripts", u"Mayo")'
1717       InstructionUpdate: end-gen
1717       InstructionFlow: begin-gen
1717        InstructionFlow: break: 'break '
1717      <-Source: break: 'break '
1717     <--Switch: line: 'sd4_do_work = False # BREAK'
1717    <---Source: line: 'sd4_do_work = False # BREAK'
1717   <----Function: line: 'sd4_do_work = False # BREAK'
1717  <-----Source: line: 'sd4_do_work = False # BREAK'
1717 <------Class: line: 'sd4_do_work = False # BREAK'
1717<-------Source: line: 'sd4_do_work = False # BREAK'
1718       InstructionFlow: end-gen
1718      Source: end-gen
1718      Switch: end: 'block-if'
1718    <-Source: end: 'block-if'
1718   <--Function: end: 'block-if'
1718  <---Source: end: 'block-if'
1718 <----Class: end: 'block-if'
1718<-----Source: end: 'block-if'
1718      Value: begin-gen
1718       Constant: begin-gen
1718        Constant: ctype: 'String' -> '06'
1718        Constant: expr: 'u"06"'
1718      <-Value: expr: 'u"06"'
1718       Constant: end-gen
1718      Value: end-gen
1718      Switch: line: 'if sd4_when == u"06": sd4_do_work,sd4_work_done = True,True'
1718    <-Source: line: 'if sd4_when == u"06": sd4_do_work,sd4_work_done = True,True'
1718   <--Function: line: 'if sd4_when == u"06": sd4_do_work,sd4_work_done = True,True'
1718  <---Source: line: 'if sd4_when == u"06": sd4_do_work,sd4_work_done = True,True'
1718 <----Class: line: 'if sd4_when == u"06": sd4_do_work,sd4_work_done = True,True'
1718<-----Source: line: 'if sd4_when == u"06": sd4_do_work,sd4_work_done = True,True'
1719      Switch: line: 'if sd4_do_work:'
1719    <-Source: line: 'if sd4_do_work:'
1719   <--Function: line: 'if sd4_do_work:'
1719  <---Source: line: 'if sd4_do_work:'
1719 <----Class: line: 'if sd4_do_work:'
1719<-----Source: line: 'if sd4_do_work:'
1720      Switch: begin: 'block-if'
1720    <-Source: begin: 'block-if'
1720   <--Function: begin: 'block-if'
1720  <---Source: begin: 'block-if'
1720 <----Class: begin: 'block-if'
1720<-----Source: begin: 'block-if'
1720      Source: begin-gen
1720       InstructionUpdate: begin-gen
1720        Identifier: begin-gen
1720         Identifier: expr: 'textoMes'
1720        Identifier: end-gen
1720        OpUpdate: begin-gen
1720         OpUpdate: expr: '='
1720        OpUpdate: end-gen
1720        Value: begin-gen
1720         Member: begin-gen
1720          Identifier: begin-gen
1720           Identifier: expr: 'util'
1720          Identifier: end-gen
1720          FunctionCall: begin-gen
1720           Value: begin-gen
1720            Constant: begin-gen
1720             Constant: ctype: 'String' -> 'scripts'
1720             Constant: expr: 'u"scripts"'
1720           <-Value: expr: 'u"scripts"'
1720            Constant: end-gen
1720           Value: end-gen
1720           Value: begin-gen
1720            Constant: begin-gen
1720             Constant: ctype: 'String' -> 'Junio'
1720             Constant: expr: 'u"Junio"'
1720           <-Value: expr: 'u"Junio"'
1720            Constant: end-gen
1720           Value: end-gen
1720           FunctionCall: expr: 'translate(u"scripts", u"Junio")'
1720          FunctionCall: end-gen
1720          Member: expr: 'util.translate(u"scripts", u"Junio")'
1720        <-Value: expr: 'util.translate(u"scripts", u"Junio")'
1720         Member: end-gen
1720        Value: end-gen
1720        InstructionUpdate: line: 'textoMes = util.translate(u"scripts", u"Junio")'
1720      <-Source: line: 'textoMes = util.translate(u"scripts", u"Junio")'
1720     <--Switch: line: 'textoMes = util.translate(u"scripts", u"Junio")'
1720    <---Source: line: 'textoMes = util.translate(u"scripts", u"Junio")'
1720   <----Function: line: 'textoMes = util.translate(u"scripts", u"Junio")'
1720  <-----Source: line: 'textoMes = util.translate(u"scripts", u"Junio")'
1720 <------Class: line: 'textoMes = util.translate(u"scripts", u"Junio")'
1720<-------Source: line: 'textoMes = util.translate(u"scripts", u"Junio")'
1721       InstructionUpdate: end-gen
1721       InstructionFlow: begin-gen
1721        InstructionFlow: break: 'break '
1721      <-Source: break: 'break '
1721     <--Switch: line: 'sd4_do_work = False # BREAK'
1721    <---Source: line: 'sd4_do_work = False # BREAK'
1721   <----Function: line: 'sd4_do_work = False # BREAK'
1721  <-----Source: line: 'sd4_do_work = False # BREAK'
1721 <------Class: line: 'sd4_do_work = False # BREAK'
1721<-------Source: line: 'sd4_do_work = False # BREAK'
1722       InstructionFlow: end-gen
1722      Source: end-gen
1722      Switch: end: 'block-if'
1722    <-Source: end: 'block-if'
1722   <--Function: end: 'block-if'
1722  <---Source: end: 'block-if'
1722 <----Class: end: 'block-if'
1722<-----Source: end: 'block-if'
1722      Value: begin-gen
1722       Constant: begin-gen
1722        Constant: ctype: 'String' -> '07'
1722        Constant: expr: 'u"07"'
1722      <-Value: expr: 'u"07"'
1722       Constant: end-gen
1722      Value: end-gen
1722      Switch: line: 'if sd4_when == u"07": sd4_do_work,sd4_work_done = True,True'
1722    <-Source: line: 'if sd4_when == u"07": sd4_do_work,sd4_work_done = True,True'
1722   <--Function: line: 'if sd4_when == u"07": sd4_do_work,sd4_work_done = True,True'
1722  <---Source: line: 'if sd4_when == u"07": sd4_do_work,sd4_work_done = True,True'
1722 <----Class: line: 'if sd4_when == u"07": sd4_do_work,sd4_work_done = True,True'
1722<-----Source: line: 'if sd4_when == u"07": sd4_do_work,sd4_work_done = True,True'
1723      Switch: line: 'if sd4_do_work:'
1723    <-Source: line: 'if sd4_do_work:'
1723   <--Function: line: 'if sd4_do_work:'
1723  <---Source: line: 'if sd4_do_work:'
1723 <----Class: line: 'if sd4_do_work:'
1723<-----Source: line: 'if sd4_do_work:'
1724      Switch: begin: 'block-if'
1724    <-Source: begin: 'block-if'
1724   <--Function: begin: 'block-if'
1724  <---Source: begin: 'block-if'
1724 <----Class: begin: 'block-if'
1724<-----Source: begin: 'block-if'
1724      Source: begin-gen
1724       InstructionUpdate: begin-gen
1724        Identifier: begin-gen
1724         Identifier: expr: 'textoMes'
1724        Identifier: end-gen
1724        OpUpdate: begin-gen
1724         OpUpdate: expr: '='
1724        OpUpdate: end-gen
1724        Value: begin-gen
1724         Member: begin-gen
1724          Identifier: begin-gen
1724           Identifier: expr: 'util'
1724          Identifier: end-gen
1724          FunctionCall: begin-gen
1724           Value: begin-gen
1724            Constant: begin-gen
1724             Constant: ctype: 'String' -> 'scripts'
1724             Constant: expr: 'u"scripts"'
1724           <-Value: expr: 'u"scripts"'
1724            Constant: end-gen
1724           Value: end-gen
1724           Value: begin-gen
1724            Constant: begin-gen
1724             Constant: ctype: 'String' -> 'Julio'
1724             Constant: expr: 'u"Julio"'
1724           <-Value: expr: 'u"Julio"'
1724            Constant: end-gen
1724           Value: end-gen
1724           FunctionCall: expr: 'translate(u"scripts", u"Julio")'
1724          FunctionCall: end-gen
1724          Member: expr: 'util.translate(u"scripts", u"Julio")'
1724        <-Value: expr: 'util.translate(u"scripts", u"Julio")'
1724         Member: end-gen
1724        Value: end-gen
1724        InstructionUpdate: line: 'textoMes = util.translate(u"scripts", u"Julio")'
1724      <-Source: line: 'textoMes = util.translate(u"scripts", u"Julio")'
1724     <--Switch: line: 'textoMes = util.translate(u"scripts", u"Julio")'
1724    <---Source: line: 'textoMes = util.translate(u"scripts", u"Julio")'
1724   <----Function: line: 'textoMes = util.translate(u"scripts", u"Julio")'
1724  <-----Source: line: 'textoMes = util.translate(u"scripts", u"Julio")'
1724 <------Class: line: 'textoMes = util.translate(u"scripts", u"Julio")'
1724<-------Source: line: 'textoMes = util.translate(u"scripts", u"Julio")'
1725       InstructionUpdate: end-gen
1725       InstructionFlow: begin-gen
1725        InstructionFlow: break: 'break '
1725      <-Source: break: 'break '
1725     <--Switch: line: 'sd4_do_work = False # BREAK'
1725    <---Source: line: 'sd4_do_work = False # BREAK'
1725   <----Function: line: 'sd4_do_work = False # BREAK'
1725  <-----Source: line: 'sd4_do_work = False # BREAK'
1725 <------Class: line: 'sd4_do_work = False # BREAK'
1725<-------Source: line: 'sd4_do_work = False # BREAK'
1726       InstructionFlow: end-gen
1726      Source: end-gen
1726      Switch: end: 'block-if'
1726    <-Source: end: 'block-if'
1726   <--Function: end: 'block-if'
1726  <---Source: end: 'block-if'
1726 <----Class: end: 'block-if'
1726<-----Source: end: 'block-if'
1726      Value: begin-gen
1726       Constant: begin-gen
1726        Constant: ctype: 'String' -> '08'
1726        Constant: expr: 'u"08"'
1726      <-Value: expr: 'u"08"'
1726       Constant: end-gen
1726      Value: end-gen
1726      Switch: line: 'if sd4_when == u"08": sd4_do_work,sd4_work_done = True,True'
1726    <-Source: line: 'if sd4_when == u"08": sd4_do_work,sd4_work_done = True,True'
1726   <--Function: line: 'if sd4_when == u"08": sd4_do_work,sd4_work_done = True,True'
1726  <---Source: line: 'if sd4_when == u"08": sd4_do_work,sd4_work_done = True,True'
1726 <----Class: line: 'if sd4_when == u"08": sd4_do_work,sd4_work_done = True,True'
1726<-----Source: line: 'if sd4_when == u"08": sd4_do_work,sd4_work_done = True,True'
1727      Switch: line: 'if sd4_do_work:'
1727    <-Source: line: 'if sd4_do_work:'
1727   <--Function: line: 'if sd4_do_work:'
1727  <---Source: line: 'if sd4_do_work:'
1727 <----Class: line: 'if sd4_do_work:'
1727<-----Source: line: 'if sd4_do_work:'
1728      Switch: begin: 'block-if'
1728    <-Source: begin: 'block-if'
1728   <--Function: begin: 'block-if'
1728  <---Source: begin: 'block-if'
1728 <----Class: begin: 'block-if'
1728<-----Source: begin: 'block-if'
1728      Source: begin-gen
1728       InstructionUpdate: begin-gen
1728        Identifier: begin-gen
1728         Identifier: expr: 'textoMes'
1728        Identifier: end-gen
1728        OpUpdate: begin-gen
1728         OpUpdate: expr: '='
1728        OpUpdate: end-gen
1728        Value: begin-gen
1728         Member: begin-gen
1728          Identifier: begin-gen
1728           Identifier: expr: 'util'
1728          Identifier: end-gen
1728          FunctionCall: begin-gen
1728           Value: begin-gen
1728            Constant: begin-gen
1728             Constant: ctype: 'String' -> 'scripts'
1728             Constant: expr: 'u"scripts"'
1728           <-Value: expr: 'u"scripts"'
1728            Constant: end-gen
1728           Value: end-gen
1728           Value: begin-gen
1728            Constant: begin-gen
1728             Constant: ctype: 'String' -> 'Agosto'
1728             Constant: expr: 'u"Agosto"'
1728           <-Value: expr: 'u"Agosto"'
1728            Constant: end-gen
1728           Value: end-gen
1728           FunctionCall: expr: 'translate(u"scripts", u"Agosto")'
1728          FunctionCall: end-gen
1728          Member: expr: 'util.translate(u"scripts", u"Agosto")'
1728        <-Value: expr: 'util.translate(u"scripts", u"Agosto")'
1728         Member: end-gen
1728        Value: end-gen
1728        InstructionUpdate: line: 'textoMes = util.translate(u"scripts", u"Agosto")'
1728      <-Source: line: 'textoMes = util.translate(u"scripts", u"Agosto")'
1728     <--Switch: line: 'textoMes = util.translate(u"scripts", u"Agosto")'
1728    <---Source: line: 'textoMes = util.translate(u"scripts", u"Agosto")'
1728   <----Function: line: 'textoMes = util.translate(u"scripts", u"Agosto")'
1728  <-----Source: line: 'textoMes = util.translate(u"scripts", u"Agosto")'
1728 <------Class: line: 'textoMes = util.translate(u"scripts", u"Agosto")'
1728<-------Source: line: 'textoMes = util.translate(u"scripts", u"Agosto")'
1729       InstructionUpdate: end-gen
1729       InstructionFlow: begin-gen
1729        InstructionFlow: break: 'break '
1729      <-Source: break: 'break '
1729     <--Switch: line: 'sd4_do_work = False # BREAK'
1729    <---Source: line: 'sd4_do_work = False # BREAK'
1729   <----Function: line: 'sd4_do_work = False # BREAK'
1729  <-----Source: line: 'sd4_do_work = False # BREAK'
1729 <------Class: line: 'sd4_do_work = False # BREAK'
1729<-------Source: line: 'sd4_do_work = False # BREAK'
1730       InstructionFlow: end-gen
1730      Source: end-gen
1730      Switch: end: 'block-if'
1730    <-Source: end: 'block-if'
1730   <--Function: end: 'block-if'
1730  <---Source: end: 'block-if'
1730 <----Class: end: 'block-if'
1730<-----Source: end: 'block-if'
1730      Value: begin-gen
1730       Constant: begin-gen
1730        Constant: ctype: 'String' -> '09'
1730        Constant: expr: 'u"09"'
1730      <-Value: expr: 'u"09"'
1730       Constant: end-gen
1730      Value: end-gen
1730      Switch: line: 'if sd4_when == u"09": sd4_do_work,sd4_work_done = True,True'
1730    <-Source: line: 'if sd4_when == u"09": sd4_do_work,sd4_work_done = True,True'
1730   <--Function: line: 'if sd4_when == u"09": sd4_do_work,sd4_work_done = True,True'
1730  <---Source: line: 'if sd4_when == u"09": sd4_do_work,sd4_work_done = True,True'
1730 <----Class: line: 'if sd4_when == u"09": sd4_do_work,sd4_work_done = True,True'
1730<-----Source: line: 'if sd4_when == u"09": sd4_do_work,sd4_work_done = True,True'
1731      Switch: line: 'if sd4_do_work:'
1731    <-Source: line: 'if sd4_do_work:'
1731   <--Function: line: 'if sd4_do_work:'
1731  <---Source: line: 'if sd4_do_work:'
1731 <----Class: line: 'if sd4_do_work:'
1731<-----Source: line: 'if sd4_do_work:'
1732      Switch: begin: 'block-if'
1732    <-Source: begin: 'block-if'
1732   <--Function: begin: 'block-if'
1732  <---Source: begin: 'block-if'
1732 <----Class: begin: 'block-if'
1732<-----Source: begin: 'block-if'
1732      Source: begin-gen
1732       InstructionUpdate: begin-gen
1732        Identifier: begin-gen
1732         Identifier: expr: 'textoMes'
1732        Identifier: end-gen
1732        OpUpdate: begin-gen
1732         OpUpdate: expr: '='
1732        OpUpdate: end-gen
1732        Value: begin-gen
1732         Member: begin-gen
1732          Identifier: begin-gen
1732           Identifier: expr: 'util'
1732          Identifier: end-gen
1732          FunctionCall: begin-gen
1732           Value: begin-gen
1732            Constant: begin-gen
1732             Constant: ctype: 'String' -> 'scripts'
1732             Constant: expr: 'u"scripts"'
1732           <-Value: expr: 'u"scripts"'
1732            Constant: end-gen
1732           Value: end-gen
1732           Value: begin-gen
1732            Constant: begin-gen
1732             Constant: ctype: 'String' -> 'Septiembre'
1732             Constant: expr: 'u"Septiembre"'
1732           <-Value: expr: 'u"Septiembre"'
1732            Constant: end-gen
1732           Value: end-gen
1732           FunctionCall: expr: 'translate(u"scripts", u"Septiembre")'
1732          FunctionCall: end-gen
1732          Member: expr: 'util.translate(u"scripts", u"Septiembre")'
1732        <-Value: expr: 'util.translate(u"scripts", u"Septiembre")'
1732         Member: end-gen
1732        Value: end-gen
1732        InstructionUpdate: line: 'textoMes = util.translate(u"scripts", u"Septiembre")'
1732      <-Source: line: 'textoMes = util.translate(u"scripts", u"Septiembre")'
1732     <--Switch: line: 'textoMes = util.translate(u"scripts", u"Septiembre")'
1732    <---Source: line: 'textoMes = util.translate(u"scripts", u"Septiembre")'
1732   <----Function: line: 'textoMes = util.translate(u"scripts", u"Septiembre")'
1732  <-----Source: line: 'textoMes = util.translate(u"scripts", u"Septiembre")'
1732 <------Class: line: 'textoMes = util.translate(u"scripts", u"Septiembre")'
1732<-------Source: line: 'textoMes = util.translate(u"scripts", u"Septiembre")'
1733       InstructionUpdate: end-gen
1733       InstructionFlow: begin-gen
1733        InstructionFlow: break: 'break '
1733      <-Source: break: 'break '
1733     <--Switch: line: 'sd4_do_work = False # BREAK'
1733    <---Source: line: 'sd4_do_work = False # BREAK'
1733   <----Function: line: 'sd4_do_work = False # BREAK'
1733  <-----Source: line: 'sd4_do_work = False # BREAK'
1733 <------Class: line: 'sd4_do_work = False # BREAK'
1733<-------Source: line: 'sd4_do_work = False # BREAK'
1734       InstructionFlow: end-gen
1734      Source: end-gen
1734      Switch: end: 'block-if'
1734    <-Source: end: 'block-if'
1734   <--Function: end: 'block-if'
1734  <---Source: end: 'block-if'
1734 <----Class: end: 'block-if'
1734<-----Source: end: 'block-if'
1734      Value: begin-gen
1734       Constant: begin-gen
1734        Constant: ctype: 'String' -> '10'
1734        Constant: expr: 'u"10"'
1734      <-Value: expr: 'u"10"'
1734       Constant: end-gen
1734      Value: end-gen
1734      Switch: line: 'if sd4_when == u"10": sd4_do_work,sd4_work_done = True,True'
1734    <-Source: line: 'if sd4_when == u"10": sd4_do_work,sd4_work_done = True,True'
1734   <--Function: line: 'if sd4_when == u"10": sd4_do_work,sd4_work_done = True,True'
1734  <---Source: line: 'if sd4_when == u"10": sd4_do_work,sd4_work_done = True,True'
1734 <----Class: line: 'if sd4_when == u"10": sd4_do_work,sd4_work_done = True,True'
1734<-----Source: line: 'if sd4_when == u"10": sd4_do_work,sd4_work_done = True,True'
1735      Switch: line: 'if sd4_do_work:'
1735    <-Source: line: 'if sd4_do_work:'
1735   <--Function: line: 'if sd4_do_work:'
1735  <---Source: line: 'if sd4_do_work:'
1735 <----Class: line: 'if sd4_do_work:'
1735<-----Source: line: 'if sd4_do_work:'
1736      Switch: begin: 'block-if'
1736    <-Source: begin: 'block-if'
1736   <--Function: begin: 'block-if'
1736  <---Source: begin: 'block-if'
1736 <----Class: begin: 'block-if'
1736<-----Source: begin: 'block-if'
1736      Source: begin-gen
1736       InstructionUpdate: begin-gen
1736        Identifier: begin-gen
1736         Identifier: expr: 'textoMes'
1736        Identifier: end-gen
1736        OpUpdate: begin-gen
1736         OpUpdate: expr: '='
1736        OpUpdate: end-gen
1736        Value: begin-gen
1736         Member: begin-gen
1736          Identifier: begin-gen
1736           Identifier: expr: 'util'
1736          Identifier: end-gen
1736          FunctionCall: begin-gen
1736           Value: begin-gen
1736            Constant: begin-gen
1736             Constant: ctype: 'String' -> 'scripts'
1736             Constant: expr: 'u"scripts"'
1736           <-Value: expr: 'u"scripts"'
1736            Constant: end-gen
1736           Value: end-gen
1736           Value: begin-gen
1736            Constant: begin-gen
1736             Constant: ctype: 'String' -> 'Octubre'
1736             Constant: expr: 'u"Octubre"'
1736           <-Value: expr: 'u"Octubre"'
1736            Constant: end-gen
1736           Value: end-gen
1736           FunctionCall: expr: 'translate(u"scripts", u"Octubre")'
1736          FunctionCall: end-gen
1736          Member: expr: 'util.translate(u"scripts", u"Octubre")'
1736        <-Value: expr: 'util.translate(u"scripts", u"Octubre")'
1736         Member: end-gen
1736        Value: end-gen
1736        InstructionUpdate: line: 'textoMes = util.translate(u"scripts", u"Octubre")'
1736      <-Source: line: 'textoMes = util.translate(u"scripts", u"Octubre")'
1736     <--Switch: line: 'textoMes = util.translate(u"scripts", u"Octubre")'
1736    <---Source: line: 'textoMes = util.translate(u"scripts", u"Octubre")'
1736   <----Function: line: 'textoMes = util.translate(u"scripts", u"Octubre")'
1736  <-----Source: line: 'textoMes = util.translate(u"scripts", u"Octubre")'
1736 <------Class: line: 'textoMes = util.translate(u"scripts", u"Octubre")'
1736<-------Source: line: 'textoMes = util.translate(u"scripts", u"Octubre")'
1737       InstructionUpdate: end-gen
1737       InstructionFlow: begin-gen
1737        InstructionFlow: break: 'break '
1737      <-Source: break: 'break '
1737     <--Switch: line: 'sd4_do_work = False # BREAK'
1737    <---Source: line: 'sd4_do_work = False # BREAK'
1737   <----Function: line: 'sd4_do_work = False # BREAK'
1737  <-----Source: line: 'sd4_do_work = False # BREAK'
1737 <------Class: line: 'sd4_do_work = False # BREAK'
1737<-------Source: line: 'sd4_do_work = False # BREAK'
1738       InstructionFlow: end-gen
1738      Source: end-gen
1738      Switch: end: 'block-if'
1738    <-Source: end: 'block-if'
1738   <--Function: end: 'block-if'
1738  <---Source: end: 'block-if'
1738 <----Class: end: 'block-if'
1738<-----Source: end: 'block-if'
1738      Value: begin-gen
1738       Constant: begin-gen
1738        Constant: ctype: 'String' -> '11'
1738        Constant: expr: 'u"11"'
1738      <-Value: expr: 'u"11"'
1738       Constant: end-gen
1738      Value: end-gen
1738      Switch: line: 'if sd4_when == u"11": sd4_do_work,sd4_work_done = True,True'
1738    <-Source: line: 'if sd4_when == u"11": sd4_do_work,sd4_work_done = True,True'
1738   <--Function: line: 'if sd4_when == u"11": sd4_do_work,sd4_work_done = True,True'
1738  <---Source: line: 'if sd4_when == u"11": sd4_do_work,sd4_work_done = True,True'
1738 <----Class: line: 'if sd4_when == u"11": sd4_do_work,sd4_work_done = True,True'
1738<-----Source: line: 'if sd4_when == u"11": sd4_do_work,sd4_work_done = True,True'
1739      Switch: line: 'if sd4_do_work:'
1739    <-Source: line: 'if sd4_do_work:'
1739   <--Function: line: 'if sd4_do_work:'
1739  <---Source: line: 'if sd4_do_work:'
1739 <----Class: line: 'if sd4_do_work:'
1739<-----Source: line: 'if sd4_do_work:'
1740      Switch: begin: 'block-if'
1740    <-Source: begin: 'block-if'
1740   <--Function: begin: 'block-if'
1740  <---Source: begin: 'block-if'
1740 <----Class: begin: 'block-if'
1740<-----Source: begin: 'block-if'
1740      Source: begin-gen
1740       InstructionUpdate: begin-gen
1740        Identifier: begin-gen
1740         Identifier: expr: 'textoMes'
1740        Identifier: end-gen
1740        OpUpdate: begin-gen
1740         OpUpdate: expr: '='
1740        OpUpdate: end-gen
1740        Value: begin-gen
1740         Member: begin-gen
1740          Identifier: begin-gen
1740           Identifier: expr: 'util'
1740          Identifier: end-gen
1740          FunctionCall: begin-gen
1740           Value: begin-gen
1740            Constant: begin-gen
1740             Constant: ctype: 'String' -> 'scripts'
1740             Constant: expr: 'u"scripts"'
1740           <-Value: expr: 'u"scripts"'
1740            Constant: end-gen
1740           Value: end-gen
1740           Value: begin-gen
1740            Constant: begin-gen
1740             Constant: ctype: 'String' -> 'Noviembre'
1740             Constant: expr: 'u"Noviembre"'
1740           <-Value: expr: 'u"Noviembre"'
1740            Constant: end-gen
1740           Value: end-gen
1740           FunctionCall: expr: 'translate(u"scripts", u"Noviembre")'
1740          FunctionCall: end-gen
1740          Member: expr: 'util.translate(u"scripts", u"Noviembre")'
1740        <-Value: expr: 'util.translate(u"scripts", u"Noviembre")'
1740         Member: end-gen
1740        Value: end-gen
1740        InstructionUpdate: line: 'textoMes = util.translate(u"scripts", u"Noviembre")'
1740      <-Source: line: 'textoMes = util.translate(u"scripts", u"Noviembre")'
1740     <--Switch: line: 'textoMes = util.translate(u"scripts", u"Noviembre")'
1740    <---Source: line: 'textoMes = util.translate(u"scripts", u"Noviembre")'
1740   <----Function: line: 'textoMes = util.translate(u"scripts", u"Noviembre")'
1740  <-----Source: line: 'textoMes = util.translate(u"scripts", u"Noviembre")'
1740 <------Class: line: 'textoMes = util.translate(u"scripts", u"Noviembre")'
1740<-------Source: line: 'textoMes = util.translate(u"scripts", u"Noviembre")'
1741       InstructionUpdate: end-gen
1741       InstructionFlow: begin-gen
1741        InstructionFlow: break: 'break '
1741      <-Source: break: 'break '
1741     <--Switch: line: 'sd4_do_work = False # BREAK'
1741    <---Source: line: 'sd4_do_work = False # BREAK'
1741   <----Function: line: 'sd4_do_work = False # BREAK'
1741  <-----Source: line: 'sd4_do_work = False # BREAK'
1741 <------Class: line: 'sd4_do_work = False # BREAK'
1741<-------Source: line: 'sd4_do_work = False # BREAK'
1742       InstructionFlow: end-gen
1742      Source: end-gen
1742      Switch: end: 'block-if'
1742    <-Source: end: 'block-if'
1742   <--Function: end: 'block-if'
1742  <---Source: end: 'block-if'
1742 <----Class: end: 'block-if'
1742<-----Source: end: 'block-if'
1742      Value: begin-gen
1742       Constant: begin-gen
1742        Constant: ctype: 'String' -> '12'
1742        Constant: expr: 'u"12"'
1742      <-Value: expr: 'u"12"'
1742       Constant: end-gen
1742      Value: end-gen
1742      Switch: line: 'if sd4_when == u"12": sd4_do_work,sd4_work_done = True,True'
1742    <-Source: line: 'if sd4_when == u"12": sd4_do_work,sd4_work_done = True,True'
1742   <--Function: line: 'if sd4_when == u"12": sd4_do_work,sd4_work_done = True,True'
1742  <---Source: line: 'if sd4_when == u"12": sd4_do_work,sd4_work_done = True,True'
1742 <----Class: line: 'if sd4_when == u"12": sd4_do_work,sd4_work_done = True,True'
1742<-----Source: line: 'if sd4_when == u"12": sd4_do_work,sd4_work_done = True,True'
1743      Switch: line: 'if sd4_do_work:'
1743    <-Source: line: 'if sd4_do_work:'
1743   <--Function: line: 'if sd4_do_work:'
1743  <---Source: line: 'if sd4_do_work:'
1743 <----Class: line: 'if sd4_do_work:'
1743<-----Source: line: 'if sd4_do_work:'
1744      Switch: begin: 'block-if'
1744    <-Source: begin: 'block-if'
1744   <--Function: begin: 'block-if'
1744  <---Source: begin: 'block-if'
1744 <----Class: begin: 'block-if'
1744<-----Source: begin: 'block-if'
1744      Source: begin-gen
1744       InstructionUpdate: begin-gen
1744        Identifier: begin-gen
1744         Identifier: expr: 'textoMes'
1744        Identifier: end-gen
1744        OpUpdate: begin-gen
1744         OpUpdate: expr: '='
1744        OpUpdate: end-gen
1744        Value: begin-gen
1744         Member: begin-gen
1744          Identifier: begin-gen
1744           Identifier: expr: 'util'
1744          Identifier: end-gen
1744          FunctionCall: begin-gen
1744           Value: begin-gen
1744            Constant: begin-gen
1744             Constant: ctype: 'String' -> 'scripts'
1744             Constant: expr: 'u"scripts"'
1744           <-Value: expr: 'u"scripts"'
1744            Constant: end-gen
1744           Value: end-gen
1744           Value: begin-gen
1744            Constant: begin-gen
1744             Constant: ctype: 'String' -> 'Diciembre'
1744             Constant: expr: 'u"Diciembre"'
1744           <-Value: expr: 'u"Diciembre"'
1744            Constant: end-gen
1744           Value: end-gen
1744           FunctionCall: expr: 'translate(u"scripts", u"Diciembre")'
1744          FunctionCall: end-gen
1744          Member: expr: 'util.translate(u"scripts", u"Diciembre")'
1744        <-Value: expr: 'util.translate(u"scripts", u"Diciembre")'
1744         Member: end-gen
1744        Value: end-gen
1744        InstructionUpdate: line: 'textoMes = util.translate(u"scripts", u"Diciembre")'
1744      <-Source: line: 'textoMes = util.translate(u"scripts", u"Diciembre")'
1744     <--Switch: line: 'textoMes = util.translate(u"scripts", u"Diciembre")'
1744    <---Source: line: 'textoMes = util.translate(u"scripts", u"Diciembre")'
1744   <----Function: line: 'textoMes = util.translate(u"scripts", u"Diciembre")'
1744  <-----Source: line: 'textoMes = util.translate(u"scripts", u"Diciembre")'
1744 <------Class: line: 'textoMes = util.translate(u"scripts", u"Diciembre")'
1744<-------Source: line: 'textoMes = util.translate(u"scripts", u"Diciembre")'
1745       InstructionUpdate: end-gen
1745       InstructionFlow: begin-gen
1745        InstructionFlow: break: 'break '
1745      <-Source: break: 'break '
1745     <--Switch: line: 'sd4_do_work = False # BREAK'
1745    <---Source: line: 'sd4_do_work = False # BREAK'
1745   <----Function: line: 'sd4_do_work = False # BREAK'
1745  <-----Source: line: 'sd4_do_work = False # BREAK'
1745 <------Class: line: 'sd4_do_work = False # BREAK'
1745<-------Source: line: 'sd4_do_work = False # BREAK'
1746       InstructionFlow: end-gen
1746      Source: end-gen
1746      Switch: end: 'block-if'
1746    <-Source: end: 'block-if'
1746   <--Function: end: 'block-if'
1746  <---Source: end: 'block-if'
1746 <----Class: end: 'block-if'
1746<-----Source: end: 'block-if'
1746     Switch: end-gen
1746     DeclarationBlock: begin-gen
1746      Variable: begin-gen
1746       Variable: expr: 'dia'
1746       Variable: expr: '='
1746       Value: begin-gen
1746        FunctionCall: begin-gen
1746         Value: begin-gen
1746          Member: begin-gen
1746           Identifier: begin-gen
1746            Identifier: expr: 'fecha'
1746           Identifier: end-gen
1746           FunctionCall: begin-gen
1746            Value: begin-gen
1746             Constant: begin-gen
1746              Constant: ctype: 'Number' -> '8'
1746              Constant: expr: '8'
1746            <-Value: expr: '8'
1746             Constant: end-gen
1746            Value: end-gen
1746            Value: begin-gen
1746             Constant: begin-gen
1746              Constant: ctype: 'Number' -> '2'
1746              Constant: expr: '2'
1746            <-Value: expr: '2'
1746             Constant: end-gen
1746            Value: end-gen
1746            FunctionCall: expr: 'mid(8, 2)'
1746           FunctionCall: end-gen
1746           Member: expr: 'fecha[8:8 +  2]'
1746         <-Value: expr: 'fecha[8:8 +  2]'
1746          Member: end-gen
1746         Value: end-gen
1746         FunctionCall: expr: 'parseInt(fecha[8:8 +  2])'
1746       <-Value: expr: 'parseInt(fecha[8:8 +  2])'
1746      <--Variable: expr: 'parseInt(fecha[8:8 +  2])'
1746        FunctionCall: end-gen
1746       Value: end-gen
1746      Variable: end-gen
1746      DeclarationBlock: line: 'dia = parseInt(fecha[8:8 +  2])'
1746    <-Source: line: 'dia = parseInt(fecha[8:8 +  2])'
1746   <--Function: line: 'dia = parseInt(fecha[8:8 +  2])'
1746  <---Source: line: 'dia = parseInt(fecha[8:8 +  2])'
1746 <----Class: line: 'dia = parseInt(fecha[8:8 +  2])'
1746<-----Source: line: 'dia = parseInt(fecha[8:8 +  2])'
1747     DeclarationBlock: end-gen
1747     DeclarationBlock: begin-gen
1747      Variable: begin-gen
1747       Variable: expr: 'ano'
1747       Variable: expr: '='
1747       Value: begin-gen
1747        FunctionCall: begin-gen
1747         Value: begin-gen
1747          Member: begin-gen
1747           Identifier: begin-gen
1747            Identifier: expr: 'fecha'
1747           Identifier: end-gen
1747           FunctionCall: begin-gen
1747            Value: begin-gen
1747             Constant: begin-gen
1747              Constant: ctype: 'Number' -> '0'
1747              Constant: expr: '0'
1747            <-Value: expr: '0'
1747             Constant: end-gen
1747            Value: end-gen
1747            Value: begin-gen
1747             Constant: begin-gen
1747              Constant: ctype: 'Number' -> '4'
1747              Constant: expr: '4'
1747            <-Value: expr: '4'
1747             Constant: end-gen
1747            Value: end-gen
1747            FunctionCall: expr: 'mid(0, 4)'
1747           FunctionCall: end-gen
1747           Member: expr: 'fecha[0:0 +  4]'
1747         <-Value: expr: 'fecha[0:0 +  4]'
1747          Member: end-gen
1747         Value: end-gen
1747         FunctionCall: expr: 'parseInt(fecha[0:0 +  4])'
1747       <-Value: expr: 'parseInt(fecha[0:0 +  4])'
1747      <--Variable: expr: 'parseInt(fecha[0:0 +  4])'
1747        FunctionCall: end-gen
1747       Value: end-gen
1747      Variable: end-gen
1747      DeclarationBlock: line: 'ano = parseInt(fecha[0:0 +  4])'
1747    <-Source: line: 'ano = parseInt(fecha[0:0 +  4])'
1747   <--Function: line: 'ano = parseInt(fecha[0:0 +  4])'
1747  <---Source: line: 'ano = parseInt(fecha[0:0 +  4])'
1747 <----Class: line: 'ano = parseInt(fecha[0:0 +  4])'
1747<-----Source: line: 'ano = parseInt(fecha[0:0 +  4])'
1748     DeclarationBlock: end-gen
1748     DeclarationBlock: begin-gen
1748      Variable: begin-gen
1748       Variable: expr: 'texto'
1748       Variable: expr: '='
1748       Value: begin-gen
1748        Member: begin-gen
1748         Identifier: begin-gen
1748          Identifier: expr: 'util'
1748         Identifier: end-gen
1748         FunctionCall: begin-gen
1748          Value: begin-gen
1748           Constant: begin-gen
1748            Constant: ctype: 'String' -> 'scripts'
1748            Constant: expr: 'u"scripts"'
1748          <-Value: expr: 'u"scripts"'
1748           Constant: end-gen
1748          Value: end-gen
1748          Value: begin-gen
1748           Constant: begin-gen
1748            Constant: ctype: 'String' -> '%1 de %2 de %3'
1748            Constant: expr: 'u"%1 de %2 de %3"'
1748          <-Value: expr: 'u"%1 de %2 de %3"'
1748           Constant: end-gen
1748          Value: end-gen
1748          FunctionCall: expr: 'translate(u"scripts", u"%1 de %2 de %3")'
1748         FunctionCall: end-gen
1748         FunctionCall: begin-gen
1748          Value: begin-gen
1748           Member: begin-gen
1748            Identifier: begin-gen
1748             Identifier: expr: 'dia'
1748            Identifier: end-gen
1748            FunctionCall: begin-gen
1748             FunctionCall: expr: 'toString()'
1748            FunctionCall: end-gen
1748            Member: expr: 'parseString(dia)'
1748          <-Value: expr: 'parseString(dia)'
1748           Member: end-gen
1748          Value: end-gen
1748          FunctionCall: expr: 'arg(parseString(dia))'
1748         FunctionCall: end-gen
1748         FunctionCall: begin-gen
1748          Value: begin-gen
1748           Identifier: begin-gen
1748            Identifier: expr: 'textoMes'
1748          <-Value: expr: 'textoMes'
1748           Identifier: end-gen
1748          Value: end-gen
1748          FunctionCall: expr: 'arg(textoMes)'
1748         FunctionCall: end-gen
1748         FunctionCall: begin-gen
1748          Value: begin-gen
1748           Identifier: begin-gen
1748            Identifier: expr: 'ano'
1748          <-Value: expr: 'ano'
1748           Identifier: end-gen
1748          Value: end-gen
1748          FunctionCall: expr: 'arg(ano)'
1748         FunctionCall: end-gen
1748         Member: expr: 'util.translate(u"scripts", u"%1 de %2 de %3").arg(parseString(dia)).arg(textoMes).arg(ano)'
1748       <-Value: expr: 'util.translate(u"scripts", u"%1 de %2 de %3").arg(parseString(dia)).arg(textoMes).arg(ano)'
1748      <--Variable: expr: 'util.translate(u"scripts", u"%1 de %2 de %3").arg(parseString(dia)).arg(textoMes).arg(ano)'
1748        Member: end-gen
1748       Value: end-gen
1748      Variable: end-gen
1748      DeclarationBlock: line: 'texto = util.translate(u"scripts", u"%1 de %2 de %3").arg(parseString(dia)).arg(textoMes).arg(ano)'
1748    <-Source: line: 'texto = util.translate(u"scripts", u"%1 de %2 de %3").arg(parseString(dia)).arg(textoMes).arg(ano)'
1748   <--Function: line: 'texto = util.translate(u"scripts", u"%1 de %2 de %3").arg(parseString(dia)).arg(textoMes).arg(ano)'
1748  <---Source: line: 'texto = util.translate(u"scripts", u"%1 de %2 de %3").arg(parseString(dia)).arg(textoMes).arg(ano)'
1748 <----Class: line: 'texto = util.translate(u"scripts", u"%1 de %2 de %3").arg(parseString(dia)).arg(textoMes).arg(ano)'
1748<-----Source: line: 'texto = util.translate(u"scripts", u"%1 de %2 de %3").arg(parseString(dia)).arg(textoMes).arg(ano)'
1749     DeclarationBlock: end-gen
1749     InstructionFlow: begin-gen
1749      Value: begin-gen
1749       Identifier: begin-gen
1749        Identifier: expr: 'texto'
1749      <-Value: expr: 'texto'
1749       Identifier: end-gen
1749      Value: end-gen
1749      InstructionFlow: line: 'return texto'
1749    <-Source: line: 'return texto'
1749   <--Function: line: 'return texto'
1749  <---Source: line: 'return texto'
1749 <----Class: line: 'return texto'
1749<-----Source: line: 'return texto'
1750     InstructionFlow: end-gen
1750    Source: end-gen
1750    Function: end: 'block-def-oficial_textoFecha'
1750  <-Source: end: 'block-def-oficial_textoFecha'
1750 <--Class: end: 'block-def-oficial_textoFecha'
1750<---Source: end: 'block-def-oficial_textoFecha'
1751   Function: end-gen
1751   Function: begin-gen
1751    Variable: begin-gen
1751     Variable: expr: 'nifIva'
1751    Variable: end-gen
1751    Function: line: 'def oficial_validarNifIva(self, nifIva = None):'
1751  <-Source: line: 'def oficial_validarNifIva(self, nifIva = None):'
1751 <--Class: line: 'def oficial_validarNifIva(self, nifIva = None):'
1751<---Source: line: 'def oficial_validarNifIva(self, nifIva = None):'
1752    Function: begin: 'block-def-oficial_validarNifIva'
1752  <-Source: begin: 'block-def-oficial_validarNifIva'
1752 <--Class: begin: 'block-def-oficial_validarNifIva'
1752<---Source: begin: 'block-def-oficial_validarNifIva'
1752    Source: begin-gen
1752     DeclarationBlock: begin-gen
1752      Variable: begin-gen
1752       Variable: expr: 'util'
1752       Variable: expr: '='
1752       Value: begin-gen
1752        New: begin-gen
1752         Identifier: begin-gen
1752          Identifier: expr: 'FLUtil'
1752        <-New: expr: 'qsatype.FLUtil()'
1752       <--Value: expr: 'qsatype.FLUtil()'
1752      <---Variable: expr: 'qsatype.FLUtil()'
1752         Identifier: end-gen
1752        New: end-gen
1752       Value: end-gen
1752      Variable: end-gen
1752      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1752    <-Source: line: 'util = qsatype.FLUtil()'
1752   <--Function: line: 'util = qsatype.FLUtil()'
1752  <---Source: line: 'util = qsatype.FLUtil()'
1752 <----Class: line: 'util = qsatype.FLUtil()'
1752<-----Source: line: 'util = qsatype.FLUtil()'
1753     DeclarationBlock: end-gen
1753     DeclarationBlock: begin-gen
1753      Variable: begin-gen
1753       Variable: expr: 'error'
1753       Variable: expr: '='
1753       Variable: expr: '""'
1753      Variable: end-gen
1753      DeclarationBlock: line: 'error = ""'
1753    <-Source: line: 'error = ""'
1753   <--Function: line: 'error = ""'
1753  <---Source: line: 'error = ""'
1753 <----Class: line: 'error = ""'
1753<-----Source: line: 'error = ""'
1754     DeclarationBlock: end-gen
1754     If: begin-gen
1754      Expression: begin-gen
1754       OpUnary: begin-gen
1754        OpUnary: expr: 'not'
1754      <-Expression: expr: 'not'
1754        Identifier: begin-gen
1754         Identifier: expr: 'nifIva'
1754       <-OpUnary: expr: 'nifIva'
1754      <--Expression: expr: 'nifIva'
1754        Identifier: end-gen
1754       OpUnary: end-gen
1754       Compare: begin-gen
1754        Compare: expr: 'or'
1754      <-Expression: expr: 'or'
1754       Compare: end-gen
1754       Identifier: begin-gen
1754        Identifier: expr: 'nifIva'
1754      <-Expression: expr: 'nifIva'
1754       Identifier: end-gen
1754       Compare: begin-gen
1754        Compare: expr: '=='
1754      <-Expression: expr: '=='
1754       Compare: end-gen
1754       Constant: begin-gen
1754        Constant: ctype: 'String' -> ''
1754        Constant: expr: 'u""'
1754      <-Expression: expr: 'u""'
1754       Constant: end-gen
1754      Expression: end-gen
1754      If: line: 'if not nifIva or nifIva == u"":'
1754    <-Source: line: 'if not nifIva or nifIva == u"":'
1754   <--Function: line: 'if not nifIva or nifIva == u"":'
1754  <---Source: line: 'if not nifIva or nifIva == u"":'
1754 <----Class: line: 'if not nifIva or nifIva == u"":'
1754<-----Source: line: 'if not nifIva or nifIva == u"":'
1755      If: begin: 'block-if'
1755    <-Source: begin: 'block-if'
1755   <--Function: begin: 'block-if'
1755  <---Source: begin: 'block-if'
1755 <----Class: begin: 'block-if'
1755<-----Source: begin: 'block-if'
1755      Source: begin-gen
1755       InstructionUpdate: begin-gen
1755        Identifier: begin-gen
1755         Identifier: expr: 'error'
1755        Identifier: end-gen
1755        OpUpdate: begin-gen
1755         OpUpdate: expr: '='
1755        OpUpdate: end-gen
1755        Value: begin-gen
1755         Member: begin-gen
1755          Identifier: begin-gen
1755           Identifier: expr: 'util'
1755          Identifier: end-gen
1755          FunctionCall: begin-gen
1755           Value: begin-gen
1755            Constant: begin-gen
1755             Constant: ctype: 'String' -> 'scripts'
1755             Constant: expr: 'u"scripts"'
1755           <-Value: expr: 'u"scripts"'
1755            Constant: end-gen
1755           Value: end-gen
1755           Value: begin-gen
1755            Constant: begin-gen
1755             Constant: ctype: 'String' -> 'No se ha establecido el NIF/IVA'
1755             Constant: expr: 'u"No se ha establecido el NIF/IVA"'
1755           <-Value: expr: 'u"No se ha establecido el NIF/IVA"'
1755            Constant: end-gen
1755           Value: end-gen
1755           FunctionCall: expr: 'translate(u"scripts", u"No se ha establecido el NIF/IVA")'
1755          FunctionCall: end-gen
1755          Member: expr: 'util.translate(u"scripts", u"No se ha establecido el NIF/IVA")'
1755        <-Value: expr: 'util.translate(u"scripts", u"No se ha establecido el NIF/IVA")'
1755         Member: end-gen
1755        Value: end-gen
1755        InstructionUpdate: line: 'error = util.translate(u"scripts", u"No se ha establecido el NIF/IVA")'
1755      <-Source: line: 'error = util.translate(u"scripts", u"No se ha establecido el NIF/IVA")'
1755     <--If: line: 'error = util.translate(u"scripts", u"No se ha establecido el NIF/IVA")'
1755    <---Source: line: 'error = util.translate(u"scripts", u"No se ha establecido el NIF/IVA")'
1755   <----Function: line: 'error = util.translate(u"scripts", u"No se ha establecido el NIF/IVA")'
1755  <-----Source: line: 'error = util.translate(u"scripts", u"No se ha establecido el NIF/IVA")'
1755 <------Class: line: 'error = util.translate(u"scripts", u"No se ha establecido el NIF/IVA")'
1755<-------Source: line: 'error = util.translate(u"scripts", u"No se ha establecido el NIF/IVA")'
1756       InstructionUpdate: end-gen
1756       InstructionFlow: begin-gen
1756        Value: begin-gen
1756         Identifier: begin-gen
1756          Identifier: expr: 'error'
1756        <-Value: expr: 'error'
1756         Identifier: end-gen
1756        Value: end-gen
1756        InstructionFlow: line: 'return error'
1756      <-Source: line: 'return error'
1756     <--If: line: 'return error'
1756    <---Source: line: 'return error'
1756   <----Function: line: 'return error'
1756  <-----Source: line: 'return error'
1756 <------Class: line: 'return error'
1756<-------Source: line: 'return error'
1757       InstructionFlow: end-gen
1757      Source: end-gen
1757      If: end: 'block-if'
1757    <-Source: end: 'block-if'
1757   <--Function: end: 'block-if'
1757  <---Source: end: 'block-if'
1757 <----Class: end: 'block-if'
1757<-----Source: end: 'block-if'
1757     If: end-gen
1757     DeclarationBlock: begin-gen
1757      Variable: begin-gen
1757       Variable: expr: 'codPais'
1757       Variable: expr: '='
1757       Value: begin-gen
1757        Member: begin-gen
1757         Identifier: begin-gen
1757          Identifier: expr: 'nifIva'
1757         Identifier: end-gen
1757         FunctionCall: begin-gen
1757          Value: begin-gen
1757           Constant: begin-gen
1757            Constant: ctype: 'Number' -> '2'
1757            Constant: expr: '2'
1757          <-Value: expr: '2'
1757           Constant: end-gen
1757          Value: end-gen
1757          FunctionCall: expr: 'left(2)'
1757         FunctionCall: end-gen
1757         Member: expr: 'nifIva[0:2]'
1757       <-Value: expr: 'nifIva[0:2]'
1757      <--Variable: expr: 'nifIva[0:2]'
1757        Member: end-gen
1757       Value: end-gen
1757      Variable: end-gen
1757      DeclarationBlock: line: 'codPais = nifIva[0:2]'
1757    <-Source: line: 'codPais = nifIva[0:2]'
1757   <--Function: line: 'codPais = nifIva[0:2]'
1757  <---Source: line: 'codPais = nifIva[0:2]'
1757 <----Class: line: 'codPais = nifIva[0:2]'
1757<-----Source: line: 'codPais = nifIva[0:2]'
1758     DeclarationBlock: end-gen
1758     DeclarationBlock: begin-gen
1758      Variable: begin-gen
1758       Variable: expr: 'pais'
1758       Variable: expr: '='
1758       Variable: expr: '""'
1758      Variable: end-gen
1758      DeclarationBlock: line: 'pais = ""'
1758    <-Source: line: 'pais = ""'
1758   <--Function: line: 'pais = ""'
1758  <---Source: line: 'pais = ""'
1758 <----Class: line: 'pais = ""'
1758<-----Source: line: 'pais = ""'
1759     DeclarationBlock: end-gen
1759     DeclarationBlock: begin-gen
1759      Variable: begin-gen
1759       Variable: expr: 'longPosibles'
1759       Variable: expr: '='
1759       Variable: expr: 'qsatype.Array()'
1759      Variable: end-gen
1759      DeclarationBlock: line: 'longPosibles = qsatype.Array()'
1759    <-Source: line: 'longPosibles = qsatype.Array()'
1759   <--Function: line: 'longPosibles = qsatype.Array()'
1759  <---Source: line: 'longPosibles = qsatype.Array()'
1759 <----Class: line: 'longPosibles = qsatype.Array()'
1759<-----Source: line: 'longPosibles = qsatype.Array()'
1760     DeclarationBlock: end-gen
1760     Switch: begin-gen
1760      Value: begin-gen
1760       Identifier: begin-gen
1760        Identifier: expr: 'codPais'
1760      <-Value: expr: 'codPais'
1760       Identifier: end-gen
1760      Value: end-gen
1760      Switch: line: 's4c_when = codPais'
1760    <-Source: line: 's4c_when = codPais'
1760   <--Function: line: 's4c_when = codPais'
1760  <---Source: line: 's4c_when = codPais'
1760 <----Class: line: 's4c_when = codPais'
1760<-----Source: line: 's4c_when = codPais'
1761      Switch: line: 's4c_do_work,s4c_work_done = False,False'
1761    <-Source: line: 's4c_do_work,s4c_work_done = False,False'
1761   <--Function: line: 's4c_do_work,s4c_work_done = False,False'
1761  <---Source: line: 's4c_do_work,s4c_work_done = False,False'
1761 <----Class: line: 's4c_do_work,s4c_work_done = False,False'
1761<-----Source: line: 's4c_do_work,s4c_work_done = False,False'
1762      Value: begin-gen
1762       Constant: begin-gen
1762        Constant: ctype: 'String' -> 'DE'
1762        Constant: expr: 'u"DE"'
1762      <-Value: expr: 'u"DE"'
1762       Constant: end-gen
1762      Value: end-gen
1762      Switch: line: 'if s4c_when == u"DE": s4c_do_work,s4c_work_done = True,True'
1762    <-Source: line: 'if s4c_when == u"DE": s4c_do_work,s4c_work_done = True,True'
1762   <--Function: line: 'if s4c_when == u"DE": s4c_do_work,s4c_work_done = True,True'
1762  <---Source: line: 'if s4c_when == u"DE": s4c_do_work,s4c_work_done = True,True'
1762 <----Class: line: 'if s4c_when == u"DE": s4c_do_work,s4c_work_done = True,True'
1762<-----Source: line: 'if s4c_when == u"DE": s4c_do_work,s4c_work_done = True,True'
1763      Switch: line: 'if s4c_do_work:'
1763    <-Source: line: 'if s4c_do_work:'
1763   <--Function: line: 'if s4c_do_work:'
1763  <---Source: line: 'if s4c_do_work:'
1763 <----Class: line: 'if s4c_do_work:'
1763<-----Source: line: 'if s4c_do_work:'
1764      Switch: begin: 'block-if'
1764    <-Source: begin: 'block-if'
1764   <--Function: begin: 'block-if'
1764  <---Source: begin: 'block-if'
1764 <----Class: begin: 'block-if'
1764<-----Source: begin: 'block-if'
1764      Source: begin-gen
1764       InstructionUpdate: begin-gen
1764        Identifier: begin-gen
1764         Identifier: expr: 'longPosibles'
1764        Identifier: end-gen
1764        OpUpdate: begin-gen
1764         OpUpdate: expr: '='
1764        OpUpdate: end-gen
1764        Value: begin-gen
1764         Constant: begin-gen
1764          Constant: ctype: None -> None
1764          Value: begin-gen
1764           Constant: begin-gen
1764            Constant: ctype: 'Number' -> '9'
1764            Constant: expr: '9'
1764          <-Value: expr: '9'
1764           Constant: end-gen
1764          Value: end-gen
1764          Constant: expr: 'qsatype.Array([9])'
1764        <-Value: expr: 'qsatype.Array([9])'
1764         Constant: end-gen
1764        Value: end-gen
1764        InstructionUpdate: line: 'longPosibles = qsatype.Array([9])'
1764      <-Source: line: 'longPosibles = qsatype.Array([9])'
1764     <--Switch: line: 'longPosibles = qsatype.Array([9])'
1764    <---Source: line: 'longPosibles = qsatype.Array([9])'
1764   <----Function: line: 'longPosibles = qsatype.Array([9])'
1764  <-----Source: line: 'longPosibles = qsatype.Array([9])'
1764 <------Class: line: 'longPosibles = qsatype.Array([9])'
1764<-------Source: line: 'longPosibles = qsatype.Array([9])'
1765       InstructionUpdate: end-gen
1765       InstructionUpdate: begin-gen
1765        Identifier: begin-gen
1765         Identifier: expr: 'pais'
1765        Identifier: end-gen
1765        OpUpdate: begin-gen
1765         OpUpdate: expr: '='
1765        OpUpdate: end-gen
1765        Value: begin-gen
1765         Member: begin-gen
1765          Identifier: begin-gen
1765           Identifier: expr: 'util'
1765          Identifier: end-gen
1765          FunctionCall: begin-gen
1765           Value: begin-gen
1765            Constant: begin-gen
1765             Constant: ctype: 'String' -> 'scripts'
1765             Constant: expr: 'u"scripts"'
1765           <-Value: expr: 'u"scripts"'
1765            Constant: end-gen
1765           Value: end-gen
1765           Value: begin-gen
1765            Constant: begin-gen
1765             Constant: ctype: 'String' -> 'Alemania'
1765             Constant: expr: 'u"Alemania"'
1765           <-Value: expr: 'u"Alemania"'
1765            Constant: end-gen
1765           Value: end-gen
1765           FunctionCall: expr: 'translate(u"scripts", u"Alemania")'
1765          FunctionCall: end-gen
1765          Member: expr: 'util.translate(u"scripts", u"Alemania")'
1765        <-Value: expr: 'util.translate(u"scripts", u"Alemania")'
1765         Member: end-gen
1765        Value: end-gen
1765        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Alemania")'
1765      <-Source: line: 'pais = util.translate(u"scripts", u"Alemania")'
1765     <--Switch: line: 'pais = util.translate(u"scripts", u"Alemania")'
1765    <---Source: line: 'pais = util.translate(u"scripts", u"Alemania")'
1765   <----Function: line: 'pais = util.translate(u"scripts", u"Alemania")'
1765  <-----Source: line: 'pais = util.translate(u"scripts", u"Alemania")'
1765 <------Class: line: 'pais = util.translate(u"scripts", u"Alemania")'
1765<-------Source: line: 'pais = util.translate(u"scripts", u"Alemania")'
1766       InstructionUpdate: end-gen
1766       InstructionFlow: begin-gen
1766        InstructionFlow: break: 'break '
1766      <-Source: break: 'break '
1766     <--Switch: line: 's4c_do_work = False # BREAK'
1766    <---Source: line: 's4c_do_work = False # BREAK'
1766   <----Function: line: 's4c_do_work = False # BREAK'
1766  <-----Source: line: 's4c_do_work = False # BREAK'
1766 <------Class: line: 's4c_do_work = False # BREAK'
1766<-------Source: line: 's4c_do_work = False # BREAK'
1767       InstructionFlow: end-gen
1767      Source: end-gen
1767      Switch: end: 'block-if'
1767    <-Source: end: 'block-if'
1767   <--Function: end: 'block-if'
1767  <---Source: end: 'block-if'
1767 <----Class: end: 'block-if'
1767<-----Source: end: 'block-if'
1767      Value: begin-gen
1767       Constant: begin-gen
1767        Constant: ctype: 'String' -> 'AT'
1767        Constant: expr: 'u"AT"'
1767      <-Value: expr: 'u"AT"'
1767       Constant: end-gen
1767      Value: end-gen
1767      Switch: line: 'if s4c_when == u"AT": s4c_do_work,s4c_work_done = True,True'
1767    <-Source: line: 'if s4c_when == u"AT": s4c_do_work,s4c_work_done = True,True'
1767   <--Function: line: 'if s4c_when == u"AT": s4c_do_work,s4c_work_done = True,True'
1767  <---Source: line: 'if s4c_when == u"AT": s4c_do_work,s4c_work_done = True,True'
1767 <----Class: line: 'if s4c_when == u"AT": s4c_do_work,s4c_work_done = True,True'
1767<-----Source: line: 'if s4c_when == u"AT": s4c_do_work,s4c_work_done = True,True'
1768      Switch: line: 'if s4c_do_work:'
1768    <-Source: line: 'if s4c_do_work:'
1768   <--Function: line: 'if s4c_do_work:'
1768  <---Source: line: 'if s4c_do_work:'
1768 <----Class: line: 'if s4c_do_work:'
1768<-----Source: line: 'if s4c_do_work:'
1769      Switch: begin: 'block-if'
1769    <-Source: begin: 'block-if'
1769   <--Function: begin: 'block-if'
1769  <---Source: begin: 'block-if'
1769 <----Class: begin: 'block-if'
1769<-----Source: begin: 'block-if'
1769      Source: begin-gen
1769       InstructionUpdate: begin-gen
1769        Identifier: begin-gen
1769         Identifier: expr: 'longPosibles'
1769        Identifier: end-gen
1769        OpUpdate: begin-gen
1769         OpUpdate: expr: '='
1769        OpUpdate: end-gen
1769        Value: begin-gen
1769         Constant: begin-gen
1769          Constant: ctype: None -> None
1769          Value: begin-gen
1769           Constant: begin-gen
1769            Constant: ctype: 'Number' -> '9'
1769            Constant: expr: '9'
1769          <-Value: expr: '9'
1769           Constant: end-gen
1769          Value: end-gen
1769          Constant: expr: 'qsatype.Array([9])'
1769        <-Value: expr: 'qsatype.Array([9])'
1769         Constant: end-gen
1769        Value: end-gen
1769        InstructionUpdate: line: 'longPosibles = qsatype.Array([9])'
1769      <-Source: line: 'longPosibles = qsatype.Array([9])'
1769     <--Switch: line: 'longPosibles = qsatype.Array([9])'
1769    <---Source: line: 'longPosibles = qsatype.Array([9])'
1769   <----Function: line: 'longPosibles = qsatype.Array([9])'
1769  <-----Source: line: 'longPosibles = qsatype.Array([9])'
1769 <------Class: line: 'longPosibles = qsatype.Array([9])'
1769<-------Source: line: 'longPosibles = qsatype.Array([9])'
1770       InstructionUpdate: end-gen
1770       InstructionUpdate: begin-gen
1770        Identifier: begin-gen
1770         Identifier: expr: 'pais'
1770        Identifier: end-gen
1770        OpUpdate: begin-gen
1770         OpUpdate: expr: '='
1770        OpUpdate: end-gen
1770        Value: begin-gen
1770         Member: begin-gen
1770          Identifier: begin-gen
1770           Identifier: expr: 'util'
1770          Identifier: end-gen
1770          FunctionCall: begin-gen
1770           Value: begin-gen
1770            Constant: begin-gen
1770             Constant: ctype: 'String' -> 'scripts'
1770             Constant: expr: 'u"scripts"'
1770           <-Value: expr: 'u"scripts"'
1770            Constant: end-gen
1770           Value: end-gen
1770           Value: begin-gen
1770            Constant: begin-gen
1770             Constant: ctype: 'String' -> 'Austria'
1770             Constant: expr: 'u"Austria"'
1770           <-Value: expr: 'u"Austria"'
1770            Constant: end-gen
1770           Value: end-gen
1770           FunctionCall: expr: 'translate(u"scripts", u"Austria")'
1770          FunctionCall: end-gen
1770          Member: expr: 'util.translate(u"scripts", u"Austria")'
1770        <-Value: expr: 'util.translate(u"scripts", u"Austria")'
1770         Member: end-gen
1770        Value: end-gen
1770        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Austria")'
1770      <-Source: line: 'pais = util.translate(u"scripts", u"Austria")'
1770     <--Switch: line: 'pais = util.translate(u"scripts", u"Austria")'
1770    <---Source: line: 'pais = util.translate(u"scripts", u"Austria")'
1770   <----Function: line: 'pais = util.translate(u"scripts", u"Austria")'
1770  <-----Source: line: 'pais = util.translate(u"scripts", u"Austria")'
1770 <------Class: line: 'pais = util.translate(u"scripts", u"Austria")'
1770<-------Source: line: 'pais = util.translate(u"scripts", u"Austria")'
1771       InstructionUpdate: end-gen
1771       InstructionFlow: begin-gen
1771        InstructionFlow: break: 'break '
1771      <-Source: break: 'break '
1771     <--Switch: line: 's4c_do_work = False # BREAK'
1771    <---Source: line: 's4c_do_work = False # BREAK'
1771   <----Function: line: 's4c_do_work = False # BREAK'
1771  <-----Source: line: 's4c_do_work = False # BREAK'
1771 <------Class: line: 's4c_do_work = False # BREAK'
1771<-------Source: line: 's4c_do_work = False # BREAK'
1772       InstructionFlow: end-gen
1772      Source: end-gen
1772      Switch: end: 'block-if'
1772    <-Source: end: 'block-if'
1772   <--Function: end: 'block-if'
1772  <---Source: end: 'block-if'
1772 <----Class: end: 'block-if'
1772<-----Source: end: 'block-if'
1772      Value: begin-gen
1772       Constant: begin-gen
1772        Constant: ctype: 'String' -> 'BE'
1772        Constant: expr: 'u"BE"'
1772      <-Value: expr: 'u"BE"'
1772       Constant: end-gen
1772      Value: end-gen
1772      Switch: line: 'if s4c_when == u"BE": s4c_do_work,s4c_work_done = True,True'
1772    <-Source: line: 'if s4c_when == u"BE": s4c_do_work,s4c_work_done = True,True'
1772   <--Function: line: 'if s4c_when == u"BE": s4c_do_work,s4c_work_done = True,True'
1772  <---Source: line: 'if s4c_when == u"BE": s4c_do_work,s4c_work_done = True,True'
1772 <----Class: line: 'if s4c_when == u"BE": s4c_do_work,s4c_work_done = True,True'
1772<-----Source: line: 'if s4c_when == u"BE": s4c_do_work,s4c_work_done = True,True'
1773      Switch: line: 'if s4c_do_work:'
1773    <-Source: line: 'if s4c_do_work:'
1773   <--Function: line: 'if s4c_do_work:'
1773  <---Source: line: 'if s4c_do_work:'
1773 <----Class: line: 'if s4c_do_work:'
1773<-----Source: line: 'if s4c_do_work:'
1774      Switch: begin: 'block-if'
1774    <-Source: begin: 'block-if'
1774   <--Function: begin: 'block-if'
1774  <---Source: begin: 'block-if'
1774 <----Class: begin: 'block-if'
1774<-----Source: begin: 'block-if'
1774      Source: begin-gen
1774       InstructionUpdate: begin-gen
1774        Identifier: begin-gen
1774         Identifier: expr: 'longPosibles'
1774        Identifier: end-gen
1774        OpUpdate: begin-gen
1774         OpUpdate: expr: '='
1774        OpUpdate: end-gen
1774        Value: begin-gen
1774         Constant: begin-gen
1774          Constant: ctype: None -> None
1774          Value: begin-gen
1774           Constant: begin-gen
1774            Constant: ctype: 'Number' -> '9'
1774            Constant: expr: '9'
1774          <-Value: expr: '9'
1774           Constant: end-gen
1774          Value: end-gen
1774          Value: begin-gen
1774           Constant: begin-gen
1774            Constant: ctype: 'Number' -> '10'
1774            Constant: expr: '10'
1774          <-Value: expr: '10'
1774           Constant: end-gen
1774          Value: end-gen
1774          Constant: expr: 'qsatype.Array([9, 10])'
1774        <-Value: expr: 'qsatype.Array([9, 10])'
1774         Constant: end-gen
1774        Value: end-gen
1774        InstructionUpdate: line: 'longPosibles = qsatype.Array([9, 10])'
1774      <-Source: line: 'longPosibles = qsatype.Array([9, 10])'
1774     <--Switch: line: 'longPosibles = qsatype.Array([9, 10])'
1774    <---Source: line: 'longPosibles = qsatype.Array([9, 10])'
1774   <----Function: line: 'longPosibles = qsatype.Array([9, 10])'
1774  <-----Source: line: 'longPosibles = qsatype.Array([9, 10])'
1774 <------Class: line: 'longPosibles = qsatype.Array([9, 10])'
1774<-------Source: line: 'longPosibles = qsatype.Array([9, 10])'
1775       InstructionUpdate: end-gen
1775       InstructionUpdate: begin-gen
1775        Identifier: begin-gen
1775         Identifier: expr: 'pais'
1775        Identifier: end-gen
1775        OpUpdate: begin-gen
1775         OpUpdate: expr: '='
1775        OpUpdate: end-gen
1775        Value: begin-gen
1775         Member: begin-gen
1775          Identifier: begin-gen
1775           Identifier: expr: 'util'
1775          Identifier: end-gen
1775          FunctionCall: begin-gen
1775           Value: begin-gen
1775            Constant: begin-gen
1775             Constant: ctype: 'String' -> 'scripts'
1775             Constant: expr: 'u"scripts"'
1775           <-Value: expr: 'u"scripts"'
1775            Constant: end-gen
1775           Value: end-gen
1775           Value: begin-gen
1775            Constant: begin-gen
1775             Constant: ctype: 'String' -> 'Bélgica'
1775             Constant: expr: 'u"Bélgica"'
1775           <-Value: expr: 'u"Bélgica"'
1775            Constant: end-gen
1775           Value: end-gen
1775           FunctionCall: expr: 'translate(u"scripts", u"Bélgica")'
1775          FunctionCall: end-gen
1775          Member: expr: 'util.translate(u"scripts", u"Bélgica")'
1775        <-Value: expr: 'util.translate(u"scripts", u"Bélgica")'
1775         Member: end-gen
1775        Value: end-gen
1775        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Bélgica")'
1775      <-Source: line: 'pais = util.translate(u"scripts", u"Bélgica")'
1775     <--Switch: line: 'pais = util.translate(u"scripts", u"Bélgica")'
1775    <---Source: line: 'pais = util.translate(u"scripts", u"Bélgica")'
1775   <----Function: line: 'pais = util.translate(u"scripts", u"Bélgica")'
1775  <-----Source: line: 'pais = util.translate(u"scripts", u"Bélgica")'
1775 <------Class: line: 'pais = util.translate(u"scripts", u"Bélgica")'
1775<-------Source: line: 'pais = util.translate(u"scripts", u"Bélgica")'
1776       InstructionUpdate: end-gen
1776       InstructionFlow: begin-gen
1776        InstructionFlow: break: 'break '
1776      <-Source: break: 'break '
1776     <--Switch: line: 's4c_do_work = False # BREAK'
1776    <---Source: line: 's4c_do_work = False # BREAK'
1776   <----Function: line: 's4c_do_work = False # BREAK'
1776  <-----Source: line: 's4c_do_work = False # BREAK'
1776 <------Class: line: 's4c_do_work = False # BREAK'
1776<-------Source: line: 's4c_do_work = False # BREAK'
1777       InstructionFlow: end-gen
1777      Source: end-gen
1777      Switch: end: 'block-if'
1777    <-Source: end: 'block-if'
1777   <--Function: end: 'block-if'
1777  <---Source: end: 'block-if'
1777 <----Class: end: 'block-if'
1777<-----Source: end: 'block-if'
1777      Value: begin-gen
1777       Constant: begin-gen
1777        Constant: ctype: 'String' -> 'BG'
1777        Constant: expr: 'u"BG"'
1777      <-Value: expr: 'u"BG"'
1777       Constant: end-gen
1777      Value: end-gen
1777      Switch: line: 'if s4c_when == u"BG": s4c_do_work,s4c_work_done = True,True'
1777    <-Source: line: 'if s4c_when == u"BG": s4c_do_work,s4c_work_done = True,True'
1777   <--Function: line: 'if s4c_when == u"BG": s4c_do_work,s4c_work_done = True,True'
1777  <---Source: line: 'if s4c_when == u"BG": s4c_do_work,s4c_work_done = True,True'
1777 <----Class: line: 'if s4c_when == u"BG": s4c_do_work,s4c_work_done = True,True'
1777<-----Source: line: 'if s4c_when == u"BG": s4c_do_work,s4c_work_done = True,True'
1778      Switch: line: 'if s4c_do_work:'
1778    <-Source: line: 'if s4c_do_work:'
1778   <--Function: line: 'if s4c_do_work:'
1778  <---Source: line: 'if s4c_do_work:'
1778 <----Class: line: 'if s4c_do_work:'
1778<-----Source: line: 'if s4c_do_work:'
1779      Switch: begin: 'block-if'
1779    <-Source: begin: 'block-if'
1779   <--Function: begin: 'block-if'
1779  <---Source: begin: 'block-if'
1779 <----Class: begin: 'block-if'
1779<-----Source: begin: 'block-if'
1779      Source: begin-gen
1779       InstructionUpdate: begin-gen
1779        Identifier: begin-gen
1779         Identifier: expr: 'longPosibles'
1779        Identifier: end-gen
1779        OpUpdate: begin-gen
1779         OpUpdate: expr: '='
1779        OpUpdate: end-gen
1779        Value: begin-gen
1779         Constant: begin-gen
1779          Constant: ctype: None -> None
1779          Value: begin-gen
1779           Constant: begin-gen
1779            Constant: ctype: 'Number' -> '9'
1779            Constant: expr: '9'
1779          <-Value: expr: '9'
1779           Constant: end-gen
1779          Value: end-gen
1779          Value: begin-gen
1779           Constant: begin-gen
1779            Constant: ctype: 'Number' -> '10'
1779            Constant: expr: '10'
1779          <-Value: expr: '10'
1779           Constant: end-gen
1779          Value: end-gen
1779          Constant: expr: 'qsatype.Array([9, 10])'
1779        <-Value: expr: 'qsatype.Array([9, 10])'
1779         Constant: end-gen
1779        Value: end-gen
1779        InstructionUpdate: line: 'longPosibles = qsatype.Array([9, 10])'
1779      <-Source: line: 'longPosibles = qsatype.Array([9, 10])'
1779     <--Switch: line: 'longPosibles = qsatype.Array([9, 10])'
1779    <---Source: line: 'longPosibles = qsatype.Array([9, 10])'
1779   <----Function: line: 'longPosibles = qsatype.Array([9, 10])'
1779  <-----Source: line: 'longPosibles = qsatype.Array([9, 10])'
1779 <------Class: line: 'longPosibles = qsatype.Array([9, 10])'
1779<-------Source: line: 'longPosibles = qsatype.Array([9, 10])'
1780       InstructionUpdate: end-gen
1780       InstructionUpdate: begin-gen
1780        Identifier: begin-gen
1780         Identifier: expr: 'pais'
1780        Identifier: end-gen
1780        OpUpdate: begin-gen
1780         OpUpdate: expr: '='
1780        OpUpdate: end-gen
1780        Value: begin-gen
1780         Member: begin-gen
1780          Identifier: begin-gen
1780           Identifier: expr: 'util'
1780          Identifier: end-gen
1780          FunctionCall: begin-gen
1780           Value: begin-gen
1780            Constant: begin-gen
1780             Constant: ctype: 'String' -> 'scripts'
1780             Constant: expr: 'u"scripts"'
1780           <-Value: expr: 'u"scripts"'
1780            Constant: end-gen
1780           Value: end-gen
1780           Value: begin-gen
1780            Constant: begin-gen
1780             Constant: ctype: 'String' -> 'Bulgaria'
1780             Constant: expr: 'u"Bulgaria"'
1780           <-Value: expr: 'u"Bulgaria"'
1780            Constant: end-gen
1780           Value: end-gen
1780           FunctionCall: expr: 'translate(u"scripts", u"Bulgaria")'
1780          FunctionCall: end-gen
1780          Member: expr: 'util.translate(u"scripts", u"Bulgaria")'
1780        <-Value: expr: 'util.translate(u"scripts", u"Bulgaria")'
1780         Member: end-gen
1780        Value: end-gen
1780        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Bulgaria")'
1780      <-Source: line: 'pais = util.translate(u"scripts", u"Bulgaria")'
1780     <--Switch: line: 'pais = util.translate(u"scripts", u"Bulgaria")'
1780    <---Source: line: 'pais = util.translate(u"scripts", u"Bulgaria")'
1780   <----Function: line: 'pais = util.translate(u"scripts", u"Bulgaria")'
1780  <-----Source: line: 'pais = util.translate(u"scripts", u"Bulgaria")'
1780 <------Class: line: 'pais = util.translate(u"scripts", u"Bulgaria")'
1780<-------Source: line: 'pais = util.translate(u"scripts", u"Bulgaria")'
1781       InstructionUpdate: end-gen
1781       InstructionFlow: begin-gen
1781        InstructionFlow: break: 'break '
1781      <-Source: break: 'break '
1781     <--Switch: line: 's4c_do_work = False # BREAK'
1781    <---Source: line: 's4c_do_work = False # BREAK'
1781   <----Function: line: 's4c_do_work = False # BREAK'
1781  <-----Source: line: 's4c_do_work = False # BREAK'
1781 <------Class: line: 's4c_do_work = False # BREAK'
1781<-------Source: line: 's4c_do_work = False # BREAK'
1782       InstructionFlow: end-gen
1782      Source: end-gen
1782      Switch: end: 'block-if'
1782    <-Source: end: 'block-if'
1782   <--Function: end: 'block-if'
1782  <---Source: end: 'block-if'
1782 <----Class: end: 'block-if'
1782<-----Source: end: 'block-if'
1782      Value: begin-gen
1782       Constant: begin-gen
1782        Constant: ctype: 'String' -> 'CY'
1782        Constant: expr: 'u"CY"'
1782      <-Value: expr: 'u"CY"'
1782       Constant: end-gen
1782      Value: end-gen
1782      Switch: line: 'if s4c_when == u"CY": s4c_do_work,s4c_work_done = True,True'
1782    <-Source: line: 'if s4c_when == u"CY": s4c_do_work,s4c_work_done = True,True'
1782   <--Function: line: 'if s4c_when == u"CY": s4c_do_work,s4c_work_done = True,True'
1782  <---Source: line: 'if s4c_when == u"CY": s4c_do_work,s4c_work_done = True,True'
1782 <----Class: line: 'if s4c_when == u"CY": s4c_do_work,s4c_work_done = True,True'
1782<-----Source: line: 'if s4c_when == u"CY": s4c_do_work,s4c_work_done = True,True'
1783      Switch: line: 'if s4c_do_work:'
1783    <-Source: line: 'if s4c_do_work:'
1783   <--Function: line: 'if s4c_do_work:'
1783  <---Source: line: 'if s4c_do_work:'
1783 <----Class: line: 'if s4c_do_work:'
1783<-----Source: line: 'if s4c_do_work:'
1784      Switch: begin: 'block-if'
1784    <-Source: begin: 'block-if'
1784   <--Function: begin: 'block-if'
1784  <---Source: begin: 'block-if'
1784 <----Class: begin: 'block-if'
1784<-----Source: begin: 'block-if'
1784      Source: begin-gen
1784       InstructionUpdate: begin-gen
1784        Identifier: begin-gen
1784         Identifier: expr: 'longPosibles'
1784        Identifier: end-gen
1784        OpUpdate: begin-gen
1784         OpUpdate: expr: '='
1784        OpUpdate: end-gen
1784        Value: begin-gen
1784         Constant: begin-gen
1784          Constant: ctype: None -> None
1784          Value: begin-gen
1784           Constant: begin-gen
1784            Constant: ctype: 'Number' -> '9'
1784            Constant: expr: '9'
1784          <-Value: expr: '9'
1784           Constant: end-gen
1784          Value: end-gen
1784          Constant: expr: 'qsatype.Array([9])'
1784        <-Value: expr: 'qsatype.Array([9])'
1784         Constant: end-gen
1784        Value: end-gen
1784        InstructionUpdate: line: 'longPosibles = qsatype.Array([9])'
1784      <-Source: line: 'longPosibles = qsatype.Array([9])'
1784     <--Switch: line: 'longPosibles = qsatype.Array([9])'
1784    <---Source: line: 'longPosibles = qsatype.Array([9])'
1784   <----Function: line: 'longPosibles = qsatype.Array([9])'
1784  <-----Source: line: 'longPosibles = qsatype.Array([9])'
1784 <------Class: line: 'longPosibles = qsatype.Array([9])'
1784<-------Source: line: 'longPosibles = qsatype.Array([9])'
1785       InstructionUpdate: end-gen
1785       InstructionUpdate: begin-gen
1785        Identifier: begin-gen
1785         Identifier: expr: 'pais'
1785        Identifier: end-gen
1785        OpUpdate: begin-gen
1785         OpUpdate: expr: '='
1785        OpUpdate: end-gen
1785        Value: begin-gen
1785         Member: begin-gen
1785          Identifier: begin-gen
1785           Identifier: expr: 'util'
1785          Identifier: end-gen
1785          FunctionCall: begin-gen
1785           Value: begin-gen
1785            Constant: begin-gen
1785             Constant: ctype: 'String' -> 'scripts'
1785             Constant: expr: 'u"scripts"'
1785           <-Value: expr: 'u"scripts"'
1785            Constant: end-gen
1785           Value: end-gen
1785           Value: begin-gen
1785            Constant: begin-gen
1785             Constant: ctype: 'String' -> 'Chipre'
1785             Constant: expr: 'u"Chipre"'
1785           <-Value: expr: 'u"Chipre"'
1785            Constant: end-gen
1785           Value: end-gen
1785           FunctionCall: expr: 'translate(u"scripts", u"Chipre")'
1785          FunctionCall: end-gen
1785          Member: expr: 'util.translate(u"scripts", u"Chipre")'
1785        <-Value: expr: 'util.translate(u"scripts", u"Chipre")'
1785         Member: end-gen
1785        Value: end-gen
1785        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Chipre")'
1785      <-Source: line: 'pais = util.translate(u"scripts", u"Chipre")'
1785     <--Switch: line: 'pais = util.translate(u"scripts", u"Chipre")'
1785    <---Source: line: 'pais = util.translate(u"scripts", u"Chipre")'
1785   <----Function: line: 'pais = util.translate(u"scripts", u"Chipre")'
1785  <-----Source: line: 'pais = util.translate(u"scripts", u"Chipre")'
1785 <------Class: line: 'pais = util.translate(u"scripts", u"Chipre")'
1785<-------Source: line: 'pais = util.translate(u"scripts", u"Chipre")'
1786       InstructionUpdate: end-gen
1786       InstructionFlow: begin-gen
1786        InstructionFlow: break: 'break '
1786      <-Source: break: 'break '
1786     <--Switch: line: 's4c_do_work = False # BREAK'
1786    <---Source: line: 's4c_do_work = False # BREAK'
1786   <----Function: line: 's4c_do_work = False # BREAK'
1786  <-----Source: line: 's4c_do_work = False # BREAK'
1786 <------Class: line: 's4c_do_work = False # BREAK'
1786<-------Source: line: 's4c_do_work = False # BREAK'
1787       InstructionFlow: end-gen
1787      Source: end-gen
1787      Switch: end: 'block-if'
1787    <-Source: end: 'block-if'
1787   <--Function: end: 'block-if'
1787  <---Source: end: 'block-if'
1787 <----Class: end: 'block-if'
1787<-----Source: end: 'block-if'
1787      Value: begin-gen
1787       Constant: begin-gen
1787        Constant: ctype: 'String' -> 'CZ'
1787        Constant: expr: 'u"CZ"'
1787      <-Value: expr: 'u"CZ"'
1787       Constant: end-gen
1787      Value: end-gen
1787      Switch: line: 'if s4c_when == u"CZ": s4c_do_work,s4c_work_done = True,True'
1787    <-Source: line: 'if s4c_when == u"CZ": s4c_do_work,s4c_work_done = True,True'
1787   <--Function: line: 'if s4c_when == u"CZ": s4c_do_work,s4c_work_done = True,True'
1787  <---Source: line: 'if s4c_when == u"CZ": s4c_do_work,s4c_work_done = True,True'
1787 <----Class: line: 'if s4c_when == u"CZ": s4c_do_work,s4c_work_done = True,True'
1787<-----Source: line: 'if s4c_when == u"CZ": s4c_do_work,s4c_work_done = True,True'
1788      Switch: line: 'if s4c_do_work:'
1788    <-Source: line: 'if s4c_do_work:'
1788   <--Function: line: 'if s4c_do_work:'
1788  <---Source: line: 'if s4c_do_work:'
1788 <----Class: line: 'if s4c_do_work:'
1788<-----Source: line: 'if s4c_do_work:'
1789      Switch: begin: 'block-if'
1789    <-Source: begin: 'block-if'
1789   <--Function: begin: 'block-if'
1789  <---Source: begin: 'block-if'
1789 <----Class: begin: 'block-if'
1789<-----Source: begin: 'block-if'
1789      Source: begin-gen
1789       InstructionUpdate: begin-gen
1789        Identifier: begin-gen
1789         Identifier: expr: 'longPosibles'
1789        Identifier: end-gen
1789        OpUpdate: begin-gen
1789         OpUpdate: expr: '='
1789        OpUpdate: end-gen
1789        Value: begin-gen
1789         Constant: begin-gen
1789          Constant: ctype: None -> None
1789          Value: begin-gen
1789           Constant: begin-gen
1789            Constant: ctype: 'Number' -> '9'
1789            Constant: expr: '9'
1789          <-Value: expr: '9'
1789           Constant: end-gen
1789          Value: end-gen
1789          Constant: expr: 'qsatype.Array([9])'
1789        <-Value: expr: 'qsatype.Array([9])'
1789         Constant: end-gen
1789        Value: end-gen
1789        InstructionUpdate: line: 'longPosibles = qsatype.Array([9])'
1789      <-Source: line: 'longPosibles = qsatype.Array([9])'
1789     <--Switch: line: 'longPosibles = qsatype.Array([9])'
1789    <---Source: line: 'longPosibles = qsatype.Array([9])'
1789   <----Function: line: 'longPosibles = qsatype.Array([9])'
1789  <-----Source: line: 'longPosibles = qsatype.Array([9])'
1789 <------Class: line: 'longPosibles = qsatype.Array([9])'
1789<-------Source: line: 'longPosibles = qsatype.Array([9])'
1790       InstructionUpdate: end-gen
1790       InstructionUpdate: begin-gen
1790        Identifier: begin-gen
1790         Identifier: expr: 'pais'
1790        Identifier: end-gen
1790        OpUpdate: begin-gen
1790         OpUpdate: expr: '='
1790        OpUpdate: end-gen
1790        Value: begin-gen
1790         Member: begin-gen
1790          Identifier: begin-gen
1790           Identifier: expr: 'util'
1790          Identifier: end-gen
1790          FunctionCall: begin-gen
1790           Value: begin-gen
1790            Constant: begin-gen
1790             Constant: ctype: 'String' -> 'scripts'
1790             Constant: expr: 'u"scripts"'
1790           <-Value: expr: 'u"scripts"'
1790            Constant: end-gen
1790           Value: end-gen
1790           Value: begin-gen
1790            Constant: begin-gen
1790             Constant: ctype: 'String' -> 'Chequia'
1790             Constant: expr: 'u"Chequia"'
1790           <-Value: expr: 'u"Chequia"'
1790            Constant: end-gen
1790           Value: end-gen
1790           FunctionCall: expr: 'translate(u"scripts", u"Chequia")'
1790          FunctionCall: end-gen
1790          Member: expr: 'util.translate(u"scripts", u"Chequia")'
1790        <-Value: expr: 'util.translate(u"scripts", u"Chequia")'
1790         Member: end-gen
1790        Value: end-gen
1790        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Chequia")'
1790      <-Source: line: 'pais = util.translate(u"scripts", u"Chequia")'
1790     <--Switch: line: 'pais = util.translate(u"scripts", u"Chequia")'
1790    <---Source: line: 'pais = util.translate(u"scripts", u"Chequia")'
1790   <----Function: line: 'pais = util.translate(u"scripts", u"Chequia")'
1790  <-----Source: line: 'pais = util.translate(u"scripts", u"Chequia")'
1790 <------Class: line: 'pais = util.translate(u"scripts", u"Chequia")'
1790<-------Source: line: 'pais = util.translate(u"scripts", u"Chequia")'
1791       InstructionUpdate: end-gen
1791       InstructionFlow: begin-gen
1791        InstructionFlow: break: 'break '
1791      <-Source: break: 'break '
1791     <--Switch: line: 's4c_do_work = False # BREAK'
1791    <---Source: line: 's4c_do_work = False # BREAK'
1791   <----Function: line: 's4c_do_work = False # BREAK'
1791  <-----Source: line: 's4c_do_work = False # BREAK'
1791 <------Class: line: 's4c_do_work = False # BREAK'
1791<-------Source: line: 's4c_do_work = False # BREAK'
1792       InstructionFlow: end-gen
1792      Source: end-gen
1792      Switch: end: 'block-if'
1792    <-Source: end: 'block-if'
1792   <--Function: end: 'block-if'
1792  <---Source: end: 'block-if'
1792 <----Class: end: 'block-if'
1792<-----Source: end: 'block-if'
1792      Value: begin-gen
1792       Constant: begin-gen
1792        Constant: ctype: 'String' -> 'DK'
1792        Constant: expr: 'u"DK"'
1792      <-Value: expr: 'u"DK"'
1792       Constant: end-gen
1792      Value: end-gen
1792      Switch: line: 'if s4c_when == u"DK": s4c_do_work,s4c_work_done = True,True'
1792    <-Source: line: 'if s4c_when == u"DK": s4c_do_work,s4c_work_done = True,True'
1792   <--Function: line: 'if s4c_when == u"DK": s4c_do_work,s4c_work_done = True,True'
1792  <---Source: line: 'if s4c_when == u"DK": s4c_do_work,s4c_work_done = True,True'
1792 <----Class: line: 'if s4c_when == u"DK": s4c_do_work,s4c_work_done = True,True'
1792<-----Source: line: 'if s4c_when == u"DK": s4c_do_work,s4c_work_done = True,True'
1793      Switch: line: 'if s4c_do_work:'
1793    <-Source: line: 'if s4c_do_work:'
1793   <--Function: line: 'if s4c_do_work:'
1793  <---Source: line: 'if s4c_do_work:'
1793 <----Class: line: 'if s4c_do_work:'
1793<-----Source: line: 'if s4c_do_work:'
1794      Switch: begin: 'block-if'
1794    <-Source: begin: 'block-if'
1794   <--Function: begin: 'block-if'
1794  <---Source: begin: 'block-if'
1794 <----Class: begin: 'block-if'
1794<-----Source: begin: 'block-if'
1794      Source: begin-gen
1794       InstructionUpdate: begin-gen
1794        Identifier: begin-gen
1794         Identifier: expr: 'longPosibles'
1794        Identifier: end-gen
1794        OpUpdate: begin-gen
1794         OpUpdate: expr: '='
1794        OpUpdate: end-gen
1794        Value: begin-gen
1794         Constant: begin-gen
1794          Constant: ctype: None -> None
1794          Value: begin-gen
1794           Constant: begin-gen
1794            Constant: ctype: 'Number' -> '8'
1794            Constant: expr: '8'
1794          <-Value: expr: '8'
1794           Constant: end-gen
1794          Value: end-gen
1794          Constant: expr: 'qsatype.Array([8])'
1794        <-Value: expr: 'qsatype.Array([8])'
1794         Constant: end-gen
1794        Value: end-gen
1794        InstructionUpdate: line: 'longPosibles = qsatype.Array([8])'
1794      <-Source: line: 'longPosibles = qsatype.Array([8])'
1794     <--Switch: line: 'longPosibles = qsatype.Array([8])'
1794    <---Source: line: 'longPosibles = qsatype.Array([8])'
1794   <----Function: line: 'longPosibles = qsatype.Array([8])'
1794  <-----Source: line: 'longPosibles = qsatype.Array([8])'
1794 <------Class: line: 'longPosibles = qsatype.Array([8])'
1794<-------Source: line: 'longPosibles = qsatype.Array([8])'
1795       InstructionUpdate: end-gen
1795       InstructionUpdate: begin-gen
1795        Identifier: begin-gen
1795         Identifier: expr: 'pais'
1795        Identifier: end-gen
1795        OpUpdate: begin-gen
1795         OpUpdate: expr: '='
1795        OpUpdate: end-gen
1795        Value: begin-gen
1795         Member: begin-gen
1795          Identifier: begin-gen
1795           Identifier: expr: 'util'
1795          Identifier: end-gen
1795          FunctionCall: begin-gen
1795           Value: begin-gen
1795            Constant: begin-gen
1795             Constant: ctype: 'String' -> 'scripts'
1795             Constant: expr: 'u"scripts"'
1795           <-Value: expr: 'u"scripts"'
1795            Constant: end-gen
1795           Value: end-gen
1795           Value: begin-gen
1795            Constant: begin-gen
1795             Constant: ctype: 'String' -> 'Dinamarca'
1795             Constant: expr: 'u"Dinamarca"'
1795           <-Value: expr: 'u"Dinamarca"'
1795            Constant: end-gen
1795           Value: end-gen
1795           FunctionCall: expr: 'translate(u"scripts", u"Dinamarca")'
1795          FunctionCall: end-gen
1795          Member: expr: 'util.translate(u"scripts", u"Dinamarca")'
1795        <-Value: expr: 'util.translate(u"scripts", u"Dinamarca")'
1795         Member: end-gen
1795        Value: end-gen
1795        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Dinamarca")'
1795      <-Source: line: 'pais = util.translate(u"scripts", u"Dinamarca")'
1795     <--Switch: line: 'pais = util.translate(u"scripts", u"Dinamarca")'
1795    <---Source: line: 'pais = util.translate(u"scripts", u"Dinamarca")'
1795   <----Function: line: 'pais = util.translate(u"scripts", u"Dinamarca")'
1795  <-----Source: line: 'pais = util.translate(u"scripts", u"Dinamarca")'
1795 <------Class: line: 'pais = util.translate(u"scripts", u"Dinamarca")'
1795<-------Source: line: 'pais = util.translate(u"scripts", u"Dinamarca")'
1796       InstructionUpdate: end-gen
1796       InstructionFlow: begin-gen
1796        InstructionFlow: break: 'break '
1796      <-Source: break: 'break '
1796     <--Switch: line: 's4c_do_work = False # BREAK'
1796    <---Source: line: 's4c_do_work = False # BREAK'
1796   <----Function: line: 's4c_do_work = False # BREAK'
1796  <-----Source: line: 's4c_do_work = False # BREAK'
1796 <------Class: line: 's4c_do_work = False # BREAK'
1796<-------Source: line: 's4c_do_work = False # BREAK'
1797       InstructionFlow: end-gen
1797      Source: end-gen
1797      Switch: end: 'block-if'
1797    <-Source: end: 'block-if'
1797   <--Function: end: 'block-if'
1797  <---Source: end: 'block-if'
1797 <----Class: end: 'block-if'
1797<-----Source: end: 'block-if'
1797      Value: begin-gen
1797       Constant: begin-gen
1797        Constant: ctype: 'String' -> 'EE'
1797        Constant: expr: 'u"EE"'
1797      <-Value: expr: 'u"EE"'
1797       Constant: end-gen
1797      Value: end-gen
1797      Switch: line: 'if s4c_when == u"EE": s4c_do_work,s4c_work_done = True,True'
1797    <-Source: line: 'if s4c_when == u"EE": s4c_do_work,s4c_work_done = True,True'
1797   <--Function: line: 'if s4c_when == u"EE": s4c_do_work,s4c_work_done = True,True'
1797  <---Source: line: 'if s4c_when == u"EE": s4c_do_work,s4c_work_done = True,True'
1797 <----Class: line: 'if s4c_when == u"EE": s4c_do_work,s4c_work_done = True,True'
1797<-----Source: line: 'if s4c_when == u"EE": s4c_do_work,s4c_work_done = True,True'
1798      Switch: line: 'if s4c_do_work:'
1798    <-Source: line: 'if s4c_do_work:'
1798   <--Function: line: 'if s4c_do_work:'
1798  <---Source: line: 'if s4c_do_work:'
1798 <----Class: line: 'if s4c_do_work:'
1798<-----Source: line: 'if s4c_do_work:'
1799      Switch: begin: 'block-if'
1799    <-Source: begin: 'block-if'
1799   <--Function: begin: 'block-if'
1799  <---Source: begin: 'block-if'
1799 <----Class: begin: 'block-if'
1799<-----Source: begin: 'block-if'
1799      Source: begin-gen
1799       InstructionUpdate: begin-gen
1799        Identifier: begin-gen
1799         Identifier: expr: 'longPosibles'
1799        Identifier: end-gen
1799        OpUpdate: begin-gen
1799         OpUpdate: expr: '='
1799        OpUpdate: end-gen
1799        Value: begin-gen
1799         Constant: begin-gen
1799          Constant: ctype: None -> None
1799          Value: begin-gen
1799           Constant: begin-gen
1799            Constant: ctype: 'Number' -> '9'
1799            Constant: expr: '9'
1799          <-Value: expr: '9'
1799           Constant: end-gen
1799          Value: end-gen
1799          Constant: expr: 'qsatype.Array([9])'
1799        <-Value: expr: 'qsatype.Array([9])'
1799         Constant: end-gen
1799        Value: end-gen
1799        InstructionUpdate: line: 'longPosibles = qsatype.Array([9])'
1799      <-Source: line: 'longPosibles = qsatype.Array([9])'
1799     <--Switch: line: 'longPosibles = qsatype.Array([9])'
1799    <---Source: line: 'longPosibles = qsatype.Array([9])'
1799   <----Function: line: 'longPosibles = qsatype.Array([9])'
1799  <-----Source: line: 'longPosibles = qsatype.Array([9])'
1799 <------Class: line: 'longPosibles = qsatype.Array([9])'
1799<-------Source: line: 'longPosibles = qsatype.Array([9])'
1800       InstructionUpdate: end-gen
1800       InstructionUpdate: begin-gen
1800        Identifier: begin-gen
1800         Identifier: expr: 'pais'
1800        Identifier: end-gen
1800        OpUpdate: begin-gen
1800         OpUpdate: expr: '='
1800        OpUpdate: end-gen
1800        Value: begin-gen
1800         Member: begin-gen
1800          Identifier: begin-gen
1800           Identifier: expr: 'util'
1800          Identifier: end-gen
1800          FunctionCall: begin-gen
1800           Value: begin-gen
1800            Constant: begin-gen
1800             Constant: ctype: 'String' -> 'scripts'
1800             Constant: expr: 'u"scripts"'
1800           <-Value: expr: 'u"scripts"'
1800            Constant: end-gen
1800           Value: end-gen
1800           Value: begin-gen
1800            Constant: begin-gen
1800             Constant: ctype: 'String' -> 'Estonia'
1800             Constant: expr: 'u"Estonia"'
1800           <-Value: expr: 'u"Estonia"'
1800            Constant: end-gen
1800           Value: end-gen
1800           FunctionCall: expr: 'translate(u"scripts", u"Estonia")'
1800          FunctionCall: end-gen
1800          Member: expr: 'util.translate(u"scripts", u"Estonia")'
1800        <-Value: expr: 'util.translate(u"scripts", u"Estonia")'
1800         Member: end-gen
1800        Value: end-gen
1800        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Estonia")'
1800      <-Source: line: 'pais = util.translate(u"scripts", u"Estonia")'
1800     <--Switch: line: 'pais = util.translate(u"scripts", u"Estonia")'
1800    <---Source: line: 'pais = util.translate(u"scripts", u"Estonia")'
1800   <----Function: line: 'pais = util.translate(u"scripts", u"Estonia")'
1800  <-----Source: line: 'pais = util.translate(u"scripts", u"Estonia")'
1800 <------Class: line: 'pais = util.translate(u"scripts", u"Estonia")'
1800<-------Source: line: 'pais = util.translate(u"scripts", u"Estonia")'
1801       InstructionUpdate: end-gen
1801       InstructionFlow: begin-gen
1801        InstructionFlow: break: 'break '
1801      <-Source: break: 'break '
1801     <--Switch: line: 's4c_do_work = False # BREAK'
1801    <---Source: line: 's4c_do_work = False # BREAK'
1801   <----Function: line: 's4c_do_work = False # BREAK'
1801  <-----Source: line: 's4c_do_work = False # BREAK'
1801 <------Class: line: 's4c_do_work = False # BREAK'
1801<-------Source: line: 's4c_do_work = False # BREAK'
1802       InstructionFlow: end-gen
1802      Source: end-gen
1802      Switch: end: 'block-if'
1802    <-Source: end: 'block-if'
1802   <--Function: end: 'block-if'
1802  <---Source: end: 'block-if'
1802 <----Class: end: 'block-if'
1802<-----Source: end: 'block-if'
1802      Value: begin-gen
1802       Constant: begin-gen
1802        Constant: ctype: 'String' -> 'FI'
1802        Constant: expr: 'u"FI"'
1802      <-Value: expr: 'u"FI"'
1802       Constant: end-gen
1802      Value: end-gen
1802      Switch: line: 'if s4c_when == u"FI": s4c_do_work,s4c_work_done = True,True'
1802    <-Source: line: 'if s4c_when == u"FI": s4c_do_work,s4c_work_done = True,True'
1802   <--Function: line: 'if s4c_when == u"FI": s4c_do_work,s4c_work_done = True,True'
1802  <---Source: line: 'if s4c_when == u"FI": s4c_do_work,s4c_work_done = True,True'
1802 <----Class: line: 'if s4c_when == u"FI": s4c_do_work,s4c_work_done = True,True'
1802<-----Source: line: 'if s4c_when == u"FI": s4c_do_work,s4c_work_done = True,True'
1803      Switch: line: 'if s4c_do_work:'
1803    <-Source: line: 'if s4c_do_work:'
1803   <--Function: line: 'if s4c_do_work:'
1803  <---Source: line: 'if s4c_do_work:'
1803 <----Class: line: 'if s4c_do_work:'
1803<-----Source: line: 'if s4c_do_work:'
1804      Switch: begin: 'block-if'
1804    <-Source: begin: 'block-if'
1804   <--Function: begin: 'block-if'
1804  <---Source: begin: 'block-if'
1804 <----Class: begin: 'block-if'
1804<-----Source: begin: 'block-if'
1804      Source: begin-gen
1804       InstructionUpdate: begin-gen
1804        Identifier: begin-gen
1804         Identifier: expr: 'longPosibles'
1804        Identifier: end-gen
1804        OpUpdate: begin-gen
1804         OpUpdate: expr: '='
1804        OpUpdate: end-gen
1804        Value: begin-gen
1804         Constant: begin-gen
1804          Constant: ctype: None -> None
1804          Value: begin-gen
1804           Constant: begin-gen
1804            Constant: ctype: 'Number' -> '8'
1804            Constant: expr: '8'
1804          <-Value: expr: '8'
1804           Constant: end-gen
1804          Value: end-gen
1804          Constant: expr: 'qsatype.Array([8])'
1804        <-Value: expr: 'qsatype.Array([8])'
1804         Constant: end-gen
1804        Value: end-gen
1804        InstructionUpdate: line: 'longPosibles = qsatype.Array([8])'
1804      <-Source: line: 'longPosibles = qsatype.Array([8])'
1804     <--Switch: line: 'longPosibles = qsatype.Array([8])'
1804    <---Source: line: 'longPosibles = qsatype.Array([8])'
1804   <----Function: line: 'longPosibles = qsatype.Array([8])'
1804  <-----Source: line: 'longPosibles = qsatype.Array([8])'
1804 <------Class: line: 'longPosibles = qsatype.Array([8])'
1804<-------Source: line: 'longPosibles = qsatype.Array([8])'
1805       InstructionUpdate: end-gen
1805       InstructionUpdate: begin-gen
1805        Identifier: begin-gen
1805         Identifier: expr: 'pais'
1805        Identifier: end-gen
1805        OpUpdate: begin-gen
1805         OpUpdate: expr: '='
1805        OpUpdate: end-gen
1805        Value: begin-gen
1805         Member: begin-gen
1805          Identifier: begin-gen
1805           Identifier: expr: 'util'
1805          Identifier: end-gen
1805          FunctionCall: begin-gen
1805           Value: begin-gen
1805            Constant: begin-gen
1805             Constant: ctype: 'String' -> 'scripts'
1805             Constant: expr: 'u"scripts"'
1805           <-Value: expr: 'u"scripts"'
1805            Constant: end-gen
1805           Value: end-gen
1805           Value: begin-gen
1805            Constant: begin-gen
1805             Constant: ctype: 'String' -> 'Finlandia'
1805             Constant: expr: 'u"Finlandia"'
1805           <-Value: expr: 'u"Finlandia"'
1805            Constant: end-gen
1805           Value: end-gen
1805           FunctionCall: expr: 'translate(u"scripts", u"Finlandia")'
1805          FunctionCall: end-gen
1805          Member: expr: 'util.translate(u"scripts", u"Finlandia")'
1805        <-Value: expr: 'util.translate(u"scripts", u"Finlandia")'
1805         Member: end-gen
1805        Value: end-gen
1805        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Finlandia")'
1805      <-Source: line: 'pais = util.translate(u"scripts", u"Finlandia")'
1805     <--Switch: line: 'pais = util.translate(u"scripts", u"Finlandia")'
1805    <---Source: line: 'pais = util.translate(u"scripts", u"Finlandia")'
1805   <----Function: line: 'pais = util.translate(u"scripts", u"Finlandia")'
1805  <-----Source: line: 'pais = util.translate(u"scripts", u"Finlandia")'
1805 <------Class: line: 'pais = util.translate(u"scripts", u"Finlandia")'
1805<-------Source: line: 'pais = util.translate(u"scripts", u"Finlandia")'
1806       InstructionUpdate: end-gen
1806       InstructionFlow: begin-gen
1806        InstructionFlow: break: 'break '
1806      <-Source: break: 'break '
1806     <--Switch: line: 's4c_do_work = False # BREAK'
1806    <---Source: line: 's4c_do_work = False # BREAK'
1806   <----Function: line: 's4c_do_work = False # BREAK'
1806  <-----Source: line: 's4c_do_work = False # BREAK'
1806 <------Class: line: 's4c_do_work = False # BREAK'
1806<-------Source: line: 's4c_do_work = False # BREAK'
1807       InstructionFlow: end-gen
1807      Source: end-gen
1807      Switch: end: 'block-if'
1807    <-Source: end: 'block-if'
1807   <--Function: end: 'block-if'
1807  <---Source: end: 'block-if'
1807 <----Class: end: 'block-if'
1807<-----Source: end: 'block-if'
1807      Value: begin-gen
1807       Constant: begin-gen
1807        Constant: ctype: 'String' -> 'FR'
1807        Constant: expr: 'u"FR"'
1807      <-Value: expr: 'u"FR"'
1807       Constant: end-gen
1807      Value: end-gen
1807      Switch: line: 'if s4c_when == u"FR": s4c_do_work,s4c_work_done = True,True'
1807    <-Source: line: 'if s4c_when == u"FR": s4c_do_work,s4c_work_done = True,True'
1807   <--Function: line: 'if s4c_when == u"FR": s4c_do_work,s4c_work_done = True,True'
1807  <---Source: line: 'if s4c_when == u"FR": s4c_do_work,s4c_work_done = True,True'
1807 <----Class: line: 'if s4c_when == u"FR": s4c_do_work,s4c_work_done = True,True'
1807<-----Source: line: 'if s4c_when == u"FR": s4c_do_work,s4c_work_done = True,True'
1808      Switch: line: 'if s4c_do_work:'
1808    <-Source: line: 'if s4c_do_work:'
1808   <--Function: line: 'if s4c_do_work:'
1808  <---Source: line: 'if s4c_do_work:'
1808 <----Class: line: 'if s4c_do_work:'
1808<-----Source: line: 'if s4c_do_work:'
1809      Switch: begin: 'block-if'
1809    <-Source: begin: 'block-if'
1809   <--Function: begin: 'block-if'
1809  <---Source: begin: 'block-if'
1809 <----Class: begin: 'block-if'
1809<-----Source: begin: 'block-if'
1809      Source: begin-gen
1809       InstructionUpdate: begin-gen
1809        Identifier: begin-gen
1809         Identifier: expr: 'longPosibles'
1809        Identifier: end-gen
1809        OpUpdate: begin-gen
1809         OpUpdate: expr: '='
1809        OpUpdate: end-gen
1809        Value: begin-gen
1809         Constant: begin-gen
1809          Constant: ctype: None -> None
1809          Value: begin-gen
1809           Constant: begin-gen
1809            Constant: ctype: 'Number' -> '11'
1809            Constant: expr: '11'
1809          <-Value: expr: '11'
1809           Constant: end-gen
1809          Value: end-gen
1809          Constant: expr: 'qsatype.Array([11])'
1809        <-Value: expr: 'qsatype.Array([11])'
1809         Constant: end-gen
1809        Value: end-gen
1809        InstructionUpdate: line: 'longPosibles = qsatype.Array([11])'
1809      <-Source: line: 'longPosibles = qsatype.Array([11])'
1809     <--Switch: line: 'longPosibles = qsatype.Array([11])'
1809    <---Source: line: 'longPosibles = qsatype.Array([11])'
1809   <----Function: line: 'longPosibles = qsatype.Array([11])'
1809  <-----Source: line: 'longPosibles = qsatype.Array([11])'
1809 <------Class: line: 'longPosibles = qsatype.Array([11])'
1809<-------Source: line: 'longPosibles = qsatype.Array([11])'
1810       InstructionUpdate: end-gen
1810       InstructionUpdate: begin-gen
1810        Identifier: begin-gen
1810         Identifier: expr: 'pais'
1810        Identifier: end-gen
1810        OpUpdate: begin-gen
1810         OpUpdate: expr: '='
1810        OpUpdate: end-gen
1810        Value: begin-gen
1810         Member: begin-gen
1810          Identifier: begin-gen
1810           Identifier: expr: 'util'
1810          Identifier: end-gen
1810          FunctionCall: begin-gen
1810           Value: begin-gen
1810            Constant: begin-gen
1810             Constant: ctype: 'String' -> 'scripts'
1810             Constant: expr: 'u"scripts"'
1810           <-Value: expr: 'u"scripts"'
1810            Constant: end-gen
1810           Value: end-gen
1810           Value: begin-gen
1810            Constant: begin-gen
1810             Constant: ctype: 'String' -> 'Francia'
1810             Constant: expr: 'u"Francia"'
1810           <-Value: expr: 'u"Francia"'
1810            Constant: end-gen
1810           Value: end-gen
1810           FunctionCall: expr: 'translate(u"scripts", u"Francia")'
1810          FunctionCall: end-gen
1810          Member: expr: 'util.translate(u"scripts", u"Francia")'
1810        <-Value: expr: 'util.translate(u"scripts", u"Francia")'
1810         Member: end-gen
1810        Value: end-gen
1810        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Francia")'
1810      <-Source: line: 'pais = util.translate(u"scripts", u"Francia")'
1810     <--Switch: line: 'pais = util.translate(u"scripts", u"Francia")'
1810    <---Source: line: 'pais = util.translate(u"scripts", u"Francia")'
1810   <----Function: line: 'pais = util.translate(u"scripts", u"Francia")'
1810  <-----Source: line: 'pais = util.translate(u"scripts", u"Francia")'
1810 <------Class: line: 'pais = util.translate(u"scripts", u"Francia")'
1810<-------Source: line: 'pais = util.translate(u"scripts", u"Francia")'
1811       InstructionUpdate: end-gen
1811       InstructionFlow: begin-gen
1811        InstructionFlow: break: 'break '
1811      <-Source: break: 'break '
1811     <--Switch: line: 's4c_do_work = False # BREAK'
1811    <---Source: line: 's4c_do_work = False # BREAK'
1811   <----Function: line: 's4c_do_work = False # BREAK'
1811  <-----Source: line: 's4c_do_work = False # BREAK'
1811 <------Class: line: 's4c_do_work = False # BREAK'
1811<-------Source: line: 's4c_do_work = False # BREAK'
1812       InstructionFlow: end-gen
1812      Source: end-gen
1812      Switch: end: 'block-if'
1812    <-Source: end: 'block-if'
1812   <--Function: end: 'block-if'
1812  <---Source: end: 'block-if'
1812 <----Class: end: 'block-if'
1812<-----Source: end: 'block-if'
1812      Value: begin-gen
1812       Constant: begin-gen
1812        Constant: ctype: 'String' -> 'EL'
1812        Constant: expr: 'u"EL"'
1812      <-Value: expr: 'u"EL"'
1812       Constant: end-gen
1812      Value: end-gen
1812      Switch: line: 'if s4c_when == u"EL": s4c_do_work,s4c_work_done = True,True'
1812    <-Source: line: 'if s4c_when == u"EL": s4c_do_work,s4c_work_done = True,True'
1812   <--Function: line: 'if s4c_when == u"EL": s4c_do_work,s4c_work_done = True,True'
1812  <---Source: line: 'if s4c_when == u"EL": s4c_do_work,s4c_work_done = True,True'
1812 <----Class: line: 'if s4c_when == u"EL": s4c_do_work,s4c_work_done = True,True'
1812<-----Source: line: 'if s4c_when == u"EL": s4c_do_work,s4c_work_done = True,True'
1813      Switch: line: 'if s4c_do_work:'
1813    <-Source: line: 'if s4c_do_work:'
1813   <--Function: line: 'if s4c_do_work:'
1813  <---Source: line: 'if s4c_do_work:'
1813 <----Class: line: 'if s4c_do_work:'
1813<-----Source: line: 'if s4c_do_work:'
1814      Switch: begin: 'block-if'
1814    <-Source: begin: 'block-if'
1814   <--Function: begin: 'block-if'
1814  <---Source: begin: 'block-if'
1814 <----Class: begin: 'block-if'
1814<-----Source: begin: 'block-if'
1814      Source: begin-gen
1814       InstructionUpdate: begin-gen
1814        Identifier: begin-gen
1814         Identifier: expr: 'longPosibles'
1814        Identifier: end-gen
1814        OpUpdate: begin-gen
1814         OpUpdate: expr: '='
1814        OpUpdate: end-gen
1814        Value: begin-gen
1814         Constant: begin-gen
1814          Constant: ctype: None -> None
1814          Value: begin-gen
1814           Constant: begin-gen
1814            Constant: ctype: 'Number' -> '9'
1814            Constant: expr: '9'
1814          <-Value: expr: '9'
1814           Constant: end-gen
1814          Value: end-gen
1814          Constant: expr: 'qsatype.Array([9])'
1814        <-Value: expr: 'qsatype.Array([9])'
1814         Constant: end-gen
1814        Value: end-gen
1814        InstructionUpdate: line: 'longPosibles = qsatype.Array([9])'
1814      <-Source: line: 'longPosibles = qsatype.Array([9])'
1814     <--Switch: line: 'longPosibles = qsatype.Array([9])'
1814    <---Source: line: 'longPosibles = qsatype.Array([9])'
1814   <----Function: line: 'longPosibles = qsatype.Array([9])'
1814  <-----Source: line: 'longPosibles = qsatype.Array([9])'
1814 <------Class: line: 'longPosibles = qsatype.Array([9])'
1814<-------Source: line: 'longPosibles = qsatype.Array([9])'
1815       InstructionUpdate: end-gen
1815       InstructionUpdate: begin-gen
1815        Identifier: begin-gen
1815         Identifier: expr: 'pais'
1815        Identifier: end-gen
1815        OpUpdate: begin-gen
1815         OpUpdate: expr: '='
1815        OpUpdate: end-gen
1815        Value: begin-gen
1815         Member: begin-gen
1815          Identifier: begin-gen
1815           Identifier: expr: 'util'
1815          Identifier: end-gen
1815          FunctionCall: begin-gen
1815           Value: begin-gen
1815            Constant: begin-gen
1815             Constant: ctype: 'String' -> 'scripts'
1815             Constant: expr: 'u"scripts"'
1815           <-Value: expr: 'u"scripts"'
1815            Constant: end-gen
1815           Value: end-gen
1815           Value: begin-gen
1815            Constant: begin-gen
1815             Constant: ctype: 'String' -> 'Grecia'
1815             Constant: expr: 'u"Grecia"'
1815           <-Value: expr: 'u"Grecia"'
1815            Constant: end-gen
1815           Value: end-gen
1815           FunctionCall: expr: 'translate(u"scripts", u"Grecia")'
1815          FunctionCall: end-gen
1815          Member: expr: 'util.translate(u"scripts", u"Grecia")'
1815        <-Value: expr: 'util.translate(u"scripts", u"Grecia")'
1815         Member: end-gen
1815        Value: end-gen
1815        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Grecia")'
1815      <-Source: line: 'pais = util.translate(u"scripts", u"Grecia")'
1815     <--Switch: line: 'pais = util.translate(u"scripts", u"Grecia")'
1815    <---Source: line: 'pais = util.translate(u"scripts", u"Grecia")'
1815   <----Function: line: 'pais = util.translate(u"scripts", u"Grecia")'
1815  <-----Source: line: 'pais = util.translate(u"scripts", u"Grecia")'
1815 <------Class: line: 'pais = util.translate(u"scripts", u"Grecia")'
1815<-------Source: line: 'pais = util.translate(u"scripts", u"Grecia")'
1816       InstructionUpdate: end-gen
1816       InstructionFlow: begin-gen
1816        InstructionFlow: break: 'break '
1816      <-Source: break: 'break '
1816     <--Switch: line: 's4c_do_work = False # BREAK'
1816    <---Source: line: 's4c_do_work = False # BREAK'
1816   <----Function: line: 's4c_do_work = False # BREAK'
1816  <-----Source: line: 's4c_do_work = False # BREAK'
1816 <------Class: line: 's4c_do_work = False # BREAK'
1816<-------Source: line: 's4c_do_work = False # BREAK'
1817       InstructionFlow: end-gen
1817      Source: end-gen
1817      Switch: end: 'block-if'
1817    <-Source: end: 'block-if'
1817   <--Function: end: 'block-if'
1817  <---Source: end: 'block-if'
1817 <----Class: end: 'block-if'
1817<-----Source: end: 'block-if'
1817      Value: begin-gen
1817       Constant: begin-gen
1817        Constant: ctype: 'String' -> 'GB'
1817        Constant: expr: 'u"GB"'
1817      <-Value: expr: 'u"GB"'
1817       Constant: end-gen
1817      Value: end-gen
1817      Switch: line: 'if s4c_when == u"GB": s4c_do_work,s4c_work_done = True,True'
1817    <-Source: line: 'if s4c_when == u"GB": s4c_do_work,s4c_work_done = True,True'
1817   <--Function: line: 'if s4c_when == u"GB": s4c_do_work,s4c_work_done = True,True'
1817  <---Source: line: 'if s4c_when == u"GB": s4c_do_work,s4c_work_done = True,True'
1817 <----Class: line: 'if s4c_when == u"GB": s4c_do_work,s4c_work_done = True,True'
1817<-----Source: line: 'if s4c_when == u"GB": s4c_do_work,s4c_work_done = True,True'
1818      Switch: line: 'if s4c_do_work:'
1818    <-Source: line: 'if s4c_do_work:'
1818   <--Function: line: 'if s4c_do_work:'
1818  <---Source: line: 'if s4c_do_work:'
1818 <----Class: line: 'if s4c_do_work:'
1818<-----Source: line: 'if s4c_do_work:'
1819      Switch: begin: 'block-if'
1819    <-Source: begin: 'block-if'
1819   <--Function: begin: 'block-if'
1819  <---Source: begin: 'block-if'
1819 <----Class: begin: 'block-if'
1819<-----Source: begin: 'block-if'
1819      Source: begin-gen
1819       InstructionUpdate: begin-gen
1819        Identifier: begin-gen
1819         Identifier: expr: 'longPosibles'
1819        Identifier: end-gen
1819        OpUpdate: begin-gen
1819         OpUpdate: expr: '='
1819        OpUpdate: end-gen
1819        Value: begin-gen
1819         Constant: begin-gen
1819          Constant: ctype: None -> None
1819          Value: begin-gen
1819           Constant: begin-gen
1819            Constant: ctype: 'Number' -> '5'
1819            Constant: expr: '5'
1819          <-Value: expr: '5'
1819           Constant: end-gen
1819          Value: end-gen
1819          Value: begin-gen
1819           Constant: begin-gen
1819            Constant: ctype: 'Number' -> '9'
1819            Constant: expr: '9'
1819          <-Value: expr: '9'
1819           Constant: end-gen
1819          Value: end-gen
1819          Value: begin-gen
1819           Constant: begin-gen
1819            Constant: ctype: 'Number' -> '12'
1819            Constant: expr: '12'
1819          <-Value: expr: '12'
1819           Constant: end-gen
1819          Value: end-gen
1819          Constant: expr: 'qsatype.Array([5, 9, 12])'
1819        <-Value: expr: 'qsatype.Array([5, 9, 12])'
1819         Constant: end-gen
1819        Value: end-gen
1819        InstructionUpdate: line: 'longPosibles = qsatype.Array([5, 9, 12])'
1819      <-Source: line: 'longPosibles = qsatype.Array([5, 9, 12])'
1819     <--Switch: line: 'longPosibles = qsatype.Array([5, 9, 12])'
1819    <---Source: line: 'longPosibles = qsatype.Array([5, 9, 12])'
1819   <----Function: line: 'longPosibles = qsatype.Array([5, 9, 12])'
1819  <-----Source: line: 'longPosibles = qsatype.Array([5, 9, 12])'
1819 <------Class: line: 'longPosibles = qsatype.Array([5, 9, 12])'
1819<-------Source: line: 'longPosibles = qsatype.Array([5, 9, 12])'
1820       InstructionUpdate: end-gen
1820       InstructionUpdate: begin-gen
1820        Identifier: begin-gen
1820         Identifier: expr: 'pais'
1820        Identifier: end-gen
1820        OpUpdate: begin-gen
1820         OpUpdate: expr: '='
1820        OpUpdate: end-gen
1820        Value: begin-gen
1820         Member: begin-gen
1820          Identifier: begin-gen
1820           Identifier: expr: 'util'
1820          Identifier: end-gen
1820          FunctionCall: begin-gen
1820           Value: begin-gen
1820            Constant: begin-gen
1820             Constant: ctype: 'String' -> 'scripts'
1820             Constant: expr: 'u"scripts"'
1820           <-Value: expr: 'u"scripts"'
1820            Constant: end-gen
1820           Value: end-gen
1820           Value: begin-gen
1820            Constant: begin-gen
1820             Constant: ctype: 'String' -> 'Gran Bretaña'
1820             Constant: expr: 'u"Gran Bretaña"'
1820           <-Value: expr: 'u"Gran Bretaña"'
1820            Constant: end-gen
1820           Value: end-gen
1820           FunctionCall: expr: 'translate(u"scripts", u"Gran Bretaña")'
1820          FunctionCall: end-gen
1820          Member: expr: 'util.translate(u"scripts", u"Gran Bretaña")'
1820        <-Value: expr: 'util.translate(u"scripts", u"Gran Bretaña")'
1820         Member: end-gen
1820        Value: end-gen
1820        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1820      <-Source: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1820     <--Switch: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1820    <---Source: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1820   <----Function: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1820  <-----Source: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1820 <------Class: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1820<-------Source: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1821       InstructionUpdate: end-gen
1821       InstructionFlow: begin-gen
1821        InstructionFlow: break: 'break '
1821      <-Source: break: 'break '
1821     <--Switch: line: 's4c_do_work = False # BREAK'
1821    <---Source: line: 's4c_do_work = False # BREAK'
1821   <----Function: line: 's4c_do_work = False # BREAK'
1821  <-----Source: line: 's4c_do_work = False # BREAK'
1821 <------Class: line: 's4c_do_work = False # BREAK'
1821<-------Source: line: 's4c_do_work = False # BREAK'
1822       InstructionFlow: end-gen
1822      Source: end-gen
1822      Switch: end: 'block-if'
1822    <-Source: end: 'block-if'
1822   <--Function: end: 'block-if'
1822  <---Source: end: 'block-if'
1822 <----Class: end: 'block-if'
1822<-----Source: end: 'block-if'
1822      Value: begin-gen
1822       Constant: begin-gen
1822        Constant: ctype: 'String' -> 'NL'
1822        Constant: expr: 'u"NL"'
1822      <-Value: expr: 'u"NL"'
1822       Constant: end-gen
1822      Value: end-gen
1822      Switch: line: 'if s4c_when == u"NL": s4c_do_work,s4c_work_done = True,True'
1822    <-Source: line: 'if s4c_when == u"NL": s4c_do_work,s4c_work_done = True,True'
1822   <--Function: line: 'if s4c_when == u"NL": s4c_do_work,s4c_work_done = True,True'
1822  <---Source: line: 'if s4c_when == u"NL": s4c_do_work,s4c_work_done = True,True'
1822 <----Class: line: 'if s4c_when == u"NL": s4c_do_work,s4c_work_done = True,True'
1822<-----Source: line: 'if s4c_when == u"NL": s4c_do_work,s4c_work_done = True,True'
1823      Switch: line: 'if s4c_do_work:'
1823    <-Source: line: 'if s4c_do_work:'
1823   <--Function: line: 'if s4c_do_work:'
1823  <---Source: line: 'if s4c_do_work:'
1823 <----Class: line: 'if s4c_do_work:'
1823<-----Source: line: 'if s4c_do_work:'
1824      Switch: begin: 'block-if'
1824    <-Source: begin: 'block-if'
1824   <--Function: begin: 'block-if'
1824  <---Source: begin: 'block-if'
1824 <----Class: begin: 'block-if'
1824<-----Source: begin: 'block-if'
1824      Source: begin-gen
1824       InstructionUpdate: begin-gen
1824        Identifier: begin-gen
1824         Identifier: expr: 'longPosibles'
1824        Identifier: end-gen
1824        OpUpdate: begin-gen
1824         OpUpdate: expr: '='
1824        OpUpdate: end-gen
1824        Value: begin-gen
1824         Constant: begin-gen
1824          Constant: ctype: None -> None
1824          Value: begin-gen
1824           Constant: begin-gen
1824            Constant: ctype: 'Number' -> '12'
1824            Constant: expr: '12'
1824          <-Value: expr: '12'
1824           Constant: end-gen
1824          Value: end-gen
1824          Constant: expr: 'qsatype.Array([12])'
1824        <-Value: expr: 'qsatype.Array([12])'
1824         Constant: end-gen
1824        Value: end-gen
1824        InstructionUpdate: line: 'longPosibles = qsatype.Array([12])'
1824      <-Source: line: 'longPosibles = qsatype.Array([12])'
1824     <--Switch: line: 'longPosibles = qsatype.Array([12])'
1824    <---Source: line: 'longPosibles = qsatype.Array([12])'
1824   <----Function: line: 'longPosibles = qsatype.Array([12])'
1824  <-----Source: line: 'longPosibles = qsatype.Array([12])'
1824 <------Class: line: 'longPosibles = qsatype.Array([12])'
1824<-------Source: line: 'longPosibles = qsatype.Array([12])'
1825       InstructionUpdate: end-gen
1825       InstructionUpdate: begin-gen
1825        Identifier: begin-gen
1825         Identifier: expr: 'pais'
1825        Identifier: end-gen
1825        OpUpdate: begin-gen
1825         OpUpdate: expr: '='
1825        OpUpdate: end-gen
1825        Value: begin-gen
1825         Member: begin-gen
1825          Identifier: begin-gen
1825           Identifier: expr: 'util'
1825          Identifier: end-gen
1825          FunctionCall: begin-gen
1825           Value: begin-gen
1825            Constant: begin-gen
1825             Constant: ctype: 'String' -> 'scripts'
1825             Constant: expr: 'u"scripts"'
1825           <-Value: expr: 'u"scripts"'
1825            Constant: end-gen
1825           Value: end-gen
1825           Value: begin-gen
1825            Constant: begin-gen
1825             Constant: ctype: 'String' -> 'Holanda'
1825             Constant: expr: 'u"Holanda"'
1825           <-Value: expr: 'u"Holanda"'
1825            Constant: end-gen
1825           Value: end-gen
1825           FunctionCall: expr: 'translate(u"scripts", u"Holanda")'
1825          FunctionCall: end-gen
1825          Member: expr: 'util.translate(u"scripts", u"Holanda")'
1825        <-Value: expr: 'util.translate(u"scripts", u"Holanda")'
1825         Member: end-gen
1825        Value: end-gen
1825        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Holanda")'
1825      <-Source: line: 'pais = util.translate(u"scripts", u"Holanda")'
1825     <--Switch: line: 'pais = util.translate(u"scripts", u"Holanda")'
1825    <---Source: line: 'pais = util.translate(u"scripts", u"Holanda")'
1825   <----Function: line: 'pais = util.translate(u"scripts", u"Holanda")'
1825  <-----Source: line: 'pais = util.translate(u"scripts", u"Holanda")'
1825 <------Class: line: 'pais = util.translate(u"scripts", u"Holanda")'
1825<-------Source: line: 'pais = util.translate(u"scripts", u"Holanda")'
1826       InstructionUpdate: end-gen
1826       InstructionFlow: begin-gen
1826        InstructionFlow: break: 'break '
1826      <-Source: break: 'break '
1826     <--Switch: line: 's4c_do_work = False # BREAK'
1826    <---Source: line: 's4c_do_work = False # BREAK'
1826   <----Function: line: 's4c_do_work = False # BREAK'
1826  <-----Source: line: 's4c_do_work = False # BREAK'
1826 <------Class: line: 's4c_do_work = False # BREAK'
1826<-------Source: line: 's4c_do_work = False # BREAK'
1827       InstructionFlow: end-gen
1827      Source: end-gen
1827      Switch: end: 'block-if'
1827    <-Source: end: 'block-if'
1827   <--Function: end: 'block-if'
1827  <---Source: end: 'block-if'
1827 <----Class: end: 'block-if'
1827<-----Source: end: 'block-if'
1827      Value: begin-gen
1827       Constant: begin-gen
1827        Constant: ctype: 'String' -> 'HU'
1827        Constant: expr: 'u"HU"'
1827      <-Value: expr: 'u"HU"'
1827       Constant: end-gen
1827      Value: end-gen
1827      Switch: line: 'if s4c_when == u"HU": s4c_do_work,s4c_work_done = True,True'
1827    <-Source: line: 'if s4c_when == u"HU": s4c_do_work,s4c_work_done = True,True'
1827   <--Function: line: 'if s4c_when == u"HU": s4c_do_work,s4c_work_done = True,True'
1827  <---Source: line: 'if s4c_when == u"HU": s4c_do_work,s4c_work_done = True,True'
1827 <----Class: line: 'if s4c_when == u"HU": s4c_do_work,s4c_work_done = True,True'
1827<-----Source: line: 'if s4c_when == u"HU": s4c_do_work,s4c_work_done = True,True'
1828      Switch: line: 'if s4c_do_work:'
1828    <-Source: line: 'if s4c_do_work:'
1828   <--Function: line: 'if s4c_do_work:'
1828  <---Source: line: 'if s4c_do_work:'
1828 <----Class: line: 'if s4c_do_work:'
1828<-----Source: line: 'if s4c_do_work:'
1829      Switch: begin: 'block-if'
1829    <-Source: begin: 'block-if'
1829   <--Function: begin: 'block-if'
1829  <---Source: begin: 'block-if'
1829 <----Class: begin: 'block-if'
1829<-----Source: begin: 'block-if'
1829      Source: begin-gen
1829       InstructionUpdate: begin-gen
1829        Identifier: begin-gen
1829         Identifier: expr: 'longPosibles'
1829        Identifier: end-gen
1829        OpUpdate: begin-gen
1829         OpUpdate: expr: '='
1829        OpUpdate: end-gen
1829        Value: begin-gen
1829         Constant: begin-gen
1829          Constant: ctype: None -> None
1829          Value: begin-gen
1829           Constant: begin-gen
1829            Constant: ctype: 'Number' -> '8'
1829            Constant: expr: '8'
1829          <-Value: expr: '8'
1829           Constant: end-gen
1829          Value: end-gen
1829          Constant: expr: 'qsatype.Array([8])'
1829        <-Value: expr: 'qsatype.Array([8])'
1829         Constant: end-gen
1829        Value: end-gen
1829        InstructionUpdate: line: 'longPosibles = qsatype.Array([8])'
1829      <-Source: line: 'longPosibles = qsatype.Array([8])'
1829     <--Switch: line: 'longPosibles = qsatype.Array([8])'
1829    <---Source: line: 'longPosibles = qsatype.Array([8])'
1829   <----Function: line: 'longPosibles = qsatype.Array([8])'
1829  <-----Source: line: 'longPosibles = qsatype.Array([8])'
1829 <------Class: line: 'longPosibles = qsatype.Array([8])'
1829<-------Source: line: 'longPosibles = qsatype.Array([8])'
1830       InstructionUpdate: end-gen
1830       InstructionUpdate: begin-gen
1830        Identifier: begin-gen
1830         Identifier: expr: 'pais'
1830        Identifier: end-gen
1830        OpUpdate: begin-gen
1830         OpUpdate: expr: '='
1830        OpUpdate: end-gen
1830        Value: begin-gen
1830         Member: begin-gen
1830          Identifier: begin-gen
1830           Identifier: expr: 'util'
1830          Identifier: end-gen
1830          FunctionCall: begin-gen
1830           Value: begin-gen
1830            Constant: begin-gen
1830             Constant: ctype: 'String' -> 'scripts'
1830             Constant: expr: 'u"scripts"'
1830           <-Value: expr: 'u"scripts"'
1830            Constant: end-gen
1830           Value: end-gen
1830           Value: begin-gen
1830            Constant: begin-gen
1830             Constant: ctype: 'String' -> 'Hungría'
1830             Constant: expr: 'u"Hungría"'
1830           <-Value: expr: 'u"Hungría"'
1830            Constant: end-gen
1830           Value: end-gen
1830           FunctionCall: expr: 'translate(u"scripts", u"Hungría")'
1830          FunctionCall: end-gen
1830          Member: expr: 'util.translate(u"scripts", u"Hungría")'
1830        <-Value: expr: 'util.translate(u"scripts", u"Hungría")'
1830         Member: end-gen
1830        Value: end-gen
1830        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Hungría")'
1830      <-Source: line: 'pais = util.translate(u"scripts", u"Hungría")'
1830     <--Switch: line: 'pais = util.translate(u"scripts", u"Hungría")'
1830    <---Source: line: 'pais = util.translate(u"scripts", u"Hungría")'
1830   <----Function: line: 'pais = util.translate(u"scripts", u"Hungría")'
1830  <-----Source: line: 'pais = util.translate(u"scripts", u"Hungría")'
1830 <------Class: line: 'pais = util.translate(u"scripts", u"Hungría")'
1830<-------Source: line: 'pais = util.translate(u"scripts", u"Hungría")'
1831       InstructionUpdate: end-gen
1831       InstructionFlow: begin-gen
1831        InstructionFlow: break: 'break '
1831      <-Source: break: 'break '
1831     <--Switch: line: 's4c_do_work = False # BREAK'
1831    <---Source: line: 's4c_do_work = False # BREAK'
1831   <----Function: line: 's4c_do_work = False # BREAK'
1831  <-----Source: line: 's4c_do_work = False # BREAK'
1831 <------Class: line: 's4c_do_work = False # BREAK'
1831<-------Source: line: 's4c_do_work = False # BREAK'
1832       InstructionFlow: end-gen
1832      Source: end-gen
1832      Switch: end: 'block-if'
1832    <-Source: end: 'block-if'
1832   <--Function: end: 'block-if'
1832  <---Source: end: 'block-if'
1832 <----Class: end: 'block-if'
1832<-----Source: end: 'block-if'
1832      Value: begin-gen
1832       Constant: begin-gen
1832        Constant: ctype: 'String' -> 'IT'
1832        Constant: expr: 'u"IT"'
1832      <-Value: expr: 'u"IT"'
1832       Constant: end-gen
1832      Value: end-gen
1832      Switch: line: 'if s4c_when == u"IT": s4c_do_work,s4c_work_done = True,True'
1832    <-Source: line: 'if s4c_when == u"IT": s4c_do_work,s4c_work_done = True,True'
1832   <--Function: line: 'if s4c_when == u"IT": s4c_do_work,s4c_work_done = True,True'
1832  <---Source: line: 'if s4c_when == u"IT": s4c_do_work,s4c_work_done = True,True'
1832 <----Class: line: 'if s4c_when == u"IT": s4c_do_work,s4c_work_done = True,True'
1832<-----Source: line: 'if s4c_when == u"IT": s4c_do_work,s4c_work_done = True,True'
1833      Switch: line: 'if s4c_do_work:'
1833    <-Source: line: 'if s4c_do_work:'
1833   <--Function: line: 'if s4c_do_work:'
1833  <---Source: line: 'if s4c_do_work:'
1833 <----Class: line: 'if s4c_do_work:'
1833<-----Source: line: 'if s4c_do_work:'
1834      Switch: begin: 'block-if'
1834    <-Source: begin: 'block-if'
1834   <--Function: begin: 'block-if'
1834  <---Source: begin: 'block-if'
1834 <----Class: begin: 'block-if'
1834<-----Source: begin: 'block-if'
1834      Source: begin-gen
1834       InstructionUpdate: begin-gen
1834        Identifier: begin-gen
1834         Identifier: expr: 'longPosibles'
1834        Identifier: end-gen
1834        OpUpdate: begin-gen
1834         OpUpdate: expr: '='
1834        OpUpdate: end-gen
1834        Value: begin-gen
1834         Constant: begin-gen
1834          Constant: ctype: None -> None
1834          Value: begin-gen
1834           Constant: begin-gen
1834            Constant: ctype: 'Number' -> '11'
1834            Constant: expr: '11'
1834          <-Value: expr: '11'
1834           Constant: end-gen
1834          Value: end-gen
1834          Constant: expr: 'qsatype.Array([11])'
1834        <-Value: expr: 'qsatype.Array([11])'
1834         Constant: end-gen
1834        Value: end-gen
1834        InstructionUpdate: line: 'longPosibles = qsatype.Array([11])'
1834      <-Source: line: 'longPosibles = qsatype.Array([11])'
1834     <--Switch: line: 'longPosibles = qsatype.Array([11])'
1834    <---Source: line: 'longPosibles = qsatype.Array([11])'
1834   <----Function: line: 'longPosibles = qsatype.Array([11])'
1834  <-----Source: line: 'longPosibles = qsatype.Array([11])'
1834 <------Class: line: 'longPosibles = qsatype.Array([11])'
1834<-------Source: line: 'longPosibles = qsatype.Array([11])'
1835       InstructionUpdate: end-gen
1835       InstructionUpdate: begin-gen
1835        Identifier: begin-gen
1835         Identifier: expr: 'pais'
1835        Identifier: end-gen
1835        OpUpdate: begin-gen
1835         OpUpdate: expr: '='
1835        OpUpdate: end-gen
1835        Value: begin-gen
1835         Member: begin-gen
1835          Identifier: begin-gen
1835           Identifier: expr: 'util'
1835          Identifier: end-gen
1835          FunctionCall: begin-gen
1835           Value: begin-gen
1835            Constant: begin-gen
1835             Constant: ctype: 'String' -> 'scripts'
1835             Constant: expr: 'u"scripts"'
1835           <-Value: expr: 'u"scripts"'
1835            Constant: end-gen
1835           Value: end-gen
1835           Value: begin-gen
1835            Constant: begin-gen
1835             Constant: ctype: 'String' -> 'Gran Bretaña'
1835             Constant: expr: 'u"Gran Bretaña"'
1835           <-Value: expr: 'u"Gran Bretaña"'
1835            Constant: end-gen
1835           Value: end-gen
1835           FunctionCall: expr: 'translate(u"scripts", u"Gran Bretaña")'
1835          FunctionCall: end-gen
1835          Member: expr: 'util.translate(u"scripts", u"Gran Bretaña")'
1835        <-Value: expr: 'util.translate(u"scripts", u"Gran Bretaña")'
1835         Member: end-gen
1835        Value: end-gen
1835        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1835      <-Source: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1835     <--Switch: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1835    <---Source: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1835   <----Function: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1835  <-----Source: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1835 <------Class: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1835<-------Source: line: 'pais = util.translate(u"scripts", u"Gran Bretaña")'
1836       InstructionUpdate: end-gen
1836       InstructionFlow: begin-gen
1836        InstructionFlow: break: 'break '
1836      <-Source: break: 'break '
1836     <--Switch: line: 's4c_do_work = False # BREAK'
1836    <---Source: line: 's4c_do_work = False # BREAK'
1836   <----Function: line: 's4c_do_work = False # BREAK'
1836  <-----Source: line: 's4c_do_work = False # BREAK'
1836 <------Class: line: 's4c_do_work = False # BREAK'
1836<-------Source: line: 's4c_do_work = False # BREAK'
1837       InstructionFlow: end-gen
1837      Source: end-gen
1837      Switch: end: 'block-if'
1837    <-Source: end: 'block-if'
1837   <--Function: end: 'block-if'
1837  <---Source: end: 'block-if'
1837 <----Class: end: 'block-if'
1837<-----Source: end: 'block-if'
1837      Value: begin-gen
1837       Constant: begin-gen
1837        Constant: ctype: 'String' -> 'IE'
1837        Constant: expr: 'u"IE"'
1837      <-Value: expr: 'u"IE"'
1837       Constant: end-gen
1837      Value: end-gen
1837      Switch: line: 'if s4c_when == u"IE": s4c_do_work,s4c_work_done = True,True'
1837    <-Source: line: 'if s4c_when == u"IE": s4c_do_work,s4c_work_done = True,True'
1837   <--Function: line: 'if s4c_when == u"IE": s4c_do_work,s4c_work_done = True,True'
1837  <---Source: line: 'if s4c_when == u"IE": s4c_do_work,s4c_work_done = True,True'
1837 <----Class: line: 'if s4c_when == u"IE": s4c_do_work,s4c_work_done = True,True'
1837<-----Source: line: 'if s4c_when == u"IE": s4c_do_work,s4c_work_done = True,True'
1838      Switch: line: 'if s4c_do_work:'
1838    <-Source: line: 'if s4c_do_work:'
1838   <--Function: line: 'if s4c_do_work:'
1838  <---Source: line: 'if s4c_do_work:'
1838 <----Class: line: 'if s4c_do_work:'
1838<-----Source: line: 'if s4c_do_work:'
1839      Switch: begin: 'block-if'
1839    <-Source: begin: 'block-if'
1839   <--Function: begin: 'block-if'
1839  <---Source: begin: 'block-if'
1839 <----Class: begin: 'block-if'
1839<-----Source: begin: 'block-if'
1839      Source: begin-gen
1839       InstructionUpdate: begin-gen
1839        Identifier: begin-gen
1839         Identifier: expr: 'longPosibles'
1839        Identifier: end-gen
1839        OpUpdate: begin-gen
1839         OpUpdate: expr: '='
1839        OpUpdate: end-gen
1839        Value: begin-gen
1839         Constant: begin-gen
1839          Constant: ctype: None -> None
1839          Value: begin-gen
1839           Constant: begin-gen
1839            Constant: ctype: 'Number' -> '8'
1839            Constant: expr: '8'
1839          <-Value: expr: '8'
1839           Constant: end-gen
1839          Value: end-gen
1839          Constant: expr: 'qsatype.Array([8])'
1839        <-Value: expr: 'qsatype.Array([8])'
1839         Constant: end-gen
1839        Value: end-gen
1839        InstructionUpdate: line: 'longPosibles = qsatype.Array([8])'
1839      <-Source: line: 'longPosibles = qsatype.Array([8])'
1839     <--Switch: line: 'longPosibles = qsatype.Array([8])'
1839    <---Source: line: 'longPosibles = qsatype.Array([8])'
1839   <----Function: line: 'longPosibles = qsatype.Array([8])'
1839  <-----Source: line: 'longPosibles = qsatype.Array([8])'
1839 <------Class: line: 'longPosibles = qsatype.Array([8])'
1839<-------Source: line: 'longPosibles = qsatype.Array([8])'
1840       InstructionUpdate: end-gen
1840       InstructionUpdate: begin-gen
1840        Identifier: begin-gen
1840         Identifier: expr: 'pais'
1840        Identifier: end-gen
1840        OpUpdate: begin-gen
1840         OpUpdate: expr: '='
1840        OpUpdate: end-gen
1840        Value: begin-gen
1840         Member: begin-gen
1840          Identifier: begin-gen
1840           Identifier: expr: 'util'
1840          Identifier: end-gen
1840          FunctionCall: begin-gen
1840           Value: begin-gen
1840            Constant: begin-gen
1840             Constant: ctype: 'String' -> 'scripts'
1840             Constant: expr: 'u"scripts"'
1840           <-Value: expr: 'u"scripts"'
1840            Constant: end-gen
1840           Value: end-gen
1840           Value: begin-gen
1840            Constant: begin-gen
1840             Constant: ctype: 'String' -> 'Irlanda'
1840             Constant: expr: 'u"Irlanda"'
1840           <-Value: expr: 'u"Irlanda"'
1840            Constant: end-gen
1840           Value: end-gen
1840           FunctionCall: expr: 'translate(u"scripts", u"Irlanda")'
1840          FunctionCall: end-gen
1840          Member: expr: 'util.translate(u"scripts", u"Irlanda")'
1840        <-Value: expr: 'util.translate(u"scripts", u"Irlanda")'
1840         Member: end-gen
1840        Value: end-gen
1840        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Irlanda")'
1840      <-Source: line: 'pais = util.translate(u"scripts", u"Irlanda")'
1840     <--Switch: line: 'pais = util.translate(u"scripts", u"Irlanda")'
1840    <---Source: line: 'pais = util.translate(u"scripts", u"Irlanda")'
1840   <----Function: line: 'pais = util.translate(u"scripts", u"Irlanda")'
1840  <-----Source: line: 'pais = util.translate(u"scripts", u"Irlanda")'
1840 <------Class: line: 'pais = util.translate(u"scripts", u"Irlanda")'
1840<-------Source: line: 'pais = util.translate(u"scripts", u"Irlanda")'
1841       InstructionUpdate: end-gen
1841       InstructionFlow: begin-gen
1841        InstructionFlow: break: 'break '
1841      <-Source: break: 'break '
1841     <--Switch: line: 's4c_do_work = False # BREAK'
1841    <---Source: line: 's4c_do_work = False # BREAK'
1841   <----Function: line: 's4c_do_work = False # BREAK'
1841  <-----Source: line: 's4c_do_work = False # BREAK'
1841 <------Class: line: 's4c_do_work = False # BREAK'
1841<-------Source: line: 's4c_do_work = False # BREAK'
1842       InstructionFlow: end-gen
1842      Source: end-gen
1842      Switch: end: 'block-if'
1842    <-Source: end: 'block-if'
1842   <--Function: end: 'block-if'
1842  <---Source: end: 'block-if'
1842 <----Class: end: 'block-if'
1842<-----Source: end: 'block-if'
1842      Value: begin-gen
1842       Constant: begin-gen
1842        Constant: ctype: 'String' -> 'LT'
1842        Constant: expr: 'u"LT"'
1842      <-Value: expr: 'u"LT"'
1842       Constant: end-gen
1842      Value: end-gen
1842      Switch: line: 'if s4c_when == u"LT": s4c_do_work,s4c_work_done = True,True'
1842    <-Source: line: 'if s4c_when == u"LT": s4c_do_work,s4c_work_done = True,True'
1842   <--Function: line: 'if s4c_when == u"LT": s4c_do_work,s4c_work_done = True,True'
1842  <---Source: line: 'if s4c_when == u"LT": s4c_do_work,s4c_work_done = True,True'
1842 <----Class: line: 'if s4c_when == u"LT": s4c_do_work,s4c_work_done = True,True'
1842<-----Source: line: 'if s4c_when == u"LT": s4c_do_work,s4c_work_done = True,True'
1843      Switch: line: 'if s4c_do_work:'
1843    <-Source: line: 'if s4c_do_work:'
1843   <--Function: line: 'if s4c_do_work:'
1843  <---Source: line: 'if s4c_do_work:'
1843 <----Class: line: 'if s4c_do_work:'
1843<-----Source: line: 'if s4c_do_work:'
1844      Switch: begin: 'block-if'
1844    <-Source: begin: 'block-if'
1844   <--Function: begin: 'block-if'
1844  <---Source: begin: 'block-if'
1844 <----Class: begin: 'block-if'
1844<-----Source: begin: 'block-if'
1844      Source: begin-gen
1844       InstructionUpdate: begin-gen
1844        Identifier: begin-gen
1844         Identifier: expr: 'longPosibles'
1844        Identifier: end-gen
1844        OpUpdate: begin-gen
1844         OpUpdate: expr: '='
1844        OpUpdate: end-gen
1844        Value: begin-gen
1844         Constant: begin-gen
1844          Constant: ctype: None -> None
1844          Value: begin-gen
1844           Constant: begin-gen
1844            Constant: ctype: 'Number' -> '9'
1844            Constant: expr: '9'
1844          <-Value: expr: '9'
1844           Constant: end-gen
1844          Value: end-gen
1844          Value: begin-gen
1844           Constant: begin-gen
1844            Constant: ctype: 'Number' -> '12'
1844            Constant: expr: '12'
1844          <-Value: expr: '12'
1844           Constant: end-gen
1844          Value: end-gen
1844          Constant: expr: 'qsatype.Array([9, 12])'
1844        <-Value: expr: 'qsatype.Array([9, 12])'
1844         Constant: end-gen
1844        Value: end-gen
1844        InstructionUpdate: line: 'longPosibles = qsatype.Array([9, 12])'
1844      <-Source: line: 'longPosibles = qsatype.Array([9, 12])'
1844     <--Switch: line: 'longPosibles = qsatype.Array([9, 12])'
1844    <---Source: line: 'longPosibles = qsatype.Array([9, 12])'
1844   <----Function: line: 'longPosibles = qsatype.Array([9, 12])'
1844  <-----Source: line: 'longPosibles = qsatype.Array([9, 12])'
1844 <------Class: line: 'longPosibles = qsatype.Array([9, 12])'
1844<-------Source: line: 'longPosibles = qsatype.Array([9, 12])'
1845       InstructionUpdate: end-gen
1845       InstructionUpdate: begin-gen
1845        Identifier: begin-gen
1845         Identifier: expr: 'pais'
1845        Identifier: end-gen
1845        OpUpdate: begin-gen
1845         OpUpdate: expr: '='
1845        OpUpdate: end-gen
1845        Value: begin-gen
1845         Member: begin-gen
1845          Identifier: begin-gen
1845           Identifier: expr: 'util'
1845          Identifier: end-gen
1845          FunctionCall: begin-gen
1845           Value: begin-gen
1845            Constant: begin-gen
1845             Constant: ctype: 'String' -> 'scripts'
1845             Constant: expr: 'u"scripts"'
1845           <-Value: expr: 'u"scripts"'
1845            Constant: end-gen
1845           Value: end-gen
1845           Value: begin-gen
1845            Constant: begin-gen
1845             Constant: ctype: 'String' -> 'Lituania'
1845             Constant: expr: 'u"Lituania"'
1845           <-Value: expr: 'u"Lituania"'
1845            Constant: end-gen
1845           Value: end-gen
1845           FunctionCall: expr: 'translate(u"scripts", u"Lituania")'
1845          FunctionCall: end-gen
1845          Member: expr: 'util.translate(u"scripts", u"Lituania")'
1845        <-Value: expr: 'util.translate(u"scripts", u"Lituania")'
1845         Member: end-gen
1845        Value: end-gen
1845        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Lituania")'
1845      <-Source: line: 'pais = util.translate(u"scripts", u"Lituania")'
1845     <--Switch: line: 'pais = util.translate(u"scripts", u"Lituania")'
1845    <---Source: line: 'pais = util.translate(u"scripts", u"Lituania")'
1845   <----Function: line: 'pais = util.translate(u"scripts", u"Lituania")'
1845  <-----Source: line: 'pais = util.translate(u"scripts", u"Lituania")'
1845 <------Class: line: 'pais = util.translate(u"scripts", u"Lituania")'
1845<-------Source: line: 'pais = util.translate(u"scripts", u"Lituania")'
1846       InstructionUpdate: end-gen
1846       InstructionFlow: begin-gen
1846        InstructionFlow: break: 'break '
1846      <-Source: break: 'break '
1846     <--Switch: line: 's4c_do_work = False # BREAK'
1846    <---Source: line: 's4c_do_work = False # BREAK'
1846   <----Function: line: 's4c_do_work = False # BREAK'
1846  <-----Source: line: 's4c_do_work = False # BREAK'
1846 <------Class: line: 's4c_do_work = False # BREAK'
1846<-------Source: line: 's4c_do_work = False # BREAK'
1847       InstructionFlow: end-gen
1847      Source: end-gen
1847      Switch: end: 'block-if'
1847    <-Source: end: 'block-if'
1847   <--Function: end: 'block-if'
1847  <---Source: end: 'block-if'
1847 <----Class: end: 'block-if'
1847<-----Source: end: 'block-if'
1847      Value: begin-gen
1847       Constant: begin-gen
1847        Constant: ctype: 'String' -> 'LU'
1847        Constant: expr: 'u"LU"'
1847      <-Value: expr: 'u"LU"'
1847       Constant: end-gen
1847      Value: end-gen
1847      Switch: line: 'if s4c_when == u"LU": s4c_do_work,s4c_work_done = True,True'
1847    <-Source: line: 'if s4c_when == u"LU": s4c_do_work,s4c_work_done = True,True'
1847   <--Function: line: 'if s4c_when == u"LU": s4c_do_work,s4c_work_done = True,True'
1847  <---Source: line: 'if s4c_when == u"LU": s4c_do_work,s4c_work_done = True,True'
1847 <----Class: line: 'if s4c_when == u"LU": s4c_do_work,s4c_work_done = True,True'
1847<-----Source: line: 'if s4c_when == u"LU": s4c_do_work,s4c_work_done = True,True'
1848      Switch: line: 'if s4c_do_work:'
1848    <-Source: line: 'if s4c_do_work:'
1848   <--Function: line: 'if s4c_do_work:'
1848  <---Source: line: 'if s4c_do_work:'
1848 <----Class: line: 'if s4c_do_work:'
1848<-----Source: line: 'if s4c_do_work:'
1849      Switch: begin: 'block-if'
1849    <-Source: begin: 'block-if'
1849   <--Function: begin: 'block-if'
1849  <---Source: begin: 'block-if'
1849 <----Class: begin: 'block-if'
1849<-----Source: begin: 'block-if'
1849      Source: begin-gen
1849       InstructionUpdate: begin-gen
1849        Identifier: begin-gen
1849         Identifier: expr: 'longPosibles'
1849        Identifier: end-gen
1849        OpUpdate: begin-gen
1849         OpUpdate: expr: '='
1849        OpUpdate: end-gen
1849        Value: begin-gen
1849         Constant: begin-gen
1849          Constant: ctype: None -> None
1849          Value: begin-gen
1849           Constant: begin-gen
1849            Constant: ctype: 'Number' -> '8'
1849            Constant: expr: '8'
1849          <-Value: expr: '8'
1849           Constant: end-gen
1849          Value: end-gen
1849          Constant: expr: 'qsatype.Array([8])'
1849        <-Value: expr: 'qsatype.Array([8])'
1849         Constant: end-gen
1849        Value: end-gen
1849        InstructionUpdate: line: 'longPosibles = qsatype.Array([8])'
1849      <-Source: line: 'longPosibles = qsatype.Array([8])'
1849     <--Switch: line: 'longPosibles = qsatype.Array([8])'
1849    <---Source: line: 'longPosibles = qsatype.Array([8])'
1849   <----Function: line: 'longPosibles = qsatype.Array([8])'
1849  <-----Source: line: 'longPosibles = qsatype.Array([8])'
1849 <------Class: line: 'longPosibles = qsatype.Array([8])'
1849<-------Source: line: 'longPosibles = qsatype.Array([8])'
1850       InstructionUpdate: end-gen
1850       InstructionUpdate: begin-gen
1850        Identifier: begin-gen
1850         Identifier: expr: 'pais'
1850        Identifier: end-gen
1850        OpUpdate: begin-gen
1850         OpUpdate: expr: '='
1850        OpUpdate: end-gen
1850        Value: begin-gen
1850         Member: begin-gen
1850          Identifier: begin-gen
1850           Identifier: expr: 'util'
1850          Identifier: end-gen
1850          FunctionCall: begin-gen
1850           Value: begin-gen
1850            Constant: begin-gen
1850             Constant: ctype: 'String' -> 'scripts'
1850             Constant: expr: 'u"scripts"'
1850           <-Value: expr: 'u"scripts"'
1850            Constant: end-gen
1850           Value: end-gen
1850           Value: begin-gen
1850            Constant: begin-gen
1850             Constant: ctype: 'String' -> 'Luxemburgo'
1850             Constant: expr: 'u"Luxemburgo"'
1850           <-Value: expr: 'u"Luxemburgo"'
1850            Constant: end-gen
1850           Value: end-gen
1850           FunctionCall: expr: 'translate(u"scripts", u"Luxemburgo")'
1850          FunctionCall: end-gen
1850          Member: expr: 'util.translate(u"scripts", u"Luxemburgo")'
1850        <-Value: expr: 'util.translate(u"scripts", u"Luxemburgo")'
1850         Member: end-gen
1850        Value: end-gen
1850        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Luxemburgo")'
1850      <-Source: line: 'pais = util.translate(u"scripts", u"Luxemburgo")'
1850     <--Switch: line: 'pais = util.translate(u"scripts", u"Luxemburgo")'
1850    <---Source: line: 'pais = util.translate(u"scripts", u"Luxemburgo")'
1850   <----Function: line: 'pais = util.translate(u"scripts", u"Luxemburgo")'
1850  <-----Source: line: 'pais = util.translate(u"scripts", u"Luxemburgo")'
1850 <------Class: line: 'pais = util.translate(u"scripts", u"Luxemburgo")'
1850<-------Source: line: 'pais = util.translate(u"scripts", u"Luxemburgo")'
1851       InstructionUpdate: end-gen
1851       InstructionFlow: begin-gen
1851        InstructionFlow: break: 'break '
1851      <-Source: break: 'break '
1851     <--Switch: line: 's4c_do_work = False # BREAK'
1851    <---Source: line: 's4c_do_work = False # BREAK'
1851   <----Function: line: 's4c_do_work = False # BREAK'
1851  <-----Source: line: 's4c_do_work = False # BREAK'
1851 <------Class: line: 's4c_do_work = False # BREAK'
1851<-------Source: line: 's4c_do_work = False # BREAK'
1852       InstructionFlow: end-gen
1852      Source: end-gen
1852      Switch: end: 'block-if'
1852    <-Source: end: 'block-if'
1852   <--Function: end: 'block-if'
1852  <---Source: end: 'block-if'
1852 <----Class: end: 'block-if'
1852<-----Source: end: 'block-if'
1852      Value: begin-gen
1852       Constant: begin-gen
1852        Constant: ctype: 'String' -> 'PL'
1852        Constant: expr: 'u"PL"'
1852      <-Value: expr: 'u"PL"'
1852       Constant: end-gen
1852      Value: end-gen
1852      Switch: line: 'if s4c_when == u"PL": s4c_do_work,s4c_work_done = True,True'
1852    <-Source: line: 'if s4c_when == u"PL": s4c_do_work,s4c_work_done = True,True'
1852   <--Function: line: 'if s4c_when == u"PL": s4c_do_work,s4c_work_done = True,True'
1852  <---Source: line: 'if s4c_when == u"PL": s4c_do_work,s4c_work_done = True,True'
1852 <----Class: line: 'if s4c_when == u"PL": s4c_do_work,s4c_work_done = True,True'
1852<-----Source: line: 'if s4c_when == u"PL": s4c_do_work,s4c_work_done = True,True'
1853      Switch: line: 'if s4c_do_work:'
1853    <-Source: line: 'if s4c_do_work:'
1853   <--Function: line: 'if s4c_do_work:'
1853  <---Source: line: 'if s4c_do_work:'
1853 <----Class: line: 'if s4c_do_work:'
1853<-----Source: line: 'if s4c_do_work:'
1854      Switch: begin: 'block-if'
1854    <-Source: begin: 'block-if'
1854   <--Function: begin: 'block-if'
1854  <---Source: begin: 'block-if'
1854 <----Class: begin: 'block-if'
1854<-----Source: begin: 'block-if'
1854      Source: begin-gen
1854       InstructionUpdate: begin-gen
1854        Identifier: begin-gen
1854         Identifier: expr: 'longPosibles'
1854        Identifier: end-gen
1854        OpUpdate: begin-gen
1854         OpUpdate: expr: '='
1854        OpUpdate: end-gen
1854        Value: begin-gen
1854         Constant: begin-gen
1854          Constant: ctype: None -> None
1854          Value: begin-gen
1854           Constant: begin-gen
1854            Constant: ctype: 'Number' -> '10'
1854            Constant: expr: '10'
1854          <-Value: expr: '10'
1854           Constant: end-gen
1854          Value: end-gen
1854          Constant: expr: 'qsatype.Array([10])'
1854        <-Value: expr: 'qsatype.Array([10])'
1854         Constant: end-gen
1854        Value: end-gen
1854        InstructionUpdate: line: 'longPosibles = qsatype.Array([10])'
1854      <-Source: line: 'longPosibles = qsatype.Array([10])'
1854     <--Switch: line: 'longPosibles = qsatype.Array([10])'
1854    <---Source: line: 'longPosibles = qsatype.Array([10])'
1854   <----Function: line: 'longPosibles = qsatype.Array([10])'
1854  <-----Source: line: 'longPosibles = qsatype.Array([10])'
1854 <------Class: line: 'longPosibles = qsatype.Array([10])'
1854<-------Source: line: 'longPosibles = qsatype.Array([10])'
1855       InstructionUpdate: end-gen
1855       InstructionUpdate: begin-gen
1855        Identifier: begin-gen
1855         Identifier: expr: 'pais'
1855        Identifier: end-gen
1855        OpUpdate: begin-gen
1855         OpUpdate: expr: '='
1855        OpUpdate: end-gen
1855        Value: begin-gen
1855         Member: begin-gen
1855          Identifier: begin-gen
1855           Identifier: expr: 'util'
1855          Identifier: end-gen
1855          FunctionCall: begin-gen
1855           Value: begin-gen
1855            Constant: begin-gen
1855             Constant: ctype: 'String' -> 'scripts'
1855             Constant: expr: 'u"scripts"'
1855           <-Value: expr: 'u"scripts"'
1855            Constant: end-gen
1855           Value: end-gen
1855           Value: begin-gen
1855            Constant: begin-gen
1855             Constant: ctype: 'String' -> 'Polonia'
1855             Constant: expr: 'u"Polonia"'
1855           <-Value: expr: 'u"Polonia"'
1855            Constant: end-gen
1855           Value: end-gen
1855           FunctionCall: expr: 'translate(u"scripts", u"Polonia")'
1855          FunctionCall: end-gen
1855          Member: expr: 'util.translate(u"scripts", u"Polonia")'
1855        <-Value: expr: 'util.translate(u"scripts", u"Polonia")'
1855         Member: end-gen
1855        Value: end-gen
1855        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Polonia")'
1855      <-Source: line: 'pais = util.translate(u"scripts", u"Polonia")'
1855     <--Switch: line: 'pais = util.translate(u"scripts", u"Polonia")'
1855    <---Source: line: 'pais = util.translate(u"scripts", u"Polonia")'
1855   <----Function: line: 'pais = util.translate(u"scripts", u"Polonia")'
1855  <-----Source: line: 'pais = util.translate(u"scripts", u"Polonia")'
1855 <------Class: line: 'pais = util.translate(u"scripts", u"Polonia")'
1855<-------Source: line: 'pais = util.translate(u"scripts", u"Polonia")'
1856       InstructionUpdate: end-gen
1856       InstructionFlow: begin-gen
1856        InstructionFlow: break: 'break '
1856      <-Source: break: 'break '
1856     <--Switch: line: 's4c_do_work = False # BREAK'
1856    <---Source: line: 's4c_do_work = False # BREAK'
1856   <----Function: line: 's4c_do_work = False # BREAK'
1856  <-----Source: line: 's4c_do_work = False # BREAK'
1856 <------Class: line: 's4c_do_work = False # BREAK'
1856<-------Source: line: 's4c_do_work = False # BREAK'
1857       InstructionFlow: end-gen
1857      Source: end-gen
1857      Switch: end: 'block-if'
1857    <-Source: end: 'block-if'
1857   <--Function: end: 'block-if'
1857  <---Source: end: 'block-if'
1857 <----Class: end: 'block-if'
1857<-----Source: end: 'block-if'
1857      Value: begin-gen
1857       Constant: begin-gen
1857        Constant: ctype: 'String' -> 'PT'
1857        Constant: expr: 'u"PT"'
1857      <-Value: expr: 'u"PT"'
1857       Constant: end-gen
1857      Value: end-gen
1857      Switch: line: 'if s4c_when == u"PT": s4c_do_work,s4c_work_done = True,True'
1857    <-Source: line: 'if s4c_when == u"PT": s4c_do_work,s4c_work_done = True,True'
1857   <--Function: line: 'if s4c_when == u"PT": s4c_do_work,s4c_work_done = True,True'
1857  <---Source: line: 'if s4c_when == u"PT": s4c_do_work,s4c_work_done = True,True'
1857 <----Class: line: 'if s4c_when == u"PT": s4c_do_work,s4c_work_done = True,True'
1857<-----Source: line: 'if s4c_when == u"PT": s4c_do_work,s4c_work_done = True,True'
1858      Switch: line: 'if s4c_do_work:'
1858    <-Source: line: 'if s4c_do_work:'
1858   <--Function: line: 'if s4c_do_work:'
1858  <---Source: line: 'if s4c_do_work:'
1858 <----Class: line: 'if s4c_do_work:'
1858<-----Source: line: 'if s4c_do_work:'
1859      Switch: begin: 'block-if'
1859    <-Source: begin: 'block-if'
1859   <--Function: begin: 'block-if'
1859  <---Source: begin: 'block-if'
1859 <----Class: begin: 'block-if'
1859<-----Source: begin: 'block-if'
1859      Source: begin-gen
1859       InstructionUpdate: begin-gen
1859        Identifier: begin-gen
1859         Identifier: expr: 'longPosibles'
1859        Identifier: end-gen
1859        OpUpdate: begin-gen
1859         OpUpdate: expr: '='
1859        OpUpdate: end-gen
1859        Value: begin-gen
1859         Constant: begin-gen
1859          Constant: ctype: None -> None
1859          Value: begin-gen
1859           Constant: begin-gen
1859            Constant: ctype: 'Number' -> '9'
1859            Constant: expr: '9'
1859          <-Value: expr: '9'
1859           Constant: end-gen
1859          Value: end-gen
1859          Constant: expr: 'qsatype.Array([9])'
1859        <-Value: expr: 'qsatype.Array([9])'
1859         Constant: end-gen
1859        Value: end-gen
1859        InstructionUpdate: line: 'longPosibles = qsatype.Array([9])'
1859      <-Source: line: 'longPosibles = qsatype.Array([9])'
1859     <--Switch: line: 'longPosibles = qsatype.Array([9])'
1859    <---Source: line: 'longPosibles = qsatype.Array([9])'
1859   <----Function: line: 'longPosibles = qsatype.Array([9])'
1859  <-----Source: line: 'longPosibles = qsatype.Array([9])'
1859 <------Class: line: 'longPosibles = qsatype.Array([9])'
1859<-------Source: line: 'longPosibles = qsatype.Array([9])'
1860       InstructionUpdate: end-gen
1860       InstructionUpdate: begin-gen
1860        Identifier: begin-gen
1860         Identifier: expr: 'pais'
1860        Identifier: end-gen
1860        OpUpdate: begin-gen
1860         OpUpdate: expr: '='
1860        OpUpdate: end-gen
1860        Value: begin-gen
1860         Member: begin-gen
1860          Identifier: begin-gen
1860           Identifier: expr: 'util'
1860          Identifier: end-gen
1860          FunctionCall: begin-gen
1860           Value: begin-gen
1860            Constant: begin-gen
1860             Constant: ctype: 'String' -> 'scripts'
1860             Constant: expr: 'u"scripts"'
1860           <-Value: expr: 'u"scripts"'
1860            Constant: end-gen
1860           Value: end-gen
1860           Value: begin-gen
1860            Constant: begin-gen
1860             Constant: ctype: 'String' -> 'Portugal'
1860             Constant: expr: 'u"Portugal"'
1860           <-Value: expr: 'u"Portugal"'
1860            Constant: end-gen
1860           Value: end-gen
1860           FunctionCall: expr: 'translate(u"scripts", u"Portugal")'
1860          FunctionCall: end-gen
1860          Member: expr: 'util.translate(u"scripts", u"Portugal")'
1860        <-Value: expr: 'util.translate(u"scripts", u"Portugal")'
1860         Member: end-gen
1860        Value: end-gen
1860        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Portugal")'
1860      <-Source: line: 'pais = util.translate(u"scripts", u"Portugal")'
1860     <--Switch: line: 'pais = util.translate(u"scripts", u"Portugal")'
1860    <---Source: line: 'pais = util.translate(u"scripts", u"Portugal")'
1860   <----Function: line: 'pais = util.translate(u"scripts", u"Portugal")'
1860  <-----Source: line: 'pais = util.translate(u"scripts", u"Portugal")'
1860 <------Class: line: 'pais = util.translate(u"scripts", u"Portugal")'
1860<-------Source: line: 'pais = util.translate(u"scripts", u"Portugal")'
1861       InstructionUpdate: end-gen
1861       InstructionFlow: begin-gen
1861        InstructionFlow: break: 'break '
1861      <-Source: break: 'break '
1861     <--Switch: line: 's4c_do_work = False # BREAK'
1861    <---Source: line: 's4c_do_work = False # BREAK'
1861   <----Function: line: 's4c_do_work = False # BREAK'
1861  <-----Source: line: 's4c_do_work = False # BREAK'
1861 <------Class: line: 's4c_do_work = False # BREAK'
1861<-------Source: line: 's4c_do_work = False # BREAK'
1862       InstructionFlow: end-gen
1862      Source: end-gen
1862      Switch: end: 'block-if'
1862    <-Source: end: 'block-if'
1862   <--Function: end: 'block-if'
1862  <---Source: end: 'block-if'
1862 <----Class: end: 'block-if'
1862<-----Source: end: 'block-if'
1862      Value: begin-gen
1862       Constant: begin-gen
1862        Constant: ctype: 'String' -> 'RO'
1862        Constant: expr: 'u"RO"'
1862      <-Value: expr: 'u"RO"'
1862       Constant: end-gen
1862      Value: end-gen
1862      Switch: line: 'if s4c_when == u"RO": s4c_do_work,s4c_work_done = True,True'
1862    <-Source: line: 'if s4c_when == u"RO": s4c_do_work,s4c_work_done = True,True'
1862   <--Function: line: 'if s4c_when == u"RO": s4c_do_work,s4c_work_done = True,True'
1862  <---Source: line: 'if s4c_when == u"RO": s4c_do_work,s4c_work_done = True,True'
1862 <----Class: line: 'if s4c_when == u"RO": s4c_do_work,s4c_work_done = True,True'
1862<-----Source: line: 'if s4c_when == u"RO": s4c_do_work,s4c_work_done = True,True'
1863      Switch: line: 'if s4c_do_work:'
1863    <-Source: line: 'if s4c_do_work:'
1863   <--Function: line: 'if s4c_do_work:'
1863  <---Source: line: 'if s4c_do_work:'
1863 <----Class: line: 'if s4c_do_work:'
1863<-----Source: line: 'if s4c_do_work:'
1864      Switch: begin: 'block-if'
1864    <-Source: begin: 'block-if'
1864   <--Function: begin: 'block-if'
1864  <---Source: begin: 'block-if'
1864 <----Class: begin: 'block-if'
1864<-----Source: begin: 'block-if'
1864      Source: begin-gen
1864       InstructionUpdate: begin-gen
1864        Identifier: begin-gen
1864         Identifier: expr: 'longPosibles'
1864        Identifier: end-gen
1864        OpUpdate: begin-gen
1864         OpUpdate: expr: '='
1864        OpUpdate: end-gen
1864        Value: begin-gen
1864         Constant: begin-gen
1864          Constant: ctype: None -> None
1864          Value: begin-gen
1864           Constant: begin-gen
1864            Constant: ctype: 'Number' -> '2'
1864            Constant: expr: '2'
1864          <-Value: expr: '2'
1864           Constant: end-gen
1864          Value: end-gen
1864          Value: begin-gen
1864           Constant: begin-gen
1864            Constant: ctype: 'Number' -> '3'
1864            Constant: expr: '3'
1864          <-Value: expr: '3'
1864           Constant: end-gen
1864          Value: end-gen
1864          Value: begin-gen
1864           Constant: begin-gen
1864            Constant: ctype: 'Number' -> '4'
1864            Constant: expr: '4'
1864          <-Value: expr: '4'
1864           Constant: end-gen
1864          Value: end-gen
1864          Value: begin-gen
1864           Constant: begin-gen
1864            Constant: ctype: 'Number' -> '5'
1864            Constant: expr: '5'
1864          <-Value: expr: '5'
1864           Constant: end-gen
1864          Value: end-gen
1864          Value: begin-gen
1864           Constant: begin-gen
1864            Constant: ctype: 'Number' -> '6'
1864            Constant: expr: '6'
1864          <-Value: expr: '6'
1864           Constant: end-gen
1864          Value: end-gen
1864          Value: begin-gen
1864           Constant: begin-gen
1864            Constant: ctype: 'Number' -> '7'
1864            Constant: expr: '7'
1864          <-Value: expr: '7'
1864           Constant: end-gen
1864          Value: end-gen
1864          Value: begin-gen
1864           Constant: begin-gen
1864            Constant: ctype: 'Number' -> '8'
1864            Constant: expr: '8'
1864          <-Value: expr: '8'
1864           Constant: end-gen
1864          Value: end-gen
1864          Value: begin-gen
1864           Constant: begin-gen
1864            Constant: ctype: 'Number' -> '9'
1864            Constant: expr: '9'
1864          <-Value: expr: '9'
1864           Constant: end-gen
1864          Value: end-gen
1864          Value: begin-gen
1864           Constant: begin-gen
1864            Constant: ctype: 'Number' -> '10'
1864            Constant: expr: '10'
1864          <-Value: expr: '10'
1864           Constant: end-gen
1864          Value: end-gen
1864          Constant: expr: 'qsatype.Array([2, 3, 4, 5, 6, 7, 8, 9, 10])'
1864        <-Value: expr: 'qsatype.Array([2, 3, 4, 5, 6, 7, 8, 9, 10])'
1864         Constant: end-gen
1864        Value: end-gen
1864        InstructionUpdate: line: 'longPosibles = qsatype.Array([2, 3, 4, 5, 6, 7, 8, 9, 10])'
1864      <-Source: line: 'longPosibles = qsatype.Array([2, 3, 4, 5, 6, 7, 8, 9, 10])'
1864     <--Switch: line: 'longPosibles = qsatype.Array([2, 3, 4, 5, 6, 7, 8, 9, 10])'
1864    <---Source: line: 'longPosibles = qsatype.Array([2, 3, 4, 5, 6, 7, 8, 9, 10])'
1864   <----Function: line: 'longPosibles = qsatype.Array([2, 3, 4, 5, 6, 7, 8, 9, 10])'
1864  <-----Source: line: 'longPosibles = qsatype.Array([2, 3, 4, 5, 6, 7, 8, 9, 10])'
1864 <------Class: line: 'longPosibles = qsatype.Array([2, 3, 4, 5, 6, 7, 8, 9, 10])'
1864<-------Source: line: 'longPosibles = qsatype.Array([2, 3, 4, 5, 6, 7, 8, 9, 10])'
1865       InstructionUpdate: end-gen
1865       InstructionUpdate: begin-gen
1865        Identifier: begin-gen
1865         Identifier: expr: 'pais'
1865        Identifier: end-gen
1865        OpUpdate: begin-gen
1865         OpUpdate: expr: '='
1865        OpUpdate: end-gen
1865        Value: begin-gen
1865         Member: begin-gen
1865          Identifier: begin-gen
1865           Identifier: expr: 'util'
1865          Identifier: end-gen
1865          FunctionCall: begin-gen
1865           Value: begin-gen
1865            Constant: begin-gen
1865             Constant: ctype: 'String' -> 'scripts'
1865             Constant: expr: 'u"scripts"'
1865           <-Value: expr: 'u"scripts"'
1865            Constant: end-gen
1865           Value: end-gen
1865           Value: begin-gen
1865            Constant: begin-gen
1865             Constant: ctype: 'String' -> 'Rumanía'
1865             Constant: expr: 'u"Rumanía"'
1865           <-Value: expr: 'u"Rumanía"'
1865            Constant: end-gen
1865           Value: end-gen
1865           FunctionCall: expr: 'translate(u"scripts", u"Rumanía")'
1865          FunctionCall: end-gen
1865          Member: expr: 'util.translate(u"scripts", u"Rumanía")'
1865        <-Value: expr: 'util.translate(u"scripts", u"Rumanía")'
1865         Member: end-gen
1865        Value: end-gen
1865        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Rumanía")'
1865      <-Source: line: 'pais = util.translate(u"scripts", u"Rumanía")'
1865     <--Switch: line: 'pais = util.translate(u"scripts", u"Rumanía")'
1865    <---Source: line: 'pais = util.translate(u"scripts", u"Rumanía")'
1865   <----Function: line: 'pais = util.translate(u"scripts", u"Rumanía")'
1865  <-----Source: line: 'pais = util.translate(u"scripts", u"Rumanía")'
1865 <------Class: line: 'pais = util.translate(u"scripts", u"Rumanía")'
1865<-------Source: line: 'pais = util.translate(u"scripts", u"Rumanía")'
1866       InstructionUpdate: end-gen
1866       InstructionFlow: begin-gen
1866        InstructionFlow: break: 'break '
1866      <-Source: break: 'break '
1866     <--Switch: line: 's4c_do_work = False # BREAK'
1866    <---Source: line: 's4c_do_work = False # BREAK'
1866   <----Function: line: 's4c_do_work = False # BREAK'
1866  <-----Source: line: 's4c_do_work = False # BREAK'
1866 <------Class: line: 's4c_do_work = False # BREAK'
1866<-------Source: line: 's4c_do_work = False # BREAK'
1867       InstructionFlow: end-gen
1867      Source: end-gen
1867      Switch: end: 'block-if'
1867    <-Source: end: 'block-if'
1867   <--Function: end: 'block-if'
1867  <---Source: end: 'block-if'
1867 <----Class: end: 'block-if'
1867<-----Source: end: 'block-if'
1867      Value: begin-gen
1867       Constant: begin-gen
1867        Constant: ctype: 'String' -> 'SE'
1867        Constant: expr: 'u"SE"'
1867      <-Value: expr: 'u"SE"'
1867       Constant: end-gen
1867      Value: end-gen
1867      Switch: line: 'if s4c_when == u"SE": s4c_do_work,s4c_work_done = True,True'
1867    <-Source: line: 'if s4c_when == u"SE": s4c_do_work,s4c_work_done = True,True'
1867   <--Function: line: 'if s4c_when == u"SE": s4c_do_work,s4c_work_done = True,True'
1867  <---Source: line: 'if s4c_when == u"SE": s4c_do_work,s4c_work_done = True,True'
1867 <----Class: line: 'if s4c_when == u"SE": s4c_do_work,s4c_work_done = True,True'
1867<-----Source: line: 'if s4c_when == u"SE": s4c_do_work,s4c_work_done = True,True'
1868      Switch: line: 'if s4c_do_work:'
1868    <-Source: line: 'if s4c_do_work:'
1868   <--Function: line: 'if s4c_do_work:'
1868  <---Source: line: 'if s4c_do_work:'
1868 <----Class: line: 'if s4c_do_work:'
1868<-----Source: line: 'if s4c_do_work:'
1869      Switch: begin: 'block-if'
1869    <-Source: begin: 'block-if'
1869   <--Function: begin: 'block-if'
1869  <---Source: begin: 'block-if'
1869 <----Class: begin: 'block-if'
1869<-----Source: begin: 'block-if'
1869      Source: begin-gen
1869       InstructionUpdate: begin-gen
1869        Identifier: begin-gen
1869         Identifier: expr: 'longPosibles'
1869        Identifier: end-gen
1869        OpUpdate: begin-gen
1869         OpUpdate: expr: '='
1869        OpUpdate: end-gen
1869        Value: begin-gen
1869         Constant: begin-gen
1869          Constant: ctype: None -> None
1869          Value: begin-gen
1869           Constant: begin-gen
1869            Constant: ctype: 'Number' -> '12'
1869            Constant: expr: '12'
1869          <-Value: expr: '12'
1869           Constant: end-gen
1869          Value: end-gen
1869          Constant: expr: 'qsatype.Array([12])'
1869        <-Value: expr: 'qsatype.Array([12])'
1869         Constant: end-gen
1869        Value: end-gen
1869        InstructionUpdate: line: 'longPosibles = qsatype.Array([12])'
1869      <-Source: line: 'longPosibles = qsatype.Array([12])'
1869     <--Switch: line: 'longPosibles = qsatype.Array([12])'
1869    <---Source: line: 'longPosibles = qsatype.Array([12])'
1869   <----Function: line: 'longPosibles = qsatype.Array([12])'
1869  <-----Source: line: 'longPosibles = qsatype.Array([12])'
1869 <------Class: line: 'longPosibles = qsatype.Array([12])'
1869<-------Source: line: 'longPosibles = qsatype.Array([12])'
1870       InstructionUpdate: end-gen
1870       InstructionUpdate: begin-gen
1870        Identifier: begin-gen
1870         Identifier: expr: 'pais'
1870        Identifier: end-gen
1870        OpUpdate: begin-gen
1870         OpUpdate: expr: '='
1870        OpUpdate: end-gen
1870        Value: begin-gen
1870         Member: begin-gen
1870          Identifier: begin-gen
1870           Identifier: expr: 'util'
1870          Identifier: end-gen
1870          FunctionCall: begin-gen
1870           Value: begin-gen
1870            Constant: begin-gen
1870             Constant: ctype: 'String' -> 'scripts'
1870             Constant: expr: 'u"scripts"'
1870           <-Value: expr: 'u"scripts"'
1870            Constant: end-gen
1870           Value: end-gen
1870           Value: begin-gen
1870            Constant: begin-gen
1870             Constant: ctype: 'String' -> 'Suecia'
1870             Constant: expr: 'u"Suecia"'
1870           <-Value: expr: 'u"Suecia"'
1870            Constant: end-gen
1870           Value: end-gen
1870           FunctionCall: expr: 'translate(u"scripts", u"Suecia")'
1870          FunctionCall: end-gen
1870          Member: expr: 'util.translate(u"scripts", u"Suecia")'
1870        <-Value: expr: 'util.translate(u"scripts", u"Suecia")'
1870         Member: end-gen
1870        Value: end-gen
1870        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Suecia")'
1870      <-Source: line: 'pais = util.translate(u"scripts", u"Suecia")'
1870     <--Switch: line: 'pais = util.translate(u"scripts", u"Suecia")'
1870    <---Source: line: 'pais = util.translate(u"scripts", u"Suecia")'
1870   <----Function: line: 'pais = util.translate(u"scripts", u"Suecia")'
1870  <-----Source: line: 'pais = util.translate(u"scripts", u"Suecia")'
1870 <------Class: line: 'pais = util.translate(u"scripts", u"Suecia")'
1870<-------Source: line: 'pais = util.translate(u"scripts", u"Suecia")'
1871       InstructionUpdate: end-gen
1871       InstructionFlow: begin-gen
1871        InstructionFlow: break: 'break '
1871      <-Source: break: 'break '
1871     <--Switch: line: 's4c_do_work = False # BREAK'
1871    <---Source: line: 's4c_do_work = False # BREAK'
1871   <----Function: line: 's4c_do_work = False # BREAK'
1871  <-----Source: line: 's4c_do_work = False # BREAK'
1871 <------Class: line: 's4c_do_work = False # BREAK'
1871<-------Source: line: 's4c_do_work = False # BREAK'
1872       InstructionFlow: end-gen
1872      Source: end-gen
1872      Switch: end: 'block-if'
1872    <-Source: end: 'block-if'
1872   <--Function: end: 'block-if'
1872  <---Source: end: 'block-if'
1872 <----Class: end: 'block-if'
1872<-----Source: end: 'block-if'
1872      Value: begin-gen
1872       Constant: begin-gen
1872        Constant: ctype: 'String' -> 'SI'
1872        Constant: expr: 'u"SI"'
1872      <-Value: expr: 'u"SI"'
1872       Constant: end-gen
1872      Value: end-gen
1872      Switch: line: 'if s4c_when == u"SI": s4c_do_work,s4c_work_done = True,True'
1872    <-Source: line: 'if s4c_when == u"SI": s4c_do_work,s4c_work_done = True,True'
1872   <--Function: line: 'if s4c_when == u"SI": s4c_do_work,s4c_work_done = True,True'
1872  <---Source: line: 'if s4c_when == u"SI": s4c_do_work,s4c_work_done = True,True'
1872 <----Class: line: 'if s4c_when == u"SI": s4c_do_work,s4c_work_done = True,True'
1872<-----Source: line: 'if s4c_when == u"SI": s4c_do_work,s4c_work_done = True,True'
1873      Switch: line: 'if s4c_do_work:'
1873    <-Source: line: 'if s4c_do_work:'
1873   <--Function: line: 'if s4c_do_work:'
1873  <---Source: line: 'if s4c_do_work:'
1873 <----Class: line: 'if s4c_do_work:'
1873<-----Source: line: 'if s4c_do_work:'
1874      Switch: begin: 'block-if'
1874    <-Source: begin: 'block-if'
1874   <--Function: begin: 'block-if'
1874  <---Source: begin: 'block-if'
1874 <----Class: begin: 'block-if'
1874<-----Source: begin: 'block-if'
1874      Source: begin-gen
1874       InstructionUpdate: begin-gen
1874        Identifier: begin-gen
1874         Identifier: expr: 'longPosibles'
1874        Identifier: end-gen
1874        OpUpdate: begin-gen
1874         OpUpdate: expr: '='
1874        OpUpdate: end-gen
1874        Value: begin-gen
1874         Constant: begin-gen
1874          Constant: ctype: None -> None
1874          Value: begin-gen
1874           Constant: begin-gen
1874            Constant: ctype: 'Number' -> '8'
1874            Constant: expr: '8'
1874          <-Value: expr: '8'
1874           Constant: end-gen
1874          Value: end-gen
1874          Constant: expr: 'qsatype.Array([8])'
1874        <-Value: expr: 'qsatype.Array([8])'
1874         Constant: end-gen
1874        Value: end-gen
1874        InstructionUpdate: line: 'longPosibles = qsatype.Array([8])'
1874      <-Source: line: 'longPosibles = qsatype.Array([8])'
1874     <--Switch: line: 'longPosibles = qsatype.Array([8])'
1874    <---Source: line: 'longPosibles = qsatype.Array([8])'
1874   <----Function: line: 'longPosibles = qsatype.Array([8])'
1874  <-----Source: line: 'longPosibles = qsatype.Array([8])'
1874 <------Class: line: 'longPosibles = qsatype.Array([8])'
1874<-------Source: line: 'longPosibles = qsatype.Array([8])'
1875       InstructionUpdate: end-gen
1875       InstructionUpdate: begin-gen
1875        Identifier: begin-gen
1875         Identifier: expr: 'pais'
1875        Identifier: end-gen
1875        OpUpdate: begin-gen
1875         OpUpdate: expr: '='
1875        OpUpdate: end-gen
1875        Value: begin-gen
1875         Member: begin-gen
1875          Identifier: begin-gen
1875           Identifier: expr: 'util'
1875          Identifier: end-gen
1875          FunctionCall: begin-gen
1875           Value: begin-gen
1875            Constant: begin-gen
1875             Constant: ctype: 'String' -> 'scripts'
1875             Constant: expr: 'u"scripts"'
1875           <-Value: expr: 'u"scripts"'
1875            Constant: end-gen
1875           Value: end-gen
1875           Value: begin-gen
1875            Constant: begin-gen
1875             Constant: ctype: 'String' -> 'Eslovenia'
1875             Constant: expr: 'u"Eslovenia"'
1875           <-Value: expr: 'u"Eslovenia"'
1875            Constant: end-gen
1875           Value: end-gen
1875           FunctionCall: expr: 'translate(u"scripts", u"Eslovenia")'
1875          FunctionCall: end-gen
1875          Member: expr: 'util.translate(u"scripts", u"Eslovenia")'
1875        <-Value: expr: 'util.translate(u"scripts", u"Eslovenia")'
1875         Member: end-gen
1875        Value: end-gen
1875        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Eslovenia")'
1875      <-Source: line: 'pais = util.translate(u"scripts", u"Eslovenia")'
1875     <--Switch: line: 'pais = util.translate(u"scripts", u"Eslovenia")'
1875    <---Source: line: 'pais = util.translate(u"scripts", u"Eslovenia")'
1875   <----Function: line: 'pais = util.translate(u"scripts", u"Eslovenia")'
1875  <-----Source: line: 'pais = util.translate(u"scripts", u"Eslovenia")'
1875 <------Class: line: 'pais = util.translate(u"scripts", u"Eslovenia")'
1875<-------Source: line: 'pais = util.translate(u"scripts", u"Eslovenia")'
1876       InstructionUpdate: end-gen
1876       InstructionFlow: begin-gen
1876        InstructionFlow: break: 'break '
1876      <-Source: break: 'break '
1876     <--Switch: line: 's4c_do_work = False # BREAK'
1876    <---Source: line: 's4c_do_work = False # BREAK'
1876   <----Function: line: 's4c_do_work = False # BREAK'
1876  <-----Source: line: 's4c_do_work = False # BREAK'
1876 <------Class: line: 's4c_do_work = False # BREAK'
1876<-------Source: line: 's4c_do_work = False # BREAK'
1877       InstructionFlow: end-gen
1877      Source: end-gen
1877      Switch: end: 'block-if'
1877    <-Source: end: 'block-if'
1877   <--Function: end: 'block-if'
1877  <---Source: end: 'block-if'
1877 <----Class: end: 'block-if'
1877<-----Source: end: 'block-if'
1877      Value: begin-gen
1877       Constant: begin-gen
1877        Constant: ctype: 'String' -> 'SK'
1877        Constant: expr: 'u"SK"'
1877      <-Value: expr: 'u"SK"'
1877       Constant: end-gen
1877      Value: end-gen
1877      Switch: line: 'if s4c_when == u"SK": s4c_do_work,s4c_work_done = True,True'
1877    <-Source: line: 'if s4c_when == u"SK": s4c_do_work,s4c_work_done = True,True'
1877   <--Function: line: 'if s4c_when == u"SK": s4c_do_work,s4c_work_done = True,True'
1877  <---Source: line: 'if s4c_when == u"SK": s4c_do_work,s4c_work_done = True,True'
1877 <----Class: line: 'if s4c_when == u"SK": s4c_do_work,s4c_work_done = True,True'
1877<-----Source: line: 'if s4c_when == u"SK": s4c_do_work,s4c_work_done = True,True'
1878      Switch: line: 'if s4c_do_work:'
1878    <-Source: line: 'if s4c_do_work:'
1878   <--Function: line: 'if s4c_do_work:'
1878  <---Source: line: 'if s4c_do_work:'
1878 <----Class: line: 'if s4c_do_work:'
1878<-----Source: line: 'if s4c_do_work:'
1879      Switch: begin: 'block-if'
1879    <-Source: begin: 'block-if'
1879   <--Function: begin: 'block-if'
1879  <---Source: begin: 'block-if'
1879 <----Class: begin: 'block-if'
1879<-----Source: begin: 'block-if'
1879      Source: begin-gen
1879       InstructionUpdate: begin-gen
1879        Identifier: begin-gen
1879         Identifier: expr: 'longPosibles'
1879        Identifier: end-gen
1879        OpUpdate: begin-gen
1879         OpUpdate: expr: '='
1879        OpUpdate: end-gen
1879        Value: begin-gen
1879         Constant: begin-gen
1879          Constant: ctype: None -> None
1879          Value: begin-gen
1879           Constant: begin-gen
1879            Constant: ctype: 'Number' -> '10'
1879            Constant: expr: '10'
1879          <-Value: expr: '10'
1879           Constant: end-gen
1879          Value: end-gen
1879          Constant: expr: 'qsatype.Array([10])'
1879        <-Value: expr: 'qsatype.Array([10])'
1879         Constant: end-gen
1879        Value: end-gen
1879        InstructionUpdate: line: 'longPosibles = qsatype.Array([10])'
1879      <-Source: line: 'longPosibles = qsatype.Array([10])'
1879     <--Switch: line: 'longPosibles = qsatype.Array([10])'
1879    <---Source: line: 'longPosibles = qsatype.Array([10])'
1879   <----Function: line: 'longPosibles = qsatype.Array([10])'
1879  <-----Source: line: 'longPosibles = qsatype.Array([10])'
1879 <------Class: line: 'longPosibles = qsatype.Array([10])'
1879<-------Source: line: 'longPosibles = qsatype.Array([10])'
1880       InstructionUpdate: end-gen
1880       InstructionUpdate: begin-gen
1880        Identifier: begin-gen
1880         Identifier: expr: 'pais'
1880        Identifier: end-gen
1880        OpUpdate: begin-gen
1880         OpUpdate: expr: '='
1880        OpUpdate: end-gen
1880        Value: begin-gen
1880         Member: begin-gen
1880          Identifier: begin-gen
1880           Identifier: expr: 'util'
1880          Identifier: end-gen
1880          FunctionCall: begin-gen
1880           Value: begin-gen
1880            Constant: begin-gen
1880             Constant: ctype: 'String' -> 'scripts'
1880             Constant: expr: 'u"scripts"'
1880           <-Value: expr: 'u"scripts"'
1880            Constant: end-gen
1880           Value: end-gen
1880           Value: begin-gen
1880            Constant: begin-gen
1880             Constant: ctype: 'String' -> 'Eslovaquia'
1880             Constant: expr: 'u"Eslovaquia"'
1880           <-Value: expr: 'u"Eslovaquia"'
1880            Constant: end-gen
1880           Value: end-gen
1880           FunctionCall: expr: 'translate(u"scripts", u"Eslovaquia")'
1880          FunctionCall: end-gen
1880          Member: expr: 'util.translate(u"scripts", u"Eslovaquia")'
1880        <-Value: expr: 'util.translate(u"scripts", u"Eslovaquia")'
1880         Member: end-gen
1880        Value: end-gen
1880        InstructionUpdate: line: 'pais = util.translate(u"scripts", u"Eslovaquia")'
1880      <-Source: line: 'pais = util.translate(u"scripts", u"Eslovaquia")'
1880     <--Switch: line: 'pais = util.translate(u"scripts", u"Eslovaquia")'
1880    <---Source: line: 'pais = util.translate(u"scripts", u"Eslovaquia")'
1880   <----Function: line: 'pais = util.translate(u"scripts", u"Eslovaquia")'
1880  <-----Source: line: 'pais = util.translate(u"scripts", u"Eslovaquia")'
1880 <------Class: line: 'pais = util.translate(u"scripts", u"Eslovaquia")'
1880<-------Source: line: 'pais = util.translate(u"scripts", u"Eslovaquia")'
1881       InstructionUpdate: end-gen
1881       InstructionFlow: begin-gen
1881        InstructionFlow: break: 'break '
1881      <-Source: break: 'break '
1881     <--Switch: line: 's4c_do_work = False # BREAK'
1881    <---Source: line: 's4c_do_work = False # BREAK'
1881   <----Function: line: 's4c_do_work = False # BREAK'
1881  <-----Source: line: 's4c_do_work = False # BREAK'
1881 <------Class: line: 's4c_do_work = False # BREAK'
1881<-------Source: line: 's4c_do_work = False # BREAK'
1882       InstructionFlow: end-gen
1882      Source: end-gen
1882      Switch: end: 'block-if'
1882    <-Source: end: 'block-if'
1882   <--Function: end: 'block-if'
1882  <---Source: end: 'block-if'
1882 <----Class: end: 'block-if'
1882<-----Source: end: 'block-if'
1882      Switch: line: 'if not s4c_work_done: s4c_do_work,s4c_work_done = True,True'
1882    <-Source: line: 'if not s4c_work_done: s4c_do_work,s4c_work_done = True,True'
1882   <--Function: line: 'if not s4c_work_done: s4c_do_work,s4c_work_done = True,True'
1882  <---Source: line: 'if not s4c_work_done: s4c_do_work,s4c_work_done = True,True'
1882 <----Class: line: 'if not s4c_work_done: s4c_do_work,s4c_work_done = True,True'
1882<-----Source: line: 'if not s4c_work_done: s4c_do_work,s4c_work_done = True,True'
1883      Switch: line: 'if s4c_do_work:'
1883    <-Source: line: 'if s4c_do_work:'
1883   <--Function: line: 'if s4c_do_work:'
1883  <---Source: line: 'if s4c_do_work:'
1883 <----Class: line: 'if s4c_do_work:'
1883<-----Source: line: 'if s4c_do_work:'
1884      Switch: begin: 'block-if'
1884    <-Source: begin: 'block-if'
1884   <--Function: begin: 'block-if'
1884  <---Source: begin: 'block-if'
1884 <----Class: begin: 'block-if'
1884<-----Source: begin: 'block-if'
1884      Source: begin-gen
1884       InstructionUpdate: begin-gen
1884        Identifier: begin-gen
1884         Identifier: expr: 'error'
1884        Identifier: end-gen
1884        OpUpdate: begin-gen
1884         OpUpdate: expr: '='
1884        OpUpdate: end-gen
1884        Value: begin-gen
1884         Member: begin-gen
1884          Identifier: begin-gen
1884           Identifier: expr: 'util'
1884          Identifier: end-gen
1884          FunctionCall: begin-gen
1884           Value: begin-gen
1884            Constant: begin-gen
1884             Constant: ctype: 'String' -> 'scripts'
1884             Constant: expr: 'u"scripts"'
1884           <-Value: expr: 'u"scripts"'
1884            Constant: end-gen
1884           Value: end-gen
1884           Value: begin-gen
1884            Constant: begin-gen
1884             Constant: ctype: 'String' -> 'El código de país %1 no es correcto'
1884             Constant: expr: 'u"El código de país %1 no es correcto"'
1884           <-Value: expr: 'u"El código de país %1 no es correcto"'
1884            Constant: end-gen
1884           Value: end-gen
1884           FunctionCall: expr: 'translate(u"scripts", u"El código de país %1 no es correcto")'
1884          FunctionCall: end-gen
1884          FunctionCall: begin-gen
1884           Value: begin-gen
1884            Identifier: begin-gen
1884             Identifier: expr: 'codPais'
1884           <-Value: expr: 'codPais'
1884            Identifier: end-gen
1884           Value: end-gen
1884           FunctionCall: expr: 'arg(codPais)'
1884          FunctionCall: end-gen
1884          Member: expr: 'util.translate(u"scripts", u"El código de país %1 no es correcto").arg(codPais)'
1884        <-Value: expr: 'util.translate(u"scripts", u"El código de país %1 no es correcto").arg(codPais)'
1884         Member: end-gen
1884        Value: end-gen
1884        InstructionUpdate: line: 'error = util.translate(u"scripts", u"El código de país %1 no es correcto").arg(codPais)'
1884      <-Source: line: 'error = util.translate(u"scripts", u"El código de país %1 no es correcto").arg(codPais)'
1884     <--Switch: line: 'error = util.translate(u"scripts", u"El código de país %1 no es correcto").arg(codPais)'
1884    <---Source: line: 'error = util.translate(u"scripts", u"El código de país %1 no es correcto").arg(codPais)'
1884   <----Function: line: 'error = util.translate(u"scripts", u"El código de país %1 no es correcto").arg(codPais)'
1884  <-----Source: line: 'error = util.translate(u"scripts", u"El código de país %1 no es correcto").arg(codPais)'
1884 <------Class: line: 'error = util.translate(u"scripts", u"El código de país %1 no es correcto").arg(codPais)'
1884<-------Source: line: 'error = util.translate(u"scripts", u"El código de país %1 no es correcto").arg(codPais)'
1885       InstructionUpdate: end-gen
1885       InstructionFlow: begin-gen
1885        Value: begin-gen
1885         Identifier: begin-gen
1885          Identifier: expr: 'error'
1885        <-Value: expr: 'error'
1885         Identifier: end-gen
1885        Value: end-gen
1885        InstructionFlow: line: 'return error'
1885      <-Source: line: 'return error'
1885     <--Switch: line: 'return error'
1885    <---Source: line: 'return error'
1885   <----Function: line: 'return error'
1885  <-----Source: line: 'return error'
1885 <------Class: line: 'return error'
1885<-------Source: line: 'return error'
1886       InstructionFlow: end-gen
1886      Source: end-gen
1886      Switch: end: 'block-if'
1886    <-Source: end: 'block-if'
1886   <--Function: end: 'block-if'
1886  <---Source: end: 'block-if'
1886 <----Class: end: 'block-if'
1886<-----Source: end: 'block-if'
1886     Switch: end-gen
1886     DeclarationBlock: begin-gen
1886      Variable: begin-gen
1886       Variable: expr: 'longOk'
1886       Variable: expr: '='
1886       Value: begin-gen
1886        Identifier: begin-gen
1886         Identifier: expr: 'False'
1886       <-Value: expr: 'False'
1886      <--Variable: expr: 'False'
1886        Identifier: end-gen
1886       Value: end-gen
1886      Variable: end-gen
1886      DeclarationBlock: line: 'longOk = False'
1886    <-Source: line: 'longOk = False'
1886   <--Function: line: 'longOk = False'
1886  <---Source: line: 'longOk = False'
1886 <----Class: line: 'longOk = False'
1886<-----Source: line: 'longOk = False'
1887     DeclarationBlock: end-gen
1887     DeclarationBlock: begin-gen
1887      Variable: begin-gen
1887       Variable: expr: 'longitud'
1887       Variable: expr: '='
1887       Expression: begin-gen
1887        Member: begin-gen
1887         Identifier: begin-gen
1887          Identifier: expr: 'nifIva'
1887         Identifier: end-gen
1887         Identifier: begin-gen
1887          Identifier: expr: 'length'
1887         Identifier: end-gen
1887         Member: expr: 'len(nifIva)'
1887       <-Expression: expr: 'len(nifIva)'
1887      <--Variable: expr: 'len(nifIva)'
1887        Member: end-gen
1887        OpMath: begin-gen
1887         OpMath: expr: '-'
1887       <-Expression: expr: '-'
1887      <--Variable: expr: '-'
1887        OpMath: end-gen
1887        Constant: begin-gen
1887         Constant: ctype: 'Number' -> '2'
1887         Constant: expr: '2'
1887       <-Expression: expr: '2'
1887      <--Variable: expr: '2'
1887        Constant: end-gen
1887       Expression: end-gen
1887      Variable: end-gen
1887      DeclarationBlock: line: 'longitud = len(nifIva) - 2'
1887    <-Source: line: 'longitud = len(nifIva) - 2'
1887   <--Function: line: 'longitud = len(nifIva) - 2'
1887  <---Source: line: 'longitud = len(nifIva) - 2'
1887 <----Class: line: 'longitud = len(nifIva) - 2'
1887<-----Source: line: 'longitud = len(nifIva) - 2'
1888     DeclarationBlock: end-gen
1888     For: begin-gen
1888      Variable: begin-gen
1888       Variable: expr: 'i'
1888       Variable: expr: '='
1888       Value: begin-gen
1888        Constant: begin-gen
1888         Constant: ctype: 'Number' -> '0'
1888         Constant: expr: '0'
1888       <-Value: expr: '0'
1888      <--Variable: expr: '0'
1888        Constant: end-gen
1888       Value: end-gen
1888      Variable: end-gen
1888      For: line: 'i = 0'
1888    <-Source: line: 'i = 0'
1888   <--Function: line: 'i = 0'
1888  <---Source: line: 'i = 0'
1888 <----Class: line: 'i = 0'
1888<-----Source: line: 'i = 0'
1889      For: line: 'while_pass = True'
1889    <-Source: line: 'while_pass = True'
1889   <--Function: line: 'while_pass = True'
1889  <---Source: line: 'while_pass = True'
1889 <----Class: line: 'while_pass = True'
1889<-----Source: line: 'while_pass = True'
1890      InlineUpdate: begin-gen
1890       Identifier: begin-gen
1890        Identifier: expr: 'i'
1890       Identifier: end-gen
1890       InlineUpdate: expr: 'i'
1890       InlineUpdate: line+1: 'i += 1'
1890      InlineUpdate: end-gen
1890      Expression: begin-gen
1890       Identifier: begin-gen
1890        Identifier: expr: 'i'
1890      <-Expression: expr: 'i'
1890       Identifier: end-gen
1890       Compare: begin-gen
1890        Compare: expr: '<'
1890      <-Expression: expr: '<'
1890       Compare: end-gen
1890       Member: begin-gen
1890        Identifier: begin-gen
1890         Identifier: expr: 'longPosibles'
1890        Identifier: end-gen
1890        Identifier: begin-gen
1890         Identifier: expr: 'length'
1890        Identifier: end-gen
1890        Member: expr: 'len(longPosibles)'
1890      <-Expression: expr: 'len(longPosibles)'
1890       Member: end-gen
1890      Expression: end-gen
1890      For: line: 'while i < len(longPosibles):'
1890    <-Source: line: 'while i < len(longPosibles):'
1890   <--Function: line: 'while i < len(longPosibles):'
1890  <---Source: line: 'while i < len(longPosibles):'
1890 <----Class: line: 'while i < len(longPosibles):'
1890<-----Source: line: 'while i < len(longPosibles):'
1891      For: begin: 'block-for'
1891    <-Source: begin: 'block-for'
1891   <--Function: begin: 'block-for'
1891  <---Source: begin: 'block-for'
1891 <----Class: begin: 'block-for'
1891<-----Source: begin: 'block-for'
1891      For: line: 'if not while_pass:'
1891    <-Source: line: 'if not while_pass:'
1891   <--Function: line: 'if not while_pass:'
1891  <---Source: line: 'if not while_pass:'
1891 <----Class: line: 'if not while_pass:'
1891<-----Source: line: 'if not while_pass:'
1892      For: begin: 'block-while_pass'
1892    <-Source: begin: 'block-while_pass'
1892   <--Function: begin: 'block-while_pass'
1892  <---Source: begin: 'block-while_pass'
1892 <----Class: begin: 'block-while_pass'
1892<-----Source: begin: 'block-while_pass'
1892      For: line: 'i += 1'
1892    <-Source: line: 'i += 1'
1892   <--Function: line: 'i += 1'
1892  <---Source: line: 'i += 1'
1892 <----Class: line: 'i += 1'
1892<-----Source: line: 'i += 1'
1893      For: line: 'while_pass = True'
1893    <-Source: line: 'while_pass = True'
1893   <--Function: line: 'while_pass = True'
1893  <---Source: line: 'while_pass = True'
1893 <----Class: line: 'while_pass = True'
1893<-----Source: line: 'while_pass = True'
1894      For: line: 'continue'
1894    <-Source: line: 'continue'
1894   <--Function: line: 'continue'
1894  <---Source: line: 'continue'
1894 <----Class: line: 'continue'
1894<-----Source: line: 'continue'
1895      For: end: 'block-while_pass'
1895    <-Source: end: 'block-while_pass'
1895   <--Function: end: 'block-while_pass'
1895  <---Source: end: 'block-while_pass'
1895 <----Class: end: 'block-while_pass'
1895<-----Source: end: 'block-while_pass'
1895      For: line: 'while_pass = False'
1895    <-Source: line: 'while_pass = False'
1895   <--Function: line: 'while_pass = False'
1895  <---Source: line: 'while_pass = False'
1895 <----Class: line: 'while_pass = False'
1895<-----Source: line: 'while_pass = False'
1896      Source: begin-gen
1896       If: begin-gen
1896        Expression: begin-gen
1896         Identifier: begin-gen
1896          Identifier: expr: 'longitud'
1896        <-Expression: expr: 'longitud'
1896         Identifier: end-gen
1896         Compare: begin-gen
1896          Compare: expr: '=='
1896        <-Expression: expr: '=='
1896         Compare: end-gen
1896         ArrayMember: begin-gen
1896          Identifier: begin-gen
1896           Identifier: expr: 'longPosibles'
1896          Identifier: end-gen
1896          Value: begin-gen
1896           Identifier: begin-gen
1896            Identifier: expr: 'i'
1896          <-Value: expr: 'i'
1896           Identifier: end-gen
1896          Value: end-gen
1896          ArrayMember: expr: 'longPosibles[i]'
1896        <-Expression: expr: 'longPosibles[i]'
1896         ArrayMember: end-gen
1896        Expression: end-gen
1896        If: line: 'if longitud == longPosibles[i]:'
1896      <-Source: line: 'if longitud == longPosibles[i]:'
1896     <--For: line: 'if longitud == longPosibles[i]:'
1896    <---Source: line: 'if longitud == longPosibles[i]:'
1896   <----Function: line: 'if longitud == longPosibles[i]:'
1896  <-----Source: line: 'if longitud == longPosibles[i]:'
1896 <------Class: line: 'if longitud == longPosibles[i]:'
1896<-------Source: line: 'if longitud == longPosibles[i]:'
1897        If: begin: 'block-if'
1897      <-Source: begin: 'block-if'
1897     <--For: begin: 'block-if'
1897    <---Source: begin: 'block-if'
1897   <----Function: begin: 'block-if'
1897  <-----Source: begin: 'block-if'
1897 <------Class: begin: 'block-if'
1897<-------Source: begin: 'block-if'
1897        Source: begin-gen
1897         InstructionUpdate: begin-gen
1897          Identifier: begin-gen
1897           Identifier: expr: 'longOk'
1897          Identifier: end-gen
1897          OpUpdate: begin-gen
1897           OpUpdate: expr: '='
1897          OpUpdate: end-gen
1897          Value: begin-gen
1897           Identifier: begin-gen
1897            Identifier: expr: 'True'
1897          <-Value: expr: 'True'
1897           Identifier: end-gen
1897          Value: end-gen
1897          InstructionUpdate: line: 'longOk = True'
1897        <-Source: line: 'longOk = True'
1897       <--If: line: 'longOk = True'
1897      <---Source: line: 'longOk = True'
1897     <----For: line: 'longOk = True'
1897    <-----Source: line: 'longOk = True'
1897   <------Function: line: 'longOk = True'
1897  <-------Source: line: 'longOk = True'
1897 <--------Class: line: 'longOk = True'
1897<---------Source: line: 'longOk = True'
1898         InstructionUpdate: end-gen
1898        Source: end-gen
1898        If: end: 'block-if'
1898      <-Source: end: 'block-if'
1898     <--For: end: 'block-if'
1898    <---Source: end: 'block-if'
1898   <----Function: end: 'block-if'
1898  <-----Source: end: 'block-if'
1898 <------Class: end: 'block-if'
1898<-------Source: end: 'block-if'
1898       If: end-gen
1898      Source: end-gen
1898      For: line: 'i += 1'
1898    <-Source: line: 'i += 1'
1898   <--Function: line: 'i += 1'
1898  <---Source: line: 'i += 1'
1898 <----Class: line: 'i += 1'
1898<-----Source: line: 'i += 1'
1899      For: line: 'while_pass = True'
1899    <-Source: line: 'while_pass = True'
1899   <--Function: line: 'while_pass = True'
1899  <---Source: line: 'while_pass = True'
1899 <----Class: line: 'while_pass = True'
1899<-----Source: line: 'while_pass = True'
1900      For: line: 'try:'
1900    <-Source: line: 'try:'
1900   <--Function: line: 'try:'
1900  <---Source: line: 'try:'
1900 <----Class: line: 'try:'
1900<-----Source: line: 'try:'
1901      For: begin: 'block-error-catch'
1901    <-Source: begin: 'block-error-catch'
1901   <--Function: begin: 'block-error-catch'
1901  <---Source: begin: 'block-error-catch'
1901 <----Class: begin: 'block-error-catch'
1901<-----Source: begin: 'block-error-catch'
1901      For: line: 'i < len(longPosibles)'
1901    <-Source: line: 'i < len(longPosibles)'
1901   <--Function: line: 'i < len(longPosibles)'
1901  <---Source: line: 'i < len(longPosibles)'
1901 <----Class: line: 'i < len(longPosibles)'
1901<-----Source: line: 'i < len(longPosibles)'
1902      For: end: 'block-error-catch'
1902    <-Source: end: 'block-error-catch'
1902   <--Function: end: 'block-error-catch'
1902  <---Source: end: 'block-error-catch'
1902 <----Class: end: 'block-error-catch'
1902<-----Source: end: 'block-error-catch'
1902      For: line: 'except: break'
1902    <-Source: line: 'except: break'
1902   <--Function: line: 'except: break'
1902  <---Source: line: 'except: break'
1902 <----Class: line: 'except: break'
1902<-----Source: line: 'except: break'
1903      For: end: 'block-for'
1903    <-Source: end: 'block-for'
1903   <--Function: end: 'block-for'
1903  <---Source: end: 'block-for'
1903 <----Class: end: 'block-for'
1903<-----Source: end: 'block-for'
1903     For: end-gen
1903     If: begin-gen
1903      Value: begin-gen
1903       OpUnary: begin-gen
1903        OpUnary: expr: 'not'
1903      <-Value: expr: 'not'
1903        Identifier: begin-gen
1903         Identifier: expr: 'longOk'
1903       <-OpUnary: expr: 'longOk'
1903      <--Value: expr: 'longOk'
1903        Identifier: end-gen
1903       OpUnary: end-gen
1903      Value: end-gen
1903      If: line: 'if not longOk:'
1903    <-Source: line: 'if not longOk:'
1903   <--Function: line: 'if not longOk:'
1903  <---Source: line: 'if not longOk:'
1903 <----Class: line: 'if not longOk:'
1903<-----Source: line: 'if not longOk:'
1905      If: begin: 'block-if'
1905    <-Source: begin: 'block-if'
1905   <--Function: begin: 'block-if'
1905  <---Source: begin: 'block-if'
1905 <----Class: begin: 'block-if'
1905<-----Source: begin: 'block-if'
1905      Source: begin-gen
1905       DeclarationBlock: begin-gen
1905        Variable: begin-gen
1905         Variable: expr: 'longTotales'
1905         Variable: expr: '='
1905         Value: begin-gen
1905          New: begin-gen
1905           FunctionCall: begin-gen
1905            Value: begin-gen
1905             Member: begin-gen
1905              Identifier: begin-gen
1905               Identifier: expr: 'longPosibles'
1905              Identifier: end-gen
1905              Identifier: begin-gen
1905               Identifier: expr: 'length'
1905              Identifier: end-gen
1905              Member: expr: 'len(longPosibles)'
1905            <-Value: expr: 'len(longPosibles)'
1905             Member: end-gen
1905            Value: end-gen
1905            FunctionCall: expr: 'Array(len(longPosibles))'
1905          <-New: expr: 'qsatype.Array(len(longPosibles))'
1905         <--Value: expr: 'qsatype.Array(len(longPosibles))'
1905        <---Variable: expr: 'qsatype.Array(len(longPosibles))'
1905           FunctionCall: end-gen
1905          New: end-gen
1905         Value: end-gen
1905        Variable: end-gen
1905        DeclarationBlock: line: 'longTotales = qsatype.Array(len(longPosibles))'
1905      <-Source: line: 'longTotales = qsatype.Array(len(longPosibles))'
1905     <--If: line: 'longTotales = qsatype.Array(len(longPosibles))'
1905    <---Source: line: 'longTotales = qsatype.Array(len(longPosibles))'
1905   <----Function: line: 'longTotales = qsatype.Array(len(longPosibles))'
1905  <-----Source: line: 'longTotales = qsatype.Array(len(longPosibles))'
1905 <------Class: line: 'longTotales = qsatype.Array(len(longPosibles))'
1905<-------Source: line: 'longTotales = qsatype.Array(len(longPosibles))'
1906       DeclarationBlock: end-gen
1906       For: begin-gen
1906        Variable: begin-gen
1906         Variable: expr: 'i'
1906         Variable: expr: '='
1906         Value: begin-gen
1906          Constant: begin-gen
1906           Constant: ctype: 'Number' -> '0'
1906           Constant: expr: '0'
1906         <-Value: expr: '0'
1906        <--Variable: expr: '0'
1906          Constant: end-gen
1906         Value: end-gen
1906        Variable: end-gen
1906        For: line: 'i = 0'
1906      <-Source: line: 'i = 0'
1906     <--If: line: 'i = 0'
1906    <---Source: line: 'i = 0'
1906   <----Function: line: 'i = 0'
1906  <-----Source: line: 'i = 0'
1906 <------Class: line: 'i = 0'
1906<-------Source: line: 'i = 0'
1907        For: line: 'while_pass = True'
1907      <-Source: line: 'while_pass = True'
1907     <--If: line: 'while_pass = True'
1907    <---Source: line: 'while_pass = True'
1907   <----Function: line: 'while_pass = True'
1907  <-----Source: line: 'while_pass = True'
1907 <------Class: line: 'while_pass = True'
1907<-------Source: line: 'while_pass = True'
1908        InlineUpdate: begin-gen
1908         Identifier: begin-gen
1908          Identifier: expr: 'i'
1908         Identifier: end-gen
1908         InlineUpdate: expr: 'i'
1908         InlineUpdate: line+1: 'i += 1'
1908        InlineUpdate: end-gen
1908        Expression: begin-gen
1908         Identifier: begin-gen
1908          Identifier: expr: 'i'
1908        <-Expression: expr: 'i'
1908         Identifier: end-gen
1908         Compare: begin-gen
1908          Compare: expr: '<'
1908        <-Expression: expr: '<'
1908         Compare: end-gen
1908         Member: begin-gen
1908          Identifier: begin-gen
1908           Identifier: expr: 'longPosibles'
1908          Identifier: end-gen
1908          Identifier: begin-gen
1908           Identifier: expr: 'length'
1908          Identifier: end-gen
1908          Member: expr: 'len(longPosibles)'
1908        <-Expression: expr: 'len(longPosibles)'
1908         Member: end-gen
1908        Expression: end-gen
1908        For: line: 'while i < len(longPosibles):'
1908      <-Source: line: 'while i < len(longPosibles):'
1908     <--If: line: 'while i < len(longPosibles):'
1908    <---Source: line: 'while i < len(longPosibles):'
1908   <----Function: line: 'while i < len(longPosibles):'
1908  <-----Source: line: 'while i < len(longPosibles):'
1908 <------Class: line: 'while i < len(longPosibles):'
1908<-------Source: line: 'while i < len(longPosibles):'
1909        For: begin: 'block-for'
1909      <-Source: begin: 'block-for'
1909     <--If: begin: 'block-for'
1909    <---Source: begin: 'block-for'
1909   <----Function: begin: 'block-for'
1909  <-----Source: begin: 'block-for'
1909 <------Class: begin: 'block-for'
1909<-------Source: begin: 'block-for'
1909        For: line: 'if not while_pass:'
1909      <-Source: line: 'if not while_pass:'
1909     <--If: line: 'if not while_pass:'
1909    <---Source: line: 'if not while_pass:'
1909   <----Function: line: 'if not while_pass:'
1909  <-----Source: line: 'if not while_pass:'
1909 <------Class: line: 'if not while_pass:'
1909<-------Source: line: 'if not while_pass:'
1910        For: begin: 'block-while_pass'
1910      <-Source: begin: 'block-while_pass'
1910     <--If: begin: 'block-while_pass'
1910    <---Source: begin: 'block-while_pass'
1910   <----Function: begin: 'block-while_pass'
1910  <-----Source: begin: 'block-while_pass'
1910 <------Class: begin: 'block-while_pass'
1910<-------Source: begin: 'block-while_pass'
1910        For: line: 'i += 1'
1910      <-Source: line: 'i += 1'
1910     <--If: line: 'i += 1'
1910    <---Source: line: 'i += 1'
1910   <----Function: line: 'i += 1'
1910  <-----Source: line: 'i += 1'
1910 <------Class: line: 'i += 1'
1910<-------Source: line: 'i += 1'
1911        For: line: 'while_pass = True'
1911      <-Source: line: 'while_pass = True'
1911     <--If: line: 'while_pass = True'
1911    <---Source: line: 'while_pass = True'
1911   <----Function: line: 'while_pass = True'
1911  <-----Source: line: 'while_pass = True'
1911 <------Class: line: 'while_pass = True'
1911<-------Source: line: 'while_pass = True'
1912        For: line: 'continue'
1912      <-Source: line: 'continue'
1912     <--If: line: 'continue'
1912    <---Source: line: 'continue'
1912   <----Function: line: 'continue'
1912  <-----Source: line: 'continue'
1912 <------Class: line: 'continue'
1912<-------Source: line: 'continue'
1913        For: end: 'block-while_pass'
1913      <-Source: end: 'block-while_pass'
1913     <--If: end: 'block-while_pass'
1913    <---Source: end: 'block-while_pass'
1913   <----Function: end: 'block-while_pass'
1913  <-----Source: end: 'block-while_pass'
1913 <------Class: end: 'block-while_pass'
1913<-------Source: end: 'block-while_pass'
1913        For: line: 'while_pass = False'
1913      <-Source: line: 'while_pass = False'
1913     <--If: line: 'while_pass = False'
1913    <---Source: line: 'while_pass = False'
1913   <----Function: line: 'while_pass = False'
1913  <-----Source: line: 'while_pass = False'
1913 <------Class: line: 'while_pass = False'
1913<-------Source: line: 'while_pass = False'
1914        Source: begin-gen
1914         InstructionUpdate: begin-gen
1914          ArrayMember: begin-gen
1914           Identifier: begin-gen
1914            Identifier: expr: 'longTotales'
1914           Identifier: end-gen
1914           Value: begin-gen
1914            Identifier: begin-gen
1914             Identifier: expr: 'i'
1914           <-Value: expr: 'i'
1914            Identifier: end-gen
1914           Value: end-gen
1914           ArrayMember: expr: 'longTotales[i]'
1914          ArrayMember: end-gen
1914          OpUpdate: begin-gen
1914           OpUpdate: expr: '='
1914          OpUpdate: end-gen
1914          Expression: begin-gen
1914           ArrayMember: begin-gen
1914            Identifier: begin-gen
1914             Identifier: expr: 'longPosibles'
1914            Identifier: end-gen
1914            Value: begin-gen
1914             Identifier: begin-gen
1914              Identifier: expr: 'i'
1914            <-Value: expr: 'i'
1914             Identifier: end-gen
1914            Value: end-gen
1914            ArrayMember: expr: 'longPosibles[i]'
1914          <-Expression: expr: 'longPosibles[i]'
1914           ArrayMember: end-gen
1914           OpMath: begin-gen
1914            OpMath: expr: '+'
1914          <-Expression: expr: '+'
1914           OpMath: end-gen
1914           Constant: begin-gen
1914            Constant: ctype: 'Number' -> '2'
1914            Constant: expr: '2'
1914          <-Expression: expr: '2'
1914           Constant: end-gen
1914          Expression: end-gen
1914          InstructionUpdate: line: 'longTotales[i] = longPosibles[i] + 2'
1914        <-Source: line: 'longTotales[i] = longPosibles[i] + 2'
1914       <--For: line: 'longTotales[i] = longPosibles[i] + 2'
1914      <---Source: line: 'longTotales[i] = longPosibles[i] + 2'
1914     <----If: line: 'longTotales[i] = longPosibles[i] + 2'
1914    <-----Source: line: 'longTotales[i] = longPosibles[i] + 2'
1914   <------Function: line: 'longTotales[i] = longPosibles[i] + 2'
1914  <-------Source: line: 'longTotales[i] = longPosibles[i] + 2'
1914 <--------Class: line: 'longTotales[i] = longPosibles[i] + 2'
1914<---------Source: line: 'longTotales[i] = longPosibles[i] + 2'
1915         InstructionUpdate: end-gen
1915        Source: end-gen
1915        For: line: 'i += 1'
1915      <-Source: line: 'i += 1'
1915     <--If: line: 'i += 1'
1915    <---Source: line: 'i += 1'
1915   <----Function: line: 'i += 1'
1915  <-----Source: line: 'i += 1'
1915 <------Class: line: 'i += 1'
1915<-------Source: line: 'i += 1'
1916        For: line: 'while_pass = True'
1916      <-Source: line: 'while_pass = True'
1916     <--If: line: 'while_pass = True'
1916    <---Source: line: 'while_pass = True'
1916   <----Function: line: 'while_pass = True'
1916  <-----Source: line: 'while_pass = True'
1916 <------Class: line: 'while_pass = True'
1916<-------Source: line: 'while_pass = True'
1917        For: line: 'try:'
1917      <-Source: line: 'try:'
1917     <--If: line: 'try:'
1917    <---Source: line: 'try:'
1917   <----Function: line: 'try:'
1917  <-----Source: line: 'try:'
1917 <------Class: line: 'try:'
1917<-------Source: line: 'try:'
1918        For: begin: 'block-error-catch'
1918      <-Source: begin: 'block-error-catch'
1918     <--If: begin: 'block-error-catch'
1918    <---Source: begin: 'block-error-catch'
1918   <----Function: begin: 'block-error-catch'
1918  <-----Source: begin: 'block-error-catch'
1918 <------Class: begin: 'block-error-catch'
1918<-------Source: begin: 'block-error-catch'
1918        For: line: 'i < len(longPosibles)'
1918      <-Source: line: 'i < len(longPosibles)'
1918     <--If: line: 'i < len(longPosibles)'
1918    <---Source: line: 'i < len(longPosibles)'
1918   <----Function: line: 'i < len(longPosibles)'
1918  <-----Source: line: 'i < len(longPosibles)'
1918 <------Class: line: 'i < len(longPosibles)'
1918<-------Source: line: 'i < len(longPosibles)'
1919        For: end: 'block-error-catch'
1919      <-Source: end: 'block-error-catch'
1919     <--If: end: 'block-error-catch'
1919    <---Source: end: 'block-error-catch'
1919   <----Function: end: 'block-error-catch'
1919  <-----Source: end: 'block-error-catch'
1919 <------Class: end: 'block-error-catch'
1919<-------Source: end: 'block-error-catch'
1919        For: line: 'except: break'
1919      <-Source: line: 'except: break'
1919     <--If: line: 'except: break'
1919    <---Source: line: 'except: break'
1919   <----Function: line: 'except: break'
1919  <-----Source: line: 'except: break'
1919 <------Class: line: 'except: break'
1919<-------Source: line: 'except: break'
1920        For: end: 'block-for'
1920      <-Source: end: 'block-for'
1920     <--If: end: 'block-for'
1920    <---Source: end: 'block-for'
1920   <----Function: end: 'block-for'
1920  <-----Source: end: 'block-for'
1920 <------Class: end: 'block-for'
1920<-------Source: end: 'block-for'
1920       For: end-gen
1920       InstructionUpdate: begin-gen
1920        Identifier: begin-gen
1920         Identifier: expr: 'error'
1920        Identifier: end-gen
1920        OpUpdate: begin-gen
1920         OpUpdate: expr: '='
1920        OpUpdate: end-gen
1920        Value: begin-gen
1920         Member: begin-gen
1920          Identifier: begin-gen
1920           Identifier: expr: 'util'
1920          Identifier: end-gen
1920          FunctionCall: begin-gen
1920           Value: begin-gen
1920            Constant: begin-gen
1920             Constant: ctype: 'String' -> 'scripts'
1920             Constant: expr: 'u"scripts"'
1920           <-Value: expr: 'u"scripts"'
1920            Constant: end-gen
1920           Value: end-gen
1920           Value: begin-gen
1920            Constant: begin-gen
1920             Constant: ctype: 'String' -> 'Error en la validación del NIF/IVA %1 para el país %2:\\nLas longitudes admitidas son: %3'
1920             Constant: expr: 'u"Error en la validación del NIF/IVA %1 para el país %2:\\nLas longitudes admitidas son: %3"'
1920           <-Value: expr: 'u"Error en la validación del NIF/IVA %1 para el país %2:\\nLas longitudes admitidas son: %3"'
1920            Constant: end-gen
1920           Value: end-gen
1920           FunctionCall: expr: 'translate(u"scripts", u"Error en la validación del NIF/IVA %1 para el país %2:\\nLas longitudes admitidas son: %3")'
1920          FunctionCall: end-gen
1920          FunctionCall: begin-gen
1920           Value: begin-gen
1920            Identifier: begin-gen
1920             Identifier: expr: 'nifIva'
1920           <-Value: expr: 'nifIva'
1920            Identifier: end-gen
1920           Value: end-gen
1920           FunctionCall: expr: 'arg(nifIva)'
1920          FunctionCall: end-gen
1920          FunctionCall: begin-gen
1920           Value: begin-gen
1920            Identifier: begin-gen
1920             Identifier: expr: 'pais'
1920           <-Value: expr: 'pais'
1920            Identifier: end-gen
1920           Value: end-gen
1920           FunctionCall: expr: 'arg(pais)'
1920          FunctionCall: end-gen
1920          FunctionCall: begin-gen
1920           Value: begin-gen
1920            Member: begin-gen
1920             Identifier: begin-gen
1920              Identifier: expr: 'longTotales'
1920             Identifier: end-gen
1920             FunctionCall: begin-gen
1920              Value: begin-gen
1920               Constant: begin-gen
1920                Constant: ctype: 'String' -> ', '
1920                Constant: expr: 'u", "'
1920              <-Value: expr: 'u", "'
1920               Constant: end-gen
1920              Value: end-gen
1920              FunctionCall: expr: 'join(u", ")'
1920             FunctionCall: end-gen
1920             Member: expr: 'longTotales.join(u", ")'
1920           <-Value: expr: 'longTotales.join(u", ")'
1920            Member: end-gen
1920           Value: end-gen
1920           FunctionCall: expr: 'arg(longTotales.join(u", "))'
1920          FunctionCall: end-gen
1920          Member: expr: 'util.translate(u"scripts", u"Error en la validación del NIF/IVA %1 para el país %2:\\nLas longitudes admitidas son: %3").arg(nifIva).arg(pais).arg(longTotales.join(u", "))'
1920        <-Value: expr: 'util.translate(u"scripts", u"Error en la validación del NIF/IVA %1 para el país %2:\\nLas longitudes admitidas son: %3").arg(nifIva).arg(pais).arg(longTotales.join(u", "))'
1920         Member: end-gen
1920        Value: end-gen
1920        InstructionUpdate: line: 'error = util.translate(u"scripts", u"Error en la validación del NIF/IVA %1 para el país %2:\\nLas longitudes admitidas son: %3").arg(nifIva).arg(pais).arg(longTotales.join(u", "))'
1920      <-Source: line: 'error = util.translate(u"scripts", u"Error en la validación del NIF/IVA %1 para el país %2:\\nLas longitudes admitidas son: %3").arg(nifIva).arg(pais).arg(longTotales.join(u", "))'
1920     <--If: line: 'error = util.translate(u"scripts", u"Error en la validación del NIF/IVA %1 para el país %2:\\nLas longitudes admitidas son: %3").arg(nifIva).arg(pais).arg(longTotales.join(u", "))'
1920    <---Source: line: 'error = util.translate(u"scripts", u"Error en la validación del NIF/IVA %1 para el país %2:\\nLas longitudes admitidas son: %3").arg(nifIva).arg(pais).arg(longTotales.join(u", "))'
1920   <----Function: line: 'error = util.translate(u"scripts", u"Error en la validación del NIF/IVA %1 para el país %2:\\nLas longitudes admitidas son: %3").arg(nifIva).arg(pais).arg(longTotales.join(u", "))'
1920  <-----Source: line: 'error = util.translate(u"scripts", u"Error en la validación del NIF/IVA %1 para el país %2:\\nLas longitudes admitidas son: %3").arg(nifIva).arg(pais).arg(longTotales.join(u", "))'
1920 <------Class: line: 'error = util.translate(u"scripts", u"Error en la validación del NIF/IVA %1 para el país %2:\\nLas longitudes admitidas son: %3").arg(nifIva).arg(pais).arg(longTotales.join(u", "))'
1920<-------Source: line: 'error = util.translate(u"scripts", u"Error en la validación del NIF/IVA %1 para el país %2:\\nLas longitudes admitidas son: %3").arg(nifIva).arg(pais).arg(longTotales.join(u", "))'
1922       InstructionUpdate: end-gen
1922       InstructionFlow: begin-gen
1922        Value: begin-gen
1922         Identifier: begin-gen
1922          Identifier: expr: 'error'
1922        <-Value: expr: 'error'
1922         Identifier: end-gen
1922        Value: end-gen
1922        InstructionFlow: line: 'return error'
1922      <-Source: line: 'return error'
1922     <--If: line: 'return error'
1922    <---Source: line: 'return error'
1922   <----Function: line: 'return error'
1922  <-----Source: line: 'return error'
1922 <------Class: line: 'return error'
1922<-------Source: line: 'return error'
1923       InstructionFlow: end-gen
1923      Source: end-gen
1923      If: end: 'block-if'
1923    <-Source: end: 'block-if'
1923   <--Function: end: 'block-if'
1923  <---Source: end: 'block-if'
1923 <----Class: end: 'block-if'
1923<-----Source: end: 'block-if'
1923     If: end-gen
1923     InstructionFlow: begin-gen
1923      Value: begin-gen
1923       Constant: begin-gen
1923        Constant: ctype: 'String' -> 'OK'
1923        Constant: expr: 'u"OK"'
1923      <-Value: expr: 'u"OK"'
1923       Constant: end-gen
1923      Value: end-gen
1923      InstructionFlow: line: 'return u"OK"'
1923    <-Source: line: 'return u"OK"'
1923   <--Function: line: 'return u"OK"'
1923  <---Source: line: 'return u"OK"'
1923 <----Class: line: 'return u"OK"'
1923<-----Source: line: 'return u"OK"'
1925     InstructionFlow: end-gen
1925    Source: end-gen
1925    Function: end: 'block-def-oficial_validarNifIva'
1925  <-Source: end: 'block-def-oficial_validarNifIva'
1925 <--Class: end: 'block-def-oficial_validarNifIva'
1925<---Source: end: 'block-def-oficial_validarNifIva'
1926   Function: end-gen
1926   Function: begin-gen
1926    Variable: begin-gen
1926     Variable: expr: 'comando'
1926    Variable: end-gen
1926    Function: line: 'def oficial_ejecutarComandoAsincrono(self, comando = None):'
1926  <-Source: line: 'def oficial_ejecutarComandoAsincrono(self, comando = None):'
1926 <--Class: line: 'def oficial_ejecutarComandoAsincrono(self, comando = None):'
1926<---Source: line: 'def oficial_ejecutarComandoAsincrono(self, comando = None):'
1927    Function: begin: 'block-def-oficial_ejecutarComandoAsincrono'
1927  <-Source: begin: 'block-def-oficial_ejecutarComandoAsincrono'
1927 <--Class: begin: 'block-def-oficial_ejecutarComandoAsincrono'
1927<---Source: begin: 'block-def-oficial_ejecutarComandoAsincrono'
1927    Source: begin-gen
1927     DeclarationBlock: begin-gen
1927      Variable: begin-gen
1927       Variable: expr: 'res'
1927       Variable: expr: '='
1927       Value: begin-gen
1927        Constant: begin-gen
1927         Constant: ctype: None -> None
1927         Constant: expr: '[]'
1927       <-Value: expr: '[]'
1927      <--Variable: expr: 'qsatype.Array()'
1927        Constant: end-gen
1927       Value: end-gen
1927      Variable: end-gen
1927      DeclarationBlock: line: 'res = qsatype.Array()'
1927    <-Source: line: 'res = qsatype.Array()'
1927   <--Function: line: 'res = qsatype.Array()'
1927  <---Source: line: 'res = qsatype.Array()'
1927 <----Class: line: 'res = qsatype.Array()'
1927<-----Source: line: 'res = qsatype.Array()'
1928     DeclarationBlock: end-gen
1928     InstructionCall: begin-gen
1928      Member: begin-gen
1928       Identifier: begin-gen
1928        Identifier: expr: 'qsatype.Process'
1928       Identifier: end-gen
1928       FunctionCall: begin-gen
1928        Value: begin-gen
1928         Identifier: begin-gen
1928          Identifier: expr: 'comando'
1928        <-Value: expr: 'comando'
1928         Identifier: end-gen
1928        Value: end-gen
1928        FunctionCall: expr: 'execute(comando)'
1928       FunctionCall: end-gen
1928       Member: expr: 'qsatype.Process.execute(comando)'
1928      Member: end-gen
1928      InstructionCall: line: 'qsatype.Process.execute(comando)'
1928    <-Source: line: 'qsatype.Process.execute(comando)'
1928   <--Function: line: 'qsatype.Process.execute(comando)'
1928  <---Source: line: 'qsatype.Process.execute(comando)'
1928 <----Class: line: 'qsatype.Process.execute(comando)'
1928<-----Source: line: 'qsatype.Process.execute(comando)'
1929     InstructionCall: end-gen
1929     If: begin-gen
1929      Expression: begin-gen
1929       Member: begin-gen
1929        Identifier: begin-gen
1929         Identifier: expr: 'qsatype.Process'
1929        Identifier: end-gen
1929        Identifier: begin-gen
1929         Identifier: expr: 'stderr'
1929        Identifier: end-gen
1929        Member: expr: 'qsatype.Process.stderr'
1929      <-Expression: expr: 'qsatype.Process.stderr'
1929       Member: end-gen
1929       Compare: begin-gen
1929        Compare: expr: '!='
1929      <-Expression: expr: '!='
1929       Compare: end-gen
1929       Constant: begin-gen
1929        Constant: ctype: 'String' -> ''
1929        Constant: expr: 'u""'
1929      <-Expression: expr: 'u""'
1929       Constant: end-gen
1929      Expression: end-gen
1929      If: line: 'if qsatype.Process.stderr != u"":'
1929    <-Source: line: 'if qsatype.Process.stderr != u"":'
1929   <--Function: line: 'if qsatype.Process.stderr != u"":'
1929  <---Source: line: 'if qsatype.Process.stderr != u"":'
1929 <----Class: line: 'if qsatype.Process.stderr != u"":'
1929<-----Source: line: 'if qsatype.Process.stderr != u"":'
1930      If: begin: 'block-if'
1930    <-Source: begin: 'block-if'
1930   <--Function: begin: 'block-if'
1930  <---Source: begin: 'block-if'
1930 <----Class: begin: 'block-if'
1930<-----Source: begin: 'block-if'
1930      Source: begin-gen
1930       InstructionUpdate: begin-gen
1930        ArrayMember: begin-gen
1930         Identifier: begin-gen
1930          Identifier: expr: 'res'
1930         Identifier: end-gen
1930         Value: begin-gen
1930          Constant: begin-gen
1930           Constant: ctype: 'String' -> 'ok'
1930           Constant: expr: 'u"ok"'
1930         <-Value: expr: 'u"ok"'
1930          Constant: end-gen
1930         Value: end-gen
1930         ArrayMember: expr: 'res[u"ok"]'
1930        ArrayMember: end-gen
1930        OpUpdate: begin-gen
1930         OpUpdate: expr: '='
1930        OpUpdate: end-gen
1930        Value: begin-gen
1930         Identifier: begin-gen
1930          Identifier: expr: 'False'
1930        <-Value: expr: 'False'
1930         Identifier: end-gen
1930        Value: end-gen
1930        InstructionUpdate: line: 'res[u"ok"] = False'
1930      <-Source: line: 'res[u"ok"] = False'
1930     <--If: line: 'res[u"ok"] = False'
1930    <---Source: line: 'res[u"ok"] = False'
1930   <----Function: line: 'res[u"ok"] = False'
1930  <-----Source: line: 'res[u"ok"] = False'
1930 <------Class: line: 'res[u"ok"] = False'
1930<-------Source: line: 'res[u"ok"] = False'
1931       InstructionUpdate: end-gen
1931       InstructionUpdate: begin-gen
1931        ArrayMember: begin-gen
1931         Identifier: begin-gen
1931          Identifier: expr: 'res'
1931         Identifier: end-gen
1931         Value: begin-gen
1931          Constant: begin-gen
1931           Constant: ctype: 'String' -> 'salida'
1931           Constant: expr: 'u"salida"'
1931         <-Value: expr: 'u"salida"'
1931          Constant: end-gen
1931         Value: end-gen
1931         ArrayMember: expr: 'res[u"salida"]'
1931        ArrayMember: end-gen
1931        OpUpdate: begin-gen
1931         OpUpdate: expr: '='
1931        OpUpdate: end-gen
1931        Value: begin-gen
1931         Member: begin-gen
1931          Identifier: begin-gen
1931           Identifier: expr: 'qsatype.Process'
1931          Identifier: end-gen
1931          Identifier: begin-gen
1931           Identifier: expr: 'stderr'
1931          Identifier: end-gen
1931          Member: expr: 'qsatype.Process.stderr'
1931        <-Value: expr: 'qsatype.Process.stderr'
1931         Member: end-gen
1931        Value: end-gen
1931        InstructionUpdate: line: 'res[u"salida"] = qsatype.Process.stderr'
1931      <-Source: line: 'res[u"salida"] = qsatype.Process.stderr'
1931     <--If: line: 'res[u"salida"] = qsatype.Process.stderr'
1931    <---Source: line: 'res[u"salida"] = qsatype.Process.stderr'
1931   <----Function: line: 'res[u"salida"] = qsatype.Process.stderr'
1931  <-----Source: line: 'res[u"salida"] = qsatype.Process.stderr'
1931 <------Class: line: 'res[u"salida"] = qsatype.Process.stderr'
1931<-------Source: line: 'res[u"salida"] = qsatype.Process.stderr'
1932       InstructionUpdate: end-gen
1932      Source: end-gen
1932      If: end: 'block-if'
1932    <-Source: end: 'block-if'
1932   <--Function: end: 'block-if'
1932  <---Source: end: 'block-if'
1932 <----Class: end: 'block-if'
1932<-----Source: end: 'block-if'
1932      If: line: 'else:'
1932    <-Source: line: 'else:'
1932   <--Function: line: 'else:'
1932  <---Source: line: 'else:'
1932 <----Class: line: 'else:'
1932<-----Source: line: 'else:'
1933      If: begin: 'block-else'
1933    <-Source: begin: 'block-else'
1933   <--Function: begin: 'block-else'
1933  <---Source: begin: 'block-else'
1933 <----Class: begin: 'block-else'
1933<-----Source: begin: 'block-else'
1933      Source: begin-gen
1933       InstructionUpdate: begin-gen
1933        ArrayMember: begin-gen
1933         Identifier: begin-gen
1933          Identifier: expr: 'res'
1933         Identifier: end-gen
1933         Value: begin-gen
1933          Constant: begin-gen
1933           Constant: ctype: 'String' -> 'ok'
1933           Constant: expr: 'u"ok"'
1933         <-Value: expr: 'u"ok"'
1933          Constant: end-gen
1933         Value: end-gen
1933         ArrayMember: expr: 'res[u"ok"]'
1933        ArrayMember: end-gen
1933        OpUpdate: begin-gen
1933         OpUpdate: expr: '='
1933        OpUpdate: end-gen
1933        Value: begin-gen
1933         Identifier: begin-gen
1933          Identifier: expr: 'True'
1933        <-Value: expr: 'True'
1933         Identifier: end-gen
1933        Value: end-gen
1933        InstructionUpdate: line: 'res[u"ok"] = True'
1933      <-Source: line: 'res[u"ok"] = True'
1933     <--If: line: 'res[u"ok"] = True'
1933    <---Source: line: 'res[u"ok"] = True'
1933   <----Function: line: 'res[u"ok"] = True'
1933  <-----Source: line: 'res[u"ok"] = True'
1933 <------Class: line: 'res[u"ok"] = True'
1933<-------Source: line: 'res[u"ok"] = True'
1934       InstructionUpdate: end-gen
1934       InstructionUpdate: begin-gen
1934        ArrayMember: begin-gen
1934         Identifier: begin-gen
1934          Identifier: expr: 'res'
1934         Identifier: end-gen
1934         Value: begin-gen
1934          Constant: begin-gen
1934           Constant: ctype: 'String' -> 'salida'
1934           Constant: expr: 'u"salida"'
1934         <-Value: expr: 'u"salida"'
1934          Constant: end-gen
1934         Value: end-gen
1934         ArrayMember: expr: 'res[u"salida"]'
1934        ArrayMember: end-gen
1934        OpUpdate: begin-gen
1934         OpUpdate: expr: '='
1934        OpUpdate: end-gen
1934        Value: begin-gen
1934         Member: begin-gen
1934          Identifier: begin-gen
1934           Identifier: expr: 'qsatype.Process'
1934          Identifier: end-gen
1934          Identifier: begin-gen
1934           Identifier: expr: 'stdout'
1934          Identifier: end-gen
1934          Member: expr: 'qsatype.Process.stdout'
1934        <-Value: expr: 'qsatype.Process.stdout'
1934         Member: end-gen
1934        Value: end-gen
1934        InstructionUpdate: line: 'res[u"salida"] = qsatype.Process.stdout'
1934      <-Source: line: 'res[u"salida"] = qsatype.Process.stdout'
1934     <--If: line: 'res[u"salida"] = qsatype.Process.stdout'
1934    <---Source: line: 'res[u"salida"] = qsatype.Process.stdout'
1934   <----Function: line: 'res[u"salida"] = qsatype.Process.stdout'
1934  <-----Source: line: 'res[u"salida"] = qsatype.Process.stdout'
1934 <------Class: line: 'res[u"salida"] = qsatype.Process.stdout'
1934<-------Source: line: 'res[u"salida"] = qsatype.Process.stdout'
1935       InstructionUpdate: end-gen
1935      Source: end-gen
1935      If: end: 'block-else'
1935    <-Source: end: 'block-else'
1935   <--Function: end: 'block-else'
1935  <---Source: end: 'block-else'
1935 <----Class: end: 'block-else'
1935<-----Source: end: 'block-else'
1936     If: end-gen
1936     InstructionFlow: begin-gen
1936      Value: begin-gen
1936       Identifier: begin-gen
1936        Identifier: expr: 'res'
1936      <-Value: expr: 'res'
1936       Identifier: end-gen
1936      Value: end-gen
1936      InstructionFlow: line: 'return res'
1936    <-Source: line: 'return res'
1936   <--Function: line: 'return res'
1936  <---Source: line: 'return res'
1936 <----Class: line: 'return res'
1936<-----Source: line: 'return res'
1937     InstructionFlow: end-gen
1937    Source: end-gen
1937    Function: end: 'block-def-oficial_ejecutarComandoAsincrono'
1937  <-Source: end: 'block-def-oficial_ejecutarComandoAsincrono'
1937 <--Class: end: 'block-def-oficial_ejecutarComandoAsincrono'
1937<---Source: end: 'block-def-oficial_ejecutarComandoAsincrono'
1938   Function: end-gen
1938   Function: begin-gen
1938    Function: line: 'def oficial_globalInit(self):'
1938  <-Source: line: 'def oficial_globalInit(self):'
1938 <--Class: line: 'def oficial_globalInit(self):'
1938<---Source: line: 'def oficial_globalInit(self):'
1939    Function: begin: 'block-def-oficial_globalInit'
1939  <-Source: begin: 'block-def-oficial_globalInit'
1939 <--Class: begin: 'block-def-oficial_globalInit'
1939<---Source: begin: 'block-def-oficial_globalInit'
1939    Source: begin-gen
1939     If: begin-gen
1939      Value: begin-gen
1939       Member: begin-gen
1939        Identifier: begin-gen
1939         Identifier: expr: 'sys'
1939        Identifier: end-gen
1939        FunctionCall: begin-gen
1939         Value: begin-gen
1939          Constant: begin-gen
1939           Constant: ctype: 'String' -> 'flcolaproc'
1939           Constant: expr: 'u"flcolaproc"'
1939         <-Value: expr: 'u"flcolaproc"'
1939          Constant: end-gen
1939         Value: end-gen
1939         FunctionCall: expr: 'isLoadedModule(u"flcolaproc")'
1939        FunctionCall: end-gen
1939        Member: expr: 'sys.isLoadedModule(u"flcolaproc")'
1939      <-Value: expr: 'sys.isLoadedModule(u"flcolaproc")'
1939       Member: end-gen
1939      Value: end-gen
1939      If: line: 'if sys.isLoadedModule(u"flcolaproc"):'
1939    <-Source: line: 'if sys.isLoadedModule(u"flcolaproc"):'
1939   <--Function: line: 'if sys.isLoadedModule(u"flcolaproc"):'
1939  <---Source: line: 'if sys.isLoadedModule(u"flcolaproc"):'
1939 <----Class: line: 'if sys.isLoadedModule(u"flcolaproc"):'
1939<-----Source: line: 'if sys.isLoadedModule(u"flcolaproc"):'
1940      If: begin: 'block-if'
1940    <-Source: begin: 'block-if'
1940   <--Function: begin: 'block-if'
1940  <---Source: begin: 'block-if'
1940 <----Class: begin: 'block-if'
1940<-----Source: begin: 'block-if'
1940      Source: begin-gen
1940       TryCatch: begin-gen
1940        TryCatch: line: 'try:'
1940      <-Source: line: 'try:'
1940     <--If: line: 'try:'
1940    <---Source: line: 'try:'
1940   <----Function: line: 'try:'
1940  <-----Source: line: 'try:'
1940 <------Class: line: 'try:'
1940<-------Source: line: 'try:'
1941        TryCatch: begin: 'block-try'
1941      <-Source: begin: 'block-try'
1941     <--If: begin: 'block-try'
1941    <---Source: begin: 'block-try'
1941   <----Function: begin: 'block-try'
1941  <-----Source: begin: 'block-try'
1941 <------Class: begin: 'block-try'
1941<-------Source: begin: 'block-try'
1941        Source: begin-gen
1941         InstructionCall: begin-gen
1941          Member: begin-gen
1941           Identifier: begin-gen
1941            Identifier: expr: 'flcolaproc'
1941           Identifier: end-gen
1941           Identifier: begin-gen
1941            Identifier: expr: 'iface'
1941           Identifier: end-gen
1941           FunctionCall: begin-gen
1941            FunctionCall: expr: 'pub_globalInit()'
1941           FunctionCall: end-gen
1941           Member: expr: 'flcolaproc.iface.pub_globalInit()'
1941          Member: end-gen
1941          InstructionCall: line: 'flcolaproc.iface.pub_globalInit()'
1941        <-Source: line: 'flcolaproc.iface.pub_globalInit()'
1941       <--TryCatch: line: 'flcolaproc.iface.pub_globalInit()'
1941      <---Source: line: 'flcolaproc.iface.pub_globalInit()'
1941     <----If: line: 'flcolaproc.iface.pub_globalInit()'
1941    <-----Source: line: 'flcolaproc.iface.pub_globalInit()'
1941   <------Function: line: 'flcolaproc.iface.pub_globalInit()'
1941  <-------Source: line: 'flcolaproc.iface.pub_globalInit()'
1941 <--------Class: line: 'flcolaproc.iface.pub_globalInit()'
1941<---------Source: line: 'flcolaproc.iface.pub_globalInit()'
1942         InstructionCall: end-gen
1942        Source: end-gen
1942        TryCatch: end: 'block-try'
1942      <-Source: end: 'block-try'
1942     <--If: end: 'block-try'
1942    <---Source: end: 'block-try'
1942   <----Function: end: 'block-try'
1942  <-----Source: end: 'block-try'
1942 <------Class: end: 'block-try'
1942<-------Source: end: 'block-try'
1942        Identifier: begin-gen
1942         Identifier: expr: 'e'
1942        Identifier: end-gen
1942        TryCatch: line: 'except Exception as e:'
1942      <-Source: line: 'except Exception as e:'
1942     <--If: line: 'except Exception as e:'
1942    <---Source: line: 'except Exception as e:'
1942   <----Function: line: 'except Exception as e:'
1942  <-----Source: line: 'except Exception as e:'
1942 <------Class: line: 'except Exception as e:'
1942<-------Source: line: 'except Exception as e:'
1943        TryCatch: begin: 'block-except'
1943      <-Source: begin: 'block-except'
1943     <--If: begin: 'block-except'
1943    <---Source: begin: 'block-except'
1943   <----Function: begin: 'block-except'
1943  <-----Source: begin: 'block-except'
1943 <------Class: begin: 'block-except'
1943<-------Source: begin: 'block-except'
1943        TryCatch: line: 'e = traceback.format_exc()'
1943      <-Source: line: 'e = traceback.format_exc()'
1943     <--If: line: 'e = traceback.format_exc()'
1943    <---Source: line: 'e = traceback.format_exc()'
1943   <----Function: line: 'e = traceback.format_exc()'
1943  <-----Source: line: 'e = traceback.format_exc()'
1943 <------Class: line: 'e = traceback.format_exc()'
1943<-------Source: line: 'e = traceback.format_exc()'
1944        Source: begin-gen
1944        Source: end-gen
1944        TryCatch: end: 'block-except'
1944      <-Source: end: 'block-except'
1944     <--If: end: 'block-except'
1944    <---Source: end: 'block-except'
1944   <----Function: end: 'block-except'
1944  <-----Source: end: 'block-except'
1944 <------Class: end: 'block-except'
1944<-------Source: end: 'block-except'
1945       TryCatch: end-gen
1945      Source: end-gen
1945      If: end: 'block-if'
1945    <-Source: end: 'block-if'
1945   <--Function: end: 'block-if'
1945  <---Source: end: 'block-if'
1945 <----Class: end: 'block-if'
1945<-----Source: end: 'block-if'
1945     If: end-gen
1945     If: begin-gen
1945      Value: begin-gen
1945       Member: begin-gen
1945        Identifier: begin-gen
1945         Identifier: expr: 'sys'
1945        Identifier: end-gen
1945        FunctionCall: begin-gen
1945         Value: begin-gen
1945          Constant: begin-gen
1945           Constant: ctype: 'String' -> 'flcolamens'
1945           Constant: expr: 'u"flcolamens"'
1945         <-Value: expr: 'u"flcolamens"'
1945          Constant: end-gen
1945         Value: end-gen
1945         FunctionCall: expr: 'isLoadedModule(u"flcolamens")'
1945        FunctionCall: end-gen
1945        Member: expr: 'sys.isLoadedModule(u"flcolamens")'
1945      <-Value: expr: 'sys.isLoadedModule(u"flcolamens")'
1945       Member: end-gen
1945      Value: end-gen
1945      If: line: 'if sys.isLoadedModule(u"flcolamens"):'
1945    <-Source: line: 'if sys.isLoadedModule(u"flcolamens"):'
1945   <--Function: line: 'if sys.isLoadedModule(u"flcolamens"):'
1945  <---Source: line: 'if sys.isLoadedModule(u"flcolamens"):'
1945 <----Class: line: 'if sys.isLoadedModule(u"flcolamens"):'
1945<-----Source: line: 'if sys.isLoadedModule(u"flcolamens"):'
1947      If: begin: 'block-if'
1947    <-Source: begin: 'block-if'
1947   <--Function: begin: 'block-if'
1947  <---Source: begin: 'block-if'
1947 <----Class: begin: 'block-if'
1947<-----Source: begin: 'block-if'
1947      Source: begin-gen
1947       TryCatch: begin-gen
1947        TryCatch: line: 'try:'
1947      <-Source: line: 'try:'
1947     <--If: line: 'try:'
1947    <---Source: line: 'try:'
1947   <----Function: line: 'try:'
1947  <-----Source: line: 'try:'
1947 <------Class: line: 'try:'
1947<-------Source: line: 'try:'
1948        TryCatch: begin: 'block-try'
1948      <-Source: begin: 'block-try'
1948     <--If: begin: 'block-try'
1948    <---Source: begin: 'block-try'
1948   <----Function: begin: 'block-try'
1948  <-----Source: begin: 'block-try'
1948 <------Class: begin: 'block-try'
1948<-------Source: begin: 'block-try'
1948        Source: begin-gen
1948         InstructionCall: begin-gen
1948          Member: begin-gen
1948           Identifier: begin-gen
1948            Identifier: expr: 'flcolamens'
1948           Identifier: end-gen
1948           Identifier: begin-gen
1948            Identifier: expr: 'iface'
1948           Identifier: end-gen
1948           FunctionCall: begin-gen
1948            FunctionCall: expr: 'pub_globalInit()'
1948           FunctionCall: end-gen
1948           Member: expr: 'flcolamens.iface.pub_globalInit()'
1948          Member: end-gen
1948          InstructionCall: line: 'flcolamens.iface.pub_globalInit()'
1948        <-Source: line: 'flcolamens.iface.pub_globalInit()'
1948       <--TryCatch: line: 'flcolamens.iface.pub_globalInit()'
1948      <---Source: line: 'flcolamens.iface.pub_globalInit()'
1948     <----If: line: 'flcolamens.iface.pub_globalInit()'
1948    <-----Source: line: 'flcolamens.iface.pub_globalInit()'
1948   <------Function: line: 'flcolamens.iface.pub_globalInit()'
1948  <-------Source: line: 'flcolamens.iface.pub_globalInit()'
1948 <--------Class: line: 'flcolamens.iface.pub_globalInit()'
1948<---------Source: line: 'flcolamens.iface.pub_globalInit()'
1949         InstructionCall: end-gen
1949        Source: end-gen
1949        TryCatch: end: 'block-try'
1949      <-Source: end: 'block-try'
1949     <--If: end: 'block-try'
1949    <---Source: end: 'block-try'
1949   <----Function: end: 'block-try'
1949  <-----Source: end: 'block-try'
1949 <------Class: end: 'block-try'
1949<-------Source: end: 'block-try'
1949        Identifier: begin-gen
1949         Identifier: expr: 'e'
1949        Identifier: end-gen
1949        TryCatch: line: 'except Exception as e:'
1949      <-Source: line: 'except Exception as e:'
1949     <--If: line: 'except Exception as e:'
1949    <---Source: line: 'except Exception as e:'
1949   <----Function: line: 'except Exception as e:'
1949  <-----Source: line: 'except Exception as e:'
1949 <------Class: line: 'except Exception as e:'
1949<-------Source: line: 'except Exception as e:'
1950        TryCatch: begin: 'block-except'
1950      <-Source: begin: 'block-except'
1950     <--If: begin: 'block-except'
1950    <---Source: begin: 'block-except'
1950   <----Function: begin: 'block-except'
1950  <-----Source: begin: 'block-except'
1950 <------Class: begin: 'block-except'
1950<-------Source: begin: 'block-except'
1950        TryCatch: line: 'e = traceback.format_exc()'
1950      <-Source: line: 'e = traceback.format_exc()'
1950     <--If: line: 'e = traceback.format_exc()'
1950    <---Source: line: 'e = traceback.format_exc()'
1950   <----Function: line: 'e = traceback.format_exc()'
1950  <-----Source: line: 'e = traceback.format_exc()'
1950 <------Class: line: 'e = traceback.format_exc()'
1950<-------Source: line: 'e = traceback.format_exc()'
1951        Source: begin-gen
1951        Source: end-gen
1951        TryCatch: end: 'block-except'
1951      <-Source: end: 'block-except'
1951     <--If: end: 'block-except'
1951    <---Source: end: 'block-except'
1951   <----Function: end: 'block-except'
1951  <-----Source: end: 'block-except'
1951 <------Class: end: 'block-except'
1951<-------Source: end: 'block-except'
1952       TryCatch: end-gen
1952      Source: end-gen
1952      If: end: 'block-if'
1952    <-Source: end: 'block-if'
1952   <--Function: end: 'block-if'
1952  <---Source: end: 'block-if'
1952 <----Class: end: 'block-if'
1952<-----Source: end: 'block-if'
1952     If: end-gen
1952    Source: end-gen
1952    Function: end: 'block-def-oficial_globalInit'
1952  <-Source: end: 'block-def-oficial_globalInit'
1952 <--Class: end: 'block-def-oficial_globalInit'
1952<---Source: end: 'block-def-oficial_globalInit'
1953   Function: end-gen
1953   Function: begin-gen
1953    Function: line: 'def oficial_existeEnvioMail(self):'
1953  <-Source: line: 'def oficial_existeEnvioMail(self):'
1953 <--Class: line: 'def oficial_existeEnvioMail(self):'
1953<---Source: line: 'def oficial_existeEnvioMail(self):'
1954    Function: begin: 'block-def-oficial_existeEnvioMail'
1954  <-Source: begin: 'block-def-oficial_existeEnvioMail'
1954 <--Class: begin: 'block-def-oficial_existeEnvioMail'
1954<---Source: begin: 'block-def-oficial_existeEnvioMail'
1954    Source: begin-gen
1954     InstructionFlow: begin-gen
1954      Value: begin-gen
1954       Identifier: begin-gen
1954        Identifier: expr: 'False'
1954      <-Value: expr: 'False'
1954       Identifier: end-gen
1954      Value: end-gen
1954      InstructionFlow: line: 'return False'
1954    <-Source: line: 'return False'
1954   <--Function: line: 'return False'
1954  <---Source: line: 'return False'
1954 <----Class: line: 'return False'
1954<-----Source: line: 'return False'
1955     InstructionFlow: end-gen
1955    Source: end-gen
1955    Function: end: 'block-def-oficial_existeEnvioMail'
1955  <-Source: end: 'block-def-oficial_existeEnvioMail'
1955 <--Class: end: 'block-def-oficial_existeEnvioMail'
1955<---Source: end: 'block-def-oficial_existeEnvioMail'
1956   Function: end-gen
1956   Function: begin-gen
1956    Variable: begin-gen
1956     Variable: expr: 'cursor'
1956    Variable: end-gen
1956    Variable: begin-gen
1956     Variable: expr: 'mtd'
1956    Variable: end-gen
1956    Function: line: 'def oficial_validarProvincia(self, cursor = None, mtd = None):'
1956  <-Source: line: 'def oficial_validarProvincia(self, cursor = None, mtd = None):'
1956 <--Class: line: 'def oficial_validarProvincia(self, cursor = None, mtd = None):'
1956<---Source: line: 'def oficial_validarProvincia(self, cursor = None, mtd = None):'
1957    Function: begin: 'block-def-oficial_validarProvincia'
1957  <-Source: begin: 'block-def-oficial_validarProvincia'
1957 <--Class: begin: 'block-def-oficial_validarProvincia'
1957<---Source: begin: 'block-def-oficial_validarProvincia'
1957    Source: begin-gen
1957     DeclarationBlock: begin-gen
1957      Variable: begin-gen
1957       Variable: expr: 'util'
1957       Variable: expr: '='
1957       Value: begin-gen
1957        New: begin-gen
1957         FunctionCall: begin-gen
1957          FunctionCall: expr: 'FLUtil()'
1957        <-New: expr: 'qsatype.FLUtil()'
1957       <--Value: expr: 'qsatype.FLUtil()'
1957      <---Variable: expr: 'qsatype.FLUtil()'
1957         FunctionCall: end-gen
1957        New: end-gen
1957       Value: end-gen
1957      Variable: end-gen
1957      DeclarationBlock: line: 'util = qsatype.FLUtil()'
1957    <-Source: line: 'util = qsatype.FLUtil()'
1957   <--Function: line: 'util = qsatype.FLUtil()'
1957  <---Source: line: 'util = qsatype.FLUtil()'
1957 <----Class: line: 'util = qsatype.FLUtil()'
1957<-----Source: line: 'util = qsatype.FLUtil()'
1958     DeclarationBlock: end-gen
1958     If: begin-gen
1958      Value: begin-gen
1958       OpUnary: begin-gen
1958        OpUnary: expr: 'not'
1958      <-Value: expr: 'not'
1958        Identifier: begin-gen
1958         Identifier: expr: 'mtd'
1958       <-OpUnary: expr: 'mtd'
1958      <--Value: expr: 'mtd'
1958        Identifier: end-gen
1958       OpUnary: end-gen
1958      Value: end-gen
1958      If: line: 'if not mtd:'
1958    <-Source: line: 'if not mtd:'
1958   <--Function: line: 'if not mtd:'
1958  <---Source: line: 'if not mtd:'
1958 <----Class: line: 'if not mtd:'
1958<-----Source: line: 'if not mtd:'
1959      If: begin: 'block-if'
1959    <-Source: begin: 'block-if'
1959   <--Function: begin: 'block-if'
1959  <---Source: begin: 'block-if'
1959 <----Class: begin: 'block-if'
1959<-----Source: begin: 'block-if'
1959      Source: begin-gen
1959       InstructionUpdate: begin-gen
1959        Identifier: begin-gen
1959         Identifier: expr: 'mtd'
1959        Identifier: end-gen
1959        OpUpdate: begin-gen
1959         OpUpdate: expr: '='
1959        OpUpdate: end-gen
1959        Value: begin-gen
1959         Constant: begin-gen
1959          Constant: ctype: None -> None
1959          Constant: expr: '[]'
1959        <-Value: expr: '[]'
1959         Constant: end-gen
1959        Value: end-gen
1959        InstructionUpdate: line: 'mtd = []'
1959      <-Source: line: 'mtd = []'
1959     <--If: line: 'mtd = []'
1959    <---Source: line: 'mtd = []'
1959   <----Function: line: 'mtd = []'
1959  <-----Source: line: 'mtd = []'
1959 <------Class: line: 'mtd = []'
1959<-------Source: line: 'mtd = []'
1960       InstructionUpdate: end-gen
1960       InstructionUpdate: begin-gen
1960        ArrayMember: begin-gen
1960         Identifier: begin-gen
1960          Identifier: expr: 'mtd'
1960         Identifier: end-gen
1960         Value: begin-gen
1960          Constant: begin-gen
1960           Constant: ctype: 'String' -> 'idprovincia'
1960           Constant: expr: 'u"idprovincia"'
1960         <-Value: expr: 'u"idprovincia"'
1960          Constant: end-gen
1960         Value: end-gen
1960         ArrayMember: expr: 'mtd[u"idprovincia"]'
1960        ArrayMember: end-gen
1960        OpUpdate: begin-gen
1960         OpUpdate: expr: '='
1960        OpUpdate: end-gen
1960        Value: begin-gen
1960         Constant: begin-gen
1960          Constant: ctype: 'String' -> 'idprovincia'
1960          Constant: expr: 'u"idprovincia"'
1960        <-Value: expr: 'u"idprovincia"'
1960         Constant: end-gen
1960        Value: end-gen
1960        InstructionUpdate: line: 'mtd[u"idprovincia"] = u"idprovincia"'
1960      <-Source: line: 'mtd[u"idprovincia"] = u"idprovincia"'
1960     <--If: line: 'mtd[u"idprovincia"] = u"idprovincia"'
1960    <---Source: line: 'mtd[u"idprovincia"] = u"idprovincia"'
1960   <----Function: line: 'mtd[u"idprovincia"] = u"idprovincia"'
1960  <-----Source: line: 'mtd[u"idprovincia"] = u"idprovincia"'
1960 <------Class: line: 'mtd[u"idprovincia"] = u"idprovincia"'
1960<-------Source: line: 'mtd[u"idprovincia"] = u"idprovincia"'
1961       InstructionUpdate: end-gen
1961       InstructionUpdate: begin-gen
1961        ArrayMember: begin-gen
1961         Identifier: begin-gen
1961          Identifier: expr: 'mtd'
1961         Identifier: end-gen
1961         Value: begin-gen
1961          Constant: begin-gen
1961           Constant: ctype: 'String' -> 'provincia'
1961           Constant: expr: 'u"provincia"'
1961         <-Value: expr: 'u"provincia"'
1961          Constant: end-gen
1961         Value: end-gen
1961         ArrayMember: expr: 'mtd[u"provincia"]'
1961        ArrayMember: end-gen
1961        OpUpdate: begin-gen
1961         OpUpdate: expr: '='
1961        OpUpdate: end-gen
1961        Value: begin-gen
1961         Constant: begin-gen
1961          Constant: ctype: 'String' -> 'provincia'
1961          Constant: expr: 'u"provincia"'
1961        <-Value: expr: 'u"provincia"'
1961         Constant: end-gen
1961        Value: end-gen
1961        InstructionUpdate: line: 'mtd[u"provincia"] = u"provincia"'
1961      <-Source: line: 'mtd[u"provincia"] = u"provincia"'
1961     <--If: line: 'mtd[u"provincia"] = u"provincia"'
1961    <---Source: line: 'mtd[u"provincia"] = u"provincia"'
1961   <----Function: line: 'mtd[u"provincia"] = u"provincia"'
1961  <-----Source: line: 'mtd[u"provincia"] = u"provincia"'
1961 <------Class: line: 'mtd[u"provincia"] = u"provincia"'
1961<-------Source: line: 'mtd[u"provincia"] = u"provincia"'
1962       InstructionUpdate: end-gen
1962       InstructionUpdate: begin-gen
1962        ArrayMember: begin-gen
1962         Identifier: begin-gen
1962          Identifier: expr: 'mtd'
1962         Identifier: end-gen
1962         Value: begin-gen
1962          Constant: begin-gen
1962           Constant: ctype: 'String' -> 'codpais'
1962           Constant: expr: 'u"codpais"'
1962         <-Value: expr: 'u"codpais"'
1962          Constant: end-gen
1962         Value: end-gen
1962         ArrayMember: expr: 'mtd[u"codpais"]'
1962        ArrayMember: end-gen
1962        OpUpdate: begin-gen
1962         OpUpdate: expr: '='
1962        OpUpdate: end-gen
1962        Value: begin-gen
1962         Constant: begin-gen
1962          Constant: ctype: 'String' -> 'codpais'
1962          Constant: expr: 'u"codpais"'
1962        <-Value: expr: 'u"codpais"'
1962         Constant: end-gen
1962        Value: end-gen
1962        InstructionUpdate: line: 'mtd[u"codpais"] = u"codpais"'
1962      <-Source: line: 'mtd[u"codpais"] = u"codpais"'
1962     <--If: line: 'mtd[u"codpais"] = u"codpais"'
1962    <---Source: line: 'mtd[u"codpais"] = u"codpais"'
1962   <----Function: line: 'mtd[u"codpais"] = u"codpais"'
1962  <-----Source: line: 'mtd[u"codpais"] = u"codpais"'
1962 <------Class: line: 'mtd[u"codpais"] = u"codpais"'
1962<-------Source: line: 'mtd[u"codpais"] = u"codpais"'
1963       InstructionUpdate: end-gen
1963      Source: end-gen
1963      If: end: 'block-if'
1963    <-Source: end: 'block-if'
1963   <--Function: end: 'block-if'
1963  <---Source: end: 'block-if'
1963 <----Class: end: 'block-if'
1963<-----Source: end: 'block-if'
1963     If: end-gen
1963     DeclarationBlock: begin-gen
1963      Variable: begin-gen
1963       Variable: expr: 'idProvincia'
1963       Variable: expr: '='
1963       Value: begin-gen
1963        Member: begin-gen
1963         Identifier: begin-gen
1963          Identifier: expr: 'cursor'
1963         Identifier: end-gen
1963         FunctionCall: begin-gen
1963          Value: begin-gen
1963           ArrayMember: begin-gen
1963            Identifier: begin-gen
1963             Identifier: expr: 'mtd'
1963            Identifier: end-gen
1963            Value: begin-gen
1963             Constant: begin-gen
1963              Constant: ctype: 'String' -> 'idprovincia'
1963              Constant: expr: 'u"idprovincia"'
1963            <-Value: expr: 'u"idprovincia"'
1963             Constant: end-gen
1963            Value: end-gen
1963            ArrayMember: expr: 'mtd[u"idprovincia"]'
1963          <-Value: expr: 'mtd[u"idprovincia"]'
1963           ArrayMember: end-gen
1963          Value: end-gen
1963          FunctionCall: expr: 'valueBuffer(mtd[u"idprovincia"])'
1963         FunctionCall: end-gen
1963         Member: expr: 'cursor.valueBuffer(mtd[u"idprovincia"])'
1963       <-Value: expr: 'cursor.valueBuffer(mtd[u"idprovincia"])'
1963      <--Variable: expr: 'cursor.valueBuffer(mtd[u"idprovincia"])'
1963        Member: end-gen
1963       Value: end-gen
1963      Variable: end-gen
1963      DeclarationBlock: line: 'idProvincia = cursor.valueBuffer(mtd[u"idprovincia"])'
1963    <-Source: line: 'idProvincia = cursor.valueBuffer(mtd[u"idprovincia"])'
1963   <--Function: line: 'idProvincia = cursor.valueBuffer(mtd[u"idprovincia"])'
1963  <---Source: line: 'idProvincia = cursor.valueBuffer(mtd[u"idprovincia"])'
1963 <----Class: line: 'idProvincia = cursor.valueBuffer(mtd[u"idprovincia"])'
1963<-----Source: line: 'idProvincia = cursor.valueBuffer(mtd[u"idprovincia"])'
1965     DeclarationBlock: end-gen
1965     DeclarationBlock: begin-gen
1965      Variable: begin-gen
1965       Variable: expr: 'provincia'
1965       Variable: expr: '='
1965       Value: begin-gen
1965        Member: begin-gen
1965         Identifier: begin-gen
1965          Identifier: expr: 'cursor'
1965         Identifier: end-gen
1965         FunctionCall: begin-gen
1965          Value: begin-gen
1965           ArrayMember: begin-gen
1965            Identifier: begin-gen
1965             Identifier: expr: 'mtd'
1965            Identifier: end-gen
1965            Value: begin-gen
1965             Constant: begin-gen
1965              Constant: ctype: 'String' -> 'provincia'
1965              Constant: expr: 'u"provincia"'
1965            <-Value: expr: 'u"provincia"'
1965             Constant: end-gen
1965            Value: end-gen
1965            ArrayMember: expr: 'mtd[u"provincia"]'
1965          <-Value: expr: 'mtd[u"provincia"]'
1965           ArrayMember: end-gen
1965          Value: end-gen
1965          FunctionCall: expr: 'valueBuffer(mtd[u"provincia"])'
1965         FunctionCall: end-gen
1965         Member: expr: 'cursor.valueBuffer(mtd[u"provincia"])'
1965       <-Value: expr: 'cursor.valueBuffer(mtd[u"provincia"])'
1965      <--Variable: expr: 'cursor.valueBuffer(mtd[u"provincia"])'
1965        Member: end-gen
1965       Value: end-gen
1965      Variable: end-gen
1965      DeclarationBlock: line: 'provincia = cursor.valueBuffer(mtd[u"provincia"])'
1965    <-Source: line: 'provincia = cursor.valueBuffer(mtd[u"provincia"])'
1965   <--Function: line: 'provincia = cursor.valueBuffer(mtd[u"provincia"])'
1965  <---Source: line: 'provincia = cursor.valueBuffer(mtd[u"provincia"])'
1965 <----Class: line: 'provincia = cursor.valueBuffer(mtd[u"provincia"])'
1965<-----Source: line: 'provincia = cursor.valueBuffer(mtd[u"provincia"])'
1966     DeclarationBlock: end-gen
1966     DeclarationBlock: begin-gen
1966      Variable: begin-gen
1966       Variable: expr: 'codPais'
1966       Variable: expr: '='
1966       Value: begin-gen
1966        Member: begin-gen
1966         Identifier: begin-gen
1966          Identifier: expr: 'cursor'
1966         Identifier: end-gen
1966         FunctionCall: begin-gen
1966          Value: begin-gen
1966           ArrayMember: begin-gen
1966            Identifier: begin-gen
1966             Identifier: expr: 'mtd'
1966            Identifier: end-gen
1966            Value: begin-gen
1966             Constant: begin-gen
1966              Constant: ctype: 'String' -> 'codpais'
1966              Constant: expr: 'u"codpais"'
1966            <-Value: expr: 'u"codpais"'
1966             Constant: end-gen
1966            Value: end-gen
1966            ArrayMember: expr: 'mtd[u"codpais"]'
1966          <-Value: expr: 'mtd[u"codpais"]'
1966           ArrayMember: end-gen
1966          Value: end-gen
1966          FunctionCall: expr: 'valueBuffer(mtd[u"codpais"])'
1966         FunctionCall: end-gen
1966         Member: expr: 'cursor.valueBuffer(mtd[u"codpais"])'
1966       <-Value: expr: 'cursor.valueBuffer(mtd[u"codpais"])'
1966      <--Variable: expr: 'cursor.valueBuffer(mtd[u"codpais"])'
1966        Member: end-gen
1966       Value: end-gen
1966      Variable: end-gen
1966      DeclarationBlock: line: 'codPais = cursor.valueBuffer(mtd[u"codpais"])'
1966    <-Source: line: 'codPais = cursor.valueBuffer(mtd[u"codpais"])'
1966   <--Function: line: 'codPais = cursor.valueBuffer(mtd[u"codpais"])'
1966  <---Source: line: 'codPais = cursor.valueBuffer(mtd[u"codpais"])'
1966 <----Class: line: 'codPais = cursor.valueBuffer(mtd[u"codpais"])'
1966<-----Source: line: 'codPais = cursor.valueBuffer(mtd[u"codpais"])'
1967     DeclarationBlock: end-gen
1967     If: begin-gen
1967      Value: begin-gen
1967       Member: begin-gen
1967        Identifier: begin-gen
1967         Identifier: expr: 'util'
1967        Identifier: end-gen
1967        FunctionCall: begin-gen
1967         Value: begin-gen
1967          Constant: begin-gen
1967           Constant: ctype: 'String' -> 'paises'
1967           Constant: expr: 'u"paises"'
1967         <-Value: expr: 'u"paises"'
1967          Constant: end-gen
1967         Value: end-gen
1967         Value: begin-gen
1967          Constant: begin-gen
1967           Constant: ctype: 'String' -> 'validarprov'
1967           Constant: expr: 'u"validarprov"'
1967         <-Value: expr: 'u"validarprov"'
1967          Constant: end-gen
1967         Value: end-gen
1967         Expression: begin-gen
1967          Expression: expr: 'ustr('
1967          Constant: begin-gen
1967           Constant: ctype: 'String' -> "codpais = '"
1967           Constant: expr: 'u"codpais = \'"'
1967         <-Expression: expr: 'u"codpais = \'"'
1967          Constant: end-gen
1967          Expression: expr: ','
1967          Identifier: begin-gen
1967           Identifier: expr: 'codPais'
1967         <-Expression: expr: 'codPais'
1967          Identifier: end-gen
1967          Expression: expr: ','
1967          Constant: begin-gen
1967           Constant: ctype: 'String' -> "'"
1967           Constant: expr: 'u"\'"'
1967         <-Expression: expr: 'u"\'"'
1967          Constant: end-gen
1967          Expression: expr: ')'
1967         Expression: end-gen
1967         FunctionCall: expr: 'sqlSelect(u"paises", u"validarprov", ustr( u"codpais = \'" , codPais , u"\'" ))'
1967        FunctionCall: end-gen
1967        Member: expr: 'util.sqlSelect(u"paises", u"validarprov", ustr( u"codpais = \'" , codPais , u"\'" ))'
1967      <-Value: expr: 'util.sqlSelect(u"paises", u"validarprov", ustr( u"codpais = \'" , codPais , u"\'" ))'
1967       Member: end-gen
1967      Value: end-gen
1967      If: line: 'if util.sqlSelect(u"paises", u"validarprov", ustr( u"codpais = \'" , codPais , u"\'" )):'
1967    <-Source: line: 'if util.sqlSelect(u"paises", u"validarprov", ustr( u"codpais = \'" , codPais , u"\'" )):'
1967   <--Function: line: 'if util.sqlSelect(u"paises", u"validarprov", ustr( u"codpais = \'" , codPais , u"\'" )):'
1967  <---Source: line: 'if util.sqlSelect(u"paises", u"validarprov", ustr( u"codpais = \'" , codPais , u"\'" )):'
1967 <----Class: line: 'if util.sqlSelect(u"paises", u"validarprov", ustr( u"codpais = \'" , codPais , u"\'" )):'
1967<-----Source: line: 'if util.sqlSelect(u"paises", u"validarprov", ustr( u"codpais = \'" , codPais , u"\'" )):'
1968      If: begin: 'block-if'
1968    <-Source: begin: 'block-if'
1968   <--Function: begin: 'block-if'
1968  <---Source: begin: 'block-if'
1968 <----Class: begin: 'block-if'
1968<-----Source: begin: 'block-if'
1968      Source: begin-gen
1968       If: begin-gen
1968        Expression: begin-gen
1968         OpUnary: begin-gen
1968          OpUnary: expr: 'not'
1968        <-Expression: expr: 'not'
1968          Identifier: begin-gen
1968           Identifier: expr: 'idProvincia'
1968         <-OpUnary: expr: 'idProvincia'
1968        <--Expression: expr: 'idProvincia'
1968          Identifier: end-gen
1968         OpUnary: end-gen
1968         Compare: begin-gen
1968          Compare: expr: 'or'
1968        <-Expression: expr: 'or'
1968         Compare: end-gen
1968         Identifier: begin-gen
1968          Identifier: expr: 'idProvincia'
1968        <-Expression: expr: 'idProvincia'
1968         Identifier: end-gen
1968         Compare: begin-gen
1968          Compare: expr: '=='
1968        <-Expression: expr: '=='
1968         Compare: end-gen
1968         Constant: begin-gen
1968          Constant: ctype: 'String' -> ''
1968          Constant: expr: 'u""'
1968        <-Expression: expr: 'u""'
1968         Constant: end-gen
1968        Expression: end-gen
1968        If: line: 'if not idProvincia or idProvincia == u"":'
1968      <-Source: line: 'if not idProvincia or idProvincia == u"":'
1968     <--If: line: 'if not idProvincia or idProvincia == u"":'
1968    <---Source: line: 'if not idProvincia or idProvincia == u"":'
1968   <----Function: line: 'if not idProvincia or idProvincia == u"":'
1968  <-----Source: line: 'if not idProvincia or idProvincia == u"":'
1968 <------Class: line: 'if not idProvincia or idProvincia == u"":'
1968<-------Source: line: 'if not idProvincia or idProvincia == u"":'
1969        If: begin: 'block-if'
1969      <-Source: begin: 'block-if'
1969     <--If: begin: 'block-if'
1969    <---Source: begin: 'block-if'
1969   <----Function: begin: 'block-if'
1969  <-----Source: begin: 'block-if'
1969 <------Class: begin: 'block-if'
1969<-------Source: begin: 'block-if'
1969        Source: begin-gen
1969         InstructionUpdate: begin-gen
1969          Identifier: begin-gen
1969           Identifier: expr: 'idProvincia'
1969          Identifier: end-gen
1969          OpUpdate: begin-gen
1969           OpUpdate: expr: '='
1969          OpUpdate: end-gen
1969          Value: begin-gen
1969           Identifier: begin-gen
1969            Identifier: expr: 'False'
1969          <-Value: expr: 'False'
1969           Identifier: end-gen
1969          Value: end-gen
1969          InstructionUpdate: line: 'idProvincia = False'
1969        <-Source: line: 'idProvincia = False'
1969       <--If: line: 'idProvincia = False'
1969      <---Source: line: 'idProvincia = False'
1969     <----If: line: 'idProvincia = False'
1969    <-----Source: line: 'idProvincia = False'
1969   <------Function: line: 'idProvincia = False'
1969  <-------Source: line: 'idProvincia = False'
1969 <--------Class: line: 'idProvincia = False'
1969<---------Source: line: 'idProvincia = False'
1970         InstructionUpdate: end-gen
1970         If: begin-gen
1970          Expression: begin-gen
1970           Identifier: begin-gen
1970            Identifier: expr: 'provincia'
1970          <-Expression: expr: 'provincia'
1970           Identifier: end-gen
1970           Compare: begin-gen
1970            Compare: expr: 'and'
1970          <-Expression: expr: 'and'
1970           Compare: end-gen
1970           Identifier: begin-gen
1970            Identifier: expr: 'provincia'
1970          <-Expression: expr: 'provincia'
1970           Identifier: end-gen
1970           Compare: begin-gen
1970            Compare: expr: '!='
1970          <-Expression: expr: '!='
1970           Compare: end-gen
1970           Constant: begin-gen
1970            Constant: ctype: 'String' -> ''
1970            Constant: expr: 'u""'
1970          <-Expression: expr: 'u""'
1970           Constant: end-gen
1970           Compare: begin-gen
1970            Compare: expr: 'and'
1970          <-Expression: expr: 'and'
1970           Compare: end-gen
1970           Identifier: begin-gen
1970            Identifier: expr: 'provincia'
1970          <-Expression: expr: 'provincia'
1970           Identifier: end-gen
1970           Compare: begin-gen
1970            Compare: expr: '!='
1970          <-Expression: expr: '!='
1970           Compare: end-gen
1970           Identifier: begin-gen
1970            Identifier: expr: 'None'
1970          <-Expression: expr: 'None'
1970           Identifier: end-gen
1970          Expression: end-gen
1970          If: line: 'if provincia and provincia != u"" and provincia != None:'
1970        <-Source: line: 'if provincia and provincia != u"" and provincia != None:'
1970       <--If: line: 'if provincia and provincia != u"" and provincia != None:'
1970      <---Source: line: 'if provincia and provincia != u"" and provincia != None:'
1970     <----If: line: 'if provincia and provincia != u"" and provincia != None:'
1970    <-----Source: line: 'if provincia and provincia != u"" and provincia != None:'
1970   <------Function: line: 'if provincia and provincia != u"" and provincia != None:'
1970  <-------Source: line: 'if provincia and provincia != u"" and provincia != None:'
1970 <--------Class: line: 'if provincia and provincia != u"" and provincia != None:'
1970<---------Source: line: 'if provincia and provincia != u"" and provincia != None:'
1971          If: begin: 'block-if'
1971        <-Source: begin: 'block-if'
1971       <--If: begin: 'block-if'
1971      <---Source: begin: 'block-if'
1971     <----If: begin: 'block-if'
1971    <-----Source: begin: 'block-if'
1971   <------Function: begin: 'block-if'
1971  <-------Source: begin: 'block-if'
1971 <--------Class: begin: 'block-if'
1971<---------Source: begin: 'block-if'
1971          Source: begin-gen
1971           InstructionUpdate: begin-gen
1971            Identifier: begin-gen
1971             Identifier: expr: 'idProvincia'
1971            Identifier: end-gen
1971            OpUpdate: begin-gen
1971             OpUpdate: expr: '='
1971            OpUpdate: end-gen
1971            Value: begin-gen
1971             Member: begin-gen
1971              Identifier: begin-gen
1971               Identifier: expr: 'util'
1971              Identifier: end-gen
1971              FunctionCall: begin-gen
1971               Value: begin-gen
1971                Constant: begin-gen
1971                 Constant: ctype: 'String' -> 'provincias'
1971                 Constant: expr: 'u"provincias"'
1971               <-Value: expr: 'u"provincias"'
1971                Constant: end-gen
1971               Value: end-gen
1971               Value: begin-gen
1971                Constant: begin-gen
1971                 Constant: ctype: 'String' -> 'idprovincia'
1971                 Constant: expr: 'u"idprovincia"'
1971               <-Value: expr: 'u"idprovincia"'
1971                Constant: end-gen
1971               Value: end-gen
1971               Expression: begin-gen
1971                Expression: expr: 'ustr('
1971                Constant: begin-gen
1971                 Constant: ctype: 'String' -> "UPPER(provincia) = '"
1971                 Constant: expr: 'u"UPPER(provincia) = \'"'
1971               <-Expression: expr: 'u"UPPER(provincia) = \'"'
1971                Constant: end-gen
1971                Expression: expr: ','
1971                Member: begin-gen
1971                 Identifier: begin-gen
1971                  Identifier: expr: 'provincia'
1971                 Identifier: end-gen
1971                 FunctionCall: begin-gen
1971                  FunctionCall: expr: 'toUpperCase()'
1971                 FunctionCall: end-gen
1971                 Member: expr: 'provincia.toUpperCase()'
1971               <-Expression: expr: 'provincia.toUpperCase()'
1971                Member: end-gen
1971                Expression: expr: ','
1971                Constant: begin-gen
1971                 Constant: ctype: 'String' -> "' AND codpais = '"
1971                 Constant: expr: 'u"\' AND codpais = \'"'
1971               <-Expression: expr: 'u"\' AND codpais = \'"'
1971                Constant: end-gen
1971                Expression: expr: ','
1971                Identifier: begin-gen
1971                 Identifier: expr: 'codPais'
1971               <-Expression: expr: 'codPais'
1971                Identifier: end-gen
1971                Expression: expr: ','
1971                Constant: begin-gen
1971                 Constant: ctype: 'String' -> "'"
1971                 Constant: expr: 'u"\'"'
1971               <-Expression: expr: 'u"\'"'
1971                Constant: end-gen
1971                Expression: expr: ')'
1971               Expression: end-gen
1971               FunctionCall: expr: 'sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1971              FunctionCall: end-gen
1971              Member: expr: 'util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1971            <-Value: expr: 'util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1971             Member: end-gen
1971            Value: end-gen
1971            InstructionUpdate: line: 'idProvincia = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1971          <-Source: line: 'idProvincia = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1971         <--If: line: 'idProvincia = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1971        <---Source: line: 'idProvincia = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1971       <----If: line: 'idProvincia = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1971      <-----Source: line: 'idProvincia = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1971     <------If: line: 'idProvincia = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1971    <-------Source: line: 'idProvincia = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1971   <--------Function: line: 'idProvincia = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1971  <---------Source: line: 'idProvincia = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1971 <----------Class: line: 'idProvincia = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1971<-----------Source: line: 'idProvincia = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\'" ))'
1972           InstructionUpdate: end-gen
1972           If: begin-gen
1972            Value: begin-gen
1972             Identifier: begin-gen
1972              Identifier: expr: 'idProvincia'
1972            <-Value: expr: 'idProvincia'
1972             Identifier: end-gen
1972            Value: end-gen
1972            If: line: 'if idProvincia:'
1972          <-Source: line: 'if idProvincia:'
1972         <--If: line: 'if idProvincia:'
1972        <---Source: line: 'if idProvincia:'
1972       <----If: line: 'if idProvincia:'
1972      <-----Source: line: 'if idProvincia:'
1972     <------If: line: 'if idProvincia:'
1972    <-------Source: line: 'if idProvincia:'
1972   <--------Function: line: 'if idProvincia:'
1972  <---------Source: line: 'if idProvincia:'
1972 <----------Class: line: 'if idProvincia:'
1972<-----------Source: line: 'if idProvincia:'
1973            If: begin: 'block-if'
1973          <-Source: begin: 'block-if'
1973         <--If: begin: 'block-if'
1973        <---Source: begin: 'block-if'
1973       <----If: begin: 'block-if'
1973      <-----Source: begin: 'block-if'
1973     <------If: begin: 'block-if'
1973    <-------Source: begin: 'block-if'
1973   <--------Function: begin: 'block-if'
1973  <---------Source: begin: 'block-if'
1973 <----------Class: begin: 'block-if'
1973<-----------Source: begin: 'block-if'
1973            Source: begin-gen
1973             InstructionCall: begin-gen
1973              Member: begin-gen
1973               Identifier: begin-gen
1973                Identifier: expr: 'cursor'
1973               Identifier: end-gen
1973               FunctionCall: begin-gen
1973                Value: begin-gen
1973                 ArrayMember: begin-gen
1973                  Identifier: begin-gen
1973                   Identifier: expr: 'mtd'
1973                  Identifier: end-gen
1973                  Value: begin-gen
1973                   Constant: begin-gen
1973                    Constant: ctype: 'String' -> 'idprovincia'
1973                    Constant: expr: 'u"idprovincia"'
1973                  <-Value: expr: 'u"idprovincia"'
1973                   Constant: end-gen
1973                  Value: end-gen
1973                  ArrayMember: expr: 'mtd[u"idprovincia"]'
1973                <-Value: expr: 'mtd[u"idprovincia"]'
1973                 ArrayMember: end-gen
1973                Value: end-gen
1973                Value: begin-gen
1973                 Identifier: begin-gen
1973                  Identifier: expr: 'idProvincia'
1973                <-Value: expr: 'idProvincia'
1973                 Identifier: end-gen
1973                Value: end-gen
1973                FunctionCall: expr: 'setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973               FunctionCall: end-gen
1973               Member: expr: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973              Member: end-gen
1973              InstructionCall: line: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973            <-Source: line: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973           <--If: line: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973          <---Source: line: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973         <----If: line: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973        <-----Source: line: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973       <------If: line: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973      <-------Source: line: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973     <--------If: line: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973    <---------Source: line: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973   <----------Function: line: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973  <-----------Source: line: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973 <------------Class: line: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1973<-------------Source: line: 'cursor.setValueBuffer(mtd[u"idprovincia"], idProvincia)'
1974             InstructionCall: end-gen
1974            Source: end-gen
1974            If: end: 'block-if'
1974          <-Source: end: 'block-if'
1974         <--If: end: 'block-if'
1974        <---Source: end: 'block-if'
1974       <----If: end: 'block-if'
1974      <-----Source: end: 'block-if'
1974     <------If: end: 'block-if'
1974    <-------Source: end: 'block-if'
1974   <--------Function: end: 'block-if'
1974  <---------Source: end: 'block-if'
1974 <----------Class: end: 'block-if'
1974<-----------Source: end: 'block-if'
1974           If: end-gen
1974          Source: end-gen
1974          If: end: 'block-if'
1974        <-Source: end: 'block-if'
1974       <--If: end: 'block-if'
1974      <---Source: end: 'block-if'
1974     <----If: end: 'block-if'
1974    <-----Source: end: 'block-if'
1974   <------Function: end: 'block-if'
1974  <-------Source: end: 'block-if'
1974 <--------Class: end: 'block-if'
1974<---------Source: end: 'block-if'
1974         If: end-gen
1974         If: begin-gen
1974          Value: begin-gen
1974           OpUnary: begin-gen
1974            OpUnary: expr: 'not'
1974          <-Value: expr: 'not'
1974            Identifier: begin-gen
1974             Identifier: expr: 'idProvincia'
1974           <-OpUnary: expr: 'idProvincia'
1974          <--Value: expr: 'idProvincia'
1974            Identifier: end-gen
1974           OpUnary: end-gen
1974          Value: end-gen
1974          If: line: 'if not idProvincia:'
1974        <-Source: line: 'if not idProvincia:'
1974       <--If: line: 'if not idProvincia:'
1974      <---Source: line: 'if not idProvincia:'
1974     <----If: line: 'if not idProvincia:'
1974    <-----Source: line: 'if not idProvincia:'
1974   <------Function: line: 'if not idProvincia:'
1974  <-------Source: line: 'if not idProvincia:'
1974 <--------Class: line: 'if not idProvincia:'
1974<---------Source: line: 'if not idProvincia:'
1975          If: begin: 'block-if'
1975        <-Source: begin: 'block-if'
1975       <--If: begin: 'block-if'
1975      <---Source: begin: 'block-if'
1975     <----If: begin: 'block-if'
1975    <-----Source: begin: 'block-if'
1975   <------Function: begin: 'block-if'
1975  <-------Source: begin: 'block-if'
1975 <--------Class: begin: 'block-if'
1975<---------Source: begin: 'block-if'
1975          Source: begin-gen
1975           InstructionCall: begin-gen
1975            Member: begin-gen
1975             Identifier: begin-gen
1975              Identifier: expr: 'MessageBox'
1975             Identifier: end-gen
1975             FunctionCall: begin-gen
1975              Value: begin-gen
1975               Member: begin-gen
1975                Identifier: begin-gen
1975                 Identifier: expr: 'util'
1975                Identifier: end-gen
1975                FunctionCall: begin-gen
1975                 Value: begin-gen
1975                  Constant: begin-gen
1975                   Constant: ctype: 'String' -> 'scripts'
1975                   Constant: expr: 'u"scripts"'
1975                 <-Value: expr: 'u"scripts"'
1975                  Constant: end-gen
1975                 Value: end-gen
1975                 Value: begin-gen
1975                  Constant: begin-gen
1975                   Constant: ctype: 'String' -> 'La provincia %1 no pertenece al país %2'
1975                   Constant: expr: 'u"La provincia %1 no pertenece al país %2"'
1975                 <-Value: expr: 'u"La provincia %1 no pertenece al país %2"'
1975                  Constant: end-gen
1975                 Value: end-gen
1975                 FunctionCall: expr: 'translate(u"scripts", u"La provincia %1 no pertenece al país %2")'
1975                FunctionCall: end-gen
1975                FunctionCall: begin-gen
1975                 Value: begin-gen
1975                  Identifier: begin-gen
1975                   Identifier: expr: 'provincia'
1975                 <-Value: expr: 'provincia'
1975                  Identifier: end-gen
1975                 Value: end-gen
1975                 FunctionCall: expr: 'arg(provincia)'
1975                FunctionCall: end-gen
1975                FunctionCall: begin-gen
1975                 Value: begin-gen
1975                  Identifier: begin-gen
1975                   Identifier: expr: 'codPais'
1975                 <-Value: expr: 'codPais'
1975                  Identifier: end-gen
1975                 Value: end-gen
1975                 FunctionCall: expr: 'arg(codPais)'
1975                FunctionCall: end-gen
1975                Member: expr: 'util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais)'
1975              <-Value: expr: 'util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais)'
1975               Member: end-gen
1975              Value: end-gen
1975              Value: begin-gen
1975               Member: begin-gen
1975                Identifier: begin-gen
1975                 Identifier: expr: 'MessageBox'
1975                Identifier: end-gen
1975                Identifier: begin-gen
1975                 Identifier: expr: 'Ok'
1975                Identifier: end-gen
1975                Member: expr: 'MessageBox.Ok'
1975              <-Value: expr: 'MessageBox.Ok'
1975               Member: end-gen
1975              Value: end-gen
1975              Value: begin-gen
1975               Member: begin-gen
1975                Identifier: begin-gen
1975                 Identifier: expr: 'MessageBox'
1975                Identifier: end-gen
1975                Identifier: begin-gen
1975                 Identifier: expr: 'NoButton'
1975                Identifier: end-gen
1975                Member: expr: 'MessageBox.NoButton'
1975              <-Value: expr: 'MessageBox.NoButton'
1975               Member: end-gen
1975              Value: end-gen
1975              FunctionCall: expr: 'warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1975             FunctionCall: end-gen
1975             Member: expr: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1975            Member: end-gen
1975            InstructionCall: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1975          <-Source: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1975         <--If: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1975        <---Source: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1975       <----If: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1975      <-----Source: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1975     <------If: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1975    <-------Source: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1975   <--------Function: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1975  <---------Source: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1975 <----------Class: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1975<-----------Source: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1976           InstructionCall: end-gen
1976           InstructionFlow: begin-gen
1976            Value: begin-gen
1976             Identifier: begin-gen
1976              Identifier: expr: 'False'
1976            <-Value: expr: 'False'
1976             Identifier: end-gen
1976            Value: end-gen
1976            InstructionFlow: line: 'return False'
1976          <-Source: line: 'return False'
1976         <--If: line: 'return False'
1976        <---Source: line: 'return False'
1976       <----If: line: 'return False'
1976      <-----Source: line: 'return False'
1976     <------If: line: 'return False'
1976    <-------Source: line: 'return False'
1976   <--------Function: line: 'return False'
1976  <---------Source: line: 'return False'
1976 <----------Class: line: 'return False'
1976<-----------Source: line: 'return False'
1977           InstructionFlow: end-gen
1977          Source: end-gen
1977          If: end: 'block-if'
1977        <-Source: end: 'block-if'
1977       <--If: end: 'block-if'
1977      <---Source: end: 'block-if'
1977     <----If: end: 'block-if'
1977    <-----Source: end: 'block-if'
1977   <------Function: end: 'block-if'
1977  <-------Source: end: 'block-if'
1977 <--------Class: end: 'block-if'
1977<---------Source: end: 'block-if'
1977         If: end-gen
1977        Source: end-gen
1977        If: end: 'block-if'
1977      <-Source: end: 'block-if'
1977     <--If: end: 'block-if'
1977    <---Source: end: 'block-if'
1977   <----Function: end: 'block-if'
1977  <-----Source: end: 'block-if'
1977 <------Class: end: 'block-if'
1977<-------Source: end: 'block-if'
1977        If: line: 'else:'
1977      <-Source: line: 'else:'
1977     <--If: line: 'else:'
1977    <---Source: line: 'else:'
1977   <----Function: line: 'else:'
1977  <-----Source: line: 'else:'
1977 <------Class: line: 'else:'
1977<-------Source: line: 'else:'
1979        If: begin: 'block-else'
1979      <-Source: begin: 'block-else'
1979     <--If: begin: 'block-else'
1979    <---Source: begin: 'block-else'
1979   <----Function: begin: 'block-else'
1979  <-----Source: begin: 'block-else'
1979 <------Class: begin: 'block-else'
1979<-------Source: begin: 'block-else'
1979        Source: begin-gen
1979         DeclarationBlock: begin-gen
1979          Variable: begin-gen
1979           Variable: expr: 'idProvTabla'
1979           Variable: expr: '='
1979           Value: begin-gen
1979            Member: begin-gen
1979             Identifier: begin-gen
1979              Identifier: expr: 'util'
1979             Identifier: end-gen
1979             FunctionCall: begin-gen
1979              Value: begin-gen
1979               Constant: begin-gen
1979                Constant: ctype: 'String' -> 'provincias'
1979                Constant: expr: 'u"provincias"'
1979              <-Value: expr: 'u"provincias"'
1979               Constant: end-gen
1979              Value: end-gen
1979              Value: begin-gen
1979               Constant: begin-gen
1979                Constant: ctype: 'String' -> 'idprovincia'
1979                Constant: expr: 'u"idprovincia"'
1979              <-Value: expr: 'u"idprovincia"'
1979               Constant: end-gen
1979              Value: end-gen
1979              Expression: begin-gen
1979               Expression: expr: 'ustr('
1979               Constant: begin-gen
1979                Constant: ctype: 'String' -> "UPPER(provincia) = '"
1979                Constant: expr: 'u"UPPER(provincia) = \'"'
1979              <-Expression: expr: 'u"UPPER(provincia) = \'"'
1979               Constant: end-gen
1979               Expression: expr: ','
1979               Member: begin-gen
1979                Identifier: begin-gen
1979                 Identifier: expr: 'provincia'
1979                Identifier: end-gen
1979                FunctionCall: begin-gen
1979                 FunctionCall: expr: 'toUpperCase()'
1979                FunctionCall: end-gen
1979                Member: expr: 'provincia.toUpperCase()'
1979              <-Expression: expr: 'provincia.toUpperCase()'
1979               Member: end-gen
1979               Expression: expr: ','
1979               Constant: begin-gen
1979                Constant: ctype: 'String' -> "' AND codpais = '"
1979                Constant: expr: 'u"\' AND codpais = \'"'
1979              <-Expression: expr: 'u"\' AND codpais = \'"'
1979               Constant: end-gen
1979               Expression: expr: ','
1979               Identifier: begin-gen
1979                Identifier: expr: 'codPais'
1979              <-Expression: expr: 'codPais'
1979               Identifier: end-gen
1979               Expression: expr: ','
1979               Constant: begin-gen
1979                Constant: ctype: 'String' -> "' AND idprovincia = "
1979                Constant: expr: 'u"\' AND idprovincia = "'
1979              <-Expression: expr: 'u"\' AND idprovincia = "'
1979               Constant: end-gen
1979               Expression: expr: ','
1979               Identifier: begin-gen
1979                Identifier: expr: 'idProvincia'
1979              <-Expression: expr: 'idProvincia'
1979               Identifier: end-gen
1979               Expression: expr: ')'
1979              Expression: end-gen
1979              FunctionCall: expr: 'sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\' AND idprovincia = " , idProvincia ))'
1979             FunctionCall: end-gen
1979             Member: expr: 'util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\' AND idprovincia = " , idProvincia ))'
1979           <-Value: expr: 'util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\' AND idprovincia = " , idProvincia ))'
1979          <--Variable: expr: 'util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\' AND idprovincia = " , idProvincia ))'
1979            Member: end-gen
1979           Value: end-gen
1979          Variable: end-gen
1979          DeclarationBlock: line: 'idProvTabla = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\' AND idprovincia = " , idProvincia ))'
1979        <-Source: line: 'idProvTabla = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\' AND idprovincia = " , idProvincia ))'
1979       <--If: line: 'idProvTabla = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\' AND idprovincia = " , idProvincia ))'
1979      <---Source: line: 'idProvTabla = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\' AND idprovincia = " , idProvincia ))'
1979     <----If: line: 'idProvTabla = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\' AND idprovincia = " , idProvincia ))'
1979    <-----Source: line: 'idProvTabla = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\' AND idprovincia = " , idProvincia ))'
1979   <------Function: line: 'idProvTabla = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\' AND idprovincia = " , idProvincia ))'
1979  <-------Source: line: 'idProvTabla = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\' AND idprovincia = " , idProvincia ))'
1979 <--------Class: line: 'idProvTabla = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\' AND idprovincia = " , idProvincia ))'
1979<---------Source: line: 'idProvTabla = util.sqlSelect(u"provincias", u"idprovincia", ustr( u"UPPER(provincia) = \'" , provincia.toUpperCase() , u"\' AND codpais = \'" , codPais , u"\' AND idprovincia = " , idProvincia ))'
1980         DeclarationBlock: end-gen
1980         If: begin-gen
1980          Value: begin-gen
1980           OpUnary: begin-gen
1980            OpUnary: expr: 'not'
1980          <-Value: expr: 'not'
1980            Identifier: begin-gen
1980             Identifier: expr: 'idProvTabla'
1980           <-OpUnary: expr: 'idProvTabla'
1980          <--Value: expr: 'idProvTabla'
1980            Identifier: end-gen
1980           OpUnary: end-gen
1980          Value: end-gen
1980          If: line: 'if not idProvTabla:'
1980        <-Source: line: 'if not idProvTabla:'
1980       <--If: line: 'if not idProvTabla:'
1980      <---Source: line: 'if not idProvTabla:'
1980     <----If: line: 'if not idProvTabla:'
1980    <-----Source: line: 'if not idProvTabla:'
1980   <------Function: line: 'if not idProvTabla:'
1980  <-------Source: line: 'if not idProvTabla:'
1980 <--------Class: line: 'if not idProvTabla:'
1980<---------Source: line: 'if not idProvTabla:'
1981          If: begin: 'block-if'
1981        <-Source: begin: 'block-if'
1981       <--If: begin: 'block-if'
1981      <---Source: begin: 'block-if'
1981     <----If: begin: 'block-if'
1981    <-----Source: begin: 'block-if'
1981   <------Function: begin: 'block-if'
1981  <-------Source: begin: 'block-if'
1981 <--------Class: begin: 'block-if'
1981<---------Source: begin: 'block-if'
1981          Source: begin-gen
1981           InstructionCall: begin-gen
1981            Member: begin-gen
1981             Identifier: begin-gen
1981              Identifier: expr: 'MessageBox'
1981             Identifier: end-gen
1981             FunctionCall: begin-gen
1981              Value: begin-gen
1981               Member: begin-gen
1981                Identifier: begin-gen
1981                 Identifier: expr: 'util'
1981                Identifier: end-gen
1981                FunctionCall: begin-gen
1981                 Value: begin-gen
1981                  Constant: begin-gen
1981                   Constant: ctype: 'String' -> 'scripts'
1981                   Constant: expr: 'u"scripts"'
1981                 <-Value: expr: 'u"scripts"'
1981                  Constant: end-gen
1981                 Value: end-gen
1981                 Value: begin-gen
1981                  Constant: begin-gen
1981                   Constant: ctype: 'String' -> 'La provincia %1 no pertenece al país %2'
1981                   Constant: expr: 'u"La provincia %1 no pertenece al país %2"'
1981                 <-Value: expr: 'u"La provincia %1 no pertenece al país %2"'
1981                  Constant: end-gen
1981                 Value: end-gen
1981                 FunctionCall: expr: 'translate(u"scripts", u"La provincia %1 no pertenece al país %2")'
1981                FunctionCall: end-gen
1981                FunctionCall: begin-gen
1981                 Value: begin-gen
1981                  Identifier: begin-gen
1981                   Identifier: expr: 'provincia'
1981                 <-Value: expr: 'provincia'
1981                  Identifier: end-gen
1981                 Value: end-gen
1981                 FunctionCall: expr: 'arg(provincia)'
1981                FunctionCall: end-gen
1981                FunctionCall: begin-gen
1981                 Value: begin-gen
1981                  Identifier: begin-gen
1981                   Identifier: expr: 'codPais'
1981                 <-Value: expr: 'codPais'
1981                  Identifier: end-gen
1981                 Value: end-gen
1981                 FunctionCall: expr: 'arg(codPais)'
1981                FunctionCall: end-gen
1981                Member: expr: 'util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais)'
1981              <-Value: expr: 'util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais)'
1981               Member: end-gen
1981              Value: end-gen
1981              Value: begin-gen
1981               Member: begin-gen
1981                Identifier: begin-gen
1981                 Identifier: expr: 'MessageBox'
1981                Identifier: end-gen
1981                Identifier: begin-gen
1981                 Identifier: expr: 'Ok'
1981                Identifier: end-gen
1981                Member: expr: 'MessageBox.Ok'
1981              <-Value: expr: 'MessageBox.Ok'
1981               Member: end-gen
1981              Value: end-gen
1981              Value: begin-gen
1981               Member: begin-gen
1981                Identifier: begin-gen
1981                 Identifier: expr: 'MessageBox'
1981                Identifier: end-gen
1981                Identifier: begin-gen
1981                 Identifier: expr: 'NoButton'
1981                Identifier: end-gen
1981                Member: expr: 'MessageBox.NoButton'
1981              <-Value: expr: 'MessageBox.NoButton'
1981               Member: end-gen
1981              Value: end-gen
1981              FunctionCall: expr: 'warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1981             FunctionCall: end-gen
1981             Member: expr: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1981            Member: end-gen
1981            InstructionCall: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1981          <-Source: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1981         <--If: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1981        <---Source: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1981       <----If: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1981      <-----Source: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1981     <------If: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1981    <-------Source: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1981   <--------Function: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1981  <---------Source: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1981 <----------Class: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1981<-----------Source: line: 'MessageBox.warning(util.translate(u"scripts", u"La provincia %1 no pertenece al país %2").arg(provincia).arg(codPais), MessageBox.Ok, MessageBox.NoButton)'
1982           InstructionCall: end-gen
1982           InstructionFlow: begin-gen
1982            Value: begin-gen
1982             Identifier: begin-gen
1982              Identifier: expr: 'False'
1982            <-Value: expr: 'False'
1982             Identifier: end-gen
1982            Value: end-gen
1982            InstructionFlow: line: 'return False'
1982          <-Source: line: 'return False'
1982         <--If: line: 'return False'
1982        <---Source: line: 'return False'
1982       <----If: line: 'return False'
1982      <-----Source: line: 'return False'
1982     <------If: line: 'return False'
1982    <-------Source: line: 'return False'
1982   <--------Function: line: 'return False'
1982  <---------Source: line: 'return False'
1982 <----------Class: line: 'return False'
1982<-----------Source: line: 'return False'
1983           InstructionFlow: end-gen
1983          Source: end-gen
1983          If: end: 'block-if'
1983        <-Source: end: 'block-if'
1983       <--If: end: 'block-if'
1983      <---Source: end: 'block-if'
1983     <----If: end: 'block-if'
1983    <-----Source: end: 'block-if'
1983   <------Function: end: 'block-if'
1983  <-------Source: end: 'block-if'
1983 <--------Class: end: 'block-if'
1983<---------Source: end: 'block-if'
1983         If: end-gen
1983        Source: end-gen
1983        If: end: 'block-else'
1983      <-Source: end: 'block-else'
1983     <--If: end: 'block-else'
1983    <---Source: end: 'block-else'
1983   <----Function: end: 'block-else'
1983  <-----Source: end: 'block-else'
1983 <------Class: end: 'block-else'
1983<-------Source: end: 'block-else'
1984       If: end-gen
1984      Source: end-gen
1984      If: end: 'block-if'
1984    <-Source: end: 'block-if'
1984   <--Function: end: 'block-if'
1984  <---Source: end: 'block-if'
1984 <----Class: end: 'block-if'
1984<-----Source: end: 'block-if'
1984     If: end-gen
1984     InstructionFlow: begin-gen
1984      Value: begin-gen
1984       Identifier: begin-gen
1984        Identifier: expr: 'True'
1984      <-Value: expr: 'True'
1984       Identifier: end-gen
1984      Value: end-gen
1984      InstructionFlow: line: 'return True'
1984    <-Source: line: 'return True'
1984   <--Function: line: 'return True'
1984  <---Source: line: 'return True'
1984 <----Class: line: 'return True'
1984<-----Source: line: 'return True'
1986     InstructionFlow: end-gen
1986    Source: end-gen
1986    Function: end: 'block-def-oficial_validarProvincia'
1986  <-Source: end: 'block-def-oficial_validarProvincia'
1986 <--Class: end: 'block-def-oficial_validarProvincia'
1986<---Source: end: 'block-def-oficial_validarProvincia'
1987   Function: end-gen
1987   Function: begin-gen
1987    Variable: begin-gen
1987     Variable: expr: 'str'
1987    Variable: end-gen
1987    Function: line: 'def oficial_simplify(self, str = None):'
1987  <-Source: line: 'def oficial_simplify(self, str = None):'
1987 <--Class: line: 'def oficial_simplify(self, str = None):'
1987<---Source: line: 'def oficial_simplify(self, str = None):'
1988    Function: begin: 'block-def-oficial_simplify'
1988  <-Source: begin: 'block-def-oficial_simplify'
1988 <--Class: begin: 'block-def-oficial_simplify'
1988<---Source: begin: 'block-def-oficial_simplify'
1988    Source: begin-gen
1988     DeclarationBlock: begin-gen
1988      Variable: begin-gen
1988       Variable: expr: 'regExp'
1988       Variable: expr: '='
1988       Value: begin-gen
1988        New: begin-gen
1988         FunctionCall: begin-gen
1988          Value: begin-gen
1988           Constant: begin-gen
1988            Constant: ctype: 'String' -> '( |\\n|\\r|\\t|\\f)'
1988            Constant: expr: 'u"( |\\n|\\r|\\t|\\f)"'
1988          <-Value: expr: 'u"( |\\n|\\r|\\t|\\f)"'
1988           Constant: end-gen
1988          Value: end-gen
1988          FunctionCall: expr: 'RegExp(u"( |\\n|\\r|\\t|\\f)")'
1988        <-New: expr: 'qsatype.RegExp(u"( |\\n|\\r|\\t|\\f)")'
1988       <--Value: expr: 'qsatype.RegExp(u"( |\\n|\\r|\\t|\\f)")'
1988      <---Variable: expr: 'qsatype.RegExp(u"( |\\n|\\r|\\t|\\f)")'
1988         FunctionCall: end-gen
1988        New: end-gen
1988       Value: end-gen
1988      Variable: end-gen
1988      DeclarationBlock: line: 'regExp = qsatype.RegExp(u"( |\\n|\\r|\\t|\\f)")'
1988    <-Source: line: 'regExp = qsatype.RegExp(u"( |\\n|\\r|\\t|\\f)")'
1988   <--Function: line: 'regExp = qsatype.RegExp(u"( |\\n|\\r|\\t|\\f)")'
1988  <---Source: line: 'regExp = qsatype.RegExp(u"( |\\n|\\r|\\t|\\f)")'
1988 <----Class: line: 'regExp = qsatype.RegExp(u"( |\\n|\\r|\\t|\\f)")'
1988<-----Source: line: 'regExp = qsatype.RegExp(u"( |\\n|\\r|\\t|\\f)")'
1989     DeclarationBlock: end-gen
1989     InstructionUpdate: begin-gen
1989      Member: begin-gen
1989       Identifier: begin-gen
1989        Identifier: expr: 'regExp'
1989       Identifier: end-gen
1989       Identifier: begin-gen
1989        Identifier: expr: 'global_'
1989       Identifier: end-gen
1989       Member: expr: 'regExp.global_'
1989      Member: end-gen
1989      OpUpdate: begin-gen
1989       OpUpdate: expr: '='
1989      OpUpdate: end-gen
1989      Value: begin-gen
1989       Identifier: begin-gen
1989        Identifier: expr: 'True'
1989      <-Value: expr: 'True'
1989       Identifier: end-gen
1989      Value: end-gen
1989      InstructionUpdate: line: 'regExp.global_ = True'
1989    <-Source: line: 'regExp.global_ = True'
1989   <--Function: line: 'regExp.global_ = True'
1989  <---Source: line: 'regExp.global_ = True'
1989 <----Class: line: 'regExp.global_ = True'
1989<-----Source: line: 'regExp.global_ = True'
1990     InstructionUpdate: end-gen
1990     InstructionUpdate: begin-gen
1990      Identifier: begin-gen
1990       Identifier: expr: 'str'
1990      Identifier: end-gen
1990      OpUpdate: begin-gen
1990       OpUpdate: expr: '='
1990      OpUpdate: end-gen
1990      Value: begin-gen
1990       Member: begin-gen
1990        Identifier: begin-gen
1990         Identifier: expr: 'str'
1990        Identifier: end-gen
1990        FunctionCall: begin-gen
1990         Value: begin-gen
1990          Identifier: begin-gen
1990           Identifier: expr: 'regExp'
1990         <-Value: expr: 'regExp'
1990          Identifier: end-gen
1990         Value: end-gen
1990         Value: begin-gen
1990          Constant: begin-gen
1990           Constant: ctype: 'String' -> ''
1990           Constant: expr: 'u""'
1990         <-Value: expr: 'u""'
1990          Constant: end-gen
1990         Value: end-gen
1990         FunctionCall: expr: 'replace(regExp, u"")'
1990        FunctionCall: end-gen
1990        Member: expr: 'str.replace(regExp, u"")'
1990      <-Value: expr: 'str.replace(regExp, u"")'
1990       Member: end-gen
1990      Value: end-gen
1990      InstructionUpdate: line: 'str = str.replace(regExp, u"")'
1990    <-Source: line: 'str = str.replace(regExp, u"")'
1990   <--Function: line: 'str = str.replace(regExp, u"")'
1990  <---Source: line: 'str = str.replace(regExp, u"")'
1990 <----Class: line: 'str = str.replace(regExp, u"")'
1990<-----Source: line: 'str = str.replace(regExp, u"")'
1991     InstructionUpdate: end-gen
1991     InstructionFlow: begin-gen
1991      Value: begin-gen
1991       Identifier: begin-gen
1991        Identifier: expr: 'str'
1991      <-Value: expr: 'str'
1991       Identifier: end-gen
1991      Value: end-gen
1991      InstructionFlow: line: 'return str'
1991    <-Source: line: 'return str'
1991   <--Function: line: 'return str'
1991  <---Source: line: 'return str'
1991 <----Class: line: 'return str'
1991<-----Source: line: 'return str'
1992     InstructionFlow: end-gen
1992    Source: end-gen
1992    Function: end: 'block-def-oficial_simplify'
1992  <-Source: end: 'block-def-oficial_simplify'
1992 <--Class: end: 'block-def-oficial_simplify'
1992<---Source: end: 'block-def-oficial_simplify'
1993   Function: end-gen
1993   Function: begin-gen
1993    Variable: begin-gen
1993     Variable: expr: 'str'
1993    Variable: end-gen
1993    Function: line: 'def oficial_escapeQuote(self, str = None):'
1993  <-Source: line: 'def oficial_escapeQuote(self, str = None):'
1993 <--Class: line: 'def oficial_escapeQuote(self, str = None):'
1993<---Source: line: 'def oficial_escapeQuote(self, str = None):'
1994    Function: begin: 'block-def-oficial_escapeQuote'
1994  <-Source: begin: 'block-def-oficial_escapeQuote'
1994 <--Class: begin: 'block-def-oficial_escapeQuote'
1994<---Source: begin: 'block-def-oficial_escapeQuote'
1994    Source: begin-gen
1994     DeclarationBlock: begin-gen
1994      Variable: begin-gen
1994       Variable: expr: 'regExp'
1994       Variable: expr: '='
1994       Value: begin-gen
1994        New: begin-gen
1994         FunctionCall: begin-gen
1994          Value: begin-gen
1994           Constant: begin-gen
1994            Constant: ctype: 'String' -> "'"
1994            Constant: expr: 'u"\'"'
1994          <-Value: expr: 'u"\'"'
1994           Constant: end-gen
1994          Value: end-gen
1994          FunctionCall: expr: 'RegExp(u"\'")'
1994        <-New: expr: 'qsatype.RegExp(u"\'")'
1994       <--Value: expr: 'qsatype.RegExp(u"\'")'
1994      <---Variable: expr: 'qsatype.RegExp(u"\'")'
1994         FunctionCall: end-gen
1994        New: end-gen
1994       Value: end-gen
1994      Variable: end-gen
1994      DeclarationBlock: line: 'regExp = qsatype.RegExp(u"\'")'
1994    <-Source: line: 'regExp = qsatype.RegExp(u"\'")'
1994   <--Function: line: 'regExp = qsatype.RegExp(u"\'")'
1994  <---Source: line: 'regExp = qsatype.RegExp(u"\'")'
1994 <----Class: line: 'regExp = qsatype.RegExp(u"\'")'
1994<-----Source: line: 'regExp = qsatype.RegExp(u"\'")'
1995     DeclarationBlock: end-gen
1995     InstructionUpdate: begin-gen
1995      Member: begin-gen
1995       Identifier: begin-gen
1995        Identifier: expr: 'regExp'
1995       Identifier: end-gen
1995       Identifier: begin-gen
1995        Identifier: expr: 'global_'
1995       Identifier: end-gen
1995       Member: expr: 'regExp.global_'
1995      Member: end-gen
1995      OpUpdate: begin-gen
1995       OpUpdate: expr: '='
1995      OpUpdate: end-gen
1995      Value: begin-gen
1995       Identifier: begin-gen
1995        Identifier: expr: 'True'
1995      <-Value: expr: 'True'
1995       Identifier: end-gen
1995      Value: end-gen
1995      InstructionUpdate: line: 'regExp.global_ = True'
1995    <-Source: line: 'regExp.global_ = True'
1995   <--Function: line: 'regExp.global_ = True'
1995  <---Source: line: 'regExp.global_ = True'
1995 <----Class: line: 'regExp.global_ = True'
1995<-----Source: line: 'regExp.global_ = True'
1996     InstructionUpdate: end-gen
1996     InstructionUpdate: begin-gen
1996      Identifier: begin-gen
1996       Identifier: expr: 'str'
1996      Identifier: end-gen
1996      OpUpdate: begin-gen
1996       OpUpdate: expr: '='
1996      OpUpdate: end-gen
1996      Value: begin-gen
1996       Member: begin-gen
1996        Identifier: begin-gen
1996         Identifier: expr: 'str'
1996        Identifier: end-gen
1996        FunctionCall: begin-gen
1996         Value: begin-gen
1996          Identifier: begin-gen
1996           Identifier: expr: 'regExp'
1996         <-Value: expr: 'regExp'
1996          Identifier: end-gen
1996         Value: end-gen
1996         Value: begin-gen
1996          Constant: begin-gen
1996           Constant: ctype: 'String' -> "''"
1996           Constant: expr: 'u"\'\'"'
1996         <-Value: expr: 'u"\'\'"'
1996          Constant: end-gen
1996         Value: end-gen
1996         FunctionCall: expr: 'replace(regExp, u"\'\'")'
1996        FunctionCall: end-gen
1996        Member: expr: 'str.replace(regExp, u"\'\'")'
1996      <-Value: expr: 'str.replace(regExp, u"\'\'")'
1996       Member: end-gen
1996      Value: end-gen
1996      InstructionUpdate: line: 'str = str.replace(regExp, u"\'\'")'
1996    <-Source: line: 'str = str.replace(regExp, u"\'\'")'
1996   <--Function: line: 'str = str.replace(regExp, u"\'\'")'
1996  <---Source: line: 'str = str.replace(regExp, u"\'\'")'
1996 <----Class: line: 'str = str.replace(regExp, u"\'\'")'
1996<-----Source: line: 'str = str.replace(regExp, u"\'\'")'
1997     InstructionUpdate: end-gen
1997     InstructionFlow: begin-gen
1997      Value: begin-gen
1997       Identifier: begin-gen
1997        Identifier: expr: 'str'
1997      <-Value: expr: 'str'
1997       Identifier: end-gen
1997      Value: end-gen
1997      InstructionFlow: line: 'return str'
1997    <-Source: line: 'return str'
1997   <--Function: line: 'return str'
1997  <---Source: line: 'return str'
1997 <----Class: line: 'return str'
1997<-----Source: line: 'return str'
1998     InstructionFlow: end-gen
1998    Source: end-gen
1998    Function: end: 'block-def-oficial_escapeQuote'
1998  <-Source: end: 'block-def-oficial_escapeQuote'
1998 <--Class: end: 'block-def-oficial_escapeQuote'
1998<---Source: end: 'block-def-oficial_escapeQuote'
1999   Function: end-gen
1999   Function: begin-gen
1999    Variable: begin-gen
1999     Variable: expr: 'cuenta'
1999    Variable: end-gen
1999    Variable: begin-gen
1999     Variable: expr: 'codPais'
1999    Variable: end-gen
1999    Function: line: 'def oficial_calcularIBAN(self, cuenta = None, codPais = None):'
1999  <-Source: line: 'def oficial_calcularIBAN(self, cuenta = None, codPais = None):'
1999 <--Class: line: 'def oficial_calcularIBAN(self, cuenta = None, codPais = None):'
1999<---Source: line: 'def oficial_calcularIBAN(self, cuenta = None, codPais = None):'
2000    Function: begin: 'block-def-oficial_calcularIBAN'
2000  <-Source: begin: 'block-def-oficial_calcularIBAN'
2000 <--Class: begin: 'block-def-oficial_calcularIBAN'
2000<---Source: begin: 'block-def-oficial_calcularIBAN'
2000    Source: begin-gen
2000     DeclarationBlock: begin-gen
2000      Variable: begin-gen
2000       Variable: expr: '_i'
2000       Variable: expr: '='
2000       Value: begin-gen
2000        Member: begin-gen
2000         Identifier: begin-gen
2000          Identifier: expr: 'self'
2000         Identifier: end-gen
2000         Identifier: begin-gen
2000          Identifier: expr: 'iface'
2000         Identifier: end-gen
2000         Member: expr: 'self.iface'
2000       <-Value: expr: 'self.iface'
2000      <--Variable: expr: 'self.iface'
2000        Member: end-gen
2000       Value: end-gen
2000      Variable: end-gen
2000      DeclarationBlock: line: '_i = self.iface'
2000    <-Source: line: '_i = self.iface'
2000   <--Function: line: '_i = self.iface'
2000  <---Source: line: '_i = self.iface'
2000 <----Class: line: '_i = self.iface'
2000<-----Source: line: '_i = self.iface'
2001     DeclarationBlock: end-gen
2001     DeclarationBlock: begin-gen
2001      Variable: begin-gen
2001       Variable: expr: 'IBAN'
2001       Variable: expr: '='
2001       Value: begin-gen
2001        Constant: begin-gen
2001         Constant: ctype: 'String' -> ''
2001         Constant: expr: 'u""'
2001       <-Value: expr: 'u""'
2001      <--Variable: expr: 'u""'
2001        Constant: end-gen
2001       Value: end-gen
2001      Variable: end-gen
2001      DeclarationBlock: line: 'IBAN = u""'
2001    <-Source: line: 'IBAN = u""'
2001   <--Function: line: 'IBAN = u""'
2001  <---Source: line: 'IBAN = u""'
2001 <----Class: line: 'IBAN = u""'
2001<-----Source: line: 'IBAN = u""'
2002     DeclarationBlock: end-gen
2002     If: begin-gen
2002      Expression: begin-gen
2002       OpUnary: begin-gen
2002        OpUnary: expr: 'not'
2002      <-Expression: expr: 'not'
2002        Identifier: begin-gen
2002         Identifier: expr: 'cuenta'
2002       <-OpUnary: expr: 'cuenta'
2002      <--Expression: expr: 'cuenta'
2002        Identifier: end-gen
2002       OpUnary: end-gen
2002       Compare: begin-gen
2002        Compare: expr: 'or'
2002      <-Expression: expr: 'or'
2002       Compare: end-gen
2002       Identifier: begin-gen
2002        Identifier: expr: 'cuenta'
2002      <-Expression: expr: 'cuenta'
2002       Identifier: end-gen
2002       Compare: begin-gen
2002        Compare: expr: '=='
2002      <-Expression: expr: '=='
2002       Compare: end-gen
2002       Constant: begin-gen
2002        Constant: ctype: 'String' -> ''
2002        Constant: expr: 'u""'
2002      <-Expression: expr: 'u""'
2002       Constant: end-gen
2002      Expression: end-gen
2002      If: line: 'if not cuenta or cuenta == u"":'
2002    <-Source: line: 'if not cuenta or cuenta == u"":'
2002   <--Function: line: 'if not cuenta or cuenta == u"":'
2002  <---Source: line: 'if not cuenta or cuenta == u"":'
2002 <----Class: line: 'if not cuenta or cuenta == u"":'
2002<-----Source: line: 'if not cuenta or cuenta == u"":'
2003      If: begin: 'block-if'
2003    <-Source: begin: 'block-if'
2003   <--Function: begin: 'block-if'
2003  <---Source: begin: 'block-if'
2003 <----Class: begin: 'block-if'
2003<-----Source: begin: 'block-if'
2003      Source: begin-gen
2003       InstructionFlow: begin-gen
2003        Value: begin-gen
2003         Constant: begin-gen
2003          Constant: ctype: 'String' -> ''
2003          Constant: expr: 'u""'
2003        <-Value: expr: 'u""'
2003         Constant: end-gen
2003        Value: end-gen
2003        InstructionFlow: line: 'return u""'
2003      <-Source: line: 'return u""'
2003     <--If: line: 'return u""'
2003    <---Source: line: 'return u""'
2003   <----Function: line: 'return u""'
2003  <-----Source: line: 'return u""'
2003 <------Class: line: 'return u""'
2003<-------Source: line: 'return u""'
2004       InstructionFlow: end-gen
2004      Source: end-gen
2004      If: end: 'block-if'
2004    <-Source: end: 'block-if'
2004   <--Function: end: 'block-if'
2004  <---Source: end: 'block-if'
2004 <----Class: end: 'block-if'
2004<-----Source: end: 'block-if'
2004     If: end-gen
2004     DeclarationBlock: begin-gen
2004      Variable: begin-gen
2004       Variable: expr: 'codIso'
2004       Variable: expr: '='
2004       Variable: expr: 'None'
2004      Variable: end-gen
2004      DeclarationBlock: line: 'codIso = None'
2004    <-Source: line: 'codIso = None'
2004   <--Function: line: 'codIso = None'
2004  <---Source: line: 'codIso = None'
2004 <----Class: line: 'codIso = None'
2004<-----Source: line: 'codIso = None'
2005     DeclarationBlock: end-gen
2005     If: begin-gen
2005      Expression: begin-gen
2005       Identifier: begin-gen
2005        Identifier: expr: 'codPais'
2005      <-Expression: expr: 'codPais'
2005       Identifier: end-gen
2005       Compare: begin-gen
2005        Compare: expr: 'and'
2005      <-Expression: expr: 'and'
2005       Compare: end-gen
2005       Identifier: begin-gen
2005        Identifier: expr: 'codPais'
2005      <-Expression: expr: 'codPais'
2005       Identifier: end-gen
2005       Compare: begin-gen
2005        Compare: expr: '!='
2005      <-Expression: expr: '!='
2005       Compare: end-gen
2005       Constant: begin-gen
2005        Constant: ctype: 'String' -> ''
2005        Constant: expr: 'u""'
2005      <-Expression: expr: 'u""'
2005       Constant: end-gen
2005      Expression: end-gen
2005      If: line: 'if codPais and codPais != u"":'
2005    <-Source: line: 'if codPais and codPais != u"":'
2005   <--Function: line: 'if codPais and codPais != u"":'
2005  <---Source: line: 'if codPais and codPais != u"":'
2005 <----Class: line: 'if codPais and codPais != u"":'
2005<-----Source: line: 'if codPais and codPais != u"":'
2006      If: begin: 'block-if'
2006    <-Source: begin: 'block-if'
2006   <--Function: begin: 'block-if'
2006  <---Source: begin: 'block-if'
2006 <----Class: begin: 'block-if'
2006<-----Source: begin: 'block-if'
2006      Source: begin-gen
2006       InstructionUpdate: begin-gen
2006        Identifier: begin-gen
2006         Identifier: expr: 'codIso'
2006        Identifier: end-gen
2006        OpUpdate: begin-gen
2006         OpUpdate: expr: '='
2006        OpUpdate: end-gen
2006        Value: begin-gen
2006         Member: begin-gen
2006          Identifier: begin-gen
2006           Identifier: expr: 'AQUtil'
2006          Identifier: end-gen
2006          FunctionCall: begin-gen
2006           Value: begin-gen
2006            Constant: begin-gen
2006             Constant: ctype: 'String' -> 'paises'
2006             Constant: expr: 'u"paises"'
2006           <-Value: expr: 'u"paises"'
2006            Constant: end-gen
2006           Value: end-gen
2006           Value: begin-gen
2006            Constant: begin-gen
2006             Constant: ctype: 'String' -> 'codiso'
2006             Constant: expr: 'u"codiso"'
2006           <-Value: expr: 'u"codiso"'
2006            Constant: end-gen
2006           Value: end-gen
2006           Expression: begin-gen
2006            Expression: expr: 'ustr('
2006            Constant: begin-gen
2006             Constant: ctype: 'String' -> "codpais = '"
2006             Constant: expr: 'u"codpais = \'"'
2006           <-Expression: expr: 'u"codpais = \'"'
2006            Constant: end-gen
2006            Expression: expr: ','
2006            Identifier: begin-gen
2006             Identifier: expr: 'codPais'
2006           <-Expression: expr: 'codPais'
2006            Identifier: end-gen
2006            Expression: expr: ','
2006            Constant: begin-gen
2006             Constant: ctype: 'String' -> "'"
2006             Constant: expr: 'u"\'"'
2006           <-Expression: expr: 'u"\'"'
2006            Constant: end-gen
2006            Expression: expr: ')'
2006           Expression: end-gen
2006           FunctionCall: expr: 'sqlSelect(u"paises", u"codiso", ustr( u"codpais = \'" , codPais , u"\'" ))'
2006          FunctionCall: end-gen
2006          Member: expr: 'AQUtil.sqlSelect(u"paises", u"codiso", ustr( u"codpais = \'" , codPais , u"\'" ))'
2006        <-Value: expr: 'AQUtil.sqlSelect(u"paises", u"codiso", ustr( u"codpais = \'" , codPais , u"\'" ))'
2006         Member: end-gen
2006        Value: end-gen
2006        InstructionUpdate: line: 'codIso = AQUtil.sqlSelect(u"paises", u"codiso", ustr( u"codpais = \'" , codPais , u"\'" ))'
2006      <-Source: line: 'codIso = AQUtil.sqlSelect(u"paises", u"codiso", ustr( u"codpais = \'" , codPais , u"\'" ))'
2006     <--If: line: 'codIso = AQUtil.sqlSelect(u"paises", u"codiso", ustr( u"codpais = \'" , codPais , u"\'" ))'
2006    <---Source: line: 'codIso = AQUtil.sqlSelect(u"paises", u"codiso", ustr( u"codpais = \'" , codPais , u"\'" ))'
2006   <----Function: line: 'codIso = AQUtil.sqlSelect(u"paises", u"codiso", ustr( u"codpais = \'" , codPais , u"\'" ))'
2006  <-----Source: line: 'codIso = AQUtil.sqlSelect(u"paises", u"codiso", ustr( u"codpais = \'" , codPais , u"\'" ))'
2006 <------Class: line: 'codIso = AQUtil.sqlSelect(u"paises", u"codiso", ustr( u"codpais = \'" , codPais , u"\'" ))'
2006<-------Source: line: 'codIso = AQUtil.sqlSelect(u"paises", u"codiso", ustr( u"codpais = \'" , codPais , u"\'" ))'
2007       InstructionUpdate: end-gen
2007       InstructionUpdate: begin-gen
2007        Identifier: begin-gen
2007         Identifier: expr: 'codIso'
2007        Identifier: end-gen
2007        OpUpdate: begin-gen
2007         OpUpdate: expr: '='
2007        OpUpdate: end-gen
2007        Value: begin-gen
2007         OpTernary: begin-gen
2007          OpTernary: expr: '('
2007        <-Value: expr: '('
2007          Constant: begin-gen
2007           Constant: ctype: 'String' -> 'ES'
2007           Constant: expr: 'u"ES"'
2007         <-OpTernary: expr: 'u"ES"'
2007        <--Value: expr: 'u"ES"'
2007          Constant: end-gen
2007          OpTernary: expr: 'if'
2007        <-Value: expr: 'if'
2007          Parentheses: begin-gen
2007           Parentheses: expr: '('
2007         <-OpTernary: expr: '('
2007        <--Value: expr: '('
2007           OpUnary: begin-gen
2007            OpUnary: expr: 'not'
2007          <-Parentheses: expr: 'not'
2007         <--OpTernary: expr: 'not'
2007        <---Value: expr: 'not'
2007            Identifier: begin-gen
2007             Identifier: expr: 'codIso'
2007           <-OpUnary: expr: 'codIso'
2007          <--Parentheses: expr: 'codIso'
2007         <---OpTernary: expr: 'codIso'
2007        <----Value: expr: 'codIso'
2007            Identifier: end-gen
2007           OpUnary: end-gen
2007           Compare: begin-gen
2007            Compare: expr: 'or'
2007          <-Parentheses: expr: 'or'
2007         <--OpTernary: expr: 'or'
2007        <---Value: expr: 'or'
2007           Compare: end-gen
2007           Identifier: begin-gen
2007            Identifier: expr: 'codIso'
2007          <-Parentheses: expr: 'codIso'
2007         <--OpTernary: expr: 'codIso'
2007        <---Value: expr: 'codIso'
2007           Identifier: end-gen
2007           Compare: begin-gen
2007            Compare: expr: '=='
2007          <-Parentheses: expr: '=='
2007         <--OpTernary: expr: '=='
2007        <---Value: expr: '=='
2007           Compare: end-gen
2007           Constant: begin-gen
2007            Constant: ctype: 'String' -> ''
2007            Constant: expr: 'u""'
2007          <-Parentheses: expr: 'u""'
2007         <--OpTernary: expr: 'u""'
2007        <---Value: expr: 'u""'
2007           Constant: end-gen
2007           Parentheses: expr: ')'
2007         <-OpTernary: expr: ')'
2007        <--Value: expr: ')'
2007          Parentheses: end-gen
2007          OpTernary: expr: 'else'
2007        <-Value: expr: 'else'
2007          Identifier: begin-gen
2007           Identifier: expr: 'codIso'
2007         <-OpTernary: expr: 'codIso'
2007        <--Value: expr: 'codIso'
2007          Identifier: end-gen
2007          OpTernary: expr: ')'
2007        <-Value: expr: ')'
2007         OpTernary: end-gen
2007        Value: end-gen
2007        InstructionUpdate: line: 'codIso = ( u"ES" if ( not codIso or codIso == u"" ) else codIso )'
2007      <-Source: line: 'codIso = ( u"ES" if ( not codIso or codIso == u"" ) else codIso )'
2007     <--If: line: 'codIso = ( u"ES" if ( not codIso or codIso == u"" ) else codIso )'
2007    <---Source: line: 'codIso = ( u"ES" if ( not codIso or codIso == u"" ) else codIso )'
2007   <----Function: line: 'codIso = ( u"ES" if ( not codIso or codIso == u"" ) else codIso )'
2007  <-----Source: line: 'codIso = ( u"ES" if ( not codIso or codIso == u"" ) else codIso )'
2007 <------Class: line: 'codIso = ( u"ES" if ( not codIso or codIso == u"" ) else codIso )'
2007<-------Source: line: 'codIso = ( u"ES" if ( not codIso or codIso == u"" ) else codIso )'
2008       InstructionUpdate: end-gen
2008      Source: end-gen
2008      If: end: 'block-if'
2008    <-Source: end: 'block-if'
2008   <--Function: end: 'block-if'
2008  <---Source: end: 'block-if'
2008 <----Class: end: 'block-if'
2008<-----Source: end: 'block-if'
2008      If: line: 'else:'
2008    <-Source: line: 'else:'
2008   <--Function: line: 'else:'
2008  <---Source: line: 'else:'
2008 <----Class: line: 'else:'
2008<-----Source: line: 'else:'
2009      If: begin: 'block-else'
2009    <-Source: begin: 'block-else'
2009   <--Function: begin: 'block-else'
2009  <---Source: begin: 'block-else'
2009 <----Class: begin: 'block-else'
2009<-----Source: begin: 'block-else'
2009      Source: begin-gen
2009       InstructionUpdate: begin-gen
2009        Identifier: begin-gen
2009         Identifier: expr: 'codIso'
2009        Identifier: end-gen
2009        OpUpdate: begin-gen
2009         OpUpdate: expr: '='
2009        OpUpdate: end-gen
2009        Value: begin-gen
2009         Constant: begin-gen
2009          Constant: ctype: 'String' -> 'ES'
2009          Constant: expr: 'u"ES"'
2009        <-Value: expr: 'u"ES"'
2009         Constant: end-gen
2009        Value: end-gen
2009        InstructionUpdate: line: 'codIso = u"ES"'
2009      <-Source: line: 'codIso = u"ES"'
2009     <--If: line: 'codIso = u"ES"'
2009    <---Source: line: 'codIso = u"ES"'
2009   <----Function: line: 'codIso = u"ES"'
2009  <-----Source: line: 'codIso = u"ES"'
2009 <------Class: line: 'codIso = u"ES"'
2009<-------Source: line: 'codIso = u"ES"'
2010       InstructionUpdate: end-gen
2010      Source: end-gen
2010      If: end: 'block-else'
2010    <-Source: end: 'block-else'
2010   <--Function: end: 'block-else'
2010  <---Source: end: 'block-else'
2010 <----Class: end: 'block-else'
2010<-----Source: end: 'block-else'
2011     If: end-gen
2011     DeclarationBlock: begin-gen
2011      Variable: begin-gen
2011       Variable: expr: 'digControl'
2011       Variable: expr: '='
2011       Value: begin-gen
2011        Member: begin-gen
2011         Identifier: begin-gen
2011          Identifier: expr: '_i'
2011         Identifier: end-gen
2011         FunctionCall: begin-gen
2011          Value: begin-gen
2011           Identifier: begin-gen
2011            Identifier: expr: 'cuenta'
2011          <-Value: expr: 'cuenta'
2011           Identifier: end-gen
2011          Value: end-gen
2011          Value: begin-gen
2011           Identifier: begin-gen
2011            Identifier: expr: 'codIso'
2011          <-Value: expr: 'codIso'
2011           Identifier: end-gen
2011          Value: end-gen
2011          FunctionCall: expr: 'digitoControlMod97(cuenta, codIso)'
2011         FunctionCall: end-gen
2011         Member: expr: '_i.digitoControlMod97(cuenta, codIso)'
2011       <-Value: expr: '_i.digitoControlMod97(cuenta, codIso)'
2011      <--Variable: expr: '_i.digitoControlMod97(cuenta, codIso)'
2011        Member: end-gen
2011       Value: end-gen
2011      Variable: end-gen
2011      DeclarationBlock: line: 'digControl = _i.digitoControlMod97(cuenta, codIso)'
2011    <-Source: line: 'digControl = _i.digitoControlMod97(cuenta, codIso)'
2011   <--Function: line: 'digControl = _i.digitoControlMod97(cuenta, codIso)'
2011  <---Source: line: 'digControl = _i.digitoControlMod97(cuenta, codIso)'
2011 <----Class: line: 'digControl = _i.digitoControlMod97(cuenta, codIso)'
2011<-----Source: line: 'digControl = _i.digitoControlMod97(cuenta, codIso)'
2012     DeclarationBlock: end-gen
2012     InstructionUpdate: begin-gen
2012      Identifier: begin-gen
2012       Identifier: expr: 'IBAN'
2012      Identifier: end-gen
2012      OpUpdate: begin-gen
2012       OpUpdate: expr: '+='
2012      OpUpdate: end-gen
2012      Expression: begin-gen
2012       Identifier: begin-gen
2012        Identifier: expr: 'codIso'
2012      <-Expression: expr: 'codIso'
2012       Identifier: end-gen
2012       OpMath: begin-gen
2012        OpMath: expr: '+'
2012      <-Expression: expr: '+'
2012       OpMath: end-gen
2012       Identifier: begin-gen
2012        Identifier: expr: 'digControl'
2012      <-Expression: expr: 'digControl'
2012       Identifier: end-gen
2012       OpMath: begin-gen
2012        OpMath: expr: '+'
2012      <-Expression: expr: '+'
2012       OpMath: end-gen
2012       Identifier: begin-gen
2012        Identifier: expr: 'cuenta'
2012      <-Expression: expr: 'cuenta'
2012       Identifier: end-gen
2012      Expression: end-gen
2012      InstructionUpdate: line: 'IBAN += codIso + digControl + cuenta'
2012    <-Source: line: 'IBAN += codIso + digControl + cuenta'
2012   <--Function: line: 'IBAN += codIso + digControl + cuenta'
2012  <---Source: line: 'IBAN += codIso + digControl + cuenta'
2012 <----Class: line: 'IBAN += codIso + digControl + cuenta'
2012<-----Source: line: 'IBAN += codIso + digControl + cuenta'
2013     InstructionUpdate: end-gen
2013     InstructionFlow: begin-gen
2013      Value: begin-gen
2013       Identifier: begin-gen
2013        Identifier: expr: 'IBAN'
2013      <-Value: expr: 'IBAN'
2013       Identifier: end-gen
2013      Value: end-gen
2013      InstructionFlow: line: 'return IBAN'
2013    <-Source: line: 'return IBAN'
2013   <--Function: line: 'return IBAN'
2013  <---Source: line: 'return IBAN'
2013 <----Class: line: 'return IBAN'
2013<-----Source: line: 'return IBAN'
2014     InstructionFlow: end-gen
2014    Source: end-gen
2014    Function: end: 'block-def-oficial_calcularIBAN'
2014  <-Source: end: 'block-def-oficial_calcularIBAN'
2014 <--Class: end: 'block-def-oficial_calcularIBAN'
2014<---Source: end: 'block-def-oficial_calcularIBAN'
2015   Function: end-gen
2015   Function: begin-gen
2015    Variable: begin-gen
2015     Variable: expr: 'num'
2015    Variable: end-gen
2015    Variable: begin-gen
2015     Variable: expr: 'div'
2015    Variable: end-gen
2015    Function: line: 'def oficial_moduloNumero(self, num = None, div = None):'
2015  <-Source: line: 'def oficial_moduloNumero(self, num = None, div = None):'
2015 <--Class: line: 'def oficial_moduloNumero(self, num = None, div = None):'
2015<---Source: line: 'def oficial_moduloNumero(self, num = None, div = None):'
2016    Function: begin: 'block-def-oficial_moduloNumero'
2016  <-Source: begin: 'block-def-oficial_moduloNumero'
2016 <--Class: begin: 'block-def-oficial_moduloNumero'
2016<---Source: begin: 'block-def-oficial_moduloNumero'
2016    Source: begin-gen
2016     DeclarationBlock: begin-gen
2016      Variable: begin-gen
2016       Variable: expr: 'd'
2016       Variable: expr: '='
2016       Variable: expr: 'None'
2016      Variable: end-gen
2016      DeclarationBlock: line: 'd = None'
2016    <-Source: line: 'd = None'
2016   <--Function: line: 'd = None'
2016  <---Source: line: 'd = None'
2016 <----Class: line: 'd = None'
2016<-----Source: line: 'd = None'
2017      Variable: begin-gen
2017       Variable: expr: 'i'
2017       Variable: expr: '='
2017       Value: begin-gen
2017        Constant: begin-gen
2017         Constant: ctype: 'Number' -> '0'
2017         Constant: expr: '0'
2017       <-Value: expr: '0'
2017      <--Variable: expr: '0'
2017        Constant: end-gen
2017       Value: end-gen
2017      Variable: end-gen
2017      DeclarationBlock: line: 'i = 0'
2017    <-Source: line: 'i = 0'
2017   <--Function: line: 'i = 0'
2017  <---Source: line: 'i = 0'
2017 <----Class: line: 'i = 0'
2017<-----Source: line: 'i = 0'
2018      Variable: begin-gen
2018       Variable: expr: 'a'
2018       Variable: expr: '='
2018       Value: begin-gen
2018        Constant: begin-gen
2018         Constant: ctype: 'Number' -> '1'
2018         Constant: expr: '1'
2018       <-Value: expr: '1'
2018      <--Variable: expr: '1'
2018        Constant: end-gen
2018       Value: end-gen
2018      Variable: end-gen
2018      DeclarationBlock: line: 'a = 1'
2018    <-Source: line: 'a = 1'
2018   <--Function: line: 'a = 1'
2018  <---Source: line: 'a = 1'
2018 <----Class: line: 'a = 1'
2018<-----Source: line: 'a = 1'
2019     DeclarationBlock: end-gen
2019     DeclarationBlock: begin-gen
2019      Variable: begin-gen
2019       Variable: expr: 'parcial'
2019       Variable: expr: '='
2019       Value: begin-gen
2019        Constant: begin-gen
2019         Constant: ctype: 'Number' -> '0'
2019         Constant: expr: '0'
2019       <-Value: expr: '0'
2019      <--Variable: expr: '0'
2019        Constant: end-gen
2019       Value: end-gen
2019      Variable: end-gen
2019      DeclarationBlock: line: 'parcial = 0'
2019    <-Source: line: 'parcial = 0'
2019   <--Function: line: 'parcial = 0'
2019  <---Source: line: 'parcial = 0'
2019 <----Class: line: 'parcial = 0'
2019<-----Source: line: 'parcial = 0'
2020     DeclarationBlock: end-gen
2020     For: begin-gen
2020      InstructionUpdate: begin-gen
2020       Identifier: begin-gen
2020        Identifier: expr: 'i'
2020       Identifier: end-gen
2020       OpUpdate: begin-gen
2020        OpUpdate: expr: '='
2020       OpUpdate: end-gen
2020       Expression: begin-gen
2020        Member: begin-gen
2020         Identifier: begin-gen
2020          Identifier: expr: 'num'
2020         Identifier: end-gen
2020         Identifier: begin-gen
2020          Identifier: expr: 'length'
2020         Identifier: end-gen
2020         Member: expr: 'len(num)'
2020       <-Expression: expr: 'len(num)'
2020        Member: end-gen
2020        OpMath: begin-gen
2020         OpMath: expr: '-'
2020       <-Expression: expr: '-'
2020        OpMath: end-gen
2020        Constant: begin-gen
2020         Constant: ctype: 'Number' -> '1'
2020         Constant: expr: '1'
2020       <-Expression: expr: '1'
2020        Constant: end-gen
2020       Expression: end-gen
2020       InstructionUpdate: line: 'i = len(num) - 1'
2020     <-For: line: 'i = len(num) - 1'
2020    <--Source: line: 'i = len(num) - 1'
2020   <---Function: line: 'i = len(num) - 1'
2020  <----Source: line: 'i = len(num) - 1'
2020 <-----Class: line: 'i = len(num) - 1'
2020<------Source: line: 'i = len(num) - 1'
2021      InstructionUpdate: end-gen
2021      For: line: 'while_pass = True'
2021    <-Source: line: 'while_pass = True'
2021   <--Function: line: 'while_pass = True'
2021  <---Source: line: 'while_pass = True'
2021 <----Class: line: 'while_pass = True'
2021<-----Source: line: 'while_pass = True'
2022      InlineUpdate: begin-gen
2022       Identifier: begin-gen
2022        Identifier: expr: 'i'
2022       Identifier: end-gen
2022       InlineUpdate: expr: 'i'
2022       InlineUpdate: line+1: 'i -= 1'
2022      InlineUpdate: end-gen
2022      Expression: begin-gen
2022       Identifier: begin-gen
2022        Identifier: expr: 'i'
2022      <-Expression: expr: 'i'
2022       Identifier: end-gen
2022       Compare: begin-gen
2022        Compare: expr: '>='
2022      <-Expression: expr: '>='
2022       Compare: end-gen
2022       Constant: begin-gen
2022        Constant: ctype: 'Number' -> '0'
2022        Constant: expr: '0'
2022      <-Expression: expr: '0'
2022       Constant: end-gen
2022      Expression: end-gen
2022      For: line: 'while i >= 0:'
2022    <-Source: line: 'while i >= 0:'
2022   <--Function: line: 'while i >= 0:'
2022  <---Source: line: 'while i >= 0:'
2022 <----Class: line: 'while i >= 0:'
2022<-----Source: line: 'while i >= 0:'
2023      For: begin: 'block-for'
2023    <-Source: begin: 'block-for'
2023   <--Function: begin: 'block-for'
2023  <---Source: begin: 'block-for'
2023 <----Class: begin: 'block-for'
2023<-----Source: begin: 'block-for'
2023      For: line: 'if not while_pass:'
2023    <-Source: line: 'if not while_pass:'
2023   <--Function: line: 'if not while_pass:'
2023  <---Source: line: 'if not while_pass:'
2023 <----Class: line: 'if not while_pass:'
2023<-----Source: line: 'if not while_pass:'
2024      For: begin: 'block-while_pass'
2024    <-Source: begin: 'block-while_pass'
2024   <--Function: begin: 'block-while_pass'
2024  <---Source: begin: 'block-while_pass'
2024 <----Class: begin: 'block-while_pass'
2024<-----Source: begin: 'block-while_pass'
2024      For: line: 'i -= 1'
2024    <-Source: line: 'i -= 1'
2024   <--Function: line: 'i -= 1'
2024  <---Source: line: 'i -= 1'
2024 <----Class: line: 'i -= 1'
2024<-----Source: line: 'i -= 1'
2025      For: line: 'while_pass = True'
2025    <-Source: line: 'while_pass = True'
2025   <--Function: line: 'while_pass = True'
2025  <---Source: line: 'while_pass = True'
2025 <----Class: line: 'while_pass = True'
2025<-----Source: line: 'while_pass = True'
2026      For: line: 'continue'
2026    <-Source: line: 'continue'
2026   <--Function: line: 'continue'
2026  <---Source: line: 'continue'
2026 <----Class: line: 'continue'
2026<-----Source: line: 'continue'
2027      For: end: 'block-while_pass'
2027    <-Source: end: 'block-while_pass'
2027   <--Function: end: 'block-while_pass'
2027  <---Source: end: 'block-while_pass'
2027 <----Class: end: 'block-while_pass'
2027<-----Source: end: 'block-while_pass'
2027      For: line: 'while_pass = False'
2027    <-Source: line: 'while_pass = False'
2027   <--Function: line: 'while_pass = False'
2027  <---Source: line: 'while_pass = False'
2027 <----Class: line: 'while_pass = False'
2027<-----Source: line: 'while_pass = False'
2028      Source: begin-gen
2028       InstructionUpdate: begin-gen
2028        Identifier: begin-gen
2028         Identifier: expr: 'd'
2028        Identifier: end-gen
2028        OpUpdate: begin-gen
2028         OpUpdate: expr: '='
2028        OpUpdate: end-gen
2028        Value: begin-gen
2028         FunctionCall: begin-gen
2028          Value: begin-gen
2028           Member: begin-gen
2028            Identifier: begin-gen
2028             Identifier: expr: 'num'
2028            Identifier: end-gen
2028            FunctionCall: begin-gen
2028             Value: begin-gen
2028              Identifier: begin-gen
2028               Identifier: expr: 'i'
2028             <-Value: expr: 'i'
2028              Identifier: end-gen
2028             Value: end-gen
2028             FunctionCall: expr: 'charAt(i)'
2028            FunctionCall: end-gen
2028            Member: expr: 'num[i]'
2028          <-Value: expr: 'num[i]'
2028           Member: end-gen
2028          Value: end-gen
2028          FunctionCall: expr: 'parseInt(num[i])'
2028        <-Value: expr: 'parseInt(num[i])'
2028         FunctionCall: end-gen
2028        Value: end-gen
2028        InstructionUpdate: line: 'd = parseInt(num[i])'
2028      <-Source: line: 'd = parseInt(num[i])'
2028     <--For: line: 'd = parseInt(num[i])'
2028    <---Source: line: 'd = parseInt(num[i])'
2028   <----Function: line: 'd = parseInt(num[i])'
2028  <-----Source: line: 'd = parseInt(num[i])'
2028 <------Class: line: 'd = parseInt(num[i])'
2028<-------Source: line: 'd = parseInt(num[i])'
2029       InstructionUpdate: end-gen
2029       InstructionUpdate: begin-gen
2029        Identifier: begin-gen
2029         Identifier: expr: 'parcial'
2029        Identifier: end-gen
2029        OpUpdate: begin-gen
2029         OpUpdate: expr: '+='
2029        OpUpdate: end-gen
2029        Value: begin-gen
2029         Parentheses: begin-gen
2029          Parentheses: expr: '('
2029        <-Value: expr: '('
2029          Identifier: begin-gen
2029           Identifier: expr: 'd'
2029         <-Parentheses: expr: 'd'
2029        <--Value: expr: 'd'
2029          Identifier: end-gen
2029          OpMath: begin-gen
2029           OpMath: expr: '*'
2029         <-Parentheses: expr: '*'
2029        <--Value: expr: '*'
2029          OpMath: end-gen
2029          Identifier: begin-gen
2029           Identifier: expr: 'a'
2029         <-Parentheses: expr: 'a'
2029        <--Value: expr: 'a'
2029          Identifier: end-gen
2029          Parentheses: expr: ')'
2029        <-Value: expr: ')'
2029         Parentheses: end-gen
2029        Value: end-gen
2029        InstructionUpdate: line: 'parcial += ( d * a )'
2029      <-Source: line: 'parcial += ( d * a )'
2029     <--For: line: 'parcial += ( d * a )'
2029    <---Source: line: 'parcial += ( d * a )'
2029   <----Function: line: 'parcial += ( d * a )'
2029  <-----Source: line: 'parcial += ( d * a )'
2029 <------Class: line: 'parcial += ( d * a )'
2029<-------Source: line: 'parcial += ( d * a )'
2030       InstructionUpdate: end-gen
2030       InstructionUpdate: begin-gen
2030        Identifier: begin-gen
2030         Identifier: expr: 'a'
2030        Identifier: end-gen
2030        OpUpdate: begin-gen
2030         OpUpdate: expr: '='
2030        OpUpdate: end-gen
2030        Expression: begin-gen
2030         Parentheses: begin-gen
2030          Parentheses: expr: '('
2030        <-Expression: expr: '('
2030          Identifier: begin-gen
2030           Identifier: expr: 'a'
2030         <-Parentheses: expr: 'a'
2030        <--Expression: expr: 'a'
2030          Identifier: end-gen
2030          OpMath: begin-gen
2030           OpMath: expr: '*'
2030         <-Parentheses: expr: '*'
2030        <--Expression: expr: '*'
2030          OpMath: end-gen
2030          Constant: begin-gen
2030           Constant: ctype: 'Number' -> '10'
2030           Constant: expr: '10'
2030         <-Parentheses: expr: '10'
2030        <--Expression: expr: '10'
2030          Constant: end-gen
2030          Parentheses: expr: ')'
2030        <-Expression: expr: ')'
2030         Parentheses: end-gen
2030         OpMath: begin-gen
2030          OpMath: expr: '%'
2030        <-Expression: expr: '%'
2030         OpMath: end-gen
2030         Identifier: begin-gen
2030          Identifier: expr: 'div'
2030        <-Expression: expr: 'div'
2030         Identifier: end-gen
2030        Expression: end-gen
2030        InstructionUpdate: line: 'a = ( a * 10 ) % div'
2030      <-Source: line: 'a = ( a * 10 ) % div'
2030     <--For: line: 'a = ( a * 10 ) % div'
2030    <---Source: line: 'a = ( a * 10 ) % div'
2030   <----Function: line: 'a = ( a * 10 ) % div'
2030  <-----Source: line: 'a = ( a * 10 ) % div'
2030 <------Class: line: 'a = ( a * 10 ) % div'
2030<-------Source: line: 'a = ( a * 10 ) % div'
2031       InstructionUpdate: end-gen
2031      Source: end-gen
2031      For: line: 'i -= 1'
2031    <-Source: line: 'i -= 1'
2031   <--Function: line: 'i -= 1'
2031  <---Source: line: 'i -= 1'
2031 <----Class: line: 'i -= 1'
2031<-----Source: line: 'i -= 1'
2032      For: line: 'while_pass = True'
2032    <-Source: line: 'while_pass = True'
2032   <--Function: line: 'while_pass = True'
2032  <---Source: line: 'while_pass = True'
2032 <----Class: line: 'while_pass = True'
2032<-----Source: line: 'while_pass = True'
2033      For: line: 'try:'
2033    <-Source: line: 'try:'
2033   <--Function: line: 'try:'
2033  <---Source: line: 'try:'
2033 <----Class: line: 'try:'
2033<-----Source: line: 'try:'
2034      For: begin: 'block-error-catch'
2034    <-Source: begin: 'block-error-catch'
2034   <--Function: begin: 'block-error-catch'
2034  <---Source: begin: 'block-error-catch'
2034 <----Class: begin: 'block-error-catch'
2034<-----Source: begin: 'block-error-catch'
2034      For: line: 'i >= 0'
2034    <-Source: line: 'i >= 0'
2034   <--Function: line: 'i >= 0'
2034  <---Source: line: 'i >= 0'
2034 <----Class: line: 'i >= 0'
2034<-----Source: line: 'i >= 0'
2035      For: end: 'block-error-catch'
2035    <-Source: end: 'block-error-catch'
2035   <--Function: end: 'block-error-catch'
2035  <---Source: end: 'block-error-catch'
2035 <----Class: end: 'block-error-catch'
2035<-----Source: end: 'block-error-catch'
2035      For: line: 'except: break'
2035    <-Source: line: 'except: break'
2035   <--Function: line: 'except: break'
2035  <---Source: line: 'except: break'
2035 <----Class: line: 'except: break'
2035<-----Source: line: 'except: break'
2036      For: end: 'block-for'
2036    <-Source: end: 'block-for'
2036   <--Function: end: 'block-for'
2036  <---Source: end: 'block-for'
2036 <----Class: end: 'block-for'
2036<-----Source: end: 'block-for'
2036     For: end-gen
2036     InstructionFlow: begin-gen
2036      Expression: begin-gen
2036       Identifier: begin-gen
2036        Identifier: expr: 'parcial'
2036      <-Expression: expr: 'parcial'
2036       Identifier: end-gen
2036       OpMath: begin-gen
2036        OpMath: expr: '%'
2036      <-Expression: expr: '%'
2036       OpMath: end-gen
2036       Identifier: begin-gen
2036        Identifier: expr: 'div'
2036      <-Expression: expr: 'div'
2036       Identifier: end-gen
2036      Expression: end-gen
2036      InstructionFlow: line: 'return parcial % div'
2036    <-Source: line: 'return parcial % div'
2036   <--Function: line: 'return parcial % div'
2036  <---Source: line: 'return parcial % div'
2036 <----Class: line: 'return parcial % div'
2036<-----Source: line: 'return parcial % div'
2038     InstructionFlow: end-gen
2038    Source: end-gen
2038    Function: end: 'block-def-oficial_moduloNumero'
2038  <-Source: end: 'block-def-oficial_moduloNumero'
2038 <--Class: end: 'block-def-oficial_moduloNumero'
2038<---Source: end: 'block-def-oficial_moduloNumero'
2039   Function: end-gen
2039   Function: begin-gen
2039    Variable: begin-gen
2039     Variable: expr: 'numero'
2039    Variable: end-gen
2039    Variable: begin-gen
2039     Variable: expr: 'codPais'
2039    Variable: end-gen
2039    Function: line: 'def oficial_digitoControlMod97(self, numero = None, codPais = None):'
2039  <-Source: line: 'def oficial_digitoControlMod97(self, numero = None, codPais = None):'
2039 <--Class: line: 'def oficial_digitoControlMod97(self, numero = None, codPais = None):'
2039<---Source: line: 'def oficial_digitoControlMod97(self, numero = None, codPais = None):'
2040    Function: begin: 'block-def-oficial_digitoControlMod97'
2040  <-Source: begin: 'block-def-oficial_digitoControlMod97'
2040 <--Class: begin: 'block-def-oficial_digitoControlMod97'
2040<---Source: begin: 'block-def-oficial_digitoControlMod97'
2040    Source: begin-gen
2040     DeclarationBlock: begin-gen
2040      Variable: begin-gen
2040       Variable: expr: '_i'
2040       Variable: expr: '='
2040       Value: begin-gen
2040        Member: begin-gen
2040         Identifier: begin-gen
2040          Identifier: expr: 'self'
2040         Identifier: end-gen
2040         Identifier: begin-gen
2040          Identifier: expr: 'iface'
2040         Identifier: end-gen
2040         Member: expr: 'self.iface'
2040       <-Value: expr: 'self.iface'
2040      <--Variable: expr: 'self.iface'
2040        Member: end-gen
2040       Value: end-gen
2040      Variable: end-gen
2040      DeclarationBlock: line: '_i = self.iface'
2040    <-Source: line: '_i = self.iface'
2040   <--Function: line: '_i = self.iface'
2040  <---Source: line: '_i = self.iface'
2040 <----Class: line: '_i = self.iface'
2040<-----Source: line: '_i = self.iface'
2041     DeclarationBlock: end-gen
2041     DeclarationBlock: begin-gen
2041      Variable: begin-gen
2041       Variable: expr: 'cadena'
2041       Variable: expr: '='
2041       Value: begin-gen
2041        Constant: begin-gen
2041         Constant: ctype: 'String' -> ''
2041         Constant: expr: 'u""'
2041       <-Value: expr: 'u""'
2041      <--Variable: expr: 'u""'
2041        Constant: end-gen
2041       Value: end-gen
2041      Variable: end-gen
2041      DeclarationBlock: line: 'cadena = u""'
2041    <-Source: line: 'cadena = u""'
2041   <--Function: line: 'cadena = u""'
2041  <---Source: line: 'cadena = u""'
2041 <----Class: line: 'cadena = u""'
2041<-----Source: line: 'cadena = u""'
2042     DeclarationBlock: end-gen
2042     InstructionUpdate: begin-gen
2042      Identifier: begin-gen
2042       Identifier: expr: 'cadena'
2042      Identifier: end-gen
2042      OpUpdate: begin-gen
2042       OpUpdate: expr: '+='
2042      OpUpdate: end-gen
2042      Expression: begin-gen
2042       Expression: expr: 'ustr('
2042       Member: begin-gen
2042        Identifier: begin-gen
2042         Identifier: expr: 'numero'
2042        Identifier: end-gen
2042        FunctionCall: begin-gen
2042         FunctionCall: expr: 'toString()'
2042        FunctionCall: end-gen
2042        Member: expr: 'parseString(numero)'
2042      <-Expression: expr: 'parseString(numero)'
2042       Member: end-gen
2042       Expression: expr: ','
2042       Member: begin-gen
2042        Identifier: begin-gen
2042         Identifier: expr: 'codPais'
2042        Identifier: end-gen
2042        FunctionCall: begin-gen
2042         FunctionCall: expr: 'toUpperCase()'
2042        FunctionCall: end-gen
2042        Member: expr: 'codPais.toUpperCase()'
2042      <-Expression: expr: 'codPais.toUpperCase()'
2042       Member: end-gen
2042       Expression: expr: ','
2042       Constant: begin-gen
2042        Constant: ctype: 'String' -> '00'
2042        Constant: expr: 'u"00"'
2042      <-Expression: expr: 'u"00"'
2042       Constant: end-gen
2042       Expression: expr: ')'
2042      Expression: end-gen
2042      InstructionUpdate: line: 'cadena += ustr( parseString(numero) , codPais.toUpperCase() , u"00" )'
2042    <-Source: line: 'cadena += ustr( parseString(numero) , codPais.toUpperCase() , u"00" )'
2042   <--Function: line: 'cadena += ustr( parseString(numero) , codPais.toUpperCase() , u"00" )'
2042  <---Source: line: 'cadena += ustr( parseString(numero) , codPais.toUpperCase() , u"00" )'
2042 <----Class: line: 'cadena += ustr( parseString(numero) , codPais.toUpperCase() , u"00" )'
2042<-----Source: line: 'cadena += ustr( parseString(numero) , codPais.toUpperCase() , u"00" )'
2043     InstructionUpdate: end-gen
2043     For: begin-gen
2043      Variable: begin-gen
2043       Variable: expr: 'i'
2043       Variable: expr: '='
2043       Value: begin-gen
2043        Constant: begin-gen
2043         Constant: ctype: 'Number' -> '0'
2043         Constant: expr: '0'
2043       <-Value: expr: '0'
2043      <--Variable: expr: '0'
2043        Constant: end-gen
2043       Value: end-gen
2043      Variable: end-gen
2043      For: line: 'i = 0'
2043    <-Source: line: 'i = 0'
2043   <--Function: line: 'i = 0'
2043  <---Source: line: 'i = 0'
2043 <----Class: line: 'i = 0'
2043<-----Source: line: 'i = 0'
2044      For: line: 'while_pass = True'
2044    <-Source: line: 'while_pass = True'
2044   <--Function: line: 'while_pass = True'
2044  <---Source: line: 'while_pass = True'
2044 <----Class: line: 'while_pass = True'
2044<-----Source: line: 'while_pass = True'
2045      InlineUpdate: begin-gen
2045       Identifier: begin-gen
2045        Identifier: expr: 'i'
2045       Identifier: end-gen
2045       InlineUpdate: expr: 'i'
2045       InlineUpdate: line+1: 'i += 1'
2045      InlineUpdate: end-gen
2045      Expression: begin-gen
2045       Identifier: begin-gen
2045        Identifier: expr: 'i'
2045      <-Expression: expr: 'i'
2045       Identifier: end-gen
2045       Compare: begin-gen
2045        Compare: expr: '<'
2045      <-Expression: expr: '<'
2045       Compare: end-gen
2045       Member: begin-gen
2045        Identifier: begin-gen
2045         Identifier: expr: 'cadena'
2045        Identifier: end-gen
2045        Identifier: begin-gen
2045         Identifier: expr: 'length'
2045        Identifier: end-gen
2045        Member: expr: 'len(cadena)'
2045      <-Expression: expr: 'len(cadena)'
2045       Member: end-gen
2045      Expression: end-gen
2045      For: line: 'while i < len(cadena):'
2045    <-Source: line: 'while i < len(cadena):'
2045   <--Function: line: 'while i < len(cadena):'
2045  <---Source: line: 'while i < len(cadena):'
2045 <----Class: line: 'while i < len(cadena):'
2045<-----Source: line: 'while i < len(cadena):'
2046      For: begin: 'block-for'
2046    <-Source: begin: 'block-for'
2046   <--Function: begin: 'block-for'
2046  <---Source: begin: 'block-for'
2046 <----Class: begin: 'block-for'
2046<-----Source: begin: 'block-for'
2046      For: line: 'if not while_pass:'
2046    <-Source: line: 'if not while_pass:'
2046   <--Function: line: 'if not while_pass:'
2046  <---Source: line: 'if not while_pass:'
2046 <----Class: line: 'if not while_pass:'
2046<-----Source: line: 'if not while_pass:'
2047      For: begin: 'block-while_pass'
2047    <-Source: begin: 'block-while_pass'
2047   <--Function: begin: 'block-while_pass'
2047  <---Source: begin: 'block-while_pass'
2047 <----Class: begin: 'block-while_pass'
2047<-----Source: begin: 'block-while_pass'
2047      For: line: 'i += 1'
2047    <-Source: line: 'i += 1'
2047   <--Function: line: 'i += 1'
2047  <---Source: line: 'i += 1'
2047 <----Class: line: 'i += 1'
2047<-----Source: line: 'i += 1'
2048      For: line: 'while_pass = True'
2048    <-Source: line: 'while_pass = True'
2048   <--Function: line: 'while_pass = True'
2048  <---Source: line: 'while_pass = True'
2048 <----Class: line: 'while_pass = True'
2048<-----Source: line: 'while_pass = True'
2049      For: line: 'continue'
2049    <-Source: line: 'continue'
2049   <--Function: line: 'continue'
2049  <---Source: line: 'continue'
2049 <----Class: line: 'continue'
2049<-----Source: line: 'continue'
2050      For: end: 'block-while_pass'
2050    <-Source: end: 'block-while_pass'
2050   <--Function: end: 'block-while_pass'
2050  <---Source: end: 'block-while_pass'
2050 <----Class: end: 'block-while_pass'
2050<-----Source: end: 'block-while_pass'
2050      For: line: 'while_pass = False'
2050    <-Source: line: 'while_pass = False'
2050   <--Function: line: 'while_pass = False'
2050  <---Source: line: 'while_pass = False'
2050 <----Class: line: 'while_pass = False'
2050<-----Source: line: 'while_pass = False'
2051      Source: begin-gen
2051       If: begin-gen
2051        Value: begin-gen
2051         FunctionCall: begin-gen
2051          Value: begin-gen
2051           Member: begin-gen
2051            Identifier: begin-gen
2051             Identifier: expr: 'cadena'
2051            Identifier: end-gen
2051            FunctionCall: begin-gen
2051             Value: begin-gen
2051              Identifier: begin-gen
2051               Identifier: expr: 'i'
2051             <-Value: expr: 'i'
2051              Identifier: end-gen
2051             Value: end-gen
2051             FunctionCall: expr: 'charAt(i)'
2051            FunctionCall: end-gen
2051            Member: expr: 'cadena[i]'
2051          <-Value: expr: 'cadena[i]'
2051           Member: end-gen
2051          Value: end-gen
2051          FunctionCall: expr: 'isNaN(cadena[i])'
2051        <-Value: expr: 'isNaN(cadena[i])'
2051         FunctionCall: end-gen
2051        Value: end-gen
2051        If: line: 'if isNaN(cadena[i]):'
2051      <-Source: line: 'if isNaN(cadena[i]):'
2051     <--For: line: 'if isNaN(cadena[i]):'
2051    <---Source: line: 'if isNaN(cadena[i]):'
2051   <----Function: line: 'if isNaN(cadena[i]):'
2051  <-----Source: line: 'if isNaN(cadena[i]):'
2051 <------Class: line: 'if isNaN(cadena[i]):'
2051<-------Source: line: 'if isNaN(cadena[i]):'
2052        If: begin: 'block-if'
2052      <-Source: begin: 'block-if'
2052     <--For: begin: 'block-if'
2052    <---Source: begin: 'block-if'
2052   <----Function: begin: 'block-if'
2052  <-----Source: begin: 'block-if'
2052 <------Class: begin: 'block-if'
2052<-------Source: begin: 'block-if'
2052        Source: begin-gen
2052         DeclarationBlock: begin-gen
2052          Variable: begin-gen
2052           Variable: expr: 'trans'
2052           Variable: expr: '='
2052           Expression: begin-gen
2052            Member: begin-gen
2052             Identifier: begin-gen
2052              Identifier: expr: 'cadena'
2052             Identifier: end-gen
2052             FunctionCall: begin-gen
2052              Value: begin-gen
2052               Identifier: begin-gen
2052                Identifier: expr: 'i'
2052              <-Value: expr: 'i'
2052               Identifier: end-gen
2052              Value: end-gen
2052              FunctionCall: expr: 'charCodeAt(i)'
2052             FunctionCall: end-gen
2052             Member: expr: 'cadena.charCodeAt(i)'
2052           <-Expression: expr: 'cadena.charCodeAt(i)'
2052          <--Variable: expr: 'cadena.charCodeAt(i)'
2052            Member: end-gen
2052            OpMath: begin-gen
2052             OpMath: expr: '-'
2052           <-Expression: expr: '-'
2052          <--Variable: expr: '-'
2052            OpMath: end-gen
2052            Constant: begin-gen
2052             Constant: ctype: 'Number' -> '55'
2052             Constant: expr: '55'
2052           <-Expression: expr: '55'
2052          <--Variable: expr: '55'
2052            Constant: end-gen
2052           Expression: end-gen
2052          Variable: end-gen
2052          DeclarationBlock: line: 'trans = cadena.charCodeAt(i) - 55'
2052        <-Source: line: 'trans = cadena.charCodeAt(i) - 55'
2052       <--If: line: 'trans = cadena.charCodeAt(i) - 55'
2052      <---Source: line: 'trans = cadena.charCodeAt(i) - 55'
2052     <----For: line: 'trans = cadena.charCodeAt(i) - 55'
2052    <-----Source: line: 'trans = cadena.charCodeAt(i) - 55'
2052   <------Function: line: 'trans = cadena.charCodeAt(i) - 55'
2052  <-------Source: line: 'trans = cadena.charCodeAt(i) - 55'
2052 <--------Class: line: 'trans = cadena.charCodeAt(i) - 55'
2052<---------Source: line: 'trans = cadena.charCodeAt(i) - 55'
2053         DeclarationBlock: end-gen
2053         InstructionUpdate: begin-gen
2053          Identifier: begin-gen
2053           Identifier: expr: 'cadena'
2053          Identifier: end-gen
2053          OpUpdate: begin-gen
2053           OpUpdate: expr: '='
2053          OpUpdate: end-gen
2053          Value: begin-gen
2053           Member: begin-gen
2053            Identifier: begin-gen
2053             Identifier: expr: 'cadena'
2053            Identifier: end-gen
2053            FunctionCall: begin-gen
2053             Value: begin-gen
2053              Member: begin-gen
2053               Identifier: begin-gen
2053                Identifier: expr: 'cadena'
2053               Identifier: end-gen
2053               FunctionCall: begin-gen
2053                Value: begin-gen
2053                 Identifier: begin-gen
2053                  Identifier: expr: 'i'
2053                <-Value: expr: 'i'
2053                 Identifier: end-gen
2053                Value: end-gen
2053                FunctionCall: expr: 'charAt(i)'
2053               FunctionCall: end-gen
2053               Member: expr: 'cadena[i]'
2053             <-Value: expr: 'cadena[i]'
2053              Member: end-gen
2053             Value: end-gen
2053             Value: begin-gen
2053              Identifier: begin-gen
2053               Identifier: expr: 'trans'
2053             <-Value: expr: 'trans'
2053              Identifier: end-gen
2053             Value: end-gen
2053             FunctionCall: expr: 'replace(cadena[i], trans)'
2053            FunctionCall: end-gen
2053            Member: expr: 'cadena.replace(cadena[i], trans)'
2053          <-Value: expr: 'cadena.replace(cadena[i], trans)'
2053           Member: end-gen
2053          Value: end-gen
2053          InstructionUpdate: line: 'cadena = cadena.replace(cadena[i], trans)'
2053        <-Source: line: 'cadena = cadena.replace(cadena[i], trans)'
2053       <--If: line: 'cadena = cadena.replace(cadena[i], trans)'
2053      <---Source: line: 'cadena = cadena.replace(cadena[i], trans)'
2053     <----For: line: 'cadena = cadena.replace(cadena[i], trans)'
2053    <-----Source: line: 'cadena = cadena.replace(cadena[i], trans)'
2053   <------Function: line: 'cadena = cadena.replace(cadena[i], trans)'
2053  <-------Source: line: 'cadena = cadena.replace(cadena[i], trans)'
2053 <--------Class: line: 'cadena = cadena.replace(cadena[i], trans)'
2053<---------Source: line: 'cadena = cadena.replace(cadena[i], trans)'
2054         InstructionUpdate: end-gen
2054        Source: end-gen
2054        If: end: 'block-if'
2054      <-Source: end: 'block-if'
2054     <--For: end: 'block-if'
2054    <---Source: end: 'block-if'
2054   <----Function: end: 'block-if'
2054  <-----Source: end: 'block-if'
2054 <------Class: end: 'block-if'
2054<-------Source: end: 'block-if'
2054       If: end-gen
2054      Source: end-gen
2054      For: line: 'i += 1'
2054    <-Source: line: 'i += 1'
2054   <--Function: line: 'i += 1'
2054  <---Source: line: 'i += 1'
2054 <----Class: line: 'i += 1'
2054<-----Source: line: 'i += 1'
2055      For: line: 'while_pass = True'
2055    <-Source: line: 'while_pass = True'
2055   <--Function: line: 'while_pass = True'
2055  <---Source: line: 'while_pass = True'
2055 <----Class: line: 'while_pass = True'
2055<-----Source: line: 'while_pass = True'
2056      For: line: 'try:'
2056    <-Source: line: 'try:'
2056   <--Function: line: 'try:'
2056  <---Source: line: 'try:'
2056 <----Class: line: 'try:'
2056<-----Source: line: 'try:'
2057      For: begin: 'block-error-catch'
2057    <-Source: begin: 'block-error-catch'
2057   <--Function: begin: 'block-error-catch'
2057  <---Source: begin: 'block-error-catch'
2057 <----Class: begin: 'block-error-catch'
2057<-----Source: begin: 'block-error-catch'
2057      For: line: 'i < len(cadena)'
2057    <-Source: line: 'i < len(cadena)'
2057   <--Function: line: 'i < len(cadena)'
2057  <---Source: line: 'i < len(cadena)'
2057 <----Class: line: 'i < len(cadena)'
2057<-----Source: line: 'i < len(cadena)'
2058      For: end: 'block-error-catch'
2058    <-Source: end: 'block-error-catch'
2058   <--Function: end: 'block-error-catch'
2058  <---Source: end: 'block-error-catch'
2058 <----Class: end: 'block-error-catch'
2058<-----Source: end: 'block-error-catch'
2058      For: line: 'except: break'
2058    <-Source: line: 'except: break'
2058   <--Function: line: 'except: break'
2058  <---Source: line: 'except: break'
2058 <----Class: line: 'except: break'
2058<-----Source: line: 'except: break'
2059      For: end: 'block-for'
2059    <-Source: end: 'block-for'
2059   <--Function: end: 'block-for'
2059  <---Source: end: 'block-for'
2059 <----Class: end: 'block-for'
2059<-----Source: end: 'block-for'
2059     For: end-gen
2059     DeclarationBlock: begin-gen
2059      Variable: begin-gen
2059       Variable: expr: 'digControl'
2059       Variable: expr: '='
2059       Value: begin-gen
2059        Member: begin-gen
2059         Identifier: begin-gen
2059          Identifier: expr: '_i'
2059         Identifier: end-gen
2059         FunctionCall: begin-gen
2059          Value: begin-gen
2059           Identifier: begin-gen
2059            Identifier: expr: 'cadena'
2059          <-Value: expr: 'cadena'
2059           Identifier: end-gen
2059          Value: end-gen
2059          Value: begin-gen
2059           Constant: begin-gen
2059            Constant: ctype: 'Number' -> '97'
2059            Constant: expr: '97'
2059          <-Value: expr: '97'
2059           Constant: end-gen
2059          Value: end-gen
2059          FunctionCall: expr: 'moduloNumero(cadena, 97)'
2059         FunctionCall: end-gen
2059         Member: expr: '_i.moduloNumero(cadena, 97)'
2059       <-Value: expr: '_i.moduloNumero(cadena, 97)'
2059      <--Variable: expr: '_i.moduloNumero(cadena, 97)'
2059        Member: end-gen
2059       Value: end-gen
2059      Variable: end-gen
2059      DeclarationBlock: line: 'digControl = _i.moduloNumero(cadena, 97)'
2059    <-Source: line: 'digControl = _i.moduloNumero(cadena, 97)'
2059   <--Function: line: 'digControl = _i.moduloNumero(cadena, 97)'
2059  <---Source: line: 'digControl = _i.moduloNumero(cadena, 97)'
2059 <----Class: line: 'digControl = _i.moduloNumero(cadena, 97)'
2059<-----Source: line: 'digControl = _i.moduloNumero(cadena, 97)'
2061     DeclarationBlock: end-gen
2061     InstructionUpdate: begin-gen
2061      Identifier: begin-gen
2061       Identifier: expr: 'digControl'
2061      Identifier: end-gen
2061      OpUpdate: begin-gen
2061       OpUpdate: expr: '='
2061      OpUpdate: end-gen
2061      Expression: begin-gen
2061       Constant: begin-gen
2061        Constant: ctype: 'Number' -> '98'
2061        Constant: expr: '98'
2061      <-Expression: expr: '98'
2061       Constant: end-gen
2061       OpMath: begin-gen
2061        OpMath: expr: '-'
2061      <-Expression: expr: '-'
2061       OpMath: end-gen
2061       Identifier: begin-gen
2061        Identifier: expr: 'digControl'
2061      <-Expression: expr: 'digControl'
2061       Identifier: end-gen
2061      Expression: end-gen
2061      InstructionUpdate: line: 'digControl = 98 - digControl'
2061    <-Source: line: 'digControl = 98 - digControl'
2061   <--Function: line: 'digControl = 98 - digControl'
2061  <---Source: line: 'digControl = 98 - digControl'
2061 <----Class: line: 'digControl = 98 - digControl'
2061<-----Source: line: 'digControl = 98 - digControl'
2062     InstructionUpdate: end-gen
2062     InstructionUpdate: begin-gen
2062      Identifier: begin-gen
2062       Identifier: expr: 'digControl'
2062      Identifier: end-gen
2062      OpUpdate: begin-gen
2062       OpUpdate: expr: '='
2062      OpUpdate: end-gen
2062      Value: begin-gen
2062       Member: begin-gen
2062        Identifier: begin-gen
2062         Identifier: expr: 'flfactppal'
2062        Identifier: end-gen
2062        Identifier: begin-gen
2062         Identifier: expr: 'iface'
2062        Identifier: end-gen
2062        FunctionCall: begin-gen
2062         Value: begin-gen
2062          Identifier: begin-gen
2062           Identifier: expr: 'digControl'
2062         <-Value: expr: 'digControl'
2062          Identifier: end-gen
2062         Value: end-gen
2062         Value: begin-gen
2062          Constant: begin-gen
2062           Constant: ctype: 'Number' -> '2'
2062           Constant: expr: '2'
2062         <-Value: expr: '2'
2062          Constant: end-gen
2062         Value: end-gen
2062         FunctionCall: expr: 'pub_cerosIzquierda(digControl, 2)'
2062        FunctionCall: end-gen
2062        Member: expr: 'flfactppal.iface.pub_cerosIzquierda(digControl, 2)'
2062      <-Value: expr: 'flfactppal.iface.pub_cerosIzquierda(digControl, 2)'
2062       Member: end-gen
2062      Value: end-gen
2062      InstructionUpdate: line: 'digControl = flfactppal.iface.pub_cerosIzquierda(digControl, 2)'
2062    <-Source: line: 'digControl = flfactppal.iface.pub_cerosIzquierda(digControl, 2)'
2062   <--Function: line: 'digControl = flfactppal.iface.pub_cerosIzquierda(digControl, 2)'
2062  <---Source: line: 'digControl = flfactppal.iface.pub_cerosIzquierda(digControl, 2)'
2062 <----Class: line: 'digControl = flfactppal.iface.pub_cerosIzquierda(digControl, 2)'
2062<-----Source: line: 'digControl = flfactppal.iface.pub_cerosIzquierda(digControl, 2)'
2063     InstructionUpdate: end-gen
2063     InstructionFlow: begin-gen
2063      Value: begin-gen
2063       Identifier: begin-gen
2063        Identifier: expr: 'digControl'
2063      <-Value: expr: 'digControl'
2063       Identifier: end-gen
2063      Value: end-gen
2063      InstructionFlow: line: 'return digControl'
2063    <-Source: line: 'return digControl'
2063   <--Function: line: 'return digControl'
2063  <---Source: line: 'return digControl'
2063 <----Class: line: 'return digControl'
2063<-----Source: line: 'return digControl'
2064     InstructionFlow: end-gen
2064    Source: end-gen
2064    Function: end: 'block-def-oficial_digitoControlMod97'
2064  <-Source: end: 'block-def-oficial_digitoControlMod97'
2064 <--Class: end: 'block-def-oficial_digitoControlMod97'
2064<---Source: end: 'block-def-oficial_digitoControlMod97'
2065   Function: end-gen
2065   Function: begin-gen
2065    Variable: begin-gen
2065     Variable: expr: 'cifEmpresa'
2065    Variable: end-gen
2065    Variable: begin-gen
2065     Variable: expr: 'codCuenta'
2065    Variable: end-gen
2065    Function: line: 'def oficial_calcularIdentificadorAcreedor(self, cifEmpresa = None, codCuenta = None):'
2065  <-Source: line: 'def oficial_calcularIdentificadorAcreedor(self, cifEmpresa = None, codCuenta = None):'
2065 <--Class: line: 'def oficial_calcularIdentificadorAcreedor(self, cifEmpresa = None, codCuenta = None):'
2065<---Source: line: 'def oficial_calcularIdentificadorAcreedor(self, cifEmpresa = None, codCuenta = None):'
2066    Function: begin: 'block-def-oficial_calcularIdentificadorAcreedor'
2066  <-Source: begin: 'block-def-oficial_calcularIdentificadorAcreedor'
2066 <--Class: begin: 'block-def-oficial_calcularIdentificadorAcreedor'
2066<---Source: begin: 'block-def-oficial_calcularIdentificadorAcreedor'
2066    Source: begin-gen
2066     DeclarationBlock: begin-gen
2066      Variable: begin-gen
2066       Variable: expr: '_i'
2066       Variable: expr: '='
2066       Value: begin-gen
2066        Member: begin-gen
2066         Identifier: begin-gen
2066          Identifier: expr: 'self'
2066         Identifier: end-gen
2066         Identifier: begin-gen
2066          Identifier: expr: 'iface'
2066         Identifier: end-gen
2066         Member: expr: 'self.iface'
2066       <-Value: expr: 'self.iface'
2066      <--Variable: expr: 'self.iface'
2066        Member: end-gen
2066       Value: end-gen
2066      Variable: end-gen
2066      DeclarationBlock: line: '_i = self.iface'
2066    <-Source: line: '_i = self.iface'
2066   <--Function: line: '_i = self.iface'
2066  <---Source: line: '_i = self.iface'
2066 <----Class: line: '_i = self.iface'
2066<-----Source: line: '_i = self.iface'
2067     DeclarationBlock: end-gen
2067     DeclarationBlock: begin-gen
2067      Variable: begin-gen
2067       Variable: expr: 'codPais'
2067       Variable: expr: '='
2067       Value: begin-gen
2067        Member: begin-gen
2067         Identifier: begin-gen
2067          Identifier: expr: 'AQUtil'
2067         Identifier: end-gen
2067         FunctionCall: begin-gen
2067          Value: begin-gen
2067           Constant: begin-gen
2067            Constant: ctype: 'String' -> 'empresa INNER JOIN paises ON empresa.codpais = paises.codpais'
2067            Constant: expr: 'u"empresa INNER JOIN paises ON empresa.codpais = paises.codpais"'
2067          <-Value: expr: 'u"empresa INNER JOIN paises ON empresa.codpais = paises.codpais"'
2067           Constant: end-gen
2067          Value: end-gen
2067          Value: begin-gen
2067           Constant: begin-gen
2067            Constant: ctype: 'String' -> 'paises.codiso'
2067            Constant: expr: 'u"paises.codiso"'
2067          <-Value: expr: 'u"paises.codiso"'
2067           Constant: end-gen
2067          Value: end-gen
2067          Expression: begin-gen
2067           Expression: expr: 'ustr('
2067           Constant: begin-gen
2067            Constant: ctype: 'String' -> "empresa.cifnif = '"
2067            Constant: expr: 'u"empresa.cifnif = \'"'
2067          <-Expression: expr: 'u"empresa.cifnif = \'"'
2067           Constant: end-gen
2067           Expression: expr: ','
2067           Identifier: begin-gen
2067            Identifier: expr: 'cifEmpresa'
2067          <-Expression: expr: 'cifEmpresa'
2067           Identifier: end-gen
2067           Expression: expr: ','
2067           Constant: begin-gen
2067            Constant: ctype: 'String' -> "'"
2067            Constant: expr: 'u"\'"'
2067          <-Expression: expr: 'u"\'"'
2067           Constant: end-gen
2067           Expression: expr: ')'
2067          Expression: end-gen
2067          Value: begin-gen
2067           Constant: begin-gen
2067            Constant: ctype: 'String' -> 'empresa,paises'
2067            Constant: expr: 'u"empresa,paises"'
2067          <-Value: expr: 'u"empresa,paises"'
2067           Constant: end-gen
2067          Value: end-gen
2067          FunctionCall: expr: 'sqlSelect(u"empresa INNER JOIN paises ON empresa.codpais = paises.codpais", u"paises.codiso", ustr( u"empresa.cifnif = \'" , cifEmpresa , u"\'" ), u"empresa,paises")'
2067         FunctionCall: end-gen
2067         Member: expr: 'AQUtil.sqlSelect(u"empresa INNER JOIN paises ON empresa.codpais = paises.codpais", u"paises.codiso", ustr( u"empresa.cifnif = \'" , cifEmpresa , u"\'" ), u"empresa,paises")'
2067       <-Value: expr: 'AQUtil.sqlSelect(u"empresa INNER JOIN paises ON empresa.codpais = paises.codpais", u"paises.codiso", ustr( u"empresa.cifnif = \'" , cifEmpresa , u"\'" ), u"empresa,paises")'
2067      <--Variable: expr: 'AQUtil.sqlSelect(u"empresa INNER JOIN paises ON empresa.codpais = paises.codpais", u"paises.codiso", ustr( u"empresa.cifnif = \'" , cifEmpresa , u"\'" ), u"empresa,paises")'
2067        Member: end-gen
2067       Value: end-gen
2067      Variable: end-gen
2067      DeclarationBlock: line: 'codPais = AQUtil.sqlSelect(u"empresa INNER JOIN paises ON empresa.codpais = paises.codpais", u"paises.codiso", ustr( u"empresa.cifnif = \'" , cifEmpresa , u"\'" ), u"empresa,paises")'
2067    <-Source: line: 'codPais = AQUtil.sqlSelect(u"empresa INNER JOIN paises ON empresa.codpais = paises.codpais", u"paises.codiso", ustr( u"empresa.cifnif = \'" , cifEmpresa , u"\'" ), u"empresa,paises")'
2067   <--Function: line: 'codPais = AQUtil.sqlSelect(u"empresa INNER JOIN paises ON empresa.codpais = paises.codpais", u"paises.codiso", ustr( u"empresa.cifnif = \'" , cifEmpresa , u"\'" ), u"empresa,paises")'
2067  <---Source: line: 'codPais = AQUtil.sqlSelect(u"empresa INNER JOIN paises ON empresa.codpais = paises.codpais", u"paises.codiso", ustr( u"empresa.cifnif = \'" , cifEmpresa , u"\'" ), u"empresa,paises")'
2067 <----Class: line: 'codPais = AQUtil.sqlSelect(u"empresa INNER JOIN paises ON empresa.codpais = paises.codpais", u"paises.codiso", ustr( u"empresa.cifnif = \'" , cifEmpresa , u"\'" ), u"empresa,paises")'
2067<-----Source: line: 'codPais = AQUtil.sqlSelect(u"empresa INNER JOIN paises ON empresa.codpais = paises.codpais", u"paises.codiso", ustr( u"empresa.cifnif = \'" , cifEmpresa , u"\'" ), u"empresa,paises")'
2068     DeclarationBlock: end-gen
2068     If: begin-gen
2068      Value: begin-gen
2068       OpUnary: begin-gen
2068        OpUnary: expr: 'not'
2068      <-Value: expr: 'not'
2068        Identifier: begin-gen
2068         Identifier: expr: 'codPais'
2068       <-OpUnary: expr: 'codPais'
2068      <--Value: expr: 'codPais'
2068        Identifier: end-gen
2068       OpUnary: end-gen
2068      Value: end-gen
2068      If: line: 'if not codPais:'
2068    <-Source: line: 'if not codPais:'
2068   <--Function: line: 'if not codPais:'
2068  <---Source: line: 'if not codPais:'
2068 <----Class: line: 'if not codPais:'
2068<-----Source: line: 'if not codPais:'
2069      If: begin: 'block-if'
2069    <-Source: begin: 'block-if'
2069   <--Function: begin: 'block-if'
2069  <---Source: begin: 'block-if'
2069 <----Class: begin: 'block-if'
2069<-----Source: begin: 'block-if'
2069      Source: begin-gen
2069       InstructionCall: begin-gen
2069        Member: begin-gen
2069         Identifier: begin-gen
2069          Identifier: expr: 'sys'
2069         Identifier: end-gen
2069         FunctionCall: begin-gen
2069          Value: begin-gen
2069           Member: begin-gen
2069            Identifier: begin-gen
2069             Identifier: expr: 'sys'
2069            Identifier: end-gen
2069            FunctionCall: begin-gen
2069             Value: begin-gen
2069              Constant: begin-gen
2069               Constant: ctype: 'String' -> 'No se ha podido obtener el código ISO del país asociado a la empresa'
2069               Constant: expr: 'u"No se ha podido obtener el código ISO del país asociado a la empresa"'
2069             <-Value: expr: 'u"No se ha podido obtener el código ISO del país asociado a la empresa"'
2069              Constant: end-gen
2069             Value: end-gen
2069             FunctionCall: expr: 'translate(u"No se ha podido obtener el código ISO del país asociado a la empresa")'
2069            FunctionCall: end-gen
2069            Member: expr: 'sys.translate(u"No se ha podido obtener el código ISO del país asociado a la empresa")'
2069          <-Value: expr: 'sys.translate(u"No se ha podido obtener el código ISO del país asociado a la empresa")'
2069           Member: end-gen
2069          Value: end-gen
2069          FunctionCall: expr: 'warnMsgBox(sys.translate(u"No se ha podido obtener el código ISO del país asociado a la empresa"))'
2069         FunctionCall: end-gen
2069         Member: expr: 'sys.warnMsgBox(sys.translate(u"No se ha podido obtener el código ISO del país asociado a la empresa"))'
2069        Member: end-gen
2069        InstructionCall: line: 'sys.warnMsgBox(sys.translate(u"No se ha podido obtener el código ISO del país asociado a la empresa"))'
2069      <-Source: line: 'sys.warnMsgBox(sys.translate(u"No se ha podido obtener el código ISO del país asociado a la empresa"))'
2069     <--If: line: 'sys.warnMsgBox(sys.translate(u"No se ha podido obtener el código ISO del país asociado a la empresa"))'
2069    <---Source: line: 'sys.warnMsgBox(sys.translate(u"No se ha podido obtener el código ISO del país asociado a la empresa"))'
2069   <----Function: line: 'sys.warnMsgBox(sys.translate(u"No se ha podido obtener el código ISO del país asociado a la empresa"))'
2069  <-----Source: line: 'sys.warnMsgBox(sys.translate(u"No se ha podido obtener el código ISO del país asociado a la empresa"))'
2069 <------Class: line: 'sys.warnMsgBox(sys.translate(u"No se ha podido obtener el código ISO del país asociado a la empresa"))'
2069<-------Source: line: 'sys.warnMsgBox(sys.translate(u"No se ha podido obtener el código ISO del país asociado a la empresa"))'
2070       InstructionCall: end-gen
2070       InstructionFlow: begin-gen
2070        Value: begin-gen
2070         Identifier: begin-gen
2070          Identifier: expr: 'False'
2070        <-Value: expr: 'False'
2070         Identifier: end-gen
2070        Value: end-gen
2070        InstructionFlow: line: 'return False'
2070      <-Source: line: 'return False'
2070     <--If: line: 'return False'
2070    <---Source: line: 'return False'
2070   <----Function: line: 'return False'
2070  <-----Source: line: 'return False'
2070 <------Class: line: 'return False'
2070<-------Source: line: 'return False'
2071       InstructionFlow: end-gen
2071      Source: end-gen
2071      If: end: 'block-if'
2071    <-Source: end: 'block-if'
2071   <--Function: end: 'block-if'
2071  <---Source: end: 'block-if'
2071 <----Class: end: 'block-if'
2071<-----Source: end: 'block-if'
2071     If: end-gen
2071     DeclarationBlock: begin-gen
2071      Variable: begin-gen
2071       Variable: expr: 'codComercial'
2071       Variable: expr: '='
2071       Value: begin-gen
2071        Member: begin-gen
2071         Identifier: begin-gen
2071          Identifier: expr: 'AQUtil'
2071         Identifier: end-gen
2071         FunctionCall: begin-gen
2071          Value: begin-gen
2071           Constant: begin-gen
2071            Constant: ctype: 'String' -> 'cuentasbanco'
2071            Constant: expr: 'u"cuentasbanco"'
2071          <-Value: expr: 'u"cuentasbanco"'
2071           Constant: end-gen
2071          Value: end-gen
2071          Value: begin-gen
2071           Constant: begin-gen
2071            Constant: ctype: 'String' -> 'sufijo'
2071            Constant: expr: 'u"sufijo"'
2071          <-Value: expr: 'u"sufijo"'
2071           Constant: end-gen
2071          Value: end-gen
2071          Expression: begin-gen
2071           Expression: expr: 'ustr('
2071           Constant: begin-gen
2071            Constant: ctype: 'String' -> "codcuenta = '"
2071            Constant: expr: 'u"codcuenta = \'"'
2071          <-Expression: expr: 'u"codcuenta = \'"'
2071           Constant: end-gen
2071           Expression: expr: ','
2071           Identifier: begin-gen
2071            Identifier: expr: 'codCuenta'
2071          <-Expression: expr: 'codCuenta'
2071           Identifier: end-gen
2071           Expression: expr: ','
2071           Constant: begin-gen
2071            Constant: ctype: 'String' -> "'"
2071            Constant: expr: 'u"\'"'
2071          <-Expression: expr: 'u"\'"'
2071           Constant: end-gen
2071           Expression: expr: ')'
2071          Expression: end-gen
2071          FunctionCall: expr: 'sqlSelect(u"cuentasbanco", u"sufijo", ustr( u"codcuenta = \'" , codCuenta , u"\'" ))'
2071         FunctionCall: end-gen
2071         Member: expr: 'AQUtil.sqlSelect(u"cuentasbanco", u"sufijo", ustr( u"codcuenta = \'" , codCuenta , u"\'" ))'
2071       <-Value: expr: 'AQUtil.sqlSelect(u"cuentasbanco", u"sufijo", ustr( u"codcuenta = \'" , codCuenta , u"\'" ))'
2071      <--Variable: expr: 'AQUtil.sqlSelect(u"cuentasbanco", u"sufijo", ustr( u"codcuenta = \'" , codCuenta , u"\'" ))'
2071        Member: end-gen
2071       Value: end-gen
2071      Variable: end-gen
2071      DeclarationBlock: line: 'codComercial = AQUtil.sqlSelect(u"cuentasbanco", u"sufijo", ustr( u"codcuenta = \'" , codCuenta , u"\'" ))'
2071    <-Source: line: 'codComercial = AQUtil.sqlSelect(u"cuentasbanco", u"sufijo", ustr( u"codcuenta = \'" , codCuenta , u"\'" ))'
2071   <--Function: line: 'codComercial = AQUtil.sqlSelect(u"cuentasbanco", u"sufijo", ustr( u"codcuenta = \'" , codCuenta , u"\'" ))'
2071  <---Source: line: 'codComercial = AQUtil.sqlSelect(u"cuentasbanco", u"sufijo", ustr( u"codcuenta = \'" , codCuenta , u"\'" ))'
2071 <----Class: line: 'codComercial = AQUtil.sqlSelect(u"cuentasbanco", u"sufijo", ustr( u"codcuenta = \'" , codCuenta , u"\'" ))'
2071<-----Source: line: 'codComercial = AQUtil.sqlSelect(u"cuentasbanco", u"sufijo", ustr( u"codcuenta = \'" , codCuenta , u"\'" ))'
2072     DeclarationBlock: end-gen
2072     DeclarationBlock: begin-gen
2072      Variable: begin-gen
2072       Variable: expr: 'numControl'
2072       Variable: expr: '='
2072       Value: begin-gen
2072        Constant: begin-gen
2072         Constant: ctype: 'String' -> ''
2072         Constant: expr: 'u""'
2072       <-Value: expr: 'u""'
2072      <--Variable: expr: 'u""'
2072        Constant: end-gen
2072       Value: end-gen
2072      Variable: end-gen
2072      DeclarationBlock: line: 'numControl = u""'
2072    <-Source: line: 'numControl = u""'
2072   <--Function: line: 'numControl = u""'
2072  <---Source: line: 'numControl = u""'
2072 <----Class: line: 'numControl = u""'
2072<-----Source: line: 'numControl = u""'
2073     DeclarationBlock: end-gen
2073     InstructionUpdate: begin-gen
2073      Identifier: begin-gen
2073       Identifier: expr: 'cifEmpresa'
2073      Identifier: end-gen
2073      OpUpdate: begin-gen
2073       OpUpdate: expr: '='
2073      OpUpdate: end-gen
2073      Value: begin-gen
2073       Member: begin-gen
2073        Identifier: begin-gen
2073         Identifier: expr: 'cifEmpresa'
2073        Identifier: end-gen
2073        FunctionCall: begin-gen
2073         FunctionCall: expr: 'toUpperCase()'
2073        FunctionCall: end-gen
2073        Member: expr: 'cifEmpresa.toUpperCase()'
2073      <-Value: expr: 'cifEmpresa.toUpperCase()'
2073       Member: end-gen
2073      Value: end-gen
2073      InstructionUpdate: line: 'cifEmpresa = cifEmpresa.toUpperCase()'
2073    <-Source: line: 'cifEmpresa = cifEmpresa.toUpperCase()'
2073   <--Function: line: 'cifEmpresa = cifEmpresa.toUpperCase()'
2073  <---Source: line: 'cifEmpresa = cifEmpresa.toUpperCase()'
2073 <----Class: line: 'cifEmpresa = cifEmpresa.toUpperCase()'
2073<-----Source: line: 'cifEmpresa = cifEmpresa.toUpperCase()'
2074     InstructionUpdate: end-gen
2074     DeclarationBlock: begin-gen
2074      Variable: begin-gen
2074       Variable: expr: 'carValido'
2074       Variable: expr: '='
2074       Value: begin-gen
2074        Constant: begin-gen
2074         Constant: ctype: 'String' -> '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ'
2074         Constant: expr: 'u"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"'
2074       <-Value: expr: 'u"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"'
2074      <--Variable: expr: 'u"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"'
2074        Constant: end-gen
2074       Value: end-gen
2074      Variable: end-gen
2074      DeclarationBlock: line: 'carValido = u"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"'
2074    <-Source: line: 'carValido = u"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"'
2074   <--Function: line: 'carValido = u"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"'
2074  <---Source: line: 'carValido = u"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"'
2074 <----Class: line: 'carValido = u"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"'
2074<-----Source: line: 'carValido = u"1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"'
2075     DeclarationBlock: end-gen
2075     For: begin-gen
2075      Variable: begin-gen
2075       Variable: expr: 'i'
2075       Variable: expr: '='
2075       Value: begin-gen
2075        Constant: begin-gen
2075         Constant: ctype: 'Number' -> '0'
2075         Constant: expr: '0'
2075       <-Value: expr: '0'
2075      <--Variable: expr: '0'
2075        Constant: end-gen
2075       Value: end-gen
2075      Variable: end-gen
2075      For: line: 'i = 0'
2075    <-Source: line: 'i = 0'
2075   <--Function: line: 'i = 0'
2075  <---Source: line: 'i = 0'
2075 <----Class: line: 'i = 0'
2075<-----Source: line: 'i = 0'
2076      For: line: 'while_pass = True'
2076    <-Source: line: 'while_pass = True'
2076   <--Function: line: 'while_pass = True'
2076  <---Source: line: 'while_pass = True'
2076 <----Class: line: 'while_pass = True'
2076<-----Source: line: 'while_pass = True'
2077      InlineUpdate: begin-gen
2077       Identifier: begin-gen
2077        Identifier: expr: 'i'
2077       Identifier: end-gen
2077       InlineUpdate: expr: 'i'
2077       InlineUpdate: line+1: 'i += 1'
2077      InlineUpdate: end-gen
2077      Expression: begin-gen
2077       Identifier: begin-gen
2077        Identifier: expr: 'i'
2077      <-Expression: expr: 'i'
2077       Identifier: end-gen
2077       Compare: begin-gen
2077        Compare: expr: '<'
2077      <-Expression: expr: '<'
2077       Compare: end-gen
2077       Member: begin-gen
2077        Identifier: begin-gen
2077         Identifier: expr: 'cifEmpresa'
2077        Identifier: end-gen
2077        Identifier: begin-gen
2077         Identifier: expr: 'length'
2077        Identifier: end-gen
2077        Member: expr: 'len(cifEmpresa)'
2077      <-Expression: expr: 'len(cifEmpresa)'
2077       Member: end-gen
2077      Expression: end-gen
2077      For: line: 'while i < len(cifEmpresa):'
2077    <-Source: line: 'while i < len(cifEmpresa):'
2077   <--Function: line: 'while i < len(cifEmpresa):'
2077  <---Source: line: 'while i < len(cifEmpresa):'
2077 <----Class: line: 'while i < len(cifEmpresa):'
2077<-----Source: line: 'while i < len(cifEmpresa):'
2078      For: begin: 'block-for'
2078    <-Source: begin: 'block-for'
2078   <--Function: begin: 'block-for'
2078  <---Source: begin: 'block-for'
2078 <----Class: begin: 'block-for'
2078<-----Source: begin: 'block-for'
2078      For: line: 'if not while_pass:'
2078    <-Source: line: 'if not while_pass:'
2078   <--Function: line: 'if not while_pass:'
2078  <---Source: line: 'if not while_pass:'
2078 <----Class: line: 'if not while_pass:'
2078<-----Source: line: 'if not while_pass:'
2079      For: begin: 'block-while_pass'
2079    <-Source: begin: 'block-while_pass'
2079   <--Function: begin: 'block-while_pass'
2079  <---Source: begin: 'block-while_pass'
2079 <----Class: begin: 'block-while_pass'
2079<-----Source: begin: 'block-while_pass'
2079      For: line: 'i += 1'
2079    <-Source: line: 'i += 1'
2079   <--Function: line: 'i += 1'
2079  <---Source: line: 'i += 1'
2079 <----Class: line: 'i += 1'
2079<-----Source: line: 'i += 1'
2080      For: line: 'while_pass = True'
2080    <-Source: line: 'while_pass = True'
2080   <--Function: line: 'while_pass = True'
2080  <---Source: line: 'while_pass = True'
2080 <----Class: line: 'while_pass = True'
2080<-----Source: line: 'while_pass = True'
2081      For: line: 'continue'
2081    <-Source: line: 'continue'
2081   <--Function: line: 'continue'
2081  <---Source: line: 'continue'
2081 <----Class: line: 'continue'
2081<-----Source: line: 'continue'
2082      For: end: 'block-while_pass'
2082    <-Source: end: 'block-while_pass'
2082   <--Function: end: 'block-while_pass'
2082  <---Source: end: 'block-while_pass'
2082 <----Class: end: 'block-while_pass'
2082<-----Source: end: 'block-while_pass'
2082      For: line: 'while_pass = False'
2082    <-Source: line: 'while_pass = False'
2082   <--Function: line: 'while_pass = False'
2082  <---Source: line: 'while_pass = False'
2082 <----Class: line: 'while_pass = False'
2082<-----Source: line: 'while_pass = False'
2083      Source: begin-gen
2083       If: begin-gen
2083        Expression: begin-gen
2083         Member: begin-gen
2083          Identifier: begin-gen
2083           Identifier: expr: 'carValido'
2083          Identifier: end-gen
2083          FunctionCall: begin-gen
2083           Value: begin-gen
2083            Member: begin-gen
2083             Identifier: begin-gen
2083              Identifier: expr: 'cifEmpresa'
2083             Identifier: end-gen
2083             FunctionCall: begin-gen
2083              Value: begin-gen
2083               Identifier: begin-gen
2083                Identifier: expr: 'i'
2083              <-Value: expr: 'i'
2083               Identifier: end-gen
2083              Value: end-gen
2083              FunctionCall: expr: 'charAt(i)'
2083             FunctionCall: end-gen
2083             Member: expr: 'cifEmpresa[i]'
2083           <-Value: expr: 'cifEmpresa[i]'
2083            Member: end-gen
2083           Value: end-gen
2083           FunctionCall: expr: 'find(cifEmpresa[i])'
2083          FunctionCall: end-gen
2083          Member: expr: 'carValido.find(cifEmpresa[i])'
2083        <-Expression: expr: 'carValido.find(cifEmpresa[i])'
2083         Member: end-gen
2083         Compare: begin-gen
2083          Compare: expr: '>='
2083        <-Expression: expr: '>='
2083         Compare: end-gen
2083         Constant: begin-gen
2083          Constant: ctype: 'Number' -> '0'
2083          Constant: expr: '0'
2083        <-Expression: expr: '0'
2083         Constant: end-gen
2083        Expression: end-gen
2083        If: line: 'if carValido.find(cifEmpresa[i]) >= 0:'
2083      <-Source: line: 'if carValido.find(cifEmpresa[i]) >= 0:'
2083     <--For: line: 'if carValido.find(cifEmpresa[i]) >= 0:'
2083    <---Source: line: 'if carValido.find(cifEmpresa[i]) >= 0:'
2083   <----Function: line: 'if carValido.find(cifEmpresa[i]) >= 0:'
2083  <-----Source: line: 'if carValido.find(cifEmpresa[i]) >= 0:'
2083 <------Class: line: 'if carValido.find(cifEmpresa[i]) >= 0:'
2083<-------Source: line: 'if carValido.find(cifEmpresa[i]) >= 0:'
2084        If: begin: 'block-if'
2084      <-Source: begin: 'block-if'
2084     <--For: begin: 'block-if'
2084    <---Source: begin: 'block-if'
2084   <----Function: begin: 'block-if'
2084  <-----Source: begin: 'block-if'
2084 <------Class: begin: 'block-if'
2084<-------Source: begin: 'block-if'
2084        Source: begin-gen
2084         InstructionUpdate: begin-gen
2084          Identifier: begin-gen
2084           Identifier: expr: 'numControl'
2084          Identifier: end-gen
2084          OpUpdate: begin-gen
2084           OpUpdate: expr: '+='
2084          OpUpdate: end-gen
2084          Value: begin-gen
2084           Member: begin-gen
2084            Identifier: begin-gen
2084             Identifier: expr: 'cifEmpresa'
2084            Identifier: end-gen
2084            FunctionCall: begin-gen
2084             Value: begin-gen
2084              Identifier: begin-gen
2084               Identifier: expr: 'i'
2084             <-Value: expr: 'i'
2084              Identifier: end-gen
2084             Value: end-gen
2084             FunctionCall: expr: 'charAt(i)'
2084            FunctionCall: end-gen
2084            Member: expr: 'cifEmpresa[i]'
2084          <-Value: expr: 'cifEmpresa[i]'
2084           Member: end-gen
2084          Value: end-gen
2084          InstructionUpdate: line: 'numControl += cifEmpresa[i]'
2084        <-Source: line: 'numControl += cifEmpresa[i]'
2084       <--If: line: 'numControl += cifEmpresa[i]'
2084      <---Source: line: 'numControl += cifEmpresa[i]'
2084     <----For: line: 'numControl += cifEmpresa[i]'
2084    <-----Source: line: 'numControl += cifEmpresa[i]'
2084   <------Function: line: 'numControl += cifEmpresa[i]'
2084  <-------Source: line: 'numControl += cifEmpresa[i]'
2084 <--------Class: line: 'numControl += cifEmpresa[i]'
2084<---------Source: line: 'numControl += cifEmpresa[i]'
2085         InstructionUpdate: end-gen
2085        Source: end-gen
2085        If: end: 'block-if'
2085      <-Source: end: 'block-if'
2085     <--For: end: 'block-if'
2085    <---Source: end: 'block-if'
2085   <----Function: end: 'block-if'
2085  <-----Source: end: 'block-if'
2085 <------Class: end: 'block-if'
2085<-------Source: end: 'block-if'
2085       If: end-gen
2085      Source: end-gen
2085      For: line: 'i += 1'
2085    <-Source: line: 'i += 1'
2085   <--Function: line: 'i += 1'
2085  <---Source: line: 'i += 1'
2085 <----Class: line: 'i += 1'
2085<-----Source: line: 'i += 1'
2086      For: line: 'while_pass = True'
2086    <-Source: line: 'while_pass = True'
2086   <--Function: line: 'while_pass = True'
2086  <---Source: line: 'while_pass = True'
2086 <----Class: line: 'while_pass = True'
2086<-----Source: line: 'while_pass = True'
2087      For: line: 'try:'
2087    <-Source: line: 'try:'
2087   <--Function: line: 'try:'
2087  <---Source: line: 'try:'
2087 <----Class: line: 'try:'
2087<-----Source: line: 'try:'
2088      For: begin: 'block-error-catch'
2088    <-Source: begin: 'block-error-catch'
2088   <--Function: begin: 'block-error-catch'
2088  <---Source: begin: 'block-error-catch'
2088 <----Class: begin: 'block-error-catch'
2088<-----Source: begin: 'block-error-catch'
2088      For: line: 'i < len(cifEmpresa)'
2088    <-Source: line: 'i < len(cifEmpresa)'
2088   <--Function: line: 'i < len(cifEmpresa)'
2088  <---Source: line: 'i < len(cifEmpresa)'
2088 <----Class: line: 'i < len(cifEmpresa)'
2088<-----Source: line: 'i < len(cifEmpresa)'
2089      For: end: 'block-error-catch'
2089    <-Source: end: 'block-error-catch'
2089   <--Function: end: 'block-error-catch'
2089  <---Source: end: 'block-error-catch'
2089 <----Class: end: 'block-error-catch'
2089<-----Source: end: 'block-error-catch'
2089      For: line: 'except: break'
2089    <-Source: line: 'except: break'
2089   <--Function: line: 'except: break'
2089  <---Source: line: 'except: break'
2089 <----Class: line: 'except: break'
2089<-----Source: line: 'except: break'
2090      For: end: 'block-for'
2090    <-Source: end: 'block-for'
2090   <--Function: end: 'block-for'
2090  <---Source: end: 'block-for'
2090 <----Class: end: 'block-for'
2090<-----Source: end: 'block-for'
2090     For: end-gen
2090     InstructionUpdate: begin-gen
2090      Identifier: begin-gen
2090       Identifier: expr: 'digControl'
2090      Identifier: end-gen
2090      OpUpdate: begin-gen
2090       OpUpdate: expr: '='
2090      OpUpdate: end-gen
2090      Value: begin-gen
2090       Member: begin-gen
2090        Identifier: begin-gen
2090         Identifier: expr: '_i'
2090        Identifier: end-gen
2090        FunctionCall: begin-gen
2090         Value: begin-gen
2090          Identifier: begin-gen
2090           Identifier: expr: 'numControl'
2090         <-Value: expr: 'numControl'
2090          Identifier: end-gen
2090         Value: end-gen
2090         Value: begin-gen
2090          Identifier: begin-gen
2090           Identifier: expr: 'codPais'
2090         <-Value: expr: 'codPais'
2090          Identifier: end-gen
2090         Value: end-gen
2090         FunctionCall: expr: 'digitoControlMod97(numControl, codPais)'
2090        FunctionCall: end-gen
2090        Member: expr: '_i.digitoControlMod97(numControl, codPais)'
2090      <-Value: expr: '_i.digitoControlMod97(numControl, codPais)'
2090       Member: end-gen
2090      Value: end-gen
2090      InstructionUpdate: line: 'digControl = _i.digitoControlMod97(numControl, codPais)'
2090    <-Source: line: 'digControl = _i.digitoControlMod97(numControl, codPais)'
2090   <--Function: line: 'digControl = _i.digitoControlMod97(numControl, codPais)'
2090  <---Source: line: 'digControl = _i.digitoControlMod97(numControl, codPais)'
2090 <----Class: line: 'digControl = _i.digitoControlMod97(numControl, codPais)'
2090<-----Source: line: 'digControl = _i.digitoControlMod97(numControl, codPais)'
2092     InstructionUpdate: end-gen
2092     DeclarationBlock: begin-gen
2092      Variable: begin-gen
2092       Variable: expr: 'identificador'
2092       Variable: expr: '='
2092       Expression: begin-gen
2092        Identifier: begin-gen
2092         Identifier: expr: 'codPais'
2092       <-Expression: expr: 'codPais'
2092      <--Variable: expr: 'codPais'
2092        Identifier: end-gen
2092        OpMath: begin-gen
2092         OpMath: expr: '+'
2092       <-Expression: expr: '+'
2092      <--Variable: expr: '+'
2092        OpMath: end-gen
2092        Identifier: begin-gen
2092         Identifier: expr: 'digControl'
2092       <-Expression: expr: 'digControl'
2092      <--Variable: expr: 'digControl'
2092        Identifier: end-gen
2092        OpMath: begin-gen
2092         OpMath: expr: '+'
2092       <-Expression: expr: '+'
2092      <--Variable: expr: '+'
2092        OpMath: end-gen
2092        Identifier: begin-gen
2092         Identifier: expr: 'codComercial'
2092       <-Expression: expr: 'codComercial'
2092      <--Variable: expr: 'codComercial'
2092        Identifier: end-gen
2092        OpMath: begin-gen
2092         OpMath: expr: '+'
2092       <-Expression: expr: '+'
2092      <--Variable: expr: '+'
2092        OpMath: end-gen
2092        Identifier: begin-gen
2092         Identifier: expr: 'cifEmpresa'
2092       <-Expression: expr: 'cifEmpresa'
2092      <--Variable: expr: 'cifEmpresa'
2092        Identifier: end-gen
2092       Expression: end-gen
2092      Variable: end-gen
2092      DeclarationBlock: line: 'identificador = codPais + digControl + codComercial + cifEmpresa'
2092    <-Source: line: 'identificador = codPais + digControl + codComercial + cifEmpresa'
2092   <--Function: line: 'identificador = codPais + digControl + codComercial + cifEmpresa'
2092  <---Source: line: 'identificador = codPais + digControl + codComercial + cifEmpresa'
2092 <----Class: line: 'identificador = codPais + digControl + codComercial + cifEmpresa'
2092<-----Source: line: 'identificador = codPais + digControl + codComercial + cifEmpresa'
2093     DeclarationBlock: end-gen
2093     InstructionFlow: begin-gen
2093      Value: begin-gen
2093       Identifier: begin-gen
2093        Identifier: expr: 'identificador'
2093      <-Value: expr: 'identificador'
2093       Identifier: end-gen
2093      Value: end-gen
2093      InstructionFlow: line: 'return identificador'
2093    <-Source: line: 'return identificador'
2093   <--Function: line: 'return identificador'
2093  <---Source: line: 'return identificador'
2093 <----Class: line: 'return identificador'
2093<-----Source: line: 'return identificador'
2094     InstructionFlow: end-gen
2094    Source: end-gen
2094    Function: end: 'block-def-oficial_calcularIdentificadorAcreedor'
2094  <-Source: end: 'block-def-oficial_calcularIdentificadorAcreedor'
2094 <--Class: end: 'block-def-oficial_calcularIdentificadorAcreedor'
2094<---Source: end: 'block-def-oficial_calcularIdentificadorAcreedor'
2095   Function: end-gen
2095   Function: begin-gen
2095    Variable: begin-gen
2095     Variable: expr: 'codigo'
2095    Variable: end-gen
2095    Variable: begin-gen
2095     Variable: expr: 'tabla'
2095    Variable: end-gen
2095    Function: line: 'def envioMail_componerListaDestinatarios(self, codigo = None, tabla = None):'
2095  <-Source: line: 'def envioMail_componerListaDestinatarios(self, codigo = None, tabla = None):'
2095 <--Class: line: 'def envioMail_componerListaDestinatarios(self, codigo = None, tabla = None):'
2095<---Source: line: 'def envioMail_componerListaDestinatarios(self, codigo = None, tabla = None):'
2096    Function: begin: 'block-def-envioMail_componerListaDestinatarios'
2096  <-Source: begin: 'block-def-envioMail_componerListaDestinatarios'
2096 <--Class: begin: 'block-def-envioMail_componerListaDestinatarios'
2096<---Source: begin: 'block-def-envioMail_componerListaDestinatarios'
2096    Source: begin-gen
2096     InstructionCall: begin-gen
2096      FunctionCall: begin-gen
2096       Value: begin-gen
2096        Identifier: begin-gen
2096         Identifier: expr: 'tabla'
2096       <-Value: expr: 'tabla'
2096        Identifier: end-gen
2096       Value: end-gen
2096       FunctionCall: expr: 'debug(tabla)'
2096      FunctionCall: end-gen
2096      InstructionCall: line: 'debug(tabla)'
2096    <-Source: line: 'debug(tabla)'
2096   <--Function: line: 'debug(tabla)'
2096  <---Source: line: 'debug(tabla)'
2096 <----Class: line: 'debug(tabla)'
2096<-----Source: line: 'debug(tabla)'
2097     InstructionCall: end-gen
2097     DeclarationBlock: begin-gen
2097      Variable: begin-gen
2097       Variable: expr: 'util'
2097       Variable: expr: '='
2097       Value: begin-gen
2097        New: begin-gen
2097         FunctionCall: begin-gen
2097          FunctionCall: expr: 'FLUtil()'
2097        <-New: expr: 'qsatype.FLUtil()'
2097       <--Value: expr: 'qsatype.FLUtil()'
2097      <---Variable: expr: 'qsatype.FLUtil()'
2097         FunctionCall: end-gen
2097        New: end-gen
2097       Value: end-gen
2097      Variable: end-gen
2097      DeclarationBlock: line: 'util = qsatype.FLUtil()'
2097    <-Source: line: 'util = qsatype.FLUtil()'
2097   <--Function: line: 'util = qsatype.FLUtil()'
2097  <---Source: line: 'util = qsatype.FLUtil()'
2097 <----Class: line: 'util = qsatype.FLUtil()'
2097<-----Source: line: 'util = qsatype.FLUtil()'
2098     DeclarationBlock: end-gen
2098     DeclarationBlock: begin-gen
2098      Variable: begin-gen
2098       Variable: expr: 'arrayMails'
2098       Variable: expr: '='
2098       Value: begin-gen
2098        Constant: begin-gen
2098         Constant: ctype: None -> None
2098         Constant: expr: '[]'
2098       <-Value: expr: '[]'
2098      <--Variable: expr: 'qsatype.Array()'
2098        Constant: end-gen
2098       Value: end-gen
2098      Variable: end-gen
2098      DeclarationBlock: line: 'arrayMails = qsatype.Array()'
2098    <-Source: line: 'arrayMails = qsatype.Array()'
2098   <--Function: line: 'arrayMails = qsatype.Array()'
2098  <---Source: line: 'arrayMails = qsatype.Array()'
2098 <----Class: line: 'arrayMails = qsatype.Array()'
2098<-----Source: line: 'arrayMails = qsatype.Array()'
2099     DeclarationBlock: end-gen
2099     DeclarationBlock: begin-gen
2099      Variable: begin-gen
2099       Variable: expr: 'listaDestinatarios'
2099       Variable: expr: '='
2099       Variable: expr: '""'
2099      Variable: end-gen
2099      DeclarationBlock: line: 'listaDestinatarios = ""'
2099    <-Source: line: 'listaDestinatarios = ""'
2099   <--Function: line: 'listaDestinatarios = ""'
2099  <---Source: line: 'listaDestinatarios = ""'
2099 <----Class: line: 'listaDestinatarios = ""'
2099<-----Source: line: 'listaDestinatarios = ""'
2100     DeclarationBlock: end-gen
2100     DeclarationBlock: begin-gen
2100      Variable: begin-gen
2100       Variable: expr: 'emailPrincipal'
2100       Variable: expr: '='
2100       Variable: expr: '""'
2100      Variable: end-gen
2100      DeclarationBlock: line: 'emailPrincipal = ""'
2100    <-Source: line: 'emailPrincipal = ""'
2100   <--Function: line: 'emailPrincipal = ""'
2100  <---Source: line: 'emailPrincipal = ""'
2100 <----Class: line: 'emailPrincipal = ""'
2100<-----Source: line: 'emailPrincipal = ""'
2101     DeclarationBlock: end-gen
2101     DeclarationBlock: begin-gen
2101      Variable: begin-gen
2101       Variable: expr: 'nombrePrincipal'
2101       Variable: expr: '='
2101       Variable: expr: '""'
2101      Variable: end-gen
2101      DeclarationBlock: line: 'nombrePrincipal = ""'
2101    <-Source: line: 'nombrePrincipal = ""'
2101   <--Function: line: 'nombrePrincipal = ""'
2101  <---Source: line: 'nombrePrincipal = ""'
2101 <----Class: line: 'nombrePrincipal = ""'
2101<-----Source: line: 'nombrePrincipal = ""'
2102     DeclarationBlock: end-gen
2102     DeclarationBlock: begin-gen
2102      Variable: begin-gen
2102       Variable: expr: 'dialog'
2102       Variable: expr: '='
2102       Variable: expr: 'None'
2102      Variable: end-gen
2102      DeclarationBlock: line: 'dialog = None'
2102    <-Source: line: 'dialog = None'
2102   <--Function: line: 'dialog = None'
2102  <---Source: line: 'dialog = None'
2102 <----Class: line: 'dialog = None'
2102<-----Source: line: 'dialog = None'
2103     DeclarationBlock: end-gen
2103     DeclarationBlock: begin-gen
2103      Variable: begin-gen
2103       Variable: expr: 'q'
2103       Variable: expr: '='
2103       Value: begin-gen
2103        New: begin-gen
2103         FunctionCall: begin-gen
2103          FunctionCall: expr: 'FLSqlQuery()'
2103        <-New: expr: 'qsatype.FLSqlQuery()'
2103       <--Value: expr: 'qsatype.FLSqlQuery()'
2103      <---Variable: expr: 'qsatype.FLSqlQuery()'
2103         FunctionCall: end-gen
2103        New: end-gen
2103       Value: end-gen
2103      Variable: end-gen
2103      DeclarationBlock: line: 'q = qsatype.FLSqlQuery()'
2103    <-Source: line: 'q = qsatype.FLSqlQuery()'
2103   <--Function: line: 'q = qsatype.FLSqlQuery()'
2103  <---Source: line: 'q = qsatype.FLSqlQuery()'
2103 <----Class: line: 'q = qsatype.FLSqlQuery()'
2103<-----Source: line: 'q = qsatype.FLSqlQuery()'
2104     DeclarationBlock: end-gen
2104     Switch: begin-gen
2104      Value: begin-gen
2104       Identifier: begin-gen
2104        Identifier: expr: 'tabla'
2104      <-Value: expr: 'tabla'
2104       Identifier: end-gen
2104      Value: end-gen
2104      Switch: line: 's15_when = tabla'
2104    <-Source: line: 's15_when = tabla'
2104   <--Function: line: 's15_when = tabla'
2104  <---Source: line: 's15_when = tabla'
2104 <----Class: line: 's15_when = tabla'
2104<-----Source: line: 's15_when = tabla'
2105      Switch: line: 's15_do_work,s15_work_done = False,False'
2105    <-Source: line: 's15_do_work,s15_work_done = False,False'
2105   <--Function: line: 's15_do_work,s15_work_done = False,False'
2105  <---Source: line: 's15_do_work,s15_work_done = False,False'
2105 <----Class: line: 's15_do_work,s15_work_done = False,False'
2105<-----Source: line: 's15_do_work,s15_work_done = False,False'
2106      Value: begin-gen
2106       Constant: begin-gen
2106        Constant: ctype: 'String' -> 'clientes'
2106        Constant: expr: 'u"clientes"'
2106      <-Value: expr: 'u"clientes"'
2106       Constant: end-gen
2106      Value: end-gen
2106      Switch: line: 'if s15_when == u"clientes": s15_do_work,s15_work_done = True,True'
2106    <-Source: line: 'if s15_when == u"clientes": s15_do_work,s15_work_done = True,True'
2106   <--Function: line: 'if s15_when == u"clientes": s15_do_work,s15_work_done = True,True'
2106  <---Source: line: 'if s15_when == u"clientes": s15_do_work,s15_work_done = True,True'
2106 <----Class: line: 'if s15_when == u"clientes": s15_do_work,s15_work_done = True,True'
2106<-----Source: line: 'if s15_when == u"clientes": s15_do_work,s15_work_done = True,True'
2107      Switch: line: 'if s15_do_work:'
2107    <-Source: line: 'if s15_do_work:'
2107   <--Function: line: 'if s15_do_work:'
2107  <---Source: line: 'if s15_do_work:'
2107 <----Class: line: 'if s15_do_work:'
2107<-----Source: line: 'if s15_do_work:'
2108      Switch: begin: 'block-if'
2108    <-Source: begin: 'block-if'
2108   <--Function: begin: 'block-if'
2108  <---Source: begin: 'block-if'
2108 <----Class: begin: 'block-if'
2108<-----Source: begin: 'block-if'
2108      Source: begin-gen
2108       InstructionUpdate: begin-gen
2108        Identifier: begin-gen
2108         Identifier: expr: 'emailPrincipal'
2108        Identifier: end-gen
2108        OpUpdate: begin-gen
2108         OpUpdate: expr: '='
2108        OpUpdate: end-gen
2108        Value: begin-gen
2108         Member: begin-gen
2108          Identifier: begin-gen
2108           Identifier: expr: 'util'
2108          Identifier: end-gen
2108          FunctionCall: begin-gen
2108           Value: begin-gen
2108            Constant: begin-gen
2108             Constant: ctype: 'String' -> 'clientes'
2108             Constant: expr: 'u"clientes"'
2108           <-Value: expr: 'u"clientes"'
2108            Constant: end-gen
2108           Value: end-gen
2108           Value: begin-gen
2108            Constant: begin-gen
2108             Constant: ctype: 'String' -> 'email'
2108             Constant: expr: 'u"email"'
2108           <-Value: expr: 'u"email"'
2108            Constant: end-gen
2108           Value: end-gen
2108           Expression: begin-gen
2108            Expression: expr: 'ustr('
2108            Constant: begin-gen
2108             Constant: ctype: 'String' -> "codcliente = '"
2108             Constant: expr: 'u"codcliente = \'"'
2108           <-Expression: expr: 'u"codcliente = \'"'
2108            Constant: end-gen
2108            Expression: expr: ','
2108            Identifier: begin-gen
2108             Identifier: expr: 'codigo'
2108           <-Expression: expr: 'codigo'
2108            Identifier: end-gen
2108            Expression: expr: ','
2108            Constant: begin-gen
2108             Constant: ctype: 'String' -> "'"
2108             Constant: expr: 'u"\'"'
2108           <-Expression: expr: 'u"\'"'
2108            Constant: end-gen
2108            Expression: expr: ')'
2108           Expression: end-gen
2108           FunctionCall: expr: 'sqlSelect(u"clientes", u"email", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2108          FunctionCall: end-gen
2108          Member: expr: 'util.sqlSelect(u"clientes", u"email", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2108        <-Value: expr: 'util.sqlSelect(u"clientes", u"email", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2108         Member: end-gen
2108        Value: end-gen
2108        InstructionUpdate: line: 'emailPrincipal = util.sqlSelect(u"clientes", u"email", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2108      <-Source: line: 'emailPrincipal = util.sqlSelect(u"clientes", u"email", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2108     <--Switch: line: 'emailPrincipal = util.sqlSelect(u"clientes", u"email", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2108    <---Source: line: 'emailPrincipal = util.sqlSelect(u"clientes", u"email", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2108   <----Function: line: 'emailPrincipal = util.sqlSelect(u"clientes", u"email", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2108  <-----Source: line: 'emailPrincipal = util.sqlSelect(u"clientes", u"email", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2108 <------Class: line: 'emailPrincipal = util.sqlSelect(u"clientes", u"email", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2108<-------Source: line: 'emailPrincipal = util.sqlSelect(u"clientes", u"email", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2109       InstructionUpdate: end-gen
2109       InstructionUpdate: begin-gen
2109        Identifier: begin-gen
2109         Identifier: expr: 'nombrePrincipal'
2109        Identifier: end-gen
2109        OpUpdate: begin-gen
2109         OpUpdate: expr: '='
2109        OpUpdate: end-gen
2109        Value: begin-gen
2109         Member: begin-gen
2109          Identifier: begin-gen
2109           Identifier: expr: 'util'
2109          Identifier: end-gen
2109          FunctionCall: begin-gen
2109           Value: begin-gen
2109            Constant: begin-gen
2109             Constant: ctype: 'String' -> 'clientes'
2109             Constant: expr: 'u"clientes"'
2109           <-Value: expr: 'u"clientes"'
2109            Constant: end-gen
2109           Value: end-gen
2109           Value: begin-gen
2109            Constant: begin-gen
2109             Constant: ctype: 'String' -> 'nombre'
2109             Constant: expr: 'u"nombre"'
2109           <-Value: expr: 'u"nombre"'
2109            Constant: end-gen
2109           Value: end-gen
2109           Expression: begin-gen
2109            Expression: expr: 'ustr('
2109            Constant: begin-gen
2109             Constant: ctype: 'String' -> "codcliente = '"
2109             Constant: expr: 'u"codcliente = \'"'
2109           <-Expression: expr: 'u"codcliente = \'"'
2109            Constant: end-gen
2109            Expression: expr: ','
2109            Identifier: begin-gen
2109             Identifier: expr: 'codigo'
2109           <-Expression: expr: 'codigo'
2109            Identifier: end-gen
2109            Expression: expr: ','
2109            Constant: begin-gen
2109             Constant: ctype: 'String' -> "'"
2109             Constant: expr: 'u"\'"'
2109           <-Expression: expr: 'u"\'"'
2109            Constant: end-gen
2109            Expression: expr: ')'
2109           Expression: end-gen
2109           FunctionCall: expr: 'sqlSelect(u"clientes", u"nombre", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2109          FunctionCall: end-gen
2109          Member: expr: 'util.sqlSelect(u"clientes", u"nombre", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2109        <-Value: expr: 'util.sqlSelect(u"clientes", u"nombre", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2109         Member: end-gen
2109        Value: end-gen
2109        InstructionUpdate: line: 'nombrePrincipal = util.sqlSelect(u"clientes", u"nombre", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2109      <-Source: line: 'nombrePrincipal = util.sqlSelect(u"clientes", u"nombre", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2109     <--Switch: line: 'nombrePrincipal = util.sqlSelect(u"clientes", u"nombre", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2109    <---Source: line: 'nombrePrincipal = util.sqlSelect(u"clientes", u"nombre", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2109   <----Function: line: 'nombrePrincipal = util.sqlSelect(u"clientes", u"nombre", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2109  <-----Source: line: 'nombrePrincipal = util.sqlSelect(u"clientes", u"nombre", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2109 <------Class: line: 'nombrePrincipal = util.sqlSelect(u"clientes", u"nombre", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2109<-------Source: line: 'nombrePrincipal = util.sqlSelect(u"clientes", u"nombre", ustr( u"codcliente = \'" , codigo , u"\'" ))'
2110       InstructionUpdate: end-gen
2110       InstructionCall: begin-gen
2110        Member: begin-gen
2110         Identifier: begin-gen
2110          Identifier: expr: 'q'
2110         Identifier: end-gen
2110         FunctionCall: begin-gen
2110          Value: begin-gen
2110           Constant: begin-gen
2110            Constant: ctype: 'String' -> 'contactosclientes,crm_contactos'
2110            Constant: expr: 'u"contactosclientes,crm_contactos"'
2110          <-Value: expr: 'u"contactosclientes,crm_contactos"'
2110           Constant: end-gen
2110          Value: end-gen
2110          FunctionCall: expr: 'setTablesList(u"contactosclientes,crm_contactos")'
2110         FunctionCall: end-gen
2110         Member: expr: 'q.setTablesList(u"contactosclientes,crm_contactos")'
2110        Member: end-gen
2110        InstructionCall: line: 'q.setTablesList(u"contactosclientes,crm_contactos")'
2110      <-Source: line: 'q.setTablesList(u"contactosclientes,crm_contactos")'
2110     <--Switch: line: 'q.setTablesList(u"contactosclientes,crm_contactos")'
2110    <---Source: line: 'q.setTablesList(u"contactosclientes,crm_contactos")'
2110   <----Function: line: 'q.setTablesList(u"contactosclientes,crm_contactos")'
2110  <-----Source: line: 'q.setTablesList(u"contactosclientes,crm_contactos")'
2110 <------Class: line: 'q.setTablesList(u"contactosclientes,crm_contactos")'
2110<-------Source: line: 'q.setTablesList(u"contactosclientes,crm_contactos")'
2111       InstructionCall: end-gen
2111       InstructionCall: begin-gen
2111        Member: begin-gen
2111         Identifier: begin-gen
2111          Identifier: expr: 'q'
2111         Identifier: end-gen
2111         FunctionCall: begin-gen
2111          Value: begin-gen
2111           Constant: begin-gen
2111            Constant: ctype: 'String' -> 'contactosclientes INNER JOIN crm_contactos ON contactosclientes.codcontacto = crm_contactos.codcontacto'
2111            Constant: expr: 'u"contactosclientes INNER JOIN crm_contactos ON contactosclientes.codcontacto = crm_contactos.codcontacto"'
2111          <-Value: expr: 'u"contactosclientes INNER JOIN crm_contactos ON contactosclientes.codcontacto = crm_contactos.codcontacto"'
2111           Constant: end-gen
2111          Value: end-gen
2111          FunctionCall: expr: 'setFrom(u"contactosclientes INNER JOIN crm_contactos ON contactosclientes.codcontacto = crm_contactos.codcontacto")'
2111         FunctionCall: end-gen
2111         Member: expr: 'q.setFrom(u"contactosclientes INNER JOIN crm_contactos ON contactosclientes.codcontacto = crm_contactos.codcontacto")'
2111        Member: end-gen
2111        InstructionCall: line: 'q.setFrom(u"contactosclientes INNER JOIN crm_contactos ON contactosclientes.codcontacto = crm_contactos.codcontacto")'
2111      <-Source: line: 'q.setFrom(u"contactosclientes INNER JOIN crm_contactos ON contactosclientes.codcontacto = crm_contactos.codcontacto")'
2111     <--Switch: line: 'q.setFrom(u"contactosclientes INNER JOIN crm_contactos ON contactosclientes.codcontacto = crm_contactos.codcontacto")'
2111    <---Source: line: 'q.setFrom(u"contactosclientes INNER JOIN crm_contactos ON contactosclientes.codcontacto = crm_contactos.codcontacto")'
2111   <----Function: line: 'q.setFrom(u"contactosclientes INNER JOIN crm_contactos ON contactosclientes.codcontacto = crm_contactos.codcontacto")'
2111  <-----Source: line: 'q.setFrom(u"contactosclientes INNER JOIN crm_contactos ON contactosclientes.codcontacto = crm_contactos.codcontacto")'
2111 <------Class: line: 'q.setFrom(u"contactosclientes INNER JOIN crm_contactos ON contactosclientes.codcontacto = crm_contactos.codcontacto")'
2111<-------Source: line: 'q.setFrom(u"contactosclientes INNER JOIN crm_contactos ON contactosclientes.codcontacto = crm_contactos.codcontacto")'
2112       InstructionCall: end-gen
2112       InstructionCall: begin-gen
2112        Member: begin-gen
2112         Identifier: begin-gen
2112          Identifier: expr: 'q'
2112         Identifier: end-gen
2112         FunctionCall: begin-gen
2112          Value: begin-gen
2112           Constant: begin-gen
2112            Constant: ctype: 'String' -> 'crm_contactos.email,crm_contactos.nombre'
2112            Constant: expr: 'u"crm_contactos.email,crm_contactos.nombre"'
2112          <-Value: expr: 'u"crm_contactos.email,crm_contactos.nombre"'
2112           Constant: end-gen
2112          Value: end-gen
2112          FunctionCall: expr: 'setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2112         FunctionCall: end-gen
2112         Member: expr: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2112        Member: end-gen
2112        InstructionCall: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2112      <-Source: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2112     <--Switch: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2112    <---Source: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2112   <----Function: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2112  <-----Source: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2112 <------Class: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2112<-------Source: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2113       InstructionCall: end-gen
2113       InstructionCall: begin-gen
2113        Member: begin-gen
2113         Identifier: begin-gen
2113          Identifier: expr: 'q'
2113         Identifier: end-gen
2113         FunctionCall: begin-gen
2113          Expression: begin-gen
2113           Expression: expr: 'ustr('
2113           Constant: begin-gen
2113            Constant: ctype: 'String' -> "contactosclientes.codcliente = '"
2113            Constant: expr: 'u"contactosclientes.codcliente = \'"'
2113          <-Expression: expr: 'u"contactosclientes.codcliente = \'"'
2113           Constant: end-gen
2113           Expression: expr: ','
2113           Identifier: begin-gen
2113            Identifier: expr: 'codigo'
2113          <-Expression: expr: 'codigo'
2113           Identifier: end-gen
2113           Expression: expr: ','
2113           Constant: begin-gen
2113            Constant: ctype: 'String' -> "' AND (crm_contactos.email <> '' AND crm_contactos.email IS NOT NULL)"
2113            Constant: expr: 'u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)"'
2113          <-Expression: expr: 'u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)"'
2113           Constant: end-gen
2113           Expression: expr: ')'
2113          Expression: end-gen
2113          FunctionCall: expr: 'setWhere(ustr( u"contactosclientes.codcliente = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2113         FunctionCall: end-gen
2113         Member: expr: 'q.setWhere(ustr( u"contactosclientes.codcliente = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2113        Member: end-gen
2113        InstructionCall: line: 'q.setWhere(ustr( u"contactosclientes.codcliente = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2113      <-Source: line: 'q.setWhere(ustr( u"contactosclientes.codcliente = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2113     <--Switch: line: 'q.setWhere(ustr( u"contactosclientes.codcliente = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2113    <---Source: line: 'q.setWhere(ustr( u"contactosclientes.codcliente = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2113   <----Function: line: 'q.setWhere(ustr( u"contactosclientes.codcliente = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2113  <-----Source: line: 'q.setWhere(ustr( u"contactosclientes.codcliente = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2113 <------Class: line: 'q.setWhere(ustr( u"contactosclientes.codcliente = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2113<-------Source: line: 'q.setWhere(ustr( u"contactosclientes.codcliente = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2114       InstructionCall: end-gen
2114       If: begin-gen
2114        Value: begin-gen
2114         OpUnary: begin-gen
2114          OpUnary: expr: 'not'
2114        <-Value: expr: 'not'
2114          Member: begin-gen
2114           Identifier: begin-gen
2114            Identifier: expr: 'q'
2114           Identifier: end-gen
2114           FunctionCall: begin-gen
2114            FunctionCall: expr: 'exec_()'
2114           FunctionCall: end-gen
2114           Member: expr: 'q.exec_()'
2114         <-OpUnary: expr: 'q.exec_()'
2114        <--Value: expr: 'q.exec_()'
2114          Member: end-gen
2114         OpUnary: end-gen
2114        Value: end-gen
2114        If: line: 'if not q.exec_():'
2114      <-Source: line: 'if not q.exec_():'
2114     <--Switch: line: 'if not q.exec_():'
2114    <---Source: line: 'if not q.exec_():'
2114   <----Function: line: 'if not q.exec_():'
2114  <-----Source: line: 'if not q.exec_():'
2114 <------Class: line: 'if not q.exec_():'
2114<-------Source: line: 'if not q.exec_():'
2115        If: begin: 'block-if'
2115      <-Source: begin: 'block-if'
2115     <--Switch: begin: 'block-if'
2115    <---Source: begin: 'block-if'
2115   <----Function: begin: 'block-if'
2115  <-----Source: begin: 'block-if'
2115 <------Class: begin: 'block-if'
2115<-------Source: begin: 'block-if'
2115        Source: begin-gen
2115         InstructionFlow: begin-gen
2115          Value: begin-gen
2115           Identifier: begin-gen
2115            Identifier: expr: 'False'
2115          <-Value: expr: 'False'
2115           Identifier: end-gen
2115          Value: end-gen
2115          InstructionFlow: line: 'return False'
2115        <-Source: line: 'return False'
2115       <--If: line: 'return False'
2115      <---Source: line: 'return False'
2115     <----Switch: line: 'return False'
2115    <-----Source: line: 'return False'
2115   <------Function: line: 'return False'
2115  <-------Source: line: 'return False'
2115 <--------Class: line: 'return False'
2115<---------Source: line: 'return False'
2116         InstructionFlow: end-gen
2116        Source: end-gen
2116        If: end: 'block-if'
2116      <-Source: end: 'block-if'
2116     <--Switch: end: 'block-if'
2116    <---Source: end: 'block-if'
2116   <----Function: end: 'block-if'
2116  <-----Source: end: 'block-if'
2116 <------Class: end: 'block-if'
2116<-------Source: end: 'block-if'
2116       If: end-gen
2116       InstructionUpdate: begin-gen
2116        Identifier: begin-gen
2116         Identifier: expr: 'dialog'
2116        Identifier: end-gen
2116        OpUpdate: begin-gen
2116         OpUpdate: expr: '='
2116        OpUpdate: end-gen
2116        Value: begin-gen
2116         New: begin-gen
2116          FunctionCall: begin-gen
2116           Value: begin-gen
2116            Member: begin-gen
2116             Identifier: begin-gen
2116              Identifier: expr: 'util'
2116             Identifier: end-gen
2116             FunctionCall: begin-gen
2116              Value: begin-gen
2116               Constant: begin-gen
2116                Constant: ctype: 'String' -> 'scripts'
2116                Constant: expr: 'u"scripts"'
2116              <-Value: expr: 'u"scripts"'
2116               Constant: end-gen
2116              Value: end-gen
2116              Value: begin-gen
2116               Constant: begin-gen
2116                Constant: ctype: 'String' -> 'Contactos del cliente'
2116                Constant: expr: 'u"Contactos del cliente"'
2116              <-Value: expr: 'u"Contactos del cliente"'
2116               Constant: end-gen
2116              Value: end-gen
2116              FunctionCall: expr: 'translate(u"scripts", u"Contactos del cliente")'
2116             FunctionCall: end-gen
2116             Member: expr: 'util.translate(u"scripts", u"Contactos del cliente")'
2116           <-Value: expr: 'util.translate(u"scripts", u"Contactos del cliente")'
2116            Member: end-gen
2116           Value: end-gen
2116           Value: begin-gen
2116            Constant: begin-gen
2116             Constant: ctype: 'Number' -> '0'
2116             Constant: expr: '0'
2116           <-Value: expr: '0'
2116            Constant: end-gen
2116           Value: end-gen
2116           FunctionCall: expr: 'Dialog(util.translate(u"scripts", u"Contactos del cliente"), 0)'
2116         <-New: expr: 'qsatype.Dialog(util.translate(u"scripts", u"Contactos del cliente"), 0)'
2116        <--Value: expr: 'qsatype.Dialog(util.translate(u"scripts", u"Contactos del cliente"), 0)'
2116          FunctionCall: end-gen
2116         New: end-gen
2116        Value: end-gen
2116        InstructionUpdate: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del cliente"), 0)'
2116      <-Source: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del cliente"), 0)'
2116     <--Switch: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del cliente"), 0)'
2116    <---Source: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del cliente"), 0)'
2116   <----Function: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del cliente"), 0)'
2116  <-----Source: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del cliente"), 0)'
2116 <------Class: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del cliente"), 0)'
2116<-------Source: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del cliente"), 0)'
2117       InstructionUpdate: end-gen
2117       InstructionFlow: begin-gen
2117        InstructionFlow: break: 'break '
2117      <-Source: break: 'break '
2117     <--Switch: line: 's15_do_work = False # BREAK'
2117    <---Source: line: 's15_do_work = False # BREAK'
2117   <----Function: line: 's15_do_work = False # BREAK'
2117  <-----Source: line: 's15_do_work = False # BREAK'
2117 <------Class: line: 's15_do_work = False # BREAK'
2117<-------Source: line: 's15_do_work = False # BREAK'
2118       InstructionFlow: end-gen
2118      Source: end-gen
2118      Switch: end: 'block-if'
2118    <-Source: end: 'block-if'
2118   <--Function: end: 'block-if'
2118  <---Source: end: 'block-if'
2118 <----Class: end: 'block-if'
2118<-----Source: end: 'block-if'
2118      Value: begin-gen
2118       Constant: begin-gen
2118        Constant: ctype: 'String' -> 'proveedores'
2118        Constant: expr: 'u"proveedores"'
2118      <-Value: expr: 'u"proveedores"'
2118       Constant: end-gen
2118      Value: end-gen
2118      Switch: line: 'if s15_when == u"proveedores": s15_do_work,s15_work_done = True,True'
2118    <-Source: line: 'if s15_when == u"proveedores": s15_do_work,s15_work_done = True,True'
2118   <--Function: line: 'if s15_when == u"proveedores": s15_do_work,s15_work_done = True,True'
2118  <---Source: line: 'if s15_when == u"proveedores": s15_do_work,s15_work_done = True,True'
2118 <----Class: line: 'if s15_when == u"proveedores": s15_do_work,s15_work_done = True,True'
2118<-----Source: line: 'if s15_when == u"proveedores": s15_do_work,s15_work_done = True,True'
2120      Switch: line: 'if s15_do_work:'
2120    <-Source: line: 'if s15_do_work:'
2120   <--Function: line: 'if s15_do_work:'
2120  <---Source: line: 'if s15_do_work:'
2120 <----Class: line: 'if s15_do_work:'
2120<-----Source: line: 'if s15_do_work:'
2121      Switch: begin: 'block-if'
2121    <-Source: begin: 'block-if'
2121   <--Function: begin: 'block-if'
2121  <---Source: begin: 'block-if'
2121 <----Class: begin: 'block-if'
2121<-----Source: begin: 'block-if'
2121      Source: begin-gen
2121       InstructionUpdate: begin-gen
2121        Identifier: begin-gen
2121         Identifier: expr: 'emailPrincipal'
2121        Identifier: end-gen
2121        OpUpdate: begin-gen
2121         OpUpdate: expr: '='
2121        OpUpdate: end-gen
2121        Value: begin-gen
2121         Member: begin-gen
2121          Identifier: begin-gen
2121           Identifier: expr: 'util'
2121          Identifier: end-gen
2121          FunctionCall: begin-gen
2121           Value: begin-gen
2121            Constant: begin-gen
2121             Constant: ctype: 'String' -> 'proveedores'
2121             Constant: expr: 'u"proveedores"'
2121           <-Value: expr: 'u"proveedores"'
2121            Constant: end-gen
2121           Value: end-gen
2121           Value: begin-gen
2121            Constant: begin-gen
2121             Constant: ctype: 'String' -> 'email'
2121             Constant: expr: 'u"email"'
2121           <-Value: expr: 'u"email"'
2121            Constant: end-gen
2121           Value: end-gen
2121           Expression: begin-gen
2121            Expression: expr: 'ustr('
2121            Constant: begin-gen
2121             Constant: ctype: 'String' -> "codproveedor = '"
2121             Constant: expr: 'u"codproveedor = \'"'
2121           <-Expression: expr: 'u"codproveedor = \'"'
2121            Constant: end-gen
2121            Expression: expr: ','
2121            Identifier: begin-gen
2121             Identifier: expr: 'codigo'
2121           <-Expression: expr: 'codigo'
2121            Identifier: end-gen
2121            Expression: expr: ','
2121            Constant: begin-gen
2121             Constant: ctype: 'String' -> "'"
2121             Constant: expr: 'u"\'"'
2121           <-Expression: expr: 'u"\'"'
2121            Constant: end-gen
2121            Expression: expr: ')'
2121           Expression: end-gen
2121           FunctionCall: expr: 'sqlSelect(u"proveedores", u"email", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2121          FunctionCall: end-gen
2121          Member: expr: 'util.sqlSelect(u"proveedores", u"email", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2121        <-Value: expr: 'util.sqlSelect(u"proveedores", u"email", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2121         Member: end-gen
2121        Value: end-gen
2121        InstructionUpdate: line: 'emailPrincipal = util.sqlSelect(u"proveedores", u"email", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2121      <-Source: line: 'emailPrincipal = util.sqlSelect(u"proveedores", u"email", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2121     <--Switch: line: 'emailPrincipal = util.sqlSelect(u"proveedores", u"email", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2121    <---Source: line: 'emailPrincipal = util.sqlSelect(u"proveedores", u"email", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2121   <----Function: line: 'emailPrincipal = util.sqlSelect(u"proveedores", u"email", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2121  <-----Source: line: 'emailPrincipal = util.sqlSelect(u"proveedores", u"email", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2121 <------Class: line: 'emailPrincipal = util.sqlSelect(u"proveedores", u"email", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2121<-------Source: line: 'emailPrincipal = util.sqlSelect(u"proveedores", u"email", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2122       InstructionUpdate: end-gen
2122       InstructionUpdate: begin-gen
2122        Identifier: begin-gen
2122         Identifier: expr: 'nombrePrincipal'
2122        Identifier: end-gen
2122        OpUpdate: begin-gen
2122         OpUpdate: expr: '='
2122        OpUpdate: end-gen
2122        Value: begin-gen
2122         Member: begin-gen
2122          Identifier: begin-gen
2122           Identifier: expr: 'util'
2122          Identifier: end-gen
2122          FunctionCall: begin-gen
2122           Value: begin-gen
2122            Constant: begin-gen
2122             Constant: ctype: 'String' -> 'proveedores'
2122             Constant: expr: 'u"proveedores"'
2122           <-Value: expr: 'u"proveedores"'
2122            Constant: end-gen
2122           Value: end-gen
2122           Value: begin-gen
2122            Constant: begin-gen
2122             Constant: ctype: 'String' -> 'nombre'
2122             Constant: expr: 'u"nombre"'
2122           <-Value: expr: 'u"nombre"'
2122            Constant: end-gen
2122           Value: end-gen
2122           Expression: begin-gen
2122            Expression: expr: 'ustr('
2122            Constant: begin-gen
2122             Constant: ctype: 'String' -> "codproveedor = '"
2122             Constant: expr: 'u"codproveedor = \'"'
2122           <-Expression: expr: 'u"codproveedor = \'"'
2122            Constant: end-gen
2122            Expression: expr: ','
2122            Identifier: begin-gen
2122             Identifier: expr: 'codigo'
2122           <-Expression: expr: 'codigo'
2122            Identifier: end-gen
2122            Expression: expr: ','
2122            Constant: begin-gen
2122             Constant: ctype: 'String' -> "'"
2122             Constant: expr: 'u"\'"'
2122           <-Expression: expr: 'u"\'"'
2122            Constant: end-gen
2122            Expression: expr: ')'
2122           Expression: end-gen
2122           FunctionCall: expr: 'sqlSelect(u"proveedores", u"nombre", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2122          FunctionCall: end-gen
2122          Member: expr: 'util.sqlSelect(u"proveedores", u"nombre", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2122        <-Value: expr: 'util.sqlSelect(u"proveedores", u"nombre", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2122         Member: end-gen
2122        Value: end-gen
2122        InstructionUpdate: line: 'nombrePrincipal = util.sqlSelect(u"proveedores", u"nombre", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2122      <-Source: line: 'nombrePrincipal = util.sqlSelect(u"proveedores", u"nombre", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2122     <--Switch: line: 'nombrePrincipal = util.sqlSelect(u"proveedores", u"nombre", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2122    <---Source: line: 'nombrePrincipal = util.sqlSelect(u"proveedores", u"nombre", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2122   <----Function: line: 'nombrePrincipal = util.sqlSelect(u"proveedores", u"nombre", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2122  <-----Source: line: 'nombrePrincipal = util.sqlSelect(u"proveedores", u"nombre", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2122 <------Class: line: 'nombrePrincipal = util.sqlSelect(u"proveedores", u"nombre", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2122<-------Source: line: 'nombrePrincipal = util.sqlSelect(u"proveedores", u"nombre", ustr( u"codproveedor = \'" , codigo , u"\'" ))'
2123       InstructionUpdate: end-gen
2123       InstructionCall: begin-gen
2123        Member: begin-gen
2123         Identifier: begin-gen
2123          Identifier: expr: 'q'
2123         Identifier: end-gen
2123         FunctionCall: begin-gen
2123          Value: begin-gen
2123           Constant: begin-gen
2123            Constant: ctype: 'String' -> 'contactosproveedores,crm_contactos'
2123            Constant: expr: 'u"contactosproveedores,crm_contactos"'
2123          <-Value: expr: 'u"contactosproveedores,crm_contactos"'
2123           Constant: end-gen
2123          Value: end-gen
2123          FunctionCall: expr: 'setTablesList(u"contactosproveedores,crm_contactos")'
2123         FunctionCall: end-gen
2123         Member: expr: 'q.setTablesList(u"contactosproveedores,crm_contactos")'
2123        Member: end-gen
2123        InstructionCall: line: 'q.setTablesList(u"contactosproveedores,crm_contactos")'
2123      <-Source: line: 'q.setTablesList(u"contactosproveedores,crm_contactos")'
2123     <--Switch: line: 'q.setTablesList(u"contactosproveedores,crm_contactos")'
2123    <---Source: line: 'q.setTablesList(u"contactosproveedores,crm_contactos")'
2123   <----Function: line: 'q.setTablesList(u"contactosproveedores,crm_contactos")'
2123  <-----Source: line: 'q.setTablesList(u"contactosproveedores,crm_contactos")'
2123 <------Class: line: 'q.setTablesList(u"contactosproveedores,crm_contactos")'
2123<-------Source: line: 'q.setTablesList(u"contactosproveedores,crm_contactos")'
2124       InstructionCall: end-gen
2124       InstructionCall: begin-gen
2124        Member: begin-gen
2124         Identifier: begin-gen
2124          Identifier: expr: 'q'
2124         Identifier: end-gen
2124         FunctionCall: begin-gen
2124          Value: begin-gen
2124           Constant: begin-gen
2124            Constant: ctype: 'String' -> 'contactosproveedores INNER JOIN crm_contactos ON contactosproveedores.codcontacto = crm_contactos.codcontacto'
2124            Constant: expr: 'u"contactosproveedores INNER JOIN crm_contactos ON contactosproveedores.codcontacto = crm_contactos.codcontacto"'
2124          <-Value: expr: 'u"contactosproveedores INNER JOIN crm_contactos ON contactosproveedores.codcontacto = crm_contactos.codcontacto"'
2124           Constant: end-gen
2124          Value: end-gen
2124          FunctionCall: expr: 'setFrom(u"contactosproveedores INNER JOIN crm_contactos ON contactosproveedores.codcontacto = crm_contactos.codcontacto")'
2124         FunctionCall: end-gen
2124         Member: expr: 'q.setFrom(u"contactosproveedores INNER JOIN crm_contactos ON contactosproveedores.codcontacto = crm_contactos.codcontacto")'
2124        Member: end-gen
2124        InstructionCall: line: 'q.setFrom(u"contactosproveedores INNER JOIN crm_contactos ON contactosproveedores.codcontacto = crm_contactos.codcontacto")'
2124      <-Source: line: 'q.setFrom(u"contactosproveedores INNER JOIN crm_contactos ON contactosproveedores.codcontacto = crm_contactos.codcontacto")'
2124     <--Switch: line: 'q.setFrom(u"contactosproveedores INNER JOIN crm_contactos ON contactosproveedores.codcontacto = crm_contactos.codcontacto")'
2124    <---Source: line: 'q.setFrom(u"contactosproveedores INNER JOIN crm_contactos ON contactosproveedores.codcontacto = crm_contactos.codcontacto")'
2124   <----Function: line: 'q.setFrom(u"contactosproveedores INNER JOIN crm_contactos ON contactosproveedores.codcontacto = crm_contactos.codcontacto")'
2124  <-----Source: line: 'q.setFrom(u"contactosproveedores INNER JOIN crm_contactos ON contactosproveedores.codcontacto = crm_contactos.codcontacto")'
2124 <------Class: line: 'q.setFrom(u"contactosproveedores INNER JOIN crm_contactos ON contactosproveedores.codcontacto = crm_contactos.codcontacto")'
2124<-------Source: line: 'q.setFrom(u"contactosproveedores INNER JOIN crm_contactos ON contactosproveedores.codcontacto = crm_contactos.codcontacto")'
2125       InstructionCall: end-gen
2125       InstructionCall: begin-gen
2125        Member: begin-gen
2125         Identifier: begin-gen
2125          Identifier: expr: 'q'
2125         Identifier: end-gen
2125         FunctionCall: begin-gen
2125          Value: begin-gen
2125           Constant: begin-gen
2125            Constant: ctype: 'String' -> 'crm_contactos.email,crm_contactos.nombre'
2125            Constant: expr: 'u"crm_contactos.email,crm_contactos.nombre"'
2125          <-Value: expr: 'u"crm_contactos.email,crm_contactos.nombre"'
2125           Constant: end-gen
2125          Value: end-gen
2125          FunctionCall: expr: 'setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2125         FunctionCall: end-gen
2125         Member: expr: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2125        Member: end-gen
2125        InstructionCall: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2125      <-Source: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2125     <--Switch: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2125    <---Source: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2125   <----Function: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2125  <-----Source: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2125 <------Class: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2125<-------Source: line: 'q.setSelect(u"crm_contactos.email,crm_contactos.nombre")'
2126       InstructionCall: end-gen
2126       InstructionCall: begin-gen
2126        Member: begin-gen
2126         Identifier: begin-gen
2126          Identifier: expr: 'q'
2126         Identifier: end-gen
2126         FunctionCall: begin-gen
2126          Expression: begin-gen
2126           Expression: expr: 'ustr('
2126           Constant: begin-gen
2126            Constant: ctype: 'String' -> "contactosproveedores.codproveedor = '"
2126            Constant: expr: 'u"contactosproveedores.codproveedor = \'"'
2126          <-Expression: expr: 'u"contactosproveedores.codproveedor = \'"'
2126           Constant: end-gen
2126           Expression: expr: ','
2126           Identifier: begin-gen
2126            Identifier: expr: 'codigo'
2126          <-Expression: expr: 'codigo'
2126           Identifier: end-gen
2126           Expression: expr: ','
2126           Constant: begin-gen
2126            Constant: ctype: 'String' -> "' AND (crm_contactos.email <> '' AND crm_contactos.email IS NOT NULL)"
2126            Constant: expr: 'u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)"'
2126          <-Expression: expr: 'u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)"'
2126           Constant: end-gen
2126           Expression: expr: ')'
2126          Expression: end-gen
2126          FunctionCall: expr: 'setWhere(ustr( u"contactosproveedores.codproveedor = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2126         FunctionCall: end-gen
2126         Member: expr: 'q.setWhere(ustr( u"contactosproveedores.codproveedor = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2126        Member: end-gen
2126        InstructionCall: line: 'q.setWhere(ustr( u"contactosproveedores.codproveedor = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2126      <-Source: line: 'q.setWhere(ustr( u"contactosproveedores.codproveedor = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2126     <--Switch: line: 'q.setWhere(ustr( u"contactosproveedores.codproveedor = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2126    <---Source: line: 'q.setWhere(ustr( u"contactosproveedores.codproveedor = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2126   <----Function: line: 'q.setWhere(ustr( u"contactosproveedores.codproveedor = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2126  <-----Source: line: 'q.setWhere(ustr( u"contactosproveedores.codproveedor = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2126 <------Class: line: 'q.setWhere(ustr( u"contactosproveedores.codproveedor = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2126<-------Source: line: 'q.setWhere(ustr( u"contactosproveedores.codproveedor = \'" , codigo , u"\' AND (crm_contactos.email <> \'\' AND crm_contactos.email IS NOT NULL)" ))'
2127       InstructionCall: end-gen
2127       If: begin-gen
2127        Value: begin-gen
2127         OpUnary: begin-gen
2127          OpUnary: expr: 'not'
2127        <-Value: expr: 'not'
2127          Member: begin-gen
2127           Identifier: begin-gen
2127            Identifier: expr: 'q'
2127           Identifier: end-gen
2127           FunctionCall: begin-gen
2127            FunctionCall: expr: 'exec_()'
2127           FunctionCall: end-gen
2127           Member: expr: 'q.exec_()'
2127         <-OpUnary: expr: 'q.exec_()'
2127        <--Value: expr: 'q.exec_()'
2127          Member: end-gen
2127         OpUnary: end-gen
2127        Value: end-gen
2127        If: line: 'if not q.exec_():'
2127      <-Source: line: 'if not q.exec_():'
2127     <--Switch: line: 'if not q.exec_():'
2127    <---Source: line: 'if not q.exec_():'
2127   <----Function: line: 'if not q.exec_():'
2127  <-----Source: line: 'if not q.exec_():'
2127 <------Class: line: 'if not q.exec_():'
2127<-------Source: line: 'if not q.exec_():'
2128        If: begin: 'block-if'
2128      <-Source: begin: 'block-if'
2128     <--Switch: begin: 'block-if'
2128    <---Source: begin: 'block-if'
2128   <----Function: begin: 'block-if'
2128  <-----Source: begin: 'block-if'
2128 <------Class: begin: 'block-if'
2128<-------Source: begin: 'block-if'
2128        Source: begin-gen
2128         InstructionFlow: begin-gen
2128          Value: begin-gen
2128           Identifier: begin-gen
2128            Identifier: expr: 'False'
2128          <-Value: expr: 'False'
2128           Identifier: end-gen
2128          Value: end-gen
2128          InstructionFlow: line: 'return False'
2128        <-Source: line: 'return False'
2128       <--If: line: 'return False'
2128      <---Source: line: 'return False'
2128     <----Switch: line: 'return False'
2128    <-----Source: line: 'return False'
2128   <------Function: line: 'return False'
2128  <-------Source: line: 'return False'
2128 <--------Class: line: 'return False'
2128<---------Source: line: 'return False'
2129         InstructionFlow: end-gen
2129        Source: end-gen
2129        If: end: 'block-if'
2129      <-Source: end: 'block-if'
2129     <--Switch: end: 'block-if'
2129    <---Source: end: 'block-if'
2129   <----Function: end: 'block-if'
2129  <-----Source: end: 'block-if'
2129 <------Class: end: 'block-if'
2129<-------Source: end: 'block-if'
2129       If: end-gen
2129       InstructionUpdate: begin-gen
2129        Identifier: begin-gen
2129         Identifier: expr: 'dialog'
2129        Identifier: end-gen
2129        OpUpdate: begin-gen
2129         OpUpdate: expr: '='
2129        OpUpdate: end-gen
2129        Value: begin-gen
2129         New: begin-gen
2129          FunctionCall: begin-gen
2129           Value: begin-gen
2129            Member: begin-gen
2129             Identifier: begin-gen
2129              Identifier: expr: 'util'
2129             Identifier: end-gen
2129             FunctionCall: begin-gen
2129              Value: begin-gen
2129               Constant: begin-gen
2129                Constant: ctype: 'String' -> 'scripts'
2129                Constant: expr: 'u"scripts"'
2129              <-Value: expr: 'u"scripts"'
2129               Constant: end-gen
2129              Value: end-gen
2129              Value: begin-gen
2129               Constant: begin-gen
2129                Constant: ctype: 'String' -> 'Contactos del proveedor'
2129                Constant: expr: 'u"Contactos del proveedor"'
2129              <-Value: expr: 'u"Contactos del proveedor"'
2129               Constant: end-gen
2129              Value: end-gen
2129              FunctionCall: expr: 'translate(u"scripts", u"Contactos del proveedor")'
2129             FunctionCall: end-gen
2129             Member: expr: 'util.translate(u"scripts", u"Contactos del proveedor")'
2129           <-Value: expr: 'util.translate(u"scripts", u"Contactos del proveedor")'
2129            Member: end-gen
2129           Value: end-gen
2129           Value: begin-gen
2129            Constant: begin-gen
2129             Constant: ctype: 'Number' -> '0'
2129             Constant: expr: '0'
2129           <-Value: expr: '0'
2129            Constant: end-gen
2129           Value: end-gen
2129           FunctionCall: expr: 'Dialog(util.translate(u"scripts", u"Contactos del proveedor"), 0)'
2129         <-New: expr: 'qsatype.Dialog(util.translate(u"scripts", u"Contactos del proveedor"), 0)'
2129        <--Value: expr: 'qsatype.Dialog(util.translate(u"scripts", u"Contactos del proveedor"), 0)'
2129          FunctionCall: end-gen
2129         New: end-gen
2129        Value: end-gen
2129        InstructionUpdate: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del proveedor"), 0)'
2129      <-Source: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del proveedor"), 0)'
2129     <--Switch: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del proveedor"), 0)'
2129    <---Source: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del proveedor"), 0)'
2129   <----Function: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del proveedor"), 0)'
2129  <-----Source: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del proveedor"), 0)'
2129 <------Class: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del proveedor"), 0)'
2129<-------Source: line: 'dialog = qsatype.Dialog(util.translate(u"scripts", u"Contactos del proveedor"), 0)'
2130       InstructionUpdate: end-gen
2130       InstructionFlow: begin-gen
2130        InstructionFlow: break: 'break '
2130      <-Source: break: 'break '
2130     <--Switch: line: 's15_do_work = False # BREAK'
2130    <---Source: line: 's15_do_work = False # BREAK'
2130   <----Function: line: 's15_do_work = False # BREAK'
2130  <-----Source: line: 's15_do_work = False # BREAK'
2130 <------Class: line: 's15_do_work = False # BREAK'
2130<-------Source: line: 's15_do_work = False # BREAK'
2131       InstructionFlow: end-gen
2131      Source: end-gen
2131      Switch: end: 'block-if'
2131    <-Source: end: 'block-if'
2131   <--Function: end: 'block-if'
2131  <---Source: end: 'block-if'
2131 <----Class: end: 'block-if'
2131<-----Source: end: 'block-if'
2131     Switch: end-gen
2131     InstructionCall: begin-gen
2131      FunctionCall: begin-gen
2131       Expression: begin-gen
2131        Expression: expr: 'ustr('
2131        Constant: begin-gen
2131         Constant: ctype: 'String' -> 'emailPrincipal '
2131         Constant: expr: 'u"emailPrincipal "'
2131       <-Expression: expr: 'u"emailPrincipal "'
2131        Constant: end-gen
2131        Expression: expr: ','
2131        Identifier: begin-gen
2131         Identifier: expr: 'emailPrincipal'
2131       <-Expression: expr: 'emailPrincipal'
2131        Identifier: end-gen
2131        Expression: expr: ')'
2131       Expression: end-gen
2131       FunctionCall: expr: 'debug(ustr( u"emailPrincipal " , emailPrincipal ))'
2131      FunctionCall: end-gen
2131      InstructionCall: line: 'debug(ustr( u"emailPrincipal " , emailPrincipal ))'
2131    <-Source: line: 'debug(ustr( u"emailPrincipal " , emailPrincipal ))'
2131   <--Function: line: 'debug(ustr( u"emailPrincipal " , emailPrincipal ))'
2131  <---Source: line: 'debug(ustr( u"emailPrincipal " , emailPrincipal ))'
2131 <----Class: line: 'debug(ustr( u"emailPrincipal " , emailPrincipal ))'
2131<-----Source: line: 'debug(ustr( u"emailPrincipal " , emailPrincipal ))'
2133     InstructionCall: end-gen
2133     InstructionUpdate: begin-gen
2133      Member: begin-gen
2133       Identifier: begin-gen
2133        Identifier: expr: 'dialog'
2133       Identifier: end-gen
2133       Identifier: begin-gen
2133        Identifier: expr: 'caption'
2133       Identifier: end-gen
2133       Member: expr: 'dialog.caption'
2133      Member: end-gen
2133      OpUpdate: begin-gen
2133       OpUpdate: expr: '='
2133      OpUpdate: end-gen
2133      Value: begin-gen
2133       Constant: begin-gen
2133        Constant: ctype: 'String' -> 'Selecciona el destinatario'
2133        Constant: expr: 'u"Selecciona el destinatario"'
2133      <-Value: expr: 'u"Selecciona el destinatario"'
2133       Constant: end-gen
2133      Value: end-gen
2133      InstructionUpdate: line: 'dialog.caption = u"Selecciona el destinatario"'
2133    <-Source: line: 'dialog.caption = u"Selecciona el destinatario"'
2133   <--Function: line: 'dialog.caption = u"Selecciona el destinatario"'
2133  <---Source: line: 'dialog.caption = u"Selecciona el destinatario"'
2133 <----Class: line: 'dialog.caption = u"Selecciona el destinatario"'
2133<-----Source: line: 'dialog.caption = u"Selecciona el destinatario"'
2134     InstructionUpdate: end-gen
2134     InstructionUpdate: begin-gen
2134      Member: begin-gen
2134       Identifier: begin-gen
2134        Identifier: expr: 'dialog'
2134       Identifier: end-gen
2134       Identifier: begin-gen
2134        Identifier: expr: 'OKButtonText'
2134       Identifier: end-gen
2134       Member: expr: 'dialog.OKButtonText'
2134      Member: end-gen
2134      OpUpdate: begin-gen
2134       OpUpdate: expr: '='
2134      OpUpdate: end-gen
2134      Value: begin-gen
2134       Member: begin-gen
2134        Identifier: begin-gen
2134         Identifier: expr: 'util'
2134        Identifier: end-gen
2134        FunctionCall: begin-gen
2134         Value: begin-gen
2134          Constant: begin-gen
2134           Constant: ctype: 'String' -> 'scripts'
2134           Constant: expr: 'u"scripts"'
2134         <-Value: expr: 'u"scripts"'
2134          Constant: end-gen
2134         Value: end-gen
2134         Value: begin-gen
2134          Constant: begin-gen
2134           Constant: ctype: 'String' -> 'Aceptar'
2134           Constant: expr: 'u"Aceptar"'
2134         <-Value: expr: 'u"Aceptar"'
2134          Constant: end-gen
2134         Value: end-gen
2134         FunctionCall: expr: 'translate(u"scripts", u"Aceptar")'
2134        FunctionCall: end-gen
2134        Member: expr: 'util.translate(u"scripts", u"Aceptar")'
2134      <-Value: expr: 'util.translate(u"scripts", u"Aceptar")'
2134       Member: end-gen
2134      Value: end-gen
2134      InstructionUpdate: line: 'dialog.OKButtonText = util.translate(u"scripts", u"Aceptar")'
2134    <-Source: line: 'dialog.OKButtonText = util.translate(u"scripts", u"Aceptar")'
2134   <--Function: line: 'dialog.OKButtonText = util.translate(u"scripts", u"Aceptar")'
2134  <---Source: line: 'dialog.OKButtonText = util.translate(u"scripts", u"Aceptar")'
2134 <----Class: line: 'dialog.OKButtonText = util.translate(u"scripts", u"Aceptar")'
2134<-----Source: line: 'dialog.OKButtonText = util.translate(u"scripts", u"Aceptar")'
2135     InstructionUpdate: end-gen
2135     InstructionUpdate: begin-gen
2135      Member: begin-gen
2135       Identifier: begin-gen
2135        Identifier: expr: 'dialog'
2135       Identifier: end-gen
2135       Identifier: begin-gen
2135        Identifier: expr: 'cancelButtonText'
2135       Identifier: end-gen
2135       Member: expr: 'dialog.cancelButtonText'
2135      Member: end-gen
2135      OpUpdate: begin-gen
2135       OpUpdate: expr: '='
2135      OpUpdate: end-gen
2135      Value: begin-gen
2135       Member: begin-gen
2135        Identifier: begin-gen
2135         Identifier: expr: 'util'
2135        Identifier: end-gen
2135        FunctionCall: begin-gen
2135         Value: begin-gen
2135          Constant: begin-gen
2135           Constant: ctype: 'String' -> 'scripts'
2135           Constant: expr: 'u"scripts"'
2135         <-Value: expr: 'u"scripts"'
2135          Constant: end-gen
2135         Value: end-gen
2135         Value: begin-gen
2135          Constant: begin-gen
2135           Constant: ctype: 'String' -> 'Cancelar'
2135           Constant: expr: 'u"Cancelar"'
2135         <-Value: expr: 'u"Cancelar"'
2135          Constant: end-gen
2135         Value: end-gen
2135         FunctionCall: expr: 'translate(u"scripts", u"Cancelar")'
2135        FunctionCall: end-gen
2135        Member: expr: 'util.translate(u"scripts", u"Cancelar")'
2135      <-Value: expr: 'util.translate(u"scripts", u"Cancelar")'
2135       Member: end-gen
2135      Value: end-gen
2135      InstructionUpdate: line: 'dialog.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
2135    <-Source: line: 'dialog.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
2135   <--Function: line: 'dialog.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
2135  <---Source: line: 'dialog.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
2135 <----Class: line: 'dialog.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
2135<-----Source: line: 'dialog.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
2136     InstructionUpdate: end-gen
2136     DeclarationBlock: begin-gen
2136      Variable: begin-gen
2136       Variable: expr: 'bgroup'
2136       Variable: expr: '='
2136       Value: begin-gen
2136        New: begin-gen
2136         Identifier: begin-gen
2136          Identifier: expr: 'GroupBox'
2136        <-New: expr: 'qsatype.GroupBox()'
2136       <--Value: expr: 'qsatype.GroupBox()'
2136      <---Variable: expr: 'qsatype.GroupBox()'
2136         Identifier: end-gen
2136        New: end-gen
2136       Value: end-gen
2136      Variable: end-gen
2136      DeclarationBlock: line: 'bgroup = qsatype.GroupBox()'
2136    <-Source: line: 'bgroup = qsatype.GroupBox()'
2136   <--Function: line: 'bgroup = qsatype.GroupBox()'
2136  <---Source: line: 'bgroup = qsatype.GroupBox()'
2136 <----Class: line: 'bgroup = qsatype.GroupBox()'
2136<-----Source: line: 'bgroup = qsatype.GroupBox()'
2137     DeclarationBlock: end-gen
2137     InstructionCall: begin-gen
2137      Member: begin-gen
2137       Identifier: begin-gen
2137        Identifier: expr: 'dialog'
2137       Identifier: end-gen
2137       FunctionCall: begin-gen
2137        Value: begin-gen
2137         Identifier: begin-gen
2137          Identifier: expr: 'bgroup'
2137        <-Value: expr: 'bgroup'
2137         Identifier: end-gen
2137        Value: end-gen
2137        FunctionCall: expr: 'add(bgroup)'
2137       FunctionCall: end-gen
2137       Member: expr: 'dialog.add(bgroup)'
2137      Member: end-gen
2137      InstructionCall: line: 'dialog.add(bgroup)'
2137    <-Source: line: 'dialog.add(bgroup)'
2137   <--Function: line: 'dialog.add(bgroup)'
2137  <---Source: line: 'dialog.add(bgroup)'
2137 <----Class: line: 'dialog.add(bgroup)'
2137<-----Source: line: 'dialog.add(bgroup)'
2138     InstructionCall: end-gen
2138     DeclarationBlock: begin-gen
2138      Variable: begin-gen
2138       Variable: expr: 'cB'
2138       Variable: expr: '='
2138       Value: begin-gen
2138        Constant: begin-gen
2138         Constant: ctype: None -> None
2138         Constant: expr: '[]'
2138       <-Value: expr: '[]'
2138      <--Variable: expr: 'qsatype.Array()'
2138        Constant: end-gen
2138       Value: end-gen
2138      Variable: end-gen
2138      DeclarationBlock: line: 'cB = qsatype.Array()'
2138    <-Source: line: 'cB = qsatype.Array()'
2138   <--Function: line: 'cB = qsatype.Array()'
2138  <---Source: line: 'cB = qsatype.Array()'
2138 <----Class: line: 'cB = qsatype.Array()'
2138<-----Source: line: 'cB = qsatype.Array()'
2139     DeclarationBlock: end-gen
2139     DeclarationBlock: begin-gen
2139      Variable: begin-gen
2139       Variable: expr: 'nEmails'
2139       Variable: expr: '='
2139       Value: begin-gen
2139        Constant: begin-gen
2139         Constant: ctype: 'Number' -> '0'
2139         Constant: expr: '0'
2139       <-Value: expr: '0'
2139      <--Variable: expr: '0'
2139        Constant: end-gen
2139       Value: end-gen
2139      Variable: end-gen
2139      DeclarationBlock: line: 'nEmails = 0'
2139    <-Source: line: 'nEmails = 0'
2139   <--Function: line: 'nEmails = 0'
2139  <---Source: line: 'nEmails = 0'
2139 <----Class: line: 'nEmails = 0'
2139<-----Source: line: 'nEmails = 0'
2140     DeclarationBlock: end-gen
2140     InstructionUpdate: begin-gen
2140      ArrayMember: begin-gen
2140       Identifier: begin-gen
2140        Identifier: expr: 'cB'
2140       Identifier: end-gen
2140       Value: begin-gen
2140        Identifier: begin-gen
2140         Identifier: expr: 'nEmails'
2140       <-Value: expr: 'nEmails'
2140        Identifier: end-gen
2140       Value: end-gen
2140       ArrayMember: expr: 'cB[nEmails]'
2140      ArrayMember: end-gen
2140      OpUpdate: begin-gen
2140       OpUpdate: expr: '='
2140      OpUpdate: end-gen
2140      Value: begin-gen
2140       New: begin-gen
2140        Identifier: begin-gen
2140         Identifier: expr: 'CheckBox'
2140       <-New: expr: 'qsatype.CheckBox()'
2140      <--Value: expr: 'qsatype.CheckBox()'
2140        Identifier: end-gen
2140       New: end-gen
2140      Value: end-gen
2140      InstructionUpdate: line: 'cB[nEmails] = qsatype.CheckBox()'
2140    <-Source: line: 'cB[nEmails] = qsatype.CheckBox()'
2140   <--Function: line: 'cB[nEmails] = qsatype.CheckBox()'
2140  <---Source: line: 'cB[nEmails] = qsatype.CheckBox()'
2140 <----Class: line: 'cB[nEmails] = qsatype.CheckBox()'
2140<-----Source: line: 'cB[nEmails] = qsatype.CheckBox()'
2141     InstructionUpdate: end-gen
2141     InstructionUpdate: begin-gen
2141      Member: begin-gen
2141       ArrayMember: begin-gen
2141        Identifier: begin-gen
2141         Identifier: expr: 'cB'
2141        Identifier: end-gen
2141        Value: begin-gen
2141         Identifier: begin-gen
2141          Identifier: expr: 'nEmails'
2141        <-Value: expr: 'nEmails'
2141         Identifier: end-gen
2141        Value: end-gen
2141        ArrayMember: expr: 'cB[nEmails]'
2141       ArrayMember: end-gen
2141       Identifier: begin-gen
2141        Identifier: expr: 'text'
2141       Identifier: end-gen
2141       Member: expr: 'cB[nEmails].text'
2141      Member: end-gen
2141      OpUpdate: begin-gen
2141       OpUpdate: expr: '='
2141      OpUpdate: end-gen
2141      Value: begin-gen
2141       Member: begin-gen
2141        Identifier: begin-gen
2141         Identifier: expr: 'util'
2141        Identifier: end-gen
2141        FunctionCall: begin-gen
2141         Value: begin-gen
2141          Constant: begin-gen
2141           Constant: ctype: 'String' -> 'scripts'
2141           Constant: expr: 'u"scripts"'
2141         <-Value: expr: 'u"scripts"'
2141          Constant: end-gen
2141         Value: end-gen
2141         Expression: begin-gen
2141          Expression: expr: 'ustr('
2141          Identifier: begin-gen
2141           Identifier: expr: 'nombrePrincipal'
2141         <-Expression: expr: 'nombrePrincipal'
2141          Identifier: end-gen
2141          Expression: expr: ','
2141          Constant: begin-gen
2141           Constant: ctype: 'String' -> ' ('
2141           Constant: expr: 'u" ("'
2141         <-Expression: expr: 'u" ("'
2141          Constant: end-gen
2141          Expression: expr: ','
2141          Identifier: begin-gen
2141           Identifier: expr: 'emailPrincipal'
2141         <-Expression: expr: 'emailPrincipal'
2141          Identifier: end-gen
2141          Expression: expr: ','
2141          Constant: begin-gen
2141           Constant: ctype: 'String' -> ')'
2141           Constant: expr: 'u")"'
2141         <-Expression: expr: 'u")"'
2141          Constant: end-gen
2141          Expression: expr: ')'
2141         Expression: end-gen
2141         FunctionCall: expr: 'translate(u"scripts", ustr( nombrePrincipal , u" (" , emailPrincipal , u")" ))'
2141        FunctionCall: end-gen
2141        Member: expr: 'util.translate(u"scripts", ustr( nombrePrincipal , u" (" , emailPrincipal , u")" ))'
2141      <-Value: expr: 'util.translate(u"scripts", ustr( nombrePrincipal , u" (" , emailPrincipal , u")" ))'
2141       Member: end-gen
2141      Value: end-gen
2141      InstructionUpdate: line: 'cB[nEmails].text = util.translate(u"scripts", ustr( nombrePrincipal , u" (" , emailPrincipal , u")" ))'
2141    <-Source: line: 'cB[nEmails].text = util.translate(u"scripts", ustr( nombrePrincipal , u" (" , emailPrincipal , u")" ))'
2141   <--Function: line: 'cB[nEmails].text = util.translate(u"scripts", ustr( nombrePrincipal , u" (" , emailPrincipal , u")" ))'
2141  <---Source: line: 'cB[nEmails].text = util.translate(u"scripts", ustr( nombrePrincipal , u" (" , emailPrincipal , u")" ))'
2141 <----Class: line: 'cB[nEmails].text = util.translate(u"scripts", ustr( nombrePrincipal , u" (" , emailPrincipal , u")" ))'
2141<-----Source: line: 'cB[nEmails].text = util.translate(u"scripts", ustr( nombrePrincipal , u" (" , emailPrincipal , u")" ))'
2142     InstructionUpdate: end-gen
2142     InstructionUpdate: begin-gen
2142      ArrayMember: begin-gen
2142       Identifier: begin-gen
2142        Identifier: expr: 'arrayMails'
2142       Identifier: end-gen
2142       Value: begin-gen
2142        Identifier: begin-gen
2142         Identifier: expr: 'nEmails'
2142       <-Value: expr: 'nEmails'
2142        Identifier: end-gen
2142       Value: end-gen
2142       ArrayMember: expr: 'arrayMails[nEmails]'
2142      ArrayMember: end-gen
2142      OpUpdate: begin-gen
2142       OpUpdate: expr: '='
2142      OpUpdate: end-gen
2142      Value: begin-gen
2142       Identifier: begin-gen
2142        Identifier: expr: 'emailPrincipal'
2142      <-Value: expr: 'emailPrincipal'
2142       Identifier: end-gen
2142      Value: end-gen
2142      InstructionUpdate: line: 'arrayMails[nEmails] = emailPrincipal'
2142    <-Source: line: 'arrayMails[nEmails] = emailPrincipal'
2142   <--Function: line: 'arrayMails[nEmails] = emailPrincipal'
2142  <---Source: line: 'arrayMails[nEmails] = emailPrincipal'
2142 <----Class: line: 'arrayMails[nEmails] = emailPrincipal'
2142<-----Source: line: 'arrayMails[nEmails] = emailPrincipal'
2143     InstructionUpdate: end-gen
2143     InstructionUpdate: begin-gen
2143      Member: begin-gen
2143       ArrayMember: begin-gen
2143        Identifier: begin-gen
2143         Identifier: expr: 'cB'
2143        Identifier: end-gen
2143        Value: begin-gen
2143         Identifier: begin-gen
2143          Identifier: expr: 'nEmails'
2143        <-Value: expr: 'nEmails'
2143         Identifier: end-gen
2143        Value: end-gen
2143        ArrayMember: expr: 'cB[nEmails]'
2143       ArrayMember: end-gen
2143       Identifier: begin-gen
2143        Identifier: expr: 'checked'
2143       Identifier: end-gen
2143       Member: expr: 'cB[nEmails].checked'
2143      Member: end-gen
2143      OpUpdate: begin-gen
2143       OpUpdate: expr: '='
2143      OpUpdate: end-gen
2143      Value: begin-gen
2143       Identifier: begin-gen
2143        Identifier: expr: 'True'
2143      <-Value: expr: 'True'
2143       Identifier: end-gen
2143      Value: end-gen
2143      InstructionUpdate: line: 'cB[nEmails].checked = True'
2143    <-Source: line: 'cB[nEmails].checked = True'
2143   <--Function: line: 'cB[nEmails].checked = True'
2143  <---Source: line: 'cB[nEmails].checked = True'
2143 <----Class: line: 'cB[nEmails].checked = True'
2143<-----Source: line: 'cB[nEmails].checked = True'
2144     InstructionUpdate: end-gen
2144     InstructionCall: begin-gen
2144      Member: begin-gen
2144       Identifier: begin-gen
2144        Identifier: expr: 'bgroup'
2144       Identifier: end-gen
2144       FunctionCall: begin-gen
2144        Value: begin-gen
2144         ArrayMember: begin-gen
2144          Identifier: begin-gen
2144           Identifier: expr: 'cB'
2144          Identifier: end-gen
2144          Value: begin-gen
2144           Identifier: begin-gen
2144            Identifier: expr: 'nEmails'
2144          <-Value: expr: 'nEmails'
2144           Identifier: end-gen
2144          Value: end-gen
2144          ArrayMember: expr: 'cB[nEmails]'
2144        <-Value: expr: 'cB[nEmails]'
2144         ArrayMember: end-gen
2144        Value: end-gen
2144        FunctionCall: expr: 'add(cB[nEmails])'
2144       FunctionCall: end-gen
2144       Member: expr: 'bgroup.add(cB[nEmails])'
2144      Member: end-gen
2144      InstructionCall: line: 'bgroup.add(cB[nEmails])'
2144    <-Source: line: 'bgroup.add(cB[nEmails])'
2144   <--Function: line: 'bgroup.add(cB[nEmails])'
2144  <---Source: line: 'bgroup.add(cB[nEmails])'
2144 <----Class: line: 'bgroup.add(cB[nEmails])'
2144<-----Source: line: 'bgroup.add(cB[nEmails])'
2145     InstructionCall: end-gen
2145     InlineUpdate: begin-gen
2145      Identifier: begin-gen
2145       Identifier: expr: 'nEmails'
2145      Identifier: end-gen
2145      InlineUpdate: line: 'nEmails += 1'
2145    <-Source: line: 'nEmails += 1'
2145   <--Function: line: 'nEmails += 1'
2145  <---Source: line: 'nEmails += 1'
2145 <----Class: line: 'nEmails += 1'
2145<-----Source: line: 'nEmails += 1'
2146     InlineUpdate: end-gen
2146     While: begin-gen
2146      Value: begin-gen
2146       Member: begin-gen
2146        Identifier: begin-gen
2146         Identifier: expr: 'q'
2146        Identifier: end-gen
2146        FunctionCall: begin-gen
2146         FunctionCall: expr: 'next()'
2146        FunctionCall: end-gen
2146        Member: expr: 'q.next()'
2146      <-Value: expr: 'q.next()'
2146       Member: end-gen
2146      Value: end-gen
2146      While: line: 'while q.next():'
2146    <-Source: line: 'while q.next():'
2146   <--Function: line: 'while q.next():'
2146  <---Source: line: 'while q.next():'
2146 <----Class: line: 'while q.next():'
2146<-----Source: line: 'while q.next():'
2147      While: begin: 'block-while'
2147    <-Source: begin: 'block-while'
2147   <--Function: begin: 'block-while'
2147  <---Source: begin: 'block-while'
2147 <----Class: begin: 'block-while'
2147<-----Source: begin: 'block-while'
2147      Source: begin-gen
2147       InstructionUpdate: begin-gen
2147        ArrayMember: begin-gen
2147         Identifier: begin-gen
2147          Identifier: expr: 'cB'
2147         Identifier: end-gen
2147         Value: begin-gen
2147          Identifier: begin-gen
2147           Identifier: expr: 'nEmails'
2147         <-Value: expr: 'nEmails'
2147          Identifier: end-gen
2147         Value: end-gen
2147         ArrayMember: expr: 'cB[nEmails]'
2147        ArrayMember: end-gen
2147        OpUpdate: begin-gen
2147         OpUpdate: expr: '='
2147        OpUpdate: end-gen
2147        Value: begin-gen
2147         New: begin-gen
2147          Identifier: begin-gen
2147           Identifier: expr: 'CheckBox'
2147         <-New: expr: 'qsatype.CheckBox()'
2147        <--Value: expr: 'qsatype.CheckBox()'
2147          Identifier: end-gen
2147         New: end-gen
2147        Value: end-gen
2147        InstructionUpdate: line: 'cB[nEmails] = qsatype.CheckBox()'
2147      <-Source: line: 'cB[nEmails] = qsatype.CheckBox()'
2147     <--While: line: 'cB[nEmails] = qsatype.CheckBox()'
2147    <---Source: line: 'cB[nEmails] = qsatype.CheckBox()'
2147   <----Function: line: 'cB[nEmails] = qsatype.CheckBox()'
2147  <-----Source: line: 'cB[nEmails] = qsatype.CheckBox()'
2147 <------Class: line: 'cB[nEmails] = qsatype.CheckBox()'
2147<-------Source: line: 'cB[nEmails] = qsatype.CheckBox()'
2148       InstructionUpdate: end-gen
2148       InstructionUpdate: begin-gen
2148        Member: begin-gen
2148         ArrayMember: begin-gen
2148          Identifier: begin-gen
2148           Identifier: expr: 'cB'
2148          Identifier: end-gen
2148          Value: begin-gen
2148           Identifier: begin-gen
2148            Identifier: expr: 'nEmails'
2148          <-Value: expr: 'nEmails'
2148           Identifier: end-gen
2148          Value: end-gen
2148          ArrayMember: expr: 'cB[nEmails]'
2148         ArrayMember: end-gen
2148         Identifier: begin-gen
2148          Identifier: expr: 'text'
2148         Identifier: end-gen
2148         Member: expr: 'cB[nEmails].text'
2148        Member: end-gen
2148        OpUpdate: begin-gen
2148         OpUpdate: expr: '='
2148        OpUpdate: end-gen
2148        Value: begin-gen
2148         Member: begin-gen
2148          Identifier: begin-gen
2148           Identifier: expr: 'util'
2148          Identifier: end-gen
2148          FunctionCall: begin-gen
2148           Value: begin-gen
2148            Constant: begin-gen
2148             Constant: ctype: 'String' -> 'scripts'
2148             Constant: expr: 'u"scripts"'
2148           <-Value: expr: 'u"scripts"'
2148            Constant: end-gen
2148           Value: end-gen
2148           Expression: begin-gen
2148            Expression: expr: 'ustr('
2148            Member: begin-gen
2148             Identifier: begin-gen
2148              Identifier: expr: 'q'
2148             Identifier: end-gen
2148             FunctionCall: begin-gen
2148              Value: begin-gen
2148               Constant: begin-gen
2148                Constant: ctype: 'Number' -> '1'
2148                Constant: expr: '1'
2148              <-Value: expr: '1'
2148               Constant: end-gen
2148              Value: end-gen
2148              FunctionCall: expr: 'value(1)'
2148             FunctionCall: end-gen
2148             Member: expr: 'q.value(1)'
2148           <-Expression: expr: 'q.value(1)'
2148            Member: end-gen
2148            Expression: expr: ','
2148            Constant: begin-gen
2148             Constant: ctype: 'String' -> ' ('
2148             Constant: expr: 'u" ("'
2148           <-Expression: expr: 'u" ("'
2148            Constant: end-gen
2148            Expression: expr: ','
2148            Member: begin-gen
2148             Identifier: begin-gen
2148              Identifier: expr: 'q'
2148             Identifier: end-gen
2148             FunctionCall: begin-gen
2148              Value: begin-gen
2148               Constant: begin-gen
2148                Constant: ctype: 'Number' -> '0'
2148                Constant: expr: '0'
2148              <-Value: expr: '0'
2148               Constant: end-gen
2148              Value: end-gen
2148              FunctionCall: expr: 'value(0)'
2148             FunctionCall: end-gen
2148             Member: expr: 'q.value(0)'
2148           <-Expression: expr: 'q.value(0)'
2148            Member: end-gen
2148            Expression: expr: ','
2148            Constant: begin-gen
2148             Constant: ctype: 'String' -> ')'
2148             Constant: expr: 'u")"'
2148           <-Expression: expr: 'u")"'
2148            Constant: end-gen
2148            Expression: expr: ')'
2148           Expression: end-gen
2148           FunctionCall: expr: 'translate(u"scripts", ustr( q.value(1) , u" (" , q.value(0) , u")" ))'
2148          FunctionCall: end-gen
2148          Member: expr: 'util.translate(u"scripts", ustr( q.value(1) , u" (" , q.value(0) , u")" ))'
2148        <-Value: expr: 'util.translate(u"scripts", ustr( q.value(1) , u" (" , q.value(0) , u")" ))'
2148         Member: end-gen
2148        Value: end-gen
2148        InstructionUpdate: line: 'cB[nEmails].text = util.translate(u"scripts", ustr( q.value(1) , u" (" , q.value(0) , u")" ))'
2148      <-Source: line: 'cB[nEmails].text = util.translate(u"scripts", ustr( q.value(1) , u" (" , q.value(0) , u")" ))'
2148     <--While: line: 'cB[nEmails].text = util.translate(u"scripts", ustr( q.value(1) , u" (" , q.value(0) , u")" ))'
2148    <---Source: line: 'cB[nEmails].text = util.translate(u"scripts", ustr( q.value(1) , u" (" , q.value(0) , u")" ))'
2148   <----Function: line: 'cB[nEmails].text = util.translate(u"scripts", ustr( q.value(1) , u" (" , q.value(0) , u")" ))'
2148  <-----Source: line: 'cB[nEmails].text = util.translate(u"scripts", ustr( q.value(1) , u" (" , q.value(0) , u")" ))'
2148 <------Class: line: 'cB[nEmails].text = util.translate(u"scripts", ustr( q.value(1) , u" (" , q.value(0) , u")" ))'
2148<-------Source: line: 'cB[nEmails].text = util.translate(u"scripts", ustr( q.value(1) , u" (" , q.value(0) , u")" ))'
2149       InstructionUpdate: end-gen
2149       InstructionUpdate: begin-gen
2149        ArrayMember: begin-gen
2149         Identifier: begin-gen
2149          Identifier: expr: 'arrayMails'
2149         Identifier: end-gen
2149         Value: begin-gen
2149          Identifier: begin-gen
2149           Identifier: expr: 'nEmails'
2149         <-Value: expr: 'nEmails'
2149          Identifier: end-gen
2149         Value: end-gen
2149         ArrayMember: expr: 'arrayMails[nEmails]'
2149        ArrayMember: end-gen
2149        OpUpdate: begin-gen
2149         OpUpdate: expr: '='
2149        OpUpdate: end-gen
2149        Value: begin-gen
2149         Member: begin-gen
2149          Identifier: begin-gen
2149           Identifier: expr: 'q'
2149          Identifier: end-gen
2149          FunctionCall: begin-gen
2149           Value: begin-gen
2149            Constant: begin-gen
2149             Constant: ctype: 'Number' -> '0'
2149             Constant: expr: '0'
2149           <-Value: expr: '0'
2149            Constant: end-gen
2149           Value: end-gen
2149           FunctionCall: expr: 'value(0)'
2149          FunctionCall: end-gen
2149          Member: expr: 'q.value(0)'
2149        <-Value: expr: 'q.value(0)'
2149         Member: end-gen
2149        Value: end-gen
2149        InstructionUpdate: line: 'arrayMails[nEmails] = q.value(0)'
2149      <-Source: line: 'arrayMails[nEmails] = q.value(0)'
2149     <--While: line: 'arrayMails[nEmails] = q.value(0)'
2149    <---Source: line: 'arrayMails[nEmails] = q.value(0)'
2149   <----Function: line: 'arrayMails[nEmails] = q.value(0)'
2149  <-----Source: line: 'arrayMails[nEmails] = q.value(0)'
2149 <------Class: line: 'arrayMails[nEmails] = q.value(0)'
2149<-------Source: line: 'arrayMails[nEmails] = q.value(0)'
2150       InstructionUpdate: end-gen
2150       InstructionUpdate: begin-gen
2150        Member: begin-gen
2150         ArrayMember: begin-gen
2150          Identifier: begin-gen
2150           Identifier: expr: 'cB'
2150          Identifier: end-gen
2150          Value: begin-gen
2150           Identifier: begin-gen
2150            Identifier: expr: 'nEmails'
2150          <-Value: expr: 'nEmails'
2150           Identifier: end-gen
2150          Value: end-gen
2150          ArrayMember: expr: 'cB[nEmails]'
2150         ArrayMember: end-gen
2150         Identifier: begin-gen
2150          Identifier: expr: 'checked'
2150         Identifier: end-gen
2150         Member: expr: 'cB[nEmails].checked'
2150        Member: end-gen
2150        OpUpdate: begin-gen
2150         OpUpdate: expr: '='
2150        OpUpdate: end-gen
2150        Value: begin-gen
2150         Identifier: begin-gen
2150          Identifier: expr: 'False'
2150        <-Value: expr: 'False'
2150         Identifier: end-gen
2150        Value: end-gen
2150        InstructionUpdate: line: 'cB[nEmails].checked = False'
2150      <-Source: line: 'cB[nEmails].checked = False'
2150     <--While: line: 'cB[nEmails].checked = False'
2150    <---Source: line: 'cB[nEmails].checked = False'
2150   <----Function: line: 'cB[nEmails].checked = False'
2150  <-----Source: line: 'cB[nEmails].checked = False'
2150 <------Class: line: 'cB[nEmails].checked = False'
2150<-------Source: line: 'cB[nEmails].checked = False'
2151       InstructionUpdate: end-gen
2151       InstructionCall: begin-gen
2151        Member: begin-gen
2151         Identifier: begin-gen
2151          Identifier: expr: 'bgroup'
2151         Identifier: end-gen
2151         FunctionCall: begin-gen
2151          Value: begin-gen
2151           ArrayMember: begin-gen
2151            Identifier: begin-gen
2151             Identifier: expr: 'cB'
2151            Identifier: end-gen
2151            Value: begin-gen
2151             Identifier: begin-gen
2151              Identifier: expr: 'nEmails'
2151            <-Value: expr: 'nEmails'
2151             Identifier: end-gen
2151            Value: end-gen
2151            ArrayMember: expr: 'cB[nEmails]'
2151          <-Value: expr: 'cB[nEmails]'
2151           ArrayMember: end-gen
2151          Value: end-gen
2151          FunctionCall: expr: 'add(cB[nEmails])'
2151         FunctionCall: end-gen
2151         Member: expr: 'bgroup.add(cB[nEmails])'
2151        Member: end-gen
2151        InstructionCall: line: 'bgroup.add(cB[nEmails])'
2151      <-Source: line: 'bgroup.add(cB[nEmails])'
2151     <--While: line: 'bgroup.add(cB[nEmails])'
2151    <---Source: line: 'bgroup.add(cB[nEmails])'
2151   <----Function: line: 'bgroup.add(cB[nEmails])'
2151  <-----Source: line: 'bgroup.add(cB[nEmails])'
2151 <------Class: line: 'bgroup.add(cB[nEmails])'
2151<-------Source: line: 'bgroup.add(cB[nEmails])'
2152       InstructionCall: end-gen
2152       InlineUpdate: begin-gen
2152        Identifier: begin-gen
2152         Identifier: expr: 'nEmails'
2152        Identifier: end-gen
2152        InlineUpdate: line: 'nEmails += 1'
2152      <-Source: line: 'nEmails += 1'
2152     <--While: line: 'nEmails += 1'
2152    <---Source: line: 'nEmails += 1'
2152   <----Function: line: 'nEmails += 1'
2152  <-----Source: line: 'nEmails += 1'
2152 <------Class: line: 'nEmails += 1'
2152<-------Source: line: 'nEmails += 1'
2153       InlineUpdate: end-gen
2153      Source: end-gen
2153      While: end: 'block-while'
2153    <-Source: end: 'block-while'
2153   <--Function: end: 'block-while'
2153  <---Source: end: 'block-while'
2153 <----Class: end: 'block-while'
2153<-----Source: end: 'block-while'
2153     While: end-gen
2153     InstructionCall: begin-gen
2153      FunctionCall: begin-gen
2153       Expression: begin-gen
2153        Expression: expr: 'ustr('
2153        Constant: begin-gen
2153         Constant: ctype: 'String' -> 'nEmails '
2153         Constant: expr: 'u"nEmails "'
2153       <-Expression: expr: 'u"nEmails "'
2153        Constant: end-gen
2153        Expression: expr: ','
2153        Identifier: begin-gen
2153         Identifier: expr: 'nEmails'
2153       <-Expression: expr: 'nEmails'
2153        Identifier: end-gen
2153        Expression: expr: ')'
2153       Expression: end-gen
2153       FunctionCall: expr: 'debug(ustr( u"nEmails " , nEmails ))'
2153      FunctionCall: end-gen
2153      InstructionCall: line: 'debug(ustr( u"nEmails " , nEmails ))'
2153    <-Source: line: 'debug(ustr( u"nEmails " , nEmails ))'
2153   <--Function: line: 'debug(ustr( u"nEmails " , nEmails ))'
2153  <---Source: line: 'debug(ustr( u"nEmails " , nEmails ))'
2153 <----Class: line: 'debug(ustr( u"nEmails " , nEmails ))'
2153<-----Source: line: 'debug(ustr( u"nEmails " , nEmails ))'
2155     InstructionCall: end-gen
2155     If: begin-gen
2155      Expression: begin-gen
2155       Identifier: begin-gen
2155        Identifier: expr: 'nEmails'
2155      <-Expression: expr: 'nEmails'
2155       Identifier: end-gen
2155       Compare: begin-gen
2155        Compare: expr: '>'
2155      <-Expression: expr: '>'
2155       Compare: end-gen
2155       Constant: begin-gen
2155        Constant: ctype: 'Number' -> '1'
2155        Constant: expr: '1'
2155      <-Expression: expr: '1'
2155       Constant: end-gen
2155      Expression: end-gen
2155      If: line: 'if nEmails > 1:'
2155    <-Source: line: 'if nEmails > 1:'
2155   <--Function: line: 'if nEmails > 1:'
2155  <---Source: line: 'if nEmails > 1:'
2155 <----Class: line: 'if nEmails > 1:'
2155<-----Source: line: 'if nEmails > 1:'
2156      If: begin: 'block-if'
2156    <-Source: begin: 'block-if'
2156   <--Function: begin: 'block-if'
2156  <---Source: begin: 'block-if'
2156 <----Class: begin: 'block-if'
2156<-----Source: begin: 'block-if'
2156      Source: begin-gen
2156       InlineUpdate: begin-gen
2156        Identifier: begin-gen
2156         Identifier: expr: 'nEmails'
2156        Identifier: end-gen
2156        InlineUpdate: line: 'nEmails -= 1'
2156      <-Source: line: 'nEmails -= 1'
2156     <--If: line: 'nEmails -= 1'
2156    <---Source: line: 'nEmails -= 1'
2156   <----Function: line: 'nEmails -= 1'
2156  <-----Source: line: 'nEmails -= 1'
2156 <------Class: line: 'nEmails -= 1'
2156<-------Source: line: 'nEmails -= 1'
2157       InlineUpdate: end-gen
2157       DeclarationBlock: begin-gen
2157        Variable: begin-gen
2157         Variable: expr: 'lista'
2157         Variable: expr: '='
2157         Value: begin-gen
2157          Constant: begin-gen
2157           Constant: ctype: 'String' -> ''
2157           Constant: expr: 'u""'
2157         <-Value: expr: 'u""'
2157        <--Variable: expr: 'u""'
2157          Constant: end-gen
2157         Value: end-gen
2157        Variable: end-gen
2157        DeclarationBlock: line: 'lista = u""'
2157      <-Source: line: 'lista = u""'
2157     <--If: line: 'lista = u""'
2157    <---Source: line: 'lista = u""'
2157   <----Function: line: 'lista = u""'
2157  <-----Source: line: 'lista = u""'
2157 <------Class: line: 'lista = u""'
2157<-------Source: line: 'lista = u""'
2158       DeclarationBlock: end-gen
2158       If: begin-gen
2158        Value: begin-gen
2158         Member: begin-gen
2158          Identifier: begin-gen
2158           Identifier: expr: 'dialog'
2158          Identifier: end-gen
2158          FunctionCall: begin-gen
2158           FunctionCall: expr: 'exec_()'
2158          FunctionCall: end-gen
2158          Member: expr: 'dialog.exec_()'
2158        <-Value: expr: 'dialog.exec_()'
2158         Member: end-gen
2158        Value: end-gen
2158        If: line: 'if dialog.exec_():'
2158      <-Source: line: 'if dialog.exec_():'
2158     <--If: line: 'if dialog.exec_():'
2158    <---Source: line: 'if dialog.exec_():'
2158   <----Function: line: 'if dialog.exec_():'
2158  <-----Source: line: 'if dialog.exec_():'
2158 <------Class: line: 'if dialog.exec_():'
2158<-------Source: line: 'if dialog.exec_():'
2159        If: begin: 'block-if'
2159      <-Source: begin: 'block-if'
2159     <--If: begin: 'block-if'
2159    <---Source: begin: 'block-if'
2159   <----Function: begin: 'block-if'
2159  <-----Source: begin: 'block-if'
2159 <------Class: begin: 'block-if'
2159<-------Source: begin: 'block-if'
2159        Source: begin-gen
2159         For: begin-gen
2159          Variable: begin-gen
2159           Variable: expr: 'i'
2159           Variable: expr: '='
2159           Value: begin-gen
2159            Constant: begin-gen
2159             Constant: ctype: 'Number' -> '0'
2159             Constant: expr: '0'
2159           <-Value: expr: '0'
2159          <--Variable: expr: '0'
2159            Constant: end-gen
2159           Value: end-gen
2159          Variable: end-gen
2159          For: line: 'i = 0'
2159        <-Source: line: 'i = 0'
2159       <--If: line: 'i = 0'
2159      <---Source: line: 'i = 0'
2159     <----If: line: 'i = 0'
2159    <-----Source: line: 'i = 0'
2159   <------Function: line: 'i = 0'
2159  <-------Source: line: 'i = 0'
2159 <--------Class: line: 'i = 0'
2159<---------Source: line: 'i = 0'
2160          For: line: 'while_pass = True'
2160        <-Source: line: 'while_pass = True'
2160       <--If: line: 'while_pass = True'
2160      <---Source: line: 'while_pass = True'
2160     <----If: line: 'while_pass = True'
2160    <-----Source: line: 'while_pass = True'
2160   <------Function: line: 'while_pass = True'
2160  <-------Source: line: 'while_pass = True'
2160 <--------Class: line: 'while_pass = True'
2160<---------Source: line: 'while_pass = True'
2161          InlineUpdate: begin-gen
2161           Identifier: begin-gen
2161            Identifier: expr: 'i'
2161           Identifier: end-gen
2161           InlineUpdate: expr: 'i'
2161           InlineUpdate: line+1: 'i += 1'
2161          InlineUpdate: end-gen
2161          Expression: begin-gen
2161           Identifier: begin-gen
2161            Identifier: expr: 'i'
2161          <-Expression: expr: 'i'
2161           Identifier: end-gen
2161           Compare: begin-gen
2161            Compare: expr: '<='
2161          <-Expression: expr: '<='
2161           Compare: end-gen
2161           Identifier: begin-gen
2161            Identifier: expr: 'nEmails'
2161          <-Expression: expr: 'nEmails'
2161           Identifier: end-gen
2161          Expression: end-gen
2161          For: line: 'while i <= nEmails:'
2161        <-Source: line: 'while i <= nEmails:'
2161       <--If: line: 'while i <= nEmails:'
2161      <---Source: line: 'while i <= nEmails:'
2161     <----If: line: 'while i <= nEmails:'
2161    <-----Source: line: 'while i <= nEmails:'
2161   <------Function: line: 'while i <= nEmails:'
2161  <-------Source: line: 'while i <= nEmails:'
2161 <--------Class: line: 'while i <= nEmails:'
2161<---------Source: line: 'while i <= nEmails:'
2162          For: begin: 'block-for'
2162        <-Source: begin: 'block-for'
2162       <--If: begin: 'block-for'
2162      <---Source: begin: 'block-for'
2162     <----If: begin: 'block-for'
2162    <-----Source: begin: 'block-for'
2162   <------Function: begin: 'block-for'
2162  <-------Source: begin: 'block-for'
2162 <--------Class: begin: 'block-for'
2162<---------Source: begin: 'block-for'
2162          For: line: 'if not while_pass:'
2162        <-Source: line: 'if not while_pass:'
2162       <--If: line: 'if not while_pass:'
2162      <---Source: line: 'if not while_pass:'
2162     <----If: line: 'if not while_pass:'
2162    <-----Source: line: 'if not while_pass:'
2162   <------Function: line: 'if not while_pass:'
2162  <-------Source: line: 'if not while_pass:'
2162 <--------Class: line: 'if not while_pass:'
2162<---------Source: line: 'if not while_pass:'
2163          For: begin: 'block-while_pass'
2163        <-Source: begin: 'block-while_pass'
2163       <--If: begin: 'block-while_pass'
2163      <---Source: begin: 'block-while_pass'
2163     <----If: begin: 'block-while_pass'
2163    <-----Source: begin: 'block-while_pass'
2163   <------Function: begin: 'block-while_pass'
2163  <-------Source: begin: 'block-while_pass'
2163 <--------Class: begin: 'block-while_pass'
2163<---------Source: begin: 'block-while_pass'
2163          For: line: 'i += 1'
2163        <-Source: line: 'i += 1'
2163       <--If: line: 'i += 1'
2163      <---Source: line: 'i += 1'
2163     <----If: line: 'i += 1'
2163    <-----Source: line: 'i += 1'
2163   <------Function: line: 'i += 1'
2163  <-------Source: line: 'i += 1'
2163 <--------Class: line: 'i += 1'
2163<---------Source: line: 'i += 1'
2164          For: line: 'while_pass = True'
2164        <-Source: line: 'while_pass = True'
2164       <--If: line: 'while_pass = True'
2164      <---Source: line: 'while_pass = True'
2164     <----If: line: 'while_pass = True'
2164    <-----Source: line: 'while_pass = True'
2164   <------Function: line: 'while_pass = True'
2164  <-------Source: line: 'while_pass = True'
2164 <--------Class: line: 'while_pass = True'
2164<---------Source: line: 'while_pass = True'
2165          For: line: 'continue'
2165        <-Source: line: 'continue'
2165       <--If: line: 'continue'
2165      <---Source: line: 'continue'
2165     <----If: line: 'continue'
2165    <-----Source: line: 'continue'
2165   <------Function: line: 'continue'
2165  <-------Source: line: 'continue'
2165 <--------Class: line: 'continue'
2165<---------Source: line: 'continue'
2166          For: end: 'block-while_pass'
2166        <-Source: end: 'block-while_pass'
2166       <--If: end: 'block-while_pass'
2166      <---Source: end: 'block-while_pass'
2166     <----If: end: 'block-while_pass'
2166    <-----Source: end: 'block-while_pass'
2166   <------Function: end: 'block-while_pass'
2166  <-------Source: end: 'block-while_pass'
2166 <--------Class: end: 'block-while_pass'
2166<---------Source: end: 'block-while_pass'
2166          For: line: 'while_pass = False'
2166        <-Source: line: 'while_pass = False'
2166       <--If: line: 'while_pass = False'
2166      <---Source: line: 'while_pass = False'
2166     <----If: line: 'while_pass = False'
2166    <-----Source: line: 'while_pass = False'
2166   <------Function: line: 'while_pass = False'
2166  <-------Source: line: 'while_pass = False'
2166 <--------Class: line: 'while_pass = False'
2166<---------Source: line: 'while_pass = False'
2167          Source: begin-gen
2167           If: begin-gen
2167            Expression: begin-gen
2167             Member: begin-gen
2167              ArrayMember: begin-gen
2167               Identifier: begin-gen
2167                Identifier: expr: 'cB'
2167               Identifier: end-gen
2167               Value: begin-gen
2167                Identifier: begin-gen
2167                 Identifier: expr: 'i'
2167               <-Value: expr: 'i'
2167                Identifier: end-gen
2167               Value: end-gen
2167               ArrayMember: expr: 'cB[i]'
2167              ArrayMember: end-gen
2167              Identifier: begin-gen
2167               Identifier: expr: 'checked'
2167              Identifier: end-gen
2167              Member: expr: 'cB[i].checked'
2167            <-Expression: expr: 'cB[i].checked'
2167             Member: end-gen
2167             Compare: begin-gen
2167              Compare: expr: '=='
2167            <-Expression: expr: '=='
2167             Compare: end-gen
2167             Identifier: begin-gen
2167              Identifier: expr: 'True'
2167            <-Expression: expr: 'True'
2167             Identifier: end-gen
2167            Expression: end-gen
2167            If: line: 'if cB[i].checked == True:'
2167          <-Source: line: 'if cB[i].checked == True:'
2167         <--For: line: 'if cB[i].checked == True:'
2167        <---Source: line: 'if cB[i].checked == True:'
2167       <----If: line: 'if cB[i].checked == True:'
2167      <-----Source: line: 'if cB[i].checked == True:'
2167     <------If: line: 'if cB[i].checked == True:'
2167    <-------Source: line: 'if cB[i].checked == True:'
2167   <--------Function: line: 'if cB[i].checked == True:'
2167  <---------Source: line: 'if cB[i].checked == True:'
2167 <----------Class: line: 'if cB[i].checked == True:'
2167<-----------Source: line: 'if cB[i].checked == True:'
2168            If: begin: 'block-if'
2168          <-Source: begin: 'block-if'
2168         <--For: begin: 'block-if'
2168        <---Source: begin: 'block-if'
2168       <----If: begin: 'block-if'
2168      <-----Source: begin: 'block-if'
2168     <------If: begin: 'block-if'
2168    <-------Source: begin: 'block-if'
2168   <--------Function: begin: 'block-if'
2168  <---------Source: begin: 'block-if'
2168 <----------Class: begin: 'block-if'
2168<-----------Source: begin: 'block-if'
2168            Source: begin-gen
2168             InstructionCall: begin-gen
2168              FunctionCall: begin-gen
2168               Expression: begin-gen
2168                Expression: expr: 'ustr('
2168                Constant: begin-gen
2168                 Constant: ctype: 'String' -> 'arrayMails[i] '
2168                 Constant: expr: 'u"arrayMails[i] "'
2168               <-Expression: expr: 'u"arrayMails[i] "'
2168                Constant: end-gen
2168                Expression: expr: ','
2168                ArrayMember: begin-gen
2168                 Identifier: begin-gen
2168                  Identifier: expr: 'arrayMails'
2168                 Identifier: end-gen
2168                 Value: begin-gen
2168                  Identifier: begin-gen
2168                   Identifier: expr: 'i'
2168                 <-Value: expr: 'i'
2168                  Identifier: end-gen
2168                 Value: end-gen
2168                 ArrayMember: expr: 'arrayMails[i]'
2168               <-Expression: expr: 'arrayMails[i]'
2168                ArrayMember: end-gen
2168                Expression: expr: ')'
2168               Expression: end-gen
2168               FunctionCall: expr: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2168              FunctionCall: end-gen
2168              InstructionCall: line: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2168            <-Source: line: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2168           <--If: line: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2168          <---Source: line: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2168         <----For: line: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2168        <-----Source: line: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2168       <------If: line: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2168      <-------Source: line: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2168     <--------If: line: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2168    <---------Source: line: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2168   <----------Function: line: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2168  <-----------Source: line: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2168 <------------Class: line: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2168<-------------Source: line: 'debug(ustr( u"arrayMails[i] " , arrayMails[i] ))'
2169             InstructionCall: end-gen
2169             InstructionUpdate: begin-gen
2169              Identifier: begin-gen
2169               Identifier: expr: 'lista'
2169              Identifier: end-gen
2169              OpUpdate: begin-gen
2169               OpUpdate: expr: '+='
2169              OpUpdate: end-gen
2169              Expression: begin-gen
2169               Expression: expr: 'ustr('
2169               ArrayMember: begin-gen
2169                Identifier: begin-gen
2169                 Identifier: expr: 'arrayMails'
2169                Identifier: end-gen
2169                Value: begin-gen
2169                 Identifier: begin-gen
2169                  Identifier: expr: 'i'
2169                <-Value: expr: 'i'
2169                 Identifier: end-gen
2169                Value: end-gen
2169                ArrayMember: expr: 'arrayMails[i]'
2169              <-Expression: expr: 'arrayMails[i]'
2169               ArrayMember: end-gen
2169               Expression: expr: ','
2169               Constant: begin-gen
2169                Constant: ctype: 'String' -> ','
2169                Constant: expr: 'u","'
2169              <-Expression: expr: 'u","'
2169               Constant: end-gen
2169               Expression: expr: ')'
2169              Expression: end-gen
2169              InstructionUpdate: line: 'lista += ustr( arrayMails[i] , u"," )'
2169            <-Source: line: 'lista += ustr( arrayMails[i] , u"," )'
2169           <--If: line: 'lista += ustr( arrayMails[i] , u"," )'
2169          <---Source: line: 'lista += ustr( arrayMails[i] , u"," )'
2169         <----For: line: 'lista += ustr( arrayMails[i] , u"," )'
2169        <-----Source: line: 'lista += ustr( arrayMails[i] , u"," )'
2169       <------If: line: 'lista += ustr( arrayMails[i] , u"," )'
2169      <-------Source: line: 'lista += ustr( arrayMails[i] , u"," )'
2169     <--------If: line: 'lista += ustr( arrayMails[i] , u"," )'
2169    <---------Source: line: 'lista += ustr( arrayMails[i] , u"," )'
2169   <----------Function: line: 'lista += ustr( arrayMails[i] , u"," )'
2169  <-----------Source: line: 'lista += ustr( arrayMails[i] , u"," )'
2169 <------------Class: line: 'lista += ustr( arrayMails[i] , u"," )'
2169<-------------Source: line: 'lista += ustr( arrayMails[i] , u"," )'
2170             InstructionUpdate: end-gen
2170            Source: end-gen
2170            If: end: 'block-if'
2170          <-Source: end: 'block-if'
2170         <--For: end: 'block-if'
2170        <---Source: end: 'block-if'
2170       <----If: end: 'block-if'
2170      <-----Source: end: 'block-if'
2170     <------If: end: 'block-if'
2170    <-------Source: end: 'block-if'
2170   <--------Function: end: 'block-if'
2170  <---------Source: end: 'block-if'
2170 <----------Class: end: 'block-if'
2170<-----------Source: end: 'block-if'
2170           If: end-gen
2170          Source: end-gen
2170          For: line: 'i += 1'
2170        <-Source: line: 'i += 1'
2170       <--If: line: 'i += 1'
2170      <---Source: line: 'i += 1'
2170     <----If: line: 'i += 1'
2170    <-----Source: line: 'i += 1'
2170   <------Function: line: 'i += 1'
2170  <-------Source: line: 'i += 1'
2170 <--------Class: line: 'i += 1'
2170<---------Source: line: 'i += 1'
2171          For: line: 'while_pass = True'
2171        <-Source: line: 'while_pass = True'
2171       <--If: line: 'while_pass = True'
2171      <---Source: line: 'while_pass = True'
2171     <----If: line: 'while_pass = True'
2171    <-----Source: line: 'while_pass = True'
2171   <------Function: line: 'while_pass = True'
2171  <-------Source: line: 'while_pass = True'
2171 <--------Class: line: 'while_pass = True'
2171<---------Source: line: 'while_pass = True'
2172          For: line: 'try:'
2172        <-Source: line: 'try:'
2172       <--If: line: 'try:'
2172      <---Source: line: 'try:'
2172     <----If: line: 'try:'
2172    <-----Source: line: 'try:'
2172   <------Function: line: 'try:'
2172  <-------Source: line: 'try:'
2172 <--------Class: line: 'try:'
2172<---------Source: line: 'try:'
2173          For: begin: 'block-error-catch'
2173        <-Source: begin: 'block-error-catch'
2173       <--If: begin: 'block-error-catch'
2173      <---Source: begin: 'block-error-catch'
2173     <----If: begin: 'block-error-catch'
2173    <-----Source: begin: 'block-error-catch'
2173   <------Function: begin: 'block-error-catch'
2173  <-------Source: begin: 'block-error-catch'
2173 <--------Class: begin: 'block-error-catch'
2173<---------Source: begin: 'block-error-catch'
2173          For: line: 'i <= nEmails'
2173        <-Source: line: 'i <= nEmails'
2173       <--If: line: 'i <= nEmails'
2173      <---Source: line: 'i <= nEmails'
2173     <----If: line: 'i <= nEmails'
2173    <-----Source: line: 'i <= nEmails'
2173   <------Function: line: 'i <= nEmails'
2173  <-------Source: line: 'i <= nEmails'
2173 <--------Class: line: 'i <= nEmails'
2173<---------Source: line: 'i <= nEmails'
2174          For: end: 'block-error-catch'
2174        <-Source: end: 'block-error-catch'
2174       <--If: end: 'block-error-catch'
2174      <---Source: end: 'block-error-catch'
2174     <----If: end: 'block-error-catch'
2174    <-----Source: end: 'block-error-catch'
2174   <------Function: end: 'block-error-catch'
2174  <-------Source: end: 'block-error-catch'
2174 <--------Class: end: 'block-error-catch'
2174<---------Source: end: 'block-error-catch'
2174          For: line: 'except: break'
2174        <-Source: line: 'except: break'
2174       <--If: line: 'except: break'
2174      <---Source: line: 'except: break'
2174     <----If: line: 'except: break'
2174    <-----Source: line: 'except: break'
2174   <------Function: line: 'except: break'
2174  <-------Source: line: 'except: break'
2174 <--------Class: line: 'except: break'
2174<---------Source: line: 'except: break'
2175          For: end: 'block-for'
2175        <-Source: end: 'block-for'
2175       <--If: end: 'block-for'
2175      <---Source: end: 'block-for'
2175     <----If: end: 'block-for'
2175    <-----Source: end: 'block-for'
2175   <------Function: end: 'block-for'
2175  <-------Source: end: 'block-for'
2175 <--------Class: end: 'block-for'
2175<---------Source: end: 'block-for'
2175         For: end-gen
2175        Source: end-gen
2175        If: end: 'block-if'
2175      <-Source: end: 'block-if'
2175     <--If: end: 'block-if'
2175    <---Source: end: 'block-if'
2175   <----Function: end: 'block-if'
2175  <-----Source: end: 'block-if'
2175 <------Class: end: 'block-if'
2175<-------Source: end: 'block-if'
2175        If: line: 'else:'
2175      <-Source: line: 'else:'
2175     <--If: line: 'else:'
2175    <---Source: line: 'else:'
2175   <----Function: line: 'else:'
2175  <-----Source: line: 'else:'
2175 <------Class: line: 'else:'
2175<-------Source: line: 'else:'
2177        If: begin: 'block-else'
2177      <-Source: begin: 'block-else'
2177     <--If: begin: 'block-else'
2177    <---Source: begin: 'block-else'
2177   <----Function: begin: 'block-else'
2177  <-----Source: begin: 'block-else'
2177 <------Class: begin: 'block-else'
2177<-------Source: begin: 'block-else'
2177        Source: begin-gen
2177         InstructionFlow: begin-gen
2177          InstructionFlow: line: 'return '
2177        <-Source: line: 'return '
2177       <--If: line: 'return '
2177      <---Source: line: 'return '
2177     <----If: line: 'return '
2177    <-----Source: line: 'return '
2177   <------Function: line: 'return '
2177  <-------Source: line: 'return '
2177 <--------Class: line: 'return '
2177<---------Source: line: 'return '
2178         InstructionFlow: end-gen
2178        Source: end-gen
2178        If: end: 'block-else'
2178      <-Source: end: 'block-else'
2178     <--If: end: 'block-else'
2178    <---Source: end: 'block-else'
2178   <----Function: end: 'block-else'
2178  <-----Source: end: 'block-else'
2178 <------Class: end: 'block-else'
2178<-------Source: end: 'block-else'
2179       If: end-gen
2179       InstructionUpdate: begin-gen
2179        Identifier: begin-gen
2179         Identifier: expr: 'lista'
2179        Identifier: end-gen
2179        OpUpdate: begin-gen
2179         OpUpdate: expr: '='
2179        OpUpdate: end-gen
2179        Value: begin-gen
2179         Member: begin-gen
2179          Identifier: begin-gen
2179           Identifier: expr: 'lista'
2179          Identifier: end-gen
2179          FunctionCall: begin-gen
2179           Expression: begin-gen
2179            Member: begin-gen
2179             Identifier: begin-gen
2179              Identifier: expr: 'lista'
2179             Identifier: end-gen
2179             Identifier: begin-gen
2179              Identifier: expr: 'length'
2179             Identifier: end-gen
2179             Member: expr: 'len(lista)'
2179           <-Expression: expr: 'len(lista)'
2179            Member: end-gen
2179            OpMath: begin-gen
2179             OpMath: expr: '-'
2179           <-Expression: expr: '-'
2179            OpMath: end-gen
2179            Constant: begin-gen
2179             Constant: ctype: 'Number' -> '1'
2179             Constant: expr: '1'
2179           <-Expression: expr: '1'
2179            Constant: end-gen
2179           Expression: end-gen
2179           FunctionCall: expr: 'left(len(lista) - 1)'
2179          FunctionCall: end-gen
2179          Member: expr: 'lista[0:len(lista) - 1]'
2179        <-Value: expr: 'lista[0:len(lista) - 1]'
2179         Member: end-gen
2179        Value: end-gen
2179        InstructionUpdate: line: 'lista = lista[0:len(lista) - 1]'
2179      <-Source: line: 'lista = lista[0:len(lista) - 1]'
2179     <--If: line: 'lista = lista[0:len(lista) - 1]'
2179    <---Source: line: 'lista = lista[0:len(lista) - 1]'
2179   <----Function: line: 'lista = lista[0:len(lista) - 1]'
2179  <-----Source: line: 'lista = lista[0:len(lista) - 1]'
2179 <------Class: line: 'lista = lista[0:len(lista) - 1]'
2179<-------Source: line: 'lista = lista[0:len(lista) - 1]'
2180       InstructionUpdate: end-gen
2180       If: begin-gen
2180        Expression: begin-gen
2180         Identifier: begin-gen
2180          Identifier: expr: 'lista'
2180        <-Expression: expr: 'lista'
2180         Identifier: end-gen
2180         Compare: begin-gen
2180          Compare: expr: '=='
2180        <-Expression: expr: '=='
2180         Compare: end-gen
2180         Constant: begin-gen
2180          Constant: ctype: 'String' -> ''
2180          Constant: expr: 'u""'
2180        <-Expression: expr: 'u""'
2180         Constant: end-gen
2180        Expression: end-gen
2180        If: line: 'if lista == u"":'
2180      <-Source: line: 'if lista == u"":'
2180     <--If: line: 'if lista == u"":'
2180    <---Source: line: 'if lista == u"":'
2180   <----Function: line: 'if lista == u"":'
2180  <-----Source: line: 'if lista == u"":'
2180 <------Class: line: 'if lista == u"":'
2180<-------Source: line: 'if lista == u"":'
2181        If: begin: 'block-if'
2181      <-Source: begin: 'block-if'
2181     <--If: begin: 'block-if'
2181    <---Source: begin: 'block-if'
2181   <----Function: begin: 'block-if'
2181  <-----Source: begin: 'block-if'
2181 <------Class: begin: 'block-if'
2181<-------Source: begin: 'block-if'
2181        Source: begin-gen
2181         InstructionFlow: begin-gen
2181          InstructionFlow: line: 'return '
2181        <-Source: line: 'return '
2181       <--If: line: 'return '
2181      <---Source: line: 'return '
2181     <----If: line: 'return '
2181    <-----Source: line: 'return '
2181   <------Function: line: 'return '
2181  <-------Source: line: 'return '
2181 <--------Class: line: 'return '
2181<---------Source: line: 'return '
2182         InstructionFlow: end-gen
2182        Source: end-gen
2182        If: end: 'block-if'
2182      <-Source: end: 'block-if'
2182     <--If: end: 'block-if'
2182    <---Source: end: 'block-if'
2182   <----Function: end: 'block-if'
2182  <-----Source: end: 'block-if'
2182 <------Class: end: 'block-if'
2182<-------Source: end: 'block-if'
2182       If: end-gen
2182       InstructionUpdate: begin-gen
2182        Identifier: begin-gen
2182         Identifier: expr: 'listaDestinatarios'
2182        Identifier: end-gen
2182        OpUpdate: begin-gen
2182         OpUpdate: expr: '='
2182        OpUpdate: end-gen
2182        Value: begin-gen
2182         Identifier: begin-gen
2182          Identifier: expr: 'lista'
2182        <-Value: expr: 'lista'
2182         Identifier: end-gen
2182        Value: end-gen
2182        InstructionUpdate: line: 'listaDestinatarios = lista'
2182      <-Source: line: 'listaDestinatarios = lista'
2182     <--If: line: 'listaDestinatarios = lista'
2182    <---Source: line: 'listaDestinatarios = lista'
2182   <----Function: line: 'listaDestinatarios = lista'
2182  <-----Source: line: 'listaDestinatarios = lista'
2182 <------Class: line: 'listaDestinatarios = lista'
2182<-------Source: line: 'listaDestinatarios = lista'
2183       InstructionUpdate: end-gen
2183      Source: end-gen
2183      If: end: 'block-if'
2183    <-Source: end: 'block-if'
2183   <--Function: end: 'block-if'
2183  <---Source: end: 'block-if'
2183 <----Class: end: 'block-if'
2183<-----Source: end: 'block-if'
2183      If: line: 'else:'
2183    <-Source: line: 'else:'
2183   <--Function: line: 'else:'
2183  <---Source: line: 'else:'
2183 <----Class: line: 'else:'
2183<-----Source: line: 'else:'
2185      If: begin: 'block-else'
2185    <-Source: begin: 'block-else'
2185   <--Function: begin: 'block-else'
2185  <---Source: begin: 'block-else'
2185 <----Class: begin: 'block-else'
2185<-----Source: begin: 'block-else'
2185      Source: begin-gen
2185       InstructionUpdate: begin-gen
2185        Identifier: begin-gen
2185         Identifier: expr: 'listaDestinatarios'
2185        Identifier: end-gen
2185        OpUpdate: begin-gen
2185         OpUpdate: expr: '='
2185        OpUpdate: end-gen
2185        Value: begin-gen
2185         Identifier: begin-gen
2185          Identifier: expr: 'emailPrincipal'
2185        <-Value: expr: 'emailPrincipal'
2185         Identifier: end-gen
2185        Value: end-gen
2185        InstructionUpdate: line: 'listaDestinatarios = emailPrincipal'
2185      <-Source: line: 'listaDestinatarios = emailPrincipal'
2185     <--If: line: 'listaDestinatarios = emailPrincipal'
2185    <---Source: line: 'listaDestinatarios = emailPrincipal'
2185   <----Function: line: 'listaDestinatarios = emailPrincipal'
2185  <-----Source: line: 'listaDestinatarios = emailPrincipal'
2185 <------Class: line: 'listaDestinatarios = emailPrincipal'
2185<-------Source: line: 'listaDestinatarios = emailPrincipal'
2186       InstructionUpdate: end-gen
2186      Source: end-gen
2186      If: end: 'block-else'
2186    <-Source: end: 'block-else'
2186   <--Function: end: 'block-else'
2186  <---Source: end: 'block-else'
2186 <----Class: end: 'block-else'
2186<-----Source: end: 'block-else'
2187     If: end-gen
2187     InstructionCall: begin-gen
2187      FunctionCall: begin-gen
2187       Expression: begin-gen
2187        Expression: expr: 'ustr('
2187        Constant: begin-gen
2187         Constant: ctype: 'String' -> 'listaDestinatarios '
2187         Constant: expr: 'u"listaDestinatarios "'
2187       <-Expression: expr: 'u"listaDestinatarios "'
2187        Constant: end-gen
2187        Expression: expr: ','
2187        Identifier: begin-gen
2187         Identifier: expr: 'listaDestinatarios'
2187       <-Expression: expr: 'listaDestinatarios'
2187        Identifier: end-gen
2187        Expression: expr: ')'
2187       Expression: end-gen
2187       FunctionCall: expr: 'debug(ustr( u"listaDestinatarios " , listaDestinatarios ))'
2187      FunctionCall: end-gen
2187      InstructionCall: line: 'debug(ustr( u"listaDestinatarios " , listaDestinatarios ))'
2187    <-Source: line: 'debug(ustr( u"listaDestinatarios " , listaDestinatarios ))'
2187   <--Function: line: 'debug(ustr( u"listaDestinatarios " , listaDestinatarios ))'
2187  <---Source: line: 'debug(ustr( u"listaDestinatarios " , listaDestinatarios ))'
2187 <----Class: line: 'debug(ustr( u"listaDestinatarios " , listaDestinatarios ))'
2187<-----Source: line: 'debug(ustr( u"listaDestinatarios " , listaDestinatarios ))'
2188     InstructionCall: end-gen
2188     InstructionFlow: begin-gen
2188      Value: begin-gen
2188       Identifier: begin-gen
2188        Identifier: expr: 'listaDestinatarios'
2188      <-Value: expr: 'listaDestinatarios'
2188       Identifier: end-gen
2188      Value: end-gen
2188      InstructionFlow: line: 'return listaDestinatarios'
2188    <-Source: line: 'return listaDestinatarios'
2188   <--Function: line: 'return listaDestinatarios'
2188  <---Source: line: 'return listaDestinatarios'
2188 <----Class: line: 'return listaDestinatarios'
2188<-----Source: line: 'return listaDestinatarios'
2189     InstructionFlow: end-gen
2189    Source: end-gen
2189    Function: end: 'block-def-envioMail_componerListaDestinatarios'
2189  <-Source: end: 'block-def-envioMail_componerListaDestinatarios'
2189 <--Class: end: 'block-def-envioMail_componerListaDestinatarios'
2189<---Source: end: 'block-def-envioMail_componerListaDestinatarios'
2190   Function: end-gen
2190   Function: begin-gen
2190    Variable: begin-gen
2190     Variable: expr: 'cuerpo'
2190    Variable: end-gen
2190    Variable: begin-gen
2190     Variable: expr: 'asunto'
2190    Variable: end-gen
2190    Variable: begin-gen
2190     Variable: expr: 'arrayDest'
2190    Variable: end-gen
2190    Variable: begin-gen
2190     Variable: expr: 'arrayAttach'
2190    Variable: end-gen
2190    Function: line: 'def envioMail_enviarCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
2190  <-Source: line: 'def envioMail_enviarCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
2190 <--Class: line: 'def envioMail_enviarCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
2190<---Source: line: 'def envioMail_enviarCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
2191    Function: begin: 'block-def-envioMail_enviarCorreo'
2191  <-Source: begin: 'block-def-envioMail_enviarCorreo'
2191 <--Class: begin: 'block-def-envioMail_enviarCorreo'
2191<---Source: begin: 'block-def-envioMail_enviarCorreo'
2191    Source: begin-gen
2191     DeclarationBlock: begin-gen
2191      Variable: begin-gen
2191       Variable: expr: 'util'
2191       Variable: expr: '='
2191       Value: begin-gen
2191        New: begin-gen
2191         Identifier: begin-gen
2191          Identifier: expr: 'FLUtil'
2191        <-New: expr: 'qsatype.FLUtil()'
2191       <--Value: expr: 'qsatype.FLUtil()'
2191      <---Variable: expr: 'qsatype.FLUtil()'
2191         Identifier: end-gen
2191        New: end-gen
2191       Value: end-gen
2191      Variable: end-gen
2191      DeclarationBlock: line: 'util = qsatype.FLUtil()'
2191    <-Source: line: 'util = qsatype.FLUtil()'
2191   <--Function: line: 'util = qsatype.FLUtil()'
2191  <---Source: line: 'util = qsatype.FLUtil()'
2191 <----Class: line: 'util = qsatype.FLUtil()'
2191<-----Source: line: 'util = qsatype.FLUtil()'
2192     DeclarationBlock: end-gen
2192     DeclarationBlock: begin-gen
2192      Variable: begin-gen
2192       Variable: expr: 'comando'
2192       Variable: expr: '='
2192       Value: begin-gen
2192        Member: begin-gen
2192         Identifier: begin-gen
2192          Identifier: expr: 'self'
2192         Identifier: end-gen
2192         Identifier: begin-gen
2192          Identifier: expr: 'iface'
2192         Identifier: end-gen
2192         FunctionCall: begin-gen
2192          Value: begin-gen
2192           Identifier: begin-gen
2192            Identifier: expr: 'cuerpo'
2192          <-Value: expr: 'cuerpo'
2192           Identifier: end-gen
2192          Value: end-gen
2192          Value: begin-gen
2192           Identifier: begin-gen
2192            Identifier: expr: 'asunto'
2192          <-Value: expr: 'asunto'
2192           Identifier: end-gen
2192          Value: end-gen
2192          Value: begin-gen
2192           Identifier: begin-gen
2192            Identifier: expr: 'arrayDest'
2192          <-Value: expr: 'arrayDest'
2192           Identifier: end-gen
2192          Value: end-gen
2192          Value: begin-gen
2192           Identifier: begin-gen
2192            Identifier: expr: 'arrayAttach'
2192          <-Value: expr: 'arrayAttach'
2192           Identifier: end-gen
2192          Value: end-gen
2192          FunctionCall: expr: 'componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
2192         FunctionCall: end-gen
2192         Member: expr: 'self.iface.componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
2192       <-Value: expr: 'self.iface.componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
2192      <--Variable: expr: 'self.iface.componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
2192        Member: end-gen
2192       Value: end-gen
2192      Variable: end-gen
2192      DeclarationBlock: line: 'comando = self.iface.componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
2192    <-Source: line: 'comando = self.iface.componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
2192   <--Function: line: 'comando = self.iface.componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
2192  <---Source: line: 'comando = self.iface.componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
2192 <----Class: line: 'comando = self.iface.componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
2192<-----Source: line: 'comando = self.iface.componerCorreo(cuerpo, asunto, arrayDest, arrayAttach)'
2193     DeclarationBlock: end-gen
2193     If: begin-gen
2193      Value: begin-gen
2193       OpUnary: begin-gen
2193        OpUnary: expr: 'not'
2193      <-Value: expr: 'not'
2193        Identifier: begin-gen
2193         Identifier: expr: 'comando'
2193       <-OpUnary: expr: 'comando'
2193      <--Value: expr: 'comando'
2193        Identifier: end-gen
2193       OpUnary: end-gen
2193      Value: end-gen
2193      If: line: 'if not comando:'
2193    <-Source: line: 'if not comando:'
2193   <--Function: line: 'if not comando:'
2193  <---Source: line: 'if not comando:'
2193 <----Class: line: 'if not comando:'
2193<-----Source: line: 'if not comando:'
2194      If: begin: 'block-if'
2194    <-Source: begin: 'block-if'
2194   <--Function: begin: 'block-if'
2194  <---Source: begin: 'block-if'
2194 <----Class: begin: 'block-if'
2194<-----Source: begin: 'block-if'
2194      Source: begin-gen
2194       InstructionFlow: begin-gen
2194        Value: begin-gen
2194         Identifier: begin-gen
2194          Identifier: expr: 'False'
2194        <-Value: expr: 'False'
2194         Identifier: end-gen
2194        Value: end-gen
2194        InstructionFlow: line: 'return False'
2194      <-Source: line: 'return False'
2194     <--If: line: 'return False'
2194    <---Source: line: 'return False'
2194   <----Function: line: 'return False'
2194  <-----Source: line: 'return False'
2194 <------Class: line: 'return False'
2194<-------Source: line: 'return False'
2195       InstructionFlow: end-gen
2195      Source: end-gen
2195      If: end: 'block-if'
2195    <-Source: end: 'block-if'
2195   <--Function: end: 'block-if'
2195  <---Source: end: 'block-if'
2195 <----Class: end: 'block-if'
2195<-----Source: end: 'block-if'
2195     If: end-gen
2195     DeclarationBlock: begin-gen
2195      Variable: begin-gen
2195       Variable: expr: 'res'
2195       Variable: expr: '='
2195       Value: begin-gen
2195        Member: begin-gen
2195         Identifier: begin-gen
2195          Identifier: expr: 'self'
2195         Identifier: end-gen
2195         Identifier: begin-gen
2195          Identifier: expr: 'iface'
2195         Identifier: end-gen
2195         FunctionCall: begin-gen
2195          Value: begin-gen
2195           Identifier: begin-gen
2195            Identifier: expr: 'comando'
2195          <-Value: expr: 'comando'
2195           Identifier: end-gen
2195          Value: end-gen
2195          FunctionCall: expr: 'ejecutarComandoAsincrono(comando)'
2195         FunctionCall: end-gen
2195         Member: expr: 'self.iface.ejecutarComandoAsincrono(comando)'
2195       <-Value: expr: 'self.iface.ejecutarComandoAsincrono(comando)'
2195      <--Variable: expr: 'self.iface.ejecutarComandoAsincrono(comando)'
2195        Member: end-gen
2195       Value: end-gen
2195      Variable: end-gen
2195      DeclarationBlock: line: 'res = self.iface.ejecutarComandoAsincrono(comando)'
2195    <-Source: line: 'res = self.iface.ejecutarComandoAsincrono(comando)'
2195   <--Function: line: 'res = self.iface.ejecutarComandoAsincrono(comando)'
2195  <---Source: line: 'res = self.iface.ejecutarComandoAsincrono(comando)'
2195 <----Class: line: 'res = self.iface.ejecutarComandoAsincrono(comando)'
2195<-----Source: line: 'res = self.iface.ejecutarComandoAsincrono(comando)'
2196     DeclarationBlock: end-gen
2196     InstructionFlow: begin-gen
2196      Value: begin-gen
2196       Identifier: begin-gen
2196        Identifier: expr: 'True'
2196      <-Value: expr: 'True'
2196       Identifier: end-gen
2196      Value: end-gen
2196      InstructionFlow: line: 'return True'
2196    <-Source: line: 'return True'
2196   <--Function: line: 'return True'
2196  <---Source: line: 'return True'
2196 <----Class: line: 'return True'
2196<-----Source: line: 'return True'
2197     InstructionFlow: end-gen
2197    Source: end-gen
2197    Function: end: 'block-def-envioMail_enviarCorreo'
2197  <-Source: end: 'block-def-envioMail_enviarCorreo'
2197 <--Class: end: 'block-def-envioMail_enviarCorreo'
2197<---Source: end: 'block-def-envioMail_enviarCorreo'
2198   Function: end-gen
2198   Function: begin-gen
2198    Variable: begin-gen
2198     Variable: expr: 'cuerpo'
2198    Variable: end-gen
2198    Variable: begin-gen
2198     Variable: expr: 'asunto'
2198    Variable: end-gen
2198    Variable: begin-gen
2198     Variable: expr: 'arrayDest'
2198    Variable: end-gen
2198    Variable: begin-gen
2198     Variable: expr: 'arrayAttach'
2198    Variable: end-gen
2198    Function: line: 'def envioMail_componerCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
2198  <-Source: line: 'def envioMail_componerCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
2198 <--Class: line: 'def envioMail_componerCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
2198<---Source: line: 'def envioMail_componerCorreo(self, cuerpo = None, asunto = None, arrayDest = None, arrayAttach = None):'
2199    Function: begin: 'block-def-envioMail_componerCorreo'
2199  <-Source: begin: 'block-def-envioMail_componerCorreo'
2199 <--Class: begin: 'block-def-envioMail_componerCorreo'
2199<---Source: begin: 'block-def-envioMail_componerCorreo'
2199    Source: begin-gen
2199     DeclarationBlock: begin-gen
2199      Variable: begin-gen
2199       Variable: expr: 'util'
2199       Variable: expr: '='
2199       Value: begin-gen
2199        New: begin-gen
2199         FunctionCall: begin-gen
2199          FunctionCall: expr: 'FLUtil()'
2199        <-New: expr: 'qsatype.FLUtil()'
2199       <--Value: expr: 'qsatype.FLUtil()'
2199      <---Variable: expr: 'qsatype.FLUtil()'
2199         FunctionCall: end-gen
2199        New: end-gen
2199       Value: end-gen
2199      Variable: end-gen
2199      DeclarationBlock: line: 'util = qsatype.FLUtil()'
2199    <-Source: line: 'util = qsatype.FLUtil()'
2199   <--Function: line: 'util = qsatype.FLUtil()'
2199  <---Source: line: 'util = qsatype.FLUtil()'
2199 <----Class: line: 'util = qsatype.FLUtil()'
2199<-----Source: line: 'util = qsatype.FLUtil()'
2200     DeclarationBlock: end-gen
2200     DeclarationBlock: begin-gen
2200      Variable: begin-gen
2200       Variable: expr: 'clienteCorreo'
2200       Variable: expr: '='
2200       Value: begin-gen
2200        Member: begin-gen
2200         Identifier: begin-gen
2200          Identifier: expr: 'util'
2200         Identifier: end-gen
2200         FunctionCall: begin-gen
2200          Value: begin-gen
2200           Constant: begin-gen
2200            Constant: ctype: 'String' -> 'scripts/flfactinfo/clientecorreo'
2200            Constant: expr: 'u"scripts/flfactinfo/clientecorreo"'
2200          <-Value: expr: 'u"scripts/flfactinfo/clientecorreo"'
2200           Constant: end-gen
2200          Value: end-gen
2200          FunctionCall: expr: 'readSettingEntry(u"scripts/flfactinfo/clientecorreo")'
2200         FunctionCall: end-gen
2200         Member: expr: 'util.readSettingEntry(u"scripts/flfactinfo/clientecorreo")'
2200       <-Value: expr: 'util.readSettingEntry(u"scripts/flfactinfo/clientecorreo")'
2200      <--Variable: expr: 'util.readSettingEntry(u"scripts/flfactinfo/clientecorreo")'
2200        Member: end-gen
2200       Value: end-gen
2200      Variable: end-gen
2200      DeclarationBlock: line: 'clienteCorreo = util.readSettingEntry(u"scripts/flfactinfo/clientecorreo")'
2200    <-Source: line: 'clienteCorreo = util.readSettingEntry(u"scripts/flfactinfo/clientecorreo")'
2200   <--Function: line: 'clienteCorreo = util.readSettingEntry(u"scripts/flfactinfo/clientecorreo")'
2200  <---Source: line: 'clienteCorreo = util.readSettingEntry(u"scripts/flfactinfo/clientecorreo")'
2200 <----Class: line: 'clienteCorreo = util.readSettingEntry(u"scripts/flfactinfo/clientecorreo")'
2200<-----Source: line: 'clienteCorreo = util.readSettingEntry(u"scripts/flfactinfo/clientecorreo")'
2201     DeclarationBlock: end-gen
2201     If: begin-gen
2201      Expression: begin-gen
2201       OpUnary: begin-gen
2201        OpUnary: expr: 'not'
2201      <-Expression: expr: 'not'
2201        Identifier: begin-gen
2201         Identifier: expr: 'clienteCorreo'
2201       <-OpUnary: expr: 'clienteCorreo'
2201      <--Expression: expr: 'clienteCorreo'
2201        Identifier: end-gen
2201       OpUnary: end-gen
2201       Compare: begin-gen
2201        Compare: expr: 'or'
2201      <-Expression: expr: 'or'
2201       Compare: end-gen
2201       Identifier: begin-gen
2201        Identifier: expr: 'clienteCorreo'
2201      <-Expression: expr: 'clienteCorreo'
2201       Identifier: end-gen
2201       Compare: begin-gen
2201        Compare: expr: '=='
2201      <-Expression: expr: '=='
2201       Compare: end-gen
2201       Constant: begin-gen
2201        Constant: ctype: 'String' -> ''
2201        Constant: expr: 'u""'
2201      <-Expression: expr: 'u""'
2201       Constant: end-gen
2201      Expression: end-gen
2201      If: line: 'if not clienteCorreo or clienteCorreo == u"":'
2201    <-Source: line: 'if not clienteCorreo or clienteCorreo == u"":'
2201   <--Function: line: 'if not clienteCorreo or clienteCorreo == u"":'
2201  <---Source: line: 'if not clienteCorreo or clienteCorreo == u"":'
2201 <----Class: line: 'if not clienteCorreo or clienteCorreo == u"":'
2201<-----Source: line: 'if not clienteCorreo or clienteCorreo == u"":'
2202      If: begin: 'block-if'
2202    <-Source: begin: 'block-if'
2202   <--Function: begin: 'block-if'
2202  <---Source: begin: 'block-if'
2202 <----Class: begin: 'block-if'
2202<-----Source: begin: 'block-if'
2202      Source: begin-gen
2202       InstructionCall: begin-gen
2202        Member: begin-gen
2202         Identifier: begin-gen
2202          Identifier: expr: 'MessageBox'
2202         Identifier: end-gen
2202         FunctionCall: begin-gen
2202          Value: begin-gen
2202           Member: begin-gen
2202            Identifier: begin-gen
2202             Identifier: expr: 'util'
2202            Identifier: end-gen
2202            FunctionCall: begin-gen
2202             Value: begin-gen
2202              Constant: begin-gen
2202               Constant: ctype: 'String' -> 'scripts'
2202               Constant: expr: 'u"scripts"'
2202             <-Value: expr: 'u"scripts"'
2202              Constant: end-gen
2202             Value: end-gen
2202             Value: begin-gen
2202              Constant: begin-gen
2202               Constant: ctype: 'String' -> 'No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa'
2202               Constant: expr: 'u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"'
2202             <-Value: expr: 'u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"'
2202              Constant: end-gen
2202             Value: end-gen
2202             FunctionCall: expr: 'translate(u"scripts", u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa")'
2202            FunctionCall: end-gen
2202            Member: expr: 'util.translate(u"scripts", u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa")'
2202          <-Value: expr: 'util.translate(u"scripts", u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa")'
2202           Member: end-gen
2202          Value: end-gen
2202          Value: begin-gen
2202           Member: begin-gen
2202            Identifier: begin-gen
2202             Identifier: expr: 'MessageBox'
2202            Identifier: end-gen
2202            Identifier: begin-gen
2202             Identifier: expr: 'Ok'
2202            Identifier: end-gen
2202            Member: expr: 'MessageBox.Ok'
2202          <-Value: expr: 'MessageBox.Ok'
2202           Member: end-gen
2202          Value: end-gen
2202          Value: begin-gen
2202           Member: begin-gen
2202            Identifier: begin-gen
2202             Identifier: expr: 'MessageBox'
2202            Identifier: end-gen
2202            Identifier: begin-gen
2202             Identifier: expr: 'NoButton'
2202            Identifier: end-gen
2202            Member: expr: 'MessageBox.NoButton'
2202          <-Value: expr: 'MessageBox.NoButton'
2202           Member: end-gen
2202          Value: end-gen
2202          FunctionCall: expr: 'warning(util.translate(u"scripts", u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2202         FunctionCall: end-gen
2202         Member: expr: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2202        Member: end-gen
2202        InstructionCall: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2202      <-Source: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2202     <--If: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2202    <---Source: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2202   <----Function: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2202  <-----Source: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2202 <------Class: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2202<-------Source: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el tipo de cliente de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2203       InstructionCall: end-gen
2203       InstructionFlow: begin-gen
2203        Value: begin-gen
2203         Identifier: begin-gen
2203          Identifier: expr: 'False'
2203        <-Value: expr: 'False'
2203         Identifier: end-gen
2203        Value: end-gen
2203        InstructionFlow: line: 'return False'
2203      <-Source: line: 'return False'
2203     <--If: line: 'return False'
2203    <---Source: line: 'return False'
2203   <----Function: line: 'return False'
2203  <-----Source: line: 'return False'
2203 <------Class: line: 'return False'
2203<-------Source: line: 'return False'
2204       InstructionFlow: end-gen
2204      Source: end-gen
2204      If: end: 'block-if'
2204    <-Source: end: 'block-if'
2204   <--Function: end: 'block-if'
2204  <---Source: end: 'block-if'
2204 <----Class: end: 'block-if'
2204<-----Source: end: 'block-if'
2204     If: end-gen
2204     DeclarationBlock: begin-gen
2204      Variable: begin-gen
2204       Variable: expr: 'nombreCorreo'
2204       Variable: expr: '='
2204       Value: begin-gen
2204        Member: begin-gen
2204         Identifier: begin-gen
2204          Identifier: expr: 'util'
2204         Identifier: end-gen
2204         FunctionCall: begin-gen
2204          Value: begin-gen
2204           Constant: begin-gen
2204            Constant: ctype: 'String' -> 'scripts/flfactinfo/nombrecorreo'
2204            Constant: expr: 'u"scripts/flfactinfo/nombrecorreo"'
2204          <-Value: expr: 'u"scripts/flfactinfo/nombrecorreo"'
2204           Constant: end-gen
2204          Value: end-gen
2204          FunctionCall: expr: 'readSettingEntry(u"scripts/flfactinfo/nombrecorreo")'
2204         FunctionCall: end-gen
2204         Member: expr: 'util.readSettingEntry(u"scripts/flfactinfo/nombrecorreo")'
2204       <-Value: expr: 'util.readSettingEntry(u"scripts/flfactinfo/nombrecorreo")'
2204      <--Variable: expr: 'util.readSettingEntry(u"scripts/flfactinfo/nombrecorreo")'
2204        Member: end-gen
2204       Value: end-gen
2204      Variable: end-gen
2204      DeclarationBlock: line: 'nombreCorreo = util.readSettingEntry(u"scripts/flfactinfo/nombrecorreo")'
2204    <-Source: line: 'nombreCorreo = util.readSettingEntry(u"scripts/flfactinfo/nombrecorreo")'
2204   <--Function: line: 'nombreCorreo = util.readSettingEntry(u"scripts/flfactinfo/nombrecorreo")'
2204  <---Source: line: 'nombreCorreo = util.readSettingEntry(u"scripts/flfactinfo/nombrecorreo")'
2204 <----Class: line: 'nombreCorreo = util.readSettingEntry(u"scripts/flfactinfo/nombrecorreo")'
2204<-----Source: line: 'nombreCorreo = util.readSettingEntry(u"scripts/flfactinfo/nombrecorreo")'
2205     DeclarationBlock: end-gen
2205     If: begin-gen
2205      Expression: begin-gen
2205       OpUnary: begin-gen
2205        OpUnary: expr: 'not'
2205      <-Expression: expr: 'not'
2205        Identifier: begin-gen
2205         Identifier: expr: 'nombreCorreo'
2205       <-OpUnary: expr: 'nombreCorreo'
2205      <--Expression: expr: 'nombreCorreo'
2205        Identifier: end-gen
2205       OpUnary: end-gen
2205       Compare: begin-gen
2205        Compare: expr: 'or'
2205      <-Expression: expr: 'or'
2205       Compare: end-gen
2205       Identifier: begin-gen
2205        Identifier: expr: 'nombreCorreo'
2205      <-Expression: expr: 'nombreCorreo'
2205       Identifier: end-gen
2205       Compare: begin-gen
2205        Compare: expr: '=='
2205      <-Expression: expr: '=='
2205       Compare: end-gen
2205       Constant: begin-gen
2205        Constant: ctype: 'String' -> ''
2205        Constant: expr: 'u""'
2205      <-Expression: expr: 'u""'
2205       Constant: end-gen
2205      Expression: end-gen
2205      If: line: 'if not nombreCorreo or nombreCorreo == u"":'
2205    <-Source: line: 'if not nombreCorreo or nombreCorreo == u"":'
2205   <--Function: line: 'if not nombreCorreo or nombreCorreo == u"":'
2205  <---Source: line: 'if not nombreCorreo or nombreCorreo == u"":'
2205 <----Class: line: 'if not nombreCorreo or nombreCorreo == u"":'
2205<-----Source: line: 'if not nombreCorreo or nombreCorreo == u"":'
2206      If: begin: 'block-if'
2206    <-Source: begin: 'block-if'
2206   <--Function: begin: 'block-if'
2206  <---Source: begin: 'block-if'
2206 <----Class: begin: 'block-if'
2206<-----Source: begin: 'block-if'
2206      Source: begin-gen
2206       InstructionCall: begin-gen
2206        Member: begin-gen
2206         Identifier: begin-gen
2206          Identifier: expr: 'MessageBox'
2206         Identifier: end-gen
2206         FunctionCall: begin-gen
2206          Value: begin-gen
2206           Member: begin-gen
2206            Identifier: begin-gen
2206             Identifier: expr: 'util'
2206            Identifier: end-gen
2206            FunctionCall: begin-gen
2206             Value: begin-gen
2206              Constant: begin-gen
2206               Constant: ctype: 'String' -> 'scripts'
2206               Constant: expr: 'u"scripts"'
2206             <-Value: expr: 'u"scripts"'
2206              Constant: end-gen
2206             Value: end-gen
2206             Value: begin-gen
2206              Constant: begin-gen
2206               Constant: ctype: 'String' -> 'No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa'
2206               Constant: expr: 'u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"'
2206             <-Value: expr: 'u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"'
2206              Constant: end-gen
2206             Value: end-gen
2206             FunctionCall: expr: 'translate(u"scripts", u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa")'
2206            FunctionCall: end-gen
2206            Member: expr: 'util.translate(u"scripts", u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa")'
2206          <-Value: expr: 'util.translate(u"scripts", u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa")'
2206           Member: end-gen
2206          Value: end-gen
2206          Value: begin-gen
2206           Member: begin-gen
2206            Identifier: begin-gen
2206             Identifier: expr: 'MessageBox'
2206            Identifier: end-gen
2206            Identifier: begin-gen
2206             Identifier: expr: 'Ok'
2206            Identifier: end-gen
2206            Member: expr: 'MessageBox.Ok'
2206          <-Value: expr: 'MessageBox.Ok'
2206           Member: end-gen
2206          Value: end-gen
2206          Value: begin-gen
2206           Member: begin-gen
2206            Identifier: begin-gen
2206             Identifier: expr: 'MessageBox'
2206            Identifier: end-gen
2206            Identifier: begin-gen
2206             Identifier: expr: 'NoButton'
2206            Identifier: end-gen
2206            Member: expr: 'MessageBox.NoButton'
2206          <-Value: expr: 'MessageBox.NoButton'
2206           Member: end-gen
2206          Value: end-gen
2206          FunctionCall: expr: 'warning(util.translate(u"scripts", u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2206         FunctionCall: end-gen
2206         Member: expr: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2206        Member: end-gen
2206        InstructionCall: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2206      <-Source: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2206     <--If: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2206    <---Source: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2206   <----Function: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2206  <-----Source: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2206 <------Class: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2206<-------Source: line: 'MessageBox.warning(util.translate(u"scripts", u"No tiene establecido el nombre del ejecutable del programa de correo.\\nDebe establecer este valor en la pestaÃ±a Correo del formulario de empresa"), MessageBox.Ok, MessageBox.NoButton)'
2207       InstructionCall: end-gen
2207       InstructionFlow: begin-gen
2207        Value: begin-gen
2207         Identifier: begin-gen
2207          Identifier: expr: 'False'
2207        <-Value: expr: 'False'
2207         Identifier: end-gen
2207        Value: end-gen
2207        InstructionFlow: line: 'return False'
2207      <-Source: line: 'return False'
2207     <--If: line: 'return False'
2207    <---Source: line: 'return False'
2207   <----Function: line: 'return False'
2207  <-----Source: line: 'return False'
2207 <------Class: line: 'return False'
2207<-------Source: line: 'return False'
2208       InstructionFlow: end-gen
2208      Source: end-gen
2208      If: end: 'block-if'
2208    <-Source: end: 'block-if'
2208   <--Function: end: 'block-if'
2208  <---Source: end: 'block-if'
2208 <----Class: end: 'block-if'
2208<-----Source: end: 'block-if'
2208     If: end-gen
2208     DeclarationBlock: begin-gen
2208      Variable: begin-gen
2208       Variable: expr: 'destinatarios'
2208       Variable: expr: '='
2208       Value: begin-gen
2208        Constant: begin-gen
2208         Constant: ctype: 'String' -> ''
2208         Constant: expr: 'u""'
2208       <-Value: expr: 'u""'
2208      <--Variable: expr: 'u""'
2208        Constant: end-gen
2208       Value: end-gen
2208      Variable: end-gen
2208      DeclarationBlock: line: 'destinatarios = u""'
2208    <-Source: line: 'destinatarios = u""'
2208   <--Function: line: 'destinatarios = u""'
2208  <---Source: line: 'destinatarios = u""'
2208 <----Class: line: 'destinatarios = u""'
2208<-----Source: line: 'destinatarios = u""'
2209     DeclarationBlock: end-gen
2209     For: begin-gen
2209      Variable: begin-gen
2209       Variable: expr: 'i'
2209       Variable: expr: '='
2209       Value: begin-gen
2209        Constant: begin-gen
2209         Constant: ctype: 'Number' -> '0'
2209         Constant: expr: '0'
2209       <-Value: expr: '0'
2209      <--Variable: expr: '0'
2209        Constant: end-gen
2209       Value: end-gen
2209      Variable: end-gen
2209      For: line: 'i = 0'
2209    <-Source: line: 'i = 0'
2209   <--Function: line: 'i = 0'
2209  <---Source: line: 'i = 0'
2209 <----Class: line: 'i = 0'
2209<-----Source: line: 'i = 0'
2210      For: line: 'while_pass = True'
2210    <-Source: line: 'while_pass = True'
2210   <--Function: line: 'while_pass = True'
2210  <---Source: line: 'while_pass = True'
2210 <----Class: line: 'while_pass = True'
2210<-----Source: line: 'while_pass = True'
2211      InlineUpdate: begin-gen
2211       Identifier: begin-gen
2211        Identifier: expr: 'i'
2211       Identifier: end-gen
2211       InlineUpdate: expr: 'i'
2211       InlineUpdate: line+1: 'i += 1'
2211      InlineUpdate: end-gen
2211      Expression: begin-gen
2211       Identifier: begin-gen
2211        Identifier: expr: 'i'
2211      <-Expression: expr: 'i'
2211       Identifier: end-gen
2211       Compare: begin-gen
2211        Compare: expr: '<'
2211      <-Expression: expr: '<'
2211       Compare: end-gen
2211       Member: begin-gen
2211        Identifier: begin-gen
2211         Identifier: expr: 'arrayDest'
2211        Identifier: end-gen
2211        Identifier: begin-gen
2211         Identifier: expr: 'length'
2211        Identifier: end-gen
2211        Member: expr: 'len(arrayDest)'
2211      <-Expression: expr: 'len(arrayDest)'
2211       Member: end-gen
2211      Expression: end-gen
2211      For: line: 'while i < len(arrayDest):'
2211    <-Source: line: 'while i < len(arrayDest):'
2211   <--Function: line: 'while i < len(arrayDest):'
2211  <---Source: line: 'while i < len(arrayDest):'
2211 <----Class: line: 'while i < len(arrayDest):'
2211<-----Source: line: 'while i < len(arrayDest):'
2212      For: begin: 'block-for'
2212    <-Source: begin: 'block-for'
2212   <--Function: begin: 'block-for'
2212  <---Source: begin: 'block-for'
2212 <----Class: begin: 'block-for'
2212<-----Source: begin: 'block-for'
2212      For: line: 'if not while_pass:'
2212    <-Source: line: 'if not while_pass:'
2212   <--Function: line: 'if not while_pass:'
2212  <---Source: line: 'if not while_pass:'
2212 <----Class: line: 'if not while_pass:'
2212<-----Source: line: 'if not while_pass:'
2213      For: begin: 'block-while_pass'
2213    <-Source: begin: 'block-while_pass'
2213   <--Function: begin: 'block-while_pass'
2213  <---Source: begin: 'block-while_pass'
2213 <----Class: begin: 'block-while_pass'
2213<-----Source: begin: 'block-while_pass'
2213      For: line: 'i += 1'
2213    <-Source: line: 'i += 1'
2213   <--Function: line: 'i += 1'
2213  <---Source: line: 'i += 1'
2213 <----Class: line: 'i += 1'
2213<-----Source: line: 'i += 1'
2214      For: line: 'while_pass = True'
2214    <-Source: line: 'while_pass = True'
2214   <--Function: line: 'while_pass = True'
2214  <---Source: line: 'while_pass = True'
2214 <----Class: line: 'while_pass = True'
2214<-----Source: line: 'while_pass = True'
2215      For: line: 'continue'
2215    <-Source: line: 'continue'
2215   <--Function: line: 'continue'
2215  <---Source: line: 'continue'
2215 <----Class: line: 'continue'
2215<-----Source: line: 'continue'
2216      For: end: 'block-while_pass'
2216    <-Source: end: 'block-while_pass'
2216   <--Function: end: 'block-while_pass'
2216  <---Source: end: 'block-while_pass'
2216 <----Class: end: 'block-while_pass'
2216<-----Source: end: 'block-while_pass'
2216      For: line: 'while_pass = False'
2216    <-Source: line: 'while_pass = False'
2216   <--Function: line: 'while_pass = False'
2216  <---Source: line: 'while_pass = False'
2216 <----Class: line: 'while_pass = False'
2216<-----Source: line: 'while_pass = False'
2217      Source: begin-gen
2217       If: begin-gen
2217        Expression: begin-gen
2217         Identifier: begin-gen
2217          Identifier: expr: 'i'
2217        <-Expression: expr: 'i'
2217         Identifier: end-gen
2217         Compare: begin-gen
2217          Compare: expr: '>'
2217        <-Expression: expr: '>'
2217         Compare: end-gen
2217         Constant: begin-gen
2217          Constant: ctype: 'Number' -> '0'
2217          Constant: expr: '0'
2217        <-Expression: expr: '0'
2217         Constant: end-gen
2217        Expression: end-gen
2217        If: line: 'if i > 0:'
2217      <-Source: line: 'if i > 0:'
2217     <--For: line: 'if i > 0:'
2217    <---Source: line: 'if i > 0:'
2217   <----Function: line: 'if i > 0:'
2217  <-----Source: line: 'if i > 0:'
2217 <------Class: line: 'if i > 0:'
2217<-------Source: line: 'if i > 0:'
2218        If: begin: 'block-if'
2218      <-Source: begin: 'block-if'
2218     <--For: begin: 'block-if'
2218    <---Source: begin: 'block-if'
2218   <----Function: begin: 'block-if'
2218  <-----Source: begin: 'block-if'
2218 <------Class: begin: 'block-if'
2218<-------Source: begin: 'block-if'
2218        Source: begin-gen
2218         InstructionUpdate: begin-gen
2218          Identifier: begin-gen
2218           Identifier: expr: 'destinatarios'
2218          Identifier: end-gen
2218          OpUpdate: begin-gen
2218           OpUpdate: expr: '+='
2218          OpUpdate: end-gen
2218          Value: begin-gen
2218           Constant: begin-gen
2218            Constant: ctype: 'String' -> ' '
2218            Constant: expr: 'u" "'
2218          <-Value: expr: 'u" "'
2218           Constant: end-gen
2218          Value: end-gen
2218          InstructionUpdate: line: 'destinatarios += u" "'
2218        <-Source: line: 'destinatarios += u" "'
2218       <--If: line: 'destinatarios += u" "'
2218      <---Source: line: 'destinatarios += u" "'
2218     <----For: line: 'destinatarios += u" "'
2218    <-----Source: line: 'destinatarios += u" "'
2218   <------Function: line: 'destinatarios += u" "'
2218  <-------Source: line: 'destinatarios += u" "'
2218 <--------Class: line: 'destinatarios += u" "'
2218<---------Source: line: 'destinatarios += u" "'
2219         InstructionUpdate: end-gen
2219        Source: end-gen
2219        If: end: 'block-if'
2219      <-Source: end: 'block-if'
2219     <--For: end: 'block-if'
2219    <---Source: end: 'block-if'
2219   <----Function: end: 'block-if'
2219  <-----Source: end: 'block-if'
2219 <------Class: end: 'block-if'
2219<-------Source: end: 'block-if'
2219       If: end-gen
2219       InstructionUpdate: begin-gen
2219        Identifier: begin-gen
2219         Identifier: expr: 'destinatarios'
2219        Identifier: end-gen
2219        OpUpdate: begin-gen
2219         OpUpdate: expr: '+='
2219        OpUpdate: end-gen
2219        Value: begin-gen
2219         ArrayMember: begin-gen
2219          ArrayMember: begin-gen
2219           Identifier: begin-gen
2219            Identifier: expr: 'arrayDest'
2219           Identifier: end-gen
2219           Value: begin-gen
2219            Identifier: begin-gen
2219             Identifier: expr: 'i'
2219           <-Value: expr: 'i'
2219            Identifier: end-gen
2219           Value: end-gen
2219           ArrayMember: expr: 'arrayDest[i]'
2219          ArrayMember: end-gen
2219          Value: begin-gen
2219           Constant: begin-gen
2219            Constant: ctype: 'String' -> 'direccion'
2219            Constant: expr: 'u"direccion"'
2219          <-Value: expr: 'u"direccion"'
2219           Constant: end-gen
2219          Value: end-gen
2219          ArrayMember: expr: 'arrayDest[i][u"direccion"]'
2219        <-Value: expr: 'arrayDest[i][u"direccion"]'
2219         ArrayMember: end-gen
2219        Value: end-gen
2219        InstructionUpdate: line: 'destinatarios += arrayDest[i][u"direccion"]'
2219      <-Source: line: 'destinatarios += arrayDest[i][u"direccion"]'
2219     <--For: line: 'destinatarios += arrayDest[i][u"direccion"]'
2219    <---Source: line: 'destinatarios += arrayDest[i][u"direccion"]'
2219   <----Function: line: 'destinatarios += arrayDest[i][u"direccion"]'
2219  <-----Source: line: 'destinatarios += arrayDest[i][u"direccion"]'
2219 <------Class: line: 'destinatarios += arrayDest[i][u"direccion"]'
2219<-------Source: line: 'destinatarios += arrayDest[i][u"direccion"]'
2220       InstructionUpdate: end-gen
2220      Source: end-gen
2220      For: line: 'i += 1'
2220    <-Source: line: 'i += 1'
2220   <--Function: line: 'i += 1'
2220  <---Source: line: 'i += 1'
2220 <----Class: line: 'i += 1'
2220<-----Source: line: 'i += 1'
2221      For: line: 'while_pass = True'
2221    <-Source: line: 'while_pass = True'
2221   <--Function: line: 'while_pass = True'
2221  <---Source: line: 'while_pass = True'
2221 <----Class: line: 'while_pass = True'
2221<-----Source: line: 'while_pass = True'
2222      For: line: 'try:'
2222    <-Source: line: 'try:'
2222   <--Function: line: 'try:'
2222  <---Source: line: 'try:'
2222 <----Class: line: 'try:'
2222<-----Source: line: 'try:'
2223      For: begin: 'block-error-catch'
2223    <-Source: begin: 'block-error-catch'
2223   <--Function: begin: 'block-error-catch'
2223  <---Source: begin: 'block-error-catch'
2223 <----Class: begin: 'block-error-catch'
2223<-----Source: begin: 'block-error-catch'
2223      For: line: 'i < len(arrayDest)'
2223    <-Source: line: 'i < len(arrayDest)'
2223   <--Function: line: 'i < len(arrayDest)'
2223  <---Source: line: 'i < len(arrayDest)'
2223 <----Class: line: 'i < len(arrayDest)'
2223<-----Source: line: 'i < len(arrayDest)'
2224      For: end: 'block-error-catch'
2224    <-Source: end: 'block-error-catch'
2224   <--Function: end: 'block-error-catch'
2224  <---Source: end: 'block-error-catch'
2224 <----Class: end: 'block-error-catch'
2224<-----Source: end: 'block-error-catch'
2224      For: line: 'except: break'
2224    <-Source: line: 'except: break'
2224   <--Function: line: 'except: break'
2224  <---Source: line: 'except: break'
2224 <----Class: line: 'except: break'
2224<-----Source: line: 'except: break'
2225      For: end: 'block-for'
2225    <-Source: end: 'block-for'
2225   <--Function: end: 'block-for'
2225  <---Source: end: 'block-for'
2225 <----Class: end: 'block-for'
2225<-----Source: end: 'block-for'
2225     For: end-gen
2225     DeclarationBlock: begin-gen
2225      Variable: begin-gen
2225       Variable: expr: 'documentos'
2225       Variable: expr: '='
2225       Value: begin-gen
2225        Constant: begin-gen
2225         Constant: ctype: 'String' -> ''
2225         Constant: expr: 'u""'
2225       <-Value: expr: 'u""'
2225      <--Variable: expr: 'u""'
2225        Constant: end-gen
2225       Value: end-gen
2225      Variable: end-gen
2225      DeclarationBlock: line: 'documentos = u""'
2225    <-Source: line: 'documentos = u""'
2225   <--Function: line: 'documentos = u""'
2225  <---Source: line: 'documentos = u""'
2225 <----Class: line: 'documentos = u""'
2225<-----Source: line: 'documentos = u""'
2227     DeclarationBlock: end-gen
2227     If: begin-gen
2227      Value: begin-gen
2227       Identifier: begin-gen
2227        Identifier: expr: 'arrayAttach'
2227      <-Value: expr: 'arrayAttach'
2227       Identifier: end-gen
2227      Value: end-gen
2227      If: line: 'if arrayAttach:'
2227    <-Source: line: 'if arrayAttach:'
2227   <--Function: line: 'if arrayAttach:'
2227  <---Source: line: 'if arrayAttach:'
2227 <----Class: line: 'if arrayAttach:'
2227<-----Source: line: 'if arrayAttach:'
2228      If: begin: 'block-if'
2228    <-Source: begin: 'block-if'
2228   <--Function: begin: 'block-if'
2228  <---Source: begin: 'block-if'
2228 <----Class: begin: 'block-if'
2228<-----Source: begin: 'block-if'
2228      Source: begin-gen
2228       InstructionUpdate: begin-gen
2228        Identifier: begin-gen
2228         Identifier: expr: 'documentos'
2228        Identifier: end-gen
2228        OpUpdate: begin-gen
2228         OpUpdate: expr: '='
2228        OpUpdate: end-gen
2228        Value: begin-gen
2228         Member: begin-gen
2228          Identifier: begin-gen
2228           Identifier: expr: 'arrayAttach'
2228          Identifier: end-gen
2228          FunctionCall: begin-gen
2228           Value: begin-gen
2228            Constant: begin-gen
2228             Constant: ctype: 'String' -> ' '
2228             Constant: expr: 'u" "'
2228           <-Value: expr: 'u" "'
2228            Constant: end-gen
2228           Value: end-gen
2228           FunctionCall: expr: 'join(u" ")'
2228          FunctionCall: end-gen
2228          Member: expr: 'arrayAttach.join(u" ")'
2228        <-Value: expr: 'arrayAttach.join(u" ")'
2228         Member: end-gen
2228        Value: end-gen
2228        InstructionUpdate: line: 'documentos = arrayAttach.join(u" ")'
2228      <-Source: line: 'documentos = arrayAttach.join(u" ")'
2228     <--If: line: 'documentos = arrayAttach.join(u" ")'
2228    <---Source: line: 'documentos = arrayAttach.join(u" ")'
2228   <----Function: line: 'documentos = arrayAttach.join(u" ")'
2228  <-----Source: line: 'documentos = arrayAttach.join(u" ")'
2228 <------Class: line: 'documentos = arrayAttach.join(u" ")'
2228<-------Source: line: 'documentos = arrayAttach.join(u" ")'
2229       InstructionUpdate: end-gen
2229      Source: end-gen
2229      If: end: 'block-if'
2229    <-Source: end: 'block-if'
2229   <--Function: end: 'block-if'
2229  <---Source: end: 'block-if'
2229 <----Class: end: 'block-if'
2229<-----Source: end: 'block-if'
2229     If: end-gen
2229     DeclarationBlock: begin-gen
2229      Variable: begin-gen
2229       Variable: expr: 'comando'
2229       Variable: expr: '='
2229       Variable: expr: 'qsatype.Array()'
2229      Variable: end-gen
2229      DeclarationBlock: line: 'comando = qsatype.Array()'
2229    <-Source: line: 'comando = qsatype.Array()'
2229   <--Function: line: 'comando = qsatype.Array()'
2229  <---Source: line: 'comando = qsatype.Array()'
2229 <----Class: line: 'comando = qsatype.Array()'
2229<-----Source: line: 'comando = qsatype.Array()'
2230     DeclarationBlock: end-gen
2230     Switch: begin-gen
2230      Value: begin-gen
2230       Identifier: begin-gen
2230        Identifier: expr: 'clienteCorreo'
2230      <-Value: expr: 'clienteCorreo'
2230       Identifier: end-gen
2230      Value: end-gen
2230      Switch: line: 'sc1_when = clienteCorreo'
2230    <-Source: line: 'sc1_when = clienteCorreo'
2230   <--Function: line: 'sc1_when = clienteCorreo'
2230  <---Source: line: 'sc1_when = clienteCorreo'
2230 <----Class: line: 'sc1_when = clienteCorreo'
2230<-----Source: line: 'sc1_when = clienteCorreo'
2231      Switch: line: 'sc1_do_work,sc1_work_done = False,False'
2231    <-Source: line: 'sc1_do_work,sc1_work_done = False,False'
2231   <--Function: line: 'sc1_do_work,sc1_work_done = False,False'
2231  <---Source: line: 'sc1_do_work,sc1_work_done = False,False'
2231 <----Class: line: 'sc1_do_work,sc1_work_done = False,False'
2231<-----Source: line: 'sc1_do_work,sc1_work_done = False,False'
2232      Value: begin-gen
2232       Constant: begin-gen
2232        Constant: ctype: 'String' -> 'Thunderbird'
2232        Constant: expr: 'u"Thunderbird"'
2232      <-Value: expr: 'u"Thunderbird"'
2232       Constant: end-gen
2232      Value: end-gen
2232      Switch: line: 'if sc1_when == u"Thunderbird": sc1_do_work,sc1_work_done = True,True'
2232    <-Source: line: 'if sc1_when == u"Thunderbird": sc1_do_work,sc1_work_done = True,True'
2232   <--Function: line: 'if sc1_when == u"Thunderbird": sc1_do_work,sc1_work_done = True,True'
2232  <---Source: line: 'if sc1_when == u"Thunderbird": sc1_do_work,sc1_work_done = True,True'
2232 <----Class: line: 'if sc1_when == u"Thunderbird": sc1_do_work,sc1_work_done = True,True'
2232<-----Source: line: 'if sc1_when == u"Thunderbird": sc1_do_work,sc1_work_done = True,True'
2233      Switch: line: 'if sc1_do_work:'
2233    <-Source: line: 'if sc1_do_work:'
2233   <--Function: line: 'if sc1_do_work:'
2233  <---Source: line: 'if sc1_do_work:'
2233 <----Class: line: 'if sc1_do_work:'
2233<-----Source: line: 'if sc1_do_work:'
2234      Switch: begin: 'block-if'
2234    <-Source: begin: 'block-if'
2234   <--Function: begin: 'block-if'
2234  <---Source: begin: 'block-if'
2234 <----Class: begin: 'block-if'
2234<-----Source: begin: 'block-if'
2234      Source: begin-gen
2234       If: begin-gen
2234        Expression: begin-gen
2234         Identifier: begin-gen
2234          Identifier: expr: 'documentos'
2234        <-Expression: expr: 'documentos'
2234         Identifier: end-gen
2234         Compare: begin-gen
2234          Compare: expr: '!='
2234        <-Expression: expr: '!='
2234         Compare: end-gen
2234         Constant: begin-gen
2234          Constant: ctype: 'String' -> ''
2234          Constant: expr: 'u""'
2234        <-Expression: expr: 'u""'
2234         Constant: end-gen
2234        Expression: end-gen
2234        If: line: 'if documentos != u"":'
2234      <-Source: line: 'if documentos != u"":'
2234     <--Switch: line: 'if documentos != u"":'
2234    <---Source: line: 'if documentos != u"":'
2234   <----Function: line: 'if documentos != u"":'
2234  <-----Source: line: 'if documentos != u"":'
2234 <------Class: line: 'if documentos != u"":'
2234<-------Source: line: 'if documentos != u"":'
2235        If: begin: 'block-if'
2235      <-Source: begin: 'block-if'
2235     <--Switch: begin: 'block-if'
2235    <---Source: begin: 'block-if'
2235   <----Function: begin: 'block-if'
2235  <-----Source: begin: 'block-if'
2235 <------Class: begin: 'block-if'
2235<-------Source: begin: 'block-if'
2235        Source: begin-gen
2235         InstructionUpdate: begin-gen
2235          Identifier: begin-gen
2235           Identifier: expr: 'comando'
2235          Identifier: end-gen
2235          OpUpdate: begin-gen
2235           OpUpdate: expr: '='
2235          OpUpdate: end-gen
2235          Value: begin-gen
2235           Constant: begin-gen
2235            Constant: ctype: None -> None
2235            Value: begin-gen
2235             Identifier: begin-gen
2235              Identifier: expr: 'nombreCorreo'
2235            <-Value: expr: 'nombreCorreo'
2235             Identifier: end-gen
2235            Value: end-gen
2235            Value: begin-gen
2235             Constant: begin-gen
2235              Constant: ctype: 'String' -> '-compose'
2235              Constant: expr: 'u"-compose"'
2235            <-Value: expr: 'u"-compose"'
2235             Constant: end-gen
2235            Value: end-gen
2235            Expression: begin-gen
2235             Expression: expr: 'ustr('
2235             Constant: begin-gen
2235              Constant: ctype: 'String' -> "to='"
2235              Constant: expr: 'u"to=\'"'
2235            <-Expression: expr: 'u"to=\'"'
2235             Constant: end-gen
2235             Expression: expr: ','
2235             Identifier: begin-gen
2235              Identifier: expr: 'destinatarios'
2235            <-Expression: expr: 'destinatarios'
2235             Identifier: end-gen
2235             Expression: expr: ','
2235             Constant: begin-gen
2235              Constant: ctype: 'String' -> "',subject="
2235              Constant: expr: 'u"\',subject="'
2235            <-Expression: expr: 'u"\',subject="'
2235             Constant: end-gen
2235             Expression: expr: ')'
2235            Expression: end-gen
2235            Value: begin-gen
2235             Identifier: begin-gen
2235              Identifier: expr: 'asunto'
2235            <-Value: expr: 'asunto'
2235             Identifier: end-gen
2235            Value: end-gen
2235            Value: begin-gen
2235             Constant: begin-gen
2235              Constant: ctype: 'String' -> ',body='
2235              Constant: expr: 'u",body="'
2235            <-Value: expr: 'u",body="'
2235             Constant: end-gen
2235            Value: end-gen
2235            Value: begin-gen
2235             Identifier: begin-gen
2235              Identifier: expr: 'cuerpo'
2235            <-Value: expr: 'cuerpo'
2235             Identifier: end-gen
2235            Value: end-gen
2235            Expression: begin-gen
2235             Expression: expr: 'ustr('
2235             Constant: begin-gen
2235              Constant: ctype: 'String' -> ',attachment=file://'
2235              Constant: expr: 'u",attachment=file://"'
2235            <-Expression: expr: 'u",attachment=file://"'
2235             Constant: end-gen
2235             Expression: expr: ','
2235             Identifier: begin-gen
2235              Identifier: expr: 'documentos'
2235            <-Expression: expr: 'documentos'
2235             Identifier: end-gen
2235             Expression: expr: ')'
2235            Expression: end-gen
2235            Constant: expr: 'qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo, ustr( u",attachment=file://" , documentos )])'
2235          <-Value: expr: 'qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo, ustr( u",attachment=file://" , documentos )])'
2235           Constant: end-gen
2235          Value: end-gen
2235          InstructionUpdate: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo, ustr( u",attachment=file://" , documentos )])'
2235        <-Source: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo, ustr( u",attachment=file://" , documentos )])'
2235       <--If: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo, ustr( u",attachment=file://" , documentos )])'
2235      <---Source: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo, ustr( u",attachment=file://" , documentos )])'
2235     <----Switch: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo, ustr( u",attachment=file://" , documentos )])'
2235    <-----Source: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo, ustr( u",attachment=file://" , documentos )])'
2235   <------Function: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo, ustr( u",attachment=file://" , documentos )])'
2235  <-------Source: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo, ustr( u",attachment=file://" , documentos )])'
2235 <--------Class: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo, ustr( u",attachment=file://" , documentos )])'
2235<---------Source: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo, ustr( u",attachment=file://" , documentos )])'
2236         InstructionUpdate: end-gen
2236        Source: end-gen
2236        If: end: 'block-if'
2236      <-Source: end: 'block-if'
2236     <--Switch: end: 'block-if'
2236    <---Source: end: 'block-if'
2236   <----Function: end: 'block-if'
2236  <-----Source: end: 'block-if'
2236 <------Class: end: 'block-if'
2236<-------Source: end: 'block-if'
2236        If: line: 'else:'
2236      <-Source: line: 'else:'
2236     <--Switch: line: 'else:'
2236    <---Source: line: 'else:'
2236   <----Function: line: 'else:'
2236  <-----Source: line: 'else:'
2236 <------Class: line: 'else:'
2236<-------Source: line: 'else:'
2237        If: begin: 'block-else'
2237      <-Source: begin: 'block-else'
2237     <--Switch: begin: 'block-else'
2237    <---Source: begin: 'block-else'
2237   <----Function: begin: 'block-else'
2237  <-----Source: begin: 'block-else'
2237 <------Class: begin: 'block-else'
2237<-------Source: begin: 'block-else'
2237        Source: begin-gen
2237         InstructionUpdate: begin-gen
2237          Identifier: begin-gen
2237           Identifier: expr: 'comando'
2237          Identifier: end-gen
2237          OpUpdate: begin-gen
2237           OpUpdate: expr: '='
2237          OpUpdate: end-gen
2237          Value: begin-gen
2237           Constant: begin-gen
2237            Constant: ctype: None -> None
2237            Value: begin-gen
2237             Identifier: begin-gen
2237              Identifier: expr: 'nombreCorreo'
2237            <-Value: expr: 'nombreCorreo'
2237             Identifier: end-gen
2237            Value: end-gen
2237            Value: begin-gen
2237             Constant: begin-gen
2237              Constant: ctype: 'String' -> '-compose'
2237              Constant: expr: 'u"-compose"'
2237            <-Value: expr: 'u"-compose"'
2237             Constant: end-gen
2237            Value: end-gen
2237            Expression: begin-gen
2237             Expression: expr: 'ustr('
2237             Constant: begin-gen
2237              Constant: ctype: 'String' -> "to='"
2237              Constant: expr: 'u"to=\'"'
2237            <-Expression: expr: 'u"to=\'"'
2237             Constant: end-gen
2237             Expression: expr: ','
2237             Identifier: begin-gen
2237              Identifier: expr: 'destinatarios'
2237            <-Expression: expr: 'destinatarios'
2237             Identifier: end-gen
2237             Expression: expr: ','
2237             Constant: begin-gen
2237              Constant: ctype: 'String' -> "',subject="
2237              Constant: expr: 'u"\',subject="'
2237            <-Expression: expr: 'u"\',subject="'
2237             Constant: end-gen
2237             Expression: expr: ')'
2237            Expression: end-gen
2237            Value: begin-gen
2237             Identifier: begin-gen
2237              Identifier: expr: 'asunto'
2237            <-Value: expr: 'asunto'
2237             Identifier: end-gen
2237            Value: end-gen
2237            Value: begin-gen
2237             Constant: begin-gen
2237              Constant: ctype: 'String' -> ',body='
2237              Constant: expr: 'u",body="'
2237            <-Value: expr: 'u",body="'
2237             Constant: end-gen
2237            Value: end-gen
2237            Value: begin-gen
2237             Identifier: begin-gen
2237              Identifier: expr: 'cuerpo'
2237            <-Value: expr: 'cuerpo'
2237             Identifier: end-gen
2237            Value: end-gen
2237            Constant: expr: 'qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo])'
2237          <-Value: expr: 'qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo])'
2237           Constant: end-gen
2237          Value: end-gen
2237          InstructionUpdate: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo])'
2237        <-Source: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo])'
2237       <--If: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo])'
2237      <---Source: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo])'
2237     <----Switch: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo])'
2237    <-----Source: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo])'
2237   <------Function: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo])'
2237  <-------Source: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo])'
2237 <--------Class: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo])'
2237<---------Source: line: 'comando = qsatype.Array([nombreCorreo, u"-compose", ustr( u"to=\'" , destinatarios , u"\',subject=" ), asunto, u",body=", cuerpo])'
2238         InstructionUpdate: end-gen
2238        Source: end-gen
2238        If: end: 'block-else'
2238      <-Source: end: 'block-else'
2238     <--Switch: end: 'block-else'
2238    <---Source: end: 'block-else'
2238   <----Function: end: 'block-else'
2238  <-----Source: end: 'block-else'
2238 <------Class: end: 'block-else'
2238<-------Source: end: 'block-else'
2239       If: end-gen
2239       InstructionFlow: begin-gen
2239        InstructionFlow: break: 'break '
2239      <-Source: break: 'break '
2239     <--Switch: line: 'sc1_do_work = False # BREAK'
2239    <---Source: line: 'sc1_do_work = False # BREAK'
2239   <----Function: line: 'sc1_do_work = False # BREAK'
2239  <-----Source: line: 'sc1_do_work = False # BREAK'
2239 <------Class: line: 'sc1_do_work = False # BREAK'
2239<-------Source: line: 'sc1_do_work = False # BREAK'
2240       InstructionFlow: end-gen
2240      Source: end-gen
2240      Switch: end: 'block-if'
2240    <-Source: end: 'block-if'
2240   <--Function: end: 'block-if'
2240  <---Source: end: 'block-if'
2240 <----Class: end: 'block-if'
2240<-----Source: end: 'block-if'
2240      Value: begin-gen
2240       Constant: begin-gen
2240        Constant: ctype: 'String' -> 'Outlook'
2240        Constant: expr: 'u"Outlook"'
2240      <-Value: expr: 'u"Outlook"'
2240       Constant: end-gen
2240      Value: end-gen
2240      Switch: line: 'if sc1_when == u"Outlook": sc1_do_work,sc1_work_done = True,True'
2240    <-Source: line: 'if sc1_when == u"Outlook": sc1_do_work,sc1_work_done = True,True'
2240   <--Function: line: 'if sc1_when == u"Outlook": sc1_do_work,sc1_work_done = True,True'
2240  <---Source: line: 'if sc1_when == u"Outlook": sc1_do_work,sc1_work_done = True,True'
2240 <----Class: line: 'if sc1_when == u"Outlook": sc1_do_work,sc1_work_done = True,True'
2240<-----Source: line: 'if sc1_when == u"Outlook": sc1_do_work,sc1_work_done = True,True'
2242      Switch: line: 'if sc1_do_work:'
2242    <-Source: line: 'if sc1_do_work:'
2242   <--Function: line: 'if sc1_do_work:'
2242  <---Source: line: 'if sc1_do_work:'
2242 <----Class: line: 'if sc1_do_work:'
2242<-----Source: line: 'if sc1_do_work:'
2243      Switch: begin: 'block-if'
2243    <-Source: begin: 'block-if'
2243   <--Function: begin: 'block-if'
2243  <---Source: begin: 'block-if'
2243 <----Class: begin: 'block-if'
2243<-----Source: begin: 'block-if'
2243      Source: begin-gen
2243       If: begin-gen
2243        Expression: begin-gen
2243         Identifier: begin-gen
2243          Identifier: expr: 'documentos'
2243        <-Expression: expr: 'documentos'
2243         Identifier: end-gen
2243         Compare: begin-gen
2243          Compare: expr: '!='
2243        <-Expression: expr: '!='
2243         Compare: end-gen
2243         Constant: begin-gen
2243          Constant: ctype: 'String' -> ''
2243          Constant: expr: 'u""'
2243        <-Expression: expr: 'u""'
2243         Constant: end-gen
2243        Expression: end-gen
2243        If: line: 'if documentos != u"":'
2243      <-Source: line: 'if documentos != u"":'
2243     <--Switch: line: 'if documentos != u"":'
2243    <---Source: line: 'if documentos != u"":'
2243   <----Function: line: 'if documentos != u"":'
2243  <-----Source: line: 'if documentos != u"":'
2243 <------Class: line: 'if documentos != u"":'
2243<-------Source: line: 'if documentos != u"":'
2244        If: begin: 'block-if'
2244      <-Source: begin: 'block-if'
2244     <--Switch: begin: 'block-if'
2244    <---Source: begin: 'block-if'
2244   <----Function: begin: 'block-if'
2244  <-----Source: begin: 'block-if'
2244 <------Class: begin: 'block-if'
2244<-------Source: begin: 'block-if'
2244        Source: begin-gen
2244         InstructionUpdate: begin-gen
2244          Identifier: begin-gen
2244           Identifier: expr: 'documentos'
2244          Identifier: end-gen
2244          OpUpdate: begin-gen
2244           OpUpdate: expr: '='
2244          OpUpdate: end-gen
2244          Value: begin-gen
2244           Member: begin-gen
2244            Identifier: begin-gen
2244             Identifier: expr: 'qsatype.Dir'
2244            Identifier: end-gen
2244            FunctionCall: begin-gen
2244             Value: begin-gen
2244              Identifier: begin-gen
2244               Identifier: expr: 'documentos'
2244             <-Value: expr: 'documentos'
2244              Identifier: end-gen
2244             Value: end-gen
2244             FunctionCall: expr: 'convertSeparators(documentos)'
2244            FunctionCall: end-gen
2244            Member: expr: 'qsatype.Dir.convertSeparators(documentos)'
2244          <-Value: expr: 'qsatype.Dir.convertSeparators(documentos)'
2244           Member: end-gen
2244          Value: end-gen
2244          InstructionUpdate: line: 'documentos = qsatype.Dir.convertSeparators(documentos)'
2244        <-Source: line: 'documentos = qsatype.Dir.convertSeparators(documentos)'
2244       <--If: line: 'documentos = qsatype.Dir.convertSeparators(documentos)'
2244      <---Source: line: 'documentos = qsatype.Dir.convertSeparators(documentos)'
2244     <----Switch: line: 'documentos = qsatype.Dir.convertSeparators(documentos)'
2244    <-----Source: line: 'documentos = qsatype.Dir.convertSeparators(documentos)'
2244   <------Function: line: 'documentos = qsatype.Dir.convertSeparators(documentos)'
2244  <-------Source: line: 'documentos = qsatype.Dir.convertSeparators(documentos)'
2244 <--------Class: line: 'documentos = qsatype.Dir.convertSeparators(documentos)'
2244<---------Source: line: 'documentos = qsatype.Dir.convertSeparators(documentos)'
2245         InstructionUpdate: end-gen
2245         InstructionUpdate: begin-gen
2245          Identifier: begin-gen
2245           Identifier: expr: 'comando'
2245          Identifier: end-gen
2245          OpUpdate: begin-gen
2245           OpUpdate: expr: '='
2245          OpUpdate: end-gen
2245          Value: begin-gen
2245           Constant: begin-gen
2245            Constant: ctype: None -> None
2245            Expression: begin-gen
2245             Expression: expr: 'ustr('
2245             Constant: begin-gen
2245              Constant: ctype: 'String' -> '\\"'
2245              Constant: expr: 'u"\\""'
2245            <-Expression: expr: 'u"\\""'
2245             Constant: end-gen
2245             Expression: expr: ','
2245             Identifier: begin-gen
2245              Identifier: expr: 'nombreCorreo'
2245            <-Expression: expr: 'nombreCorreo'
2245             Identifier: end-gen
2245             Expression: expr: ','
2245             Constant: begin-gen
2245              Constant: ctype: 'String' -> '\\" /c'
2245              Constant: expr: 'u"\\" /c"'
2245            <-Expression: expr: 'u"\\" /c"'
2245             Constant: end-gen
2245             Expression: expr: ')'
2245            Expression: end-gen
2245            Value: begin-gen
2245             Constant: begin-gen
2245              Constant: ctype: 'String' -> 'ipm.note'
2245              Constant: expr: 'u"ipm.note"'
2245            <-Value: expr: 'u"ipm.note"'
2245             Constant: end-gen
2245            Value: end-gen
2245            Value: begin-gen
2245             Constant: begin-gen
2245              Constant: ctype: 'String' -> '/m'
2245              Constant: expr: 'u"/m"'
2245            <-Value: expr: 'u"/m"'
2245             Constant: end-gen
2245            Value: end-gen
2245            Value: begin-gen
2245             Identifier: begin-gen
2245              Identifier: expr: 'destinatarios'
2245            <-Value: expr: 'destinatarios'
2245             Identifier: end-gen
2245            Value: end-gen
2245            Value: begin-gen
2245             Constant: begin-gen
2245              Constant: ctype: 'String' -> '/a'
2245              Constant: expr: 'u"/a"'
2245            <-Value: expr: 'u"/a"'
2245             Constant: end-gen
2245            Value: end-gen
2245            Value: begin-gen
2245             Identifier: begin-gen
2245              Identifier: expr: 'documentos'
2245            <-Value: expr: 'documentos'
2245             Identifier: end-gen
2245            Value: end-gen
2245            Constant: expr: 'qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios, u"/a", documentos])'
2245          <-Value: expr: 'qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios, u"/a", documentos])'
2245           Constant: end-gen
2245          Value: end-gen
2245          InstructionUpdate: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios, u"/a", documentos])'
2245        <-Source: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios, u"/a", documentos])'
2245       <--If: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios, u"/a", documentos])'
2245      <---Source: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios, u"/a", documentos])'
2245     <----Switch: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios, u"/a", documentos])'
2245    <-----Source: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios, u"/a", documentos])'
2245   <------Function: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios, u"/a", documentos])'
2245  <-------Source: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios, u"/a", documentos])'
2245 <--------Class: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios, u"/a", documentos])'
2245<---------Source: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios, u"/a", documentos])'
2246         InstructionUpdate: end-gen
2246        Source: end-gen
2246        If: end: 'block-if'
2246      <-Source: end: 'block-if'
2246     <--Switch: end: 'block-if'
2246    <---Source: end: 'block-if'
2246   <----Function: end: 'block-if'
2246  <-----Source: end: 'block-if'
2246 <------Class: end: 'block-if'
2246<-------Source: end: 'block-if'
2246        If: line: 'else:'
2246      <-Source: line: 'else:'
2246     <--Switch: line: 'else:'
2246    <---Source: line: 'else:'
2246   <----Function: line: 'else:'
2246  <-----Source: line: 'else:'
2246 <------Class: line: 'else:'
2246<-------Source: line: 'else:'
2247        If: begin: 'block-else'
2247      <-Source: begin: 'block-else'
2247     <--Switch: begin: 'block-else'
2247    <---Source: begin: 'block-else'
2247   <----Function: begin: 'block-else'
2247  <-----Source: begin: 'block-else'
2247 <------Class: begin: 'block-else'
2247<-------Source: begin: 'block-else'
2247        Source: begin-gen
2247         InstructionUpdate: begin-gen
2247          Identifier: begin-gen
2247           Identifier: expr: 'comando'
2247          Identifier: end-gen
2247          OpUpdate: begin-gen
2247           OpUpdate: expr: '='
2247          OpUpdate: end-gen
2247          Value: begin-gen
2247           Constant: begin-gen
2247            Constant: ctype: None -> None
2247            Expression: begin-gen
2247             Expression: expr: 'ustr('
2247             Constant: begin-gen
2247              Constant: ctype: 'String' -> '\\"'
2247              Constant: expr: 'u"\\""'
2247            <-Expression: expr: 'u"\\""'
2247             Constant: end-gen
2247             Expression: expr: ','
2247             Identifier: begin-gen
2247              Identifier: expr: 'nombreCorreo'
2247            <-Expression: expr: 'nombreCorreo'
2247             Identifier: end-gen
2247             Expression: expr: ','
2247             Constant: begin-gen
2247              Constant: ctype: 'String' -> '\\" /c'
2247              Constant: expr: 'u"\\" /c"'
2247            <-Expression: expr: 'u"\\" /c"'
2247             Constant: end-gen
2247             Expression: expr: ')'
2247            Expression: end-gen
2247            Value: begin-gen
2247             Constant: begin-gen
2247              Constant: ctype: 'String' -> 'ipm.note'
2247              Constant: expr: 'u"ipm.note"'
2247            <-Value: expr: 'u"ipm.note"'
2247             Constant: end-gen
2247            Value: end-gen
2247            Value: begin-gen
2247             Constant: begin-gen
2247              Constant: ctype: 'String' -> '/m'
2247              Constant: expr: 'u"/m"'
2247            <-Value: expr: 'u"/m"'
2247             Constant: end-gen
2247            Value: end-gen
2247            Value: begin-gen
2247             Identifier: begin-gen
2247              Identifier: expr: 'destinatarios'
2247            <-Value: expr: 'destinatarios'
2247             Identifier: end-gen
2247            Value: end-gen
2247            Constant: expr: 'qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios])'
2247          <-Value: expr: 'qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios])'
2247           Constant: end-gen
2247          Value: end-gen
2247          InstructionUpdate: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios])'
2247        <-Source: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios])'
2247       <--If: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios])'
2247      <---Source: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios])'
2247     <----Switch: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios])'
2247    <-----Source: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios])'
2247   <------Function: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios])'
2247  <-------Source: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios])'
2247 <--------Class: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios])'
2247<---------Source: line: 'comando = qsatype.Array([ustr( u"\\"" , nombreCorreo , u"\\" /c" ), u"ipm.note", u"/m", destinatarios])'
2248         InstructionUpdate: end-gen
2248        Source: end-gen
2248        If: end: 'block-else'
2248      <-Source: end: 'block-else'
2248     <--Switch: end: 'block-else'
2248    <---Source: end: 'block-else'
2248   <----Function: end: 'block-else'
2248  <-----Source: end: 'block-else'
2248 <------Class: end: 'block-else'
2248<-------Source: end: 'block-else'
2249       If: end-gen
2249       InstructionFlow: begin-gen
2249        InstructionFlow: break: 'break '
2249      <-Source: break: 'break '
2249     <--Switch: line: 'sc1_do_work = False # BREAK'
2249    <---Source: line: 'sc1_do_work = False # BREAK'
2249   <----Function: line: 'sc1_do_work = False # BREAK'
2249  <-----Source: line: 'sc1_do_work = False # BREAK'
2249 <------Class: line: 'sc1_do_work = False # BREAK'
2249<-------Source: line: 'sc1_do_work = False # BREAK'
2250       InstructionFlow: end-gen
2250      Source: end-gen
2250      Switch: end: 'block-if'
2250    <-Source: end: 'block-if'
2250   <--Function: end: 'block-if'
2250  <---Source: end: 'block-if'
2250 <----Class: end: 'block-if'
2250<-----Source: end: 'block-if'
2250      Value: begin-gen
2250       Constant: begin-gen
2250        Constant: ctype: 'String' -> 'KMail'
2250        Constant: expr: 'u"KMail"'
2250      <-Value: expr: 'u"KMail"'
2250       Constant: end-gen
2250      Value: end-gen
2250      Switch: line: 'if sc1_when == u"KMail": sc1_do_work,sc1_work_done = True,True'
2250    <-Source: line: 'if sc1_when == u"KMail": sc1_do_work,sc1_work_done = True,True'
2250   <--Function: line: 'if sc1_when == u"KMail": sc1_do_work,sc1_work_done = True,True'
2250  <---Source: line: 'if sc1_when == u"KMail": sc1_do_work,sc1_work_done = True,True'
2250 <----Class: line: 'if sc1_when == u"KMail": sc1_do_work,sc1_work_done = True,True'
2250<-----Source: line: 'if sc1_when == u"KMail": sc1_do_work,sc1_work_done = True,True'
2252      Switch: line: 'if sc1_do_work:'
2252    <-Source: line: 'if sc1_do_work:'
2252   <--Function: line: 'if sc1_do_work:'
2252  <---Source: line: 'if sc1_do_work:'
2252 <----Class: line: 'if sc1_do_work:'
2252<-----Source: line: 'if sc1_do_work:'
2253      Switch: begin: 'block-if'
2253    <-Source: begin: 'block-if'
2253   <--Function: begin: 'block-if'
2253  <---Source: begin: 'block-if'
2253 <----Class: begin: 'block-if'
2253<-----Source: begin: 'block-if'
2253      Source: begin-gen
2253       If: begin-gen
2253        Expression: begin-gen
2253         Identifier: begin-gen
2253          Identifier: expr: 'documentos'
2253        <-Expression: expr: 'documentos'
2253         Identifier: end-gen
2253         Compare: begin-gen
2253          Compare: expr: '!='
2253        <-Expression: expr: '!='
2253         Compare: end-gen
2253         Constant: begin-gen
2253          Constant: ctype: 'String' -> ''
2253          Constant: expr: 'u""'
2253        <-Expression: expr: 'u""'
2253         Constant: end-gen
2253        Expression: end-gen
2253        If: line: 'if documentos != u"":'
2253      <-Source: line: 'if documentos != u"":'
2253     <--Switch: line: 'if documentos != u"":'
2253    <---Source: line: 'if documentos != u"":'
2253   <----Function: line: 'if documentos != u"":'
2253  <-----Source: line: 'if documentos != u"":'
2253 <------Class: line: 'if documentos != u"":'
2253<-------Source: line: 'if documentos != u"":'
2254        If: begin: 'block-if'
2254      <-Source: begin: 'block-if'
2254     <--Switch: begin: 'block-if'
2254    <---Source: begin: 'block-if'
2254   <----Function: begin: 'block-if'
2254  <-----Source: begin: 'block-if'
2254 <------Class: begin: 'block-if'
2254<-------Source: begin: 'block-if'
2254        Source: begin-gen
2254         InstructionUpdate: begin-gen
2254          Identifier: begin-gen
2254           Identifier: expr: 'comando'
2254          Identifier: end-gen
2254          OpUpdate: begin-gen
2254           OpUpdate: expr: '='
2254          OpUpdate: end-gen
2254          Value: begin-gen
2254           Constant: begin-gen
2254            Constant: ctype: None -> None
2254            Value: begin-gen
2254             Identifier: begin-gen
2254              Identifier: expr: 'nombreCorreo'
2254            <-Value: expr: 'nombreCorreo'
2254             Identifier: end-gen
2254            Value: end-gen
2254            Value: begin-gen
2254             Identifier: begin-gen
2254              Identifier: expr: 'destinatarios'
2254            <-Value: expr: 'destinatarios'
2254             Identifier: end-gen
2254            Value: end-gen
2254            Value: begin-gen
2254             Constant: begin-gen
2254              Constant: ctype: 'String' -> '-s'
2254              Constant: expr: 'u"-s"'
2254            <-Value: expr: 'u"-s"'
2254             Constant: end-gen
2254            Value: end-gen
2254            Value: begin-gen
2254             Identifier: begin-gen
2254              Identifier: expr: 'asunto'
2254            <-Value: expr: 'asunto'
2254             Identifier: end-gen
2254            Value: end-gen
2254            Value: begin-gen
2254             Constant: begin-gen
2254              Constant: ctype: 'String' -> '--body'
2254              Constant: expr: 'u"--body"'
2254            <-Value: expr: 'u"--body"'
2254             Constant: end-gen
2254            Value: end-gen
2254            Value: begin-gen
2254             Identifier: begin-gen
2254              Identifier: expr: 'cuerpo'
2254            <-Value: expr: 'cuerpo'
2254             Identifier: end-gen
2254            Value: end-gen
2254            Value: begin-gen
2254             Identifier: begin-gen
2254              Identifier: expr: 'documentos'
2254            <-Value: expr: 'documentos'
2254             Identifier: end-gen
2254            Value: end-gen
2254            Constant: expr: 'qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo, documentos])'
2254          <-Value: expr: 'qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo, documentos])'
2254           Constant: end-gen
2254          Value: end-gen
2254          InstructionUpdate: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo, documentos])'
2254        <-Source: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo, documentos])'
2254       <--If: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo, documentos])'
2254      <---Source: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo, documentos])'
2254     <----Switch: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo, documentos])'
2254    <-----Source: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo, documentos])'
2254   <------Function: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo, documentos])'
2254  <-------Source: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo, documentos])'
2254 <--------Class: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo, documentos])'
2254<---------Source: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo, documentos])'
2255         InstructionUpdate: end-gen
2255        Source: end-gen
2255        If: end: 'block-if'
2255      <-Source: end: 'block-if'
2255     <--Switch: end: 'block-if'
2255    <---Source: end: 'block-if'
2255   <----Function: end: 'block-if'
2255  <-----Source: end: 'block-if'
2255 <------Class: end: 'block-if'
2255<-------Source: end: 'block-if'
2255        If: line: 'else:'
2255      <-Source: line: 'else:'
2255     <--Switch: line: 'else:'
2255    <---Source: line: 'else:'
2255   <----Function: line: 'else:'
2255  <-----Source: line: 'else:'
2255 <------Class: line: 'else:'
2255<-------Source: line: 'else:'
2256        If: begin: 'block-else'
2256      <-Source: begin: 'block-else'
2256     <--Switch: begin: 'block-else'
2256    <---Source: begin: 'block-else'
2256   <----Function: begin: 'block-else'
2256  <-----Source: begin: 'block-else'
2256 <------Class: begin: 'block-else'
2256<-------Source: begin: 'block-else'
2256        Source: begin-gen
2256         InstructionUpdate: begin-gen
2256          Identifier: begin-gen
2256           Identifier: expr: 'comando'
2256          Identifier: end-gen
2256          OpUpdate: begin-gen
2256           OpUpdate: expr: '='
2256          OpUpdate: end-gen
2256          Value: begin-gen
2256           Constant: begin-gen
2256            Constant: ctype: None -> None
2256            Value: begin-gen
2256             Identifier: begin-gen
2256              Identifier: expr: 'nombreCorreo'
2256            <-Value: expr: 'nombreCorreo'
2256             Identifier: end-gen
2256            Value: end-gen
2256            Value: begin-gen
2256             Identifier: begin-gen
2256              Identifier: expr: 'destinatarios'
2256            <-Value: expr: 'destinatarios'
2256             Identifier: end-gen
2256            Value: end-gen
2256            Value: begin-gen
2256             Constant: begin-gen
2256              Constant: ctype: 'String' -> '-s'
2256              Constant: expr: 'u"-s"'
2256            <-Value: expr: 'u"-s"'
2256             Constant: end-gen
2256            Value: end-gen
2256            Value: begin-gen
2256             Identifier: begin-gen
2256              Identifier: expr: 'asunto'
2256            <-Value: expr: 'asunto'
2256             Identifier: end-gen
2256            Value: end-gen
2256            Value: begin-gen
2256             Constant: begin-gen
2256              Constant: ctype: 'String' -> '--body'
2256              Constant: expr: 'u"--body"'
2256            <-Value: expr: 'u"--body"'
2256             Constant: end-gen
2256            Value: end-gen
2256            Value: begin-gen
2256             Identifier: begin-gen
2256              Identifier: expr: 'cuerpo'
2256            <-Value: expr: 'cuerpo'
2256             Identifier: end-gen
2256            Value: end-gen
2256            Constant: expr: 'qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo])'
2256          <-Value: expr: 'qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo])'
2256           Constant: end-gen
2256          Value: end-gen
2256          InstructionUpdate: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo])'
2256        <-Source: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo])'
2256       <--If: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo])'
2256      <---Source: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo])'
2256     <----Switch: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo])'
2256    <-----Source: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo])'
2256   <------Function: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo])'
2256  <-------Source: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo])'
2256 <--------Class: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo])'
2256<---------Source: line: 'comando = qsatype.Array([nombreCorreo, destinatarios, u"-s", asunto, u"--body", cuerpo])'
2257         InstructionUpdate: end-gen
2257        Source: end-gen
2257        If: end: 'block-else'
2257      <-Source: end: 'block-else'
2257     <--Switch: end: 'block-else'
2257    <---Source: end: 'block-else'
2257   <----Function: end: 'block-else'
2257  <-----Source: end: 'block-else'
2257 <------Class: end: 'block-else'
2257<-------Source: end: 'block-else'
2258       If: end-gen
2258       InstructionFlow: begin-gen
2258        InstructionFlow: break: 'break '
2258      <-Source: break: 'break '
2258     <--Switch: line: 'sc1_do_work = False # BREAK'
2258    <---Source: line: 'sc1_do_work = False # BREAK'
2258   <----Function: line: 'sc1_do_work = False # BREAK'
2258  <-----Source: line: 'sc1_do_work = False # BREAK'
2258 <------Class: line: 'sc1_do_work = False # BREAK'
2258<-------Source: line: 'sc1_do_work = False # BREAK'
2259       InstructionFlow: end-gen
2259      Source: end-gen
2259      Switch: end: 'block-if'
2259    <-Source: end: 'block-if'
2259   <--Function: end: 'block-if'
2259  <---Source: end: 'block-if'
2259 <----Class: end: 'block-if'
2259<-----Source: end: 'block-if'
2259      Switch: line: 'if not sc1_work_done: sc1_do_work,sc1_work_done = True,True'
2259    <-Source: line: 'if not sc1_work_done: sc1_do_work,sc1_work_done = True,True'
2259   <--Function: line: 'if not sc1_work_done: sc1_do_work,sc1_work_done = True,True'
2259  <---Source: line: 'if not sc1_work_done: sc1_do_work,sc1_work_done = True,True'
2259 <----Class: line: 'if not sc1_work_done: sc1_do_work,sc1_work_done = True,True'
2259<-----Source: line: 'if not sc1_work_done: sc1_do_work,sc1_work_done = True,True'
2261      Switch: line: 'if sc1_do_work:'
2261    <-Source: line: 'if sc1_do_work:'
2261   <--Function: line: 'if sc1_do_work:'
2261  <---Source: line: 'if sc1_do_work:'
2261 <----Class: line: 'if sc1_do_work:'
2261<-----Source: line: 'if sc1_do_work:'
2262      Switch: begin: 'block-if'
2262    <-Source: begin: 'block-if'
2262   <--Function: begin: 'block-if'
2262  <---Source: begin: 'block-if'
2262 <----Class: begin: 'block-if'
2262<-----Source: begin: 'block-if'
2262      Source: begin-gen
2262       Source: line: 'pass'
2262     <-Switch: line: 'pass'
2262    <--Source: line: 'pass'
2262   <---Function: line: 'pass'
2262  <----Source: line: 'pass'
2262 <-----Class: line: 'pass'
2262<------Source: line: 'pass'
2263      Source: end-gen
2263      Switch: end: 'block-if'
2263    <-Source: end: 'block-if'
2263   <--Function: end: 'block-if'
2263  <---Source: end: 'block-if'
2263 <----Class: end: 'block-if'
2263<-----Source: end: 'block-if'
2263     Switch: end-gen
2263     InstructionFlow: begin-gen
2263      Value: begin-gen
2263       Identifier: begin-gen
2263        Identifier: expr: 'comando'
2263      <-Value: expr: 'comando'
2263       Identifier: end-gen
2263      Value: end-gen
2263      InstructionFlow: line: 'return comando'
2263    <-Source: line: 'return comando'
2263   <--Function: line: 'return comando'
2263  <---Source: line: 'return comando'
2263 <----Class: line: 'return comando'
2263<-----Source: line: 'return comando'
2264     InstructionFlow: end-gen
2264    Source: end-gen
2264    Function: end: 'block-def-envioMail_componerCorreo'
2264  <-Source: end: 'block-def-envioMail_componerCorreo'
2264 <--Class: end: 'block-def-envioMail_componerCorreo'
2264<---Source: end: 'block-def-envioMail_componerCorreo'
2265   Function: end-gen
2265   Function: begin-gen
2265    Function: line: 'def envioMail_existeEnvioMail(self):'
2265  <-Source: line: 'def envioMail_existeEnvioMail(self):'
2265 <--Class: line: 'def envioMail_existeEnvioMail(self):'
2265<---Source: line: 'def envioMail_existeEnvioMail(self):'
2266    Function: begin: 'block-def-envioMail_existeEnvioMail'
2266  <-Source: begin: 'block-def-envioMail_existeEnvioMail'
2266 <--Class: begin: 'block-def-envioMail_existeEnvioMail'
2266<---Source: begin: 'block-def-envioMail_existeEnvioMail'
2266    Source: begin-gen
2266     InstructionFlow: begin-gen
2266      Value: begin-gen
2266       Identifier: begin-gen
2266        Identifier: expr: 'True'
2266      <-Value: expr: 'True'
2266       Identifier: end-gen
2266      Value: end-gen
2266      InstructionFlow: line: 'return True'
2266    <-Source: line: 'return True'
2266   <--Function: line: 'return True'
2266  <---Source: line: 'return True'
2266 <----Class: line: 'return True'
2266<-----Source: line: 'return True'
2267     InstructionFlow: end-gen
2267    Source: end-gen
2267    Function: end: 'block-def-envioMail_existeEnvioMail'
2267  <-Source: end: 'block-def-envioMail_existeEnvioMail'
2267 <--Class: end: 'block-def-envioMail_existeEnvioMail'
2267<---Source: end: 'block-def-envioMail_existeEnvioMail'
2268   Function: end-gen
2268   Function: begin-gen
2268    Variable: begin-gen
2268     Variable: expr: 'codLiquidacion'
2268    Variable: end-gen
2268    Function: line: 'def dtoEsp_calcularLiquidacionAgente(self, codLiquidacion = None):'
2268  <-Source: line: 'def dtoEsp_calcularLiquidacionAgente(self, codLiquidacion = None):'
2268 <--Class: line: 'def dtoEsp_calcularLiquidacionAgente(self, codLiquidacion = None):'
2268<---Source: line: 'def dtoEsp_calcularLiquidacionAgente(self, codLiquidacion = None):'
2269    Function: begin: 'block-def-dtoEsp_calcularLiquidacionAgente'
2269  <-Source: begin: 'block-def-dtoEsp_calcularLiquidacionAgente'
2269 <--Class: begin: 'block-def-dtoEsp_calcularLiquidacionAgente'
2269<---Source: begin: 'block-def-dtoEsp_calcularLiquidacionAgente'
2269    Source: begin-gen
2269     DeclarationBlock: begin-gen
2269      Variable: begin-gen
2269       Variable: expr: 'util'
2269       Variable: expr: '='
2269       Value: begin-gen
2269        New: begin-gen
2269         FunctionCall: begin-gen
2269          FunctionCall: expr: 'FLUtil()'
2269        <-New: expr: 'qsatype.FLUtil()'
2269       <--Value: expr: 'qsatype.FLUtil()'
2269      <---Variable: expr: 'qsatype.FLUtil()'
2269         FunctionCall: end-gen
2269        New: end-gen
2269       Value: end-gen
2269      Variable: end-gen
2269      DeclarationBlock: line: 'util = qsatype.FLUtil()'
2269    <-Source: line: 'util = qsatype.FLUtil()'
2269   <--Function: line: 'util = qsatype.FLUtil()'
2269  <---Source: line: 'util = qsatype.FLUtil()'
2269 <----Class: line: 'util = qsatype.FLUtil()'
2269<-----Source: line: 'util = qsatype.FLUtil()'
2270     DeclarationBlock: end-gen
2270     DeclarationBlock: begin-gen
2270      Variable: begin-gen
2270       Variable: expr: 'qryFacturas'
2270       Variable: expr: '='
2270       Value: begin-gen
2270        New: begin-gen
2270         FunctionCall: begin-gen
2270          FunctionCall: expr: 'FLSqlQuery()'
2270        <-New: expr: 'qsatype.FLSqlQuery()'
2270       <--Value: expr: 'qsatype.FLSqlQuery()'
2270      <---Variable: expr: 'qsatype.FLSqlQuery()'
2270         FunctionCall: end-gen
2270        New: end-gen
2270       Value: end-gen
2270      Variable: end-gen
2270      DeclarationBlock: line: 'qryFacturas = qsatype.FLSqlQuery()'
2270    <-Source: line: 'qryFacturas = qsatype.FLSqlQuery()'
2270   <--Function: line: 'qryFacturas = qsatype.FLSqlQuery()'
2270  <---Source: line: 'qryFacturas = qsatype.FLSqlQuery()'
2270 <----Class: line: 'qryFacturas = qsatype.FLSqlQuery()'
2270<-----Source: line: 'qryFacturas = qsatype.FLSqlQuery()'
2271     DeclarationBlock: end-gen
2271     InstructionCall: begin-gen
2271      Member: begin-gen
2271       Identifier: begin-gen
2271        Identifier: expr: 'qryFacturas'
2271       Identifier: end-gen
2271       FunctionCall: begin-gen
2271        Value: begin-gen
2271         Constant: begin-gen
2271          Constant: ctype: 'String' -> 'facturascli,lineasfacturascli'
2271          Constant: expr: 'u"facturascli,lineasfacturascli"'
2271        <-Value: expr: 'u"facturascli,lineasfacturascli"'
2271         Constant: end-gen
2271        Value: end-gen
2271        FunctionCall: expr: 'setTablesList(u"facturascli,lineasfacturascli")'
2271       FunctionCall: end-gen
2271       Member: expr: 'qryFacturas.setTablesList(u"facturascli,lineasfacturascli")'
2271      Member: end-gen
2271      InstructionCall: line: 'qryFacturas.setTablesList(u"facturascli,lineasfacturascli")'
2271    <-Source: line: 'qryFacturas.setTablesList(u"facturascli,lineasfacturascli")'
2271   <--Function: line: 'qryFacturas.setTablesList(u"facturascli,lineasfacturascli")'
2271  <---Source: line: 'qryFacturas.setTablesList(u"facturascli,lineasfacturascli")'
2271 <----Class: line: 'qryFacturas.setTablesList(u"facturascli,lineasfacturascli")'
2271<-----Source: line: 'qryFacturas.setTablesList(u"facturascli,lineasfacturascli")'
2272     InstructionCall: end-gen
2272     InstructionCall: begin-gen
2272      Member: begin-gen
2272       Identifier: begin-gen
2272        Identifier: expr: 'qryFacturas'
2272       Identifier: end-gen
2272       FunctionCall: begin-gen
2272        Value: begin-gen
2272         Constant: begin-gen
2272          Constant: ctype: 'String' -> 'coddivisa, tasaconv, facturascli.porcomision, lineasfacturascli.porcomision, neto, facturascli.idfactura, lineasfacturascli.pvptotal, facturascli.pordtoesp'
2272          Constant: expr: 'u"coddivisa, tasaconv, facturascli.porcomision, lineasfacturascli.porcomision, neto, facturascli.idfactura, lineasfacturascli.pvptotal, facturascli.pordtoesp"'
2272        <-Value: expr: 'u"coddivisa, tasaconv, facturascli.porcomision, lineasfacturascli.porcomision, neto, facturascli.idfactura, lineasfacturascli.pvptotal, facturascli.pordtoesp"'
2272         Constant: end-gen
2272        Value: end-gen
2272        FunctionCall: expr: 'setSelect(u"coddivisa, tasaconv, facturascli.porcomision, lineasfacturascli.porcomision, neto, facturascli.idfactura, lineasfacturascli.pvptotal, facturascli.pordtoesp")'
2272       FunctionCall: end-gen
2272       Member: expr: 'qryFacturas.setSelect(u"coddivisa, tasaconv, facturascli.porcomision, lineasfacturascli.porcomision, neto, facturascli.idfactura, lineasfacturascli.pvptotal, facturascli.pordtoesp")'
2272      Member: end-gen
2272      InstructionCall: line: 'qryFacturas.setSelect(u"coddivisa, tasaconv, facturascli.porcomision, lineasfacturascli.porcomision, neto, facturascli.idfactura, lineasfacturascli.pvptotal, facturascli.pordtoesp")'
2272    <-Source: line: 'qryFacturas.setSelect(u"coddivisa, tasaconv, facturascli.porcomision, lineasfacturascli.porcomision, neto, facturascli.idfactura, lineasfacturascli.pvptotal, facturascli.pordtoesp")'
2272   <--Function: line: 'qryFacturas.setSelect(u"coddivisa, tasaconv, facturascli.porcomision, lineasfacturascli.porcomision, neto, facturascli.idfactura, lineasfacturascli.pvptotal, facturascli.pordtoesp")'
2272  <---Source: line: 'qryFacturas.setSelect(u"coddivisa, tasaconv, facturascli.porcomision, lineasfacturascli.porcomision, neto, facturascli.idfactura, lineasfacturascli.pvptotal, facturascli.pordtoesp")'
2272 <----Class: line: 'qryFacturas.setSelect(u"coddivisa, tasaconv, facturascli.porcomision, lineasfacturascli.porcomision, neto, facturascli.idfactura, lineasfacturascli.pvptotal, facturascli.pordtoesp")'
2272<-----Source: line: 'qryFacturas.setSelect(u"coddivisa, tasaconv, facturascli.porcomision, lineasfacturascli.porcomision, neto, facturascli.idfactura, lineasfacturascli.pvptotal, facturascli.pordtoesp")'
2273     InstructionCall: end-gen
2273     InstructionCall: begin-gen
2273      Member: begin-gen
2273       Identifier: begin-gen
2273        Identifier: expr: 'qryFacturas'
2273       Identifier: end-gen
2273       FunctionCall: begin-gen
2273        Value: begin-gen
2273         Constant: begin-gen
2273          Constant: ctype: 'String' -> 'facturascli INNER JOIN lineasfacturascli ON facturascli.idfactura = lineasfacturascli.idfactura'
2273          Constant: expr: 'u"facturascli INNER JOIN lineasfacturascli ON facturascli.idfactura = lineasfacturascli.idfactura"'
2273        <-Value: expr: 'u"facturascli INNER JOIN lineasfacturascli ON facturascli.idfactura = lineasfacturascli.idfactura"'
2273         Constant: end-gen
2273        Value: end-gen
2273        FunctionCall: expr: 'setFrom(u"facturascli INNER JOIN lineasfacturascli ON facturascli.idfactura = lineasfacturascli.idfactura")'
2273       FunctionCall: end-gen
2273       Member: expr: 'qryFacturas.setFrom(u"facturascli INNER JOIN lineasfacturascli ON facturascli.idfactura = lineasfacturascli.idfactura")'
2273      Member: end-gen
2273      InstructionCall: line: 'qryFacturas.setFrom(u"facturascli INNER JOIN lineasfacturascli ON facturascli.idfactura = lineasfacturascli.idfactura")'
2273    <-Source: line: 'qryFacturas.setFrom(u"facturascli INNER JOIN lineasfacturascli ON facturascli.idfactura = lineasfacturascli.idfactura")'
2273   <--Function: line: 'qryFacturas.setFrom(u"facturascli INNER JOIN lineasfacturascli ON facturascli.idfactura = lineasfacturascli.idfactura")'
2273  <---Source: line: 'qryFacturas.setFrom(u"facturascli INNER JOIN lineasfacturascli ON facturascli.idfactura = lineasfacturascli.idfactura")'
2273 <----Class: line: 'qryFacturas.setFrom(u"facturascli INNER JOIN lineasfacturascli ON facturascli.idfactura = lineasfacturascli.idfactura")'
2273<-----Source: line: 'qryFacturas.setFrom(u"facturascli INNER JOIN lineasfacturascli ON facturascli.idfactura = lineasfacturascli.idfactura")'
2274     InstructionCall: end-gen
2274     InstructionCall: begin-gen
2274      Member: begin-gen
2274       Identifier: begin-gen
2274        Identifier: expr: 'qryFacturas'
2274       Identifier: end-gen
2274       FunctionCall: begin-gen
2274        Expression: begin-gen
2274         Expression: expr: 'ustr('
2274         Constant: begin-gen
2274          Constant: ctype: 'String' -> "codliquidacion = '"
2274          Constant: expr: 'u"codliquidacion = \'"'
2274        <-Expression: expr: 'u"codliquidacion = \'"'
2274         Constant: end-gen
2274         Expression: expr: ','
2274         Identifier: begin-gen
2274          Identifier: expr: 'codLiquidacion'
2274        <-Expression: expr: 'codLiquidacion'
2274         Identifier: end-gen
2274         Expression: expr: ','
2274         Constant: begin-gen
2274          Constant: ctype: 'String' -> "'"
2274          Constant: expr: 'u"\'"'
2274        <-Expression: expr: 'u"\'"'
2274         Constant: end-gen
2274         Expression: expr: ')'
2274        Expression: end-gen
2274        FunctionCall: expr: 'setWhere(ustr( u"codliquidacion = \'" , codLiquidacion , u"\'" ))'
2274       FunctionCall: end-gen
2274       Member: expr: 'qryFacturas.setWhere(ustr( u"codliquidacion = \'" , codLiquidacion , u"\'" ))'
2274      Member: end-gen
2274      InstructionCall: line: 'qryFacturas.setWhere(ustr( u"codliquidacion = \'" , codLiquidacion , u"\'" ))'
2274    <-Source: line: 'qryFacturas.setWhere(ustr( u"codliquidacion = \'" , codLiquidacion , u"\'" ))'
2274   <--Function: line: 'qryFacturas.setWhere(ustr( u"codliquidacion = \'" , codLiquidacion , u"\'" ))'
2274  <---Source: line: 'qryFacturas.setWhere(ustr( u"codliquidacion = \'" , codLiquidacion , u"\'" ))'
2274 <----Class: line: 'qryFacturas.setWhere(ustr( u"codliquidacion = \'" , codLiquidacion , u"\'" ))'
2274<-----Source: line: 'qryFacturas.setWhere(ustr( u"codliquidacion = \'" , codLiquidacion , u"\'" ))'
2275     InstructionCall: end-gen
2275     If: begin-gen
2275      Value: begin-gen
2275       OpUnary: begin-gen
2275        OpUnary: expr: 'not'
2275      <-Value: expr: 'not'
2275        Member: begin-gen
2275         Identifier: begin-gen
2275          Identifier: expr: 'qryFacturas'
2275         Identifier: end-gen
2275         FunctionCall: begin-gen
2275          FunctionCall: expr: 'exec_()'
2275         FunctionCall: end-gen
2275         Member: expr: 'qryFacturas.exec_()'
2275       <-OpUnary: expr: 'qryFacturas.exec_()'
2275      <--Value: expr: 'qryFacturas.exec_()'
2275        Member: end-gen
2275       OpUnary: end-gen
2275      Value: end-gen
2275      If: line: 'if not qryFacturas.exec_():'
2275    <-Source: line: 'if not qryFacturas.exec_():'
2275   <--Function: line: 'if not qryFacturas.exec_():'
2275  <---Source: line: 'if not qryFacturas.exec_():'
2275 <----Class: line: 'if not qryFacturas.exec_():'
2275<-----Source: line: 'if not qryFacturas.exec_():'
2276      If: begin: 'block-if'
2276    <-Source: begin: 'block-if'
2276   <--Function: begin: 'block-if'
2276  <---Source: begin: 'block-if'
2276 <----Class: begin: 'block-if'
2276<-----Source: begin: 'block-if'
2276      Source: begin-gen
2276       InstructionFlow: begin-gen
2276        Value: begin-gen
2276         Identifier: begin-gen
2276          Identifier: expr: 'False'
2276        <-Value: expr: 'False'
2276         Identifier: end-gen
2276        Value: end-gen
2276        InstructionFlow: line: 'return False'
2276      <-Source: line: 'return False'
2276     <--If: line: 'return False'
2276    <---Source: line: 'return False'
2276   <----Function: line: 'return False'
2276  <-----Source: line: 'return False'
2276 <------Class: line: 'return False'
2276<-------Source: line: 'return False'
2277       InstructionFlow: end-gen
2277      Source: end-gen
2277      If: end: 'block-if'
2277    <-Source: end: 'block-if'
2277   <--Function: end: 'block-if'
2277  <---Source: end: 'block-if'
2277 <----Class: end: 'block-if'
2277<-----Source: end: 'block-if'
2277     If: end-gen
2277     DeclarationBlock: begin-gen
2277      Variable: begin-gen
2277       Variable: expr: 'total'
2277       Variable: expr: '='
2277       Value: begin-gen
2277        Constant: begin-gen
2277         Constant: ctype: 'Number' -> '0'
2277         Constant: expr: '0'
2277       <-Value: expr: '0'
2277      <--Variable: expr: '0'
2277        Constant: end-gen
2277       Value: end-gen
2277      Variable: end-gen
2277      DeclarationBlock: line: 'total = 0'
2277    <-Source: line: 'total = 0'
2277   <--Function: line: 'total = 0'
2277  <---Source: line: 'total = 0'
2277 <----Class: line: 'total = 0'
2277<-----Source: line: 'total = 0'
2278     DeclarationBlock: end-gen
2278     DeclarationBlock: begin-gen
2278      Variable: begin-gen
2278       Variable: expr: 'comision'
2278       Variable: expr: '='
2278       Value: begin-gen
2278        Constant: begin-gen
2278         Constant: ctype: 'Number' -> '0'
2278         Constant: expr: '0'
2278       <-Value: expr: '0'
2278      <--Variable: expr: '0'
2278        Constant: end-gen
2278       Value: end-gen
2278      Variable: end-gen
2278      DeclarationBlock: line: 'comision = 0'
2278    <-Source: line: 'comision = 0'
2278   <--Function: line: 'comision = 0'
2278  <---Source: line: 'comision = 0'
2278 <----Class: line: 'comision = 0'
2278<-----Source: line: 'comision = 0'
2279     DeclarationBlock: end-gen
2279     DeclarationBlock: begin-gen
2279      Variable: begin-gen
2279       Variable: expr: 'descuento'
2279       Variable: expr: '='
2279       Value: begin-gen
2279        Constant: begin-gen
2279         Constant: ctype: 'Number' -> '0'
2279         Constant: expr: '0'
2279       <-Value: expr: '0'
2279      <--Variable: expr: '0'
2279        Constant: end-gen
2279       Value: end-gen
2279      Variable: end-gen
2279      DeclarationBlock: line: 'descuento = 0'
2279    <-Source: line: 'descuento = 0'
2279   <--Function: line: 'descuento = 0'
2279  <---Source: line: 'descuento = 0'
2279 <----Class: line: 'descuento = 0'
2279<-----Source: line: 'descuento = 0'
2280     DeclarationBlock: end-gen
2280     DeclarationBlock: begin-gen
2280      Variable: begin-gen
2280       Variable: expr: 'tasaconv'
2280       Variable: expr: '='
2280       Value: begin-gen
2280        Constant: begin-gen
2280         Constant: ctype: 'Number' -> '0'
2280         Constant: expr: '0'
2280       <-Value: expr: '0'
2280      <--Variable: expr: '0'
2280        Constant: end-gen
2280       Value: end-gen
2280      Variable: end-gen
2280      DeclarationBlock: line: 'tasaconv = 0'
2280    <-Source: line: 'tasaconv = 0'
2280   <--Function: line: 'tasaconv = 0'
2280  <---Source: line: 'tasaconv = 0'
2280 <----Class: line: 'tasaconv = 0'
2280<-----Source: line: 'tasaconv = 0'
2281     DeclarationBlock: end-gen
2281     DeclarationBlock: begin-gen
2281      Variable: begin-gen
2281       Variable: expr: 'divisaEmpresa'
2281       Variable: expr: '='
2281       Value: begin-gen
2281        Member: begin-gen
2281         Identifier: begin-gen
2281          Identifier: expr: 'util'
2281         Identifier: end-gen
2281         FunctionCall: begin-gen
2281          Value: begin-gen
2281           Constant: begin-gen
2281            Constant: ctype: 'String' -> 'empresa'
2281            Constant: expr: 'u"empresa"'
2281          <-Value: expr: 'u"empresa"'
2281           Constant: end-gen
2281          Value: end-gen
2281          Value: begin-gen
2281           Constant: begin-gen
2281            Constant: ctype: 'String' -> 'coddivisa'
2281            Constant: expr: 'u"coddivisa"'
2281          <-Value: expr: 'u"coddivisa"'
2281           Constant: end-gen
2281          Value: end-gen
2281          Value: begin-gen
2281           Constant: begin-gen
2281            Constant: ctype: 'String' -> '1=1'
2281            Constant: expr: 'u"1=1"'
2281          <-Value: expr: 'u"1=1"'
2281           Constant: end-gen
2281          Value: end-gen
2281          FunctionCall: expr: 'sqlSelect(u"empresa", u"coddivisa", u"1=1")'
2281         FunctionCall: end-gen
2281         Member: expr: 'util.sqlSelect(u"empresa", u"coddivisa", u"1=1")'
2281       <-Value: expr: 'util.sqlSelect(u"empresa", u"coddivisa", u"1=1")'
2281      <--Variable: expr: 'util.sqlSelect(u"empresa", u"coddivisa", u"1=1")'
2281        Member: end-gen
2281       Value: end-gen
2281      Variable: end-gen
2281      DeclarationBlock: line: 'divisaEmpresa = util.sqlSelect(u"empresa", u"coddivisa", u"1=1")'
2281    <-Source: line: 'divisaEmpresa = util.sqlSelect(u"empresa", u"coddivisa", u"1=1")'
2281   <--Function: line: 'divisaEmpresa = util.sqlSelect(u"empresa", u"coddivisa", u"1=1")'
2281  <---Source: line: 'divisaEmpresa = util.sqlSelect(u"empresa", u"coddivisa", u"1=1")'
2281 <----Class: line: 'divisaEmpresa = util.sqlSelect(u"empresa", u"coddivisa", u"1=1")'
2281<-----Source: line: 'divisaEmpresa = util.sqlSelect(u"empresa", u"coddivisa", u"1=1")'
2282     DeclarationBlock: end-gen
2282     DeclarationBlock: begin-gen
2282      Variable: begin-gen
2282       Variable: expr: 'idfactura'
2282       Variable: expr: '='
2282       Value: begin-gen
2282        Constant: begin-gen
2282         Constant: ctype: 'Number' -> '0'
2282         Constant: expr: '0'
2282       <-Value: expr: '0'
2282      <--Variable: expr: '0'
2282        Constant: end-gen
2282       Value: end-gen
2282      Variable: end-gen
2282      DeclarationBlock: line: 'idfactura = 0'
2282    <-Source: line: 'idfactura = 0'
2282   <--Function: line: 'idfactura = 0'
2282  <---Source: line: 'idfactura = 0'
2282 <----Class: line: 'idfactura = 0'
2282<-----Source: line: 'idfactura = 0'
2283     DeclarationBlock: end-gen
2283     DeclarationBlock: begin-gen
2283      Variable: begin-gen
2283       Variable: expr: 'comisionFactura'
2283       Variable: expr: '='
2283       Value: begin-gen
2283        Identifier: begin-gen
2283         Identifier: expr: 'False'
2283       <-Value: expr: 'False'
2283      <--Variable: expr: 'False'
2283        Identifier: end-gen
2283       Value: end-gen
2283      Variable: end-gen
2283      DeclarationBlock: line: 'comisionFactura = False'
2283    <-Source: line: 'comisionFactura = False'
2283   <--Function: line: 'comisionFactura = False'
2283  <---Source: line: 'comisionFactura = False'
2283 <----Class: line: 'comisionFactura = False'
2283<-----Source: line: 'comisionFactura = False'
2284     DeclarationBlock: end-gen
2284     While: begin-gen
2284      Value: begin-gen
2284       Member: begin-gen
2284        Identifier: begin-gen
2284         Identifier: expr: 'qryFacturas'
2284        Identifier: end-gen
2284        FunctionCall: begin-gen
2284         FunctionCall: expr: 'next()'
2284        FunctionCall: end-gen
2284        Member: expr: 'qryFacturas.next()'
2284      <-Value: expr: 'qryFacturas.next()'
2284       Member: end-gen
2284      Value: end-gen
2284      While: line: 'while qryFacturas.next():'
2284    <-Source: line: 'while qryFacturas.next():'
2284   <--Function: line: 'while qryFacturas.next():'
2284  <---Source: line: 'while qryFacturas.next():'
2284 <----Class: line: 'while qryFacturas.next():'
2284<-----Source: line: 'while qryFacturas.next():'
2285      While: begin: 'block-while'
2285    <-Source: begin: 'block-while'
2285   <--Function: begin: 'block-while'
2285  <---Source: begin: 'block-while'
2285 <----Class: begin: 'block-while'
2285<-----Source: begin: 'block-while'
2285      Source: begin-gen
2285       If: begin-gen
2285        Expression: begin-gen
2285         OpUnary: begin-gen
2285          OpUnary: expr: 'not'
2285        <-Expression: expr: 'not'
2285          Identifier: begin-gen
2285           Identifier: expr: 'idfactura'
2285         <-OpUnary: expr: 'idfactura'
2285        <--Expression: expr: 'idfactura'
2285          Identifier: end-gen
2285         OpUnary: end-gen
2285         Compare: begin-gen
2285          Compare: expr: 'or'
2285        <-Expression: expr: 'or'
2285         Compare: end-gen
2285         Identifier: begin-gen
2285          Identifier: expr: 'idfactura'
2285        <-Expression: expr: 'idfactura'
2285         Identifier: end-gen
2285         Compare: begin-gen
2285          Compare: expr: '!='
2285        <-Expression: expr: '!='
2285         Compare: end-gen
2285         Member: begin-gen
2285          Identifier: begin-gen
2285           Identifier: expr: 'qryFacturas'
2285          Identifier: end-gen
2285          FunctionCall: begin-gen
2285           Value: begin-gen
2285            Constant: begin-gen
2285             Constant: ctype: 'String' -> 'facturascli.idfactura'
2285             Constant: expr: 'u"facturascli.idfactura"'
2285           <-Value: expr: 'u"facturascli.idfactura"'
2285            Constant: end-gen
2285           Value: end-gen
2285           FunctionCall: expr: 'value(u"facturascli.idfactura")'
2285          FunctionCall: end-gen
2285          Member: expr: 'qryFacturas.value(u"facturascli.idfactura")'
2285        <-Expression: expr: 'qryFacturas.value(u"facturascli.idfactura")'
2285         Member: end-gen
2285        Expression: end-gen
2285        If: line: 'if not idfactura or idfactura != qryFacturas.value(u"facturascli.idfactura"):'
2285      <-Source: line: 'if not idfactura or idfactura != qryFacturas.value(u"facturascli.idfactura"):'
2285     <--While: line: 'if not idfactura or idfactura != qryFacturas.value(u"facturascli.idfactura"):'
2285    <---Source: line: 'if not idfactura or idfactura != qryFacturas.value(u"facturascli.idfactura"):'
2285   <----Function: line: 'if not idfactura or idfactura != qryFacturas.value(u"facturascli.idfactura"):'
2285  <-----Source: line: 'if not idfactura or idfactura != qryFacturas.value(u"facturascli.idfactura"):'
2285 <------Class: line: 'if not idfactura or idfactura != qryFacturas.value(u"facturascli.idfactura"):'
2285<-------Source: line: 'if not idfactura or idfactura != qryFacturas.value(u"facturascli.idfactura"):'
2286        If: begin: 'block-if'
2286      <-Source: begin: 'block-if'
2286     <--While: begin: 'block-if'
2286    <---Source: begin: 'block-if'
2286   <----Function: begin: 'block-if'
2286  <-----Source: begin: 'block-if'
2286 <------Class: begin: 'block-if'
2286<-------Source: begin: 'block-if'
2286        Source: begin-gen
2286         InstructionUpdate: begin-gen
2286          Identifier: begin-gen
2286           Identifier: expr: 'idfactura'
2286          Identifier: end-gen
2286          OpUpdate: begin-gen
2286           OpUpdate: expr: '='
2286          OpUpdate: end-gen
2286          Value: begin-gen
2286           Member: begin-gen
2286            Identifier: begin-gen
2286             Identifier: expr: 'qryFacturas'
2286            Identifier: end-gen
2286            FunctionCall: begin-gen
2286             Value: begin-gen
2286              Constant: begin-gen
2286               Constant: ctype: 'String' -> 'facturascli.idfactura'
2286               Constant: expr: 'u"facturascli.idfactura"'
2286             <-Value: expr: 'u"facturascli.idfactura"'
2286              Constant: end-gen
2286             Value: end-gen
2286             FunctionCall: expr: 'value(u"facturascli.idfactura")'
2286            FunctionCall: end-gen
2286            Member: expr: 'qryFacturas.value(u"facturascli.idfactura")'
2286          <-Value: expr: 'qryFacturas.value(u"facturascli.idfactura")'
2286           Member: end-gen
2286          Value: end-gen
2286          InstructionUpdate: line: 'idfactura = qryFacturas.value(u"facturascli.idfactura")'
2286        <-Source: line: 'idfactura = qryFacturas.value(u"facturascli.idfactura")'
2286       <--If: line: 'idfactura = qryFacturas.value(u"facturascli.idfactura")'
2286      <---Source: line: 'idfactura = qryFacturas.value(u"facturascli.idfactura")'
2286     <----While: line: 'idfactura = qryFacturas.value(u"facturascli.idfactura")'
2286    <-----Source: line: 'idfactura = qryFacturas.value(u"facturascli.idfactura")'
2286   <------Function: line: 'idfactura = qryFacturas.value(u"facturascli.idfactura")'
2286  <-------Source: line: 'idfactura = qryFacturas.value(u"facturascli.idfactura")'
2286 <--------Class: line: 'idfactura = qryFacturas.value(u"facturascli.idfactura")'
2286<---------Source: line: 'idfactura = qryFacturas.value(u"facturascli.idfactura")'
2287         InstructionUpdate: end-gen
2287         If: begin-gen
2287          Value: begin-gen
2287           FunctionCall: begin-gen
2287            Value: begin-gen
2287             Member: begin-gen
2287              Identifier: begin-gen
2287               Identifier: expr: 'qryFacturas'
2287              Identifier: end-gen
2287              FunctionCall: begin-gen
2287               Value: begin-gen
2287                Constant: begin-gen
2287                 Constant: ctype: 'String' -> 'facturascli.porcomision'
2287                 Constant: expr: 'u"facturascli.porcomision"'
2287               <-Value: expr: 'u"facturascli.porcomision"'
2287                Constant: end-gen
2287               Value: end-gen
2287               FunctionCall: expr: 'value(u"facturascli.porcomision")'
2287              FunctionCall: end-gen
2287              Member: expr: 'qryFacturas.value(u"facturascli.porcomision")'
2287            <-Value: expr: 'qryFacturas.value(u"facturascli.porcomision")'
2287             Member: end-gen
2287            Value: end-gen
2287            FunctionCall: expr: 'parseFloat(qryFacturas.value(u"facturascli.porcomision"))'
2287          <-Value: expr: 'parseFloat(qryFacturas.value(u"facturascli.porcomision"))'
2287           FunctionCall: end-gen
2287          Value: end-gen
2287          If: line: 'if parseFloat(qryFacturas.value(u"facturascli.porcomision")):'
2287        <-Source: line: 'if parseFloat(qryFacturas.value(u"facturascli.porcomision")):'
2287       <--If: line: 'if parseFloat(qryFacturas.value(u"facturascli.porcomision")):'
2287      <---Source: line: 'if parseFloat(qryFacturas.value(u"facturascli.porcomision")):'
2287     <----While: line: 'if parseFloat(qryFacturas.value(u"facturascli.porcomision")):'
2287    <-----Source: line: 'if parseFloat(qryFacturas.value(u"facturascli.porcomision")):'
2287   <------Function: line: 'if parseFloat(qryFacturas.value(u"facturascli.porcomision")):'
2287  <-------Source: line: 'if parseFloat(qryFacturas.value(u"facturascli.porcomision")):'
2287 <--------Class: line: 'if parseFloat(qryFacturas.value(u"facturascli.porcomision")):'
2287<---------Source: line: 'if parseFloat(qryFacturas.value(u"facturascli.porcomision")):'
2288          If: begin: 'block-if'
2288        <-Source: begin: 'block-if'
2288       <--If: begin: 'block-if'
2288      <---Source: begin: 'block-if'
2288     <----While: begin: 'block-if'
2288    <-----Source: begin: 'block-if'
2288   <------Function: begin: 'block-if'
2288  <-------Source: begin: 'block-if'
2288 <--------Class: begin: 'block-if'
2288<---------Source: begin: 'block-if'
2288          Source: begin-gen
2288           InstructionUpdate: begin-gen
2288            Identifier: begin-gen
2288             Identifier: expr: 'comisionFactura'
2288            Identifier: end-gen
2288            OpUpdate: begin-gen
2288             OpUpdate: expr: '='
2288            OpUpdate: end-gen
2288            Value: begin-gen
2288             Identifier: begin-gen
2288              Identifier: expr: 'True'
2288            <-Value: expr: 'True'
2288             Identifier: end-gen
2288            Value: end-gen
2288            InstructionUpdate: line: 'comisionFactura = True'
2288          <-Source: line: 'comisionFactura = True'
2288         <--If: line: 'comisionFactura = True'
2288        <---Source: line: 'comisionFactura = True'
2288       <----If: line: 'comisionFactura = True'
2288      <-----Source: line: 'comisionFactura = True'
2288     <------While: line: 'comisionFactura = True'
2288    <-------Source: line: 'comisionFactura = True'
2288   <--------Function: line: 'comisionFactura = True'
2288  <---------Source: line: 'comisionFactura = True'
2288 <----------Class: line: 'comisionFactura = True'
2288<-----------Source: line: 'comisionFactura = True'
2289           InstructionUpdate: end-gen
2289           InstructionUpdate: begin-gen
2289            Identifier: begin-gen
2289             Identifier: expr: 'comision'
2289            Identifier: end-gen
2289            OpUpdate: begin-gen
2289             OpUpdate: expr: '='
2289            OpUpdate: end-gen
2289            Expression: begin-gen
2289             FunctionCall: begin-gen
2289              Value: begin-gen
2289               Member: begin-gen
2289                Identifier: begin-gen
2289                 Identifier: expr: 'qryFacturas'
2289                Identifier: end-gen
2289                FunctionCall: begin-gen
2289                 Value: begin-gen
2289                  Constant: begin-gen
2289                   Constant: ctype: 'String' -> 'facturascli.porcomision'
2289                   Constant: expr: 'u"facturascli.porcomision"'
2289                 <-Value: expr: 'u"facturascli.porcomision"'
2289                  Constant: end-gen
2289                 Value: end-gen
2289                 FunctionCall: expr: 'value(u"facturascli.porcomision")'
2289                FunctionCall: end-gen
2289                Member: expr: 'qryFacturas.value(u"facturascli.porcomision")'
2289              <-Value: expr: 'qryFacturas.value(u"facturascli.porcomision")'
2289               Member: end-gen
2289              Value: end-gen
2289              FunctionCall: expr: 'parseFloat(qryFacturas.value(u"facturascli.porcomision"))'
2289            <-Expression: expr: 'parseFloat(qryFacturas.value(u"facturascli.porcomision"))'
2289             FunctionCall: end-gen
2289             OpMath: begin-gen
2289              OpMath: expr: '*'
2289            <-Expression: expr: '*'
2289             OpMath: end-gen
2289             FunctionCall: begin-gen
2289              Value: begin-gen
2289               Member: begin-gen
2289                Identifier: begin-gen
2289                 Identifier: expr: 'qryFacturas'
2289                Identifier: end-gen
2289                FunctionCall: begin-gen
2289                 Value: begin-gen
2289                  Constant: begin-gen
2289                   Constant: ctype: 'String' -> 'neto'
2289                   Constant: expr: 'u"neto"'
2289                 <-Value: expr: 'u"neto"'
2289                  Constant: end-gen
2289                 Value: end-gen
2289                 FunctionCall: expr: 'value(u"neto")'
2289                FunctionCall: end-gen
2289                Member: expr: 'qryFacturas.value(u"neto")'
2289              <-Value: expr: 'qryFacturas.value(u"neto")'
2289               Member: end-gen
2289              Value: end-gen
2289              FunctionCall: expr: 'parseFloat(qryFacturas.value(u"neto"))'
2289            <-Expression: expr: 'parseFloat(qryFacturas.value(u"neto"))'
2289             FunctionCall: end-gen
2289             OpMath: begin-gen
2289              OpMath: expr: '/'
2289            <-Expression: expr: '/'
2289             OpMath: end-gen
2289             Constant: begin-gen
2289              Constant: ctype: 'Number' -> '100'
2289              Constant: expr: '100'
2289            <-Expression: expr: '100'
2289             Constant: end-gen
2289            Expression: end-gen
2289            InstructionUpdate: line: 'comision = parseFloat(qryFacturas.value(u"facturascli.porcomision")) * parseFloat(qryFacturas.value(u"neto")) / 100'
2289          <-Source: line: 'comision = parseFloat(qryFacturas.value(u"facturascli.porcomision")) * parseFloat(qryFacturas.value(u"neto")) / 100'
2289         <--If: line: 'comision = parseFloat(qryFacturas.value(u"facturascli.porcomision")) * parseFloat(qryFacturas.value(u"neto")) / 100'
2289        <---Source: line: 'comision = parseFloat(qryFacturas.value(u"facturascli.porcomision")) * parseFloat(qryFacturas.value(u"neto")) / 100'
2289       <----If: line: 'comision = parseFloat(qryFacturas.value(u"facturascli.porcomision")) * parseFloat(qryFacturas.value(u"neto")) / 100'
2289      <-----Source: line: 'comision = parseFloat(qryFacturas.value(u"facturascli.porcomision")) * parseFloat(qryFacturas.value(u"neto")) / 100'
2289     <------While: line: 'comision = parseFloat(qryFacturas.value(u"facturascli.porcomision")) * parseFloat(qryFacturas.value(u"neto")) / 100'
2289    <-------Source: line: 'comision = parseFloat(qryFacturas.value(u"facturascli.porcomision")) * parseFloat(qryFacturas.value(u"neto")) / 100'
2289   <--------Function: line: 'comision = parseFloat(qryFacturas.value(u"facturascli.porcomision")) * parseFloat(qryFacturas.value(u"neto")) / 100'
2289  <---------Source: line: 'comision = parseFloat(qryFacturas.value(u"facturascli.porcomision")) * parseFloat(qryFacturas.value(u"neto")) / 100'
2289 <----------Class: line: 'comision = parseFloat(qryFacturas.value(u"facturascli.porcomision")) * parseFloat(qryFacturas.value(u"neto")) / 100'
2289<-----------Source: line: 'comision = parseFloat(qryFacturas.value(u"facturascli.porcomision")) * parseFloat(qryFacturas.value(u"neto")) / 100'
2290           InstructionUpdate: end-gen
2290           InstructionUpdate: begin-gen
2290            Identifier: begin-gen
2290             Identifier: expr: 'tasaconv'
2290            Identifier: end-gen
2290            OpUpdate: begin-gen
2290             OpUpdate: expr: '='
2290            OpUpdate: end-gen
2290            Value: begin-gen
2290             FunctionCall: begin-gen
2290              Value: begin-gen
2290               Member: begin-gen
2290                Identifier: begin-gen
2290                 Identifier: expr: 'qryFacturas'
2290                Identifier: end-gen
2290                FunctionCall: begin-gen
2290                 Value: begin-gen
2290                  Constant: begin-gen
2290                   Constant: ctype: 'String' -> 'tasaconv'
2290                   Constant: expr: 'u"tasaconv"'
2290                 <-Value: expr: 'u"tasaconv"'
2290                  Constant: end-gen
2290                 Value: end-gen
2290                 FunctionCall: expr: 'value(u"tasaconv")'
2290                FunctionCall: end-gen
2290                Member: expr: 'qryFacturas.value(u"tasaconv")'
2290              <-Value: expr: 'qryFacturas.value(u"tasaconv")'
2290               Member: end-gen
2290              Value: end-gen
2290              FunctionCall: expr: 'parseFloat(qryFacturas.value(u"tasaconv"))'
2290            <-Value: expr: 'parseFloat(qryFacturas.value(u"tasaconv"))'
2290             FunctionCall: end-gen
2290            Value: end-gen
2290            InstructionUpdate: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2290          <-Source: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2290         <--If: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2290        <---Source: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2290       <----If: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2290      <-----Source: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2290     <------While: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2290    <-------Source: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2290   <--------Function: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2290  <---------Source: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2290 <----------Class: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2290<-----------Source: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2291           InstructionUpdate: end-gen
2291           If: begin-gen
2291            Expression: begin-gen
2291             Member: begin-gen
2291              Identifier: begin-gen
2291               Identifier: expr: 'qryFacturas'
2291              Identifier: end-gen
2291              FunctionCall: begin-gen
2291               Value: begin-gen
2291                Constant: begin-gen
2291                 Constant: ctype: 'String' -> 'coddivisa'
2291                 Constant: expr: 'u"coddivisa"'
2291               <-Value: expr: 'u"coddivisa"'
2291                Constant: end-gen
2291               Value: end-gen
2291               FunctionCall: expr: 'value(u"coddivisa")'
2291              FunctionCall: end-gen
2291              Member: expr: 'qryFacturas.value(u"coddivisa")'
2291            <-Expression: expr: 'qryFacturas.value(u"coddivisa")'
2291             Member: end-gen
2291             Compare: begin-gen
2291              Compare: expr: '=='
2291            <-Expression: expr: '=='
2291             Compare: end-gen
2291             Identifier: begin-gen
2291              Identifier: expr: 'divisaEmpresa'
2291            <-Expression: expr: 'divisaEmpresa'
2291             Identifier: end-gen
2291            Expression: end-gen
2291            If: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2291          <-Source: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2291         <--If: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2291        <---Source: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2291       <----If: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2291      <-----Source: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2291     <------While: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2291    <-------Source: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2291   <--------Function: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2291  <---------Source: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2291 <----------Class: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2291<-----------Source: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2292            If: begin: 'block-if'
2292          <-Source: begin: 'block-if'
2292         <--If: begin: 'block-if'
2292        <---Source: begin: 'block-if'
2292       <----If: begin: 'block-if'
2292      <-----Source: begin: 'block-if'
2292     <------While: begin: 'block-if'
2292    <-------Source: begin: 'block-if'
2292   <--------Function: begin: 'block-if'
2292  <---------Source: begin: 'block-if'
2292 <----------Class: begin: 'block-if'
2292<-----------Source: begin: 'block-if'
2292            Source: begin-gen
2292             InstructionUpdate: begin-gen
2292              Identifier: begin-gen
2292               Identifier: expr: 'total'
2292              Identifier: end-gen
2292              OpUpdate: begin-gen
2292               OpUpdate: expr: '+='
2292              OpUpdate: end-gen
2292              Value: begin-gen
2292               Identifier: begin-gen
2292                Identifier: expr: 'comision'
2292              <-Value: expr: 'comision'
2292               Identifier: end-gen
2292              Value: end-gen
2292              InstructionUpdate: line: 'total += comision'
2292            <-Source: line: 'total += comision'
2292           <--If: line: 'total += comision'
2292          <---Source: line: 'total += comision'
2292         <----If: line: 'total += comision'
2292        <-----Source: line: 'total += comision'
2292       <------If: line: 'total += comision'
2292      <-------Source: line: 'total += comision'
2292     <--------While: line: 'total += comision'
2292    <---------Source: line: 'total += comision'
2292   <----------Function: line: 'total += comision'
2292  <-----------Source: line: 'total += comision'
2292 <------------Class: line: 'total += comision'
2292<-------------Source: line: 'total += comision'
2293             InstructionUpdate: end-gen
2293            Source: end-gen
2293            If: end: 'block-if'
2293          <-Source: end: 'block-if'
2293         <--If: end: 'block-if'
2293        <---Source: end: 'block-if'
2293       <----If: end: 'block-if'
2293      <-----Source: end: 'block-if'
2293     <------While: end: 'block-if'
2293    <-------Source: end: 'block-if'
2293   <--------Function: end: 'block-if'
2293  <---------Source: end: 'block-if'
2293 <----------Class: end: 'block-if'
2293<-----------Source: end: 'block-if'
2293            If: line: 'else:'
2293          <-Source: line: 'else:'
2293         <--If: line: 'else:'
2293        <---Source: line: 'else:'
2293       <----If: line: 'else:'
2293      <-----Source: line: 'else:'
2293     <------While: line: 'else:'
2293    <-------Source: line: 'else:'
2293   <--------Function: line: 'else:'
2293  <---------Source: line: 'else:'
2293 <----------Class: line: 'else:'
2293<-----------Source: line: 'else:'
2294            If: begin: 'block-else'
2294          <-Source: begin: 'block-else'
2294         <--If: begin: 'block-else'
2294        <---Source: begin: 'block-else'
2294       <----If: begin: 'block-else'
2294      <-----Source: begin: 'block-else'
2294     <------While: begin: 'block-else'
2294    <-------Source: begin: 'block-else'
2294   <--------Function: begin: 'block-else'
2294  <---------Source: begin: 'block-else'
2294 <----------Class: begin: 'block-else'
2294<-----------Source: begin: 'block-else'
2294            Source: begin-gen
2294             InstructionUpdate: begin-gen
2294              Identifier: begin-gen
2294               Identifier: expr: 'total'
2294              Identifier: end-gen
2294              OpUpdate: begin-gen
2294               OpUpdate: expr: '+='
2294              OpUpdate: end-gen
2294              Expression: begin-gen
2294               Identifier: begin-gen
2294                Identifier: expr: 'comision'
2294              <-Expression: expr: 'comision'
2294               Identifier: end-gen
2294               OpMath: begin-gen
2294                OpMath: expr: '*'
2294              <-Expression: expr: '*'
2294               OpMath: end-gen
2294               Identifier: begin-gen
2294                Identifier: expr: 'tasaconv'
2294              <-Expression: expr: 'tasaconv'
2294               Identifier: end-gen
2294              Expression: end-gen
2294              InstructionUpdate: line: 'total += comision * tasaconv'
2294            <-Source: line: 'total += comision * tasaconv'
2294           <--If: line: 'total += comision * tasaconv'
2294          <---Source: line: 'total += comision * tasaconv'
2294         <----If: line: 'total += comision * tasaconv'
2294        <-----Source: line: 'total += comision * tasaconv'
2294       <------If: line: 'total += comision * tasaconv'
2294      <-------Source: line: 'total += comision * tasaconv'
2294     <--------While: line: 'total += comision * tasaconv'
2294    <---------Source: line: 'total += comision * tasaconv'
2294   <----------Function: line: 'total += comision * tasaconv'
2294  <-----------Source: line: 'total += comision * tasaconv'
2294 <------------Class: line: 'total += comision * tasaconv'
2294<-------------Source: line: 'total += comision * tasaconv'
2295             InstructionUpdate: end-gen
2295            Source: end-gen
2295            If: end: 'block-else'
2295          <-Source: end: 'block-else'
2295         <--If: end: 'block-else'
2295        <---Source: end: 'block-else'
2295       <----If: end: 'block-else'
2295      <-----Source: end: 'block-else'
2295     <------While: end: 'block-else'
2295    <-------Source: end: 'block-else'
2295   <--------Function: end: 'block-else'
2295  <---------Source: end: 'block-else'
2295 <----------Class: end: 'block-else'
2295<-----------Source: end: 'block-else'
2296           If: end-gen
2296          Source: end-gen
2296          If: end: 'block-if'
2296        <-Source: end: 'block-if'
2296       <--If: end: 'block-if'
2296      <---Source: end: 'block-if'
2296     <----While: end: 'block-if'
2296    <-----Source: end: 'block-if'
2296   <------Function: end: 'block-if'
2296  <-------Source: end: 'block-if'
2296 <--------Class: end: 'block-if'
2296<---------Source: end: 'block-if'
2296          If: line: 'else:'
2296        <-Source: line: 'else:'
2296       <--If: line: 'else:'
2296      <---Source: line: 'else:'
2296     <----While: line: 'else:'
2296    <-----Source: line: 'else:'
2296   <------Function: line: 'else:'
2296  <-------Source: line: 'else:'
2296 <--------Class: line: 'else:'
2296<---------Source: line: 'else:'
2298          If: begin: 'block-else'
2298        <-Source: begin: 'block-else'
2298       <--If: begin: 'block-else'
2298      <---Source: begin: 'block-else'
2298     <----While: begin: 'block-else'
2298    <-----Source: begin: 'block-else'
2298   <------Function: begin: 'block-else'
2298  <-------Source: begin: 'block-else'
2298 <--------Class: begin: 'block-else'
2298<---------Source: begin: 'block-else'
2298          Source: begin-gen
2298           InstructionUpdate: begin-gen
2298            Identifier: begin-gen
2298             Identifier: expr: 'comisionFactura'
2298            Identifier: end-gen
2298            OpUpdate: begin-gen
2298             OpUpdate: expr: '='
2298            OpUpdate: end-gen
2298            Value: begin-gen
2298             Identifier: begin-gen
2298              Identifier: expr: 'False'
2298            <-Value: expr: 'False'
2298             Identifier: end-gen
2298            Value: end-gen
2298            InstructionUpdate: line: 'comisionFactura = False'
2298          <-Source: line: 'comisionFactura = False'
2298         <--If: line: 'comisionFactura = False'
2298        <---Source: line: 'comisionFactura = False'
2298       <----If: line: 'comisionFactura = False'
2298      <-----Source: line: 'comisionFactura = False'
2298     <------While: line: 'comisionFactura = False'
2298    <-------Source: line: 'comisionFactura = False'
2298   <--------Function: line: 'comisionFactura = False'
2298  <---------Source: line: 'comisionFactura = False'
2298 <----------Class: line: 'comisionFactura = False'
2298<-----------Source: line: 'comisionFactura = False'
2299           InstructionUpdate: end-gen
2299          Source: end-gen
2299          If: end: 'block-else'
2299        <-Source: end: 'block-else'
2299       <--If: end: 'block-else'
2299      <---Source: end: 'block-else'
2299     <----While: end: 'block-else'
2299    <-----Source: end: 'block-else'
2299   <------Function: end: 'block-else'
2299  <-------Source: end: 'block-else'
2299 <--------Class: end: 'block-else'
2299<---------Source: end: 'block-else'
2300         If: end-gen
2300        Source: end-gen
2300        If: end: 'block-if'
2300      <-Source: end: 'block-if'
2300     <--While: end: 'block-if'
2300    <---Source: end: 'block-if'
2300   <----Function: end: 'block-if'
2300  <-----Source: end: 'block-if'
2300 <------Class: end: 'block-if'
2300<-------Source: end: 'block-if'
2300       If: end-gen
2300       If: begin-gen
2300        Value: begin-gen
2300         OpUnary: begin-gen
2300          OpUnary: expr: 'not'
2300        <-Value: expr: 'not'
2300          Identifier: begin-gen
2300           Identifier: expr: 'comisionFactura'
2300         <-OpUnary: expr: 'comisionFactura'
2300        <--Value: expr: 'comisionFactura'
2300          Identifier: end-gen
2300         OpUnary: end-gen
2300        Value: end-gen
2300        If: line: 'if not comisionFactura:'
2300      <-Source: line: 'if not comisionFactura:'
2300     <--While: line: 'if not comisionFactura:'
2300    <---Source: line: 'if not comisionFactura:'
2300   <----Function: line: 'if not comisionFactura:'
2300  <-----Source: line: 'if not comisionFactura:'
2300 <------Class: line: 'if not comisionFactura:'
2300<-------Source: line: 'if not comisionFactura:'
2302        If: begin: 'block-if'
2302      <-Source: begin: 'block-if'
2302     <--While: begin: 'block-if'
2302    <---Source: begin: 'block-if'
2302   <----Function: begin: 'block-if'
2302  <-----Source: begin: 'block-if'
2302 <------Class: begin: 'block-if'
2302<-------Source: begin: 'block-if'
2302        Source: begin-gen
2302         InstructionUpdate: begin-gen
2302          Identifier: begin-gen
2302           Identifier: expr: 'descuento'
2302          Identifier: end-gen
2302          OpUpdate: begin-gen
2302           OpUpdate: expr: '='
2302          OpUpdate: end-gen
2302          Value: begin-gen
2302           FunctionCall: begin-gen
2302            Value: begin-gen
2302             Member: begin-gen
2302              Identifier: begin-gen
2302               Identifier: expr: 'qryFacturas'
2302              Identifier: end-gen
2302              FunctionCall: begin-gen
2302               Value: begin-gen
2302                Constant: begin-gen
2302                 Constant: ctype: 'String' -> 'facturascli.pordtoesp'
2302                 Constant: expr: 'u"facturascli.pordtoesp"'
2302               <-Value: expr: 'u"facturascli.pordtoesp"'
2302                Constant: end-gen
2302               Value: end-gen
2302               FunctionCall: expr: 'value(u"facturascli.pordtoesp")'
2302              FunctionCall: end-gen
2302              Member: expr: 'qryFacturas.value(u"facturascli.pordtoesp")'
2302            <-Value: expr: 'qryFacturas.value(u"facturascli.pordtoesp")'
2302             Member: end-gen
2302            Value: end-gen
2302            FunctionCall: expr: 'parseFloat(qryFacturas.value(u"facturascli.pordtoesp"))'
2302          <-Value: expr: 'parseFloat(qryFacturas.value(u"facturascli.pordtoesp"))'
2302           FunctionCall: end-gen
2302          Value: end-gen
2302          InstructionUpdate: line: 'descuento = parseFloat(qryFacturas.value(u"facturascli.pordtoesp"))'
2302        <-Source: line: 'descuento = parseFloat(qryFacturas.value(u"facturascli.pordtoesp"))'
2302       <--If: line: 'descuento = parseFloat(qryFacturas.value(u"facturascli.pordtoesp"))'
2302      <---Source: line: 'descuento = parseFloat(qryFacturas.value(u"facturascli.pordtoesp"))'
2302     <----While: line: 'descuento = parseFloat(qryFacturas.value(u"facturascli.pordtoesp"))'
2302    <-----Source: line: 'descuento = parseFloat(qryFacturas.value(u"facturascli.pordtoesp"))'
2302   <------Function: line: 'descuento = parseFloat(qryFacturas.value(u"facturascli.pordtoesp"))'
2302  <-------Source: line: 'descuento = parseFloat(qryFacturas.value(u"facturascli.pordtoesp"))'
2302 <--------Class: line: 'descuento = parseFloat(qryFacturas.value(u"facturascli.pordtoesp"))'
2302<---------Source: line: 'descuento = parseFloat(qryFacturas.value(u"facturascli.pordtoesp"))'
2303         InstructionUpdate: end-gen
2303         InstructionUpdate: begin-gen
2303          Identifier: begin-gen
2303           Identifier: expr: 'descuento'
2303          Identifier: end-gen
2303          OpUpdate: begin-gen
2303           OpUpdate: expr: '='
2303          OpUpdate: end-gen
2303          Value: begin-gen
2303           Parentheses: begin-gen
2303            Parentheses: expr: '('
2303          <-Value: expr: '('
2303            OpTernary: begin-gen
2303             OpTernary: expr: '('
2303           <-Parentheses: expr: '('
2303          <--Value: expr: '('
2303             Constant: begin-gen
2303              Constant: ctype: 'Number' -> '0'
2303              Constant: expr: '0'
2303            <-OpTernary: expr: '0'
2303           <--Parentheses: expr: '0'
2303          <---Value: expr: '0'
2303             Constant: end-gen
2303             OpTernary: expr: 'if'
2303           <-Parentheses: expr: 'if'
2303          <--Value: expr: 'if'
2303             FunctionCall: begin-gen
2303              Value: begin-gen
2303               Identifier: begin-gen
2303                Identifier: expr: 'descuento'
2303              <-Value: expr: 'descuento'
2303               Identifier: end-gen
2303              Value: end-gen
2303              FunctionCall: expr: 'isNaN(descuento)'
2303            <-OpTernary: expr: 'isNaN(descuento)'
2303           <--Parentheses: expr: 'isNaN(descuento)'
2303          <---Value: expr: 'isNaN(descuento)'
2303             FunctionCall: end-gen
2303             OpTernary: expr: 'else'
2303           <-Parentheses: expr: 'else'
2303          <--Value: expr: 'else'
2303             Identifier: begin-gen
2303              Identifier: expr: 'descuento'
2303            <-OpTernary: expr: 'descuento'
2303           <--Parentheses: expr: 'descuento'
2303          <---Value: expr: 'descuento'
2303             Identifier: end-gen
2303             OpTernary: expr: ')'
2303           <-Parentheses: expr: ')'
2303          <--Value: expr: ')'
2303            OpTernary: end-gen
2303            Parentheses: expr: ')'
2303          <-Value: expr: ')'
2303           Parentheses: end-gen
2303          Value: end-gen
2303          InstructionUpdate: line: 'descuento = ( ( 0 if isNaN(descuento) else descuento ) )'
2303        <-Source: line: 'descuento = ( ( 0 if isNaN(descuento) else descuento ) )'
2303       <--If: line: 'descuento = ( ( 0 if isNaN(descuento) else descuento ) )'
2303      <---Source: line: 'descuento = ( ( 0 if isNaN(descuento) else descuento ) )'
2303     <----While: line: 'descuento = ( ( 0 if isNaN(descuento) else descuento ) )'
2303    <-----Source: line: 'descuento = ( ( 0 if isNaN(descuento) else descuento ) )'
2303   <------Function: line: 'descuento = ( ( 0 if isNaN(descuento) else descuento ) )'
2303  <-------Source: line: 'descuento = ( ( 0 if isNaN(descuento) else descuento ) )'
2303 <--------Class: line: 'descuento = ( ( 0 if isNaN(descuento) else descuento ) )'
2303<---------Source: line: 'descuento = ( ( 0 if isNaN(descuento) else descuento ) )'
2304         InstructionUpdate: end-gen
2304         InstructionUpdate: begin-gen
2304          Identifier: begin-gen
2304           Identifier: expr: 'comision'
2304          Identifier: end-gen
2304          OpUpdate: begin-gen
2304           OpUpdate: expr: '='
2304          OpUpdate: end-gen
2304          Expression: begin-gen
2304           FunctionCall: begin-gen
2304            Value: begin-gen
2304             Member: begin-gen
2304              Identifier: begin-gen
2304               Identifier: expr: 'qryFacturas'
2304              Identifier: end-gen
2304              FunctionCall: begin-gen
2304               Value: begin-gen
2304                Constant: begin-gen
2304                 Constant: ctype: 'String' -> 'lineasfacturascli.porcomision'
2304                 Constant: expr: 'u"lineasfacturascli.porcomision"'
2304               <-Value: expr: 'u"lineasfacturascli.porcomision"'
2304                Constant: end-gen
2304               Value: end-gen
2304               FunctionCall: expr: 'value(u"lineasfacturascli.porcomision")'
2304              FunctionCall: end-gen
2304              Member: expr: 'qryFacturas.value(u"lineasfacturascli.porcomision")'
2304            <-Value: expr: 'qryFacturas.value(u"lineasfacturascli.porcomision")'
2304             Member: end-gen
2304            Value: end-gen
2304            FunctionCall: expr: 'parseFloat(qryFacturas.value(u"lineasfacturascli.porcomision"))'
2304          <-Expression: expr: 'parseFloat(qryFacturas.value(u"lineasfacturascli.porcomision"))'
2304           FunctionCall: end-gen
2304           OpMath: begin-gen
2304            OpMath: expr: '*'
2304          <-Expression: expr: '*'
2304           OpMath: end-gen
2304           FunctionCall: begin-gen
2304            Expression: begin-gen
2304             Member: begin-gen
2304              Identifier: begin-gen
2304               Identifier: expr: 'qryFacturas'
2304              Identifier: end-gen
2304              FunctionCall: begin-gen
2304               Value: begin-gen
2304                Constant: begin-gen
2304                 Constant: ctype: 'String' -> 'lineasfacturascli.pvptotal'
2304                 Constant: expr: 'u"lineasfacturascli.pvptotal"'
2304               <-Value: expr: 'u"lineasfacturascli.pvptotal"'
2304                Constant: end-gen
2304               Value: end-gen
2304               FunctionCall: expr: 'value(u"lineasfacturascli.pvptotal")'
2304              FunctionCall: end-gen
2304              Member: expr: 'qryFacturas.value(u"lineasfacturascli.pvptotal")'
2304            <-Expression: expr: 'qryFacturas.value(u"lineasfacturascli.pvptotal")'
2304             Member: end-gen
2304             OpMath: begin-gen
2304              OpMath: expr: '*'
2304            <-Expression: expr: '*'
2304             OpMath: end-gen
2304             Parentheses: begin-gen
2304              Parentheses: expr: '('
2304            <-Expression: expr: '('
2304              Constant: begin-gen
2304               Constant: ctype: 'Number' -> '100'
2304               Constant: expr: '100'
2304             <-Parentheses: expr: '100'
2304            <--Expression: expr: '100'
2304              Constant: end-gen
2304              OpMath: begin-gen
2304               OpMath: expr: '-'
2304             <-Parentheses: expr: '-'
2304            <--Expression: expr: '-'
2304              OpMath: end-gen
2304              Identifier: begin-gen
2304               Identifier: expr: 'descuento'
2304             <-Parentheses: expr: 'descuento'
2304            <--Expression: expr: 'descuento'
2304              Identifier: end-gen
2304              Parentheses: expr: ')'
2304            <-Expression: expr: ')'
2304             Parentheses: end-gen
2304             OpMath: begin-gen
2304              OpMath: expr: '/'
2304            <-Expression: expr: '/'
2304             OpMath: end-gen
2304             Constant: begin-gen
2304              Constant: ctype: 'Number' -> '100'
2304              Constant: expr: '100'
2304            <-Expression: expr: '100'
2304             Constant: end-gen
2304            Expression: end-gen
2304            FunctionCall: expr: 'parseFloat(qryFacturas.value(u"lineasfacturascli.pvptotal") * ( 100 - descuento ) / 100)'
2304          <-Expression: expr: 'parseFloat(qryFacturas.value(u"lineasfacturascli.pvptotal") * ( 100 - descuento ) / 100)'
2304           FunctionCall: end-gen
2304           OpMath: begin-gen
2304            OpMath: expr: '/'
2304          <-Expression: expr: '/'
2304           OpMath: end-gen
2304           Constant: begin-gen
2304            Constant: ctype: 'Number' -> '100'
2304            Constant: expr: '100'
2304          <-Expression: expr: '100'
2304           Constant: end-gen
2304          Expression: end-gen
2304          InstructionUpdate: line: 'comision = parseFloat(qryFacturas.value(u"lineasfacturascli.porcomision")) * parseFloat(qryFacturas.value(u"lineasfacturascli.pvptotal") * ( 100 - descuento ) / 100) / 100'
2304        <-Source: line: 'comision = parseFloat(qryFacturas.value(u"lineasfacturascli.porcomision")) * parseFloat(qryFacturas.value(u"lineasfacturascli.pvptotal") * ( 100 - descuento ) / 100) / 100'
2304       <--If: line: 'comision = parseFloat(qryFacturas.value(u"lineasfacturascli.porcomision")) * parseFloat(qryFacturas.value(u"lineasfacturascli.pvptotal") * ( 100 - descuento ) / 100) / 100'
2304      <---Source: line: 'comision = parseFloat(qryFacturas.value(u"lineasfacturascli.porcomision")) * parseFloat(qryFacturas.value(u"lineasfacturascli.pvptotal") * ( 100 - descuento ) / 100) / 100'
2304     <----While: line: 'comision = parseFloat(qryFacturas.value(u"lineasfacturascli.porcomision")) * parseFloat(qryFacturas.value(u"lineasfacturascli.pvptotal") * ( 100 - descuento ) / 100) / 100'
2304    <-----Source: line: 'comision = parseFloat(qryFacturas.value(u"lineasfacturascli.porcomision")) * parseFloat(qryFacturas.value(u"lineasfacturascli.pvptotal") * ( 100 - descuento ) / 100) / 100'
2304   <------Function: line: 'comision = parseFloat(qryFacturas.value(u"lineasfacturascli.porcomision")) * parseFloat(qryFacturas.value(u"lineasfacturascli.pvptotal") * ( 100 - descuento ) / 100) / 100'
2304  <-------Source: line: 'comision = parseFloat(qryFacturas.value(u"lineasfacturascli.porcomision")) * parseFloat(qryFacturas.value(u"lineasfacturascli.pvptotal") * ( 100 - descuento ) / 100) / 100'
2304 <--------Class: line: 'comision = parseFloat(qryFacturas.value(u"lineasfacturascli.porcomision")) * parseFloat(qryFacturas.value(u"lineasfacturascli.pvptotal") * ( 100 - descuento ) / 100) / 100'
2304<---------Source: line: 'comision = parseFloat(qryFacturas.value(u"lineasfacturascli.porcomision")) * parseFloat(qryFacturas.value(u"lineasfacturascli.pvptotal") * ( 100 - descuento ) / 100) / 100'
2305         InstructionUpdate: end-gen
2305         InstructionUpdate: begin-gen
2305          Identifier: begin-gen
2305           Identifier: expr: 'tasaconv'
2305          Identifier: end-gen
2305          OpUpdate: begin-gen
2305           OpUpdate: expr: '='
2305          OpUpdate: end-gen
2305          Value: begin-gen
2305           FunctionCall: begin-gen
2305            Value: begin-gen
2305             Member: begin-gen
2305              Identifier: begin-gen
2305               Identifier: expr: 'qryFacturas'
2305              Identifier: end-gen
2305              FunctionCall: begin-gen
2305               Value: begin-gen
2305                Constant: begin-gen
2305                 Constant: ctype: 'String' -> 'tasaconv'
2305                 Constant: expr: 'u"tasaconv"'
2305               <-Value: expr: 'u"tasaconv"'
2305                Constant: end-gen
2305               Value: end-gen
2305               FunctionCall: expr: 'value(u"tasaconv")'
2305              FunctionCall: end-gen
2305              Member: expr: 'qryFacturas.value(u"tasaconv")'
2305            <-Value: expr: 'qryFacturas.value(u"tasaconv")'
2305             Member: end-gen
2305            Value: end-gen
2305            FunctionCall: expr: 'parseFloat(qryFacturas.value(u"tasaconv"))'
2305          <-Value: expr: 'parseFloat(qryFacturas.value(u"tasaconv"))'
2305           FunctionCall: end-gen
2305          Value: end-gen
2305          InstructionUpdate: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2305        <-Source: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2305       <--If: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2305      <---Source: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2305     <----While: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2305    <-----Source: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2305   <------Function: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2305  <-------Source: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2305 <--------Class: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2305<---------Source: line: 'tasaconv = parseFloat(qryFacturas.value(u"tasaconv"))'
2306         InstructionUpdate: end-gen
2306         If: begin-gen
2306          Expression: begin-gen
2306           Member: begin-gen
2306            Identifier: begin-gen
2306             Identifier: expr: 'qryFacturas'
2306            Identifier: end-gen
2306            FunctionCall: begin-gen
2306             Value: begin-gen
2306              Constant: begin-gen
2306               Constant: ctype: 'String' -> 'coddivisa'
2306               Constant: expr: 'u"coddivisa"'
2306             <-Value: expr: 'u"coddivisa"'
2306              Constant: end-gen
2306             Value: end-gen
2306             FunctionCall: expr: 'value(u"coddivisa")'
2306            FunctionCall: end-gen
2306            Member: expr: 'qryFacturas.value(u"coddivisa")'
2306          <-Expression: expr: 'qryFacturas.value(u"coddivisa")'
2306           Member: end-gen
2306           Compare: begin-gen
2306            Compare: expr: '=='
2306          <-Expression: expr: '=='
2306           Compare: end-gen
2306           Identifier: begin-gen
2306            Identifier: expr: 'divisaEmpresa'
2306          <-Expression: expr: 'divisaEmpresa'
2306           Identifier: end-gen
2306          Expression: end-gen
2306          If: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2306        <-Source: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2306       <--If: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2306      <---Source: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2306     <----While: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2306    <-----Source: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2306   <------Function: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2306  <-------Source: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2306 <--------Class: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2306<---------Source: line: 'if qryFacturas.value(u"coddivisa") == divisaEmpresa:'
2307          If: begin: 'block-if'
2307        <-Source: begin: 'block-if'
2307       <--If: begin: 'block-if'
2307      <---Source: begin: 'block-if'
2307     <----While: begin: 'block-if'
2307    <-----Source: begin: 'block-if'
2307   <------Function: begin: 'block-if'
2307  <-------Source: begin: 'block-if'
2307 <--------Class: begin: 'block-if'
2307<---------Source: begin: 'block-if'
2307          Source: begin-gen
2307           InstructionUpdate: begin-gen
2307            Identifier: begin-gen
2307             Identifier: expr: 'total'
2307            Identifier: end-gen
2307            OpUpdate: begin-gen
2307             OpUpdate: expr: '+='
2307            OpUpdate: end-gen
2307            Value: begin-gen
2307             Identifier: begin-gen
2307              Identifier: expr: 'comision'
2307            <-Value: expr: 'comision'
2307             Identifier: end-gen
2307            Value: end-gen
2307            InstructionUpdate: line: 'total += comision'
2307          <-Source: line: 'total += comision'
2307         <--If: line: 'total += comision'
2307        <---Source: line: 'total += comision'
2307       <----If: line: 'total += comision'
2307      <-----Source: line: 'total += comision'
2307     <------While: line: 'total += comision'
2307    <-------Source: line: 'total += comision'
2307   <--------Function: line: 'total += comision'
2307  <---------Source: line: 'total += comision'
2307 <----------Class: line: 'total += comision'
2307<-----------Source: line: 'total += comision'
2308           InstructionUpdate: end-gen
2308          Source: end-gen
2308          If: end: 'block-if'
2308        <-Source: end: 'block-if'
2308       <--If: end: 'block-if'
2308      <---Source: end: 'block-if'
2308     <----While: end: 'block-if'
2308    <-----Source: end: 'block-if'
2308   <------Function: end: 'block-if'
2308  <-------Source: end: 'block-if'
2308 <--------Class: end: 'block-if'
2308<---------Source: end: 'block-if'
2308          If: line: 'else:'
2308        <-Source: line: 'else:'
2308       <--If: line: 'else:'
2308      <---Source: line: 'else:'
2308     <----While: line: 'else:'
2308    <-----Source: line: 'else:'
2308   <------Function: line: 'else:'
2308  <-------Source: line: 'else:'
2308 <--------Class: line: 'else:'
2308<---------Source: line: 'else:'
2309          If: begin: 'block-else'
2309        <-Source: begin: 'block-else'
2309       <--If: begin: 'block-else'
2309      <---Source: begin: 'block-else'
2309     <----While: begin: 'block-else'
2309    <-----Source: begin: 'block-else'
2309   <------Function: begin: 'block-else'
2309  <-------Source: begin: 'block-else'
2309 <--------Class: begin: 'block-else'
2309<---------Source: begin: 'block-else'
2309          Source: begin-gen
2309           InstructionUpdate: begin-gen
2309            Identifier: begin-gen
2309             Identifier: expr: 'total'
2309            Identifier: end-gen
2309            OpUpdate: begin-gen
2309             OpUpdate: expr: '+='
2309            OpUpdate: end-gen
2309            Expression: begin-gen
2309             Identifier: begin-gen
2309              Identifier: expr: 'comision'
2309            <-Expression: expr: 'comision'
2309             Identifier: end-gen
2309             OpMath: begin-gen
2309              OpMath: expr: '*'
2309            <-Expression: expr: '*'
2309             OpMath: end-gen
2309             Identifier: begin-gen
2309              Identifier: expr: 'tasaconv'
2309            <-Expression: expr: 'tasaconv'
2309             Identifier: end-gen
2309            Expression: end-gen
2309            InstructionUpdate: line: 'total += comision * tasaconv'
2309          <-Source: line: 'total += comision * tasaconv'
2309         <--If: line: 'total += comision * tasaconv'
2309        <---Source: line: 'total += comision * tasaconv'
2309       <----If: line: 'total += comision * tasaconv'
2309      <-----Source: line: 'total += comision * tasaconv'
2309     <------While: line: 'total += comision * tasaconv'
2309    <-------Source: line: 'total += comision * tasaconv'
2309   <--------Function: line: 'total += comision * tasaconv'
2309  <---------Source: line: 'total += comision * tasaconv'
2309 <----------Class: line: 'total += comision * tasaconv'
2309<-----------Source: line: 'total += comision * tasaconv'
2310           InstructionUpdate: end-gen
2310          Source: end-gen
2310          If: end: 'block-else'
2310        <-Source: end: 'block-else'
2310       <--If: end: 'block-else'
2310      <---Source: end: 'block-else'
2310     <----While: end: 'block-else'
2310    <-----Source: end: 'block-else'
2310   <------Function: end: 'block-else'
2310  <-------Source: end: 'block-else'
2310 <--------Class: end: 'block-else'
2310<---------Source: end: 'block-else'
2311         If: end-gen
2311        Source: end-gen
2311        If: end: 'block-if'
2311      <-Source: end: 'block-if'
2311     <--While: end: 'block-if'
2311    <---Source: end: 'block-if'
2311   <----Function: end: 'block-if'
2311  <-----Source: end: 'block-if'
2311 <------Class: end: 'block-if'
2311<-------Source: end: 'block-if'
2311       If: end-gen
2311      Source: end-gen
2311      While: end: 'block-while'
2311    <-Source: end: 'block-while'
2311   <--Function: end: 'block-while'
2311  <---Source: end: 'block-while'
2311 <----Class: end: 'block-while'
2311<-----Source: end: 'block-while'
2311     While: end-gen
2311     InstructionFlow: begin-gen
2311      Value: begin-gen
2311       Identifier: begin-gen
2311        Identifier: expr: 'total'
2311      <-Value: expr: 'total'
2311       Identifier: end-gen
2311      Value: end-gen
2311      InstructionFlow: line: 'return total'
2311    <-Source: line: 'return total'
2311   <--Function: line: 'return total'
2311  <---Source: line: 'return total'
2311 <----Class: line: 'return total'
2311<-----Source: line: 'return total'
2313     InstructionFlow: end-gen
2313    Source: end-gen
2313    Function: end: 'block-def-dtoEsp_calcularLiquidacionAgente'
2313  <-Source: end: 'block-def-dtoEsp_calcularLiquidacionAgente'
2313 <--Class: end: 'block-def-dtoEsp_calcularLiquidacionAgente'
2313<---Source: end: 'block-def-dtoEsp_calcularLiquidacionAgente'
2314   Function: end-gen
2314  Source: end-gen
2314  Class: end: 'block-class-FormInternalObj'
2314<-Source: end: 'block-class-FormInternalObj'
2315 Class: end-gen
2315Source: end-gen
