<Source>
  <Class name="interna">
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="ctx" type="Object"/>
      </DeclarationBlock>
      <Function name="interna">
        <Arguments>
          <Variable name="context"/>
        </Arguments>
        <Source>
          <InstructionUpdate>
            <Member>
              <Identifier name="this"/>
              <Identifier name="ctx"/>
            </Member>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Identifier name="context"/>
            </Value>
          </InstructionUpdate>
        </Source>
      </Function>
      <Function name="init">
        <Source>
          <InstructionCall>
            <Member>
              <Identifier name="this"/>
              <Identifier name="ctx"/>
              <FunctionCall name="interna_init"/>
            </Member>
          </InstructionCall>
        </Source>
      </Function>
      <Function name="afterCommit_dirclientes" returns="Boolean">
        <Arguments>
          <Variable name="curDirCli" type="FLSqlCursor"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="interna_afterCommit_dirclientes">
                  <CallArguments>
                    <Value>
                      <Identifier name="curDirCli"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="afterCommit_dirproveedores" returns="Boolean">
        <Arguments>
          <Variable name="curDirProv" type="FLSqlCursor"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="interna_afterCommit_dirproveedores">
                  <CallArguments>
                    <Value>
                      <Identifier name="curDirProv"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="afterCommit_clientes" returns="Boolean">
        <Arguments>
          <Variable name="curCliente" type="FLSqlCursor"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="interna_afterCommit_clientes">
                  <CallArguments>
                    <Value>
                      <Identifier name="curCliente"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="beforeCommit_clientes" returns="Boolean">
        <Arguments>
          <Variable name="curCliente" type="FLSqlCursor"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="interna_beforeCommit_clientes">
                  <CallArguments>
                    <Value>
                      <Identifier name="curCliente"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="afterCommit_proveedores" returns="Boolean">
        <Arguments>
          <Variable name="curProveedor" type="FLSqlCursor"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="interna_afterCommit_proveedores">
                  <CallArguments>
                    <Value>
                      <Identifier name="curProveedor"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="beforeCommit_proveedores" returns="Boolean">
        <Arguments>
          <Variable name="curProveedor" type="FLSqlCursor"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="interna_beforeCommit_proveedores">
                  <CallArguments>
                    <Value>
                      <Identifier name="curProveedor"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="afterCommit_empresa" returns="Boolean">
        <Arguments>
          <Variable name="curEmpresa" type="FLSqlCursor"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="interna_afterCommit_empresa">
                  <CallArguments>
                    <Value>
                      <Identifier name="curEmpresa"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="beforeCommit_cuentasbcocli" returns="Boolean">
        <Arguments>
          <Variable name="curCuenta" type="FLSqlCursor"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="interna_beforeCommit_cuentasbcocli">
                  <CallArguments>
                    <Value>
                      <Identifier name="curCuenta"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
    </Source>
  </Class>
  <Class name="oficial" extends="interna">
    <Source>
      <Function name="oficial">
        <Arguments>
          <Variable name="context"/>
        </Arguments>
        <Source>
          <InstructionCall>
            <FunctionCall name="interna">
              <CallArguments>
                <Value>
                  <Identifier name="context"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
        </Source>
      </Function>
      <Function name="msgNoDisponible">
        <Arguments>
          <Variable name="nombreModulo" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_msgNoDisponible">
                  <CallArguments>
                    <Value>
                      <Identifier name="nombreModulo"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="ejecutarQry" returns="Array">
        <Arguments>
          <Variable name="tabla" type="String"/>
          <Variable name="campos" type="String"/>
          <Variable name="where" type="String"/>
          <Variable name="listaTablas" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_ejecutarQry">
                  <CallArguments>
                    <Value>
                      <Identifier name="tabla"/>
                    </Value>
                    <Value>
                      <Identifier name="campos"/>
                    </Value>
                    <Value>
                      <Identifier name="where"/>
                    </Value>
                    <Value>
                      <Identifier name="listaTablas"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="valorDefectoEmpresa" returns="String">
        <Arguments>
          <Variable name="fN" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_valorDefectoEmpresa">
                  <CallArguments>
                    <Value>
                      <Identifier name="fN"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="cerosIzquierda" returns="String">
        <Arguments>
          <Variable name="numero" type="String"/>
          <Variable name="totalCifras" type="Number"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_cerosIzquierda">
                  <CallArguments>
                    <Value>
                      <Identifier name="numero"/>
                    </Value>
                    <Value>
                      <Identifier name="totalCifras"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="espaciosDerecha" returns="String">
        <Arguments>
          <Variable name="texto" type="String"/>
          <Variable name="totalLongitud" type="Number"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_espaciosDerecha">
                  <CallArguments>
                    <Value>
                      <Identifier name="texto"/>
                    </Value>
                    <Value>
                      <Identifier name="totalLongitud"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="valoresIniciales">
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_valoresIniciales"/>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="valorQuery" returns="Array">
        <Arguments>
          <Variable name="tablas" type="String"/>
          <Variable name="select" type="String"/>
          <Variable name="from" type="String"/>
          <Variable name="where" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_valorQuery">
                  <CallArguments>
                    <Value>
                      <Identifier name="tablas"/>
                    </Value>
                    <Value>
                      <Identifier name="select"/>
                    </Value>
                    <Value>
                      <Identifier name="from"/>
                    </Value>
                    <Value>
                      <Identifier name="where"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="crearSubcuenta" returns="Number">
        <Arguments>
          <Variable name="codSubcuenta" type="String"/>
          <Variable name="descripcion" type="String"/>
          <Variable name="idCuentaEsp" type="String"/>
          <Variable name="codEjercicio" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_crearSubcuenta">
                  <CallArguments>
                    <Value>
                      <Identifier name="codSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="descripcion"/>
                    </Value>
                    <Value>
                      <Identifier name="idCuentaEsp"/>
                    </Value>
                    <Value>
                      <Identifier name="codEjercicio"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="borrarSubcuenta" returns="Boolean">
        <Arguments>
          <Variable name="idSubcuenta" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_borrarSubcuenta">
                  <CallArguments>
                    <Value>
                      <Identifier name="idSubcuenta"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="ejercicioActual" returns="String">
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_ejercicioActual"/>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="cambiarEjercicioActual" returns="Boolean">
        <Arguments>
          <Variable name="codEjercicio" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_cambiarEjercicioActual">
                  <CallArguments>
                    <Value>
                      <Identifier name="codEjercicio"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="datosCtaCliente" returns="Array">
        <Arguments>
          <Variable name="codCliente" type="String"/>
          <Variable name="valoresDefecto" type="Array"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_datosCtaCliente">
                  <CallArguments>
                    <Value>
                      <Identifier name="codCliente"/>
                    </Value>
                    <Value>
                      <Identifier name="valoresDefecto"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="datosCtaProveedor" returns="Array">
        <Arguments>
          <Variable name="codProveedor" type="String"/>
          <Variable name="valoresDefecto" type="Array"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_datosCtaProveedor">
                  <CallArguments>
                    <Value>
                      <Identifier name="codProveedor"/>
                    </Value>
                    <Value>
                      <Identifier name="valoresDefecto"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="calcularIntervalo" returns="Array">
        <Arguments>
          <Variable name="codIntervalo" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_calcularIntervalo">
                  <CallArguments>
                    <Value>
                      <Identifier name="codIntervalo"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="crearSubcuentaCli" returns="Boolean">
        <Arguments>
          <Variable name="codSubcuenta" type="String"/>
          <Variable name="idSubcuenta" type="Number"/>
          <Variable name="codCliente" type="String"/>
          <Variable name="codEjercicio" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_crearSubcuentaCli">
                  <CallArguments>
                    <Value>
                      <Identifier name="codSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="idSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="codCliente"/>
                    </Value>
                    <Value>
                      <Identifier name="codEjercicio"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="rellenarSubcuentasCli" returns="Boolean">
        <Arguments>
          <Variable name="codCliente" type="String"/>
          <Variable name="codSubcuenta" type="String"/>
          <Variable name="nombre" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_rellenarSubcuentasCli">
                  <CallArguments>
                    <Value>
                      <Identifier name="codCliente"/>
                    </Value>
                    <Value>
                      <Identifier name="codSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="nombre"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="crearSubcuentaProv" returns="Boolean">
        <Arguments>
          <Variable name="codSubcuenta" type="String"/>
          <Variable name="idSubcuenta" type="Number"/>
          <Variable name="codProveedor" type="String"/>
          <Variable name="codEjercicio" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_crearSubcuentaProv">
                  <CallArguments>
                    <Value>
                      <Identifier name="codSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="idSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="codProveedor"/>
                    </Value>
                    <Value>
                      <Identifier name="codEjercicio"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="rellenarSubcuentasProv" returns="Boolean">
        <Arguments>
          <Variable name="codProveedor" type="String"/>
          <Variable name="codSubcuenta" type="String"/>
          <Variable name="nombre" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_rellenarSubcuentasProv">
                  <CallArguments>
                    <Value>
                      <Identifier name="codProveedor"/>
                    </Value>
                    <Value>
                      <Identifier name="codSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="nombre"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="automataActivado" returns="Boolean">
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_automataActivado"/>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="clienteActivo" returns="Boolean">
        <Arguments>
          <Variable name="codCliente" type="String"/>
          <Variable name="fecha" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_clienteActivo">
                  <CallArguments>
                    <Value>
                      <Identifier name="codCliente"/>
                    </Value>
                    <Value>
                      <Identifier name="fecha"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="obtenerProvincia">
        <Arguments>
          <Variable name="formulario" type="Object"/>
          <Variable name="campoId" type="String"/>
          <Variable name="campoProvincia" type="String"/>
          <Variable name="campoPais" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_obtenerProvincia">
                  <CallArguments>
                    <Value>
                      <Identifier name="formulario"/>
                    </Value>
                    <Value>
                      <Identifier name="campoId"/>
                    </Value>
                    <Value>
                      <Identifier name="campoProvincia"/>
                    </Value>
                    <Value>
                      <Identifier name="campoPais"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="actualizarContactos20070525" returns="Boolean">
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_actualizarContactos20070525"/>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="lanzarEvento" returns="Boolean">
        <Arguments>
          <Variable name="cursor" type="FLSqlCursor"/>
          <Variable name="evento" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_lanzarEvento">
                  <CallArguments>
                    <Value>
                      <Identifier name="cursor"/>
                    </Value>
                    <Value>
                      <Identifier name="evento"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="actualizarContactosDeAgenda20070525" returns="String">
        <Arguments>
          <Variable name="codCliente" type="String"/>
          <Variable name="codContacto" type="String"/>
          <Variable name="nombreCon" type="String"/>
          <Variable name="cargoCon" type="String"/>
          <Variable name="telefonoCon" type="String"/>
          <Variable name="faxCon" type="String"/>
          <Variable name="emailCon" type="String"/>
          <Variable name="idAgenda" type="Number"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_actualizarContactosDeAgenda20070525">
                  <CallArguments>
                    <Value>
                      <Identifier name="codCliente"/>
                    </Value>
                    <Value>
                      <Identifier name="codContacto"/>
                    </Value>
                    <Value>
                      <Identifier name="nombreCon"/>
                    </Value>
                    <Value>
                      <Identifier name="cargoCon"/>
                    </Value>
                    <Value>
                      <Identifier name="telefonoCon"/>
                    </Value>
                    <Value>
                      <Identifier name="faxCon"/>
                    </Value>
                    <Value>
                      <Identifier name="emailCon"/>
                    </Value>
                    <Value>
                      <Identifier name="idAgenda"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="actualizarContactosProv20070702" returns="Boolean">
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_actualizarContactosProv20070702"/>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="actualizarContactosDeAgendaProv20070702" returns="String">
        <Arguments>
          <Variable name="codProveedor" type="String"/>
          <Variable name="codContacto" type="String"/>
          <Variable name="nombreCon" type="String"/>
          <Variable name="cargoCon" type="String"/>
          <Variable name="telefonoCon" type="String"/>
          <Variable name="faxCon" type="String"/>
          <Variable name="emailCon" type="String"/>
          <Variable name="idAgenda" type="Number"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_actualizarContactosDeAgendaProv20070702">
                  <CallArguments>
                    <Value>
                      <Identifier name="codProveedor"/>
                    </Value>
                    <Value>
                      <Identifier name="codContacto"/>
                    </Value>
                    <Value>
                      <Identifier name="nombreCon"/>
                    </Value>
                    <Value>
                      <Identifier name="cargoCon"/>
                    </Value>
                    <Value>
                      <Identifier name="telefonoCon"/>
                    </Value>
                    <Value>
                      <Identifier name="faxCon"/>
                    </Value>
                    <Value>
                      <Identifier name="emailCon"/>
                    </Value>
                    <Value>
                      <Identifier name="idAgenda"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="elegirOpcion" returns="Number">
        <Arguments>
          <Variable name="opciones" type="Array"/>
          <Variable name="titulo" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_elegirOpcion">
                  <CallArguments>
                    <Value>
                      <Identifier name="opciones"/>
                    </Value>
                    <Value>
                      <Identifier name="titulo"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="crearProvinciasEsp">
        <Arguments>
          <Variable name="codPais" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_crearProvinciasEsp">
                  <CallArguments>
                    <Value>
                      <Identifier name="codPais"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="textoFecha" returns="String">
        <Arguments>
          <Variable name="fecha" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_textoFecha">
                  <CallArguments>
                    <Value>
                      <Identifier name="fecha"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="validarNifIva" returns="String">
        <Arguments>
          <Variable name="nifIva" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_validarNifIva">
                  <CallArguments>
                    <Value>
                      <Identifier name="nifIva"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="ejecutarComandoAsincrono" returns="Array">
        <Arguments>
          <Variable name="comando" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_ejecutarComandoAsincrono">
                  <CallArguments>
                    <Value>
                      <Identifier name="comando"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="globalInit">
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_globalInit"/>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="existeEnvioMail" returns="Boolean">
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_existeEnvioMail"/>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="validarProvincia" returns="Boolean">
        <Arguments>
          <Variable name="cursor" type="FLSqlCursor"/>
          <Variable name="mtd" type="Array"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_validarProvincia">
                  <CallArguments>
                    <Value>
                      <Identifier name="cursor"/>
                    </Value>
                    <Value>
                      <Identifier name="mtd"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="simplify">
        <Arguments>
          <Variable name="str"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_simplify">
                  <CallArguments>
                    <Value>
                      <Identifier name="str"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="escapeQuote">
        <Arguments>
          <Variable name="str"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_escapeQuote">
                  <CallArguments>
                    <Value>
                      <Identifier name="str"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="calcularIBAN">
        <Arguments>
          <Variable name="cuenta"/>
          <Variable name="codPais"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_calcularIBAN">
                  <CallArguments>
                    <Value>
                      <Identifier name="cuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="codPais"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="digitoControlMod97">
        <Arguments>
          <Variable name="numero"/>
          <Variable name="codPais"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_digitoControlMod97">
                  <CallArguments>
                    <Value>
                      <Identifier name="numero"/>
                    </Value>
                    <Value>
                      <Identifier name="codPais"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="moduloNumero">
        <Arguments>
          <Variable name="num"/>
          <Variable name="div"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_moduloNumero">
                  <CallArguments>
                    <Value>
                      <Identifier name="num"/>
                    </Value>
                    <Value>
                      <Identifier name="div"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="calcularIdentificadorAcreedor">
        <Arguments>
          <Variable name="cifEmpresa"/>
          <Variable name="codCuenta"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="oficial_calcularIdentificadorAcreedor">
                  <CallArguments>
                    <Value>
                      <Identifier name="cifEmpresa"/>
                    </Value>
                    <Value>
                      <Identifier name="codCuenta"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
    </Source>
  </Class>
  <Class name="envioMail" extends="oficial">
    <Source>
      <Function name="envioMail">
        <Arguments>
          <Variable name="context"/>
        </Arguments>
        <Source>
          <InstructionCall>
            <FunctionCall name="oficial">
              <CallArguments>
                <Value>
                  <Identifier name="context"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
        </Source>
      </Function>
      <Function name="enviarCorreo">
        <Arguments>
          <Variable name="cuerpo" type="String"/>
          <Variable name="asunto" type="String"/>
          <Variable name="arrayDest" type="Array"/>
          <Variable name="arrayAttach" type="Array"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="envioMail_enviarCorreo">
                  <CallArguments>
                    <Value>
                      <Identifier name="cuerpo"/>
                    </Value>
                    <Value>
                      <Identifier name="asunto"/>
                    </Value>
                    <Value>
                      <Identifier name="arrayDest"/>
                    </Value>
                    <Value>
                      <Identifier name="arrayAttach"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="componerCorreo" returns="String">
        <Arguments>
          <Variable name="cuerpo" type="String"/>
          <Variable name="asunto" type="String"/>
          <Variable name="arrayDest" type="Array"/>
          <Variable name="arrayAttach" type="Array"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="envioMail_componerCorreo">
                  <CallArguments>
                    <Value>
                      <Identifier name="cuerpo"/>
                    </Value>
                    <Value>
                      <Identifier name="asunto"/>
                    </Value>
                    <Value>
                      <Identifier name="arrayDest"/>
                    </Value>
                    <Value>
                      <Identifier name="arrayAttach"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="componerListaDestinatarios" returns="String">
        <Arguments>
          <Variable name="codigo" type="String"/>
          <Variable name="tabla" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="envioMail_componerListaDestinatarios">
                  <CallArguments>
                    <Value>
                      <Identifier name="codigo"/>
                    </Value>
                    <Value>
                      <Identifier name="tabla"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="existeEnvioMail" returns="Boolean">
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="envioMail_existeEnvioMail"/>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
    </Source>
  </Class>
  <Class name="dtoEsp" extends="envioMail">
    <Source>
      <Function name="dtoEsp">
        <Arguments>
          <Variable name="context"/>
        </Arguments>
        <Source>
          <InstructionCall>
            <FunctionCall name="envioMail">
              <CallArguments>
                <Value>
                  <Identifier name="context"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
        </Source>
      </Function>
      <Function name="calcularLiquidacionAgente" returns="Number">
        <Arguments>
          <Variable name="codLiquidacion" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="ctx"/>
                <FunctionCall name="dtoEsp_calcularLiquidacionAgente">
                  <CallArguments>
                    <Value>
                      <Identifier name="codLiquidacion"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
    </Source>
  </Class>
  <Class name="pubEnvioMail" extends="dtoEsp">
    <Source>
      <Function name="pubEnvioMail">
        <Arguments>
          <Variable name="context"/>
        </Arguments>
        <Source>
          <InstructionCall>
            <FunctionCall name="dtoEsp">
              <CallArguments>
                <Value>
                  <Identifier name="context"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
        </Source>
      </Function>
      <Function name="pub_enviarCorreo">
        <Arguments>
          <Variable name="cuerpo" type="String"/>
          <Variable name="asunto" type="String"/>
          <Variable name="arrayDest" type="Array"/>
          <Variable name="arrayAttach" type="Array"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="enviarCorreo">
                  <CallArguments>
                    <Value>
                      <Identifier name="cuerpo"/>
                    </Value>
                    <Value>
                      <Identifier name="asunto"/>
                    </Value>
                    <Value>
                      <Identifier name="arrayDest"/>
                    </Value>
                    <Value>
                      <Identifier name="arrayAttach"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_componerListaDestinatarios" returns="String">
        <Arguments>
          <Variable name="codigo" type="String"/>
          <Variable name="tabla" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="componerListaDestinatarios">
                  <CallArguments>
                    <Value>
                      <Identifier name="codigo"/>
                    </Value>
                    <Value>
                      <Identifier name="tabla"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_existeEnvioMail" returns="Boolean">
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="existeEnvioMail"/>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
    </Source>
  </Class>
  <Class name="head" extends="pubEnvioMail">
    <Source>
      <Function name="head">
        <Arguments>
          <Variable name="context"/>
        </Arguments>
        <Source>
          <InstructionCall>
            <FunctionCall name="pubEnvioMail">
              <CallArguments>
                <Value>
                  <Identifier name="context"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
        </Source>
      </Function>
    </Source>
  </Class>
  <Class name="ifaceCtx" extends="head">
    <Source>
      <Function name="ifaceCtx">
        <Arguments>
          <Variable name="context"/>
        </Arguments>
        <Source>
          <InstructionCall>
            <FunctionCall name="head">
              <CallArguments>
                <Value>
                  <Identifier name="context"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
        </Source>
      </Function>
      <Function name="pub_msgNoDisponible">
        <Arguments>
          <Variable name="modulo" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="msgNoDisponible">
                  <CallArguments>
                    <Value>
                      <Identifier name="modulo"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_ejecutarQry" returns="Array">
        <Arguments>
          <Variable name="tabla" type="String"/>
          <Variable name="campos" type="String"/>
          <Variable name="where" type="String"/>
          <Variable name="listaTablas" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="ejecutarQry">
                  <CallArguments>
                    <Value>
                      <Identifier name="tabla"/>
                    </Value>
                    <Value>
                      <Identifier name="campos"/>
                    </Value>
                    <Value>
                      <Identifier name="where"/>
                    </Value>
                    <Value>
                      <Identifier name="listaTablas"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_valorDefectoEmpresa" returns="String">
        <Arguments>
          <Variable name="fN" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="valorDefectoEmpresa">
                  <CallArguments>
                    <Value>
                      <Identifier name="fN"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_valorQuery" returns="String">
        <Arguments>
          <Variable name="tablas" type="String"/>
          <Variable name="select" type="String"/>
          <Variable name="from" type="String"/>
          <Variable name="where" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="valorQuery">
                  <CallArguments>
                    <Value>
                      <Identifier name="tablas"/>
                    </Value>
                    <Value>
                      <Identifier name="select"/>
                    </Value>
                    <Value>
                      <Identifier name="from"/>
                    </Value>
                    <Value>
                      <Identifier name="where"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_cerosIzquierda" returns="String">
        <Arguments>
          <Variable name="numero" type="String"/>
          <Variable name="totalCifras" type="Number"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="cerosIzquierda">
                  <CallArguments>
                    <Value>
                      <Identifier name="numero"/>
                    </Value>
                    <Value>
                      <Identifier name="totalCifras"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_espaciosDerecha" returns="String">
        <Arguments>
          <Variable name="texto" type="String"/>
          <Variable name="totalLongitud" type="Number"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="espaciosDerecha">
                  <CallArguments>
                    <Value>
                      <Identifier name="texto"/>
                    </Value>
                    <Value>
                      <Identifier name="totalLongitud"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_ejercicioActual" returns="String">
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="ejercicioActual"/>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_cambiarEjercicioActual" returns="Boolean">
        <Arguments>
          <Variable name="codEjercicio" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="cambiarEjercicioActual">
                  <CallArguments>
                    <Value>
                      <Identifier name="codEjercicio"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_datosCtaCliente" returns="Array">
        <Arguments>
          <Variable name="codCliente" type="String"/>
          <Variable name="valoresDefecto" type="Array"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="datosCtaCliente">
                  <CallArguments>
                    <Value>
                      <Identifier name="codCliente"/>
                    </Value>
                    <Value>
                      <Identifier name="valoresDefecto"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_datosCtaProveedor" returns="Array">
        <Arguments>
          <Variable name="codProveedor" type="String"/>
          <Variable name="valoresDefecto" type="Array"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="datosCtaProveedor">
                  <CallArguments>
                    <Value>
                      <Identifier name="codProveedor"/>
                    </Value>
                    <Value>
                      <Identifier name="valoresDefecto"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_calcularIntervalo" returns="Array">
        <Arguments>
          <Variable name="codIntervalo" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="calcularIntervalo">
                  <CallArguments>
                    <Value>
                      <Identifier name="codIntervalo"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_crearSubcuenta" returns="Number">
        <Arguments>
          <Variable name="codSubcuenta" type="String"/>
          <Variable name="descripcion" type="String"/>
          <Variable name="idCuentaEsp" type="String"/>
          <Variable name="codEjercicio" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="crearSubcuenta">
                  <CallArguments>
                    <Value>
                      <Identifier name="codSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="descripcion"/>
                    </Value>
                    <Value>
                      <Identifier name="idCuentaEsp"/>
                    </Value>
                    <Value>
                      <Identifier name="codEjercicio"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_crearSubcuentaCli" returns="Boolean">
        <Arguments>
          <Variable name="codSubcuenta" type="String"/>
          <Variable name="idSubcuenta" type="Number"/>
          <Variable name="codCliente" type="String"/>
          <Variable name="codEjercicio" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="crearSubcuentaCli">
                  <CallArguments>
                    <Value>
                      <Identifier name="codSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="idSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="codCliente"/>
                    </Value>
                    <Value>
                      <Identifier name="codEjercicio"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_crearSubcuentaProv" returns="Boolean">
        <Arguments>
          <Variable name="codSubcuenta" type="String"/>
          <Variable name="idSubcuenta" type="Number"/>
          <Variable name="codProveedor" type="String"/>
          <Variable name="codEjercicio" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="crearSubcuentaProv">
                  <CallArguments>
                    <Value>
                      <Identifier name="codSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="idSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="codProveedor"/>
                    </Value>
                    <Value>
                      <Identifier name="codEjercicio"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_rellenarSubcuentasCli" returns="Boolean">
        <Arguments>
          <Variable name="codCliente" type="String"/>
          <Variable name="codSubcuenta" type="String"/>
          <Variable name="nombre" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="rellenarSubcuentasCli">
                  <CallArguments>
                    <Value>
                      <Identifier name="codCliente"/>
                    </Value>
                    <Value>
                      <Identifier name="codSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="nombre"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_rellenarSubcuentasProv" returns="Boolean">
        <Arguments>
          <Variable name="codProveedor" type="String"/>
          <Variable name="codSubcuenta" type="String"/>
          <Variable name="nombre" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="rellenarSubcuentasProv">
                  <CallArguments>
                    <Value>
                      <Identifier name="codProveedor"/>
                    </Value>
                    <Value>
                      <Identifier name="codSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="nombre"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_automataActivado" returns="Boolean">
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="automataActivado"/>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_clienteActivo" returns="Boolean">
        <Arguments>
          <Variable name="codCliente" type="String"/>
          <Variable name="fecha" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="clienteActivo">
                  <CallArguments>
                    <Value>
                      <Identifier name="codCliente"/>
                    </Value>
                    <Value>
                      <Identifier name="fecha"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_obtenerProvincia">
        <Arguments>
          <Variable name="formulario" type="Object"/>
          <Variable name="campoId" type="String"/>
          <Variable name="campoProvincia" type="String"/>
          <Variable name="campoPais" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="obtenerProvincia">
                  <CallArguments>
                    <Value>
                      <Identifier name="formulario"/>
                    </Value>
                    <Value>
                      <Identifier name="campoId"/>
                    </Value>
                    <Value>
                      <Identifier name="campoProvincia"/>
                    </Value>
                    <Value>
                      <Identifier name="campoPais"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_lanzarEvento" returns="Boolean">
        <Arguments>
          <Variable name="cursor" type="FLSqlCursor"/>
          <Variable name="evento" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="lanzarEvento">
                  <CallArguments>
                    <Value>
                      <Identifier name="cursor"/>
                    </Value>
                    <Value>
                      <Identifier name="evento"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_elegirOpcion" returns="Number">
        <Arguments>
          <Variable name="opciones" type="Array"/>
          <Variable name="titulo" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="elegirOpcion">
                  <CallArguments>
                    <Value>
                      <Identifier name="opciones"/>
                    </Value>
                    <Value>
                      <Identifier name="titulo"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_textoFecha" returns="String">
        <Arguments>
          <Variable name="fecha" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="textoFecha">
                  <CallArguments>
                    <Value>
                      <Identifier name="fecha"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_validarNifIva" returns="String">
        <Arguments>
          <Variable name="nifIva" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="validarNifIva">
                  <CallArguments>
                    <Value>
                      <Identifier name="nifIva"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_ejecutarComandoAsincrono" returns="Array">
        <Arguments>
          <Variable name="comando" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="ejecutarComandoAsincrono">
                  <CallArguments>
                    <Value>
                      <Identifier name="comando"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_globalInit">
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="globalInit"/>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_existeEnvioMail" returns="Boolean">
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="existeEnvioMail"/>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_crearProvinciasEsp">
        <Arguments>
          <Variable name="codPais" type="String"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="crearProvinciasEsp">
                  <CallArguments>
                    <Value>
                      <Identifier name="codPais"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_validarProvincia" returns="Boolean">
        <Arguments>
          <Variable name="cursor" type="FLSqlCursor"/>
          <Variable name="mtd" type="Array"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="validarProvincia">
                  <CallArguments>
                    <Value>
                      <Identifier name="cursor"/>
                    </Value>
                    <Value>
                      <Identifier name="mtd"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_simplify">
        <Arguments>
          <Variable name="str"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="simplify">
                  <CallArguments>
                    <Value>
                      <Identifier name="str"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_escapeQuote">
        <Arguments>
          <Variable name="str"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="escapeQuote">
                  <CallArguments>
                    <Value>
                      <Identifier name="str"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_calcularIBAN">
        <Arguments>
          <Variable name="cuenta"/>
          <Variable name="codPais"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="calcularIBAN">
                  <CallArguments>
                    <Value>
                      <Identifier name="cuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="codPais"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_digitoControlMod97">
        <Arguments>
          <Variable name="numero"/>
          <Variable name="codPais"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="digitoControlMod97">
                  <CallArguments>
                    <Value>
                      <Identifier name="numero"/>
                    </Value>
                    <Value>
                      <Identifier name="codPais"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
      <Function name="pub_moduloNumero">
        <Arguments>
          <Variable name="num"/>
          <Variable name="div"/>
        </Arguments>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="this"/>
                <FunctionCall name="moduloNumero">
                  <CallArguments>
                    <Value>
                      <Identifier name="num"/>
                    </Value>
                    <Value>
                      <Identifier name="div"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </Function>
    </Source>
  </Class>
  <DeclarationBlock mode="CONST">
    <Variable name="iface">
      <Value>
        <New>
          <FunctionCall name="ifaceCtx">
            <CallArguments>
              <Value>
                <Identifier name="this"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </New>
      </Value>
    </Variable>
  </DeclarationBlock>
  <Function name="interna_init">
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="condicion" type="String">
          <Value>
            <Member>
              <Identifier name="util"/>
              <FunctionCall name="sqlSelect">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="clientes"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="codcliente"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="(codcontacto = '' OR codcontacto IS NULL) AND (contacto &lt;&gt; '' AND contacto IS NOT NULL)"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="condicionProv" type="String">
          <Value>
            <Member>
              <Identifier name="util"/>
              <FunctionCall name="sqlSelect">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="proveedores"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="codproveedor"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="(codcontacto = '' OR codcontacto IS NULL) AND (contacto &lt;&gt; '' AND contacto IS NOT NULL)"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <Identifier name="condicion"/>
          </Value>
        </Condition>
        <Source>
          <DeclarationBlock mode="VAR">
            <Variable name="cursor" type="FLSqlCursor">
              <Value>
                <New>
                  <FunctionCall name="FLSqlCursor">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="clientes"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </New>
              </Value>
            </Variable>
          </DeclarationBlock>
          <InstructionCall>
            <Member>
              <Identifier name="cursor"/>
              <FunctionCall name="transaction">
                <CallArguments>
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <TryCatch>
            <Source>
              <If>
                <Condition>
                  <Value>
                    <Member>
                      <Identifier name="this"/>
                      <Identifier name="iface"/>
                      <FunctionCall name="actualizarContactos20070525"/>
                    </Member>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="cursor"/>
                      <FunctionCall name="commit"/>
                    </Member>
                  </InstructionCall>
                </Source>
                <Else>
                  <Source>
                    <InstructionCall>
                      <Member>
                        <Identifier name="cursor"/>
                        <FunctionCall name="rollback"/>
                      </Member>
                    </InstructionCall>
                  </Source>
                </Else>
              </If>
            </Source>
            <Identifier name="e"/>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="cursor"/>
                  <FunctionCall name="rollback"/>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="MessageBox"/>
                  <FunctionCall name="warning">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="translate">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="scripts"/>
                              </Value>
                              <Expression>
                                <Constant delim="&quot;" type="String" value="Hubo un error al actualizar los datos de contactos del m&#243;dulo de Facturaci&#243;n:\n"/>
                                <OpMath type="PLUS"/>
                                <Identifier name="e"/>
                              </Expression>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Value>
                      <Value>
                        <Member>
                          <Identifier name="MessageBox"/>
                          <Identifier name="Ok"/>
                        </Member>
                      </Value>
                      <Value>
                        <Member>
                          <Identifier name="MessageBox"/>
                          <Identifier name="NoButton"/>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
            </Source>
          </TryCatch>
        </Source>
      </If>
      <If>
        <Condition>
          <Value>
            <Identifier name="condicionProv"/>
          </Value>
        </Condition>
        <Source>
          <DeclarationBlock mode="VAR">
            <Variable name="cursor" type="FLSqlCursor">
              <Value>
                <New>
                  <FunctionCall name="FLSqlCursor">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="proveedores"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </New>
              </Value>
            </Variable>
          </DeclarationBlock>
          <InstructionCall>
            <Member>
              <Identifier name="cursor"/>
              <FunctionCall name="transaction">
                <CallArguments>
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <TryCatch>
            <Source>
              <If>
                <Condition>
                  <Value>
                    <Member>
                      <Identifier name="this"/>
                      <Identifier name="iface"/>
                      <FunctionCall name="actualizarContactosProv20070702"/>
                    </Member>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="cursor"/>
                      <FunctionCall name="commit"/>
                    </Member>
                  </InstructionCall>
                </Source>
                <Else>
                  <Source>
                    <InstructionCall>
                      <Member>
                        <Identifier name="cursor"/>
                        <FunctionCall name="rollback"/>
                      </Member>
                    </InstructionCall>
                  </Source>
                </Else>
              </If>
            </Source>
            <Identifier name="e"/>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="cursor"/>
                  <FunctionCall name="rollback"/>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="MessageBox"/>
                  <FunctionCall name="warning">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="translate">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="scripts"/>
                              </Value>
                              <Expression>
                                <Constant delim="&quot;" type="String" value="Hubo un error al actualizar los datos de contactos del m&#243;dulo de Facturaci&#243;n:\n"/>
                                <OpMath type="PLUS"/>
                                <Identifier name="e"/>
                              </Expression>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Value>
                      <Value>
                        <Member>
                          <Identifier name="MessageBox"/>
                          <Identifier name="Ok"/>
                        </Member>
                      </Value>
                      <Value>
                        <Member>
                          <Identifier name="MessageBox"/>
                          <Identifier name="NoButton"/>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
            </Source>
          </TryCatch>
        </Source>
      </If>
      <If>
        <Condition>
          <Value>
            <Member>
              <Identifier name="util"/>
              <FunctionCall name="sqlSelect">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="empresa"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="id"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="1 = 1"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN"/>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="cursor" type="FLSqlCursor">
          <Value>
            <New>
              <FunctionCall name="FLSqlCursor">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="empresa"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionCall>
        <Member>
          <Identifier name="cursor"/>
          <FunctionCall name="select"/>
        </Member>
      </InstructionCall>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="cursor"/>
                <FunctionCall name="first"/>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionCall>
            <Member>
              <Identifier name="MessageBox"/>
              <FunctionCall name="information">
                <CallArguments>
                  <Value>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="translate">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="scripts"/>
                          </Value>
                          <Value>
                            <Constant delim="&quot;" type="String" value="Se insertar&#225; una empresa por defecto y algunos valores iniciales para empezar a trabajar."/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                  <Value>
                    <Member>
                      <Identifier name="MessageBox"/>
                      <Identifier name="Ok"/>
                    </Member>
                  </Value>
                  <Value>
                    <Member>
                      <Identifier name="MessageBox"/>
                      <Identifier name="NoButton"/>
                    </Member>
                  </Value>
                  <Value>
                    <Member>
                      <Identifier name="MessageBox"/>
                      <Identifier name="NoButton"/>
                    </Member>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="this"/>
              <Identifier name="iface"/>
              <FunctionCall name="valoresIniciales"/>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="this"/>
              <FunctionCall name="execMainScript">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="empresa"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
        </Source>
      </If>
    </Source>
  </Function>
  <Function name="interna_afterCommit_dirclientes" returns="Boolean">
    <Arguments>
      <Variable name="curDirCli" type="FLSqlCursor"/>
    </Arguments>
    <Source>
      <If>
        <Condition>
          <Expression>
            <Member>
              <Identifier name="curDirCli"/>
              <FunctionCall name="modeAccess"/>
            </Member>
            <Compare type="EQ"/>
            <Member>
              <Identifier name="curDirCli"/>
              <Identifier name="Del"/>
            </Member>
          </Expression>
        </Condition>
        <Source>
          <DeclarationBlock mode="VAR">
            <Variable name="domFact" type="String">
              <Value>
                <Member>
                  <Identifier name="curDirCli"/>
                  <FunctionCall name="valueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="domfacturacion"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </Variable>
          </DeclarationBlock>
          <DeclarationBlock mode="VAR">
            <Variable name="domEnv" type="String">
              <Value>
                <Member>
                  <Identifier name="curDirCli"/>
                  <FunctionCall name="valueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="domenvio"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </Variable>
          </DeclarationBlock>
          <If>
            <Condition>
              <Expression>
                <Identifier name="domFact"/>
                <Compare type="EQ"/>
                <Identifier name="true"/>
                <Compare type="LOR"/>
                <Identifier name="domEnv"/>
                <Compare type="EQ"/>
                <Identifier name="true"/>
              </Expression>
            </Condition>
            <Source>
              <DeclarationBlock mode="VAR">
                <Variable name="cursor" type="FLSqlCursor">
                  <Value>
                    <New>
                      <FunctionCall name="FLSqlCursor">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="dirclientes"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </New>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <InstructionCall>
                <Member>
                  <Identifier name="cursor"/>
                  <FunctionCall name="select">
                    <CallArguments>
                      <Expression>
                        <Constant delim="&quot;" type="String" value="codcliente = '"/>
                        <OpMath type="PLUS"/>
                        <Member>
                          <Identifier name="curDirCli"/>
                          <FunctionCall name="valueBuffer">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="codcliente"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="' AND id &lt;&gt; "/>
                        <OpMath type="PLUS"/>
                        <Member>
                          <Identifier name="curDirCli"/>
                          <FunctionCall name="valueBuffer">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="id"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Expression>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <If>
                <Condition>
                  <Value>
                    <Member>
                      <Identifier name="cursor"/>
                      <FunctionCall name="first"/>
                    </Member>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="cursor"/>
                      <FunctionCall name="setModeAccess">
                        <CallArguments>
                          <Value>
                            <Member>
                              <Identifier name="cursor"/>
                              <Identifier name="Edit"/>
                            </Member>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </InstructionCall>
                  <InstructionCall>
                    <Member>
                      <Identifier name="cursor"/>
                      <FunctionCall name="refreshBuffer"/>
                    </Member>
                  </InstructionCall>
                  <If>
                    <Condition>
                      <Expression>
                        <Identifier name="domFact"/>
                        <Compare type="EQ"/>
                        <Identifier name="true"/>
                      </Expression>
                    </Condition>
                    <Source>
                      <InstructionCall>
                        <Member>
                          <Identifier name="cursor"/>
                          <FunctionCall name="setValueBuffer">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="domfacturacion"/>
                              </Value>
                              <Value>
                                <Identifier name="domFact"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </InstructionCall>
                    </Source>
                  </If>
                  <If>
                    <Condition>
                      <Expression>
                        <Identifier name="domEnv"/>
                        <Compare type="EQ"/>
                        <Identifier name="true"/>
                      </Expression>
                    </Condition>
                    <Source>
                      <InstructionCall>
                        <Member>
                          <Identifier name="cursor"/>
                          <FunctionCall name="setValueBuffer">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="domenvio"/>
                              </Value>
                              <Value>
                                <Identifier name="domEnv"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </InstructionCall>
                    </Source>
                  </If>
                  <InstructionCall>
                    <Member>
                      <Identifier name="cursor"/>
                      <FunctionCall name="commitBuffer"/>
                    </Member>
                  </InstructionCall>
                </Source>
              </If>
            </Source>
          </If>
        </Source>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="interna_afterCommit_dirproveedores" returns="Boolean">
    <Arguments>
      <Variable name="curDirProv" type="FLSqlCursor"/>
    </Arguments>
    <Source>
      <If>
        <Condition>
          <Expression>
            <Member>
              <Identifier name="curDirProv"/>
              <FunctionCall name="modeAccess"/>
            </Member>
            <Compare type="EQ"/>
            <Member>
              <Identifier name="curDirProv"/>
              <Identifier name="Del"/>
            </Member>
          </Expression>
        </Condition>
        <Source>
          <DeclarationBlock mode="VAR">
            <Variable name="dirPpal" type="String">
              <Value>
                <Member>
                  <Identifier name="curDirProv"/>
                  <FunctionCall name="valueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="direccionppal"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </Variable>
          </DeclarationBlock>
          <If>
            <Condition>
              <Expression>
                <Identifier name="dirPpal"/>
                <Compare type="EQ"/>
                <Identifier name="true"/>
              </Expression>
            </Condition>
            <Source>
              <DeclarationBlock mode="VAR">
                <Variable name="cursor" type="FLSqlCursor">
                  <Value>
                    <New>
                      <FunctionCall name="FLSqlCursor">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="dirproveedores"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </New>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <InstructionCall>
                <Member>
                  <Identifier name="cursor"/>
                  <FunctionCall name="select">
                    <CallArguments>
                      <Expression>
                        <Constant delim="&quot;" type="String" value="codproveedor = '"/>
                        <OpMath type="PLUS"/>
                        <Member>
                          <Identifier name="curDirProv"/>
                          <FunctionCall name="valueBuffer">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="codproveedor"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="' AND id &lt;&gt; "/>
                        <OpMath type="PLUS"/>
                        <Member>
                          <Identifier name="curDirProv"/>
                          <FunctionCall name="valueBuffer">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="id"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Expression>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <If>
                <Condition>
                  <Value>
                    <Member>
                      <Identifier name="cursor"/>
                      <FunctionCall name="first"/>
                    </Member>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="cursor"/>
                      <FunctionCall name="setModeAccess">
                        <CallArguments>
                          <Value>
                            <Member>
                              <Identifier name="cursor"/>
                              <Identifier name="Edit"/>
                            </Member>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </InstructionCall>
                  <InstructionCall>
                    <Member>
                      <Identifier name="cursor"/>
                      <FunctionCall name="refreshBuffer"/>
                    </Member>
                  </InstructionCall>
                  <InstructionCall>
                    <Member>
                      <Identifier name="cursor"/>
                      <FunctionCall name="setValueBuffer">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="direccionppal"/>
                          </Value>
                          <Value>
                            <Identifier name="dirPpal"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </InstructionCall>
                  <InstructionCall>
                    <Member>
                      <Identifier name="cursor"/>
                      <FunctionCall name="commitBuffer"/>
                    </Member>
                  </InstructionCall>
                </Source>
              </If>
            </Source>
          </If>
        </Source>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="interna_afterCommit_clientes" returns="Boolean">
    <Arguments>
      <Variable name="curCliente" type="FLSqlCursor"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="sys"/>
                <FunctionCall name="isLoadedModule">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="flcontppal"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="true"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="codSubcuenta" type="String">
          <Value>
            <Member>
              <Identifier name="curCliente"/>
              <FunctionCall name="valueBuffer">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="codsubcuenta"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="idSubcuenta" type="Number">
          <Value>
            <FunctionCall name="parseFloat">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="curCliente"/>
                    <FunctionCall name="valueBuffer">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="idsubcuenta"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="codCliente" type="String">
          <Value>
            <Member>
              <Identifier name="curCliente"/>
              <FunctionCall name="valueBuffer">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="codcliente"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="idSubcuentaPrevia" type="Number">
          <Value>
            <FunctionCall name="parseFloat">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="curCliente"/>
                    <FunctionCall name="valueBufferCopy">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="idsubcuenta"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Value>
        </Variable>
      </DeclarationBlock>
      <Switch>
        <Condition>
          <Value>
            <Member>
              <Identifier name="curCliente"/>
              <FunctionCall name="modeAccess"/>
            </Member>
          </Value>
        </Condition>
        <Case>
          <Value>
            <Member>
              <Identifier name="curCliente"/>
              <Identifier name="Insert"/>
            </Member>
          </Value>
          <Source>
            <If>
              <Condition>
                <Value>
                  <OpUnary type="LNOT">
                    <Member>
                      <Identifier name="this"/>
                      <Identifier name="iface"/>
                      <FunctionCall name="rellenarSubcuentasCli">
                        <CallArguments>
                          <Value>
                            <Identifier name="codCliente"/>
                          </Value>
                          <Value>
                            <Identifier name="codSubcuenta"/>
                          </Value>
                          <Value>
                            <Member>
                              <Identifier name="curCliente"/>
                              <FunctionCall name="valueBuffer">
                                <CallArguments>
                                  <Value>
                                    <Constant delim="&quot;" type="String" value="nombre"/>
                                  </Value>
                                </CallArguments>
                              </FunctionCall>
                            </Member>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </OpUnary>
                </Value>
              </Condition>
              <Source>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
      </Switch>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="interna_afterCommit_proveedores" returns="Boolean">
    <Arguments>
      <Variable name="curProveedor" type="FLSqlCursor"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="sys"/>
                <FunctionCall name="isLoadedModule">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="flcontppal"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="true"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="codSubcuenta" type="String">
          <Value>
            <Member>
              <Identifier name="curProveedor"/>
              <FunctionCall name="valueBuffer">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="codsubcuenta"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="idSubcuenta" type="Number">
          <Value>
            <FunctionCall name="parseFloat">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="curProveedor"/>
                    <FunctionCall name="valueBuffer">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="idsubcuenta"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="codProveedor" type="String">
          <Value>
            <Member>
              <Identifier name="curProveedor"/>
              <FunctionCall name="valueBuffer">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="codproveedor"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="idSubcuentaPrevia" type="Number">
          <Value>
            <FunctionCall name="parseFloat">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="curProveedor"/>
                    <FunctionCall name="valueBufferCopy">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="idsubcuenta"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Value>
        </Variable>
      </DeclarationBlock>
      <Switch>
        <Condition>
          <Value>
            <Member>
              <Identifier name="curProveedor"/>
              <FunctionCall name="modeAccess"/>
            </Member>
          </Value>
        </Condition>
        <Case>
          <Value>
            <Member>
              <Identifier name="curProveedor"/>
              <Identifier name="Insert"/>
            </Member>
          </Value>
          <Source>
            <If>
              <Condition>
                <Value>
                  <OpUnary type="LNOT">
                    <Member>
                      <Identifier name="this"/>
                      <Identifier name="iface"/>
                      <FunctionCall name="rellenarSubcuentasProv">
                        <CallArguments>
                          <Value>
                            <Identifier name="codProveedor"/>
                          </Value>
                          <Value>
                            <Identifier name="codSubcuenta"/>
                          </Value>
                          <Value>
                            <Member>
                              <Identifier name="curProveedor"/>
                              <FunctionCall name="valueBuffer">
                                <CallArguments>
                                  <Value>
                                    <Constant delim="&quot;" type="String" value="nombre"/>
                                  </Value>
                                </CallArguments>
                              </FunctionCall>
                            </Member>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </OpUnary>
                </Value>
              </Condition>
              <Source>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
      </Switch>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="interna_beforeCommit_proveedores" returns="Boolean">
    <Arguments>
      <Variable name="curProveedor" type="FLSqlCursor"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="sys"/>
                <FunctionCall name="isLoadedModule">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="flcontppal"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="true"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <Switch>
        <Condition>
          <Value>
            <Member>
              <Identifier name="curProveedor"/>
              <FunctionCall name="modeAccess"/>
            </Member>
          </Value>
        </Condition>
        <Case>
          <Value>
            <Member>
              <Identifier name="curProveedor"/>
              <Identifier name="Del"/>
            </Member>
          </Value>
          <Source>
            <DeclarationBlock mode="VAR">
              <Variable name="qrySubcuentas" type="FLSqlQuery">
                <Value>
                  <New>
                    <FunctionCall name="FLSqlQuery"/>
                  </New>
                </Value>
              </Variable>
            </DeclarationBlock>
            <InstructionCall>
              <Member>
                <Identifier name="qrySubcuentas"/>
                <FunctionCall name="setTablesList">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="co_subcuentasprov,co_subcuentas"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="qrySubcuentas"/>
                <FunctionCall name="setSelect">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="qrySubcuentas"/>
                <FunctionCall name="setFrom">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="co_subcuentasprov sp INNER JOIN co_subcuentas s ON sp.idsubcuenta = s.idsubcuenta"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="qrySubcuentas"/>
                <FunctionCall name="setWhere">
                  <CallArguments>
                    <Expression>
                      <Constant delim="&quot;" type="String" value="sp.codproveedor = '"/>
                      <OpMath type="PLUS"/>
                      <Member>
                        <Identifier name="curProveedor"/>
                        <FunctionCall name="valueBuffer">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="codproveedor"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                      <OpMath type="PLUS"/>
                      <Constant delim="&quot;" type="String" value="'"/>
                    </Expression>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <TryCatch>
              <Source>
                <InstructionCall>
                  <Member>
                    <Identifier name="qrySubcuentas"/>
                    <FunctionCall name="setForwardOnly">
                      <CallArguments>
                        <Value>
                          <Identifier name="true"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </InstructionCall>
              </Source>
              <Identifier name="e"/>
              <Source/>
            </TryCatch>
            <If>
              <Condition>
                <Value>
                  <OpUnary type="LNOT">
                    <Member>
                      <Identifier name="qrySubcuentas"/>
                      <FunctionCall name="exec"/>
                    </Member>
                  </OpUnary>
                </Value>
              </Condition>
              <Source>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
            <DeclarationBlock mode="VAR">
              <Variable name="idSubcuenta" type="String"/>
            </DeclarationBlock>
            <While>
              <Condition>
                <Value>
                  <Member>
                    <Identifier name="qrySubcuentas"/>
                    <FunctionCall name="next"/>
                  </Member>
                </Value>
              </Condition>
              <Source>
                <InstructionUpdate>
                  <Identifier name="idSubcuenta"/>
                  <OpUpdate type="EQUALS"/>
                  <Value>
                    <Member>
                      <Identifier name="qrySubcuentas"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="s.idsubcuenta"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </InstructionUpdate>
                <If>
                  <Condition>
                    <Expression>
                      <FunctionCall name="parseFloat">
                        <CallArguments>
                          <Value>
                            <Member>
                              <Identifier name="qrySubcuentas"/>
                              <FunctionCall name="value">
                                <CallArguments>
                                  <Value>
                                    <Constant delim="&quot;" type="String" value="s.saldo"/>
                                  </Value>
                                </CallArguments>
                              </FunctionCall>
                            </Member>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                      <Compare type="NE"/>
                      <Constant type="Number" value="0"/>
                    </Expression>
                  </Condition>
                  <Source>
                    <InstructionFlow type="CONTINUE"/>
                  </Source>
                </If>
                <If>
                  <Condition>
                    <Value>
                      <Member>
                        <Identifier name="util"/>
                        <FunctionCall name="sqlSelect">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="co_partidas"/>
                            </Value>
                            <Value>
                              <Constant delim="&quot;" type="String" value="idpartida"/>
                            </Value>
                            <Expression>
                              <Constant delim="&quot;" type="String" value="idsubcuenta = "/>
                              <OpMath type="PLUS"/>
                              <Identifier name="idSubcuenta"/>
                            </Expression>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </Value>
                  </Condition>
                  <Source>
                    <InstructionFlow type="CONTINUE"/>
                  </Source>
                </If>
                <If>
                  <Condition>
                    <Value>
                      <Member>
                        <Identifier name="util"/>
                        <FunctionCall name="sqlSelect">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="co_subcuentasprov"/>
                            </Value>
                            <Value>
                              <Constant delim="&quot;" type="String" value="idsubcuenta"/>
                            </Value>
                            <Expression>
                              <Constant delim="&quot;" type="String" value="idsubcuenta = "/>
                              <OpMath type="PLUS"/>
                              <Identifier name="idSubcuenta"/>
                              <OpMath type="PLUS"/>
                              <Constant delim="&quot;" type="String" value=" AND codproveedor &lt;&gt; '"/>
                              <OpMath type="PLUS"/>
                              <Member>
                                <Identifier name="curProveedor"/>
                                <FunctionCall name="valueBuffer">
                                  <CallArguments>
                                    <Value>
                                      <Constant delim="&quot;" type="String" value="codproveedor"/>
                                    </Value>
                                  </CallArguments>
                                </FunctionCall>
                              </Member>
                              <OpMath type="PLUS"/>
                              <Constant delim="&quot;" type="String" value="'"/>
                            </Expression>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </Value>
                  </Condition>
                  <Source>
                    <InstructionFlow type="CONTINUE"/>
                  </Source>
                </If>
                <If>
                  <Condition>
                    <Value>
                      <OpUnary type="LNOT">
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="sqlDelete">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="co_subcuentas"/>
                              </Value>
                              <Expression>
                                <Constant delim="&quot;" type="String" value="idsubcuenta = "/>
                                <OpMath type="PLUS"/>
                                <Identifier name="idSubcuenta"/>
                              </Expression>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </OpUnary>
                    </Value>
                  </Condition>
                  <Source>
                    <InstructionFlow type="RETURN">
                      <Value>
                        <Identifier name="false"/>
                      </Value>
                    </InstructionFlow>
                  </Source>
                </If>
              </Source>
            </While>
          </Source>
        </Case>
      </Switch>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="interna_beforeCommit_clientes" returns="Boolean">
    <Arguments>
      <Variable name="curCliente" type="FLSqlCursor"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="sys"/>
                <FunctionCall name="isLoadedModule">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="flcontppal"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="true"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <Switch>
        <Condition>
          <Value>
            <Member>
              <Identifier name="curCliente"/>
              <FunctionCall name="modeAccess"/>
            </Member>
          </Value>
        </Condition>
        <Case>
          <Value>
            <Member>
              <Identifier name="curCliente"/>
              <Identifier name="Del"/>
            </Member>
          </Value>
          <Source>
            <DeclarationBlock mode="VAR">
              <Variable name="qrySubcuentas" type="FLSqlQuery">
                <Value>
                  <New>
                    <FunctionCall name="FLSqlQuery"/>
                  </New>
                </Value>
              </Variable>
            </DeclarationBlock>
            <InstructionCall>
              <Member>
                <Identifier name="qrySubcuentas"/>
                <FunctionCall name="setTablesList">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="co_subcuentascli,co_subcuentas"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="qrySubcuentas"/>
                <FunctionCall name="setSelect">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="s.codsubcuenta,s.descripcion,s.codejercicio,s.saldo,s.idsubcuenta"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="qrySubcuentas"/>
                <FunctionCall name="setFrom">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="co_subcuentascli sc INNER JOIN co_subcuentas s ON sc.idsubcuenta = s.idsubcuenta"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="qrySubcuentas"/>
                <FunctionCall name="setWhere">
                  <CallArguments>
                    <Expression>
                      <Constant delim="&quot;" type="String" value="sc.codcliente = '"/>
                      <OpMath type="PLUS"/>
                      <Member>
                        <Identifier name="curCliente"/>
                        <FunctionCall name="valueBuffer">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="codcliente"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                      <OpMath type="PLUS"/>
                      <Constant delim="&quot;" type="String" value="'"/>
                    </Expression>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <TryCatch>
              <Source>
                <InstructionCall>
                  <Member>
                    <Identifier name="qrySubcuentas"/>
                    <FunctionCall name="setForwardOnly">
                      <CallArguments>
                        <Value>
                          <Identifier name="true"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </InstructionCall>
              </Source>
              <Identifier name="e"/>
              <Source/>
            </TryCatch>
            <If>
              <Condition>
                <Value>
                  <OpUnary type="LNOT">
                    <Member>
                      <Identifier name="qrySubcuentas"/>
                      <FunctionCall name="exec"/>
                    </Member>
                  </OpUnary>
                </Value>
              </Condition>
              <Source>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
            <DeclarationBlock mode="VAR">
              <Variable name="idSubcuenta" type="String"/>
            </DeclarationBlock>
            <While>
              <Condition>
                <Value>
                  <Member>
                    <Identifier name="qrySubcuentas"/>
                    <FunctionCall name="next"/>
                  </Member>
                </Value>
              </Condition>
              <Source>
                <InstructionUpdate>
                  <Identifier name="idSubcuenta"/>
                  <OpUpdate type="EQUALS"/>
                  <Value>
                    <Member>
                      <Identifier name="qrySubcuentas"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="s.idsubcuenta"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </InstructionUpdate>
                <If>
                  <Condition>
                    <Expression>
                      <FunctionCall name="parseFloat">
                        <CallArguments>
                          <Value>
                            <Member>
                              <Identifier name="qrySubcuentas"/>
                              <FunctionCall name="value">
                                <CallArguments>
                                  <Value>
                                    <Constant delim="&quot;" type="String" value="s.saldo"/>
                                  </Value>
                                </CallArguments>
                              </FunctionCall>
                            </Member>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                      <Compare type="NE"/>
                      <Constant type="Number" value="0"/>
                    </Expression>
                  </Condition>
                  <Source>
                    <InstructionFlow type="CONTINUE"/>
                  </Source>
                </If>
                <If>
                  <Condition>
                    <Value>
                      <Member>
                        <Identifier name="util"/>
                        <FunctionCall name="sqlSelect">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="co_partidas"/>
                            </Value>
                            <Value>
                              <Constant delim="&quot;" type="String" value="idpartida"/>
                            </Value>
                            <Expression>
                              <Constant delim="&quot;" type="String" value="idsubcuenta = "/>
                              <OpMath type="PLUS"/>
                              <Identifier name="idSubcuenta"/>
                            </Expression>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </Value>
                  </Condition>
                  <Source>
                    <InstructionFlow type="CONTINUE"/>
                  </Source>
                </If>
                <If>
                  <Condition>
                    <Value>
                      <Member>
                        <Identifier name="util"/>
                        <FunctionCall name="sqlSelect">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="co_subcuentascli"/>
                            </Value>
                            <Value>
                              <Constant delim="&quot;" type="String" value="idsubcuenta"/>
                            </Value>
                            <Expression>
                              <Constant delim="&quot;" type="String" value="idsubcuenta = "/>
                              <OpMath type="PLUS"/>
                              <Identifier name="idSubcuenta"/>
                              <OpMath type="PLUS"/>
                              <Constant delim="&quot;" type="String" value=" AND codcliente &lt;&gt; '"/>
                              <OpMath type="PLUS"/>
                              <Member>
                                <Identifier name="curCliente"/>
                                <FunctionCall name="valueBuffer">
                                  <CallArguments>
                                    <Value>
                                      <Constant delim="&quot;" type="String" value="codcliente"/>
                                    </Value>
                                  </CallArguments>
                                </FunctionCall>
                              </Member>
                              <OpMath type="PLUS"/>
                              <Constant delim="&quot;" type="String" value="'"/>
                            </Expression>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </Value>
                  </Condition>
                  <Source>
                    <InstructionFlow type="CONTINUE"/>
                  </Source>
                </If>
                <If>
                  <Condition>
                    <Value>
                      <OpUnary type="LNOT">
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="sqlDelete">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="co_subcuentas"/>
                              </Value>
                              <Expression>
                                <Constant delim="&quot;" type="String" value="idsubcuenta = "/>
                                <OpMath type="PLUS"/>
                                <Identifier name="idSubcuenta"/>
                              </Expression>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </OpUnary>
                    </Value>
                  </Condition>
                  <Source>
                    <InstructionFlow type="RETURN">
                      <Value>
                        <Identifier name="false"/>
                      </Value>
                    </InstructionFlow>
                  </Source>
                </If>
              </Source>
            </While>
          </Source>
        </Case>
      </Switch>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="interna_afterCommit_empresa" returns="Boolean">
    <Arguments>
      <Variable name="curEmpresa" type="FLSqlCursor"/>
    </Arguments>
  </Function>
  <Function name="interna_beforeCommit_cuentasbcocli" returns="Boolean">
    <Arguments>
      <Variable name="curCuenta" type="FLSqlCursor"/>
    </Arguments>
    <Source>
      <Switch>
        <Condition>
          <Value>
            <Member>
              <Identifier name="curCuenta"/>
              <FunctionCall name="modeAccess"/>
            </Member>
          </Value>
        </Condition>
        <Case>
          <Value>
            <Member>
              <Identifier name="curCuenta"/>
              <Identifier name="Del"/>
            </Member>
          </Value>
          <Source>
            <DeclarationBlock mode="VAR">
              <Variable name="util" type="FLUtil">
                <Value>
                  <New>
                    <Identifier name="FLUtil"/>
                  </New>
                </Value>
              </Variable>
            </DeclarationBlock>
            <DeclarationBlock mode="VAR">
              <Variable name="codRecibo" type="String">
                <Value>
                  <Member>
                    <Identifier name="util"/>
                    <FunctionCall name="sqlSelect">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="reciboscli"/>
                        </Value>
                        <Value>
                          <Constant delim="&quot;" type="String" value="codigo"/>
                        </Value>
                        <Expression>
                          <Constant delim="&quot;" type="String" value="codcliente = '"/>
                          <OpMath type="PLUS"/>
                          <Member>
                            <Identifier name="curCuenta"/>
                            <FunctionCall name="valueBuffer">
                              <CallArguments>
                                <Value>
                                  <Constant delim="&quot;" type="String" value="codcliente"/>
                                </Value>
                              </CallArguments>
                            </FunctionCall>
                          </Member>
                          <OpMath type="PLUS"/>
                          <Constant delim="&quot;" type="String" value="' AND codcuenta = '"/>
                          <OpMath type="PLUS"/>
                          <Member>
                            <Identifier name="curCuenta"/>
                            <FunctionCall name="valueBuffer">
                              <CallArguments>
                                <Value>
                                  <Constant delim="&quot;" type="String" value="codcuenta"/>
                                </Value>
                              </CallArguments>
                            </FunctionCall>
                          </Member>
                          <OpMath type="PLUS"/>
                          <Constant delim="&quot;" type="String" value="' AND estado &lt;&gt; 'Pagado'"/>
                        </Expression>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </Value>
              </Variable>
            </DeclarationBlock>
            <If>
              <Condition>
                <Expression>
                  <Identifier name="codRecibo"/>
                  <Compare type="LAND"/>
                  <Identifier name="codRecibo"/>
                  <Compare type="NE"/>
                  <Constant delim="&quot;" type="String" value=""/>
                </Expression>
              </Condition>
              <Source>
                <InstructionCall>
                  <Member>
                    <Identifier name="MessageBox"/>
                    <FunctionCall name="warning">
                      <CallArguments>
                        <Value>
                          <Member>
                            <Identifier name="util"/>
                            <FunctionCall name="translate">
                              <CallArguments>
                                <Value>
                                  <Constant delim="&quot;" type="String" value="scripts"/>
                                </Value>
                                <Value>
                                  <Constant delim="&quot;" type="String" value="No puede eliminar la cuenta del cliente porque hay al menos un recibo (%1) pendiente de pago asociado a esta cuenta.\nDebe cambiar la cuenta de los recibos pendientes de este cliente antes de borrarla."/>
                                </Value>
                              </CallArguments>
                            </FunctionCall>
                            <FunctionCall name="arg">
                              <CallArguments>
                                <Value>
                                  <Identifier name="codRecibo"/>
                                </Value>
                              </CallArguments>
                            </FunctionCall>
                          </Member>
                        </Value>
                        <Value>
                          <Member>
                            <Identifier name="MessageBox"/>
                            <Identifier name="Ok"/>
                          </Member>
                        </Value>
                        <Value>
                          <Member>
                            <Identifier name="MessageBox"/>
                            <Identifier name="NoButton"/>
                          </Member>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </InstructionCall>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
      </Switch>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_msgNoDisponible">
    <Arguments>
      <Variable name="nombreModulo" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionCall>
        <Member>
          <Identifier name="MessageBox"/>
          <FunctionCall name="information">
            <CallArguments>
              <Expression>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="El m&#243;dulo '"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
                <OpMath type="PLUS"/>
                <Identifier name="nombreModulo"/>
                <OpMath type="PLUS"/>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="' no est&#225; disponible."/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Expression>
              <Value>
                <Member>
                  <Identifier name="MessageBox"/>
                  <Identifier name="Ok"/>
                </Member>
              </Value>
              <Value>
                <Member>
                  <Identifier name="MessageBox"/>
                  <Identifier name="NoButton"/>
                </Member>
              </Value>
              <Value>
                <Member>
                  <Identifier name="MessageBox"/>
                  <Identifier name="NoButton"/>
                </Member>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
    </Source>
  </Function>
  <Function name="oficial_ejecutarQry" returns="Array">
    <Arguments>
      <Variable name="tabla" type="String"/>
      <Variable name="campos" type="String"/>
      <Variable name="where" type="String"/>
      <Variable name="listaTablas" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <Identifier name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="campo" type="Array">
          <Value>
            <Member>
              <Identifier name="campos"/>
              <FunctionCall name="split">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value=","/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="valor" type="Array">
          <Value>
            <Constant>
              <list_constant arg00="LBRACKET" arg01="callargs" arg02="RBRACKET"/>
            </Constant>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionUpdate>
        <ArrayMember>
          <Identifier name="valor"/>
          <Value>
            <Constant delim="&quot;" type="String" value="result"/>
          </Value>
        </ArrayMember>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Constant type="Number" value="1"/>
        </Value>
      </InstructionUpdate>
      <DeclarationBlock mode="VAR">
        <Variable name="query" type="FLSqlQuery">
          <Value>
            <New>
              <FunctionCall name="FLSqlQuery"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <Identifier name="listaTablas"/>
          </Value>
        </Condition>
        <Source>
          <InstructionCall>
            <Member>
              <Identifier name="query"/>
              <FunctionCall name="setTablesList">
                <CallArguments>
                  <Value>
                    <Identifier name="listaTablas"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
        </Source>
        <Else>
          <Source>
            <InstructionCall>
              <Member>
                <Identifier name="query"/>
                <FunctionCall name="setTablesList">
                  <CallArguments>
                    <Value>
                      <Identifier name="tabla"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
          </Source>
        </Else>
      </If>
      <TryCatch>
        <Source>
          <InstructionCall>
            <Member>
              <Identifier name="query"/>
              <FunctionCall name="setForwardOnly">
                <CallArguments>
                  <Value>
                    <Identifier name="true"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
        </Source>
        <Identifier name="e"/>
        <Source/>
      </TryCatch>
      <InstructionCall>
        <Member>
          <Identifier name="query"/>
          <FunctionCall name="setSelect">
            <CallArguments>
              <Value>
                <Identifier name="campo"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="query"/>
          <FunctionCall name="setFrom">
            <CallArguments>
              <Value>
                <Identifier name="tabla"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="query"/>
          <FunctionCall name="setWhere">
            <CallArguments>
              <Value>
                <Identifier name="where"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <If>
        <Condition>
          <Value>
            <Member>
              <Identifier name="query"/>
              <FunctionCall name="exec"/>
            </Member>
          </Value>
        </Condition>
        <Source>
          <If>
            <Condition>
              <Value>
                <Member>
                  <Identifier name="query"/>
                  <FunctionCall name="next"/>
                </Member>
              </Value>
            </Condition>
            <Source>
              <For>
                <ForInitialize>
                  <Variable name="i" type="Number">
                    <Value>
                      <Constant type="Number" value="0"/>
                    </Value>
                  </Variable>
                </ForInitialize>
                <ForCompare>
                  <Expression>
                    <Identifier name="i"/>
                    <Compare type="LT"/>
                    <Member>
                      <Identifier name="campo"/>
                      <Identifier name="length"/>
                    </Member>
                  </Expression>
                </ForCompare>
                <ForIncrement>
                  <InlineUpdate type="PLUSPLUS" mode="read-update">
                    <Identifier name="i"/>
                  </InlineUpdate>
                </ForIncrement>
                <Source>
                  <InstructionUpdate>
                    <ArrayMember>
                      <Identifier name="valor"/>
                      <Value>
                        <ArrayMember>
                          <Identifier name="campo"/>
                          <Value>
                            <Identifier name="i"/>
                          </Value>
                        </ArrayMember>
                      </Value>
                    </ArrayMember>
                    <OpUpdate type="EQUALS"/>
                    <Value>
                      <Member>
                        <Identifier name="query"/>
                        <FunctionCall name="value">
                          <CallArguments>
                            <Value>
                              <Identifier name="i"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </Value>
                  </InstructionUpdate>
                </Source>
              </For>
            </Source>
            <Else>
              <Source>
                <InstructionUpdate>
                  <Member>
                    <Identifier name="valor"/>
                    <Identifier name="result"/>
                  </Member>
                  <OpUpdate type="EQUALS"/>
                  <Value>
                    <OpUnary type="MINUS">
                      <Constant type="Number" value="1"/>
                    </OpUnary>
                  </Value>
                </InstructionUpdate>
              </Source>
            </Else>
          </If>
        </Source>
        <Else>
          <Source>
            <InstructionCall>
              <Member>
                <Identifier name="MessageBox"/>
                <FunctionCall name="critical">
                  <CallArguments>
                    <Expression>
                      <Member>
                        <Identifier name="util"/>
                        <FunctionCall name="translate">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="scripts"/>
                            </Value>
                            <Value>
                              <Constant delim="&quot;" type="String" value="Fall&#243; la consulta"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                      <OpMath type="PLUS"/>
                      <Member>
                        <Identifier name="query"/>
                        <FunctionCall name="sql"/>
                      </Member>
                    </Expression>
                    <Value>
                      <Member>
                        <Identifier name="MessageBox"/>
                        <Identifier name="Ok"/>
                      </Member>
                    </Value>
                    <Value>
                      <Member>
                        <Identifier name="MessageBox"/>
                        <Identifier name="NoButton"/>
                      </Member>
                    </Value>
                    <Value>
                      <Member>
                        <Identifier name="MessageBox"/>
                        <Identifier name="NoButton"/>
                      </Member>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionUpdate>
              <Member>
                <Identifier name="valor"/>
                <Identifier name="result"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant type="Number" value="0"/>
              </Value>
            </InstructionUpdate>
          </Source>
        </Else>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="valor"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_valorDefectoEmpresa" returns="String">
    <Arguments>
      <Variable name="fN" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="query" type="FLSqlQuery">
          <Value>
            <New>
              <FunctionCall name="FLSqlQuery"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionCall>
        <Member>
          <Identifier name="query"/>
          <FunctionCall name="setTablesList">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="empresa"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <TryCatch>
        <Source>
          <InstructionCall>
            <Member>
              <Identifier name="query"/>
              <FunctionCall name="setForwardOnly">
                <CallArguments>
                  <Value>
                    <Identifier name="true"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
        </Source>
        <Identifier name="e"/>
        <Source/>
      </TryCatch>
      <InstructionCall>
        <Member>
          <Identifier name="query"/>
          <FunctionCall name="setSelect">
            <CallArguments>
              <Value>
                <Identifier name="fN"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="query"/>
          <FunctionCall name="setFrom">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="empresa"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <If>
        <Condition>
          <Value>
            <Member>
              <Identifier name="query"/>
              <FunctionCall name="exec"/>
            </Member>
          </Value>
        </Condition>
        <Source>
          <If>
            <Condition>
              <Value>
                <Member>
                  <Identifier name="query"/>
                  <FunctionCall name="next"/>
                </Member>
              </Value>
            </Condition>
            <Source>
              <InstructionFlow type="RETURN">
                <Value>
                  <Member>
                    <Identifier name="query"/>
                    <FunctionCall name="value">
                      <CallArguments>
                        <Value>
                          <Constant type="Number" value="0"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
        </Source>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Constant delim="&quot;" type="String" value=""/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_ejercicioActual" returns="String">
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <Identifier name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="codEjercicio" type="String"/>
      </DeclarationBlock>
      <TryCatch>
        <Source>
          <DeclarationBlock mode="VAR">
            <Variable name="settingKey" type="String">
              <Expression>
                <Constant delim="&quot;" type="String" value="ejerUsr_"/>
                <OpMath type="PLUS"/>
                <Member>
                  <Identifier name="sys"/>
                  <FunctionCall name="nameUser"/>
                </Member>
              </Expression>
            </Variable>
          </DeclarationBlock>
          <InstructionUpdate>
            <Identifier name="codEjercicio"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="util"/>
                <FunctionCall name="readDBSettingEntry">
                  <CallArguments>
                    <Value>
                      <Identifier name="settingKey"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
        </Source>
        <Identifier name="e"/>
        <Source/>
      </TryCatch>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Identifier name="codEjercicio"/>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionUpdate>
            <Identifier name="codEjercicio"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="iface"/>
                <FunctionCall name="valorDefectoEmpresa">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="codejercicio"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
        </Source>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="codEjercicio"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_cambiarEjercicioActual" returns="Boolean">
    <Arguments>
      <Variable name="codEjercicio" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="ok" type="Boolean">
          <Value>
            <Identifier name="false"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <TryCatch>
        <Source>
          <DeclarationBlock mode="VAR">
            <Variable name="settingKey" type="String">
              <Expression>
                <Constant delim="&quot;" type="String" value="ejerUsr_"/>
                <OpMath type="PLUS"/>
                <Member>
                  <Identifier name="sys"/>
                  <FunctionCall name="nameUser"/>
                </Member>
              </Expression>
            </Variable>
          </DeclarationBlock>
          <InstructionUpdate>
            <Identifier name="ok"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="util"/>
                <FunctionCall name="writeDBSettingEntry">
                  <CallArguments>
                    <Value>
                      <Identifier name="settingKey"/>
                    </Value>
                    <Value>
                      <Identifier name="codEjercicio"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
        </Source>
        <Identifier name="e"/>
        <Source/>
      </TryCatch>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="ok"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_cerosIzquierda" returns="String">
    <Arguments>
      <Variable name="numero" type="String"/>
      <Variable name="totalCifras" type="Number"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="ret" type="String">
          <Value>
            <Member>
              <Identifier name="numero"/>
              <FunctionCall name="toString"/>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="numCeros" type="Number">
          <Expression>
            <Identifier name="totalCifras"/>
            <OpMath type="MINUS"/>
            <Member>
              <Identifier name="ret"/>
              <Identifier name="length"/>
            </Member>
          </Expression>
        </Variable>
      </DeclarationBlock>
      <For>
        <ForCompare>
          <Expression>
            <Identifier name="numCeros"/>
            <Compare type="GT"/>
            <Constant type="Number" value="0"/>
          </Expression>
        </ForCompare>
        <ForIncrement>
          <InlineUpdate type="MINUSMINUS" mode="update-read">
            <Identifier name="numCeros"/>
          </InlineUpdate>
        </ForIncrement>
        <Source>
          <InstructionUpdate>
            <Identifier name="ret"/>
            <OpUpdate type="EQUALS"/>
            <Expression>
              <Constant delim="&quot;" type="String" value="0"/>
              <OpMath type="PLUS"/>
              <Identifier name="ret"/>
            </Expression>
          </InstructionUpdate>
        </Source>
      </For>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="ret"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_espaciosDerecha" returns="String">
    <Arguments>
      <Variable name="texto" type="String"/>
      <Variable name="totalLongitud" type="Number"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="ret" type="String">
          <Value>
            <Member>
              <Identifier name="texto"/>
              <FunctionCall name="toString"/>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="numEspacios" type="Number">
          <Expression>
            <Identifier name="totalLongitud"/>
            <OpMath type="MINUS"/>
            <Member>
              <Identifier name="ret"/>
              <Identifier name="length"/>
            </Member>
          </Expression>
        </Variable>
      </DeclarationBlock>
      <For>
        <ForCompare>
          <Expression>
            <Identifier name="numEspacios"/>
            <Compare type="GT"/>
            <Constant type="Number" value="0"/>
          </Expression>
        </ForCompare>
        <ForIncrement>
          <InlineUpdate type="MINUSMINUS" mode="update-read">
            <Identifier name="numEspacios"/>
          </InlineUpdate>
        </ForIncrement>
        <Source>
          <InstructionUpdate>
            <Identifier name="ret"/>
            <OpUpdate type="PLUSEQUAL"/>
            <Value>
              <Constant delim="&quot;" type="String" value=" "/>
            </Value>
          </InstructionUpdate>
        </Source>
      </For>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="ret"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_valoresIniciales">
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="cursor" type="FLSqlCursor">
          <Value>
            <New>
              <FunctionCall name="FLSqlCursor">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="bancos"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="bancos" type="Array">
          <Value>
            <Constant>
              <CallArguments>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0030"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANESTO"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0112"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANCO URQUIJO"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="2085"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="IBERCAJA"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0093"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANCO DE VALENCIA"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="2059"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CAIXA SABADELL"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="2073"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CAIXA TARRAGONA"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="2038"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CAJA MADRID"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="2091"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CAIXA GALICIA"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0019"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="DEUTSCHE BANK"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0081"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANCO DE SABADELL"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0049"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANCO SANTANDER CENTRAL HISPANO"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0072"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANCO PASTOR"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0075"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANCO POPULAR"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0182"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANCO BILBAO VIZCAYA ARGENTARIA"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0128"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANKINTER"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="2090"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="C.A.M."/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="2100"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="LA CAIXA"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="2077"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANCAJA"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0008"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANCO ATLANTICO"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0061"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANCA MARCH"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0065"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BARCLAYS BANK"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0073"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="PATAGON INTERNET BANK"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0103"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANCO ZARAGOZANO"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="2013"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CAIXA CATALUNYA"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="2043"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CAJA MURCIA"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="2103"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="UNICAJA"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="2105"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CAJA DE CASTILLA LA MANCHA"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0042"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANCO GUIPUZCOANO"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="0138"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BANKOA"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="3056"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CAJA RURAL DE ALBACETE"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
              </CallArguments>
            </Constant>
          </Value>
        </Variable>
      </DeclarationBlock>
      <For>
        <ForInitialize>
          <Variable name="i" type="Number">
            <Value>
              <Constant type="Number" value="0"/>
            </Value>
          </Variable>
        </ForInitialize>
        <ForCompare>
          <Expression>
            <Identifier name="i"/>
            <Compare type="LT"/>
            <Member>
              <Identifier name="bancos"/>
              <Identifier name="length"/>
            </Member>
          </Expression>
        </ForCompare>
        <ForIncrement>
          <InlineUpdate type="PLUSPLUS" mode="read-update">
            <Identifier name="i"/>
          </InlineUpdate>
        </ForIncrement>
        <Source>
          <With>
            <Identifier name="cursor"/>
            <Source>
              <InstructionCall>
                <FunctionCall name="setModeAccess">
                  <CallArguments>
                    <Value>
                      <Member>
                        <Identifier name="cursor"/>
                        <Identifier name="Insert"/>
                      </Member>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </InstructionCall>
              <InstructionCall>
                <FunctionCall name="refreshBuffer"/>
              </InstructionCall>
              <InstructionCall>
                <FunctionCall name="setValueBuffer">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="entidad"/>
                    </Value>
                    <Value>
                      <ArrayMember>
                        <ArrayMember>
                          <Identifier name="bancos"/>
                          <Value>
                            <Identifier name="i"/>
                          </Value>
                        </ArrayMember>
                        <Value>
                          <Constant type="Number" value="0"/>
                        </Value>
                      </ArrayMember>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </InstructionCall>
              <InstructionCall>
                <FunctionCall name="setValueBuffer">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="nombre"/>
                    </Value>
                    <Value>
                      <ArrayMember>
                        <ArrayMember>
                          <Identifier name="bancos"/>
                          <Value>
                            <Identifier name="i"/>
                          </Value>
                        </ArrayMember>
                        <Value>
                          <Constant type="Number" value="1"/>
                        </Value>
                      </ArrayMember>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </InstructionCall>
              <InstructionCall>
                <FunctionCall name="commitBuffer"/>
              </InstructionCall>
            </Source>
          </With>
        </Source>
      </For>
      <Delete>
        <Identifier name="cursor"/>
      </Delete>
      <InstructionUpdate>
        <Identifier name="cursor"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <New>
            <FunctionCall name="FLSqlCursor">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="impuestos"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </New>
        </Value>
      </InstructionUpdate>
      <With>
        <Identifier name="cursor"/>
        <Source>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codimpuesto"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="GEN"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="I.V.A. General"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="iva"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="21"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="recargo"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="5.2"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codimpuesto"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="RED"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="I.V.A. Reducido"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="iva"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="10"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="recargo"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="1.4"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codimpuesto"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="SRED"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="I.V.A. Superreducido"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="iva"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="4"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="recargo"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="0.5"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
        </Source>
      </With>
      <Delete>
        <Identifier name="cursor"/>
      </Delete>
      <InstructionUpdate>
        <Identifier name="cursor"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <New>
            <FunctionCall name="FLSqlCursor">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="paises"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </New>
        </Value>
      </InstructionUpdate>
      <With>
        <Identifier name="cursor"/>
        <Source>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codpais"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="ES"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="nombre"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="ESPA&#209;A"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="bandera"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="/* XPM */\nstatic char * esp_xpm[] = {\n\&quot;30 16 16 1\&quot;,\n\&quot;  c #6C1E04\&quot;,\n\&quot;.&#9;c #B78B19\&quot;,\n\&quot;+&#9;c #E4D31A\&quot;,\n\&quot;@&#9;c #8E4F09\&quot;,\n\&quot;#&#9;c #FBFC05\&quot;,\n\&quot;$&#9;c #EF0406\&quot;,\n\&quot;%&#9;c #F9978D\&quot;,\n\&quot;&amp;&#9;c #FCFA36\&quot;,\n\&quot;*&#9;c #FC595C\&quot;,\n\&quot;=&#9;c #E1B025\&quot;,\n\&quot;-&#9;c #FB3634\&quot;,\n\&quot;;&#9;c #E67559\&quot;,\n\&quot;&gt;&#9;c #A26E13\&quot;,\n\&quot;,&#9;c #FCACAC\&quot;,\n\&quot;'&#9;c #B29F19\&quot;,\n\&quot;)&#9;c #9D0204\&quot;,\n\&quot;,,%%%%%%%%%%%%%%%%%%%%%%%%%%;$\&quot;,\n\&quot;;;**************************$)\&quot;,\n\&quot;--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\&quot;,\n\&quot;--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\&quot;,\n\&quot;&amp;&amp;####&amp;#&amp;++&amp;################+'\&quot;,\&quot;&amp;&amp;####&amp;=.&gt;..&amp;###############+'\&quot;,\n\&quot;&amp;&amp;####@=@@@=&gt;=##############+'\&quot;,\n\&quot;&amp;&amp;####='&gt;;&gt;%=+&amp;#############+'\&quot;,\n\&quot;&amp;&amp;####@@@ @&gt;&gt;.##############+'\&quot;,\n\&quot;&amp;&amp;####.=&gt;@;;#;##############+'\&quot;,\&quot;&amp;&amp;+###&gt;..&gt;..&gt;=##############+'\&quot;,\n\&quot;&amp;&amp;####.+===+.+&amp;#############+.\&quot;,\n\&quot;--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\&quot;,\n\&quot;--$$$$$$$$$$$$$$$$$$$$$$$$$$$)\&quot;,\n\&quot;$$$)$)$)$))$)$)$)$)$)$)$)$)$))\&quot;,\n\&quot;))))))))))))))))))))))))))))))\&quot;};\n"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codiso"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="ES"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
        </Source>
      </With>
      <Delete>
        <Identifier name="cursor"/>
      </Delete>
      <InstructionUpdate>
        <Identifier name="cursor"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <New>
            <FunctionCall name="FLSqlCursor">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="divisas"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </New>
        </Value>
      </InstructionUpdate>
      <With>
        <Identifier name="cursor"/>
        <Source>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="coddivisa"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="EUR"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="EUROS"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="tasaconv"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="1"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codiso"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="978"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="coddivisa"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="USD"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="D&#211;LARES USA"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="tasaconv"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="0.845"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codiso"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="849"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="coddivisa"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="GBP"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="LIBRAS ESTERLINAS"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="tasaconv"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="1.48"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codiso"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="826"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="coddivisa"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="CHF"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="FRANCOS SUIZOS"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="tasaconv"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="0.648"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codiso"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="756"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="coddivisa"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="SEK"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="CORONAS SUECAS"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="tasaconv"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="0.106"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codiso"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="752"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="coddivisa"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="NOK"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="CORONAS NORUEGAS"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="tasaconv"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="0.126"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codiso"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="578"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="coddivisa"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="NZD"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="D&#211;LARES NEOZELANDESES"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="tasaconv"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="0.608"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codiso"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="554"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="coddivisa"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="JPY"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="YENES JAPONESES"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="tasaconv"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="0.007"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codiso"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="392"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="coddivisa"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="DKK"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="CORONAS DANESAS"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="tasaconv"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="0.134"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codiso"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="208"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="coddivisa"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="CAD"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="D&#211;LARES CANADIENSES"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="tasaconv"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="0.735"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codiso"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="124"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="coddivisa"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="AUD"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="D&#211;LARES AUSTRALIANOS"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="tasaconv"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="0.639"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codiso"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="036"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
        </Source>
      </With>
      <Delete>
        <Identifier name="cursor"/>
      </Delete>
      <InstructionUpdate>
        <Identifier name="cursor"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <New>
            <FunctionCall name="FLSqlCursor">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="formaspago"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </New>
        </Value>
      </InstructionUpdate>
      <With>
        <Identifier name="cursor"/>
        <Source>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codpago"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="CONT"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="CONTADO"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
        </Source>
      </With>
      <Delete>
        <Identifier name="cursor"/>
      </Delete>
      <InstructionUpdate>
        <Identifier name="cursor"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <New>
            <FunctionCall name="FLSqlCursor">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="plazos"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </New>
        </Value>
      </InstructionUpdate>
      <With>
        <Identifier name="cursor"/>
        <Source>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codpago"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="CONT"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="dias"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="0"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="aplazado"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="100"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
        </Source>
      </With>
      <Delete>
        <Identifier name="cursor"/>
      </Delete>
      <InstructionUpdate>
        <Identifier name="cursor"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <New>
            <FunctionCall name="FLSqlCursor">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="ejercicios"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </New>
        </Value>
      </InstructionUpdate>
      <DeclarationBlock mode="VAR">
        <Variable name="hoy" type="Date">
          <Value>
            <New>
              <FunctionCall name="Date"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="fechaInicio" type="Date">
          <Value>
            <New>
              <FunctionCall name="Date">
                <CallArguments>
                  <Value>
                    <Member>
                      <Identifier name="hoy"/>
                      <FunctionCall name="getYear"/>
                    </Member>
                  </Value>
                  <Value>
                    <Constant type="Number" value="1"/>
                  </Value>
                  <Value>
                    <Constant type="Number" value="1"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="fechaFin" type="Date">
          <Value>
            <New>
              <FunctionCall name="Date">
                <CallArguments>
                  <Value>
                    <Member>
                      <Identifier name="hoy"/>
                      <FunctionCall name="getYear"/>
                    </Member>
                  </Value>
                  <Value>
                    <Constant type="Number" value="12"/>
                  </Value>
                  <Value>
                    <Constant type="Number" value="31"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="codEjercicio" type="String">
          <Value>
            <Member>
              <Identifier name="hoy"/>
              <FunctionCall name="getYear"/>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <With>
        <Identifier name="cursor"/>
        <Source>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codejercicio"/>
                </Value>
                <Value>
                  <Identifier name="codEjercicio"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="nombre"/>
                </Value>
                <Expression>
                  <Constant delim="&quot;" type="String" value="EJERCICIO "/>
                  <OpMath type="PLUS"/>
                  <Identifier name="codEjercicio"/>
                </Expression>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="fechainicio"/>
                </Value>
                <Value>
                  <Identifier name="fechaInicio"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="fechafin"/>
                </Value>
                <Value>
                  <Identifier name="fechaFin"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="estado"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="ABIERTO"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
        </Source>
      </With>
      <Delete>
        <Identifier name="cursor"/>
      </Delete>
      <InstructionCall>
        <Member>
          <Identifier name="this"/>
          <Identifier name="iface"/>
          <FunctionCall name="cambiarEjercicioActual">
            <CallArguments>
              <Value>
                <Identifier name="codEjercicio"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionUpdate>
        <Identifier name="cursor"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <New>
            <FunctionCall name="FLSqlCursor">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="series"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </New>
        </Value>
      </InstructionUpdate>
      <With>
        <Identifier name="cursor"/>
        <Source>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codserie"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="A"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="SERIE A"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
        </Source>
      </With>
      <Delete>
        <Identifier name="cursor"/>
      </Delete>
      <InstructionUpdate>
        <Identifier name="cursor"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <New>
            <FunctionCall name="FLSqlCursor">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="secuenciasejercicios"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </New>
        </Value>
      </InstructionUpdate>
      <DeclarationBlock mode="VAR">
        <Variable name="idSec" type="Number"/>
      </DeclarationBlock>
      <With>
        <Identifier name="cursor"/>
        <Source>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codserie"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="A"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codejercicio"/>
                </Value>
                <Value>
                  <Identifier name="codEjercicio"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionUpdate>
            <Identifier name="idSec"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <FunctionCall name="valueBuffer">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="id"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Value>
          </InstructionUpdate>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
        </Source>
      </With>
      <Delete>
        <Identifier name="cursor"/>
      </Delete>
      <InstructionUpdate>
        <Identifier name="cursor"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <New>
            <FunctionCall name="FLSqlCursor">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="secuencias"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </New>
        </Value>
      </InstructionUpdate>
      <With>
        <Identifier name="cursor"/>
        <Source>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="id"/>
                </Value>
                <Value>
                  <Identifier name="idSec"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="nombre"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="nfacturacli"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="valor"/>
                </Value>
                <Value>
                  <Constant type="Number" value="1"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="id"/>
                </Value>
                <Value>
                  <Identifier name="idSec"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="nombre"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="nfacturaprov"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="valor"/>
                </Value>
                <Value>
                  <Constant type="Number" value="1"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
        </Source>
      </With>
      <Delete>
        <Identifier name="cursor"/>
      </Delete>
      <InstructionUpdate>
        <Identifier name="cursor"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <New>
            <FunctionCall name="FLSqlCursor">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="empresa"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </New>
        </Value>
      </InstructionUpdate>
      <InstructionCall>
        <Member>
          <Identifier name="cursor"/>
          <FunctionCall name="setActivatedCheckIntegrity">
            <CallArguments>
              <Value>
                <Identifier name="false"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <DeclarationBlock mode="VAR">
        <Variable name="milogo" type="String">
          <Value>
            <Constant delim="&quot;" type="String" value=""/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="/* XPM */\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="static char * logo_xpm[] = {\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;50 16 7 1&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot; &#9;c #1E00FF&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;.&#9;c #FF0000&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;+&#9;c #FF00FF&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;@&#9;c #18FF00&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;#&#9;c #33FFFF&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;$&#9;c #FFFF00&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%&#9;c #FFFFFF&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%$%%%%%%%%%%%%%%%%%%%%%%%%%% %%% %%%%%%%%%%%%%%%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%.%%%%%%%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%.%%%%%%@@@%%%@@@@@%%%   %%    % %%   ++%%%...%%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%%+%%.%%%.%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%.%%%%%$%%%@%%@%%%@%%#%%% %% %%% %% %%% %%+%%%.%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%.%%%%%$%%%@%%@%%%@%%@%%%#%% %%% %% %%% %%+%%%.%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%.%%%%%.%%%$%%@%%%@%%@%%%#%%#%%% %% %%% %% %%%+%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%.....%%.$$%%%%@@@@%%%@@@%%%## % %%     %%%  +%%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%%%%%%%%%%%%%%%%%%@%%%%%%%%%%%%%%%% %%%%%%%%%%%%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%%%%%%%%%%%%%%$$$$%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&quot;,\n"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="milogo"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Value>
          <Constant delim="'" type="String" value="&quot;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&quot;};\n"/>
        </Value>
      </InstructionUpdate>
      <With>
        <Identifier name="cursor"/>
        <Source>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="nombre"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="Empresa por defecto"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="cifnif"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="Z99999999"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="administrador"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="ANONIMO"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="direccion"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="C/ CALLE 999"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codejercicio"/>
                </Value>
                <Value>
                  <Identifier name="codEjercicio"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="coddivisa"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="EUR"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codpago"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="CONT"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codserie"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="A"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codpostal"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="00000"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="ciudad"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="MADRID"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="provincia"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="MADRID"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="telefono"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="96 111 22 33"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="email"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="email@example.com"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codpais"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="ES"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="logo"/>
                </Value>
                <Value>
                  <Identifier name="milogo"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="commitBuffer"/>
          </InstructionCall>
        </Source>
      </With>
      <InstructionCall>
        <Member>
          <Identifier name="this"/>
          <Identifier name="iface"/>
          <FunctionCall name="crearProvinciasEsp"/>
        </Member>
      </InstructionCall>
    </Source>
  </Function>
  <Function name="oficial_crearProvinciasEsp">
    <Arguments>
      <Variable name="codPais" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <Identifier name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="cursor" type="FLSqlCursor">
          <Value>
            <New>
              <FunctionCall name="FLSqlCursor">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="provincias"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="provincias" type="Array">
          <Value>
            <Constant>
              <CallArguments>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ALAVA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="01"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ALBACETE"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="02"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ALICANTE"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="03"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ALMERIA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="04"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ASTURIAS"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="33"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="AVILA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="05"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BADAJOZ"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="06"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BALEARES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="07"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BARCELONA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="08"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="BURGOS"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="09"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CACERES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="10"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CADIZ"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="11"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CANTABRIA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="39"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CASTELLON"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="12"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CIUDAD REAL"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="12"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CIUDAD REAL"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="13"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CORDOBA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="14"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="LA CORU&#209;A"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="15"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="CUENCA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="16"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="GERONA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="17"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="GRANADA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="18"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="GUADALAJARA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="19"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="GUIPUZCOA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="20"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="HUELVA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="21"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="HUESCA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="22"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="JAEN"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="23"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="LEON"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="24"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="LERIDA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="25"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="LUGO"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="27"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="MADRID"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="28"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="MALAGA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="29"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="MURCIA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="30"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="NAVARRA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="31"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ORENSE"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="32"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="PALENCIA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="34"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="LAS PALMAS"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="35"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="PONTEVEDRA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="36"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="LA RIOJA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="26"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="SALAMANCA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="37"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="SEGOVIA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="40"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="SEVILLA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="41"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="SORIA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="42"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="TARRAGONA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="43"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="SANTA CRUZ DE TENERIFE"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="38"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="TERUEL"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="44"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="TOLEDO"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="45"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="VALENCIA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="46"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="VALLADOLID"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="47"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="VIZCAYA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="48"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ZAMORA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="49"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
                <Value>
                  <Constant>
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ZARAGOZA"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="ES"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="50"/>
                      </Value>
                    </CallArguments>
                  </Constant>
                </Value>
              </CallArguments>
            </Constant>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="codPaisProvincia" type="String"/>
      </DeclarationBlock>
      <For>
        <ForInitialize>
          <Variable name="i" type="Number">
            <Value>
              <Constant type="Number" value="0"/>
            </Value>
          </Variable>
        </ForInitialize>
        <ForCompare>
          <Expression>
            <Identifier name="i"/>
            <Compare type="LT"/>
            <Member>
              <Identifier name="provincias"/>
              <Identifier name="length"/>
            </Member>
          </Expression>
        </ForCompare>
        <ForIncrement>
          <InlineUpdate type="PLUSPLUS" mode="read-update">
            <Identifier name="i"/>
          </InlineUpdate>
        </ForIncrement>
        <Source>
          <InstructionUpdate>
            <Identifier name="codPaisProvincia"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Parentheses>
                <OpTernary>
                  <Identifier name="codPais"/>
                  <Identifier name="codPais"/>
                  <ArrayMember>
                    <ArrayMember>
                      <Identifier name="provincias"/>
                      <Value>
                        <Identifier name="i"/>
                      </Value>
                    </ArrayMember>
                    <Value>
                      <Constant type="Number" value="1"/>
                    </Value>
                  </ArrayMember>
                </OpTernary>
              </Parentheses>
            </Value>
          </InstructionUpdate>
          <If>
            <Condition>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="sqlSelect">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="provincias"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="idprovincia"/>
                      </Value>
                      <Expression>
                        <Constant delim="&quot;" type="String" value="codpais = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="codPaisProvincia"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="' AND (UPPER(provincia) = '"/>
                        <OpMath type="PLUS"/>
                        <ArrayMember>
                          <ArrayMember>
                            <Identifier name="provincias"/>
                            <Value>
                              <Identifier name="i"/>
                            </Value>
                          </ArrayMember>
                          <Value>
                            <Constant type="Number" value="0"/>
                          </Value>
                        </ArrayMember>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="' OR codigo = '"/>
                        <OpMath type="PLUS"/>
                        <ArrayMember>
                          <ArrayMember>
                            <Identifier name="provincias"/>
                            <Value>
                              <Identifier name="i"/>
                            </Value>
                          </ArrayMember>
                          <Value>
                            <Constant type="Number" value="2"/>
                          </Value>
                        </ArrayMember>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="')"/>
                      </Expression>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </Condition>
            <Source>
              <InstructionFlow type="CONTINUE"/>
            </Source>
          </If>
          <With>
            <Identifier name="cursor"/>
            <Source>
              <InstructionCall>
                <FunctionCall name="setModeAccess">
                  <CallArguments>
                    <Value>
                      <Member>
                        <Identifier name="cursor"/>
                        <Identifier name="Insert"/>
                      </Member>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </InstructionCall>
              <InstructionCall>
                <FunctionCall name="refreshBuffer"/>
              </InstructionCall>
              <InstructionCall>
                <FunctionCall name="setValueBuffer">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="provincia"/>
                    </Value>
                    <Value>
                      <ArrayMember>
                        <ArrayMember>
                          <Identifier name="provincias"/>
                          <Value>
                            <Identifier name="i"/>
                          </Value>
                        </ArrayMember>
                        <Value>
                          <Constant type="Number" value="0"/>
                        </Value>
                      </ArrayMember>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </InstructionCall>
              <InstructionCall>
                <FunctionCall name="setValueBuffer">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="codpais"/>
                    </Value>
                    <Value>
                      <Identifier name="codPaisProvincia"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </InstructionCall>
              <InstructionCall>
                <FunctionCall name="setValueBuffer">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="codigo"/>
                    </Value>
                    <Value>
                      <ArrayMember>
                        <ArrayMember>
                          <Identifier name="provincias"/>
                          <Value>
                            <Identifier name="i"/>
                          </Value>
                        </ArrayMember>
                        <Value>
                          <Constant type="Number" value="2"/>
                        </Value>
                      </ArrayMember>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </InstructionCall>
              <InstructionCall>
                <FunctionCall name="commitBuffer"/>
              </InstructionCall>
            </Source>
          </With>
        </Source>
      </For>
    </Source>
  </Function>
  <Function name="oficial_valorQuery" returns="String">
    <Arguments>
      <Variable name="tablas" type="String"/>
      <Variable name="select" type="String"/>
      <Variable name="from" type="String"/>
      <Variable name="where" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="qry" type="FLSqlQuery">
          <Value>
            <New>
              <FunctionCall name="FLSqlQuery"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <TryCatch>
        <Source>
          <InstructionCall>
            <Member>
              <Identifier name="qry"/>
              <FunctionCall name="setForwardOnly">
                <CallArguments>
                  <Value>
                    <Identifier name="true"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
        </Source>
        <Identifier name="e"/>
        <Source/>
      </TryCatch>
      <InstructionCall>
        <Member>
          <Identifier name="qry"/>
          <FunctionCall name="setTablesList">
            <CallArguments>
              <Value>
                <Identifier name="tablas"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qry"/>
          <FunctionCall name="setSelect">
            <CallArguments>
              <Value>
                <Identifier name="select"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qry"/>
          <FunctionCall name="setFrom">
            <CallArguments>
              <Value>
                <Identifier name="from"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qry"/>
          <FunctionCall name="setWhere">
            <CallArguments>
              <Value>
                <Identifier name="where"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qry"/>
          <FunctionCall name="exec"/>
        </Member>
      </InstructionCall>
      <If>
        <Condition>
          <Value>
            <Member>
              <Identifier name="qry"/>
              <FunctionCall name="next"/>
            </Member>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="qry"/>
                <FunctionCall name="value">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="0"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
        <Else>
          <Source>
            <InstructionFlow type="RETURN">
              <Value>
                <Constant delim="&quot;" type="String" value=""/>
              </Value>
            </InstructionFlow>
          </Source>
        </Else>
      </If>
    </Source>
  </Function>
  <Function name="oficial_crearSubcuenta" returns="Number">
    <Arguments>
      <Variable name="codSubcuenta" type="String"/>
      <Variable name="descripcion" type="String"/>
      <Variable name="idCuentaEsp" type="String"/>
      <Variable name="codEjercicio" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="datosEmpresa" type="Array"/>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Identifier name="codEjercicio"/>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionUpdate>
            <ArrayMember>
              <Identifier name="datosEmpresa"/>
              <Value>
                <Constant delim="&quot;" type="String" value="codejercicio"/>
              </Value>
            </ArrayMember>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="iface"/>
                <FunctionCall name="ejercicioActual"/>
              </Member>
            </Value>
          </InstructionUpdate>
        </Source>
        <Else>
          <Source>
            <InstructionUpdate>
              <ArrayMember>
                <Identifier name="datosEmpresa"/>
                <Value>
                  <Constant delim="&quot;" type="String" value="codejercicio"/>
                </Value>
              </ArrayMember>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Identifier name="codEjercicio"/>
              </Value>
            </InstructionUpdate>
          </Source>
        </Else>
      </If>
      <InstructionUpdate>
        <ArrayMember>
          <Identifier name="datosEmpresa"/>
          <Value>
            <Constant delim="&quot;" type="String" value="coddivisa"/>
          </Value>
        </ArrayMember>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Member>
            <Identifier name="this"/>
            <Identifier name="iface"/>
            <FunctionCall name="valorDefectoEmpresa">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="coddivisa"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Member>
        </Value>
      </InstructionUpdate>
      <DeclarationBlock mode="VAR">
        <Variable name="idSubcuenta" type="String">
          <Value>
            <Member>
              <Identifier name="util"/>
              <FunctionCall name="sqlSelect">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="co_subcuentas"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="idsubcuenta"/>
                  </Value>
                  <Expression>
                    <Constant delim="&quot;" type="String" value="codsubcuenta = '"/>
                    <OpMath type="PLUS"/>
                    <Identifier name="codSubcuenta"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="' AND codejercicio = '"/>
                    <OpMath type="PLUS"/>
                    <Member>
                      <Identifier name="datosEmpresa"/>
                      <Identifier name="codejercicio"/>
                    </Member>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="'"/>
                  </Expression>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <Identifier name="idSubcuenta"/>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="idSubcuenta"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="codCuenta3" type="String">
          <Value>
            <Member>
              <Identifier name="codSubcuenta"/>
              <FunctionCall name="left">
                <CallArguments>
                  <Value>
                    <Constant type="Number" value="3"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="codCuenta4" type="String">
          <Value>
            <Member>
              <Identifier name="codSubcuenta"/>
              <FunctionCall name="left">
                <CallArguments>
                  <Value>
                    <Constant type="Number" value="4"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="datosCuenta" type="Array">
          <Value>
            <Member>
              <Identifier name="this"/>
              <Identifier name="iface"/>
              <FunctionCall name="ejecutarQry">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="co_cuentas"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="codcuenta,idcuenta"/>
                  </Value>
                  <Expression>
                    <Constant delim="&quot;" type="String" value="idcuentaesp = '"/>
                    <OpMath type="PLUS"/>
                    <Identifier name="idCuentaEsp"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="'"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value=" AND codcuenta = '"/>
                    <OpMath type="PLUS"/>
                    <Identifier name="codCuenta4"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="'"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value=" AND codejercicio = '"/>
                    <OpMath type="PLUS"/>
                    <Member>
                      <Identifier name="datosEmpresa"/>
                      <Identifier name="codejercicio"/>
                    </Member>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="' ORDER BY codcuenta"/>
                  </Expression>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Expression>
            <Member>
              <Identifier name="datosCuenta"/>
              <Identifier name="result"/>
            </Member>
            <Compare type="EQ"/>
            <OpUnary type="MINUS">
              <Constant type="Number" value="1"/>
            </OpUnary>
          </Expression>
        </Condition>
        <Source>
          <InstructionUpdate>
            <Identifier name="datosCuenta"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="iface"/>
                <FunctionCall name="ejecutarQry">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="co_cuentas"/>
                    </Value>
                    <Value>
                      <Constant delim="&quot;" type="String" value="codcuenta,idcuenta"/>
                    </Value>
                    <Expression>
                      <Constant delim="&quot;" type="String" value="idcuentaesp = '"/>
                      <OpMath type="PLUS"/>
                      <Identifier name="idCuentaEsp"/>
                      <OpMath type="PLUS"/>
                      <Constant delim="&quot;" type="String" value="'"/>
                      <OpMath type="PLUS"/>
                      <Constant delim="&quot;" type="String" value=" AND codcuenta = '"/>
                      <OpMath type="PLUS"/>
                      <Identifier name="codCuenta3"/>
                      <OpMath type="PLUS"/>
                      <Constant delim="&quot;" type="String" value="'"/>
                      <OpMath type="PLUS"/>
                      <Constant delim="&quot;" type="String" value=" AND codejercicio = '"/>
                      <OpMath type="PLUS"/>
                      <Member>
                        <Identifier name="datosEmpresa"/>
                        <Identifier name="codejercicio"/>
                      </Member>
                      <OpMath type="PLUS"/>
                      <Constant delim="&quot;" type="String" value="' ORDER BY codcuenta"/>
                    </Expression>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
          <If>
            <Condition>
              <Expression>
                <Member>
                  <Identifier name="datosCuenta"/>
                  <Identifier name="result"/>
                </Member>
                <Compare type="EQ"/>
                <OpUnary type="MINUS">
                  <Constant type="Number" value="1"/>
                </OpUnary>
              </Expression>
            </Condition>
            <Source>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="true"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="curSubcuenta" type="FLSqlCursor">
          <Value>
            <New>
              <FunctionCall name="FLSqlCursor">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="co_subcuentas"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <With>
        <Identifier name="curSubcuenta"/>
        <Source>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="curSubcuenta"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codsubcuenta"/>
                </Value>
                <Value>
                  <Identifier name="codSubcuenta"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="descripcion"/>
                </Value>
                <Value>
                  <Identifier name="descripcion"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="idcuenta"/>
                </Value>
                <Value>
                  <Member>
                    <Identifier name="datosCuenta"/>
                    <Identifier name="idcuenta"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codcuenta"/>
                </Value>
                <Value>
                  <Member>
                    <Identifier name="datosCuenta"/>
                    <Identifier name="codcuenta"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="coddivisa"/>
                </Value>
                <Value>
                  <Member>
                    <Identifier name="datosEmpresa"/>
                    <Identifier name="coddivisa"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codejercicio"/>
                </Value>
                <Value>
                  <Member>
                    <Identifier name="datosEmpresa"/>
                    <Identifier name="codejercicio"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
        </Source>
      </With>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="curSubcuenta"/>
                <FunctionCall name="commitBuffer"/>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Member>
            <Identifier name="curSubcuenta"/>
            <FunctionCall name="valueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="idsubcuenta"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Member>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_borrarSubcuenta" returns="Boolean">
    <Arguments>
      <Variable name="idSubcuenta" type="Number"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="util"/>
                <FunctionCall name="sqlSelect">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="co_partidas"/>
                    </Value>
                    <Value>
                      <Constant delim="&quot;" type="String" value="idpartida"/>
                    </Value>
                    <Expression>
                      <Constant delim="&quot;" type="String" value="idsubcuenta = "/>
                      <OpMath type="PLUS"/>
                      <Identifier name="idSubcuenta"/>
                    </Expression>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <DeclarationBlock mode="VAR">
            <Variable name="curSubcuenta" type="FLSqlCursor">
              <Value>
                <New>
                  <FunctionCall name="FLSqlCursor">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="co_subcuentas"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </New>
              </Value>
            </Variable>
          </DeclarationBlock>
          <InstructionCall>
            <Member>
              <Identifier name="curSubcuenta"/>
              <FunctionCall name="select">
                <CallArguments>
                  <Expression>
                    <Constant delim="&quot;" type="String" value="idsubcuenta = "/>
                    <OpMath type="PLUS"/>
                    <Identifier name="idSubcuenta"/>
                  </Expression>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="curSubcuenta"/>
              <FunctionCall name="first"/>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="curSubcuenta"/>
              <FunctionCall name="setModeAccess">
                <CallArguments>
                  <Value>
                    <Member>
                      <Identifier name="curSubcuenta"/>
                      <Identifier name="Del"/>
                    </Member>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="curSubcuenta"/>
              <FunctionCall name="refreshBuffer"/>
            </Member>
          </InstructionCall>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="curSubcuenta"/>
                    <FunctionCall name="commitBuffer"/>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="false"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
        </Source>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_datosCtaCliente" returns="Array">
    <Arguments>
      <Variable name="codCliente" type="String"/>
      <Variable name="valoresDefecto" type="Array"/>
    </Arguments>
    <Source>
      <If>
        <Condition>
          <Expression>
            <OpUnary type="LNOT">
              <Identifier name="codCliente"/>
            </OpUnary>
            <Compare type="LOR"/>
            <Identifier name="codCliente"/>
            <Compare type="EQ"/>
            <Constant delim="&quot;" type="String" value=""/>
          </Expression>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="flfacturac"/>
                <Identifier name="iface"/>
                <FunctionCall name="pub_datosCtaEspecial">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="CLIENT"/>
                    </Value>
                    <Value>
                      <Member>
                        <Identifier name="valoresDefecto"/>
                        <Identifier name="codejercicio"/>
                      </Member>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="ctaCliente" type="Array">
          <Value>
            <Constant>
              <list_constant arg00="LBRACKET" arg01="callargs" arg02="RBRACKET"/>
            </Constant>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionUpdate>
        <ArrayMember>
          <Identifier name="ctaCliente"/>
          <Value>
            <Constant delim="&quot;" type="String" value="codsubcuenta"/>
          </Value>
        </ArrayMember>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Constant delim="&quot;" type="String" value=""/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <ArrayMember>
          <Identifier name="ctaCliente"/>
          <Value>
            <Constant delim="&quot;" type="String" value="idsubcuenta"/>
          </Value>
        </ArrayMember>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Constant delim="&quot;" type="String" value=""/>
        </Value>
      </InstructionUpdate>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="codCliente"/>
                <FunctionCall name="toString"/>
                <FunctionCall name="isEmpty"/>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <DeclarationBlock mode="VAR">
            <Variable name="qrySubcuenta" type="FLSqlQuery">
              <Value>
                <New>
                  <FunctionCall name="FLSqlQuery"/>
                </New>
              </Value>
            </Variable>
          </DeclarationBlock>
          <TryCatch>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="qrySubcuenta"/>
                  <FunctionCall name="setForwardOnly">
                    <CallArguments>
                      <Value>
                        <Identifier name="true"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
            </Source>
            <Identifier name="e"/>
            <Source/>
          </TryCatch>
          <InstructionCall>
            <Member>
              <Identifier name="qrySubcuenta"/>
              <FunctionCall name="setTablesList">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="co_subcuentascli"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="qrySubcuenta"/>
              <FunctionCall name="setSelect">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="idsubcuenta, codsubcuenta"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="qrySubcuenta"/>
              <FunctionCall name="setFrom">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="co_subcuentascli"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="qrySubcuenta"/>
              <FunctionCall name="setWhere">
                <CallArguments>
                  <Expression>
                    <Constant delim="&quot;" type="String" value="codcliente = '"/>
                    <OpMath type="PLUS"/>
                    <Identifier name="codCliente"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="' AND codejercicio = '"/>
                    <OpMath type="PLUS"/>
                    <Member>
                      <Identifier name="valoresDefecto"/>
                      <Identifier name="codejercicio"/>
                    </Member>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="'"/>
                  </Expression>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="qrySubcuenta"/>
                    <FunctionCall name="exec"/>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionUpdate>
                <Member>
                  <Identifier name="ctaCliente"/>
                  <Identifier name="error"/>
                </Member>
                <OpUpdate type="EQUALS"/>
                <Value>
                  <Constant type="Number" value="2"/>
                </Value>
              </InstructionUpdate>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="ctaCliente"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="qrySubcuenta"/>
                    <FunctionCall name="first"/>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="MessageBox"/>
                  <FunctionCall name="critical">
                    <CallArguments>
                      <Expression>
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="translate">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="scripts"/>
                              </Value>
                              <Value>
                                <Constant delim="&quot;" type="String" value="No hay ninguna subcuenta asociada al cliente "/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                        <OpMath type="PLUS"/>
                        <Identifier name="codCliente"/>
                        <OpMath type="PLUS"/>
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="translate">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="scripts"/>
                              </Value>
                              <Value>
                                <Constant delim="&quot;" type="String" value=" para el ejercicio "/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                        <OpMath type="PLUS"/>
                        <Member>
                          <Identifier name="valoresDefecto"/>
                          <Identifier name="codejercicio"/>
                        </Member>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value=".\n"/>
                        <OpMath type="PLUS"/>
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="translate">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="scripts"/>
                              </Value>
                              <Value>
                                <Constant delim="&quot;" type="String" value="Debe crear la subcuenta en el formulario de clientes."/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Expression>
                      <Value>
                        <Member>
                          <Identifier name="MessageBox"/>
                          <Identifier name="Ok"/>
                        </Member>
                      </Value>
                      <Value>
                        <Member>
                          <Identifier name="MessageBox"/>
                          <Identifier name="NoButton"/>
                        </Member>
                      </Value>
                      <Value>
                        <Member>
                          <Identifier name="MessageBox"/>
                          <Identifier name="NoButton"/>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionUpdate>
                <Member>
                  <Identifier name="ctaCliente"/>
                  <Identifier name="error"/>
                </Member>
                <OpUpdate type="EQUALS"/>
                <Value>
                  <Constant type="Number" value="1"/>
                </Value>
              </InstructionUpdate>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="ctaCliente"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
          <InstructionUpdate>
            <Member>
              <Identifier name="ctaCliente"/>
              <Identifier name="idsubcuenta"/>
            </Member>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="qrySubcuenta"/>
                <FunctionCall name="value">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="0"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
          <InstructionUpdate>
            <Member>
              <Identifier name="ctaCliente"/>
              <Identifier name="codsubcuenta"/>
            </Member>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="qrySubcuenta"/>
                <FunctionCall name="value">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="1"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
        </Source>
      </If>
      <InstructionUpdate>
        <Member>
          <Identifier name="ctaCliente"/>
          <Identifier name="error"/>
        </Member>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Constant type="Number" value="0"/>
        </Value>
      </InstructionUpdate>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="ctaCliente"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_datosCtaProveedor" returns="Array">
    <Arguments>
      <Variable name="codProveedor" type="String"/>
      <Variable name="valoresDefecto" type="Array"/>
    </Arguments>
    <Source>
      <If>
        <Condition>
          <Expression>
            <OpUnary type="LNOT">
              <Identifier name="codProveedor"/>
            </OpUnary>
            <Compare type="LOR"/>
            <Identifier name="codProveedor"/>
            <Compare type="EQ"/>
            <Constant delim="&quot;" type="String" value=""/>
          </Expression>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Member>
                <Identifier name="flfacturac"/>
                <Identifier name="iface"/>
                <FunctionCall name="pub_datosCtaEspecial">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="PROVEE"/>
                    </Value>
                    <Value>
                      <Member>
                        <Identifier name="valoresDefecto"/>
                        <Identifier name="codejercicio"/>
                      </Member>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="ctaProveedor" type="Array">
          <Value>
            <Constant>
              <list_constant arg00="LBRACKET" arg01="callargs" arg02="RBRACKET"/>
            </Constant>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionUpdate>
        <ArrayMember>
          <Identifier name="ctaProveedor"/>
          <Value>
            <Constant delim="&quot;" type="String" value="codsubcuenta"/>
          </Value>
        </ArrayMember>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Constant delim="&quot;" type="String" value=""/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <ArrayMember>
          <Identifier name="ctaProveedor"/>
          <Value>
            <Constant delim="&quot;" type="String" value="idsubcuenta"/>
          </Value>
        </ArrayMember>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Constant delim="&quot;" type="String" value=""/>
        </Value>
      </InstructionUpdate>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="codProveedor"/>
                <FunctionCall name="toString"/>
                <FunctionCall name="isEmpty"/>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <DeclarationBlock mode="VAR">
            <Variable name="qrySubcuenta" type="FLSqlQuery">
              <Value>
                <New>
                  <FunctionCall name="FLSqlQuery"/>
                </New>
              </Value>
            </Variable>
          </DeclarationBlock>
          <InstructionCall>
            <Member>
              <Identifier name="qrySubcuenta"/>
              <FunctionCall name="setTablesList">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="co_subcuentasprov"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="qrySubcuenta"/>
              <FunctionCall name="setSelect">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="idsubcuenta, codsubcuenta"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="qrySubcuenta"/>
              <FunctionCall name="setFrom">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="co_subcuentasprov"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="qrySubcuenta"/>
              <FunctionCall name="setWhere">
                <CallArguments>
                  <Expression>
                    <Constant delim="&quot;" type="String" value="codproveedor = '"/>
                    <OpMath type="PLUS"/>
                    <Identifier name="codProveedor"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="' AND codejercicio = '"/>
                    <OpMath type="PLUS"/>
                    <Member>
                      <Identifier name="valoresDefecto"/>
                      <Identifier name="codejercicio"/>
                    </Member>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="'"/>
                  </Expression>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="qrySubcuenta"/>
                    <FunctionCall name="exec"/>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionUpdate>
                <Member>
                  <Identifier name="ctaProveedor"/>
                  <Identifier name="error"/>
                </Member>
                <OpUpdate type="EQUALS"/>
                <Value>
                  <Constant type="Number" value="1"/>
                </Value>
              </InstructionUpdate>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="ctaProveedor"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="qrySubcuenta"/>
                    <FunctionCall name="first"/>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="MessageBox"/>
                  <FunctionCall name="critical">
                    <CallArguments>
                      <Expression>
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="translate">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="scripts"/>
                              </Value>
                              <Value>
                                <Constant delim="&quot;" type="String" value="No hay ninguna subcuenta asociada al proveedor "/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                        <OpMath type="PLUS"/>
                        <Identifier name="codProveedor"/>
                        <OpMath type="PLUS"/>
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="translate">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="scripts"/>
                              </Value>
                              <Value>
                                <Constant delim="&quot;" type="String" value=" para el ejercicio "/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                        <OpMath type="PLUS"/>
                        <Member>
                          <Identifier name="valoresDefecto"/>
                          <Identifier name="codejercicio"/>
                        </Member>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value=".\n"/>
                        <OpMath type="PLUS"/>
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="translate">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="scripts"/>
                              </Value>
                              <Value>
                                <Constant delim="&quot;" type="String" value="Debe crear la subcuenta en el formulario de proveedores."/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Expression>
                      <Value>
                        <Member>
                          <Identifier name="MessageBox"/>
                          <Identifier name="Ok"/>
                        </Member>
                      </Value>
                      <Value>
                        <Member>
                          <Identifier name="MessageBox"/>
                          <Identifier name="NoButton"/>
                        </Member>
                      </Value>
                      <Value>
                        <Member>
                          <Identifier name="MessageBox"/>
                          <Identifier name="NoButton"/>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionUpdate>
                <Member>
                  <Identifier name="ctaProveedor"/>
                  <Identifier name="error"/>
                </Member>
                <OpUpdate type="EQUALS"/>
                <Value>
                  <Constant type="Number" value="1"/>
                </Value>
              </InstructionUpdate>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="ctaProveedor"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
          <InstructionUpdate>
            <Member>
              <Identifier name="ctaProveedor"/>
              <Identifier name="idsubcuenta"/>
            </Member>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="qrySubcuenta"/>
                <FunctionCall name="value">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="0"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
          <InstructionUpdate>
            <Member>
              <Identifier name="ctaProveedor"/>
              <Identifier name="codsubcuenta"/>
            </Member>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="qrySubcuenta"/>
                <FunctionCall name="value">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="1"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
        </Source>
      </If>
      <InstructionUpdate>
        <Member>
          <Identifier name="ctaProveedor"/>
          <Identifier name="error"/>
        </Member>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Constant type="Number" value="0"/>
        </Value>
      </InstructionUpdate>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="ctaProveedor"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_calcularIntervalo" returns="Array">
    <Arguments>
      <Variable name="codIntervalo" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="intervalo" type="Array">
          <Value>
            <Constant>
              <list_constant arg00="LBRACKET" arg01="callargs" arg02="RBRACKET"/>
            </Constant>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="textoFun" type="String">
          <Value>
            <Member>
              <Identifier name="util"/>
              <FunctionCall name="sqlSelect">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="intervalos"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="funcionintervalo"/>
                  </Value>
                  <Expression>
                    <Constant delim="&quot;" type="String" value="codigo = '"/>
                    <OpMath type="PLUS"/>
                    <Identifier name="codIntervalo"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="'"/>
                  </Expression>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="funcionVal">
          <Value>
            <New>
              <FunctionCall name="Function">
                <CallArguments>
                  <Value>
                    <Identifier name="textoFun"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="resultado">
          <Value>
            <FunctionCall name="funcionVal"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <Identifier name="resultado"/>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="resultado"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <InstructionUpdate>
        <ArrayMember>
          <Identifier name="intervalo"/>
          <Value>
            <Constant delim="&quot;" type="String" value="desde"/>
          </Value>
        </ArrayMember>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Identifier name="false"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <ArrayMember>
          <Identifier name="intervalo"/>
          <Value>
            <Constant delim="&quot;" type="String" value="hasta"/>
          </Value>
        </ArrayMember>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Identifier name="false"/>
        </Value>
      </InstructionUpdate>
      <DeclarationBlock mode="VAR">
        <Variable name="fechaDesde" type="Date">
          <Value>
            <New>
              <FunctionCall name="Date"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="fechaHasta" type="Date">
          <Value>
            <New>
              <FunctionCall name="Date"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="mes" type="Number"/>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="anio" type="Number"/>
      </DeclarationBlock>
      <Switch>
        <Condition>
          <Value>
            <Identifier name="codIntervalo"/>
          </Value>
        </Condition>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="000001"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="desde"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Identifier name="fechaDesde"/>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="hasta"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Identifier name="fechaHasta"/>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="000002"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="desde"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="addDays">
                    <CallArguments>
                      <Value>
                        <Identifier name="fechaDesde"/>
                      </Value>
                      <Value>
                        <OpUnary type="MINUS">
                          <Constant type="Number" value="1"/>
                        </OpUnary>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="hasta"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="addDays">
                    <CallArguments>
                      <Value>
                        <Identifier name="fechaHasta"/>
                      </Value>
                      <Value>
                        <OpUnary type="MINUS">
                          <Constant type="Number" value="1"/>
                        </OpUnary>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="000003"/>
          </Value>
          <Source>
            <DeclarationBlock mode="VAR">
              <Variable name="dias" type="Number">
                <Expression>
                  <Member>
                    <Identifier name="fechaDesde"/>
                    <FunctionCall name="getDay"/>
                  </Member>
                  <OpMath type="MINUS"/>
                  <Constant type="Number" value="1"/>
                </Expression>
              </Variable>
            </DeclarationBlock>
            <InstructionUpdate>
              <Identifier name="dias"/>
              <OpUpdate type="EQUALS"/>
              <Expression>
                <Identifier name="dias"/>
                <OpMath type="TIMES"/>
                <OpUnary type="MINUS">
                  <Constant type="Number" value="1"/>
                </OpUnary>
              </Expression>
            </InstructionUpdate>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="desde"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="addDays">
                    <CallArguments>
                      <Value>
                        <Identifier name="fechaDesde"/>
                      </Value>
                      <Value>
                        <Identifier name="dias"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="hasta"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="addDays">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="intervalo"/>
                          <Identifier name="desde"/>
                        </Member>
                      </Value>
                      <Value>
                        <Constant type="Number" value="6"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="000004"/>
          </Value>
          <Source>
            <DeclarationBlock mode="VAR">
              <Variable name="dias" type="Number">
                <Expression>
                  <Member>
                    <Identifier name="fechaHasta"/>
                    <FunctionCall name="getDay"/>
                  </Member>
                  <OpMath type="MINUS"/>
                  <Constant type="Number" value="1"/>
                </Expression>
              </Variable>
            </DeclarationBlock>
            <InstructionUpdate>
              <Identifier name="dias"/>
              <OpUpdate type="EQUALS"/>
              <Expression>
                <Identifier name="dias"/>
                <OpMath type="TIMES"/>
                <OpUnary type="MINUS">
                  <Constant type="Number" value="1"/>
                </OpUnary>
              </Expression>
            </InstructionUpdate>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="hasta"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="addDays">
                    <CallArguments>
                      <Value>
                        <Identifier name="fechaHasta"/>
                      </Value>
                      <Expression>
                        <Identifier name="dias"/>
                        <OpMath type="MINUS"/>
                        <Constant type="Number" value="1"/>
                      </Expression>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="desde"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="addDays">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="intervalo"/>
                          <Identifier name="hasta"/>
                        </Member>
                      </Value>
                      <Value>
                        <OpUnary type="MINUS">
                          <Constant type="Number" value="6"/>
                        </OpUnary>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="000005"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="mes"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="fechaDesde"/>
                  <FunctionCall name="getMonth"/>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionCall>
              <Member>
                <Identifier name="fechaDesde"/>
                <FunctionCall name="setDate">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="1"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="desde"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Identifier name="fechaDesde"/>
              </Value>
            </InstructionUpdate>
            <InstructionCall>
              <Member>
                <Identifier name="fechaHasta"/>
                <FunctionCall name="setDate">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="1"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionUpdate>
              <Identifier name="fechaHasta"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="addMonths">
                    <CallArguments>
                      <Value>
                        <Identifier name="fechaHasta"/>
                      </Value>
                      <Value>
                        <Constant type="Number" value="1"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <Instruction/>
            <InstructionUpdate>
              <Identifier name="fechaHasta"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="addDays">
                    <CallArguments>
                      <Value>
                        <Identifier name="fechaHasta"/>
                      </Value>
                      <Value>
                        <OpUnary type="MINUS">
                          <Constant type="Number" value="1"/>
                        </OpUnary>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="hasta"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Identifier name="fechaHasta"/>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="000006"/>
          </Value>
          <Source>
            <InstructionCall>
              <Member>
                <Identifier name="fechaDesde"/>
                <FunctionCall name="setDate">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="1"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionUpdate>
              <Identifier name="fechaDesde"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="addMonths">
                    <CallArguments>
                      <Value>
                        <Identifier name="fechaDesde"/>
                      </Value>
                      <Value>
                        <OpUnary type="MINUS">
                          <Constant type="Number" value="1"/>
                        </OpUnary>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="desde"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Identifier name="fechaDesde"/>
              </Value>
            </InstructionUpdate>
            <InstructionCall>
              <Member>
                <Identifier name="fechaHasta"/>
                <FunctionCall name="setDate">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="1"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionUpdate>
              <Identifier name="fechaHasta"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="addDays">
                    <CallArguments>
                      <Value>
                        <Identifier name="fechaHasta"/>
                      </Value>
                      <Value>
                        <OpUnary type="MINUS">
                          <Constant type="Number" value="1"/>
                        </OpUnary>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="hasta"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Identifier name="fechaHasta"/>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="000007"/>
          </Value>
          <Source>
            <InstructionCall>
              <Member>
                <Identifier name="fechaDesde"/>
                <FunctionCall name="setDate">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="1"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="fechaDesde"/>
                <FunctionCall name="setMonth">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="1"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="desde"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Identifier name="fechaDesde"/>
              </Value>
            </InstructionUpdate>
            <InstructionCall>
              <Member>
                <Identifier name="fechaHasta"/>
                <FunctionCall name="setMonth">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="12"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="fechaHasta"/>
                <FunctionCall name="setDate">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="31"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="hasta"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Identifier name="fechaHasta"/>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="000008"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="anio"/>
              <OpUpdate type="EQUALS"/>
              <Expression>
                <Member>
                  <Identifier name="fechaDesde"/>
                  <FunctionCall name="getYear"/>
                </Member>
                <OpMath type="MINUS"/>
                <Constant type="Number" value="1"/>
              </Expression>
            </InstructionUpdate>
            <InstructionCall>
              <Member>
                <Identifier name="fechaDesde"/>
                <FunctionCall name="setDate">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="1"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="fechaDesde"/>
                <FunctionCall name="setMonth">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="1"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="fechaDesde"/>
                <FunctionCall name="setYear">
                  <CallArguments>
                    <Value>
                      <Identifier name="anio"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="desde"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Identifier name="fechaDesde"/>
              </Value>
            </InstructionUpdate>
            <InstructionCall>
              <Member>
                <Identifier name="fechaHasta"/>
                <FunctionCall name="setMonth">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="12"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="fechaHasta"/>
                <FunctionCall name="setDate">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="31"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="fechaHasta"/>
                <FunctionCall name="setYear">
                  <CallArguments>
                    <Value>
                      <Identifier name="anio"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="hasta"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Identifier name="fechaHasta"/>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="000009"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="desde"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant delim="&quot;" type="String" value="1970-01-01"/>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="hasta"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant delim="&quot;" type="String" value="3000-01-01"/>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="000010"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="desde"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant delim="&quot;" type="String" value="1970-01-01"/>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Member>
                <Identifier name="intervalo"/>
                <Identifier name="hasta"/>
              </Member>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Identifier name="fechaHasta"/>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
      </Switch>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="intervalo"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_crearSubcuentaCli" returns="Boolean">
    <Arguments>
      <Variable name="codSubcuenta" type="String"/>
      <Variable name="idSubcuenta" type="Number"/>
      <Variable name="codCliente" type="String"/>
      <Variable name="codEjercicio" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="curSubcuentaCli" type="FLSqlCursor">
          <Value>
            <New>
              <FunctionCall name="FLSqlCursor">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="co_subcuentascli"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <With>
        <Identifier name="curSubcuentaCli"/>
        <Source>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="curSubcuentaCli"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codsubcuenta"/>
                </Value>
                <Value>
                  <Identifier name="codSubcuenta"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="idSubcuenta"/>
                </Value>
                <Value>
                  <Identifier name="idSubcuenta"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codcliente"/>
                </Value>
                <Value>
                  <Identifier name="codCliente"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codejercicio"/>
                </Value>
                <Value>
                  <Identifier name="codEjercicio"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
        </Source>
      </With>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="curSubcuentaCli"/>
                <FunctionCall name="commitBuffer"/>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_crearSubcuentaProv" returns="Boolean">
    <Arguments>
      <Variable name="codSubcuenta" type="String"/>
      <Variable name="idSubcuenta" type="Number"/>
      <Variable name="codProveedor" type="String"/>
      <Variable name="codEjercicio" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="curSubcuentaProv" type="FLSqlCursor">
          <Value>
            <New>
              <FunctionCall name="FLSqlCursor">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="co_subcuentasprov"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <With>
        <Identifier name="curSubcuentaProv"/>
        <Source>
          <InstructionCall>
            <FunctionCall name="setModeAccess">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="curSubcuentaProv"/>
                    <Identifier name="Insert"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="refreshBuffer"/>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codsubcuenta"/>
                </Value>
                <Value>
                  <Identifier name="codSubcuenta"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="idSubcuenta"/>
                </Value>
                <Value>
                  <Identifier name="idSubcuenta"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codproveedor"/>
                </Value>
                <Value>
                  <Identifier name="codProveedor"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
          <InstructionCall>
            <FunctionCall name="setValueBuffer">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="codejercicio"/>
                </Value>
                <Value>
                  <Identifier name="codEjercicio"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </InstructionCall>
        </Source>
      </With>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="curSubcuentaProv"/>
                <FunctionCall name="commitBuffer"/>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_rellenarSubcuentasCli" returns="Boolean">
    <Arguments>
      <Variable name="codCliente" type="String"/>
      <Variable name="codSubcuenta" type="String"/>
      <Variable name="nombre" type="String"/>
    </Arguments>
    <Source>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="sys"/>
                <FunctionCall name="isLoadedModule">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="flcontppal"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="true"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Identifier name="codSubcuenta"/>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="true"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <Identifier name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="qry" type="FLSqlQuery">
          <Value>
            <New>
              <FunctionCall name="FLSqlQuery"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionCall>
        <Member>
          <Identifier name="qry"/>
          <FunctionCall name="setTablesList">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="ejercicios,co_subcuentascli"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qry"/>
          <FunctionCall name="setSelect">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="e.codejercicio"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qry"/>
          <FunctionCall name="setFrom">
            <CallArguments>
              <Expression>
                <Constant delim="&quot;" type="String" value="ejercicios e LEFT OUTER JOIN co_subcuentascli s ON e.codejercicio = s.codejercicio AND s.codcliente = '"/>
                <OpMath type="PLUS"/>
                <Identifier name="codCliente"/>
                <OpMath type="PLUS"/>
                <Constant delim="&quot;" type="String" value="'"/>
              </Expression>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qry"/>
          <FunctionCall name="setWhere">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="s.id IS NULL AND e.estado = 'ABIERTO' AND e.fechafin &gt;= CURRENT_DATE"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="qry"/>
                <FunctionCall name="exec"/>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="idSubcuenta" type="Number"/>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="codEjercicio" type="String"/>
      </DeclarationBlock>
      <While>
        <Condition>
          <Value>
            <Member>
              <Identifier name="qry"/>
              <FunctionCall name="next"/>
            </Member>
          </Value>
        </Condition>
        <Source>
          <InstructionUpdate>
            <Identifier name="codEjercicio"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="qry"/>
                <FunctionCall name="value">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="0"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="util"/>
                    <FunctionCall name="sqlSelect">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="co_epigrafes"/>
                        </Value>
                        <Value>
                          <Constant delim="&quot;" type="String" value="codepigrafe"/>
                        </Value>
                        <Expression>
                          <Constant delim="&quot;" type="String" value="codejercicio = '"/>
                          <OpMath type="PLUS"/>
                          <Identifier name="codEjercicio"/>
                          <OpMath type="PLUS"/>
                          <Constant delim="&quot;" type="String" value="'"/>
                        </Expression>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionFlow type="CONTINUE"/>
            </Source>
          </If>
          <InstructionUpdate>
            <Identifier name="idSubcuenta"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="iface"/>
                <FunctionCall name="crearSubcuenta">
                  <CallArguments>
                    <Value>
                      <Identifier name="codSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="nombre"/>
                    </Value>
                    <Value>
                      <Constant delim="&quot;" type="String" value="CLIENT"/>
                    </Value>
                    <Value>
                      <Identifier name="codEjercicio"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Identifier name="idSubcuenta"/>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="false"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
          <If>
            <Condition>
              <Expression>
                <Identifier name="idSubcuenta"/>
                <Compare type="EQ"/>
                <Identifier name="true"/>
              </Expression>
            </Condition>
            <Source>
              <InstructionFlow type="CONTINUE"/>
            </Source>
          </If>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="this"/>
                    <Identifier name="iface"/>
                    <FunctionCall name="crearSubcuentaCli">
                      <CallArguments>
                        <Value>
                          <Identifier name="codSubcuenta"/>
                        </Value>
                        <Value>
                          <Identifier name="idSubcuenta"/>
                        </Value>
                        <Value>
                          <Identifier name="codCliente"/>
                        </Value>
                        <Value>
                          <Identifier name="codEjercicio"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="false"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
        </Source>
      </While>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_rellenarSubcuentasProv" returns="Boolean">
    <Arguments>
      <Variable name="codProveedor" type="String"/>
      <Variable name="codSubcuenta" type="String"/>
      <Variable name="nombre" type="String"/>
    </Arguments>
    <Source>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="sys"/>
                <FunctionCall name="isLoadedModule">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="flcontppal"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN"/>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <Identifier name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="qry" type="FLSqlQuery">
          <Value>
            <New>
              <FunctionCall name="FLSqlQuery"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionCall>
        <Member>
          <Identifier name="qry"/>
          <FunctionCall name="setTablesList">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="ejercicios,co_subcuentasprov"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qry"/>
          <FunctionCall name="setSelect">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="e.codejercicio"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qry"/>
          <FunctionCall name="setFrom">
            <CallArguments>
              <Expression>
                <Constant delim="&quot;" type="String" value="ejercicios e LEFT OUTER JOIN co_subcuentasprov s ON e.codejercicio = s.codejercicio AND s.codproveedor = '"/>
                <OpMath type="PLUS"/>
                <Identifier name="codProveedor"/>
                <OpMath type="PLUS"/>
                <Constant delim="&quot;" type="String" value="'"/>
              </Expression>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qry"/>
          <FunctionCall name="setWhere">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="s.id IS NULL AND e.estado = 'ABIERTO' AND e.fechafin &gt;= CURRENT_DATE"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="qry"/>
                <FunctionCall name="exec"/>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="idSubcuenta" type="Number"/>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="codEjercicio" type="String"/>
      </DeclarationBlock>
      <While>
        <Condition>
          <Value>
            <Member>
              <Identifier name="qry"/>
              <FunctionCall name="next"/>
            </Member>
          </Value>
        </Condition>
        <Source>
          <InstructionUpdate>
            <Identifier name="codEjercicio"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="qry"/>
                <FunctionCall name="value">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="0"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="util"/>
                    <FunctionCall name="sqlSelect">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="co_epigrafes"/>
                        </Value>
                        <Value>
                          <Constant delim="&quot;" type="String" value="codepigrafe"/>
                        </Value>
                        <Expression>
                          <Constant delim="&quot;" type="String" value="codejercicio = '"/>
                          <OpMath type="PLUS"/>
                          <Identifier name="codEjercicio"/>
                          <OpMath type="PLUS"/>
                          <Constant delim="&quot;" type="String" value="'"/>
                        </Expression>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionFlow type="CONTINUE"/>
            </Source>
          </If>
          <InstructionUpdate>
            <Identifier name="idSubcuenta"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="this"/>
                <Identifier name="iface"/>
                <FunctionCall name="crearSubcuenta">
                  <CallArguments>
                    <Value>
                      <Identifier name="codSubcuenta"/>
                    </Value>
                    <Value>
                      <Identifier name="nombre"/>
                    </Value>
                    <Value>
                      <Constant delim="&quot;" type="String" value="PROVEE"/>
                    </Value>
                    <Value>
                      <Identifier name="codEjercicio"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Identifier name="idSubcuenta"/>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="false"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
          <If>
            <Condition>
              <Expression>
                <Identifier name="idSubcuenta"/>
                <Compare type="EQ"/>
                <Identifier name="true"/>
              </Expression>
            </Condition>
            <Source>
              <InstructionFlow type="CONTINUE"/>
            </Source>
          </If>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="this"/>
                    <Identifier name="iface"/>
                    <FunctionCall name="crearSubcuentaProv">
                      <CallArguments>
                        <Value>
                          <Identifier name="codSubcuenta"/>
                        </Value>
                        <Value>
                          <Identifier name="idSubcuenta"/>
                        </Value>
                        <Value>
                          <Identifier name="codProveedor"/>
                        </Value>
                        <Value>
                          <Identifier name="codEjercicio"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="false"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
        </Source>
      </While>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_automataActivado" returns="Boolean">
    <Source>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="sys"/>
                <FunctionCall name="isLoadedModule">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="flautomata"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <If>
        <Condition>
          <Value>
            <Member>
              <Identifier name="formau_automata"/>
              <Identifier name="iface"/>
              <FunctionCall name="pub_activado"/>
            </Member>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="true"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="false"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_clienteActivo" returns="Boolean">
    <Arguments>
      <Variable name="codCliente" type="String"/>
      <Variable name="fecha" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <Identifier name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Expression>
            <OpUnary type="LNOT">
              <Identifier name="codCliente"/>
            </OpUnary>
            <Compare type="LOR"/>
            <Identifier name="codCliente"/>
            <Compare type="EQ"/>
            <Constant delim="&quot;" type="String" value=""/>
          </Expression>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="true"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="qryBaja" type="FLSqlQuery">
          <Value>
            <New>
              <FunctionCall name="FLSqlQuery"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionCall>
        <Member>
          <Identifier name="qryBaja"/>
          <FunctionCall name="setTablesList">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="clientes"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qryBaja"/>
          <FunctionCall name="setSelect">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="debaja, fechabaja"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qryBaja"/>
          <FunctionCall name="setFrom">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="clientes"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qryBaja"/>
          <FunctionCall name="setWhere">
            <CallArguments>
              <Expression>
                <Constant delim="&quot;" type="String" value="codcliente = '"/>
                <OpMath type="PLUS"/>
                <Identifier name="codCliente"/>
                <OpMath type="PLUS"/>
                <Constant delim="&quot;" type="String" value="'"/>
              </Expression>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qryBaja"/>
          <FunctionCall name="setForwardOnly">
            <CallArguments>
              <Value>
                <Identifier name="true"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="qryBaja"/>
                <FunctionCall name="exec"/>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="qryBaja"/>
                <FunctionCall name="first"/>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="qryBaja"/>
                <FunctionCall name="value">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="debaja"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="true"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <If>
        <Condition>
          <Expression>
            <Member>
              <Identifier name="util"/>
              <FunctionCall name="daysTo">
                <CallArguments>
                  <Value>
                    <Identifier name="fecha"/>
                  </Value>
                  <Value>
                    <Member>
                      <Identifier name="qryBaja"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="fechabaja"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
            <Compare type="LE"/>
            <Constant type="Number" value="0"/>
          </Expression>
        </Condition>
        <Source>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="this"/>
                    <Identifier name="iface"/>
                    <FunctionCall name="automataActivado"/>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <DeclarationBlock mode="VAR">
                <Variable name="fechaDdMmAaaa" type="String">
                  <Value>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="dateAMDtoDMA">
                        <CallArguments>
                          <Value>
                            <Identifier name="fecha"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <InstructionCall>
                <Member>
                  <Identifier name="MessageBox"/>
                  <FunctionCall name="warning">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="translate">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="scripts"/>
                              </Value>
                              <Value>
                                <Constant delim="&quot;" type="String" value="El cliente est&#225; de baja para la fecha especificada (%1)"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                          <FunctionCall name="arg">
                            <CallArguments>
                              <Value>
                                <Identifier name="fechaDdMmAaaa"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Value>
                      <Value>
                        <Member>
                          <Identifier name="MessageBox"/>
                          <Identifier name="Ok"/>
                        </Member>
                      </Value>
                      <Value>
                        <Member>
                          <Identifier name="MessageBox"/>
                          <Identifier name="NoButton"/>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
            </Source>
          </If>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_obtenerProvincia">
    <Arguments>
      <Variable name="formulario" type="Object"/>
      <Variable name="campoId" type="String"/>
      <Variable name="campoProvincia" type="String"/>
      <Variable name="campoPais" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <Identifier name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Identifier name="campoId"/>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionUpdate>
            <Identifier name="campoId"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Constant delim="&quot;" type="String" value="idprovincia"/>
            </Value>
          </InstructionUpdate>
        </Source>
      </If>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Identifier name="campoProvincia"/>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionUpdate>
            <Identifier name="campoProvincia"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Constant delim="&quot;" type="String" value="provincia"/>
            </Value>
          </InstructionUpdate>
        </Source>
      </If>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Identifier name="campoPais"/>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionUpdate>
            <Identifier name="campoPais"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Constant delim="&quot;" type="String" value="codpais"/>
            </Value>
          </InstructionUpdate>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="provincia" type="String">
          <Value>
            <Member>
              <Identifier name="formulario"/>
              <FunctionCall name="cursor"/>
              <FunctionCall name="valueBuffer">
                <CallArguments>
                  <Value>
                    <Identifier name="campoProvincia"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Expression>
            <OpUnary type="LNOT">
              <Identifier name="provincia"/>
            </OpUnary>
            <Compare type="LOR"/>
            <Identifier name="provincia"/>
            <Compare type="EQ"/>
            <Constant delim="&quot;" type="String" value=""/>
          </Expression>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN"/>
        </Source>
      </If>
      <If>
        <Condition>
          <Value>
            <Member>
              <Identifier name="provincia"/>
              <FunctionCall name="endsWith">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="."/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Condition>
        <Source>
          <InstructionCall>
            <Member>
              <Identifier name="formulario"/>
              <FunctionCall name="cursor"/>
              <FunctionCall name="setNull">
                <CallArguments>
                  <Value>
                    <Identifier name="campoId"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionUpdate>
            <Identifier name="provincia"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="provincia"/>
                <FunctionCall name="left">
                  <CallArguments>
                    <Expression>
                      <Member>
                        <Identifier name="provincia"/>
                        <Identifier name="length"/>
                      </Member>
                      <OpMath type="MINUS"/>
                      <Constant type="Number" value="1"/>
                    </Expression>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
          <InstructionUpdate>
            <Identifier name="provincia"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="provincia"/>
                <FunctionCall name="toUpperCase"/>
              </Member>
            </Value>
          </InstructionUpdate>
          <DeclarationBlock mode="VAR">
            <Variable name="where" type="String">
              <Expression>
                <Constant delim="&quot;" type="String" value="UPPER(provincia) LIKE '"/>
                <OpMath type="PLUS"/>
                <Identifier name="provincia"/>
                <OpMath type="PLUS"/>
                <Constant delim="&quot;" type="String" value="%'"/>
              </Expression>
            </Variable>
          </DeclarationBlock>
          <DeclarationBlock mode="VAR">
            <Variable name="codPais" type="String">
              <Value>
                <Member>
                  <Identifier name="formulario"/>
                  <FunctionCall name="cursor"/>
                  <FunctionCall name="valueBuffer">
                    <CallArguments>
                      <Value>
                        <Identifier name="campoPais"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </Variable>
          </DeclarationBlock>
          <If>
            <Condition>
              <Expression>
                <Identifier name="codPais"/>
                <Compare type="LAND"/>
                <Identifier name="codPais"/>
                <Compare type="NE"/>
                <Constant delim="&quot;" type="String" value=""/>
              </Expression>
            </Condition>
            <Source>
              <InstructionUpdate>
                <Identifier name="where"/>
                <OpUpdate type="PLUSEQUAL"/>
                <Expression>
                  <Constant delim="&quot;" type="String" value=" AND codpais = '"/>
                  <OpMath type="PLUS"/>
                  <Identifier name="codPais"/>
                  <OpMath type="PLUS"/>
                  <Constant delim="&quot;" type="String" value="'"/>
                </Expression>
              </InstructionUpdate>
            </Source>
          </If>
          <DeclarationBlock mode="VAR">
            <Variable name="qryProvincia" type="FLSqlQuery">
              <Value>
                <New>
                  <Identifier name="FLSqlQuery"/>
                </New>
              </Value>
            </Variable>
          </DeclarationBlock>
          <With>
            <Identifier name="qryProvincia"/>
            <Source>
              <InstructionCall>
                <FunctionCall name="setTablesList">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="provincias"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </InstructionCall>
              <InstructionCall>
                <FunctionCall name="setSelect">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="idprovincia"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </InstructionCall>
              <InstructionCall>
                <FunctionCall name="setFrom">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="provincias"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </InstructionCall>
              <InstructionCall>
                <FunctionCall name="setForwardOnly">
                  <CallArguments>
                    <Value>
                      <Identifier name="true"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </InstructionCall>
            </Source>
          </With>
          <InstructionCall>
            <Member>
              <Identifier name="qryProvincia"/>
              <FunctionCall name="setWhere">
                <CallArguments>
                  <Value>
                    <Identifier name="where"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="qryProvincia"/>
                    <FunctionCall name="exec"/>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="false"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
          <Switch>
            <Condition>
              <Value>
                <Member>
                  <Identifier name="qryProvincia"/>
                  <FunctionCall name="size"/>
                </Member>
              </Value>
            </Condition>
            <Case>
              <Value>
                <Constant type="Number" value="0"/>
              </Value>
              <Source>
                <InstructionFlow type="RETURN"/>
              </Source>
            </Case>
            <Case>
              <Value>
                <Constant type="Number" value="1"/>
              </Value>
              <Source>
                <If>
                  <Condition>
                    <Value>
                      <OpUnary type="LNOT">
                        <Member>
                          <Identifier name="qryProvincia"/>
                          <FunctionCall name="first"/>
                        </Member>
                      </OpUnary>
                    </Value>
                  </Condition>
                  <Source>
                    <InstructionFlow type="RETURN">
                      <Value>
                        <Identifier name="false"/>
                      </Value>
                    </InstructionFlow>
                  </Source>
                </If>
                <InstructionCall>
                  <Member>
                    <Identifier name="formulario"/>
                    <FunctionCall name="cursor"/>
                    <FunctionCall name="setValueBuffer">
                      <CallArguments>
                        <Value>
                          <Identifier name="campoId"/>
                        </Value>
                        <Value>
                          <Member>
                            <Identifier name="qryProvincia"/>
                            <FunctionCall name="value">
                              <CallArguments>
                                <Value>
                                  <Constant delim="&quot;" type="String" value="idprovincia"/>
                                </Value>
                              </CallArguments>
                            </FunctionCall>
                          </Member>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </InstructionCall>
                <InstructionFlow type="BREAK"/>
              </Source>
            </Case>
            <CaseDefault>
              <Source>
                <DeclarationBlock mode="VAR">
                  <Variable name="listaProvincias" type="String">
                    <Value>
                      <Constant delim="&quot;" type="String" value=""/>
                    </Value>
                  </Variable>
                </DeclarationBlock>
                <While>
                  <Condition>
                    <Value>
                      <Member>
                        <Identifier name="qryProvincia"/>
                        <FunctionCall name="next"/>
                      </Member>
                    </Value>
                  </Condition>
                  <Source>
                    <If>
                      <Condition>
                        <Expression>
                          <Identifier name="listaProvincias"/>
                          <Compare type="NE"/>
                          <Constant delim="&quot;" type="String" value=""/>
                        </Expression>
                      </Condition>
                      <Source>
                        <InstructionUpdate>
                          <Identifier name="listaProvincias"/>
                          <OpUpdate type="PLUSEQUAL"/>
                          <Value>
                            <Constant delim="&quot;" type="String" value=", "/>
                          </Value>
                        </InstructionUpdate>
                      </Source>
                    </If>
                    <InstructionUpdate>
                      <Identifier name="listaProvincias"/>
                      <OpUpdate type="PLUSEQUAL"/>
                      <Value>
                        <Member>
                          <Identifier name="qryProvincia"/>
                          <FunctionCall name="value">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="idprovincia"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Value>
                    </InstructionUpdate>
                  </Source>
                </While>
                <DeclarationBlock mode="VAR">
                  <Variable name="f" type="Object">
                    <Value>
                      <New>
                        <FunctionCall name="FLFormSearchDB">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="provincias"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </New>
                    </Value>
                  </Variable>
                </DeclarationBlock>
                <DeclarationBlock mode="VAR">
                  <Variable name="curProvincias" type="FLSqlCursor">
                    <Value>
                      <Member>
                        <Identifier name="f"/>
                        <FunctionCall name="cursor"/>
                      </Member>
                    </Value>
                  </Variable>
                </DeclarationBlock>
                <InstructionCall>
                  <Member>
                    <Identifier name="curProvincias"/>
                    <FunctionCall name="setMainFilter">
                      <CallArguments>
                        <Expression>
                          <Constant delim="&quot;" type="String" value="idprovincia IN ("/>
                          <OpMath type="PLUS"/>
                          <Identifier name="listaProvincias"/>
                          <OpMath type="PLUS"/>
                          <Constant delim="&quot;" type="String" value=")"/>
                        </Expression>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </InstructionCall>
                <InstructionCall>
                  <Member>
                    <Identifier name="f"/>
                    <FunctionCall name="setMainWidget"/>
                  </Member>
                </InstructionCall>
                <DeclarationBlock mode="VAR">
                  <Variable name="idProvincia" type="String">
                    <Value>
                      <Member>
                        <Identifier name="f"/>
                        <FunctionCall name="exec">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="idprovincia"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </Value>
                  </Variable>
                </DeclarationBlock>
                <If>
                  <Condition>
                    <Value>
                      <Identifier name="idProvincia"/>
                    </Value>
                  </Condition>
                  <Source>
                    <InstructionCall>
                      <Member>
                        <Identifier name="formulario"/>
                        <FunctionCall name="cursor"/>
                        <FunctionCall name="setValueBuffer">
                          <CallArguments>
                            <Value>
                              <Identifier name="campoId"/>
                            </Value>
                            <Value>
                              <Identifier name="idProvincia"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </InstructionCall>
                  </Source>
                </If>
                <InstructionFlow type="BREAK"/>
              </Source>
            </CaseDefault>
          </Switch>
        </Source>
      </If>
    </Source>
  </Function>
  <Function name="oficial_actualizarContactos20070525" returns="Boolean">
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil"/>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="qryClientes" type="FLSqlQuery">
          <Value>
            <New>
              <FunctionCall name="FLSqlQuery"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionCall>
        <Member>
          <Identifier name="qryClientes"/>
          <FunctionCall name="setTablesList">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="clientes"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qryClientes"/>
          <FunctionCall name="setFrom">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="clientes"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qryClientes"/>
          <FunctionCall name="setSelect">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="codcliente,codcontacto,contacto"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qryClientes"/>
          <FunctionCall name="setWhere">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value=""/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="qryClientes"/>
                <FunctionCall name="exec"/>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <InstructionCall>
        <Member>
          <Identifier name="util"/>
          <FunctionCall name="createProgressDialog">
            <CallArguments>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Reorganizando Contactos"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
              <Value>
                <Member>
                  <Identifier name="qryClientes"/>
                  <FunctionCall name="size"/>
                </Member>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="util"/>
          <FunctionCall name="setProgress">
            <CallArguments>
              <Value>
                <Constant type="Number" value="0"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <DeclarationBlock mode="VAR">
        <Variable name="cont" type="Number">
          <Value>
            <Constant type="Number" value="1"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <While>
        <Condition>
          <Value>
            <Member>
              <Identifier name="qryClientes"/>
              <FunctionCall name="next"/>
            </Member>
          </Value>
        </Condition>
        <Source>
          <InstructionCall>
            <Member>
              <Identifier name="util"/>
              <FunctionCall name="setProgress">
                <CallArguments>
                  <Value>
                    <Identifier name="cont"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionUpdate>
            <Identifier name="cont"/>
            <OpUpdate type="PLUSEQUAL"/>
            <Value>
              <Constant type="Number" value="1"/>
            </Value>
          </InstructionUpdate>
          <DeclarationBlock mode="VAR">
            <Variable name="codCliente" type="String">
              <Value>
                <Member>
                  <Identifier name="qryClientes"/>
                  <FunctionCall name="value">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="codcliente"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </Variable>
          </DeclarationBlock>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Identifier name="codCliente"/>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="destroyProgressDialog"/>
                </Member>
              </InstructionCall>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="false"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
          <DeclarationBlock mode="VAR">
            <Variable name="qryAgenda" type="FLSqlQuery">
              <Value>
                <New>
                  <FunctionCall name="FLSqlQuery"/>
                </New>
              </Value>
            </Variable>
          </DeclarationBlock>
          <InstructionCall>
            <Member>
              <Identifier name="qryAgenda"/>
              <FunctionCall name="setTablesList">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="contactosclientes"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="qryAgenda"/>
              <FunctionCall name="setFrom">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="contactosclientes"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="qryAgenda"/>
              <FunctionCall name="setSelect">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="contacto,cargo,telefono,fax,email,id,codcliente"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="qryAgenda"/>
              <FunctionCall name="setWhere">
                <CallArguments>
                  <Expression>
                    <Constant delim="&quot;" type="String" value="codcliente = '"/>
                    <OpMath type="PLUS"/>
                    <Identifier name="codCliente"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="'"/>
                  </Expression>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="qryAgenda"/>
                    <FunctionCall name="exec"/>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="destroyProgressDialog"/>
                </Member>
              </InstructionCall>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="false"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
          <If>
            <Condition>
              <Value>
                <Member>
                  <Identifier name="sys"/>
                  <FunctionCall name="isLoadedModule">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="flcrm_ppal"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </Condition>
            <Source>
              <DeclarationBlock mode="VAR">
                <Variable name="qryClientesContactos" type="FLSqlQuery">
                  <Value>
                    <New>
                      <FunctionCall name="FLSqlQuery"/>
                    </New>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <InstructionCall>
                <Member>
                  <Identifier name="qryClientesContactos"/>
                  <FunctionCall name="setTablesList">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="crm_clientescontactos"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="qryClientesContactos"/>
                  <FunctionCall name="setFrom">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="crm_clientescontactos"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="qryClientesContactos"/>
                  <FunctionCall name="setSelect">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="codcontacto"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="qryClientesContactos"/>
                  <FunctionCall name="setWhere">
                    <CallArguments>
                      <Expression>
                        <Constant delim="&quot;" type="String" value="codcliente = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="codCliente"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="' AND codcontacto NOT IN(SELECT codcontacto FROM contactosclientes WHERE codcliente = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="codCliente"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="')"/>
                      </Expression>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <If>
                <Condition>
                  <Value>
                    <OpUnary type="LNOT">
                      <Member>
                        <Identifier name="qryClientesContactos"/>
                        <FunctionCall name="exec"/>
                      </Member>
                    </OpUnary>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="destroyProgressDialog"/>
                    </Member>
                  </InstructionCall>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
              <While>
                <Condition>
                  <Value>
                    <Member>
                      <Identifier name="qryClientesContactos"/>
                      <FunctionCall name="next"/>
                    </Member>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="this"/>
                      <Identifier name="iface"/>
                      <FunctionCall name="actualizarContactosDeAgenda20070525">
                        <CallArguments>
                          <Value>
                            <Identifier name="codCliente"/>
                          </Value>
                          <Value>
                            <Member>
                              <Identifier name="qryClientesContactos"/>
                              <FunctionCall name="value">
                                <CallArguments>
                                  <Value>
                                    <Constant delim="&quot;" type="String" value="codcontacto"/>
                                  </Value>
                                </CallArguments>
                              </FunctionCall>
                            </Member>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </InstructionCall>
                </Source>
              </While>
            </Source>
          </If>
          <While>
            <Condition>
              <Value>
                <Member>
                  <Identifier name="qryAgenda"/>
                  <FunctionCall name="next"/>
                </Member>
              </Value>
            </Condition>
            <Source>
              <DeclarationBlock mode="VAR">
                <Variable name="nombreCon" type="String">
                  <Value>
                    <Member>
                      <Identifier name="qryAgenda"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="contacto"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <DeclarationBlock mode="VAR">
                <Variable name="cargoCon" type="String">
                  <Value>
                    <Member>
                      <Identifier name="qryAgenda"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="cargo"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <DeclarationBlock mode="VAR">
                <Variable name="telefonoCon" type="String">
                  <Value>
                    <Member>
                      <Identifier name="qryAgenda"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="telefono"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <DeclarationBlock mode="VAR">
                <Variable name="faxCon" type="String">
                  <Value>
                    <Member>
                      <Identifier name="qryAgenda"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="fax"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <DeclarationBlock mode="VAR">
                <Variable name="emailCon" type="String">
                  <Value>
                    <Member>
                      <Identifier name="qryAgenda"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="email"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <DeclarationBlock mode="VAR">
                <Variable name="idAgenda" type="Number">
                  <Value>
                    <Member>
                      <Identifier name="qryAgenda"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="id"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <If>
                <Condition>
                  <Expression>
                    <OpUnary type="LNOT">
                      <Identifier name="idAgenda"/>
                    </OpUnary>
                    <Compare type="LOR"/>
                    <Identifier name="idAgenda"/>
                    <Compare type="EQ"/>
                    <Constant type="Number" value="0"/>
                  </Expression>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="destroyProgressDialog"/>
                    </Member>
                  </InstructionCall>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
              <DeclarationBlock mode="VAR">
                <Variable name="qryContactos" type="FLSqlQuery">
                  <Value>
                    <New>
                      <FunctionCall name="FLSqlQuery"/>
                    </New>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <InstructionCall>
                <Member>
                  <Identifier name="qryContactos"/>
                  <FunctionCall name="setTablesList">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="crm_contactos,contactosclientes"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="qryContactos"/>
                  <FunctionCall name="setFrom">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="crm_contactos INNER JOIN contactosclientes ON crm_contactos.codcontacto = contactosclientes.codcontacto"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="qryContactos"/>
                  <FunctionCall name="setSelect">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="crm_contactos.codcontacto"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="qryContactos"/>
                  <FunctionCall name="setWhere">
                    <CallArguments>
                      <Expression>
                        <Constant delim="&quot;" type="String" value="crm_contactos.nombre = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="nombreCon"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="' AND (contactosclientes.codcliente = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="codCliente"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="' AND (crm_contactos.email = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="emailCon"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="' AND crm_contactos.telefono1 = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="telefonoCon"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="'))"/>
                      </Expression>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <If>
                <Condition>
                  <Value>
                    <OpUnary type="LNOT">
                      <Member>
                        <Identifier name="qryContactos"/>
                        <FunctionCall name="exec"/>
                      </Member>
                    </OpUnary>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="destroyProgressDialog"/>
                    </Member>
                  </InstructionCall>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
              <DeclarationBlock mode="VAR">
                <Variable name="codContacto" type="String">
                  <Value>
                    <Constant delim="&quot;" type="String" value=""/>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <If>
                <Condition>
                  <Value>
                    <Member>
                      <Identifier name="qryContactos"/>
                      <FunctionCall name="first"/>
                    </Member>
                  </Value>
                </Condition>
                <Source>
                  <InstructionUpdate>
                    <Identifier name="codContacto"/>
                    <OpUpdate type="EQUALS"/>
                    <Value>
                      <Member>
                        <Identifier name="qryContactos"/>
                        <FunctionCall name="value">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="crm_contactos.codcontacto"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </Value>
                  </InstructionUpdate>
                </Source>
              </If>
              <If>
                <Condition>
                  <Value>
                    <OpUnary type="LNOT">
                      <Member>
                        <Identifier name="this"/>
                        <Identifier name="iface"/>
                        <FunctionCall name="actualizarContactosDeAgenda20070525">
                          <CallArguments>
                            <Value>
                              <Identifier name="codCliente"/>
                            </Value>
                            <Value>
                              <Identifier name="codContacto"/>
                            </Value>
                            <Value>
                              <Identifier name="nombreCon"/>
                            </Value>
                            <Value>
                              <Identifier name="cargoCon"/>
                            </Value>
                            <Value>
                              <Identifier name="telefonoCon"/>
                            </Value>
                            <Value>
                              <Identifier name="faxCon"/>
                            </Value>
                            <Value>
                              <Identifier name="emailCon"/>
                            </Value>
                            <Value>
                              <Identifier name="idAgenda"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </OpUnary>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="destroyProgressDialog"/>
                    </Member>
                  </InstructionCall>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
            </Source>
          </While>
          <If>
            <Condition>
              <Expression>
                <Parentheses>
                  <Member>
                    <Identifier name="qryClientes"/>
                    <FunctionCall name="value">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="contacto"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                  <Compare type="LAND"/>
                  <Member>
                    <Identifier name="qryClientes"/>
                    <FunctionCall name="value">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="contacto"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                  <Compare type="NE"/>
                  <Constant delim="&quot;" type="String" value=""/>
                </Parentheses>
                <Compare type="LAND"/>
                <Parentheses>
                  <OpUnary type="LNOT">
                    <Member>
                      <Identifier name="qryClientes"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="codcontacto"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </OpUnary>
                  <Compare type="LOR"/>
                  <Member>
                    <Identifier name="qryClientes"/>
                    <FunctionCall name="value">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="codcontacto"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                  <Compare type="EQ"/>
                  <Constant delim="&quot;" type="String" value=""/>
                </Parentheses>
              </Expression>
            </Condition>
            <Source>
              <InstructionUpdate>
                <Identifier name="codContacto"/>
                <OpUpdate type="EQUALS"/>
                <Value>
                  <Member>
                    <Identifier name="util"/>
                    <FunctionCall name="sqlSelect">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="crm_contactos"/>
                        </Value>
                        <Value>
                          <Constant delim="&quot;" type="String" value="codcontacto"/>
                        </Value>
                        <Expression>
                          <Constant delim="&quot;" type="String" value="nombre = '"/>
                          <OpMath type="PLUS"/>
                          <Member>
                            <Identifier name="this"/>
                            <Identifier name="iface"/>
                            <FunctionCall name="escapeQuote">
                              <CallArguments>
                                <Value>
                                  <Member>
                                    <Identifier name="qryClientes"/>
                                    <FunctionCall name="value">
                                      <CallArguments>
                                        <Value>
                                          <Constant delim="&quot;" type="String" value="contacto"/>
                                        </Value>
                                      </CallArguments>
                                    </FunctionCall>
                                  </Member>
                                </Value>
                              </CallArguments>
                            </FunctionCall>
                          </Member>
                          <OpMath type="PLUS"/>
                          <Constant delim="&quot;" type="String" value="'"/>
                        </Expression>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </Value>
              </InstructionUpdate>
              <If>
                <Condition>
                  <Value>
                    <Identifier name="codContacto"/>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="this"/>
                      <Identifier name="iface"/>
                      <FunctionCall name="actualizarContactosDeAgenda20070525">
                        <CallArguments>
                          <Value>
                            <Identifier name="codCliente"/>
                          </Value>
                          <Value>
                            <Identifier name="codContacto"/>
                          </Value>
                          <Value>
                            <Member>
                              <Identifier name="qryClientes"/>
                              <FunctionCall name="value">
                                <CallArguments>
                                  <Value>
                                    <Constant delim="&quot;" type="String" value="contacto"/>
                                  </Value>
                                </CallArguments>
                              </FunctionCall>
                            </Member>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </InstructionCall>
                </Source>
                <Else>
                  <Source>
                    <InstructionUpdate>
                      <Identifier name="codContacto"/>
                      <OpUpdate type="EQUALS"/>
                      <Value>
                        <Member>
                          <Identifier name="this"/>
                          <Identifier name="iface"/>
                          <FunctionCall name="actualizarContactosDeAgenda20070525">
                            <CallArguments>
                              <Value>
                                <Identifier name="codCliente"/>
                              </Value>
                              <Value>
                                <Constant delim="&quot;" type="String" value=""/>
                              </Value>
                              <Value>
                                <Member>
                                  <Identifier name="qryClientes"/>
                                  <FunctionCall name="value">
                                    <CallArguments>
                                      <Value>
                                        <Constant delim="&quot;" type="String" value="contacto"/>
                                      </Value>
                                    </CallArguments>
                                  </FunctionCall>
                                </Member>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Value>
                    </InstructionUpdate>
                  </Source>
                </Else>
              </If>
              <If>
                <Condition>
                  <Value>
                    <OpUnary type="LNOT">
                      <Identifier name="codContacto"/>
                    </OpUnary>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="destroyProgressDialog"/>
                    </Member>
                  </InstructionCall>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
              <DeclarationBlock mode="VAR">
                <Variable name="curCliente" type="FLSqlCursor">
                  <Value>
                    <New>
                      <FunctionCall name="FLSqlCursor">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="clientes"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </New>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <InstructionCall>
                <Member>
                  <Identifier name="curCliente"/>
                  <FunctionCall name="select">
                    <CallArguments>
                      <Expression>
                        <Constant delim="&quot;" type="String" value="codcliente = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="codCliente"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="'"/>
                      </Expression>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="curCliente"/>
                  <FunctionCall name="setModeAccess">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="curCliente"/>
                          <Identifier name="Edit"/>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <If>
                <Condition>
                  <Value>
                    <OpUnary type="LNOT">
                      <Member>
                        <Identifier name="curCliente"/>
                        <FunctionCall name="first"/>
                      </Member>
                    </OpUnary>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="destroyProgressDialog"/>
                    </Member>
                  </InstructionCall>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
              <InstructionCall>
                <Member>
                  <Identifier name="curCliente"/>
                  <FunctionCall name="refreshBuffer"/>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="curCliente"/>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="codcontacto"/>
                      </Value>
                      <Value>
                        <Identifier name="codContacto"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <If>
                <Condition>
                  <Value>
                    <OpUnary type="LNOT">
                      <Member>
                        <Identifier name="curCliente"/>
                        <FunctionCall name="commitBuffer"/>
                      </Member>
                    </OpUnary>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="destroyProgressDialog"/>
                    </Member>
                  </InstructionCall>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
            </Source>
          </If>
        </Source>
      </While>
      <InstructionCall>
        <Member>
          <Identifier name="util"/>
          <FunctionCall name="setProgress">
            <CallArguments>
              <Value>
                <Member>
                  <Identifier name="qryClientes"/>
                  <FunctionCall name="size"/>
                </Member>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="util"/>
          <FunctionCall name="destroyProgressDialog"/>
        </Member>
      </InstructionCall>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_actualizarContactosProv20070702" returns="Boolean">
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil"/>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="qryProveedores" type="FLSqlQuery">
          <Value>
            <New>
              <FunctionCall name="FLSqlQuery"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionCall>
        <Member>
          <Identifier name="qryProveedores"/>
          <FunctionCall name="setTablesList">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="proveedores"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qryProveedores"/>
          <FunctionCall name="setFrom">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="proveedores"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qryProveedores"/>
          <FunctionCall name="setSelect">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="codproveedor,codcontacto,contacto"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qryProveedores"/>
          <FunctionCall name="setWhere">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value=""/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="qryProveedores"/>
                <FunctionCall name="exec"/>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <InstructionCall>
        <Member>
          <Identifier name="util"/>
          <FunctionCall name="createProgressDialog">
            <CallArguments>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Reorganizando Contactos"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
              <Value>
                <Member>
                  <Identifier name="qryProveedores"/>
                  <FunctionCall name="size"/>
                </Member>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="util"/>
          <FunctionCall name="setProgress">
            <CallArguments>
              <Value>
                <Constant type="Number" value="0"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <DeclarationBlock mode="VAR">
        <Variable name="cont" type="Number">
          <Value>
            <Constant type="Number" value="1"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <While>
        <Condition>
          <Value>
            <Member>
              <Identifier name="qryProveedores"/>
              <FunctionCall name="next"/>
            </Member>
          </Value>
        </Condition>
        <Source>
          <InstructionCall>
            <Member>
              <Identifier name="util"/>
              <FunctionCall name="setProgress">
                <CallArguments>
                  <Value>
                    <Identifier name="cont"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionUpdate>
            <Identifier name="cont"/>
            <OpUpdate type="PLUSEQUAL"/>
            <Value>
              <Constant type="Number" value="1"/>
            </Value>
          </InstructionUpdate>
          <DeclarationBlock mode="VAR">
            <Variable name="codProveedor" type="String">
              <Value>
                <Member>
                  <Identifier name="qryProveedores"/>
                  <FunctionCall name="value">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="codproveedor"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </Variable>
          </DeclarationBlock>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Identifier name="codProveedor"/>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="destroyProgressDialog"/>
                </Member>
              </InstructionCall>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="false"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
          <DeclarationBlock mode="VAR">
            <Variable name="qryAgenda" type="FLSqlQuery">
              <Value>
                <New>
                  <FunctionCall name="FLSqlQuery"/>
                </New>
              </Value>
            </Variable>
          </DeclarationBlock>
          <InstructionCall>
            <Member>
              <Identifier name="qryAgenda"/>
              <FunctionCall name="setTablesList">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="contactosproveedores"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="qryAgenda"/>
              <FunctionCall name="setFrom">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="contactosproveedores"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="qryAgenda"/>
              <FunctionCall name="setSelect">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="contacto,cargo,telefono,fax,email,id,codproveedor"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="qryAgenda"/>
              <FunctionCall name="setWhere">
                <CallArguments>
                  <Expression>
                    <Constant delim="&quot;" type="String" value="codproveedor = '"/>
                    <OpMath type="PLUS"/>
                    <Identifier name="codProveedor"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="'"/>
                  </Expression>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="qryAgenda"/>
                    <FunctionCall name="exec"/>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="destroyProgressDialog"/>
                </Member>
              </InstructionCall>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="false"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
          <While>
            <Condition>
              <Value>
                <Member>
                  <Identifier name="qryAgenda"/>
                  <FunctionCall name="next"/>
                </Member>
              </Value>
            </Condition>
            <Source>
              <DeclarationBlock mode="VAR">
                <Variable name="nombreCon" type="String">
                  <Value>
                    <Member>
                      <Identifier name="qryAgenda"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="contacto"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <DeclarationBlock mode="VAR">
                <Variable name="cargoCon" type="String">
                  <Value>
                    <Member>
                      <Identifier name="qryAgenda"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="cargo"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <DeclarationBlock mode="VAR">
                <Variable name="telefonoCon" type="String">
                  <Value>
                    <Member>
                      <Identifier name="qryAgenda"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="telefono"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <DeclarationBlock mode="VAR">
                <Variable name="faxCon" type="String">
                  <Value>
                    <Member>
                      <Identifier name="qryAgenda"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="fax"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <DeclarationBlock mode="VAR">
                <Variable name="emailCon" type="String">
                  <Value>
                    <Member>
                      <Identifier name="qryAgenda"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="email"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <DeclarationBlock mode="VAR">
                <Variable name="idAgenda" type="Number">
                  <Value>
                    <Member>
                      <Identifier name="qryAgenda"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="id"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <If>
                <Condition>
                  <Expression>
                    <OpUnary type="LNOT">
                      <Identifier name="idAgenda"/>
                    </OpUnary>
                    <Compare type="LOR"/>
                    <Identifier name="idAgenda"/>
                    <Compare type="EQ"/>
                    <Constant type="Number" value="0"/>
                  </Expression>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="destroyProgressDialog"/>
                    </Member>
                  </InstructionCall>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
              <DeclarationBlock mode="VAR">
                <Variable name="qryContactos" type="FLSqlQuery">
                  <Value>
                    <New>
                      <FunctionCall name="FLSqlQuery"/>
                    </New>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <InstructionCall>
                <Member>
                  <Identifier name="qryContactos"/>
                  <FunctionCall name="setTablesList">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="crm_contactos,contactosproveedores"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="qryContactos"/>
                  <FunctionCall name="setFrom">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="crm_contactos INNER JOIN contactosproveedores ON crm_contactos.codcontacto = contactosproveedores.codcontacto"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="qryContactos"/>
                  <FunctionCall name="setSelect">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="crm_contactos.codcontacto"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="qryContactos"/>
                  <FunctionCall name="setWhere">
                    <CallArguments>
                      <Expression>
                        <Constant delim="&quot;" type="String" value="crm_contactos.nombre = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="nombreCon"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="' AND (contactosproveedores.codproveedor = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="codProveedor"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="' AND (crm_contactos.email = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="emailCon"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="' AND crm_contactos.telefono1 = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="telefonoCon"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="'))"/>
                      </Expression>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <If>
                <Condition>
                  <Value>
                    <OpUnary type="LNOT">
                      <Member>
                        <Identifier name="qryContactos"/>
                        <FunctionCall name="exec"/>
                      </Member>
                    </OpUnary>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="destroyProgressDialog"/>
                    </Member>
                  </InstructionCall>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
              <DeclarationBlock mode="VAR">
                <Variable name="codContacto" type="String">
                  <Value>
                    <Constant delim="&quot;" type="String" value=""/>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <If>
                <Condition>
                  <Value>
                    <Member>
                      <Identifier name="qryContactos"/>
                      <FunctionCall name="first"/>
                    </Member>
                  </Value>
                </Condition>
                <Source>
                  <InstructionUpdate>
                    <Identifier name="codContacto"/>
                    <OpUpdate type="EQUALS"/>
                    <Value>
                      <Member>
                        <Identifier name="qryContactos"/>
                        <FunctionCall name="value">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="crm_contactos.codcontacto"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </Value>
                  </InstructionUpdate>
                </Source>
              </If>
              <If>
                <Condition>
                  <Value>
                    <OpUnary type="LNOT">
                      <Member>
                        <Identifier name="this"/>
                        <Identifier name="iface"/>
                        <FunctionCall name="actualizarContactosDeAgendaProv20070702">
                          <CallArguments>
                            <Value>
                              <Identifier name="codProveedor"/>
                            </Value>
                            <Value>
                              <Identifier name="codContacto"/>
                            </Value>
                            <Value>
                              <Identifier name="nombreCon"/>
                            </Value>
                            <Value>
                              <Identifier name="cargoCon"/>
                            </Value>
                            <Value>
                              <Identifier name="telefonoCon"/>
                            </Value>
                            <Value>
                              <Identifier name="faxCon"/>
                            </Value>
                            <Value>
                              <Identifier name="emailCon"/>
                            </Value>
                            <Value>
                              <Identifier name="idAgenda"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </OpUnary>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="destroyProgressDialog"/>
                    </Member>
                  </InstructionCall>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
            </Source>
          </While>
          <If>
            <Condition>
              <Expression>
                <Parentheses>
                  <Member>
                    <Identifier name="qryProveedores"/>
                    <FunctionCall name="value">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="contacto"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                  <Compare type="LAND"/>
                  <Member>
                    <Identifier name="qryProveedores"/>
                    <FunctionCall name="value">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="contacto"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                  <Compare type="NE"/>
                  <Constant delim="&quot;" type="String" value=""/>
                </Parentheses>
                <Compare type="LAND"/>
                <Parentheses>
                  <OpUnary type="LNOT">
                    <Member>
                      <Identifier name="qryProveedores"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="codcontacto"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </OpUnary>
                  <Compare type="LOR"/>
                  <Member>
                    <Identifier name="qryProveedores"/>
                    <FunctionCall name="value">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="codcontacto"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                  <Compare type="EQ"/>
                  <Constant delim="&quot;" type="String" value=""/>
                </Parentheses>
              </Expression>
            </Condition>
            <Source>
              <InstructionUpdate>
                <Identifier name="codContacto"/>
                <OpUpdate type="EQUALS"/>
                <Value>
                  <Member>
                    <Identifier name="util"/>
                    <FunctionCall name="sqlSelect">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="crm_contactos"/>
                        </Value>
                        <Value>
                          <Constant delim="&quot;" type="String" value="codcontacto"/>
                        </Value>
                        <Expression>
                          <Constant delim="&quot;" type="String" value="nombre = '"/>
                          <OpMath type="PLUS"/>
                          <Member>
                            <Identifier name="qryProveedores"/>
                            <FunctionCall name="value">
                              <CallArguments>
                                <Value>
                                  <Constant delim="&quot;" type="String" value="contacto"/>
                                </Value>
                              </CallArguments>
                            </FunctionCall>
                          </Member>
                          <OpMath type="PLUS"/>
                          <Constant delim="&quot;" type="String" value="'"/>
                        </Expression>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </Value>
              </InstructionUpdate>
              <If>
                <Condition>
                  <Value>
                    <Identifier name="codContacto"/>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="this"/>
                      <Identifier name="iface"/>
                      <FunctionCall name="actualizarContactosDeAgendaProv20070702">
                        <CallArguments>
                          <Value>
                            <Identifier name="codProveedor"/>
                          </Value>
                          <Value>
                            <Identifier name="codContacto"/>
                          </Value>
                          <Value>
                            <Member>
                              <Identifier name="qryProveedores"/>
                              <FunctionCall name="value">
                                <CallArguments>
                                  <Value>
                                    <Constant delim="&quot;" type="String" value="contacto"/>
                                  </Value>
                                </CallArguments>
                              </FunctionCall>
                            </Member>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </InstructionCall>
                </Source>
                <Else>
                  <Source>
                    <InstructionUpdate>
                      <Identifier name="codContacto"/>
                      <OpUpdate type="EQUALS"/>
                      <Value>
                        <Member>
                          <Identifier name="this"/>
                          <Identifier name="iface"/>
                          <FunctionCall name="actualizarContactosDeAgendaProv20070702">
                            <CallArguments>
                              <Value>
                                <Identifier name="codProveedor"/>
                              </Value>
                              <Value>
                                <Constant delim="&quot;" type="String" value=""/>
                              </Value>
                              <Value>
                                <Member>
                                  <Identifier name="qryProveedores"/>
                                  <FunctionCall name="value">
                                    <CallArguments>
                                      <Value>
                                        <Constant delim="&quot;" type="String" value="contacto"/>
                                      </Value>
                                    </CallArguments>
                                  </FunctionCall>
                                </Member>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Value>
                    </InstructionUpdate>
                  </Source>
                </Else>
              </If>
              <If>
                <Condition>
                  <Value>
                    <OpUnary type="LNOT">
                      <Identifier name="codContacto"/>
                    </OpUnary>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="destroyProgressDialog"/>
                    </Member>
                  </InstructionCall>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
              <DeclarationBlock mode="VAR">
                <Variable name="curProveedor" type="FLSqlCursor">
                  <Value>
                    <New>
                      <FunctionCall name="FLSqlCursor">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="proveedores"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </New>
                  </Value>
                </Variable>
              </DeclarationBlock>
              <InstructionCall>
                <Member>
                  <Identifier name="curProveedor"/>
                  <FunctionCall name="select">
                    <CallArguments>
                      <Expression>
                        <Constant delim="&quot;" type="String" value="codproveedor = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="codProveedor"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="'"/>
                      </Expression>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="curProveedor"/>
                  <FunctionCall name="setModeAccess">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="curProveedor"/>
                          <Identifier name="Edit"/>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <If>
                <Condition>
                  <Value>
                    <OpUnary type="LNOT">
                      <Member>
                        <Identifier name="curProveedor"/>
                        <FunctionCall name="first"/>
                      </Member>
                    </OpUnary>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="destroyProgressDialog"/>
                    </Member>
                  </InstructionCall>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
              <InstructionCall>
                <Member>
                  <Identifier name="curProveedor"/>
                  <FunctionCall name="refreshBuffer"/>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="curProveedor"/>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="codcontacto"/>
                      </Value>
                      <Value>
                        <Identifier name="codContacto"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <If>
                <Condition>
                  <Value>
                    <OpUnary type="LNOT">
                      <Member>
                        <Identifier name="curProveedor"/>
                        <FunctionCall name="commitBuffer"/>
                      </Member>
                    </OpUnary>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="destroyProgressDialog"/>
                    </Member>
                  </InstructionCall>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
            </Source>
          </If>
        </Source>
      </While>
      <InstructionCall>
        <Member>
          <Identifier name="util"/>
          <FunctionCall name="setProgress">
            <CallArguments>
              <Value>
                <Member>
                  <Identifier name="qryProveedores"/>
                  <FunctionCall name="size"/>
                </Member>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="util"/>
          <FunctionCall name="destroyProgressDialog"/>
        </Member>
      </InstructionCall>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_actualizarContactosDeAgenda20070525" returns="String">
    <Arguments>
      <Variable name="codCliente" type="String"/>
      <Variable name="codContacto" type="String"/>
      <Variable name="nombreCon" type="String"/>
      <Variable name="cargoCon" type="String"/>
      <Variable name="telefonoCon" type="String"/>
      <Variable name="faxCon" type="String"/>
      <Variable name="emailCon" type="String"/>
      <Variable name="idAgenda" type="Number"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil"/>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="curContactos" type="FLSqlCursor">
          <Value>
            <New>
              <FunctionCall name="FLSqlCursor">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="crm_contactos"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="curAgenda" type="FLSqlCursor">
          <Value>
            <New>
              <FunctionCall name="FLSqlCursor">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="contactosclientes"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Expression>
            <Identifier name="codContacto"/>
            <Compare type="LAND"/>
            <Identifier name="codContacto"/>
            <Compare type="NE"/>
            <Constant delim="&quot;" type="String" value=""/>
          </Expression>
        </Condition>
        <Source>
          <InstructionCall>
            <Member>
              <Identifier name="curContactos"/>
              <FunctionCall name="select">
                <CallArguments>
                  <Expression>
                    <Constant delim="&quot;" type="String" value="codcontacto = '"/>
                    <OpMath type="PLUS"/>
                    <Identifier name="codContacto"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="'"/>
                  </Expression>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="curContactos"/>
                    <FunctionCall name="first"/>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="false"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
          <InstructionCall>
            <Member>
              <Identifier name="curContactos"/>
              <FunctionCall name="setModeAccess">
                <CallArguments>
                  <Value>
                    <Member>
                      <Identifier name="curContactos"/>
                      <Identifier name="Edit"/>
                    </Member>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="curContactos"/>
              <FunctionCall name="refreshBuffer"/>
            </Member>
          </InstructionCall>
          <If>
            <Condition>
              <Expression>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="curContactos"/>
                    <FunctionCall name="valueBuffer">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="cargo"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </OpUnary>
                <Compare type="LOR"/>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="valueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="cargo"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
                <Compare type="EQ"/>
                <Constant delim="&quot;" type="String" value=""/>
              </Expression>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="cargo"/>
                      </Value>
                      <Value>
                        <Identifier name="cargoCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
            </Source>
          </If>
          <If>
            <Condition>
              <Expression>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="curContactos"/>
                    <FunctionCall name="valueBuffer">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="telefono1"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </OpUnary>
                <Compare type="LOR"/>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="valueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="telefono1"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
                <Compare type="EQ"/>
                <Constant delim="&quot;" type="String" value=""/>
              </Expression>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="telefono1"/>
                      </Value>
                      <Value>
                        <Identifier name="telefonoCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
            </Source>
            <Else>
              <Source>
                <If>
                  <Condition>
                    <Expression>
                      <OpUnary type="LNOT">
                        <Member>
                          <Identifier name="curContactos"/>
                          <FunctionCall name="valueBuffer">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="telefono2"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </OpUnary>
                      <Compare type="LOR"/>
                      <Member>
                        <Identifier name="curContactos"/>
                        <FunctionCall name="valueBuffer">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="telefono2"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                      <Compare type="EQ"/>
                      <Constant delim="&quot;" type="String" value=""/>
                    </Expression>
                  </Condition>
                  <Source>
                    <InstructionCall>
                      <Member>
                        <Identifier name="curContactos"/>
                        <FunctionCall name="setValueBuffer">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="telefono2"/>
                            </Value>
                            <Value>
                              <Identifier name="telefonoCon"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </InstructionCall>
                  </Source>
                </If>
              </Source>
            </Else>
          </If>
          <If>
            <Condition>
              <Expression>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="curContactos"/>
                    <FunctionCall name="valueBuffer">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="fax"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </OpUnary>
                <Compare type="LOR"/>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="valueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="fax"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
                <Compare type="EQ"/>
                <Constant delim="&quot;" type="String" value=""/>
              </Expression>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="fax"/>
                      </Value>
                      <Value>
                        <Identifier name="faxCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
            </Source>
          </If>
          <If>
            <Condition>
              <Expression>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="curContactos"/>
                    <FunctionCall name="valueBuffer">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="email"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </OpUnary>
                <Compare type="LOR"/>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="valueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="email"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
                <Compare type="EQ"/>
                <Constant delim="&quot;" type="String" value=""/>
              </Expression>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="email"/>
                      </Value>
                      <Value>
                        <Identifier name="emailCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
            </Source>
          </If>
        </Source>
        <Else>
          <Source>
            <With>
              <Identifier name="curContactos"/>
              <Source>
                <InstructionCall>
                  <FunctionCall name="setModeAccess">
                    <CallArguments>
                      <Value>
                        <Identifier name="Insert"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </InstructionCall>
                <InstructionCall>
                  <FunctionCall name="refreshBuffer"/>
                </InstructionCall>
                <InstructionCall>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="codcontacto"/>
                      </Value>
                      <Value>
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="nextCounter">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="codcontacto"/>
                              </Value>
                              <Value>
                                <Identifier name="this"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </InstructionCall>
                <InstructionCall>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="nombre"/>
                      </Value>
                      <Value>
                        <Identifier name="nombreCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </InstructionCall>
                <InstructionCall>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="email"/>
                      </Value>
                      <Value>
                        <Identifier name="emailCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </InstructionCall>
                <InstructionCall>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="telefono1"/>
                      </Value>
                      <Value>
                        <Identifier name="telefonoCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </InstructionCall>
                <InstructionCall>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="cargo"/>
                      </Value>
                      <Value>
                        <Identifier name="cargoCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </InstructionCall>
                <InstructionCall>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="fax"/>
                      </Value>
                      <Value>
                        <Identifier name="faxCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </InstructionCall>
              </Source>
            </With>
            <If>
              <Condition>
                <Value>
                  <OpUnary type="LNOT">
                    <Member>
                      <Identifier name="curContactos"/>
                      <FunctionCall name="commitBuffer"/>
                    </Member>
                  </OpUnary>
                </Value>
              </Condition>
              <Source>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
            <InstructionUpdate>
              <Identifier name="codContacto"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="valueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="codcontacto"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <If>
              <Condition>
                <Value>
                  <OpUnary type="LNOT">
                    <Identifier name="codContacto"/>
                  </OpUnary>
                </Value>
              </Condition>
              <Source>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
          </Source>
        </Else>
      </If>
      <If>
        <Condition>
          <Expression>
            <OpUnary type="LNOT">
              <Identifier name="idAgenda"/>
            </OpUnary>
            <Compare type="LOR"/>
            <Identifier name="idAgenda"/>
            <Compare type="EQ"/>
            <Constant type="Number" value="0"/>
          </Expression>
        </Condition>
        <Source>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="util"/>
                    <FunctionCall name="sqlSelect">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="contactosclientes"/>
                        </Value>
                        <Value>
                          <Constant delim="&quot;" type="String" value="id"/>
                        </Value>
                        <Expression>
                          <Constant delim="&quot;" type="String" value="codcontacto = '"/>
                          <OpMath type="PLUS"/>
                          <Identifier name="codContacto"/>
                          <OpMath type="PLUS"/>
                          <Constant delim="&quot;" type="String" value="' AND codcliente = '"/>
                          <OpMath type="PLUS"/>
                          <Identifier name="codCliente"/>
                          <OpMath type="PLUS"/>
                          <Constant delim="&quot;" type="String" value="'"/>
                        </Expression>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="curAgenda"/>
                  <FunctionCall name="setModeAccess">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="curAgenda"/>
                          <Identifier name="Insert"/>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="curAgenda"/>
                  <FunctionCall name="refreshBuffer"/>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="curAgenda"/>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="codcliente"/>
                      </Value>
                      <Value>
                        <Identifier name="codCliente"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="curAgenda"/>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="codcontacto"/>
                      </Value>
                      <Value>
                        <Identifier name="codContacto"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <If>
                <Condition>
                  <Value>
                    <OpUnary type="LNOT">
                      <Member>
                        <Identifier name="curAgenda"/>
                        <FunctionCall name="commitBuffer"/>
                      </Member>
                    </OpUnary>
                  </Value>
                </Condition>
                <Source>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
            </Source>
          </If>
        </Source>
        <Else>
          <Source>
            <InstructionCall>
              <Member>
                <Identifier name="curAgenda"/>
                <FunctionCall name="select">
                  <CallArguments>
                    <Expression>
                      <Constant delim="&quot;" type="String" value="id = "/>
                      <OpMath type="PLUS"/>
                      <Identifier name="idAgenda"/>
                    </Expression>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <If>
              <Condition>
                <Value>
                  <OpUnary type="LNOT">
                    <Member>
                      <Identifier name="curAgenda"/>
                      <FunctionCall name="first"/>
                    </Member>
                  </OpUnary>
                </Value>
              </Condition>
              <Source>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
            <InstructionCall>
              <Member>
                <Identifier name="curAgenda"/>
                <FunctionCall name="setModeAccess">
                  <CallArguments>
                    <Value>
                      <Member>
                        <Identifier name="curAgenda"/>
                        <Identifier name="Edit"/>
                      </Member>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="curAgenda"/>
                <FunctionCall name="refreshBuffer"/>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="curAgenda"/>
                <FunctionCall name="setValueBuffer">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="codcontacto"/>
                    </Value>
                    <Value>
                      <Identifier name="codContacto"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <If>
              <Condition>
                <Value>
                  <OpUnary type="LNOT">
                    <Member>
                      <Identifier name="curAgenda"/>
                      <FunctionCall name="commitBuffer"/>
                    </Member>
                  </OpUnary>
                </Value>
              </Condition>
              <Source>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
          </Source>
        </Else>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="codContacto"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_lanzarEvento" returns="Boolean">
    <Arguments>
      <Variable name="cursor" type="FLSqlCursor"/>
      <Variable name="evento" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="datosEvento" type="Array">
          <Value>
            <Constant>
              <list_constant arg00="LBRACKET" arg01="callargs" arg02="RBRACKET"/>
            </Constant>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionUpdate>
        <ArrayMember>
          <Identifier name="datosEvento"/>
          <Value>
            <Constant delim="&quot;" type="String" value="tipoobjeto"/>
          </Value>
        </ArrayMember>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Member>
            <Identifier name="cursor"/>
            <FunctionCall name="table"/>
          </Member>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <ArrayMember>
          <Identifier name="datosEvento"/>
          <Value>
            <Constant delim="&quot;" type="String" value="idobjeto"/>
          </Value>
        </ArrayMember>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Member>
            <Identifier name="cursor"/>
            <FunctionCall name="valueBuffer">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="cursor"/>
                    <FunctionCall name="primaryKey"/>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Member>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <ArrayMember>
          <Identifier name="datosEvento"/>
          <Value>
            <Constant delim="&quot;" type="String" value="evento"/>
          </Value>
        </ArrayMember>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Identifier name="evento"/>
        </Value>
      </InstructionUpdate>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="flcolaproc"/>
                <Identifier name="iface"/>
                <FunctionCall name="pub_procesarEvento">
                  <CallArguments>
                    <Value>
                      <Identifier name="datosEvento"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_actualizarContactosDeAgendaProv20070702" returns="String">
    <Arguments>
      <Variable name="codProveedor" type="String"/>
      <Variable name="codContacto" type="String"/>
      <Variable name="nombreCon" type="String"/>
      <Variable name="cargoCon" type="String"/>
      <Variable name="telefonoCon" type="String"/>
      <Variable name="faxCon" type="String"/>
      <Variable name="emailCon" type="String"/>
      <Variable name="idAgenda" type="Number"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil"/>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="curContactos" type="FLSqlCursor">
          <Value>
            <New>
              <FunctionCall name="FLSqlCursor">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="crm_contactos"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="curAgenda" type="FLSqlCursor">
          <Value>
            <New>
              <FunctionCall name="FLSqlCursor">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="contactosproveedores"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Expression>
            <Identifier name="codContacto"/>
            <Compare type="LAND"/>
            <Identifier name="codContacto"/>
            <Compare type="NE"/>
            <Constant delim="&quot;" type="String" value=""/>
          </Expression>
        </Condition>
        <Source>
          <InstructionCall>
            <Member>
              <Identifier name="curContactos"/>
              <FunctionCall name="select">
                <CallArguments>
                  <Expression>
                    <Constant delim="&quot;" type="String" value="codcontacto = '"/>
                    <OpMath type="PLUS"/>
                    <Identifier name="codContacto"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="'"/>
                  </Expression>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="curContactos"/>
                    <FunctionCall name="first"/>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionFlow type="RETURN">
                <Value>
                  <Identifier name="false"/>
                </Value>
              </InstructionFlow>
            </Source>
          </If>
          <InstructionCall>
            <Member>
              <Identifier name="curContactos"/>
              <FunctionCall name="setModeAccess">
                <CallArguments>
                  <Value>
                    <Member>
                      <Identifier name="curContactos"/>
                      <Identifier name="Edit"/>
                    </Member>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionCall>
            <Member>
              <Identifier name="curContactos"/>
              <FunctionCall name="refreshBuffer"/>
            </Member>
          </InstructionCall>
          <If>
            <Condition>
              <Expression>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="curContactos"/>
                    <FunctionCall name="valueBuffer">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="cargo"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </OpUnary>
                <Compare type="LOR"/>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="valueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="cargo"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
                <Compare type="EQ"/>
                <Constant delim="&quot;" type="String" value=""/>
              </Expression>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="cargo"/>
                      </Value>
                      <Value>
                        <Identifier name="cargoCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
            </Source>
          </If>
          <If>
            <Condition>
              <Expression>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="curContactos"/>
                    <FunctionCall name="valueBuffer">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="telefono1"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </OpUnary>
                <Compare type="LOR"/>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="valueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="telefono1"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
                <Compare type="EQ"/>
                <Constant delim="&quot;" type="String" value=""/>
              </Expression>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="telefono1"/>
                      </Value>
                      <Value>
                        <Identifier name="telefonoCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
            </Source>
            <Else>
              <Source>
                <If>
                  <Condition>
                    <Expression>
                      <OpUnary type="LNOT">
                        <Member>
                          <Identifier name="curContactos"/>
                          <FunctionCall name="valueBuffer">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="telefono2"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </OpUnary>
                      <Compare type="LOR"/>
                      <Member>
                        <Identifier name="curContactos"/>
                        <FunctionCall name="valueBuffer">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="telefono2"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                      <Compare type="EQ"/>
                      <Constant delim="&quot;" type="String" value=""/>
                    </Expression>
                  </Condition>
                  <Source>
                    <InstructionCall>
                      <Member>
                        <Identifier name="curContactos"/>
                        <FunctionCall name="setValueBuffer">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="telefono2"/>
                            </Value>
                            <Value>
                              <Identifier name="telefonoCon"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </InstructionCall>
                  </Source>
                </If>
              </Source>
            </Else>
          </If>
          <If>
            <Condition>
              <Expression>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="curContactos"/>
                    <FunctionCall name="valueBuffer">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="fax"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </OpUnary>
                <Compare type="LOR"/>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="valueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="fax"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
                <Compare type="EQ"/>
                <Constant delim="&quot;" type="String" value=""/>
              </Expression>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="fax"/>
                      </Value>
                      <Value>
                        <Identifier name="faxCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
            </Source>
          </If>
          <If>
            <Condition>
              <Expression>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="curContactos"/>
                    <FunctionCall name="valueBuffer">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="email"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </OpUnary>
                <Compare type="LOR"/>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="valueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="email"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
                <Compare type="EQ"/>
                <Constant delim="&quot;" type="String" value=""/>
              </Expression>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="email"/>
                      </Value>
                      <Value>
                        <Identifier name="emailCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
            </Source>
          </If>
        </Source>
        <Else>
          <Source>
            <With>
              <Identifier name="curContactos"/>
              <Source>
                <InstructionCall>
                  <FunctionCall name="setModeAccess">
                    <CallArguments>
                      <Value>
                        <Identifier name="Insert"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </InstructionCall>
                <InstructionCall>
                  <FunctionCall name="refreshBuffer"/>
                </InstructionCall>
                <InstructionCall>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="codcontacto"/>
                      </Value>
                      <Value>
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="nextCounter">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="codcontacto"/>
                              </Value>
                              <Value>
                                <Identifier name="this"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </InstructionCall>
                <InstructionCall>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="nombre"/>
                      </Value>
                      <Value>
                        <Identifier name="nombreCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </InstructionCall>
                <InstructionCall>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="email"/>
                      </Value>
                      <Value>
                        <Identifier name="emailCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </InstructionCall>
                <InstructionCall>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="telefono1"/>
                      </Value>
                      <Value>
                        <Identifier name="telefonoCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </InstructionCall>
                <InstructionCall>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="cargo"/>
                      </Value>
                      <Value>
                        <Identifier name="cargoCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </InstructionCall>
                <InstructionCall>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="fax"/>
                      </Value>
                      <Value>
                        <Identifier name="faxCon"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </InstructionCall>
              </Source>
            </With>
            <If>
              <Condition>
                <Value>
                  <OpUnary type="LNOT">
                    <Member>
                      <Identifier name="curContactos"/>
                      <FunctionCall name="commitBuffer"/>
                    </Member>
                  </OpUnary>
                </Value>
              </Condition>
              <Source>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
            <InstructionUpdate>
              <Identifier name="codContacto"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="curContactos"/>
                  <FunctionCall name="valueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="codcontacto"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <If>
              <Condition>
                <Value>
                  <OpUnary type="LNOT">
                    <Identifier name="codContacto"/>
                  </OpUnary>
                </Value>
              </Condition>
              <Source>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
          </Source>
        </Else>
      </If>
      <If>
        <Condition>
          <Expression>
            <OpUnary type="LNOT">
              <Identifier name="idAgenda"/>
            </OpUnary>
            <Compare type="LOR"/>
            <Identifier name="idAgenda"/>
            <Compare type="EQ"/>
            <Constant type="Number" value="0"/>
          </Expression>
        </Condition>
        <Source>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Member>
                    <Identifier name="util"/>
                    <FunctionCall name="sqlSelect">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="contactosproveedores"/>
                        </Value>
                        <Value>
                          <Constant delim="&quot;" type="String" value="id"/>
                        </Value>
                        <Expression>
                          <Constant delim="&quot;" type="String" value="codcontacto = '"/>
                          <OpMath type="PLUS"/>
                          <Identifier name="codContacto"/>
                          <OpMath type="PLUS"/>
                          <Constant delim="&quot;" type="String" value="' AND codproveedor = '"/>
                          <OpMath type="PLUS"/>
                          <Identifier name="codProveedor"/>
                          <OpMath type="PLUS"/>
                          <Constant delim="&quot;" type="String" value="'"/>
                        </Expression>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="curAgenda"/>
                  <FunctionCall name="setModeAccess">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="curAgenda"/>
                          <Identifier name="Insert"/>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="curAgenda"/>
                  <FunctionCall name="refreshBuffer"/>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="curAgenda"/>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="codproveedor"/>
                      </Value>
                      <Value>
                        <Identifier name="codProveedor"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <InstructionCall>
                <Member>
                  <Identifier name="curAgenda"/>
                  <FunctionCall name="setValueBuffer">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="codcontacto"/>
                      </Value>
                      <Value>
                        <Identifier name="codContacto"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </InstructionCall>
              <If>
                <Condition>
                  <Value>
                    <OpUnary type="LNOT">
                      <Member>
                        <Identifier name="curAgenda"/>
                        <FunctionCall name="commitBuffer"/>
                      </Member>
                    </OpUnary>
                  </Value>
                </Condition>
                <Source>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
            </Source>
          </If>
        </Source>
        <Else>
          <Source>
            <InstructionCall>
              <Member>
                <Identifier name="curAgenda"/>
                <FunctionCall name="select">
                  <CallArguments>
                    <Expression>
                      <Constant delim="&quot;" type="String" value="id = "/>
                      <OpMath type="PLUS"/>
                      <Identifier name="idAgenda"/>
                    </Expression>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <If>
              <Condition>
                <Value>
                  <OpUnary type="LNOT">
                    <Member>
                      <Identifier name="curAgenda"/>
                      <FunctionCall name="first"/>
                    </Member>
                  </OpUnary>
                </Value>
              </Condition>
              <Source>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
            <InstructionCall>
              <Member>
                <Identifier name="curAgenda"/>
                <FunctionCall name="setModeAccess">
                  <CallArguments>
                    <Value>
                      <Member>
                        <Identifier name="curAgenda"/>
                        <Identifier name="Edit"/>
                      </Member>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="curAgenda"/>
                <FunctionCall name="refreshBuffer"/>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="curAgenda"/>
                <FunctionCall name="setValueBuffer">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="codcontacto"/>
                    </Value>
                    <Value>
                      <Identifier name="codContacto"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <If>
              <Condition>
                <Value>
                  <OpUnary type="LNOT">
                    <Member>
                      <Identifier name="curAgenda"/>
                      <FunctionCall name="commitBuffer"/>
                    </Member>
                  </OpUnary>
                </Value>
              </Condition>
              <Source>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
          </Source>
        </Else>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="codContacto"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_elegirOpcion" returns="Number">
    <Arguments>
      <Variable name="opciones" type="Array"/>
      <Variable name="titulo" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="dialog" type="Dialog">
          <Value>
            <New>
              <Identifier name="Dialog"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionUpdate>
        <Member>
          <Identifier name="dialog"/>
          <Identifier name="okButtonText"/>
        </Member>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Member>
            <Identifier name="util"/>
            <FunctionCall name="translate">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="scripts"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="Aceptar"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Member>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Member>
          <Identifier name="dialog"/>
          <Identifier name="cancelButtonText"/>
        </Member>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Member>
            <Identifier name="util"/>
            <FunctionCall name="translate">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="scripts"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="Cancelar"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Member>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Member>
          <Identifier name="dialog"/>
          <Identifier name="title"/>
        </Member>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Identifier name="titulo"/>
        </Value>
      </InstructionUpdate>
      <DeclarationBlock mode="VAR">
        <Variable name="bgroup" type="GroupBox">
          <Value>
            <New>
              <Identifier name="GroupBox"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionCall>
        <Member>
          <Identifier name="dialog"/>
          <FunctionCall name="add">
            <CallArguments>
              <Value>
                <Identifier name="bgroup"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <DeclarationBlock mode="VAR">
        <Variable name="rB" type="Array">
          <Value>
            <Constant>
              <list_constant arg00="LBRACKET" arg01="callargs" arg02="RBRACKET"/>
            </Constant>
          </Value>
        </Variable>
      </DeclarationBlock>
      <For>
        <ForInitialize>
          <Variable name="i" type="Number">
            <Value>
              <Constant type="Number" value="0"/>
            </Value>
          </Variable>
        </ForInitialize>
        <ForCompare>
          <Expression>
            <Identifier name="i"/>
            <Compare type="LT"/>
            <Member>
              <Identifier name="opciones"/>
              <Identifier name="length"/>
            </Member>
          </Expression>
        </ForCompare>
        <ForIncrement>
          <InlineUpdate type="PLUSPLUS" mode="read-update">
            <Identifier name="i"/>
          </InlineUpdate>
        </ForIncrement>
        <Source>
          <InstructionUpdate>
            <ArrayMember>
              <Identifier name="rB"/>
              <Value>
                <Identifier name="i"/>
              </Value>
            </ArrayMember>
            <OpUpdate type="EQUALS"/>
            <Value>
              <New>
                <Identifier name="RadioButton"/>
              </New>
            </Value>
          </InstructionUpdate>
          <InstructionCall>
            <Member>
              <Identifier name="bgroup"/>
              <FunctionCall name="add">
                <CallArguments>
                  <Value>
                    <ArrayMember>
                      <Identifier name="rB"/>
                      <Value>
                        <Identifier name="i"/>
                      </Value>
                    </ArrayMember>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionUpdate>
            <Member>
              <ArrayMember>
                <Identifier name="rB"/>
                <Value>
                  <Identifier name="i"/>
                </Value>
              </ArrayMember>
              <Identifier name="text"/>
            </Member>
            <OpUpdate type="EQUALS"/>
            <Value>
              <ArrayMember>
                <Identifier name="opciones"/>
                <Value>
                  <Identifier name="i"/>
                </Value>
              </ArrayMember>
            </Value>
          </InstructionUpdate>
          <If>
            <Condition>
              <Expression>
                <Identifier name="i"/>
                <Compare type="EQ"/>
                <Constant type="Number" value="0"/>
              </Expression>
            </Condition>
            <Source>
              <InstructionUpdate>
                <Member>
                  <ArrayMember>
                    <Identifier name="rB"/>
                    <Value>
                      <Identifier name="i"/>
                    </Value>
                  </ArrayMember>
                  <Identifier name="checked"/>
                </Member>
                <OpUpdate type="EQUALS"/>
                <Value>
                  <Identifier name="true"/>
                </Value>
              </InstructionUpdate>
            </Source>
            <Else>
              <Source>
                <InstructionUpdate>
                  <Member>
                    <ArrayMember>
                      <Identifier name="rB"/>
                      <Value>
                        <Identifier name="i"/>
                      </Value>
                    </ArrayMember>
                    <Identifier name="checked"/>
                  </Member>
                  <OpUpdate type="EQUALS"/>
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionUpdate>
              </Source>
            </Else>
          </If>
          <If>
            <Condition>
              <Expression>
                <Parentheses>
                  <Identifier name="i"/>
                  <OpMath type="PLUS"/>
                  <Constant type="Number" value="1"/>
                </Parentheses>
                <OpMath type="MOD"/>
                <Constant type="Number" value="25"/>
                <Compare type="EQ"/>
                <Constant type="Number" value="0"/>
              </Expression>
            </Condition>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="bgroup"/>
                  <FunctionCall name="newColumn"/>
                </Member>
              </InstructionCall>
            </Source>
          </If>
        </Source>
      </For>
      <If>
        <Condition>
          <Value>
            <Member>
              <Identifier name="dialog"/>
              <FunctionCall name="exec"/>
            </Member>
          </Value>
        </Condition>
        <Source>
          <For>
            <ForInitialize>
              <Variable name="i" type="Number">
                <Value>
                  <Constant type="Number" value="0"/>
                </Value>
              </Variable>
            </ForInitialize>
            <ForCompare>
              <Expression>
                <Identifier name="i"/>
                <Compare type="LT"/>
                <Member>
                  <Identifier name="opciones"/>
                  <Identifier name="length"/>
                </Member>
              </Expression>
            </ForCompare>
            <ForIncrement>
              <InlineUpdate type="PLUSPLUS" mode="read-update">
                <Identifier name="i"/>
              </InlineUpdate>
            </ForIncrement>
            <Source>
              <If>
                <Condition>
                  <Expression>
                    <Member>
                      <ArrayMember>
                        <Identifier name="rB"/>
                        <Value>
                          <Identifier name="i"/>
                        </Value>
                      </ArrayMember>
                      <Identifier name="checked"/>
                    </Member>
                    <Compare type="EQ"/>
                    <Identifier name="true"/>
                  </Expression>
                </Condition>
                <Source>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="i"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
            </Source>
          </For>
        </Source>
        <Else>
          <Source>
            <InstructionFlow type="RETURN">
              <Value>
                <OpUnary type="MINUS">
                  <Constant type="Number" value="1"/>
                </OpUnary>
              </Value>
            </InstructionFlow>
          </Source>
        </Else>
      </If>
    </Source>
  </Function>
  <Function name="oficial_textoFecha" returns="String">
    <Arguments>
      <Variable name="fecha" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil"/>
      </DeclarationBlock>
      <If>
        <Condition>
          <Expression>
            <OpUnary type="LNOT">
              <Identifier name="fecha"/>
            </OpUnary>
            <Compare type="LOR"/>
            <Identifier name="fecha"/>
            <Compare type="EQ"/>
            <Constant delim="&quot;" type="String" value=""/>
          </Expression>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Constant delim="&quot;" type="String" value=""/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="mes" type="String">
          <Value>
            <Member>
              <Identifier name="fecha"/>
              <FunctionCall name="mid">
                <CallArguments>
                  <Value>
                    <Constant type="Number" value="5"/>
                  </Value>
                  <Value>
                    <Constant type="Number" value="2"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="textoMes" type="String"/>
      </DeclarationBlock>
      <Switch>
        <Condition>
          <Value>
            <Identifier name="mes"/>
          </Value>
        </Condition>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="01"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="textoMes"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Enero"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="02"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="textoMes"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Febrero"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="03"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="textoMes"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Marzo"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="04"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="textoMes"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Abril"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="05"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="textoMes"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Mayo"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="06"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="textoMes"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Junio"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="07"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="textoMes"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Julio"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="08"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="textoMes"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Agosto"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="09"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="textoMes"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Septiembre"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="10"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="textoMes"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Octubre"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="11"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="textoMes"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Noviembre"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="12"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="textoMes"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Diciembre"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
      </Switch>
      <DeclarationBlock mode="VAR">
        <Variable name="dia" type="String">
          <Value>
            <FunctionCall name="parseInt">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="fecha"/>
                    <FunctionCall name="mid">
                      <CallArguments>
                        <Value>
                          <Constant type="Number" value="8"/>
                        </Value>
                        <Value>
                          <Constant type="Number" value="2"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="ano" type="String">
          <Value>
            <FunctionCall name="parseInt">
              <CallArguments>
                <Value>
                  <Member>
                    <Identifier name="fecha"/>
                    <FunctionCall name="mid">
                      <CallArguments>
                        <Value>
                          <Constant type="Number" value="0"/>
                        </Value>
                        <Value>
                          <Constant type="Number" value="4"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="texto" type="String">
          <Value>
            <Member>
              <Identifier name="util"/>
              <FunctionCall name="translate">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="scripts"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="%1 de %2 de %3"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
              <FunctionCall name="arg">
                <CallArguments>
                  <Value>
                    <Member>
                      <Identifier name="dia"/>
                      <FunctionCall name="toString"/>
                    </Member>
                  </Value>
                </CallArguments>
              </FunctionCall>
              <FunctionCall name="arg">
                <CallArguments>
                  <Value>
                    <Identifier name="textoMes"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
              <FunctionCall name="arg">
                <CallArguments>
                  <Value>
                    <Identifier name="ano"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="texto"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_validarNifIva" returns="String">
    <Arguments>
      <Variable name="nifIva" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <Identifier name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="error" type="String"/>
      </DeclarationBlock>
      <If>
        <Condition>
          <Expression>
            <OpUnary type="LNOT">
              <Identifier name="nifIva"/>
            </OpUnary>
            <Compare type="LOR"/>
            <Identifier name="nifIva"/>
            <Compare type="EQ"/>
            <Constant delim="&quot;" type="String" value=""/>
          </Expression>
        </Condition>
        <Source>
          <InstructionUpdate>
            <Identifier name="error"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="util"/>
                <FunctionCall name="translate">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="scripts"/>
                    </Value>
                    <Value>
                      <Constant delim="&quot;" type="String" value="No se ha establecido el NIF/IVA"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="error"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="codPais" type="String">
          <Value>
            <Member>
              <Identifier name="nifIva"/>
              <FunctionCall name="left">
                <CallArguments>
                  <Value>
                    <Constant type="Number" value="2"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="pais" type="String"/>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="longPosibles" type="Array"/>
      </DeclarationBlock>
      <Switch>
        <Condition>
          <Value>
            <Identifier name="codPais"/>
          </Value>
        </Condition>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="DE"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="9"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Alemania"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="AT"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="9"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Austria"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="BE"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="9"/>
                    </Value>
                    <Value>
                      <Constant type="Number" value="10"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="B&#233;lgica"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="BG"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="9"/>
                    </Value>
                    <Value>
                      <Constant type="Number" value="10"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Bulgaria"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="CY"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="9"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Chipre"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="CZ"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="9"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Chequia"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="DK"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="8"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Dinamarca"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="EE"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="9"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Estonia"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="FI"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="8"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Finlandia"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="FR"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="11"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Francia"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="EL"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="9"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Grecia"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="GB"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="5"/>
                    </Value>
                    <Value>
                      <Constant type="Number" value="9"/>
                    </Value>
                    <Value>
                      <Constant type="Number" value="12"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Gran Breta&#241;a"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="NL"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="12"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Holanda"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="HU"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="8"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Hungr&#237;a"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="IT"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="11"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Gran Breta&#241;a"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="IE"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="8"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Irlanda"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="LT"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="9"/>
                    </Value>
                    <Value>
                      <Constant type="Number" value="12"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Lituania"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="LU"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="8"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Luxemburgo"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="PL"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="10"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Polonia"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="PT"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="9"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Portugal"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="RO"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="2"/>
                    </Value>
                    <Value>
                      <Constant type="Number" value="3"/>
                    </Value>
                    <Value>
                      <Constant type="Number" value="4"/>
                    </Value>
                    <Value>
                      <Constant type="Number" value="5"/>
                    </Value>
                    <Value>
                      <Constant type="Number" value="6"/>
                    </Value>
                    <Value>
                      <Constant type="Number" value="7"/>
                    </Value>
                    <Value>
                      <Constant type="Number" value="8"/>
                    </Value>
                    <Value>
                      <Constant type="Number" value="9"/>
                    </Value>
                    <Value>
                      <Constant type="Number" value="10"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Ruman&#237;a"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="SE"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="12"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Suecia"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="SI"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="8"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Eslovenia"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="SK"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="longPosibles"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant>
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="10"/>
                    </Value>
                  </CallArguments>
                </Constant>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="pais"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="Eslovaquia"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <CaseDefault>
          <Source>
            <InstructionUpdate>
              <Identifier name="error"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="translate">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="scripts"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="El c&#243;digo de pa&#237;s %1 no es correcto"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                  <FunctionCall name="arg">
                    <CallArguments>
                      <Value>
                        <Identifier name="codPais"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="RETURN">
              <Value>
                <Identifier name="error"/>
              </Value>
            </InstructionFlow>
          </Source>
        </CaseDefault>
      </Switch>
      <DeclarationBlock mode="VAR">
        <Variable name="longOk" type="Boolean">
          <Value>
            <Identifier name="false"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="longitud" type="Number">
          <Expression>
            <Member>
              <Identifier name="nifIva"/>
              <Identifier name="length"/>
            </Member>
            <OpMath type="MINUS"/>
            <Constant type="Number" value="2"/>
          </Expression>
        </Variable>
      </DeclarationBlock>
      <For>
        <ForInitialize>
          <Variable name="i" type="Number">
            <Value>
              <Constant type="Number" value="0"/>
            </Value>
          </Variable>
        </ForInitialize>
        <ForCompare>
          <Expression>
            <Identifier name="i"/>
            <Compare type="LT"/>
            <Member>
              <Identifier name="longPosibles"/>
              <Identifier name="length"/>
            </Member>
          </Expression>
        </ForCompare>
        <ForIncrement>
          <InlineUpdate type="PLUSPLUS" mode="read-update">
            <Identifier name="i"/>
          </InlineUpdate>
        </ForIncrement>
        <Source>
          <If>
            <Condition>
              <Expression>
                <Identifier name="longitud"/>
                <Compare type="EQ"/>
                <ArrayMember>
                  <Identifier name="longPosibles"/>
                  <Value>
                    <Identifier name="i"/>
                  </Value>
                </ArrayMember>
              </Expression>
            </Condition>
            <Source>
              <InstructionUpdate>
                <Identifier name="longOk"/>
                <OpUpdate type="EQUALS"/>
                <Value>
                  <Identifier name="true"/>
                </Value>
              </InstructionUpdate>
            </Source>
          </If>
        </Source>
      </For>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Identifier name="longOk"/>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <DeclarationBlock mode="VAR">
            <Variable name="longTotales" type="Array">
              <Value>
                <New>
                  <FunctionCall name="Array">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="longPosibles"/>
                          <Identifier name="length"/>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </New>
              </Value>
            </Variable>
          </DeclarationBlock>
          <For>
            <ForInitialize>
              <Variable name="i" type="Number">
                <Value>
                  <Constant type="Number" value="0"/>
                </Value>
              </Variable>
            </ForInitialize>
            <ForCompare>
              <Expression>
                <Identifier name="i"/>
                <Compare type="LT"/>
                <Member>
                  <Identifier name="longPosibles"/>
                  <Identifier name="length"/>
                </Member>
              </Expression>
            </ForCompare>
            <ForIncrement>
              <InlineUpdate type="PLUSPLUS" mode="read-update">
                <Identifier name="i"/>
              </InlineUpdate>
            </ForIncrement>
            <Source>
              <InstructionUpdate>
                <ArrayMember>
                  <Identifier name="longTotales"/>
                  <Value>
                    <Identifier name="i"/>
                  </Value>
                </ArrayMember>
                <OpUpdate type="EQUALS"/>
                <Expression>
                  <ArrayMember>
                    <Identifier name="longPosibles"/>
                    <Value>
                      <Identifier name="i"/>
                    </Value>
                  </ArrayMember>
                  <OpMath type="PLUS"/>
                  <Constant type="Number" value="2"/>
                </Expression>
              </InstructionUpdate>
            </Source>
          </For>
          <InstructionUpdate>
            <Identifier name="error"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="util"/>
                <FunctionCall name="translate">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="scripts"/>
                    </Value>
                    <Value>
                      <Constant delim="&quot;" type="String" value="Error en la validaci&#243;n del NIF/IVA %1 para el pa&#237;s %2:\nLas longitudes admitidas son: %3"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
                <FunctionCall name="arg">
                  <CallArguments>
                    <Value>
                      <Identifier name="nifIva"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
                <FunctionCall name="arg">
                  <CallArguments>
                    <Value>
                      <Identifier name="pais"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
                <FunctionCall name="arg">
                  <CallArguments>
                    <Value>
                      <Member>
                        <Identifier name="longTotales"/>
                        <FunctionCall name="join">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value=", "/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="error"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Constant delim="&quot;" type="String" value="OK"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_ejecutarComandoAsincrono" returns="Array">
    <Arguments>
      <Variable name="comando" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="res" type="Array">
          <Value>
            <Constant>
              <list_constant arg00="LBRACKET" arg01="callargs" arg02="RBRACKET"/>
            </Constant>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionCall>
        <Member>
          <Identifier name="Process"/>
          <FunctionCall name="execute">
            <CallArguments>
              <Value>
                <Identifier name="comando"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <If>
        <Condition>
          <Expression>
            <Member>
              <Identifier name="Process"/>
              <Identifier name="stderr"/>
            </Member>
            <Compare type="NE"/>
            <Constant delim="&quot;" type="String" value=""/>
          </Expression>
        </Condition>
        <Source>
          <InstructionUpdate>
            <ArrayMember>
              <Identifier name="res"/>
              <Value>
                <Constant delim="&quot;" type="String" value="ok"/>
              </Value>
            </ArrayMember>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionUpdate>
          <InstructionUpdate>
            <ArrayMember>
              <Identifier name="res"/>
              <Value>
                <Constant delim="&quot;" type="String" value="salida"/>
              </Value>
            </ArrayMember>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="Process"/>
                <Identifier name="stderr"/>
              </Member>
            </Value>
          </InstructionUpdate>
        </Source>
        <Else>
          <Source>
            <InstructionUpdate>
              <ArrayMember>
                <Identifier name="res"/>
                <Value>
                  <Constant delim="&quot;" type="String" value="ok"/>
                </Value>
              </ArrayMember>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Identifier name="true"/>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <ArrayMember>
                <Identifier name="res"/>
                <Value>
                  <Constant delim="&quot;" type="String" value="salida"/>
                </Value>
              </ArrayMember>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="Process"/>
                  <Identifier name="stdout"/>
                </Member>
              </Value>
            </InstructionUpdate>
          </Source>
        </Else>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="res"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_globalInit">
    <Source>
      <If>
        <Condition>
          <Value>
            <Member>
              <Identifier name="sys"/>
              <FunctionCall name="isLoadedModule">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="flcolaproc"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Condition>
        <Source>
          <TryCatch>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="flcolaproc"/>
                  <Identifier name="iface"/>
                  <FunctionCall name="pub_globalInit"/>
                </Member>
              </InstructionCall>
            </Source>
            <Identifier name="e"/>
            <Source/>
          </TryCatch>
        </Source>
      </If>
      <If>
        <Condition>
          <Value>
            <Member>
              <Identifier name="sys"/>
              <FunctionCall name="isLoadedModule">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="flcolamens"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Condition>
        <Source>
          <TryCatch>
            <Source>
              <InstructionCall>
                <Member>
                  <Identifier name="flcolamens"/>
                  <Identifier name="iface"/>
                  <FunctionCall name="pub_globalInit"/>
                </Member>
              </InstructionCall>
            </Source>
            <Identifier name="e"/>
            <Source/>
          </TryCatch>
        </Source>
      </If>
    </Source>
  </Function>
  <Function name="oficial_existeEnvioMail" returns="Boolean">
    <Source>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="false"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_validarProvincia" returns="Boolean">
    <Arguments>
      <Variable name="cursor" type="FLSqlCursor"/>
      <Variable name="mtd" type="Array"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Identifier name="mtd"/>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionUpdate>
            <Identifier name="mtd"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Constant>
                <list_constant arg00="LBRACKET" arg01="callargs" arg02="RBRACKET"/>
              </Constant>
            </Value>
          </InstructionUpdate>
          <InstructionUpdate>
            <ArrayMember>
              <Identifier name="mtd"/>
              <Value>
                <Constant delim="&quot;" type="String" value="idprovincia"/>
              </Value>
            </ArrayMember>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Constant delim="&quot;" type="String" value="idprovincia"/>
            </Value>
          </InstructionUpdate>
          <InstructionUpdate>
            <ArrayMember>
              <Identifier name="mtd"/>
              <Value>
                <Constant delim="&quot;" type="String" value="provincia"/>
              </Value>
            </ArrayMember>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Constant delim="&quot;" type="String" value="provincia"/>
            </Value>
          </InstructionUpdate>
          <InstructionUpdate>
            <ArrayMember>
              <Identifier name="mtd"/>
              <Value>
                <Constant delim="&quot;" type="String" value="codpais"/>
              </Value>
            </ArrayMember>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Constant delim="&quot;" type="String" value="codpais"/>
            </Value>
          </InstructionUpdate>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="idProvincia" type="String">
          <Value>
            <Member>
              <Identifier name="cursor"/>
              <FunctionCall name="valueBuffer">
                <CallArguments>
                  <Value>
                    <ArrayMember>
                      <Identifier name="mtd"/>
                      <Value>
                        <Constant delim="&quot;" type="String" value="idprovincia"/>
                      </Value>
                    </ArrayMember>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="provincia" type="String">
          <Value>
            <Member>
              <Identifier name="cursor"/>
              <FunctionCall name="valueBuffer">
                <CallArguments>
                  <Value>
                    <ArrayMember>
                      <Identifier name="mtd"/>
                      <Value>
                        <Constant delim="&quot;" type="String" value="provincia"/>
                      </Value>
                    </ArrayMember>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="codPais" type="String">
          <Value>
            <Member>
              <Identifier name="cursor"/>
              <FunctionCall name="valueBuffer">
                <CallArguments>
                  <Value>
                    <ArrayMember>
                      <Identifier name="mtd"/>
                      <Value>
                        <Constant delim="&quot;" type="String" value="codpais"/>
                      </Value>
                    </ArrayMember>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <Member>
              <Identifier name="util"/>
              <FunctionCall name="sqlSelect">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="paises"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="validarprov"/>
                  </Value>
                  <Expression>
                    <Constant delim="&quot;" type="String" value="codpais = '"/>
                    <OpMath type="PLUS"/>
                    <Identifier name="codPais"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="'"/>
                  </Expression>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Condition>
        <Source>
          <If>
            <Condition>
              <Expression>
                <OpUnary type="LNOT">
                  <Identifier name="idProvincia"/>
                </OpUnary>
                <Compare type="LOR"/>
                <Identifier name="idProvincia"/>
                <Compare type="EQ"/>
                <Constant delim="&quot;" type="String" value=""/>
              </Expression>
            </Condition>
            <Source>
              <InstructionUpdate>
                <Identifier name="idProvincia"/>
                <OpUpdate type="EQUALS"/>
                <Value>
                  <Identifier name="false"/>
                </Value>
              </InstructionUpdate>
              <If>
                <Condition>
                  <Expression>
                    <Identifier name="provincia"/>
                    <Compare type="LAND"/>
                    <Identifier name="provincia"/>
                    <Compare type="NE"/>
                    <Constant delim="&quot;" type="String" value=""/>
                    <Compare type="LAND"/>
                    <Identifier name="provincia"/>
                    <Compare type="NE"/>
                    <Identifier name="undefined"/>
                  </Expression>
                </Condition>
                <Source>
                  <InstructionUpdate>
                    <Identifier name="idProvincia"/>
                    <OpUpdate type="EQUALS"/>
                    <Value>
                      <Member>
                        <Identifier name="util"/>
                        <FunctionCall name="sqlSelect">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="provincias"/>
                            </Value>
                            <Value>
                              <Constant delim="&quot;" type="String" value="idprovincia"/>
                            </Value>
                            <Expression>
                              <Constant delim="&quot;" type="String" value="UPPER(provincia) = '"/>
                              <OpMath type="PLUS"/>
                              <Member>
                                <Identifier name="provincia"/>
                                <FunctionCall name="toUpperCase"/>
                              </Member>
                              <OpMath type="PLUS"/>
                              <Constant delim="&quot;" type="String" value="' AND codpais = '"/>
                              <OpMath type="PLUS"/>
                              <Identifier name="codPais"/>
                              <OpMath type="PLUS"/>
                              <Constant delim="&quot;" type="String" value="'"/>
                            </Expression>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </Value>
                  </InstructionUpdate>
                  <If>
                    <Condition>
                      <Value>
                        <Identifier name="idProvincia"/>
                      </Value>
                    </Condition>
                    <Source>
                      <InstructionCall>
                        <Member>
                          <Identifier name="cursor"/>
                          <FunctionCall name="setValueBuffer">
                            <CallArguments>
                              <Value>
                                <ArrayMember>
                                  <Identifier name="mtd"/>
                                  <Value>
                                    <Constant delim="&quot;" type="String" value="idprovincia"/>
                                  </Value>
                                </ArrayMember>
                              </Value>
                              <Value>
                                <Identifier name="idProvincia"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </InstructionCall>
                    </Source>
                  </If>
                </Source>
              </If>
              <If>
                <Condition>
                  <Value>
                    <OpUnary type="LNOT">
                      <Identifier name="idProvincia"/>
                    </OpUnary>
                  </Value>
                </Condition>
                <Source>
                  <InstructionCall>
                    <Member>
                      <Identifier name="MessageBox"/>
                      <FunctionCall name="warning">
                        <CallArguments>
                          <Value>
                            <Member>
                              <Identifier name="util"/>
                              <FunctionCall name="translate">
                                <CallArguments>
                                  <Value>
                                    <Constant delim="&quot;" type="String" value="scripts"/>
                                  </Value>
                                  <Value>
                                    <Constant delim="&quot;" type="String" value="La provincia %1 no pertenece al pa&#237;s %2"/>
                                  </Value>
                                </CallArguments>
                              </FunctionCall>
                              <FunctionCall name="arg">
                                <CallArguments>
                                  <Value>
                                    <Identifier name="provincia"/>
                                  </Value>
                                </CallArguments>
                              </FunctionCall>
                              <FunctionCall name="arg">
                                <CallArguments>
                                  <Value>
                                    <Identifier name="codPais"/>
                                  </Value>
                                </CallArguments>
                              </FunctionCall>
                            </Member>
                          </Value>
                          <Value>
                            <Member>
                              <Identifier name="MessageBox"/>
                              <Identifier name="Ok"/>
                            </Member>
                          </Value>
                          <Value>
                            <Member>
                              <Identifier name="MessageBox"/>
                              <Identifier name="NoButton"/>
                            </Member>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </InstructionCall>
                  <InstructionFlow type="RETURN">
                    <Value>
                      <Identifier name="false"/>
                    </Value>
                  </InstructionFlow>
                </Source>
              </If>
            </Source>
            <Else>
              <Source>
                <DeclarationBlock mode="VAR">
                  <Variable name="idProvTabla" type="String">
                    <Value>
                      <Member>
                        <Identifier name="util"/>
                        <FunctionCall name="sqlSelect">
                          <CallArguments>
                            <Value>
                              <Constant delim="&quot;" type="String" value="provincias"/>
                            </Value>
                            <Value>
                              <Constant delim="&quot;" type="String" value="idprovincia"/>
                            </Value>
                            <Expression>
                              <Constant delim="&quot;" type="String" value="UPPER(provincia) = '"/>
                              <OpMath type="PLUS"/>
                              <Member>
                                <Identifier name="provincia"/>
                                <FunctionCall name="toUpperCase"/>
                              </Member>
                              <OpMath type="PLUS"/>
                              <Constant delim="&quot;" type="String" value="' AND codpais = '"/>
                              <OpMath type="PLUS"/>
                              <Identifier name="codPais"/>
                              <OpMath type="PLUS"/>
                              <Constant delim="&quot;" type="String" value="' AND idprovincia = "/>
                              <OpMath type="PLUS"/>
                              <Identifier name="idProvincia"/>
                            </Expression>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </Value>
                  </Variable>
                </DeclarationBlock>
                <If>
                  <Condition>
                    <Value>
                      <OpUnary type="LNOT">
                        <Identifier name="idProvTabla"/>
                      </OpUnary>
                    </Value>
                  </Condition>
                  <Source>
                    <InstructionCall>
                      <Member>
                        <Identifier name="MessageBox"/>
                        <FunctionCall name="warning">
                          <CallArguments>
                            <Value>
                              <Member>
                                <Identifier name="util"/>
                                <FunctionCall name="translate">
                                  <CallArguments>
                                    <Value>
                                      <Constant delim="&quot;" type="String" value="scripts"/>
                                    </Value>
                                    <Value>
                                      <Constant delim="&quot;" type="String" value="La provincia %1 no pertenece al pa&#237;s %2"/>
                                    </Value>
                                  </CallArguments>
                                </FunctionCall>
                                <FunctionCall name="arg">
                                  <CallArguments>
                                    <Value>
                                      <Identifier name="provincia"/>
                                    </Value>
                                  </CallArguments>
                                </FunctionCall>
                                <FunctionCall name="arg">
                                  <CallArguments>
                                    <Value>
                                      <Identifier name="codPais"/>
                                    </Value>
                                  </CallArguments>
                                </FunctionCall>
                              </Member>
                            </Value>
                            <Value>
                              <Member>
                                <Identifier name="MessageBox"/>
                                <Identifier name="Ok"/>
                              </Member>
                            </Value>
                            <Value>
                              <Member>
                                <Identifier name="MessageBox"/>
                                <Identifier name="NoButton"/>
                              </Member>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </InstructionCall>
                    <InstructionFlow type="RETURN">
                      <Value>
                        <Identifier name="false"/>
                      </Value>
                    </InstructionFlow>
                  </Source>
                </If>
              </Source>
            </Else>
          </If>
        </Source>
      </If>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_simplify">
    <Arguments>
      <Variable name="str"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="regExp">
          <Value>
            <New>
              <FunctionCall name="RegExp">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="( |\n|\r|\t|\f)"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionUpdate>
        <Member>
          <Identifier name="regExp"/>
          <Identifier name="global"/>
        </Member>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="str"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Member>
            <Identifier name="str"/>
            <FunctionCall name="replace">
              <CallArguments>
                <Value>
                  <Identifier name="regExp"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value=""/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Member>
        </Value>
      </InstructionUpdate>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="str"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_escapeQuote">
    <Arguments>
      <Variable name="str"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="regExp">
          <Value>
            <New>
              <FunctionCall name="RegExp">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="'"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionUpdate>
        <Member>
          <Identifier name="regExp"/>
          <Identifier name="global"/>
        </Member>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="str"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Member>
            <Identifier name="str"/>
            <FunctionCall name="replace">
              <CallArguments>
                <Value>
                  <Identifier name="regExp"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="''"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Member>
        </Value>
      </InstructionUpdate>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="str"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_calcularIBAN">
    <Arguments>
      <Variable name="cuenta"/>
      <Variable name="codPais"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="_i">
          <Value>
            <Member>
              <Identifier name="this"/>
              <Identifier name="iface"/>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="IBAN">
          <Value>
            <Constant delim="&quot;" type="String" value=""/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Expression>
            <OpUnary type="LNOT">
              <Identifier name="cuenta"/>
            </OpUnary>
            <Compare type="LOR"/>
            <Identifier name="cuenta"/>
            <Compare type="EQ"/>
            <Constant delim="&quot;" type="String" value=""/>
          </Expression>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Constant delim="&quot;" type="String" value=""/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="codIso"/>
      </DeclarationBlock>
      <If>
        <Condition>
          <Expression>
            <Identifier name="codPais"/>
            <Compare type="LAND"/>
            <Identifier name="codPais"/>
            <Compare type="NE"/>
            <Constant delim="&quot;" type="String" value=""/>
          </Expression>
        </Condition>
        <Source>
          <InstructionUpdate>
            <Identifier name="codIso"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="AQUtil"/>
                <FunctionCall name="sqlSelect">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="paises"/>
                    </Value>
                    <Value>
                      <Constant delim="&quot;" type="String" value="codiso"/>
                    </Value>
                    <Expression>
                      <Constant delim="&quot;" type="String" value="codpais = '"/>
                      <OpMath type="PLUS"/>
                      <Identifier name="codPais"/>
                      <OpMath type="PLUS"/>
                      <Constant delim="&quot;" type="String" value="'"/>
                    </Expression>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
          <InstructionUpdate>
            <Identifier name="codIso"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <OpTernary>
                <Parentheses>
                  <OpUnary type="LNOT">
                    <Identifier name="codIso"/>
                  </OpUnary>
                  <Compare type="LOR"/>
                  <Identifier name="codIso"/>
                  <Compare type="EQ"/>
                  <Constant delim="&quot;" type="String" value=""/>
                </Parentheses>
                <Constant delim="&quot;" type="String" value="ES"/>
                <Identifier name="codIso"/>
              </OpTernary>
            </Value>
          </InstructionUpdate>
        </Source>
        <Else>
          <Source>
            <InstructionUpdate>
              <Identifier name="codIso"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Constant delim="&quot;" type="String" value="ES"/>
              </Value>
            </InstructionUpdate>
          </Source>
        </Else>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="digControl">
          <Value>
            <Member>
              <Identifier name="_i"/>
              <FunctionCall name="digitoControlMod97">
                <CallArguments>
                  <Value>
                    <Identifier name="cuenta"/>
                  </Value>
                  <Value>
                    <Identifier name="codIso"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionUpdate>
        <Identifier name="IBAN"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Expression>
          <Identifier name="codIso"/>
          <OpMath type="PLUS"/>
          <Identifier name="digControl"/>
          <OpMath type="PLUS"/>
          <Identifier name="cuenta"/>
        </Expression>
      </InstructionUpdate>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="IBAN"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_moduloNumero">
    <Arguments>
      <Variable name="num"/>
      <Variable name="div"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="d"/>
        <Variable name="i">
          <Value>
            <Constant type="Number" value="0"/>
          </Value>
        </Variable>
        <Variable name="a">
          <Value>
            <Constant type="Number" value="1"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="parcial">
          <Value>
            <Constant type="Number" value="0"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <For>
        <ForInitialize>
          <InstructionUpdate>
            <Identifier name="i"/>
            <OpUpdate type="EQUALS"/>
            <Expression>
              <Member>
                <Identifier name="num"/>
                <Identifier name="length"/>
              </Member>
              <OpMath type="MINUS"/>
              <Constant type="Number" value="1"/>
            </Expression>
          </InstructionUpdate>
        </ForInitialize>
        <ForCompare>
          <Expression>
            <Identifier name="i"/>
            <Compare type="GE"/>
            <Constant type="Number" value="0"/>
          </Expression>
        </ForCompare>
        <ForIncrement>
          <InlineUpdate type="MINUSMINUS" mode="read-update">
            <Identifier name="i"/>
          </InlineUpdate>
        </ForIncrement>
        <Source>
          <InstructionUpdate>
            <Identifier name="d"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <FunctionCall name="parseInt">
                <CallArguments>
                  <Value>
                    <Member>
                      <Identifier name="num"/>
                      <FunctionCall name="charAt">
                        <CallArguments>
                          <Value>
                            <Identifier name="i"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Value>
          </InstructionUpdate>
          <InstructionUpdate>
            <Identifier name="parcial"/>
            <OpUpdate type="PLUSEQUAL"/>
            <Value>
              <Parentheses>
                <Identifier name="d"/>
                <OpMath type="TIMES"/>
                <Identifier name="a"/>
              </Parentheses>
            </Value>
          </InstructionUpdate>
          <InstructionUpdate>
            <Identifier name="a"/>
            <OpUpdate type="EQUALS"/>
            <Expression>
              <Parentheses>
                <Identifier name="a"/>
                <OpMath type="TIMES"/>
                <Constant type="Number" value="10"/>
              </Parentheses>
              <OpMath type="MOD"/>
              <Identifier name="div"/>
            </Expression>
          </InstructionUpdate>
        </Source>
      </For>
      <InstructionFlow type="RETURN">
        <Expression>
          <Identifier name="parcial"/>
          <OpMath type="MOD"/>
          <Identifier name="div"/>
        </Expression>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_digitoControlMod97">
    <Arguments>
      <Variable name="numero"/>
      <Variable name="codPais"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="_i">
          <Value>
            <Member>
              <Identifier name="this"/>
              <Identifier name="iface"/>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="cadena">
          <Value>
            <Constant delim="&quot;" type="String" value=""/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionUpdate>
        <Identifier name="cadena"/>
        <OpUpdate type="PLUSEQUAL"/>
        <Expression>
          <Member>
            <Identifier name="numero"/>
            <FunctionCall name="toString"/>
          </Member>
          <OpMath type="PLUS"/>
          <Member>
            <Identifier name="codPais"/>
            <FunctionCall name="toUpperCase"/>
          </Member>
          <OpMath type="PLUS"/>
          <Constant delim="&quot;" type="String" value="00"/>
        </Expression>
      </InstructionUpdate>
      <For>
        <ForInitialize>
          <Variable name="i">
            <Value>
              <Constant type="Number" value="0"/>
            </Value>
          </Variable>
        </ForInitialize>
        <ForCompare>
          <Expression>
            <Identifier name="i"/>
            <Compare type="LT"/>
            <Member>
              <Identifier name="cadena"/>
              <Identifier name="length"/>
            </Member>
          </Expression>
        </ForCompare>
        <ForIncrement>
          <InlineUpdate type="PLUSPLUS" mode="read-update">
            <Identifier name="i"/>
          </InlineUpdate>
        </ForIncrement>
        <Source>
          <If>
            <Condition>
              <Value>
                <FunctionCall name="isNaN">
                  <CallArguments>
                    <Value>
                      <Member>
                        <Identifier name="cadena"/>
                        <FunctionCall name="charAt">
                          <CallArguments>
                            <Value>
                              <Identifier name="i"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Value>
            </Condition>
            <Source>
              <DeclarationBlock mode="VAR">
                <Variable name="trans">
                  <Expression>
                    <Member>
                      <Identifier name="cadena"/>
                      <FunctionCall name="charCodeAt">
                        <CallArguments>
                          <Value>
                            <Identifier name="i"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                    <OpMath type="MINUS"/>
                    <Constant type="Number" value="55"/>
                  </Expression>
                </Variable>
              </DeclarationBlock>
              <InstructionUpdate>
                <Identifier name="cadena"/>
                <OpUpdate type="EQUALS"/>
                <Value>
                  <Member>
                    <Identifier name="cadena"/>
                    <FunctionCall name="replace">
                      <CallArguments>
                        <Value>
                          <Member>
                            <Identifier name="cadena"/>
                            <FunctionCall name="charAt">
                              <CallArguments>
                                <Value>
                                  <Identifier name="i"/>
                                </Value>
                              </CallArguments>
                            </FunctionCall>
                          </Member>
                        </Value>
                        <Value>
                          <Identifier name="trans"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </Value>
              </InstructionUpdate>
            </Source>
          </If>
        </Source>
      </For>
      <DeclarationBlock mode="VAR">
        <Variable name="digControl">
          <Value>
            <Member>
              <Identifier name="_i"/>
              <FunctionCall name="moduloNumero">
                <CallArguments>
                  <Value>
                    <Identifier name="cadena"/>
                  </Value>
                  <Value>
                    <Constant type="Number" value="97"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionUpdate>
        <Identifier name="digControl"/>
        <OpUpdate type="EQUALS"/>
        <Expression>
          <Constant type="Number" value="98"/>
          <OpMath type="MINUS"/>
          <Identifier name="digControl"/>
        </Expression>
      </InstructionUpdate>
      <InstructionUpdate>
        <Identifier name="digControl"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Member>
            <Identifier name="flfactppal"/>
            <Identifier name="iface"/>
            <FunctionCall name="pub_cerosIzquierda">
              <CallArguments>
                <Value>
                  <Identifier name="digControl"/>
                </Value>
                <Value>
                  <Constant type="Number" value="2"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Member>
        </Value>
      </InstructionUpdate>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="digControl"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="oficial_calcularIdentificadorAcreedor">
    <Arguments>
      <Variable name="cifEmpresa"/>
      <Variable name="codCuenta"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="_i">
          <Value>
            <Member>
              <Identifier name="this"/>
              <Identifier name="iface"/>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="codPais">
          <Value>
            <Member>
              <Identifier name="AQUtil"/>
              <FunctionCall name="sqlSelect">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="empresa INNER JOIN paises ON empresa.codpais = paises.codpais"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="paises.codiso"/>
                  </Value>
                  <Expression>
                    <Constant delim="&quot;" type="String" value="empresa.cifnif = '"/>
                    <OpMath type="PLUS"/>
                    <Identifier name="cifEmpresa"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="'"/>
                  </Expression>
                  <Value>
                    <Constant delim="&quot;" type="String" value="empresa,paises"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Identifier name="codPais"/>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionCall>
            <Member>
              <Identifier name="sys"/>
              <FunctionCall name="warnMsgBox">
                <CallArguments>
                  <Value>
                    <Member>
                      <Identifier name="sys"/>
                      <FunctionCall name="translate">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="No se ha podido obtener el c&#243;digo ISO del pa&#237;s asociado a la empresa"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="codComercial">
          <Value>
            <Member>
              <Identifier name="AQUtil"/>
              <FunctionCall name="sqlSelect">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="cuentasbanco"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="sufijo"/>
                  </Value>
                  <Expression>
                    <Constant delim="&quot;" type="String" value="codcuenta = '"/>
                    <OpMath type="PLUS"/>
                    <Identifier name="codCuenta"/>
                    <OpMath type="PLUS"/>
                    <Constant delim="&quot;" type="String" value="'"/>
                  </Expression>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="numControl">
          <Value>
            <Constant delim="&quot;" type="String" value=""/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionUpdate>
        <Identifier name="cifEmpresa"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Member>
            <Identifier name="cifEmpresa"/>
            <FunctionCall name="toUpperCase"/>
          </Member>
        </Value>
      </InstructionUpdate>
      <DeclarationBlock mode="VAR">
        <Variable name="carValido">
          <Value>
            <Constant delim="&quot;" type="String" value="1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <For>
        <ForInitialize>
          <Variable name="i">
            <Value>
              <Constant type="Number" value="0"/>
            </Value>
          </Variable>
        </ForInitialize>
        <ForCompare>
          <Expression>
            <Identifier name="i"/>
            <Compare type="LT"/>
            <Member>
              <Identifier name="cifEmpresa"/>
              <Identifier name="length"/>
            </Member>
          </Expression>
        </ForCompare>
        <ForIncrement>
          <InlineUpdate type="PLUSPLUS" mode="read-update">
            <Identifier name="i"/>
          </InlineUpdate>
        </ForIncrement>
        <Source>
          <If>
            <Condition>
              <Expression>
                <Member>
                  <Identifier name="carValido"/>
                  <FunctionCall name="find">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="cifEmpresa"/>
                          <FunctionCall name="charAt">
                            <CallArguments>
                              <Value>
                                <Identifier name="i"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
                <Compare type="GE"/>
                <Constant type="Number" value="0"/>
              </Expression>
            </Condition>
            <Source>
              <InstructionUpdate>
                <Identifier name="numControl"/>
                <OpUpdate type="PLUSEQUAL"/>
                <Value>
                  <Member>
                    <Identifier name="cifEmpresa"/>
                    <FunctionCall name="charAt">
                      <CallArguments>
                        <Value>
                          <Identifier name="i"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </Value>
              </InstructionUpdate>
            </Source>
          </If>
        </Source>
      </For>
      <InstructionUpdate>
        <Identifier name="digControl"/>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Member>
            <Identifier name="_i"/>
            <FunctionCall name="digitoControlMod97">
              <CallArguments>
                <Value>
                  <Identifier name="numControl"/>
                </Value>
                <Value>
                  <Identifier name="codPais"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Member>
        </Value>
      </InstructionUpdate>
      <DeclarationBlock mode="VAR">
        <Variable name="identificador">
          <Expression>
            <Identifier name="codPais"/>
            <OpMath type="PLUS"/>
            <Identifier name="digControl"/>
            <OpMath type="PLUS"/>
            <Identifier name="codComercial"/>
            <OpMath type="PLUS"/>
            <Identifier name="cifEmpresa"/>
          </Expression>
        </Variable>
      </DeclarationBlock>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="identificador"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="envioMail_componerListaDestinatarios" returns="String">
    <Arguments>
      <Variable name="codigo" type="String"/>
      <Variable name="tabla" type="String"/>
    </Arguments>
    <Source>
      <InstructionCall>
        <FunctionCall name="debug">
          <CallArguments>
            <Value>
              <Identifier name="tabla"/>
            </Value>
          </CallArguments>
        </FunctionCall>
      </InstructionCall>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="arrayMails" type="Array">
          <Value>
            <Constant>
              <list_constant arg00="LBRACKET" arg01="callargs" arg02="RBRACKET"/>
            </Constant>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="listaDestinatarios" type="String"/>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="emailPrincipal" type="String"/>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="nombrePrincipal" type="String"/>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="dialog"/>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="q" type="FLSqlQuery">
          <Value>
            <New>
              <FunctionCall name="FLSqlQuery"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <Switch>
        <Condition>
          <Value>
            <Identifier name="tabla"/>
          </Value>
        </Condition>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="clientes"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="emailPrincipal"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="sqlSelect">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="clientes"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="email"/>
                      </Value>
                      <Expression>
                        <Constant delim="&quot;" type="String" value="codcliente = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="codigo"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="'"/>
                      </Expression>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="nombrePrincipal"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="sqlSelect">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="clientes"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="nombre"/>
                      </Value>
                      <Expression>
                        <Constant delim="&quot;" type="String" value="codcliente = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="codigo"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="'"/>
                      </Expression>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionCall>
              <Member>
                <Identifier name="q"/>
                <FunctionCall name="setTablesList">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="contactosclientes,crm_contactos"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="q"/>
                <FunctionCall name="setFrom">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="contactosclientes INNER JOIN crm_contactos ON contactosclientes.codcontacto = crm_contactos.codcontacto"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="q"/>
                <FunctionCall name="setSelect">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="crm_contactos.email,crm_contactos.nombre"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="q"/>
                <FunctionCall name="setWhere">
                  <CallArguments>
                    <Expression>
                      <Constant delim="&quot;" type="String" value="contactosclientes.codcliente = '"/>
                      <OpMath type="PLUS"/>
                      <Identifier name="codigo"/>
                      <OpMath type="PLUS"/>
                      <Constant delim="&quot;" type="String" value="' AND (crm_contactos.email &lt;&gt; '' AND crm_contactos.email IS NOT NULL)"/>
                    </Expression>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <If>
              <Condition>
                <Value>
                  <OpUnary type="LNOT">
                    <Member>
                      <Identifier name="q"/>
                      <FunctionCall name="exec"/>
                    </Member>
                  </OpUnary>
                </Value>
              </Condition>
              <Source>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
            <InstructionUpdate>
              <Identifier name="dialog"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <New>
                  <FunctionCall name="Dialog">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="translate">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="scripts"/>
                              </Value>
                              <Value>
                                <Constant delim="&quot;" type="String" value="Contactos del cliente"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Value>
                      <Value>
                        <Constant type="Number" value="0"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </New>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="proveedores"/>
          </Value>
          <Source>
            <InstructionUpdate>
              <Identifier name="emailPrincipal"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="sqlSelect">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="proveedores"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="email"/>
                      </Value>
                      <Expression>
                        <Constant delim="&quot;" type="String" value="codproveedor = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="codigo"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="'"/>
                      </Expression>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionUpdate>
              <Identifier name="nombrePrincipal"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Member>
                  <Identifier name="util"/>
                  <FunctionCall name="sqlSelect">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="proveedores"/>
                      </Value>
                      <Value>
                        <Constant delim="&quot;" type="String" value="nombre"/>
                      </Value>
                      <Expression>
                        <Constant delim="&quot;" type="String" value="codproveedor = '"/>
                        <OpMath type="PLUS"/>
                        <Identifier name="codigo"/>
                        <OpMath type="PLUS"/>
                        <Constant delim="&quot;" type="String" value="'"/>
                      </Expression>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Value>
            </InstructionUpdate>
            <InstructionCall>
              <Member>
                <Identifier name="q"/>
                <FunctionCall name="setTablesList">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="contactosproveedores,crm_contactos"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="q"/>
                <FunctionCall name="setFrom">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="contactosproveedores INNER JOIN crm_contactos ON contactosproveedores.codcontacto = crm_contactos.codcontacto"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="q"/>
                <FunctionCall name="setSelect">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="crm_contactos.email,crm_contactos.nombre"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <InstructionCall>
              <Member>
                <Identifier name="q"/>
                <FunctionCall name="setWhere">
                  <CallArguments>
                    <Expression>
                      <Constant delim="&quot;" type="String" value="contactosproveedores.codproveedor = '"/>
                      <OpMath type="PLUS"/>
                      <Identifier name="codigo"/>
                      <OpMath type="PLUS"/>
                      <Constant delim="&quot;" type="String" value="' AND (crm_contactos.email &lt;&gt; '' AND crm_contactos.email IS NOT NULL)"/>
                    </Expression>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </InstructionCall>
            <If>
              <Condition>
                <Value>
                  <OpUnary type="LNOT">
                    <Member>
                      <Identifier name="q"/>
                      <FunctionCall name="exec"/>
                    </Member>
                  </OpUnary>
                </Value>
              </Condition>
              <Source>
                <InstructionFlow type="RETURN">
                  <Value>
                    <Identifier name="false"/>
                  </Value>
                </InstructionFlow>
              </Source>
            </If>
            <InstructionUpdate>
              <Identifier name="dialog"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <New>
                  <FunctionCall name="Dialog">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="util"/>
                          <FunctionCall name="translate">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="scripts"/>
                              </Value>
                              <Value>
                                <Constant delim="&quot;" type="String" value="Contactos del proveedor"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Value>
                      <Value>
                        <Constant type="Number" value="0"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </New>
              </Value>
            </InstructionUpdate>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
      </Switch>
      <InstructionCall>
        <FunctionCall name="debug">
          <CallArguments>
            <Expression>
              <Constant delim="&quot;" type="String" value="emailPrincipal "/>
              <OpMath type="PLUS"/>
              <Identifier name="emailPrincipal"/>
            </Expression>
          </CallArguments>
        </FunctionCall>
      </InstructionCall>
      <InstructionUpdate>
        <Member>
          <Identifier name="dialog"/>
          <Identifier name="caption"/>
        </Member>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Constant delim="&quot;" type="String" value="Selecciona el destinatario"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Member>
          <Identifier name="dialog"/>
          <Identifier name="OKButtonText"/>
        </Member>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Member>
            <Identifier name="util"/>
            <FunctionCall name="translate">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="scripts"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="Aceptar"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Member>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Member>
          <Identifier name="dialog"/>
          <Identifier name="cancelButtonText"/>
        </Member>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Member>
            <Identifier name="util"/>
            <FunctionCall name="translate">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="scripts"/>
                </Value>
                <Value>
                  <Constant delim="&quot;" type="String" value="Cancelar"/>
                </Value>
              </CallArguments>
            </FunctionCall>
          </Member>
        </Value>
      </InstructionUpdate>
      <DeclarationBlock mode="VAR">
        <Variable name="bgroup" type="GroupBox">
          <Value>
            <New>
              <Identifier name="GroupBox"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionCall>
        <Member>
          <Identifier name="dialog"/>
          <FunctionCall name="add">
            <CallArguments>
              <Value>
                <Identifier name="bgroup"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <DeclarationBlock mode="VAR">
        <Variable name="cB" type="Array">
          <Value>
            <Constant>
              <list_constant arg00="LBRACKET" arg01="callargs" arg02="RBRACKET"/>
            </Constant>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="nEmails" type="Number">
          <Value>
            <Constant type="Number" value="0"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionUpdate>
        <ArrayMember>
          <Identifier name="cB"/>
          <Value>
            <Identifier name="nEmails"/>
          </Value>
        </ArrayMember>
        <OpUpdate type="EQUALS"/>
        <Value>
          <New>
            <Identifier name="CheckBox"/>
          </New>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Member>
          <ArrayMember>
            <Identifier name="cB"/>
            <Value>
              <Identifier name="nEmails"/>
            </Value>
          </ArrayMember>
          <Identifier name="text"/>
        </Member>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Member>
            <Identifier name="util"/>
            <FunctionCall name="translate">
              <CallArguments>
                <Value>
                  <Constant delim="&quot;" type="String" value="scripts"/>
                </Value>
                <Expression>
                  <Identifier name="nombrePrincipal"/>
                  <OpMath type="PLUS"/>
                  <Constant delim="&quot;" type="String" value=" ("/>
                  <OpMath type="PLUS"/>
                  <Identifier name="emailPrincipal"/>
                  <OpMath type="PLUS"/>
                  <Constant delim="&quot;" type="String" value=")"/>
                </Expression>
              </CallArguments>
            </FunctionCall>
          </Member>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <ArrayMember>
          <Identifier name="arrayMails"/>
          <Value>
            <Identifier name="nEmails"/>
          </Value>
        </ArrayMember>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Identifier name="emailPrincipal"/>
        </Value>
      </InstructionUpdate>
      <InstructionUpdate>
        <Member>
          <ArrayMember>
            <Identifier name="cB"/>
            <Value>
              <Identifier name="nEmails"/>
            </Value>
          </ArrayMember>
          <Identifier name="checked"/>
        </Member>
        <OpUpdate type="EQUALS"/>
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionUpdate>
      <InstructionCall>
        <Member>
          <Identifier name="bgroup"/>
          <FunctionCall name="add">
            <CallArguments>
              <Value>
                <ArrayMember>
                  <Identifier name="cB"/>
                  <Value>
                    <Identifier name="nEmails"/>
                  </Value>
                </ArrayMember>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InlineUpdate type="PLUSPLUS" mode="read-update">
        <Identifier name="nEmails"/>
      </InlineUpdate>
      <While>
        <Condition>
          <Value>
            <Member>
              <Identifier name="q"/>
              <FunctionCall name="next"/>
            </Member>
          </Value>
        </Condition>
        <Source>
          <InstructionUpdate>
            <ArrayMember>
              <Identifier name="cB"/>
              <Value>
                <Identifier name="nEmails"/>
              </Value>
            </ArrayMember>
            <OpUpdate type="EQUALS"/>
            <Value>
              <New>
                <Identifier name="CheckBox"/>
              </New>
            </Value>
          </InstructionUpdate>
          <InstructionUpdate>
            <Member>
              <ArrayMember>
                <Identifier name="cB"/>
                <Value>
                  <Identifier name="nEmails"/>
                </Value>
              </ArrayMember>
              <Identifier name="text"/>
            </Member>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="util"/>
                <FunctionCall name="translate">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value="scripts"/>
                    </Value>
                    <Expression>
                      <Member>
                        <Identifier name="q"/>
                        <FunctionCall name="value">
                          <CallArguments>
                            <Value>
                              <Constant type="Number" value="1"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                      <OpMath type="PLUS"/>
                      <Constant delim="&quot;" type="String" value=" ("/>
                      <OpMath type="PLUS"/>
                      <Member>
                        <Identifier name="q"/>
                        <FunctionCall name="value">
                          <CallArguments>
                            <Value>
                              <Constant type="Number" value="0"/>
                            </Value>
                          </CallArguments>
                        </FunctionCall>
                      </Member>
                      <OpMath type="PLUS"/>
                      <Constant delim="&quot;" type="String" value=")"/>
                    </Expression>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
          <InstructionUpdate>
            <ArrayMember>
              <Identifier name="arrayMails"/>
              <Value>
                <Identifier name="nEmails"/>
              </Value>
            </ArrayMember>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="q"/>
                <FunctionCall name="value">
                  <CallArguments>
                    <Value>
                      <Constant type="Number" value="0"/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
          <InstructionUpdate>
            <Member>
              <ArrayMember>
                <Identifier name="cB"/>
                <Value>
                  <Identifier name="nEmails"/>
                </Value>
              </ArrayMember>
              <Identifier name="checked"/>
            </Member>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionUpdate>
          <InstructionCall>
            <Member>
              <Identifier name="bgroup"/>
              <FunctionCall name="add">
                <CallArguments>
                  <Value>
                    <ArrayMember>
                      <Identifier name="cB"/>
                      <Value>
                        <Identifier name="nEmails"/>
                      </Value>
                    </ArrayMember>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InlineUpdate type="PLUSPLUS" mode="read-update">
            <Identifier name="nEmails"/>
          </InlineUpdate>
        </Source>
      </While>
      <InstructionCall>
        <FunctionCall name="debug">
          <CallArguments>
            <Expression>
              <Constant delim="&quot;" type="String" value="nEmails "/>
              <OpMath type="PLUS"/>
              <Identifier name="nEmails"/>
            </Expression>
          </CallArguments>
        </FunctionCall>
      </InstructionCall>
      <If>
        <Condition>
          <Expression>
            <Identifier name="nEmails"/>
            <Compare type="GT"/>
            <Constant type="Number" value="1"/>
          </Expression>
        </Condition>
        <Source>
          <InlineUpdate type="MINUSMINUS" mode="read-update">
            <Identifier name="nEmails"/>
          </InlineUpdate>
          <DeclarationBlock mode="VAR">
            <Variable name="lista" type="String">
              <Value>
                <Constant delim="&quot;" type="String" value=""/>
              </Value>
            </Variable>
          </DeclarationBlock>
          <If>
            <Condition>
              <Value>
                <Member>
                  <Identifier name="dialog"/>
                  <FunctionCall name="exec"/>
                </Member>
              </Value>
            </Condition>
            <Source>
              <For>
                <ForInitialize>
                  <Variable name="i" type="Number">
                    <Value>
                      <Constant type="Number" value="0"/>
                    </Value>
                  </Variable>
                </ForInitialize>
                <ForCompare>
                  <Expression>
                    <Identifier name="i"/>
                    <Compare type="LE"/>
                    <Identifier name="nEmails"/>
                  </Expression>
                </ForCompare>
                <ForIncrement>
                  <InlineUpdate type="PLUSPLUS" mode="read-update">
                    <Identifier name="i"/>
                  </InlineUpdate>
                </ForIncrement>
                <Source>
                  <If>
                    <Condition>
                      <Expression>
                        <Member>
                          <ArrayMember>
                            <Identifier name="cB"/>
                            <Value>
                              <Identifier name="i"/>
                            </Value>
                          </ArrayMember>
                          <Identifier name="checked"/>
                        </Member>
                        <Compare type="EQ"/>
                        <Identifier name="true"/>
                      </Expression>
                    </Condition>
                    <Source>
                      <InstructionCall>
                        <FunctionCall name="debug">
                          <CallArguments>
                            <Expression>
                              <Constant delim="&quot;" type="String" value="arrayMails[i] "/>
                              <OpMath type="PLUS"/>
                              <ArrayMember>
                                <Identifier name="arrayMails"/>
                                <Value>
                                  <Identifier name="i"/>
                                </Value>
                              </ArrayMember>
                            </Expression>
                          </CallArguments>
                        </FunctionCall>
                      </InstructionCall>
                      <InstructionUpdate>
                        <Identifier name="lista"/>
                        <OpUpdate type="PLUSEQUAL"/>
                        <Expression>
                          <ArrayMember>
                            <Identifier name="arrayMails"/>
                            <Value>
                              <Identifier name="i"/>
                            </Value>
                          </ArrayMember>
                          <OpMath type="PLUS"/>
                          <Constant delim="&quot;" type="String" value=","/>
                        </Expression>
                      </InstructionUpdate>
                    </Source>
                  </If>
                </Source>
              </For>
            </Source>
            <Else>
              <Source>
                <InstructionFlow type="RETURN"/>
              </Source>
            </Else>
          </If>
          <InstructionUpdate>
            <Identifier name="lista"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="lista"/>
                <FunctionCall name="left">
                  <CallArguments>
                    <Expression>
                      <Member>
                        <Identifier name="lista"/>
                        <Identifier name="length"/>
                      </Member>
                      <OpMath type="MINUS"/>
                      <Constant type="Number" value="1"/>
                    </Expression>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
          <If>
            <Condition>
              <Expression>
                <Identifier name="lista"/>
                <Compare type="EQ"/>
                <Constant delim="&quot;" type="String" value=""/>
              </Expression>
            </Condition>
            <Source>
              <InstructionFlow type="RETURN"/>
            </Source>
          </If>
          <InstructionUpdate>
            <Identifier name="listaDestinatarios"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Identifier name="lista"/>
            </Value>
          </InstructionUpdate>
        </Source>
        <Else>
          <Source>
            <InstructionUpdate>
              <Identifier name="listaDestinatarios"/>
              <OpUpdate type="EQUALS"/>
              <Value>
                <Identifier name="emailPrincipal"/>
              </Value>
            </InstructionUpdate>
          </Source>
        </Else>
      </If>
      <InstructionCall>
        <FunctionCall name="debug">
          <CallArguments>
            <Expression>
              <Constant delim="&quot;" type="String" value="listaDestinatarios "/>
              <OpMath type="PLUS"/>
              <Identifier name="listaDestinatarios"/>
            </Expression>
          </CallArguments>
        </FunctionCall>
      </InstructionCall>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="listaDestinatarios"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="envioMail_enviarCorreo" returns="Boolean">
    <Arguments>
      <Variable name="cuerpo" type="String"/>
      <Variable name="asunto" type="String"/>
      <Variable name="arrayDest" type="Array"/>
      <Variable name="arrayAttach" type="Array"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <Identifier name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="comando" type="Array">
          <Value>
            <Member>
              <Identifier name="this"/>
              <Identifier name="iface"/>
              <FunctionCall name="componerCorreo">
                <CallArguments>
                  <Value>
                    <Identifier name="cuerpo"/>
                  </Value>
                  <Value>
                    <Identifier name="asunto"/>
                  </Value>
                  <Value>
                    <Identifier name="arrayDest"/>
                  </Value>
                  <Value>
                    <Identifier name="arrayAttach"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Identifier name="comando"/>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="res" type="Array">
          <Value>
            <Member>
              <Identifier name="this"/>
              <Identifier name="iface"/>
              <FunctionCall name="ejecutarComandoAsincrono">
                <CallArguments>
                  <Value>
                    <Identifier name="comando"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="envioMail_componerCorreo" returns="Array">
    <Arguments>
      <Variable name="cuerpo" type="String"/>
      <Variable name="asunto" type="String"/>
      <Variable name="arrayDest" type="String"/>
      <Variable name="arrayAttach" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="clienteCorreo">
          <Value>
            <Member>
              <Identifier name="util"/>
              <FunctionCall name="readSettingEntry">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="scripts/flfactinfo/clientecorreo"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Expression>
            <OpUnary type="LNOT">
              <Identifier name="clienteCorreo"/>
            </OpUnary>
            <Compare type="LOR"/>
            <Identifier name="clienteCorreo"/>
            <Compare type="EQ"/>
            <Constant delim="&quot;" type="String" value=""/>
          </Expression>
        </Condition>
        <Source>
          <InstructionCall>
            <Member>
              <Identifier name="MessageBox"/>
              <FunctionCall name="warning">
                <CallArguments>
                  <Value>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="translate">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="scripts"/>
                          </Value>
                          <Value>
                            <Constant delim="&quot;" type="String" value="No tiene establecido el tipo de cliente de correo.\nDebe establecer este valor en la pesta&#195;&#177;a Correo del formulario de empresa"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                  <Value>
                    <Member>
                      <Identifier name="MessageBox"/>
                      <Identifier name="Ok"/>
                    </Member>
                  </Value>
                  <Value>
                    <Member>
                      <Identifier name="MessageBox"/>
                      <Identifier name="NoButton"/>
                    </Member>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="nombreCorreo">
          <Value>
            <Member>
              <Identifier name="util"/>
              <FunctionCall name="readSettingEntry">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="scripts/flfactinfo/nombrecorreo"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Expression>
            <OpUnary type="LNOT">
              <Identifier name="nombreCorreo"/>
            </OpUnary>
            <Compare type="LOR"/>
            <Identifier name="nombreCorreo"/>
            <Compare type="EQ"/>
            <Constant delim="&quot;" type="String" value=""/>
          </Expression>
        </Condition>
        <Source>
          <InstructionCall>
            <Member>
              <Identifier name="MessageBox"/>
              <FunctionCall name="warning">
                <CallArguments>
                  <Value>
                    <Member>
                      <Identifier name="util"/>
                      <FunctionCall name="translate">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="scripts"/>
                          </Value>
                          <Value>
                            <Constant delim="&quot;" type="String" value="No tiene establecido el nombre del ejecutable del programa de correo.\nDebe establecer este valor en la pesta&#195;&#177;a Correo del formulario de empresa"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                  <Value>
                    <Member>
                      <Identifier name="MessageBox"/>
                      <Identifier name="Ok"/>
                    </Member>
                  </Value>
                  <Value>
                    <Member>
                      <Identifier name="MessageBox"/>
                      <Identifier name="NoButton"/>
                    </Member>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </InstructionCall>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="destinatarios" type="String">
          <Value>
            <Constant delim="&quot;" type="String" value=""/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <For>
        <ForInitialize>
          <Variable name="i" type="Number">
            <Value>
              <Constant type="Number" value="0"/>
            </Value>
          </Variable>
        </ForInitialize>
        <ForCompare>
          <Expression>
            <Identifier name="i"/>
            <Compare type="LT"/>
            <Member>
              <Identifier name="arrayDest"/>
              <Identifier name="length"/>
            </Member>
          </Expression>
        </ForCompare>
        <ForIncrement>
          <InlineUpdate type="PLUSPLUS" mode="read-update">
            <Identifier name="i"/>
          </InlineUpdate>
        </ForIncrement>
        <Source>
          <If>
            <Condition>
              <Expression>
                <Identifier name="i"/>
                <Compare type="GT"/>
                <Constant type="Number" value="0"/>
              </Expression>
            </Condition>
            <Source>
              <InstructionUpdate>
                <Identifier name="destinatarios"/>
                <OpUpdate type="PLUSEQUAL"/>
                <Value>
                  <Constant delim="&quot;" type="String" value=" "/>
                </Value>
              </InstructionUpdate>
            </Source>
          </If>
          <InstructionUpdate>
            <Identifier name="destinatarios"/>
            <OpUpdate type="PLUSEQUAL"/>
            <Value>
              <ArrayMember>
                <ArrayMember>
                  <Identifier name="arrayDest"/>
                  <Value>
                    <Identifier name="i"/>
                  </Value>
                </ArrayMember>
                <Value>
                  <Constant delim="&quot;" type="String" value="direccion"/>
                </Value>
              </ArrayMember>
            </Value>
          </InstructionUpdate>
        </Source>
      </For>
      <DeclarationBlock mode="VAR">
        <Variable name="documentos" type="String">
          <Value>
            <Constant delim="&quot;" type="String" value=""/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <If>
        <Condition>
          <Value>
            <Identifier name="arrayAttach"/>
          </Value>
        </Condition>
        <Source>
          <InstructionUpdate>
            <Identifier name="documentos"/>
            <OpUpdate type="EQUALS"/>
            <Value>
              <Member>
                <Identifier name="arrayAttach"/>
                <FunctionCall name="join">
                  <CallArguments>
                    <Value>
                      <Constant delim="&quot;" type="String" value=" "/>
                    </Value>
                  </CallArguments>
                </FunctionCall>
              </Member>
            </Value>
          </InstructionUpdate>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="comando" type="Array"/>
      </DeclarationBlock>
      <Switch>
        <Condition>
          <Value>
            <Identifier name="clienteCorreo"/>
          </Value>
        </Condition>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="Thunderbird"/>
          </Value>
          <Source>
            <If>
              <Condition>
                <Expression>
                  <Identifier name="documentos"/>
                  <Compare type="NE"/>
                  <Constant delim="&quot;" type="String" value=""/>
                </Expression>
              </Condition>
              <Source>
                <InstructionUpdate>
                  <Identifier name="comando"/>
                  <OpUpdate type="EQUALS"/>
                  <Value>
                    <Constant>
                      <CallArguments>
                        <Value>
                          <Identifier name="nombreCorreo"/>
                        </Value>
                        <Value>
                          <Constant delim="&quot;" type="String" value="-compose"/>
                        </Value>
                        <Expression>
                          <Constant delim="&quot;" type="String" value="to='"/>
                          <OpMath type="PLUS"/>
                          <Identifier name="destinatarios"/>
                          <OpMath type="PLUS"/>
                          <Constant delim="&quot;" type="String" value="',subject="/>
                        </Expression>
                        <Value>
                          <Identifier name="asunto"/>
                        </Value>
                        <Value>
                          <Constant delim="&quot;" type="String" value=",body="/>
                        </Value>
                        <Value>
                          <Identifier name="cuerpo"/>
                        </Value>
                        <Expression>
                          <Constant delim="&quot;" type="String" value=",attachment=file://"/>
                          <OpMath type="PLUS"/>
                          <Identifier name="documentos"/>
                        </Expression>
                      </CallArguments>
                    </Constant>
                  </Value>
                </InstructionUpdate>
              </Source>
              <Else>
                <Source>
                  <InstructionUpdate>
                    <Identifier name="comando"/>
                    <OpUpdate type="EQUALS"/>
                    <Value>
                      <Constant>
                        <CallArguments>
                          <Value>
                            <Identifier name="nombreCorreo"/>
                          </Value>
                          <Value>
                            <Constant delim="&quot;" type="String" value="-compose"/>
                          </Value>
                          <Expression>
                            <Constant delim="&quot;" type="String" value="to='"/>
                            <OpMath type="PLUS"/>
                            <Identifier name="destinatarios"/>
                            <OpMath type="PLUS"/>
                            <Constant delim="&quot;" type="String" value="',subject="/>
                          </Expression>
                          <Value>
                            <Identifier name="asunto"/>
                          </Value>
                          <Value>
                            <Constant delim="&quot;" type="String" value=",body="/>
                          </Value>
                          <Value>
                            <Identifier name="cuerpo"/>
                          </Value>
                        </CallArguments>
                      </Constant>
                    </Value>
                  </InstructionUpdate>
                </Source>
              </Else>
            </If>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="Outlook"/>
          </Value>
          <Source>
            <If>
              <Condition>
                <Expression>
                  <Identifier name="documentos"/>
                  <Compare type="NE"/>
                  <Constant delim="&quot;" type="String" value=""/>
                </Expression>
              </Condition>
              <Source>
                <InstructionUpdate>
                  <Identifier name="documentos"/>
                  <OpUpdate type="EQUALS"/>
                  <Value>
                    <Member>
                      <Identifier name="Dir"/>
                      <FunctionCall name="convertSeparators">
                        <CallArguments>
                          <Value>
                            <Identifier name="documentos"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                  </Value>
                </InstructionUpdate>
                <InstructionUpdate>
                  <Identifier name="comando"/>
                  <OpUpdate type="EQUALS"/>
                  <Value>
                    <Constant>
                      <CallArguments>
                        <Expression>
                          <Constant delim="&quot;" type="String" value="\&quot;"/>
                          <OpMath type="PLUS"/>
                          <Identifier name="nombreCorreo"/>
                          <OpMath type="PLUS"/>
                          <Constant delim="&quot;" type="String" value="\&quot; /c"/>
                        </Expression>
                        <Value>
                          <Constant delim="&quot;" type="String" value="ipm.note"/>
                        </Value>
                        <Value>
                          <Constant delim="&quot;" type="String" value="/m"/>
                        </Value>
                        <Value>
                          <Identifier name="destinatarios"/>
                        </Value>
                        <Value>
                          <Constant delim="&quot;" type="String" value="/a"/>
                        </Value>
                        <Value>
                          <Identifier name="documentos"/>
                        </Value>
                      </CallArguments>
                    </Constant>
                  </Value>
                </InstructionUpdate>
              </Source>
              <Else>
                <Source>
                  <InstructionUpdate>
                    <Identifier name="comando"/>
                    <OpUpdate type="EQUALS"/>
                    <Value>
                      <Constant>
                        <CallArguments>
                          <Expression>
                            <Constant delim="&quot;" type="String" value="\&quot;"/>
                            <OpMath type="PLUS"/>
                            <Identifier name="nombreCorreo"/>
                            <OpMath type="PLUS"/>
                            <Constant delim="&quot;" type="String" value="\&quot; /c"/>
                          </Expression>
                          <Value>
                            <Constant delim="&quot;" type="String" value="ipm.note"/>
                          </Value>
                          <Value>
                            <Constant delim="&quot;" type="String" value="/m"/>
                          </Value>
                          <Value>
                            <Identifier name="destinatarios"/>
                          </Value>
                        </CallArguments>
                      </Constant>
                    </Value>
                  </InstructionUpdate>
                </Source>
              </Else>
            </If>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <Case>
          <Value>
            <Constant delim="&quot;" type="String" value="KMail"/>
          </Value>
          <Source>
            <If>
              <Condition>
                <Expression>
                  <Identifier name="documentos"/>
                  <Compare type="NE"/>
                  <Constant delim="&quot;" type="String" value=""/>
                </Expression>
              </Condition>
              <Source>
                <InstructionUpdate>
                  <Identifier name="comando"/>
                  <OpUpdate type="EQUALS"/>
                  <Value>
                    <Constant>
                      <CallArguments>
                        <Value>
                          <Identifier name="nombreCorreo"/>
                        </Value>
                        <Value>
                          <Identifier name="destinatarios"/>
                        </Value>
                        <Value>
                          <Constant delim="&quot;" type="String" value="-s"/>
                        </Value>
                        <Value>
                          <Identifier name="asunto"/>
                        </Value>
                        <Value>
                          <Constant delim="&quot;" type="String" value="--body"/>
                        </Value>
                        <Value>
                          <Identifier name="cuerpo"/>
                        </Value>
                        <Value>
                          <Identifier name="documentos"/>
                        </Value>
                      </CallArguments>
                    </Constant>
                  </Value>
                </InstructionUpdate>
              </Source>
              <Else>
                <Source>
                  <InstructionUpdate>
                    <Identifier name="comando"/>
                    <OpUpdate type="EQUALS"/>
                    <Value>
                      <Constant>
                        <CallArguments>
                          <Value>
                            <Identifier name="nombreCorreo"/>
                          </Value>
                          <Value>
                            <Identifier name="destinatarios"/>
                          </Value>
                          <Value>
                            <Constant delim="&quot;" type="String" value="-s"/>
                          </Value>
                          <Value>
                            <Identifier name="asunto"/>
                          </Value>
                          <Value>
                            <Constant delim="&quot;" type="String" value="--body"/>
                          </Value>
                          <Value>
                            <Identifier name="cuerpo"/>
                          </Value>
                        </CallArguments>
                      </Constant>
                    </Value>
                  </InstructionUpdate>
                </Source>
              </Else>
            </If>
            <InstructionFlow type="BREAK"/>
          </Source>
        </Case>
        <CaseDefault>
          <Source/>
        </CaseDefault>
      </Switch>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="comando"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="envioMail_existeEnvioMail" returns="Boolean">
    <Source>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="true"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
  <Function name="dtoEsp_calcularLiquidacionAgente" returns="Number">
    <Arguments>
      <Variable name="codLiquidacion" type="String"/>
    </Arguments>
    <Source>
      <DeclarationBlock mode="VAR">
        <Variable name="util" type="FLUtil">
          <Value>
            <New>
              <FunctionCall name="FLUtil"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="qryFacturas" type="FLSqlQuery">
          <Value>
            <New>
              <FunctionCall name="FLSqlQuery"/>
            </New>
          </Value>
        </Variable>
      </DeclarationBlock>
      <InstructionCall>
        <Member>
          <Identifier name="qryFacturas"/>
          <FunctionCall name="setTablesList">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="facturascli,lineasfacturascli"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qryFacturas"/>
          <FunctionCall name="setSelect">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="coddivisa, tasaconv, facturascli.porcomision, lineasfacturascli.porcomision, neto, facturascli.idfactura, lineasfacturascli.pvptotal, facturascli.pordtoesp"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qryFacturas"/>
          <FunctionCall name="setFrom">
            <CallArguments>
              <Value>
                <Constant delim="&quot;" type="String" value="facturascli INNER JOIN lineasfacturascli ON facturascli.idfactura = lineasfacturascli.idfactura"/>
              </Value>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <InstructionCall>
        <Member>
          <Identifier name="qryFacturas"/>
          <FunctionCall name="setWhere">
            <CallArguments>
              <Expression>
                <Constant delim="&quot;" type="String" value="codliquidacion = '"/>
                <OpMath type="PLUS"/>
                <Identifier name="codLiquidacion"/>
                <OpMath type="PLUS"/>
                <Constant delim="&quot;" type="String" value="'"/>
              </Expression>
            </CallArguments>
          </FunctionCall>
        </Member>
      </InstructionCall>
      <If>
        <Condition>
          <Value>
            <OpUnary type="LNOT">
              <Member>
                <Identifier name="qryFacturas"/>
                <FunctionCall name="exec"/>
              </Member>
            </OpUnary>
          </Value>
        </Condition>
        <Source>
          <InstructionFlow type="RETURN">
            <Value>
              <Identifier name="false"/>
            </Value>
          </InstructionFlow>
        </Source>
      </If>
      <DeclarationBlock mode="VAR">
        <Variable name="total" type="Number">
          <Value>
            <Constant type="Number" value="0"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="comision" type="Number">
          <Value>
            <Constant type="Number" value="0"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="descuento" type="Number">
          <Value>
            <Constant type="Number" value="0"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="tasaconv" type="Number">
          <Value>
            <Constant type="Number" value="0"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="divisaEmpresa" type="String">
          <Value>
            <Member>
              <Identifier name="util"/>
              <FunctionCall name="sqlSelect">
                <CallArguments>
                  <Value>
                    <Constant delim="&quot;" type="String" value="empresa"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="coddivisa"/>
                  </Value>
                  <Value>
                    <Constant delim="&quot;" type="String" value="1=1"/>
                  </Value>
                </CallArguments>
              </FunctionCall>
            </Member>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="idfactura" type="Number">
          <Value>
            <Constant type="Number" value="0"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <DeclarationBlock mode="VAR">
        <Variable name="comisionFactura" type="Boolean">
          <Value>
            <Identifier name="false"/>
          </Value>
        </Variable>
      </DeclarationBlock>
      <While>
        <Condition>
          <Value>
            <Member>
              <Identifier name="qryFacturas"/>
              <FunctionCall name="next"/>
            </Member>
          </Value>
        </Condition>
        <Source>
          <If>
            <Condition>
              <Expression>
                <OpUnary type="LNOT">
                  <Identifier name="idfactura"/>
                </OpUnary>
                <Compare type="LOR"/>
                <Identifier name="idfactura"/>
                <Compare type="NE"/>
                <Member>
                  <Identifier name="qryFacturas"/>
                  <FunctionCall name="value">
                    <CallArguments>
                      <Value>
                        <Constant delim="&quot;" type="String" value="facturascli.idfactura"/>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Member>
              </Expression>
            </Condition>
            <Source>
              <InstructionUpdate>
                <Identifier name="idfactura"/>
                <OpUpdate type="EQUALS"/>
                <Value>
                  <Member>
                    <Identifier name="qryFacturas"/>
                    <FunctionCall name="value">
                      <CallArguments>
                        <Value>
                          <Constant delim="&quot;" type="String" value="facturascli.idfactura"/>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Member>
                </Value>
              </InstructionUpdate>
              <If>
                <Condition>
                  <Value>
                    <FunctionCall name="parseFloat">
                      <CallArguments>
                        <Value>
                          <Member>
                            <Identifier name="qryFacturas"/>
                            <FunctionCall name="value">
                              <CallArguments>
                                <Value>
                                  <Constant delim="&quot;" type="String" value="facturascli.porcomision"/>
                                </Value>
                              </CallArguments>
                            </FunctionCall>
                          </Member>
                        </Value>
                      </CallArguments>
                    </FunctionCall>
                  </Value>
                </Condition>
                <Source>
                  <InstructionUpdate>
                    <Identifier name="comisionFactura"/>
                    <OpUpdate type="EQUALS"/>
                    <Value>
                      <Identifier name="true"/>
                    </Value>
                  </InstructionUpdate>
                  <InstructionUpdate>
                    <Identifier name="comision"/>
                    <OpUpdate type="EQUALS"/>
                    <Expression>
                      <FunctionCall name="parseFloat">
                        <CallArguments>
                          <Value>
                            <Member>
                              <Identifier name="qryFacturas"/>
                              <FunctionCall name="value">
                                <CallArguments>
                                  <Value>
                                    <Constant delim="&quot;" type="String" value="facturascli.porcomision"/>
                                  </Value>
                                </CallArguments>
                              </FunctionCall>
                            </Member>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                      <OpMath type="TIMES"/>
                      <FunctionCall name="parseFloat">
                        <CallArguments>
                          <Value>
                            <Member>
                              <Identifier name="qryFacturas"/>
                              <FunctionCall name="value">
                                <CallArguments>
                                  <Value>
                                    <Constant delim="&quot;" type="String" value="neto"/>
                                  </Value>
                                </CallArguments>
                              </FunctionCall>
                            </Member>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                      <OpMath type="DIVIDE"/>
                      <Constant type="Number" value="100"/>
                    </Expression>
                  </InstructionUpdate>
                  <InstructionUpdate>
                    <Identifier name="tasaconv"/>
                    <OpUpdate type="EQUALS"/>
                    <Value>
                      <FunctionCall name="parseFloat">
                        <CallArguments>
                          <Value>
                            <Member>
                              <Identifier name="qryFacturas"/>
                              <FunctionCall name="value">
                                <CallArguments>
                                  <Value>
                                    <Constant delim="&quot;" type="String" value="tasaconv"/>
                                  </Value>
                                </CallArguments>
                              </FunctionCall>
                            </Member>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Value>
                  </InstructionUpdate>
                  <If>
                    <Condition>
                      <Expression>
                        <Member>
                          <Identifier name="qryFacturas"/>
                          <FunctionCall name="value">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="coddivisa"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                        <Compare type="EQ"/>
                        <Identifier name="divisaEmpresa"/>
                      </Expression>
                    </Condition>
                    <Source>
                      <InstructionUpdate>
                        <Identifier name="total"/>
                        <OpUpdate type="PLUSEQUAL"/>
                        <Value>
                          <Identifier name="comision"/>
                        </Value>
                      </InstructionUpdate>
                    </Source>
                    <Else>
                      <Source>
                        <InstructionUpdate>
                          <Identifier name="total"/>
                          <OpUpdate type="PLUSEQUAL"/>
                          <Expression>
                            <Identifier name="comision"/>
                            <OpMath type="TIMES"/>
                            <Identifier name="tasaconv"/>
                          </Expression>
                        </InstructionUpdate>
                      </Source>
                    </Else>
                  </If>
                </Source>
                <Else>
                  <Source>
                    <InstructionUpdate>
                      <Identifier name="comisionFactura"/>
                      <OpUpdate type="EQUALS"/>
                      <Value>
                        <Identifier name="false"/>
                      </Value>
                    </InstructionUpdate>
                  </Source>
                </Else>
              </If>
            </Source>
          </If>
          <If>
            <Condition>
              <Value>
                <OpUnary type="LNOT">
                  <Identifier name="comisionFactura"/>
                </OpUnary>
              </Value>
            </Condition>
            <Source>
              <InstructionUpdate>
                <Identifier name="descuento"/>
                <OpUpdate type="EQUALS"/>
                <Value>
                  <FunctionCall name="parseFloat">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="qryFacturas"/>
                          <FunctionCall name="value">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="facturascli.pordtoesp"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Value>
              </InstructionUpdate>
              <InstructionUpdate>
                <Identifier name="descuento"/>
                <OpUpdate type="EQUALS"/>
                <Value>
                  <Parentheses>
                    <OpTernary>
                      <FunctionCall name="isNaN">
                        <CallArguments>
                          <Value>
                            <Identifier name="descuento"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                      <Constant type="Number" value="0"/>
                      <Identifier name="descuento"/>
                    </OpTernary>
                  </Parentheses>
                </Value>
              </InstructionUpdate>
              <InstructionUpdate>
                <Identifier name="comision"/>
                <OpUpdate type="EQUALS"/>
                <Expression>
                  <FunctionCall name="parseFloat">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="qryFacturas"/>
                          <FunctionCall name="value">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="lineasfacturascli.porcomision"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                  <OpMath type="TIMES"/>
                  <FunctionCall name="parseFloat">
                    <CallArguments>
                      <Expression>
                        <Member>
                          <Identifier name="qryFacturas"/>
                          <FunctionCall name="value">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="lineasfacturascli.pvptotal"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                        <OpMath type="TIMES"/>
                        <Parentheses>
                          <Constant type="Number" value="100"/>
                          <OpMath type="MINUS"/>
                          <Identifier name="descuento"/>
                        </Parentheses>
                        <OpMath type="DIVIDE"/>
                        <Constant type="Number" value="100"/>
                      </Expression>
                    </CallArguments>
                  </FunctionCall>
                  <OpMath type="DIVIDE"/>
                  <Constant type="Number" value="100"/>
                </Expression>
              </InstructionUpdate>
              <InstructionUpdate>
                <Identifier name="tasaconv"/>
                <OpUpdate type="EQUALS"/>
                <Value>
                  <FunctionCall name="parseFloat">
                    <CallArguments>
                      <Value>
                        <Member>
                          <Identifier name="qryFacturas"/>
                          <FunctionCall name="value">
                            <CallArguments>
                              <Value>
                                <Constant delim="&quot;" type="String" value="tasaconv"/>
                              </Value>
                            </CallArguments>
                          </FunctionCall>
                        </Member>
                      </Value>
                    </CallArguments>
                  </FunctionCall>
                </Value>
              </InstructionUpdate>
              <If>
                <Condition>
                  <Expression>
                    <Member>
                      <Identifier name="qryFacturas"/>
                      <FunctionCall name="value">
                        <CallArguments>
                          <Value>
                            <Constant delim="&quot;" type="String" value="coddivisa"/>
                          </Value>
                        </CallArguments>
                      </FunctionCall>
                    </Member>
                    <Compare type="EQ"/>
                    <Identifier name="divisaEmpresa"/>
                  </Expression>
                </Condition>
                <Source>
                  <InstructionUpdate>
                    <Identifier name="total"/>
                    <OpUpdate type="PLUSEQUAL"/>
                    <Value>
                      <Identifier name="comision"/>
                    </Value>
                  </InstructionUpdate>
                </Source>
                <Else>
                  <Source>
                    <InstructionUpdate>
                      <Identifier name="total"/>
                      <OpUpdate type="PLUSEQUAL"/>
                      <Expression>
                        <Identifier name="comision"/>
                        <OpMath type="TIMES"/>
                        <Identifier name="tasaconv"/>
                      </Expression>
                    </InstructionUpdate>
                  </Source>
                </Else>
              </If>
            </Source>
          </If>
        </Source>
      </While>
      <InstructionFlow type="RETURN">
        <Value>
          <Identifier name="total"/>
        </Value>
      </InstructionFlow>
    </Source>
  </Function>
</Source>
