0001Source: begin-gen
0001 DeclarationBlock: begin-gen
0001  Variable: begin-gen
0001   Variable: expr: 'util'
0001   Variable: expr: '='
0001   Value: begin-gen
0001    New: begin-gen
0001     FunctionCall: begin-gen
0001      FunctionCall: expr: 'FLUtil()'
0001    <-New: expr: 'qsatype.FLUtil()'
0001   <--Value: expr: 'qsatype.FLUtil()'
0001  <---Variable: expr: 'qsatype.FLUtil()'
0001     FunctionCall: end-gen
0001    New: end-gen
0001   Value: end-gen
0001  Variable: end-gen
0001  DeclarationBlock: line: 'util = qsatype.FLUtil()'
0001<-Source: line: 'util = qsatype.FLUtil()'
0002 DeclarationBlock: end-gen
0002 Function: begin-gen
0002  Function: line: 'def main():'
0002<-Source: line: 'def main():'
0003  Function: begin: 'block-def-main'
0003<-Source: begin: 'block-def-main'
0003  Source: begin-gen
0003   DeclarationBlock: begin-gen
0003    Variable: begin-gen
0003     Variable: expr: 'continuar'
0003     Variable: expr: '='
0003     Value: begin-gen
0003      Member: begin-gen
0003       Identifier: begin-gen
0003        Identifier: expr: 'MessageBox'
0003       Identifier: end-gen
0003       FunctionCall: begin-gen
0003        Value: begin-gen
0003         Member: begin-gen
0003          Identifier: begin-gen
0003           Identifier: expr: 'util'
0003          Identifier: end-gen
0003          FunctionCall: begin-gen
0003           Value: begin-gen
0003            Constant: begin-gen
0003             Constant: ctype: 'String' -> 'scripts'
0003             Constant: expr: 'u"scripts"'
0003           <-Value: expr: 'u"scripts"'
0003            Constant: end-gen
0003           Value: end-gen
0003           Value: begin-gen
0003            Constant: begin-gen
0003             Constant: ctype: 'String' -> 'Antes de cargar un módulo asegúrese de tener una copia de seguridad de todos los datos,\\ny de que no hay ningun otro usuario conectado a la base de datos mientras se realiza la carga.\\n\\n¿Desea continuar?'
0003             Constant: expr: 'u"Antes de cargar un módulo asegúrese de tener una copia de seguridad de todos los datos,\\ny de que no hay ningun otro usuario conectado a la base de datos mientras se realiza la carga.\\n\\n¿Desea continuar?"'
0003           <-Value: expr: 'u"Antes de cargar un módulo asegúrese de tener una copia de seguridad de todos los datos,\\ny de que no hay ningun otro usuario conectado a la base de datos mientras se realiza la carga.\\n\\n¿Desea continuar?"'
0003            Constant: end-gen
0003           Value: end-gen
0003           FunctionCall: expr: 'translate(u"scripts", u"Antes de cargar un módulo asegúrese de tener una copia de seguridad de todos los datos,\\ny de que no hay ningun otro usuario conectado a la base de datos mientras se realiza la carga.\\n\\n¿Desea continuar?")'
0003          FunctionCall: end-gen
0003          Member: expr: 'util.translate(u"scripts", u"Antes de cargar un módulo asegúrese de tener una copia de seguridad de todos los datos,\\ny de que no hay ningun otro usuario conectado a la base de datos mientras se realiza la carga.\\n\\n¿Desea continuar?")'
0003        <-Value: expr: 'util.translate(u"scripts", u"Antes de cargar un módulo asegúrese de tener una copia de seguridad de todos los datos,\\ny de que no hay ningun otro usuario conectado a la base de datos mientras se realiza la carga.\\n\\n¿Desea continuar?")'
0003         Member: end-gen
0003        Value: end-gen
0003        Value: begin-gen
0003         Member: begin-gen
0003          Identifier: begin-gen
0003           Identifier: expr: 'MessageBox'
0003          Identifier: end-gen
0003          Identifier: begin-gen
0003           Identifier: expr: 'Yes'
0003          Identifier: end-gen
0003          Member: expr: 'MessageBox.Yes'
0003        <-Value: expr: 'MessageBox.Yes'
0003         Member: end-gen
0003        Value: end-gen
0003        Value: begin-gen
0003         Member: begin-gen
0003          Identifier: begin-gen
0003           Identifier: expr: 'MessageBox'
0003          Identifier: end-gen
0003          Identifier: begin-gen
0003           Identifier: expr: 'No'
0003          Identifier: end-gen
0003          Member: expr: 'MessageBox.No'
0003        <-Value: expr: 'MessageBox.No'
0003         Member: end-gen
0003        Value: end-gen
0003        FunctionCall: expr: 'warning(util.translate(u"scripts", u"Antes de cargar un módulo asegúrese de tener una copia de seguridad de todos los datos,\\ny de que no hay ningun otro usuario conectado a la base de datos mientras se realiza la carga.\\n\\n¿Desea continuar?"), MessageBox.Yes, MessageBox.No)'
0003       FunctionCall: end-gen
0003       Member: expr: 'MessageBox.warning(util.translate(u"scripts", u"Antes de cargar un módulo asegúrese de tener una copia de seguridad de todos los datos,\\ny de que no hay ningun otro usuario conectado a la base de datos mientras se realiza la carga.\\n\\n¿Desea continuar?"), MessageBox.Yes, MessageBox.No)'
0003     <-Value: expr: 'MessageBox.warning(util.translate(u"scripts", u"Antes de cargar un módulo asegúrese de tener una copia de seguridad de todos los datos,\\ny de que no hay ningun otro usuario conectado a la base de datos mientras se realiza la carga.\\n\\n¿Desea continuar?"), MessageBox.Yes, MessageBox.No)'
0003    <--Variable: expr: 'MessageBox.warning(util.translate(u"scripts", u"Antes de cargar un módulo asegúrese de tener una copia de seguridad de todos los datos,\\ny de que no hay ningun otro usuario conectado a la base de datos mientras se realiza la carga.\\n\\n¿Desea continuar?"), MessageBox.Yes, MessageBox.No)'
0003      Member: end-gen
0003     Value: end-gen
0003    Variable: end-gen
0003    DeclarationBlock: line: 'continuar = MessageBox.warning(util.translate(u"scripts", u"Antes de cargar un módulo asegúrese de tener una copia de seguridad de todos los datos,\\ny de que no hay ningun otro usuario conectado a la base de datos mientras se realiza la carga.\\n\\n¿Desea continuar?"), MessageBox.Yes, MessageBox.No)'
0003  <-Source: line: 'continuar = MessageBox.warning(util.translate(u"scripts", u"Antes de cargar un módulo asegúrese de tener una copia de seguridad de todos los datos,\\ny de que no hay ningun otro usuario conectado a la base de datos mientras se realiza la carga.\\n\\n¿Desea continuar?"), MessageBox.Yes, MessageBox.No)'
0003 <--Function: line: 'continuar = MessageBox.warning(util.translate(u"scripts", u"Antes de cargar un módulo asegúrese de tener una copia de seguridad de todos los datos,\\ny de que no hay ningun otro usuario conectado a la base de datos mientras se realiza la carga.\\n\\n¿Desea continuar?"), MessageBox.Yes, MessageBox.No)'
0003<---Source: line: 'continuar = MessageBox.warning(util.translate(u"scripts", u"Antes de cargar un módulo asegúrese de tener una copia de seguridad de todos los datos,\\ny de que no hay ningun otro usuario conectado a la base de datos mientras se realiza la carga.\\n\\n¿Desea continuar?"), MessageBox.Yes, MessageBox.No)'
0004   DeclarationBlock: end-gen
0004   If: begin-gen
0004    Expression: begin-gen
0004     Identifier: begin-gen
0004      Identifier: expr: 'continuar'
0004    <-Expression: expr: 'continuar'
0004     Identifier: end-gen
0004     Compare: begin-gen
0004      Compare: expr: '=='
0004    <-Expression: expr: '=='
0004     Compare: end-gen
0004     Member: begin-gen
0004      Identifier: begin-gen
0004       Identifier: expr: 'MessageBox'
0004      Identifier: end-gen
0004      Identifier: begin-gen
0004       Identifier: expr: 'No'
0004      Identifier: end-gen
0004      Member: expr: 'MessageBox.No'
0004    <-Expression: expr: 'MessageBox.No'
0004     Member: end-gen
0004    Expression: end-gen
0004    If: line: 'if continuar == MessageBox.No:'
0004  <-Source: line: 'if continuar == MessageBox.No:'
0004 <--Function: line: 'if continuar == MessageBox.No:'
0004<---Source: line: 'if continuar == MessageBox.No:'
0005    If: begin: 'block-if'
0005  <-Source: begin: 'block-if'
0005 <--Function: begin: 'block-if'
0005<---Source: begin: 'block-if'
0005    Source: begin-gen
0005     InstructionFlow: begin-gen
0005      InstructionFlow: line: 'return '
0005    <-Source: line: 'return '
0005   <--If: line: 'return '
0005  <---Source: line: 'return '
0005 <----Function: line: 'return '
0005<-----Source: line: 'return '
0006     InstructionFlow: end-gen
0006    Source: end-gen
0006    If: end: 'block-if'
0006  <-Source: end: 'block-if'
0006 <--Function: end: 'block-if'
0006<---Source: end: 'block-if'
0006   If: end-gen
0006   DeclarationBlock: begin-gen
0006    Variable: begin-gen
0006     Variable: expr: 'nombreFichero'
0006     Variable: expr: '='
0006     Value: begin-gen
0006      Member: begin-gen
0006       Identifier: begin-gen
0006        Identifier: expr: 'FileDialog'
0006       Identifier: end-gen
0006       FunctionCall: begin-gen
0006        Value: begin-gen
0006         Constant: begin-gen
0006          Constant: ctype: 'String' -> 'modfiles(*.mod)'
0006          Constant: expr: 'u"modfiles(*.mod)"'
0006        <-Value: expr: 'u"modfiles(*.mod)"'
0006         Constant: end-gen
0006        Value: end-gen
0006        Value: begin-gen
0006         Member: begin-gen
0006          Identifier: begin-gen
0006           Identifier: expr: 'util'
0006          Identifier: end-gen
0006          FunctionCall: begin-gen
0006           Value: begin-gen
0006            Constant: begin-gen
0006             Constant: ctype: 'String' -> 'scripts'
0006             Constant: expr: 'u"scripts"'
0006           <-Value: expr: 'u"scripts"'
0006            Constant: end-gen
0006           Value: end-gen
0006           Value: begin-gen
0006            Constant: begin-gen
0006             Constant: ctype: 'String' -> 'Elegir Fichero'
0006             Constant: expr: 'u"Elegir Fichero"'
0006           <-Value: expr: 'u"Elegir Fichero"'
0006            Constant: end-gen
0006           Value: end-gen
0006           FunctionCall: expr: 'translate(u"scripts", u"Elegir Fichero")'
0006          FunctionCall: end-gen
0006          Member: expr: 'util.translate(u"scripts", u"Elegir Fichero")'
0006        <-Value: expr: 'util.translate(u"scripts", u"Elegir Fichero")'
0006         Member: end-gen
0006        Value: end-gen
0006        FunctionCall: expr: 'getOpenFileName(u"modfiles(*.mod)", util.translate(u"scripts", u"Elegir Fichero"))'
0006       FunctionCall: end-gen
0006       Member: expr: 'FileDialog.getOpenFileName(u"modfiles(*.mod)", util.translate(u"scripts", u"Elegir Fichero"))'
0006     <-Value: expr: 'FileDialog.getOpenFileName(u"modfiles(*.mod)", util.translate(u"scripts", u"Elegir Fichero"))'
0006    <--Variable: expr: 'FileDialog.getOpenFileName(u"modfiles(*.mod)", util.translate(u"scripts", u"Elegir Fichero"))'
0006      Member: end-gen
0006     Value: end-gen
0006    Variable: end-gen
0006    DeclarationBlock: line: 'nombreFichero = FileDialog.getOpenFileName(u"modfiles(*.mod)", util.translate(u"scripts", u"Elegir Fichero"))'
0006  <-Source: line: 'nombreFichero = FileDialog.getOpenFileName(u"modfiles(*.mod)", util.translate(u"scripts", u"Elegir Fichero"))'
0006 <--Function: line: 'nombreFichero = FileDialog.getOpenFileName(u"modfiles(*.mod)", util.translate(u"scripts", u"Elegir Fichero"))'
0006<---Source: line: 'nombreFichero = FileDialog.getOpenFileName(u"modfiles(*.mod)", util.translate(u"scripts", u"Elegir Fichero"))'
0007   DeclarationBlock: end-gen
0007   If: begin-gen
0007    Value: begin-gen
0007     Identifier: begin-gen
0007      Identifier: expr: 'nombreFichero'
0007    <-Value: expr: 'nombreFichero'
0007     Identifier: end-gen
0007    Value: end-gen
0007    If: line: 'if nombreFichero:'
0007  <-Source: line: 'if nombreFichero:'
0007 <--Function: line: 'if nombreFichero:'
0007<---Source: line: 'if nombreFichero:'
0008    If: begin: 'block-if'
0008  <-Source: begin: 'block-if'
0008 <--Function: begin: 'block-if'
0008<---Source: begin: 'block-if'
0008    Source: begin-gen
0008     DeclarationBlock: begin-gen
0008      Variable: begin-gen
0008       Variable: expr: 'fichero'
0008       Variable: expr: '='
0008       Value: begin-gen
0008        New: begin-gen
0008         FunctionCall: begin-gen
0008          Value: begin-gen
0008           Identifier: begin-gen
0008            Identifier: expr: 'nombreFichero'
0008          <-Value: expr: 'nombreFichero'
0008           Identifier: end-gen
0008          Value: end-gen
0008          FunctionCall: expr: 'File(nombreFichero)'
0008        <-New: expr: 'qsatype.File(nombreFichero)'
0008       <--Value: expr: 'qsatype.File(nombreFichero)'
0008      <---Variable: expr: 'qsatype.File(nombreFichero)'
0008         FunctionCall: end-gen
0008        New: end-gen
0008       Value: end-gen
0008      Variable: end-gen
0008      DeclarationBlock: line: 'fichero = qsatype.File(nombreFichero)'
0008    <-Source: line: 'fichero = qsatype.File(nombreFichero)'
0008   <--If: line: 'fichero = qsatype.File(nombreFichero)'
0008  <---Source: line: 'fichero = qsatype.File(nombreFichero)'
0008 <----Function: line: 'fichero = qsatype.File(nombreFichero)'
0008<-----Source: line: 'fichero = qsatype.File(nombreFichero)'
0009     DeclarationBlock: end-gen
0009     If: begin-gen
0009      Value: begin-gen
0009       OpUnary: begin-gen
0009        OpUnary: expr: 'not'
0009      <-Value: expr: 'not'
0009        Member: begin-gen
0009         Identifier: begin-gen
0009          Identifier: expr: 'formRecordflmodules'
0009         Identifier: end-gen
0009         FunctionCall: begin-gen
0009          Expression: begin-gen
0009           Expression: expr: 'ustr('
0009           Member: begin-gen
0009            Identifier: begin-gen
0009             Identifier: expr: 'fichero'
0009            Identifier: end-gen
0009            Identifier: begin-gen
0009             Identifier: expr: 'path'
0009            Identifier: end-gen
0009            Member: expr: 'fichero.path'
0009          <-Expression: expr: 'fichero.path'
0009           Member: end-gen
0009           Expression: expr: ','
0009           Constant: begin-gen
0009            Constant: ctype: 'String' -> '/'
0009            Constant: expr: 'u"/"'
0009          <-Expression: expr: 'u"/"'
0009           Constant: end-gen
0009           Expression: expr: ')'
0009          Expression: end-gen
0009          FunctionCall: expr: 'aceptarLicenciaDelModulo(ustr( fichero.path , u"/" ))'
0009         FunctionCall: end-gen
0009         Member: expr: 'formRecordflmodules.aceptarLicenciaDelModulo(ustr( fichero.path , u"/" ))'
0009       <-OpUnary: expr: 'formRecordflmodules.aceptarLicenciaDelModulo(ustr( fichero.path , u"/" ))'
0009      <--Value: expr: 'formRecordflmodules.aceptarLicenciaDelModulo(ustr( fichero.path , u"/" ))'
0009        Member: end-gen
0009       OpUnary: end-gen
0009      Value: end-gen
0009      If: line: 'if not formRecordflmodules.aceptarLicenciaDelModulo(ustr( fichero.path , u"/" )):'
0009    <-Source: line: 'if not formRecordflmodules.aceptarLicenciaDelModulo(ustr( fichero.path , u"/" )):'
0009   <--If: line: 'if not formRecordflmodules.aceptarLicenciaDelModulo(ustr( fichero.path , u"/" )):'
0009  <---Source: line: 'if not formRecordflmodules.aceptarLicenciaDelModulo(ustr( fichero.path , u"/" )):'
0009 <----Function: line: 'if not formRecordflmodules.aceptarLicenciaDelModulo(ustr( fichero.path , u"/" )):'
0009<-----Source: line: 'if not formRecordflmodules.aceptarLicenciaDelModulo(ustr( fichero.path , u"/" )):'
0010      If: begin: 'block-if'
0010    <-Source: begin: 'block-if'
0010   <--If: begin: 'block-if'
0010  <---Source: begin: 'block-if'
0010 <----Function: begin: 'block-if'
0010<-----Source: begin: 'block-if'
0010      Source: begin-gen
0010       InstructionCall: begin-gen
0010        Member: begin-gen
0010         Identifier: begin-gen
0010          Identifier: expr: 'MessageBox'
0010         Identifier: end-gen
0010         FunctionCall: begin-gen
0010          Value: begin-gen
0010           Member: begin-gen
0010            Identifier: begin-gen
0010             Identifier: expr: 'util'
0010            Identifier: end-gen
0010            FunctionCall: begin-gen
0010             Value: begin-gen
0010              Constant: begin-gen
0010               Constant: ctype: 'String' -> 'scripts'
0010               Constant: expr: 'u"scripts"'
0010             <-Value: expr: 'u"scripts"'
0010              Constant: end-gen
0010             Value: end-gen
0010             Value: begin-gen
0010              Constant: begin-gen
0010               Constant: ctype: 'String' -> 'Imposible cargar el módulo.\\nLicencia del módulo no aceptada.'
0010               Constant: expr: 'u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada."'
0010             <-Value: expr: 'u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada."'
0010              Constant: end-gen
0010             Value: end-gen
0010             FunctionCall: expr: 'translate(u"scripts", u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada.")'
0010            FunctionCall: end-gen
0010            Member: expr: 'util.translate(u"scripts", u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada.")'
0010          <-Value: expr: 'util.translate(u"scripts", u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada.")'
0010           Member: end-gen
0010          Value: end-gen
0010          Value: begin-gen
0010           Member: begin-gen
0010            Identifier: begin-gen
0010             Identifier: expr: 'MessageBox'
0010            Identifier: end-gen
0010            Identifier: begin-gen
0010             Identifier: expr: 'Ok'
0010            Identifier: end-gen
0010            Member: expr: 'MessageBox.Ok'
0010          <-Value: expr: 'MessageBox.Ok'
0010           Member: end-gen
0010          Value: end-gen
0010          FunctionCall: expr: 'critical(util.translate(u"scripts", u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada."), MessageBox.Ok)'
0010         FunctionCall: end-gen
0010         Member: expr: 'MessageBox.critical(util.translate(u"scripts", u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada."), MessageBox.Ok)'
0010        Member: end-gen
0010        InstructionCall: line: 'MessageBox.critical(util.translate(u"scripts", u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada."), MessageBox.Ok)'
0010      <-Source: line: 'MessageBox.critical(util.translate(u"scripts", u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada."), MessageBox.Ok)'
0010     <--If: line: 'MessageBox.critical(util.translate(u"scripts", u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada."), MessageBox.Ok)'
0010    <---Source: line: 'MessageBox.critical(util.translate(u"scripts", u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada."), MessageBox.Ok)'
0010   <----If: line: 'MessageBox.critical(util.translate(u"scripts", u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada."), MessageBox.Ok)'
0010  <-----Source: line: 'MessageBox.critical(util.translate(u"scripts", u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada."), MessageBox.Ok)'
0010 <------Function: line: 'MessageBox.critical(util.translate(u"scripts", u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada."), MessageBox.Ok)'
0010<-------Source: line: 'MessageBox.critical(util.translate(u"scripts", u"Imposible cargar el módulo.\\nLicencia del módulo no aceptada."), MessageBox.Ok)'
0011       InstructionCall: end-gen
0011       InstructionFlow: begin-gen
0011        InstructionFlow: line: 'return '
0011      <-Source: line: 'return '
0011     <--If: line: 'return '
0011    <---Source: line: 'return '
0011   <----If: line: 'return '
0011  <-----Source: line: 'return '
0011 <------Function: line: 'return '
0011<-------Source: line: 'return '
0012       InstructionFlow: end-gen
0012      Source: end-gen
0012      If: end: 'block-if'
0012    <-Source: end: 'block-if'
0012   <--If: end: 'block-if'
0012  <---Source: end: 'block-if'
0012 <----Function: end: 'block-if'
0012<-----Source: end: 'block-if'
0012     If: end-gen
0012     DeclarationBlock: begin-gen
0012      Variable: begin-gen
0012       Variable: expr: 'modulo'
0012       Variable: expr: '='
0012       Variable: expr: 'None'
0012      Variable: end-gen
0012      DeclarationBlock: line: 'modulo = None'
0012    <-Source: line: 'modulo = None'
0012   <--If: line: 'modulo = None'
0012  <---Source: line: 'modulo = None'
0012 <----Function: line: 'modulo = None'
0012<-----Source: line: 'modulo = None'
0013     DeclarationBlock: end-gen
0013     DeclarationBlock: begin-gen
0013      Variable: begin-gen
0013       Variable: expr: 'descripcion'
0013       Variable: expr: '='
0013       Variable: expr: 'None'
0013      Variable: end-gen
0013      DeclarationBlock: line: 'descripcion = None'
0013    <-Source: line: 'descripcion = None'
0013   <--If: line: 'descripcion = None'
0013  <---Source: line: 'descripcion = None'
0013 <----Function: line: 'descripcion = None'
0013<-----Source: line: 'descripcion = None'
0014     DeclarationBlock: end-gen
0014     DeclarationBlock: begin-gen
0014      Variable: begin-gen
0014       Variable: expr: 'area'
0014       Variable: expr: '='
0014       Variable: expr: 'None'
0014      Variable: end-gen
0014      DeclarationBlock: line: 'area = None'
0014    <-Source: line: 'area = None'
0014   <--If: line: 'area = None'
0014  <---Source: line: 'area = None'
0014 <----Function: line: 'area = None'
0014<-----Source: line: 'area = None'
0015     DeclarationBlock: end-gen
0015     DeclarationBlock: begin-gen
0015      Variable: begin-gen
0015       Variable: expr: 'desArea'
0015       Variable: expr: '='
0015       Variable: expr: 'None'
0015      Variable: end-gen
0015      DeclarationBlock: line: 'desArea = None'
0015    <-Source: line: 'desArea = None'
0015   <--If: line: 'desArea = None'
0015  <---Source: line: 'desArea = None'
0015 <----Function: line: 'desArea = None'
0015<-----Source: line: 'desArea = None'
0016     DeclarationBlock: end-gen
0016     DeclarationBlock: begin-gen
0016      Variable: begin-gen
0016       Variable: expr: 'version'
0016       Variable: expr: '='
0016       Variable: expr: 'None'
0016      Variable: end-gen
0016      DeclarationBlock: line: 'version = None'
0016    <-Source: line: 'version = None'
0016   <--If: line: 'version = None'
0016  <---Source: line: 'version = None'
0016 <----Function: line: 'version = None'
0016<-----Source: line: 'version = None'
0017     DeclarationBlock: end-gen
0017     DeclarationBlock: begin-gen
0017      Variable: begin-gen
0017       Variable: expr: 'nombreIcono'
0017       Variable: expr: '='
0017       Variable: expr: 'None'
0017      Variable: end-gen
0017      DeclarationBlock: line: 'nombreIcono = None'
0017    <-Source: line: 'nombreIcono = None'
0017   <--If: line: 'nombreIcono = None'
0017  <---Source: line: 'nombreIcono = None'
0017 <----Function: line: 'nombreIcono = None'
0017<-----Source: line: 'nombreIcono = None'
0018     DeclarationBlock: end-gen
0018     DeclarationBlock: begin-gen
0018      Variable: begin-gen
0018       Variable: expr: 'versionMinimaFL'
0018       Variable: expr: '='
0018       Variable: expr: 'None'
0018      Variable: end-gen
0018      DeclarationBlock: line: 'versionMinimaFL = None'
0018    <-Source: line: 'versionMinimaFL = None'
0018   <--If: line: 'versionMinimaFL = None'
0018  <---Source: line: 'versionMinimaFL = None'
0018 <----Function: line: 'versionMinimaFL = None'
0018<-----Source: line: 'versionMinimaFL = None'
0019     DeclarationBlock: end-gen
0019     DeclarationBlock: begin-gen
0019      Variable: begin-gen
0019       Variable: expr: 'dependencias'
0019       Variable: expr: '='
0019       Value: begin-gen
0019        Constant: begin-gen
0019         Constant: ctype: None -> None
0019         Constant: expr: '[]'
0019       <-Value: expr: '[]'
0019      <--Variable: expr: '[]'
0019        Constant: end-gen
0019       Value: end-gen
0019      Variable: end-gen
0019      DeclarationBlock: line: 'dependencias = []'
0019    <-Source: line: 'dependencias = []'
0019   <--If: line: 'dependencias = []'
0019  <---Source: line: 'dependencias = []'
0019 <----Function: line: 'dependencias = []'
0019<-----Source: line: 'dependencias = []'
0020     DeclarationBlock: end-gen
0020     InstructionCall: begin-gen
0020      Member: begin-gen
0020       Identifier: begin-gen
0020        Identifier: expr: 'fichero'
0020       Identifier: end-gen
0020       FunctionCall: begin-gen
0020        Value: begin-gen
0020         Member: begin-gen
0020          Identifier: begin-gen
0020           Identifier: expr: 'File'
0020          Identifier: end-gen
0020          Identifier: begin-gen
0020           Identifier: expr: 'ReadOnly'
0020          Identifier: end-gen
0020          Member: expr: 'File.ReadOnly'
0020        <-Value: expr: 'File.ReadOnly'
0020         Member: end-gen
0020        Value: end-gen
0020        FunctionCall: expr: 'open(File.ReadOnly)'
0020       FunctionCall: end-gen
0020       Member: expr: 'fichero.open(File.ReadOnly)'
0020      Member: end-gen
0020      InstructionCall: line: 'fichero.open(File.ReadOnly)'
0020    <-Source: line: 'fichero.open(File.ReadOnly)'
0020   <--If: line: 'fichero.open(File.ReadOnly)'
0020  <---Source: line: 'fichero.open(File.ReadOnly)'
0020 <----Function: line: 'fichero.open(File.ReadOnly)'
0020<-----Source: line: 'fichero.open(File.ReadOnly)'
0021     InstructionCall: end-gen
0021     DeclarationBlock: begin-gen
0021      Variable: begin-gen
0021       Variable: expr: 'f'
0021       Variable: expr: '='
0021       Value: begin-gen
0021        Member: begin-gen
0021         Identifier: begin-gen
0021          Identifier: expr: 'fichero'
0021         Identifier: end-gen
0021         FunctionCall: begin-gen
0021          FunctionCall: expr: 'read()'
0021         FunctionCall: end-gen
0021         Member: expr: 'fichero.read()'
0021       <-Value: expr: 'fichero.read()'
0021      <--Variable: expr: 'fichero.read()'
0021        Member: end-gen
0021       Value: end-gen
0021      Variable: end-gen
0021      DeclarationBlock: line: 'f = fichero.read()'
0021    <-Source: line: 'f = fichero.read()'
0021   <--If: line: 'f = fichero.read()'
0021  <---Source: line: 'f = fichero.read()'
0021 <----Function: line: 'f = fichero.read()'
0021<-----Source: line: 'f = fichero.read()'
0022     DeclarationBlock: end-gen
0022     DeclarationBlock: begin-gen
0022      Variable: begin-gen
0022       Variable: expr: 'xmlModule'
0022       Variable: expr: '='
0022       Value: begin-gen
0022        New: begin-gen
0022         FunctionCall: begin-gen
0022          FunctionCall: expr: 'FLDomDocument()'
0022        <-New: expr: 'qsatype.FLDomDocument()'
0022       <--Value: expr: 'qsatype.FLDomDocument()'
0022      <---Variable: expr: 'qsatype.FLDomDocument()'
0022         FunctionCall: end-gen
0022        New: end-gen
0022       Value: end-gen
0022      Variable: end-gen
0022      DeclarationBlock: line: 'xmlModule = qsatype.FLDomDocument()'
0022    <-Source: line: 'xmlModule = qsatype.FLDomDocument()'
0022   <--If: line: 'xmlModule = qsatype.FLDomDocument()'
0022  <---Source: line: 'xmlModule = qsatype.FLDomDocument()'
0022 <----Function: line: 'xmlModule = qsatype.FLDomDocument()'
0022<-----Source: line: 'xmlModule = qsatype.FLDomDocument()'
0023     DeclarationBlock: end-gen
0023     If: begin-gen
0023      Value: begin-gen
0023       Member: begin-gen
0023        Identifier: begin-gen
0023         Identifier: expr: 'xmlModule'
0023        Identifier: end-gen
0023        FunctionCall: begin-gen
0023         Value: begin-gen
0023          Identifier: begin-gen
0023           Identifier: expr: 'f'
0023         <-Value: expr: 'f'
0023          Identifier: end-gen
0023         Value: end-gen
0023         FunctionCall: expr: 'setContent(f)'
0023        FunctionCall: end-gen
0023        Member: expr: 'xmlModule.setContent(f)'
0023      <-Value: expr: 'xmlModule.setContent(f)'
0023       Member: end-gen
0023      Value: end-gen
0023      If: line: 'if xmlModule.setContent(f):'
0023    <-Source: line: 'if xmlModule.setContent(f):'
0023   <--If: line: 'if xmlModule.setContent(f):'
0023  <---Source: line: 'if xmlModule.setContent(f):'
0023 <----Function: line: 'if xmlModule.setContent(f):'
0023<-----Source: line: 'if xmlModule.setContent(f):'
0024      If: begin: 'block-if'
0024    <-Source: begin: 'block-if'
0024   <--If: begin: 'block-if'
0024  <---Source: begin: 'block-if'
0024 <----Function: begin: 'block-if'
0024<-----Source: begin: 'block-if'
0024      Source: begin-gen
0024       DeclarationBlock: begin-gen
0024        Variable: begin-gen
0024         Variable: expr: 'nodeModule'
0024         Variable: expr: '='
0024         Value: begin-gen
0024          Member: begin-gen
0024           Identifier: begin-gen
0024            Identifier: expr: 'xmlModule'
0024           Identifier: end-gen
0024           FunctionCall: begin-gen
0024            Value: begin-gen
0024             Constant: begin-gen
0024              Constant: ctype: 'String' -> 'MODULE'
0024              Constant: expr: 'u"MODULE"'
0024            <-Value: expr: 'u"MODULE"'
0024             Constant: end-gen
0024            Value: end-gen
0024            FunctionCall: expr: 'namedItem(u"MODULE")'
0024           FunctionCall: end-gen
0024           Member: expr: 'xmlModule.namedItem(u"MODULE")'
0024         <-Value: expr: 'xmlModule.namedItem(u"MODULE")'
0024        <--Variable: expr: 'xmlModule.namedItem(u"MODULE")'
0024          Member: end-gen
0024         Value: end-gen
0024        Variable: end-gen
0024        DeclarationBlock: line: 'nodeModule = xmlModule.namedItem(u"MODULE")'
0024      <-Source: line: 'nodeModule = xmlModule.namedItem(u"MODULE")'
0024     <--If: line: 'nodeModule = xmlModule.namedItem(u"MODULE")'
0024    <---Source: line: 'nodeModule = xmlModule.namedItem(u"MODULE")'
0024   <----If: line: 'nodeModule = xmlModule.namedItem(u"MODULE")'
0024  <-----Source: line: 'nodeModule = xmlModule.namedItem(u"MODULE")'
0024 <------Function: line: 'nodeModule = xmlModule.namedItem(u"MODULE")'
0024<-------Source: line: 'nodeModule = xmlModule.namedItem(u"MODULE")'
0025       DeclarationBlock: end-gen
0025       If: begin-gen
0025        Value: begin-gen
0025         OpUnary: begin-gen
0025          OpUnary: expr: 'not'
0025        <-Value: expr: 'not'
0025          Identifier: begin-gen
0025           Identifier: expr: 'nodeModule'
0025         <-OpUnary: expr: 'nodeModule'
0025        <--Value: expr: 'nodeModule'
0025          Identifier: end-gen
0025         OpUnary: end-gen
0025        Value: end-gen
0025        If: line: 'if not nodeModule:'
0025      <-Source: line: 'if not nodeModule:'
0025     <--If: line: 'if not nodeModule:'
0025    <---Source: line: 'if not nodeModule:'
0025   <----If: line: 'if not nodeModule:'
0025  <-----Source: line: 'if not nodeModule:'
0025 <------Function: line: 'if not nodeModule:'
0025<-------Source: line: 'if not nodeModule:'
0026        If: begin: 'block-if'
0026      <-Source: begin: 'block-if'
0026     <--If: begin: 'block-if'
0026    <---Source: begin: 'block-if'
0026   <----If: begin: 'block-if'
0026  <-----Source: begin: 'block-if'
0026 <------Function: begin: 'block-if'
0026<-------Source: begin: 'block-if'
0026        Source: begin-gen
0026         InstructionCall: begin-gen
0026          Member: begin-gen
0026           Identifier: begin-gen
0026            Identifier: expr: 'MessageBox'
0026           Identifier: end-gen
0026           FunctionCall: begin-gen
0026            Value: begin-gen
0026             Member: begin-gen
0026              Identifier: begin-gen
0026               Identifier: expr: 'util'
0026              Identifier: end-gen
0026              FunctionCall: begin-gen
0026               Value: begin-gen
0026                Constant: begin-gen
0026                 Constant: ctype: 'String' -> 'scripts'
0026                 Constant: expr: 'u"scripts"'
0026               <-Value: expr: 'u"scripts"'
0026                Constant: end-gen
0026               Value: end-gen
0026               Value: begin-gen
0026                Constant: begin-gen
0026                 Constant: ctype: 'String' -> 'Error en la carga del fichero xml .mod'
0026                 Constant: expr: 'u"Error en la carga del fichero xml .mod"'
0026               <-Value: expr: 'u"Error en la carga del fichero xml .mod"'
0026                Constant: end-gen
0026               Value: end-gen
0026               FunctionCall: expr: 'translate(u"scripts", u"Error en la carga del fichero xml .mod")'
0026              FunctionCall: end-gen
0026              Member: expr: 'util.translate(u"scripts", u"Error en la carga del fichero xml .mod")'
0026            <-Value: expr: 'util.translate(u"scripts", u"Error en la carga del fichero xml .mod")'
0026             Member: end-gen
0026            Value: end-gen
0026            Value: begin-gen
0026             Member: begin-gen
0026              Identifier: begin-gen
0026               Identifier: expr: 'MessageBox'
0026              Identifier: end-gen
0026              Identifier: begin-gen
0026               Identifier: expr: 'Ok'
0026              Identifier: end-gen
0026              Member: expr: 'MessageBox.Ok'
0026            <-Value: expr: 'MessageBox.Ok'
0026             Member: end-gen
0026            Value: end-gen
0026            Value: begin-gen
0026             Member: begin-gen
0026              Identifier: begin-gen
0026               Identifier: expr: 'MessageBox'
0026              Identifier: end-gen
0026              Identifier: begin-gen
0026               Identifier: expr: 'NoButton'
0026              Identifier: end-gen
0026              Member: expr: 'MessageBox.NoButton'
0026            <-Value: expr: 'MessageBox.NoButton'
0026             Member: end-gen
0026            Value: end-gen
0026            FunctionCall: expr: 'critical(util.translate(u"scripts", u"Error en la carga del fichero xml .mod"), MessageBox.Ok, MessageBox.NoButton)'
0026           FunctionCall: end-gen
0026           Member: expr: 'MessageBox.critical(util.translate(u"scripts", u"Error en la carga del fichero xml .mod"), MessageBox.Ok, MessageBox.NoButton)'
0026          Member: end-gen
0026          InstructionCall: line: 'MessageBox.critical(util.translate(u"scripts", u"Error en la carga del fichero xml .mod"), MessageBox.Ok, MessageBox.NoButton)'
0026        <-Source: line: 'MessageBox.critical(util.translate(u"scripts", u"Error en la carga del fichero xml .mod"), MessageBox.Ok, MessageBox.NoButton)'
0026       <--If: line: 'MessageBox.critical(util.translate(u"scripts", u"Error en la carga del fichero xml .mod"), MessageBox.Ok, MessageBox.NoButton)'
0026      <---Source: line: 'MessageBox.critical(util.translate(u"scripts", u"Error en la carga del fichero xml .mod"), MessageBox.Ok, MessageBox.NoButton)'
0026     <----If: line: 'MessageBox.critical(util.translate(u"scripts", u"Error en la carga del fichero xml .mod"), MessageBox.Ok, MessageBox.NoButton)'
0026    <-----Source: line: 'MessageBox.critical(util.translate(u"scripts", u"Error en la carga del fichero xml .mod"), MessageBox.Ok, MessageBox.NoButton)'
0026   <------If: line: 'MessageBox.critical(util.translate(u"scripts", u"Error en la carga del fichero xml .mod"), MessageBox.Ok, MessageBox.NoButton)'
0026  <-------Source: line: 'MessageBox.critical(util.translate(u"scripts", u"Error en la carga del fichero xml .mod"), MessageBox.Ok, MessageBox.NoButton)'
0026 <--------Function: line: 'MessageBox.critical(util.translate(u"scripts", u"Error en la carga del fichero xml .mod"), MessageBox.Ok, MessageBox.NoButton)'
0026<---------Source: line: 'MessageBox.critical(util.translate(u"scripts", u"Error en la carga del fichero xml .mod"), MessageBox.Ok, MessageBox.NoButton)'
0027         InstructionCall: end-gen
0027        Source: end-gen
0027        If: end: 'block-if'
0027      <-Source: end: 'block-if'
0027     <--If: end: 'block-if'
0027    <---Source: end: 'block-if'
0027   <----If: end: 'block-if'
0027  <-----Source: end: 'block-if'
0027 <------Function: end: 'block-if'
0027<-------Source: end: 'block-if'
0027       If: end-gen
0027       InstructionUpdate: begin-gen
0027        Identifier: begin-gen
0027         Identifier: expr: 'modulo'
0027        Identifier: end-gen
0027        OpUpdate: begin-gen
0027         OpUpdate: expr: '='
0027        OpUpdate: end-gen
0027        Value: begin-gen
0027         Member: begin-gen
0027          Identifier: begin-gen
0027           Identifier: expr: 'nodeModule'
0027          Identifier: end-gen
0027          FunctionCall: begin-gen
0027           Value: begin-gen
0027            Constant: begin-gen
0027             Constant: ctype: 'String' -> 'name'
0027             Constant: expr: 'u"name"'
0027           <-Value: expr: 'u"name"'
0027            Constant: end-gen
0027           Value: end-gen
0027           FunctionCall: expr: 'namedItem(u"name")'
0027          FunctionCall: end-gen
0027          FunctionCall: begin-gen
0027           FunctionCall: expr: 'toElement()'
0027          FunctionCall: end-gen
0027          FunctionCall: begin-gen
0027           FunctionCall: expr: 'text()'
0027          FunctionCall: end-gen
0027          Member: expr: 'qsa(nodeModule.namedItem(u"name").toElement()).text()'
0027        <-Value: expr: 'qsa(nodeModule.namedItem(u"name").toElement()).text()'
0027         Member: end-gen
0027        Value: end-gen
0027        InstructionUpdate: line: 'modulo = qsa(nodeModule.namedItem(u"name").toElement()).text()'
0027      <-Source: line: 'modulo = qsa(nodeModule.namedItem(u"name").toElement()).text()'
0027     <--If: line: 'modulo = qsa(nodeModule.namedItem(u"name").toElement()).text()'
0027    <---Source: line: 'modulo = qsa(nodeModule.namedItem(u"name").toElement()).text()'
0027   <----If: line: 'modulo = qsa(nodeModule.namedItem(u"name").toElement()).text()'
0027  <-----Source: line: 'modulo = qsa(nodeModule.namedItem(u"name").toElement()).text()'
0027 <------Function: line: 'modulo = qsa(nodeModule.namedItem(u"name").toElement()).text()'
0027<-------Source: line: 'modulo = qsa(nodeModule.namedItem(u"name").toElement()).text()'
0028       InstructionUpdate: end-gen
0028       InstructionUpdate: begin-gen
0028        Identifier: begin-gen
0028         Identifier: expr: 'descripcion'
0028        Identifier: end-gen
0028        OpUpdate: begin-gen
0028         OpUpdate: expr: '='
0028        OpUpdate: end-gen
0028        Value: begin-gen
0028         Member: begin-gen
0028          Identifier: begin-gen
0028           Identifier: expr: 'nodeModule'
0028          Identifier: end-gen
0028          FunctionCall: begin-gen
0028           Value: begin-gen
0028            Constant: begin-gen
0028             Constant: ctype: 'String' -> 'alias'
0028             Constant: expr: 'u"alias"'
0028           <-Value: expr: 'u"alias"'
0028            Constant: end-gen
0028           Value: end-gen
0028           FunctionCall: expr: 'namedItem(u"alias")'
0028          FunctionCall: end-gen
0028          FunctionCall: begin-gen
0028           FunctionCall: expr: 'toElement()'
0028          FunctionCall: end-gen
0028          FunctionCall: begin-gen
0028           FunctionCall: expr: 'text()'
0028          FunctionCall: end-gen
0028          Member: expr: 'qsa(nodeModule.namedItem(u"alias").toElement()).text()'
0028        <-Value: expr: 'qsa(nodeModule.namedItem(u"alias").toElement()).text()'
0028         Member: end-gen
0028        Value: end-gen
0028        InstructionUpdate: line: 'descripcion = qsa(nodeModule.namedItem(u"alias").toElement()).text()'
0028      <-Source: line: 'descripcion = qsa(nodeModule.namedItem(u"alias").toElement()).text()'
0028     <--If: line: 'descripcion = qsa(nodeModule.namedItem(u"alias").toElement()).text()'
0028    <---Source: line: 'descripcion = qsa(nodeModule.namedItem(u"alias").toElement()).text()'
0028   <----If: line: 'descripcion = qsa(nodeModule.namedItem(u"alias").toElement()).text()'
0028  <-----Source: line: 'descripcion = qsa(nodeModule.namedItem(u"alias").toElement()).text()'
0028 <------Function: line: 'descripcion = qsa(nodeModule.namedItem(u"alias").toElement()).text()'
0028<-------Source: line: 'descripcion = qsa(nodeModule.namedItem(u"alias").toElement()).text()'
0029       InstructionUpdate: end-gen
0029       InstructionUpdate: begin-gen
0029        Identifier: begin-gen
0029         Identifier: expr: 'area'
0029        Identifier: end-gen
0029        OpUpdate: begin-gen
0029         OpUpdate: expr: '='
0029        OpUpdate: end-gen
0029        Value: begin-gen
0029         Member: begin-gen
0029          Identifier: begin-gen
0029           Identifier: expr: 'nodeModule'
0029          Identifier: end-gen
0029          FunctionCall: begin-gen
0029           Value: begin-gen
0029            Constant: begin-gen
0029             Constant: ctype: 'String' -> 'area'
0029             Constant: expr: 'u"area"'
0029           <-Value: expr: 'u"area"'
0029            Constant: end-gen
0029           Value: end-gen
0029           FunctionCall: expr: 'namedItem(u"area")'
0029          FunctionCall: end-gen
0029          FunctionCall: begin-gen
0029           FunctionCall: expr: 'toElement()'
0029          FunctionCall: end-gen
0029          FunctionCall: begin-gen
0029           FunctionCall: expr: 'text()'
0029          FunctionCall: end-gen
0029          Member: expr: 'qsa(nodeModule.namedItem(u"area").toElement()).text()'
0029        <-Value: expr: 'qsa(nodeModule.namedItem(u"area").toElement()).text()'
0029         Member: end-gen
0029        Value: end-gen
0029        InstructionUpdate: line: 'area = qsa(nodeModule.namedItem(u"area").toElement()).text()'
0029      <-Source: line: 'area = qsa(nodeModule.namedItem(u"area").toElement()).text()'
0029     <--If: line: 'area = qsa(nodeModule.namedItem(u"area").toElement()).text()'
0029    <---Source: line: 'area = qsa(nodeModule.namedItem(u"area").toElement()).text()'
0029   <----If: line: 'area = qsa(nodeModule.namedItem(u"area").toElement()).text()'
0029  <-----Source: line: 'area = qsa(nodeModule.namedItem(u"area").toElement()).text()'
0029 <------Function: line: 'area = qsa(nodeModule.namedItem(u"area").toElement()).text()'
0029<-------Source: line: 'area = qsa(nodeModule.namedItem(u"area").toElement()).text()'
0030       InstructionUpdate: end-gen
0030       InstructionUpdate: begin-gen
0030        Identifier: begin-gen
0030         Identifier: expr: 'desArea'
0030        Identifier: end-gen
0030        OpUpdate: begin-gen
0030         OpUpdate: expr: '='
0030        OpUpdate: end-gen
0030        Value: begin-gen
0030         Member: begin-gen
0030          Identifier: begin-gen
0030           Identifier: expr: 'nodeModule'
0030          Identifier: end-gen
0030          FunctionCall: begin-gen
0030           Value: begin-gen
0030            Constant: begin-gen
0030             Constant: ctype: 'String' -> 'areaname'
0030             Constant: expr: 'u"areaname"'
0030           <-Value: expr: 'u"areaname"'
0030            Constant: end-gen
0030           Value: end-gen
0030           FunctionCall: expr: 'namedItem(u"areaname")'
0030          FunctionCall: end-gen
0030          FunctionCall: begin-gen
0030           FunctionCall: expr: 'toElement()'
0030          FunctionCall: end-gen
0030          FunctionCall: begin-gen
0030           FunctionCall: expr: 'text()'
0030          FunctionCall: end-gen
0030          Member: expr: 'qsa(nodeModule.namedItem(u"areaname").toElement()).text()'
0030        <-Value: expr: 'qsa(nodeModule.namedItem(u"areaname").toElement()).text()'
0030         Member: end-gen
0030        Value: end-gen
0030        InstructionUpdate: line: 'desArea = qsa(nodeModule.namedItem(u"areaname").toElement()).text()'
0030      <-Source: line: 'desArea = qsa(nodeModule.namedItem(u"areaname").toElement()).text()'
0030     <--If: line: 'desArea = qsa(nodeModule.namedItem(u"areaname").toElement()).text()'
0030    <---Source: line: 'desArea = qsa(nodeModule.namedItem(u"areaname").toElement()).text()'
0030   <----If: line: 'desArea = qsa(nodeModule.namedItem(u"areaname").toElement()).text()'
0030  <-----Source: line: 'desArea = qsa(nodeModule.namedItem(u"areaname").toElement()).text()'
0030 <------Function: line: 'desArea = qsa(nodeModule.namedItem(u"areaname").toElement()).text()'
0030<-------Source: line: 'desArea = qsa(nodeModule.namedItem(u"areaname").toElement()).text()'
0031       InstructionUpdate: end-gen
0031       InstructionUpdate: begin-gen
0031        Identifier: begin-gen
0031         Identifier: expr: 'version'
0031        Identifier: end-gen
0031        OpUpdate: begin-gen
0031         OpUpdate: expr: '='
0031        OpUpdate: end-gen
0031        Value: begin-gen
0031         Member: begin-gen
0031          Identifier: begin-gen
0031           Identifier: expr: 'nodeModule'
0031          Identifier: end-gen
0031          FunctionCall: begin-gen
0031           Value: begin-gen
0031            Constant: begin-gen
0031             Constant: ctype: 'String' -> 'version'
0031             Constant: expr: 'u"version"'
0031           <-Value: expr: 'u"version"'
0031            Constant: end-gen
0031           Value: end-gen
0031           FunctionCall: expr: 'namedItem(u"version")'
0031          FunctionCall: end-gen
0031          FunctionCall: begin-gen
0031           FunctionCall: expr: 'toElement()'
0031          FunctionCall: end-gen
0031          FunctionCall: begin-gen
0031           FunctionCall: expr: 'text()'
0031          FunctionCall: end-gen
0031          Member: expr: 'qsa(nodeModule.namedItem(u"version").toElement()).text()'
0031        <-Value: expr: 'qsa(nodeModule.namedItem(u"version").toElement()).text()'
0031         Member: end-gen
0031        Value: end-gen
0031        InstructionUpdate: line: 'version = qsa(nodeModule.namedItem(u"version").toElement()).text()'
0031      <-Source: line: 'version = qsa(nodeModule.namedItem(u"version").toElement()).text()'
0031     <--If: line: 'version = qsa(nodeModule.namedItem(u"version").toElement()).text()'
0031    <---Source: line: 'version = qsa(nodeModule.namedItem(u"version").toElement()).text()'
0031   <----If: line: 'version = qsa(nodeModule.namedItem(u"version").toElement()).text()'
0031  <-----Source: line: 'version = qsa(nodeModule.namedItem(u"version").toElement()).text()'
0031 <------Function: line: 'version = qsa(nodeModule.namedItem(u"version").toElement()).text()'
0031<-------Source: line: 'version = qsa(nodeModule.namedItem(u"version").toElement()).text()'
0032       InstructionUpdate: end-gen
0032       InstructionUpdate: begin-gen
0032        Identifier: begin-gen
0032         Identifier: expr: 'nombreIcono'
0032        Identifier: end-gen
0032        OpUpdate: begin-gen
0032         OpUpdate: expr: '='
0032        OpUpdate: end-gen
0032        Value: begin-gen
0032         Member: begin-gen
0032          Identifier: begin-gen
0032           Identifier: expr: 'nodeModule'
0032          Identifier: end-gen
0032          FunctionCall: begin-gen
0032           Value: begin-gen
0032            Constant: begin-gen
0032             Constant: ctype: 'String' -> 'icon'
0032             Constant: expr: 'u"icon"'
0032           <-Value: expr: 'u"icon"'
0032            Constant: end-gen
0032           Value: end-gen
0032           FunctionCall: expr: 'namedItem(u"icon")'
0032          FunctionCall: end-gen
0032          FunctionCall: begin-gen
0032           FunctionCall: expr: 'toElement()'
0032          FunctionCall: end-gen
0032          FunctionCall: begin-gen
0032           FunctionCall: expr: 'text()'
0032          FunctionCall: end-gen
0032          Member: expr: 'qsa(nodeModule.namedItem(u"icon").toElement()).text()'
0032        <-Value: expr: 'qsa(nodeModule.namedItem(u"icon").toElement()).text()'
0032         Member: end-gen
0032        Value: end-gen
0032        InstructionUpdate: line: 'nombreIcono = qsa(nodeModule.namedItem(u"icon").toElement()).text()'
0032      <-Source: line: 'nombreIcono = qsa(nodeModule.namedItem(u"icon").toElement()).text()'
0032     <--If: line: 'nombreIcono = qsa(nodeModule.namedItem(u"icon").toElement()).text()'
0032    <---Source: line: 'nombreIcono = qsa(nodeModule.namedItem(u"icon").toElement()).text()'
0032   <----If: line: 'nombreIcono = qsa(nodeModule.namedItem(u"icon").toElement()).text()'
0032  <-----Source: line: 'nombreIcono = qsa(nodeModule.namedItem(u"icon").toElement()).text()'
0032 <------Function: line: 'nombreIcono = qsa(nodeModule.namedItem(u"icon").toElement()).text()'
0032<-------Source: line: 'nombreIcono = qsa(nodeModule.namedItem(u"icon").toElement()).text()'
0033       InstructionUpdate: end-gen
0033       If: begin-gen
0033        Value: begin-gen
0033         Member: begin-gen
0033          Identifier: begin-gen
0033           Identifier: expr: 'nodeModule'
0033          Identifier: end-gen
0033          FunctionCall: begin-gen
0033           Value: begin-gen
0033            Constant: begin-gen
0033             Constant: ctype: 'String' -> 'flversion'
0033             Constant: expr: 'u"flversion"'
0033           <-Value: expr: 'u"flversion"'
0033            Constant: end-gen
0033           Value: end-gen
0033           FunctionCall: expr: 'namedItem(u"flversion")'
0033          FunctionCall: end-gen
0033          Member: expr: 'nodeModule.namedItem(u"flversion")'
0033        <-Value: expr: 'nodeModule.namedItem(u"flversion")'
0033         Member: end-gen
0033        Value: end-gen
0033        If: line: 'if nodeModule.namedItem(u"flversion"):'
0033      <-Source: line: 'if nodeModule.namedItem(u"flversion"):'
0033     <--If: line: 'if nodeModule.namedItem(u"flversion"):'
0033    <---Source: line: 'if nodeModule.namedItem(u"flversion"):'
0033   <----If: line: 'if nodeModule.namedItem(u"flversion"):'
0033  <-----Source: line: 'if nodeModule.namedItem(u"flversion"):'
0033 <------Function: line: 'if nodeModule.namedItem(u"flversion"):'
0033<-------Source: line: 'if nodeModule.namedItem(u"flversion"):'
0034        If: begin: 'block-if'
0034      <-Source: begin: 'block-if'
0034     <--If: begin: 'block-if'
0034    <---Source: begin: 'block-if'
0034   <----If: begin: 'block-if'
0034  <-----Source: begin: 'block-if'
0034 <------Function: begin: 'block-if'
0034<-------Source: begin: 'block-if'
0034        Source: begin-gen
0034         InstructionUpdate: begin-gen
0034          Identifier: begin-gen
0034           Identifier: expr: 'versionMinimaFL'
0034          Identifier: end-gen
0034          OpUpdate: begin-gen
0034           OpUpdate: expr: '='
0034          OpUpdate: end-gen
0034          Value: begin-gen
0034           Member: begin-gen
0034            Identifier: begin-gen
0034             Identifier: expr: 'nodeModule'
0034            Identifier: end-gen
0034            FunctionCall: begin-gen
0034             Value: begin-gen
0034              Constant: begin-gen
0034               Constant: ctype: 'String' -> 'flversion'
0034               Constant: expr: 'u"flversion"'
0034             <-Value: expr: 'u"flversion"'
0034              Constant: end-gen
0034             Value: end-gen
0034             FunctionCall: expr: 'namedItem(u"flversion")'
0034            FunctionCall: end-gen
0034            FunctionCall: begin-gen
0034             FunctionCall: expr: 'toElement()'
0034            FunctionCall: end-gen
0034            FunctionCall: begin-gen
0034             FunctionCall: expr: 'text()'
0034            FunctionCall: end-gen
0034            Member: expr: 'qsa(nodeModule.namedItem(u"flversion").toElement()).text()'
0034          <-Value: expr: 'qsa(nodeModule.namedItem(u"flversion").toElement()).text()'
0034           Member: end-gen
0034          Value: end-gen
0034          InstructionUpdate: line: 'versionMinimaFL = qsa(nodeModule.namedItem(u"flversion").toElement()).text()'
0034        <-Source: line: 'versionMinimaFL = qsa(nodeModule.namedItem(u"flversion").toElement()).text()'
0034       <--If: line: 'versionMinimaFL = qsa(nodeModule.namedItem(u"flversion").toElement()).text()'
0034      <---Source: line: 'versionMinimaFL = qsa(nodeModule.namedItem(u"flversion").toElement()).text()'
0034     <----If: line: 'versionMinimaFL = qsa(nodeModule.namedItem(u"flversion").toElement()).text()'
0034    <-----Source: line: 'versionMinimaFL = qsa(nodeModule.namedItem(u"flversion").toElement()).text()'
0034   <------If: line: 'versionMinimaFL = qsa(nodeModule.namedItem(u"flversion").toElement()).text()'
0034  <-------Source: line: 'versionMinimaFL = qsa(nodeModule.namedItem(u"flversion").toElement()).text()'
0034 <--------Function: line: 'versionMinimaFL = qsa(nodeModule.namedItem(u"flversion").toElement()).text()'
0034<---------Source: line: 'versionMinimaFL = qsa(nodeModule.namedItem(u"flversion").toElement()).text()'
0035         InstructionUpdate: end-gen
0035        Source: end-gen
0035        If: end: 'block-if'
0035      <-Source: end: 'block-if'
0035     <--If: end: 'block-if'
0035    <---Source: end: 'block-if'
0035   <----If: end: 'block-if'
0035  <-----Source: end: 'block-if'
0035 <------Function: end: 'block-if'
0035<-------Source: end: 'block-if'
0035       If: end-gen
0035       If: begin-gen
0035        Value: begin-gen
0035         Member: begin-gen
0035          Identifier: begin-gen
0035           Identifier: expr: 'nodeModule'
0035          Identifier: end-gen
0035          FunctionCall: begin-gen
0035           Value: begin-gen
0035            Constant: begin-gen
0035             Constant: ctype: 'String' -> 'dependencies'
0035             Constant: expr: 'u"dependencies"'
0035           <-Value: expr: 'u"dependencies"'
0035            Constant: end-gen
0035           Value: end-gen
0035           FunctionCall: expr: 'namedItem(u"dependencies")'
0035          FunctionCall: end-gen
0035          Member: expr: 'nodeModule.namedItem(u"dependencies")'
0035        <-Value: expr: 'nodeModule.namedItem(u"dependencies")'
0035         Member: end-gen
0035        Value: end-gen
0035        If: line: 'if nodeModule.namedItem(u"dependencies"):'
0035      <-Source: line: 'if nodeModule.namedItem(u"dependencies"):'
0035     <--If: line: 'if nodeModule.namedItem(u"dependencies"):'
0035    <---Source: line: 'if nodeModule.namedItem(u"dependencies"):'
0035   <----If: line: 'if nodeModule.namedItem(u"dependencies"):'
0035  <-----Source: line: 'if nodeModule.namedItem(u"dependencies"):'
0035 <------Function: line: 'if nodeModule.namedItem(u"dependencies"):'
0035<-------Source: line: 'if nodeModule.namedItem(u"dependencies"):'
0036        If: begin: 'block-if'
0036      <-Source: begin: 'block-if'
0036     <--If: begin: 'block-if'
0036    <---Source: begin: 'block-if'
0036   <----If: begin: 'block-if'
0036  <-----Source: begin: 'block-if'
0036 <------Function: begin: 'block-if'
0036<-------Source: begin: 'block-if'
0036        Source: begin-gen
0036         DeclarationBlock: begin-gen
0036          Variable: begin-gen
0036           Variable: expr: 'nodeDepend'
0036           Variable: expr: '='
0036           Value: begin-gen
0036            Member: begin-gen
0036             Identifier: begin-gen
0036              Identifier: expr: 'xmlModule'
0036             Identifier: end-gen
0036             FunctionCall: begin-gen
0036              Value: begin-gen
0036               Constant: begin-gen
0036                Constant: ctype: 'String' -> 'dependency'
0036                Constant: expr: 'u"dependency"'
0036              <-Value: expr: 'u"dependency"'
0036               Constant: end-gen
0036              Value: end-gen
0036              FunctionCall: expr: 'elementsByTagName(u"dependency")'
0036             FunctionCall: end-gen
0036             Member: expr: 'xmlModule.elementsByTagName(u"dependency")'
0036           <-Value: expr: 'xmlModule.elementsByTagName(u"dependency")'
0036          <--Variable: expr: 'xmlModule.elementsByTagName(u"dependency")'
0036            Member: end-gen
0036           Value: end-gen
0036          Variable: end-gen
0036          DeclarationBlock: line: 'nodeDepend = xmlModule.elementsByTagName(u"dependency")'
0036        <-Source: line: 'nodeDepend = xmlModule.elementsByTagName(u"dependency")'
0036       <--If: line: 'nodeDepend = xmlModule.elementsByTagName(u"dependency")'
0036      <---Source: line: 'nodeDepend = xmlModule.elementsByTagName(u"dependency")'
0036     <----If: line: 'nodeDepend = xmlModule.elementsByTagName(u"dependency")'
0036    <-----Source: line: 'nodeDepend = xmlModule.elementsByTagName(u"dependency")'
0036   <------If: line: 'nodeDepend = xmlModule.elementsByTagName(u"dependency")'
0036  <-------Source: line: 'nodeDepend = xmlModule.elementsByTagName(u"dependency")'
0036 <--------Function: line: 'nodeDepend = xmlModule.elementsByTagName(u"dependency")'
0036<---------Source: line: 'nodeDepend = xmlModule.elementsByTagName(u"dependency")'
0037         DeclarationBlock: end-gen
0037         For: begin-gen
0037          Variable: begin-gen
0037           Variable: expr: 'i'
0037           Variable: expr: '='
0037           Value: begin-gen
0037            Constant: begin-gen
0037             Constant: ctype: 'Number' -> '0'
0037             Constant: expr: '0'
0037           <-Value: expr: '0'
0037          <--Variable: expr: '0'
0037            Constant: end-gen
0037           Value: end-gen
0037          Variable: end-gen
0037          For: line: 'i = 0'
0037        <-Source: line: 'i = 0'
0037       <--If: line: 'i = 0'
0037      <---Source: line: 'i = 0'
0037     <----If: line: 'i = 0'
0037    <-----Source: line: 'i = 0'
0037   <------If: line: 'i = 0'
0037  <-------Source: line: 'i = 0'
0037 <--------Function: line: 'i = 0'
0037<---------Source: line: 'i = 0'
0038          InlineUpdate: begin-gen
0038           Identifier: begin-gen
0038            Identifier: expr: 'i'
0038           Identifier: end-gen
0038           InlineUpdate: expr: 'i'
0038           InlineUpdate: line+1: 'i += 1'
0038          InlineUpdate: end-gen
0038          Expression: begin-gen
0038           Identifier: begin-gen
0038            Identifier: expr: 'i'
0038          <-Expression: expr: 'i'
0038           Identifier: end-gen
0038           Compare: begin-gen
0038            Compare: expr: '<'
0038          <-Expression: expr: '<'
0038           Compare: end-gen
0038           Member: begin-gen
0038            Identifier: begin-gen
0038             Identifier: expr: 'nodeDepend'
0038            Identifier: end-gen
0038            FunctionCall: begin-gen
0038             FunctionCall: expr: 'length()'
0038            FunctionCall: end-gen
0038            Member: expr: 'qsa(nodeDepend).length()'
0038          <-Expression: expr: 'qsa(nodeDepend).length()'
0038           Member: end-gen
0038          Expression: end-gen
0038          For: line: 'while i < qsa(nodeDepend).length():'
0038        <-Source: line: 'while i < qsa(nodeDepend).length():'
0038       <--If: line: 'while i < qsa(nodeDepend).length():'
0038      <---Source: line: 'while i < qsa(nodeDepend).length():'
0038     <----If: line: 'while i < qsa(nodeDepend).length():'
0038    <-----Source: line: 'while i < qsa(nodeDepend).length():'
0038   <------If: line: 'while i < qsa(nodeDepend).length():'
0038  <-------Source: line: 'while i < qsa(nodeDepend).length():'
0038 <--------Function: line: 'while i < qsa(nodeDepend).length():'
0038<---------Source: line: 'while i < qsa(nodeDepend).length():'
0039          For: begin: 'block-for'
0039        <-Source: begin: 'block-for'
0039       <--If: begin: 'block-for'
0039      <---Source: begin: 'block-for'
0039     <----If: begin: 'block-for'
0039    <-----Source: begin: 'block-for'
0039   <------If: begin: 'block-for'
0039  <-------Source: begin: 'block-for'
0039 <--------Function: begin: 'block-for'
0039<---------Source: begin: 'block-for'
0039          Source: begin-gen
0039           InstructionUpdate: begin-gen
0039            ArrayMember: begin-gen
0039             Identifier: begin-gen
0039              Identifier: expr: 'dependencias'
0039             Identifier: end-gen
0039             Value: begin-gen
0039              Identifier: begin-gen
0039               Identifier: expr: 'i'
0039             <-Value: expr: 'i'
0039              Identifier: end-gen
0039             Value: end-gen
0039             ArrayMember: expr: 'dependencias[i]'
0039            ArrayMember: end-gen
0039            OpUpdate: begin-gen
0039             OpUpdate: expr: '='
0039            OpUpdate: end-gen
0039            Value: begin-gen
0039             Member: begin-gen
0039              Identifier: begin-gen
0039               Identifier: expr: 'nodeDepend'
0039              Identifier: end-gen
0039              FunctionCall: begin-gen
0039               Value: begin-gen
0039                Identifier: begin-gen
0039                 Identifier: expr: 'i'
0039               <-Value: expr: 'i'
0039                Identifier: end-gen
0039               Value: end-gen
0039               FunctionCall: expr: 'item(i)'
0039              FunctionCall: end-gen
0039              FunctionCall: begin-gen
0039               FunctionCall: expr: 'toElement()'
0039              FunctionCall: end-gen
0039              FunctionCall: begin-gen
0039               FunctionCall: expr: 'text()'
0039              FunctionCall: end-gen
0039              Member: expr: 'qsa(nodeDepend.item(i).toElement()).text()'
0039            <-Value: expr: 'qsa(nodeDepend.item(i).toElement()).text()'
0039             Member: end-gen
0039            Value: end-gen
0039            InstructionUpdate: line: 'dependencias[i] = qsa(nodeDepend.item(i).toElement()).text()'
0039          <-Source: line: 'dependencias[i] = qsa(nodeDepend.item(i).toElement()).text()'
0039         <--For: line: 'dependencias[i] = qsa(nodeDepend.item(i).toElement()).text()'
0039        <---Source: line: 'dependencias[i] = qsa(nodeDepend.item(i).toElement()).text()'
0039       <----If: line: 'dependencias[i] = qsa(nodeDepend.item(i).toElement()).text()'
0039      <-----Source: line: 'dependencias[i] = qsa(nodeDepend.item(i).toElement()).text()'
0039     <------If: line: 'dependencias[i] = qsa(nodeDepend.item(i).toElement()).text()'
0039    <-------Source: line: 'dependencias[i] = qsa(nodeDepend.item(i).toElement()).text()'
0039   <--------If: line: 'dependencias[i] = qsa(nodeDepend.item(i).toElement()).text()'
0039  <---------Source: line: 'dependencias[i] = qsa(nodeDepend.item(i).toElement()).text()'
0039 <----------Function: line: 'dependencias[i] = qsa(nodeDepend.item(i).toElement()).text()'
0039<-----------Source: line: 'dependencias[i] = qsa(nodeDepend.item(i).toElement()).text()'
0040           InstructionUpdate: end-gen
0040          Source: end-gen
0040          For: line: 'i += 1'
0040        <-Source: line: 'i += 1'
0040       <--If: line: 'i += 1'
0040      <---Source: line: 'i += 1'
0040     <----If: line: 'i += 1'
0040    <-----Source: line: 'i += 1'
0040   <------If: line: 'i += 1'
0040  <-------Source: line: 'i += 1'
0040 <--------Function: line: 'i += 1'
0040<---------Source: line: 'i += 1'
0041          For: end: 'block-for'
0041        <-Source: end: 'block-for'
0041       <--If: end: 'block-for'
0041      <---Source: end: 'block-for'
0041     <----If: end: 'block-for'
0041    <-----Source: end: 'block-for'
0041   <------If: end: 'block-for'
0041  <-------Source: end: 'block-for'
0041 <--------Function: end: 'block-for'
0041<---------Source: end: 'block-for'
0041         For: end-gen
0041        Source: end-gen
0041        If: end: 'block-if'
0041      <-Source: end: 'block-if'
0041     <--If: end: 'block-if'
0041    <---Source: end: 'block-if'
0041   <----If: end: 'block-if'
0041  <-----Source: end: 'block-if'
0041 <------Function: end: 'block-if'
0041<-------Source: end: 'block-if'
0041       If: end-gen
0041      Source: end-gen
0041      If: end: 'block-if'
0041    <-Source: end: 'block-if'
0041   <--If: end: 'block-if'
0041  <---Source: end: 'block-if'
0041 <----Function: end: 'block-if'
0041<-----Source: end: 'block-if'
0041      If: line: 'else:'
0041    <-Source: line: 'else:'
0041   <--If: line: 'else:'
0041  <---Source: line: 'else:'
0041 <----Function: line: 'else:'
0041<-----Source: line: 'else:'
0043      If: begin: 'block-else'
0043    <-Source: begin: 'block-else'
0043   <--If: begin: 'block-else'
0043  <---Source: begin: 'block-else'
0043 <----Function: begin: 'block-else'
0043<-----Source: begin: 'block-else'
0043      Source: begin-gen
0043       DeclarationBlock: begin-gen
0043        Variable: begin-gen
0043         Variable: expr: 'aF'
0043         Variable: expr: '='
0043         Value: begin-gen
0043          Member: begin-gen
0043           Identifier: begin-gen
0043            Identifier: expr: 'f'
0043           Identifier: end-gen
0043           FunctionCall: begin-gen
0043            Value: begin-gen
0043             Constant: begin-gen
0043              Constant: ctype: 'String' -> '\\n'
0043              Constant: expr: 'u"\\n"'
0043            <-Value: expr: 'u"\\n"'
0043             Constant: end-gen
0043            Value: end-gen
0043            FunctionCall: expr: 'split(u"\\n")'
0043           FunctionCall: end-gen
0043           Member: expr: 'f.split(u"\\n")'
0043         <-Value: expr: 'f.split(u"\\n")'
0043        <--Variable: expr: 'f.split(u"\\n")'
0043          Member: end-gen
0043         Value: end-gen
0043        Variable: end-gen
0043        DeclarationBlock: line: 'aF = f.split(u"\\n")'
0043      <-Source: line: 'aF = f.split(u"\\n")'
0043     <--If: line: 'aF = f.split(u"\\n")'
0043    <---Source: line: 'aF = f.split(u"\\n")'
0043   <----If: line: 'aF = f.split(u"\\n")'
0043  <-----Source: line: 'aF = f.split(u"\\n")'
0043 <------Function: line: 'aF = f.split(u"\\n")'
0043<-------Source: line: 'aF = f.split(u"\\n")'
0044       DeclarationBlock: end-gen
0044       InstructionUpdate: begin-gen
0044        Identifier: begin-gen
0044         Identifier: expr: 'modulo'
0044        Identifier: end-gen
0044        OpUpdate: begin-gen
0044         OpUpdate: expr: '='
0044        OpUpdate: end-gen
0044        Value: begin-gen
0044         FunctionCall: begin-gen
0044          Value: begin-gen
0044           ArrayMember: begin-gen
0044            Identifier: begin-gen
0044             Identifier: expr: 'aF'
0044            Identifier: end-gen
0044            Value: begin-gen
0044             Constant: begin-gen
0044              Constant: ctype: 'Number' -> '0'
0044              Constant: expr: '0'
0044            <-Value: expr: '0'
0044             Constant: end-gen
0044            Value: end-gen
0044            ArrayMember: expr: 'aF[0]'
0044          <-Value: expr: 'aF[0]'
0044           ArrayMember: end-gen
0044          Value: end-gen
0044          FunctionCall: expr: 'dameValor(aF[0])'
0044        <-Value: expr: 'dameValor(aF[0])'
0044         FunctionCall: end-gen
0044        Value: end-gen
0044        InstructionUpdate: line: 'modulo = dameValor(aF[0])'
0044      <-Source: line: 'modulo = dameValor(aF[0])'
0044     <--If: line: 'modulo = dameValor(aF[0])'
0044    <---Source: line: 'modulo = dameValor(aF[0])'
0044   <----If: line: 'modulo = dameValor(aF[0])'
0044  <-----Source: line: 'modulo = dameValor(aF[0])'
0044 <------Function: line: 'modulo = dameValor(aF[0])'
0044<-------Source: line: 'modulo = dameValor(aF[0])'
0045       InstructionUpdate: end-gen
0045       InstructionUpdate: begin-gen
0045        Identifier: begin-gen
0045         Identifier: expr: 'descripcion'
0045        Identifier: end-gen
0045        OpUpdate: begin-gen
0045         OpUpdate: expr: '='
0045        OpUpdate: end-gen
0045        Value: begin-gen
0045         FunctionCall: begin-gen
0045          Value: begin-gen
0045           ArrayMember: begin-gen
0045            Identifier: begin-gen
0045             Identifier: expr: 'aF'
0045            Identifier: end-gen
0045            Value: begin-gen
0045             Constant: begin-gen
0045              Constant: ctype: 'Number' -> '1'
0045              Constant: expr: '1'
0045            <-Value: expr: '1'
0045             Constant: end-gen
0045            Value: end-gen
0045            ArrayMember: expr: 'aF[1]'
0045          <-Value: expr: 'aF[1]'
0045           ArrayMember: end-gen
0045          Value: end-gen
0045          FunctionCall: expr: 'dameValor(aF[1])'
0045        <-Value: expr: 'dameValor(aF[1])'
0045         FunctionCall: end-gen
0045        Value: end-gen
0045        InstructionUpdate: line: 'descripcion = dameValor(aF[1])'
0045      <-Source: line: 'descripcion = dameValor(aF[1])'
0045     <--If: line: 'descripcion = dameValor(aF[1])'
0045    <---Source: line: 'descripcion = dameValor(aF[1])'
0045   <----If: line: 'descripcion = dameValor(aF[1])'
0045  <-----Source: line: 'descripcion = dameValor(aF[1])'
0045 <------Function: line: 'descripcion = dameValor(aF[1])'
0045<-------Source: line: 'descripcion = dameValor(aF[1])'
0046       InstructionUpdate: end-gen
0046       InstructionUpdate: begin-gen
0046        Identifier: begin-gen
0046         Identifier: expr: 'area'
0046        Identifier: end-gen
0046        OpUpdate: begin-gen
0046         OpUpdate: expr: '='
0046        OpUpdate: end-gen
0046        Value: begin-gen
0046         FunctionCall: begin-gen
0046          Value: begin-gen
0046           ArrayMember: begin-gen
0046            Identifier: begin-gen
0046             Identifier: expr: 'aF'
0046            Identifier: end-gen
0046            Value: begin-gen
0046             Constant: begin-gen
0046              Constant: ctype: 'Number' -> '2'
0046              Constant: expr: '2'
0046            <-Value: expr: '2'
0046             Constant: end-gen
0046            Value: end-gen
0046            ArrayMember: expr: 'aF[2]'
0046          <-Value: expr: 'aF[2]'
0046           ArrayMember: end-gen
0046          Value: end-gen
0046          FunctionCall: expr: 'dameValor(aF[2])'
0046        <-Value: expr: 'dameValor(aF[2])'
0046         FunctionCall: end-gen
0046        Value: end-gen
0046        InstructionUpdate: line: 'area = dameValor(aF[2])'
0046      <-Source: line: 'area = dameValor(aF[2])'
0046     <--If: line: 'area = dameValor(aF[2])'
0046    <---Source: line: 'area = dameValor(aF[2])'
0046   <----If: line: 'area = dameValor(aF[2])'
0046  <-----Source: line: 'area = dameValor(aF[2])'
0046 <------Function: line: 'area = dameValor(aF[2])'
0046<-------Source: line: 'area = dameValor(aF[2])'
0047       InstructionUpdate: end-gen
0047       InstructionUpdate: begin-gen
0047        Identifier: begin-gen
0047         Identifier: expr: 'desArea'
0047        Identifier: end-gen
0047        OpUpdate: begin-gen
0047         OpUpdate: expr: '='
0047        OpUpdate: end-gen
0047        Value: begin-gen
0047         FunctionCall: begin-gen
0047          Value: begin-gen
0047           ArrayMember: begin-gen
0047            Identifier: begin-gen
0047             Identifier: expr: 'aF'
0047            Identifier: end-gen
0047            Value: begin-gen
0047             Constant: begin-gen
0047              Constant: ctype: 'Number' -> '3'
0047              Constant: expr: '3'
0047            <-Value: expr: '3'
0047             Constant: end-gen
0047            Value: end-gen
0047            ArrayMember: expr: 'aF[3]'
0047          <-Value: expr: 'aF[3]'
0047           ArrayMember: end-gen
0047          Value: end-gen
0047          FunctionCall: expr: 'dameValor(aF[3])'
0047        <-Value: expr: 'dameValor(aF[3])'
0047         FunctionCall: end-gen
0047        Value: end-gen
0047        InstructionUpdate: line: 'desArea = dameValor(aF[3])'
0047      <-Source: line: 'desArea = dameValor(aF[3])'
0047     <--If: line: 'desArea = dameValor(aF[3])'
0047    <---Source: line: 'desArea = dameValor(aF[3])'
0047   <----If: line: 'desArea = dameValor(aF[3])'
0047  <-----Source: line: 'desArea = dameValor(aF[3])'
0047 <------Function: line: 'desArea = dameValor(aF[3])'
0047<-------Source: line: 'desArea = dameValor(aF[3])'
0048       InstructionUpdate: end-gen
0048       InstructionUpdate: begin-gen
0048        Identifier: begin-gen
0048         Identifier: expr: 'version'
0048        Identifier: end-gen
0048        OpUpdate: begin-gen
0048         OpUpdate: expr: '='
0048        OpUpdate: end-gen
0048        Value: begin-gen
0048         FunctionCall: begin-gen
0048          Value: begin-gen
0048           ArrayMember: begin-gen
0048            Identifier: begin-gen
0048             Identifier: expr: 'aF'
0048            Identifier: end-gen
0048            Value: begin-gen
0048             Constant: begin-gen
0048              Constant: ctype: 'Number' -> '4'
0048              Constant: expr: '4'
0048            <-Value: expr: '4'
0048             Constant: end-gen
0048            Value: end-gen
0048            ArrayMember: expr: 'aF[4]'
0048          <-Value: expr: 'aF[4]'
0048           ArrayMember: end-gen
0048          Value: end-gen
0048          FunctionCall: expr: 'dameValor(aF[4])'
0048        <-Value: expr: 'dameValor(aF[4])'
0048         FunctionCall: end-gen
0048        Value: end-gen
0048        InstructionUpdate: line: 'version = dameValor(aF[4])'
0048      <-Source: line: 'version = dameValor(aF[4])'
0048     <--If: line: 'version = dameValor(aF[4])'
0048    <---Source: line: 'version = dameValor(aF[4])'
0048   <----If: line: 'version = dameValor(aF[4])'
0048  <-----Source: line: 'version = dameValor(aF[4])'
0048 <------Function: line: 'version = dameValor(aF[4])'
0048<-------Source: line: 'version = dameValor(aF[4])'
0049       InstructionUpdate: end-gen
0049       InstructionUpdate: begin-gen
0049        Identifier: begin-gen
0049         Identifier: expr: 'nombreIcono'
0049        Identifier: end-gen
0049        OpUpdate: begin-gen
0049         OpUpdate: expr: '='
0049        OpUpdate: end-gen
0049        Value: begin-gen
0049         FunctionCall: begin-gen
0049          Value: begin-gen
0049           ArrayMember: begin-gen
0049            Identifier: begin-gen
0049             Identifier: expr: 'aF'
0049            Identifier: end-gen
0049            Value: begin-gen
0049             Constant: begin-gen
0049              Constant: ctype: 'Number' -> '5'
0049              Constant: expr: '5'
0049            <-Value: expr: '5'
0049             Constant: end-gen
0049            Value: end-gen
0049            ArrayMember: expr: 'aF[5]'
0049          <-Value: expr: 'aF[5]'
0049           ArrayMember: end-gen
0049          Value: end-gen
0049          FunctionCall: expr: 'dameValor(aF[5])'
0049        <-Value: expr: 'dameValor(aF[5])'
0049         FunctionCall: end-gen
0049        Value: end-gen
0049        InstructionUpdate: line: 'nombreIcono = dameValor(aF[5])'
0049      <-Source: line: 'nombreIcono = dameValor(aF[5])'
0049     <--If: line: 'nombreIcono = dameValor(aF[5])'
0049    <---Source: line: 'nombreIcono = dameValor(aF[5])'
0049   <----If: line: 'nombreIcono = dameValor(aF[5])'
0049  <-----Source: line: 'nombreIcono = dameValor(aF[5])'
0049 <------Function: line: 'nombreIcono = dameValor(aF[5])'
0049<-------Source: line: 'nombreIcono = dameValor(aF[5])'
0050       InstructionUpdate: end-gen
0050       If: begin-gen
0050        Expression: begin-gen
0050         Member: begin-gen
0050          Identifier: begin-gen
0050           Identifier: expr: 'aF'
0050          Identifier: end-gen
0050          Identifier: begin-gen
0050           Identifier: expr: 'length'
0050          Identifier: end-gen
0050          Member: expr: 'qsa(aF).length'
0050        <-Expression: expr: 'qsa(aF).length'
0050         Member: end-gen
0050         Compare: begin-gen
0050          Compare: expr: '>'
0050        <-Expression: expr: '>'
0050         Compare: end-gen
0050         Constant: begin-gen
0050          Constant: ctype: 'Number' -> '6'
0050          Constant: expr: '6'
0050        <-Expression: expr: '6'
0050         Constant: end-gen
0050        Expression: end-gen
0050        If: line: 'if qsa(aF).length > 6:'
0050      <-Source: line: 'if qsa(aF).length > 6:'
0050     <--If: line: 'if qsa(aF).length > 6:'
0050    <---Source: line: 'if qsa(aF).length > 6:'
0050   <----If: line: 'if qsa(aF).length > 6:'
0050  <-----Source: line: 'if qsa(aF).length > 6:'
0050 <------Function: line: 'if qsa(aF).length > 6:'
0050<-------Source: line: 'if qsa(aF).length > 6:'
0051        If: begin: 'block-if'
0051      <-Source: begin: 'block-if'
0051     <--If: begin: 'block-if'
0051    <---Source: begin: 'block-if'
0051   <----If: begin: 'block-if'
0051  <-----Source: begin: 'block-if'
0051 <------Function: begin: 'block-if'
0051<-------Source: begin: 'block-if'
0051        Source: begin-gen
0051         InstructionUpdate: begin-gen
0051          Identifier: begin-gen
0051           Identifier: expr: 'versionMinimaFL'
0051          Identifier: end-gen
0051          OpUpdate: begin-gen
0051           OpUpdate: expr: '='
0051          OpUpdate: end-gen
0051          Value: begin-gen
0051           FunctionCall: begin-gen
0051            Value: begin-gen
0051             ArrayMember: begin-gen
0051              Identifier: begin-gen
0051               Identifier: expr: 'aF'
0051              Identifier: end-gen
0051              Value: begin-gen
0051               Constant: begin-gen
0051                Constant: ctype: 'Number' -> '6'
0051                Constant: expr: '6'
0051              <-Value: expr: '6'
0051               Constant: end-gen
0051              Value: end-gen
0051              ArrayMember: expr: 'aF[6]'
0051            <-Value: expr: 'aF[6]'
0051             ArrayMember: end-gen
0051            Value: end-gen
0051            FunctionCall: expr: 'dameValor(aF[6])'
0051          <-Value: expr: 'dameValor(aF[6])'
0051           FunctionCall: end-gen
0051          Value: end-gen
0051          InstructionUpdate: line: 'versionMinimaFL = dameValor(aF[6])'
0051        <-Source: line: 'versionMinimaFL = dameValor(aF[6])'
0051       <--If: line: 'versionMinimaFL = dameValor(aF[6])'
0051      <---Source: line: 'versionMinimaFL = dameValor(aF[6])'
0051     <----If: line: 'versionMinimaFL = dameValor(aF[6])'
0051    <-----Source: line: 'versionMinimaFL = dameValor(aF[6])'
0051   <------If: line: 'versionMinimaFL = dameValor(aF[6])'
0051  <-------Source: line: 'versionMinimaFL = dameValor(aF[6])'
0051 <--------Function: line: 'versionMinimaFL = dameValor(aF[6])'
0051<---------Source: line: 'versionMinimaFL = dameValor(aF[6])'
0052         InstructionUpdate: end-gen
0052        Source: end-gen
0052        If: end: 'block-if'
0052      <-Source: end: 'block-if'
0052     <--If: end: 'block-if'
0052    <---Source: end: 'block-if'
0052   <----If: end: 'block-if'
0052  <-----Source: end: 'block-if'
0052 <------Function: end: 'block-if'
0052<-------Source: end: 'block-if'
0052       If: end-gen
0052       If: begin-gen
0052        Expression: begin-gen
0052         Member: begin-gen
0052          Identifier: begin-gen
0052           Identifier: expr: 'aF'
0052          Identifier: end-gen
0052          Identifier: begin-gen
0052           Identifier: expr: 'length'
0052          Identifier: end-gen
0052          Member: expr: 'qsa(aF).length'
0052        <-Expression: expr: 'qsa(aF).length'
0052         Member: end-gen
0052         Compare: begin-gen
0052          Compare: expr: '>'
0052        <-Expression: expr: '>'
0052         Compare: end-gen
0052         Constant: begin-gen
0052          Constant: ctype: 'Number' -> '7'
0052          Constant: expr: '7'
0052        <-Expression: expr: '7'
0052         Constant: end-gen
0052        Expression: end-gen
0052        If: line: 'if qsa(aF).length > 7:'
0052      <-Source: line: 'if qsa(aF).length > 7:'
0052     <--If: line: 'if qsa(aF).length > 7:'
0052    <---Source: line: 'if qsa(aF).length > 7:'
0052   <----If: line: 'if qsa(aF).length > 7:'
0052  <-----Source: line: 'if qsa(aF).length > 7:'
0052 <------Function: line: 'if qsa(aF).length > 7:'
0052<-------Source: line: 'if qsa(aF).length > 7:'
0053        If: begin: 'block-if'
0053      <-Source: begin: 'block-if'
0053     <--If: begin: 'block-if'
0053    <---Source: begin: 'block-if'
0053   <----If: begin: 'block-if'
0053  <-----Source: begin: 'block-if'
0053 <------Function: begin: 'block-if'
0053<-------Source: begin: 'block-if'
0053        Source: begin-gen
0053         InstructionUpdate: begin-gen
0053          Identifier: begin-gen
0053           Identifier: expr: 'dependencias'
0053          Identifier: end-gen
0053          OpUpdate: begin-gen
0053           OpUpdate: expr: '='
0053          OpUpdate: end-gen
0053          Value: begin-gen
0053           Member: begin-gen
0053            FunctionCall: begin-gen
0053             Value: begin-gen
0053              ArrayMember: begin-gen
0053               Identifier: begin-gen
0053                Identifier: expr: 'aF'
0053               Identifier: end-gen
0053               Value: begin-gen
0053                Constant: begin-gen
0053                 Constant: ctype: 'Number' -> '7'
0053                 Constant: expr: '7'
0053               <-Value: expr: '7'
0053                Constant: end-gen
0053               Value: end-gen
0053               ArrayMember: expr: 'aF[7]'
0053             <-Value: expr: 'aF[7]'
0053              ArrayMember: end-gen
0053             Value: end-gen
0053             FunctionCall: expr: 'dameValor(aF[7])'
0053            FunctionCall: end-gen
0053            FunctionCall: begin-gen
0053             Value: begin-gen
0053              Constant: begin-gen
0053               Constant: ctype: None -> None
0053              Constant: end-gen
0053             Value: end-gen
0053             FunctionCall: debug: 'Argument 0 not understood'
0053           <-Member: debug: 'Argument 0 not understood'
0053          <--Value: debug: 'Argument 0 not understood'
0053         <---InstructionUpdate: debug: 'Argument 0 not understood'
0053        <----Source: debug: 'Argument 0 not understood'
0053       <-----If: debug: 'Argument 0 not understood'
0053      <------Source: debug: 'Argument 0 not understood'
0053     <-------If: debug: 'Argument 0 not understood'
0053    <--------Source: debug: 'Argument 0 not understood'
0053   <---------If: debug: 'Argument 0 not understood'
0053  <----------Source: debug: 'Argument 0 not understood'
0053 <-----------Function: debug: 'Argument 0 not understood'
0053<------------Source: debug: 'Argument 0 not understood'
0054             FunctionCall: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="COMMA"/><regexchar arg00="RBRACKET"/></regexbody></Constant></Value>'
0054           <-Member: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="COMMA"/><regexchar arg00="RBRACKET"/></regexbody></Constant></Value>'
0054          <--Value: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="COMMA"/><regexchar arg00="RBRACKET"/></regexbody></Constant></Value>'
0054         <---InstructionUpdate: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="COMMA"/><regexchar arg00="RBRACKET"/></regexbody></Constant></Value>'
0054        <----Source: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="COMMA"/><regexchar arg00="RBRACKET"/></regexbody></Constant></Value>'
0054       <-----If: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="COMMA"/><regexchar arg00="RBRACKET"/></regexbody></Constant></Value>'
0054      <------Source: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="COMMA"/><regexchar arg00="RBRACKET"/></regexbody></Constant></Value>'
0054     <-------If: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="COMMA"/><regexchar arg00="RBRACKET"/></regexbody></Constant></Value>'
0054    <--------Source: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="COMMA"/><regexchar arg00="RBRACKET"/></regexbody></Constant></Value>'
0054   <---------If: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="COMMA"/><regexchar arg00="RBRACKET"/></regexbody></Constant></Value>'
0054  <----------Source: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="COMMA"/><regexchar arg00="RBRACKET"/></regexbody></Constant></Value>'
0054 <-----------Function: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="COMMA"/><regexchar arg00="RBRACKET"/></regexbody></Constant></Value>'
0054<------------Source: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="COMMA"/><regexchar arg00="RBRACKET"/></regexbody></Constant></Value>'
0055             FunctionCall: expr: 'split(unknownarg)'
0055            FunctionCall: end-gen
0055            Member: expr: 'dameValor(aF[7]).split(unknownarg)'
0055          <-Value: expr: 'dameValor(aF[7]).split(unknownarg)'
0055           Member: end-gen
0055          Value: end-gen
0055          InstructionUpdate: line: 'dependencias = dameValor(aF[7]).split(unknownarg)'
0055        <-Source: line: 'dependencias = dameValor(aF[7]).split(unknownarg)'
0055       <--If: line: 'dependencias = dameValor(aF[7]).split(unknownarg)'
0055      <---Source: line: 'dependencias = dameValor(aF[7]).split(unknownarg)'
0055     <----If: line: 'dependencias = dameValor(aF[7]).split(unknownarg)'
0055    <-----Source: line: 'dependencias = dameValor(aF[7]).split(unknownarg)'
0055   <------If: line: 'dependencias = dameValor(aF[7]).split(unknownarg)'
0055  <-------Source: line: 'dependencias = dameValor(aF[7]).split(unknownarg)'
0055 <--------Function: line: 'dependencias = dameValor(aF[7]).split(unknownarg)'
0055<---------Source: line: 'dependencias = dameValor(aF[7]).split(unknownarg)'
0056         InstructionUpdate: end-gen
0056        Source: end-gen
0056        If: end: 'block-if'
0056      <-Source: end: 'block-if'
0056     <--If: end: 'block-if'
0056    <---Source: end: 'block-if'
0056   <----If: end: 'block-if'
0056  <-----Source: end: 'block-if'
0056 <------Function: end: 'block-if'
0056<-------Source: end: 'block-if'
0056       If: end-gen
0056      Source: end-gen
0056      If: end: 'block-else'
0056    <-Source: end: 'block-else'
0056   <--If: end: 'block-else'
0056  <---Source: end: 'block-else'
0056 <----Function: end: 'block-else'
0056<-----Source: end: 'block-else'
0057     If: end-gen
0057     InstructionUpdate: begin-gen
0057      Identifier: begin-gen
0057       Identifier: expr: 'descripcion'
0057      Identifier: end-gen
0057      OpUpdate: begin-gen
0057       OpUpdate: expr: '='
0057      OpUpdate: end-gen
0057      Value: begin-gen
0057       FunctionCall: begin-gen
0057        Value: begin-gen
0057         Identifier: begin-gen
0057          Identifier: expr: 'descripcion'
0057        <-Value: expr: 'descripcion'
0057         Identifier: end-gen
0057        Value: end-gen
0057        Value: begin-gen
0057         Member: begin-gen
0057          Identifier: begin-gen
0057           Identifier: expr: 'fichero'
0057          Identifier: end-gen
0057          Identifier: begin-gen
0057           Identifier: expr: 'path'
0057          Identifier: end-gen
0057          Member: expr: 'fichero.path'
0057        <-Value: expr: 'fichero.path'
0057         Member: end-gen
0057        Value: end-gen
0057        Value: begin-gen
0057         Identifier: begin-gen
0057          Identifier: expr: 'modulo'
0057        <-Value: expr: 'modulo'
0057         Identifier: end-gen
0057        Value: end-gen
0057        FunctionCall: expr: 'traducirCadena(descripcion, fichero.path, modulo)'
0057      <-Value: expr: 'traducirCadena(descripcion, fichero.path, modulo)'
0057       FunctionCall: end-gen
0057      Value: end-gen
0057      InstructionUpdate: line: 'descripcion = traducirCadena(descripcion, fichero.path, modulo)'
0057    <-Source: line: 'descripcion = traducirCadena(descripcion, fichero.path, modulo)'
0057   <--If: line: 'descripcion = traducirCadena(descripcion, fichero.path, modulo)'
0057  <---Source: line: 'descripcion = traducirCadena(descripcion, fichero.path, modulo)'
0057 <----Function: line: 'descripcion = traducirCadena(descripcion, fichero.path, modulo)'
0057<-----Source: line: 'descripcion = traducirCadena(descripcion, fichero.path, modulo)'
0058     InstructionUpdate: end-gen
0058     InstructionUpdate: begin-gen
0058      Identifier: begin-gen
0058       Identifier: expr: 'desArea'
0058      Identifier: end-gen
0058      OpUpdate: begin-gen
0058       OpUpdate: expr: '='
0058      OpUpdate: end-gen
0058      Value: begin-gen
0058       FunctionCall: begin-gen
0058        Value: begin-gen
0058         Identifier: begin-gen
0058          Identifier: expr: 'desArea'
0058        <-Value: expr: 'desArea'
0058         Identifier: end-gen
0058        Value: end-gen
0058        Value: begin-gen
0058         Member: begin-gen
0058          Identifier: begin-gen
0058           Identifier: expr: 'fichero'
0058          Identifier: end-gen
0058          Identifier: begin-gen
0058           Identifier: expr: 'path'
0058          Identifier: end-gen
0058          Member: expr: 'fichero.path'
0058        <-Value: expr: 'fichero.path'
0058         Member: end-gen
0058        Value: end-gen
0058        Value: begin-gen
0058         Identifier: begin-gen
0058          Identifier: expr: 'modulo'
0058        <-Value: expr: 'modulo'
0058         Identifier: end-gen
0058        Value: end-gen
0058        FunctionCall: expr: 'traducirCadena(desArea, fichero.path, modulo)'
0058      <-Value: expr: 'traducirCadena(desArea, fichero.path, modulo)'
0058       FunctionCall: end-gen
0058      Value: end-gen
0058      InstructionUpdate: line: 'desArea = traducirCadena(desArea, fichero.path, modulo)'
0058    <-Source: line: 'desArea = traducirCadena(desArea, fichero.path, modulo)'
0058   <--If: line: 'desArea = traducirCadena(desArea, fichero.path, modulo)'
0058  <---Source: line: 'desArea = traducirCadena(desArea, fichero.path, modulo)'
0058 <----Function: line: 'desArea = traducirCadena(desArea, fichero.path, modulo)'
0058<-----Source: line: 'desArea = traducirCadena(desArea, fichero.path, modulo)'
0059     InstructionUpdate: end-gen
0059     DeclarationBlock: begin-gen
0059      Variable: begin-gen
0059       Variable: expr: 'fichIcono'
0059       Variable: expr: '='
0059       Value: begin-gen
0059        New: begin-gen
0059         FunctionCall: begin-gen
0059          Expression: begin-gen
0059           Expression: expr: 'ustr('
0059           Member: begin-gen
0059            Identifier: begin-gen
0059             Identifier: expr: 'fichero'
0059            Identifier: end-gen
0059            Identifier: begin-gen
0059             Identifier: expr: 'path'
0059            Identifier: end-gen
0059            Member: expr: 'fichero.path'
0059          <-Expression: expr: 'fichero.path'
0059           Member: end-gen
0059           Expression: expr: ','
0059           Constant: begin-gen
0059            Constant: ctype: 'String' -> '/'
0059            Constant: expr: 'u"/"'
0059          <-Expression: expr: 'u"/"'
0059           Constant: end-gen
0059           Expression: expr: ','
0059           Identifier: begin-gen
0059            Identifier: expr: 'nombreIcono'
0059          <-Expression: expr: 'nombreIcono'
0059           Identifier: end-gen
0059           Expression: expr: ')'
0059          Expression: end-gen
0059          FunctionCall: expr: 'File(ustr( fichero.path , u"/" , nombreIcono ))'
0059        <-New: expr: 'qsatype.File(ustr( fichero.path , u"/" , nombreIcono ))'
0059       <--Value: expr: 'qsatype.File(ustr( fichero.path , u"/" , nombreIcono ))'
0059      <---Variable: expr: 'qsatype.File(ustr( fichero.path , u"/" , nombreIcono ))'
0059         FunctionCall: end-gen
0059        New: end-gen
0059       Value: end-gen
0059      Variable: end-gen
0059      DeclarationBlock: line: 'fichIcono = qsatype.File(ustr( fichero.path , u"/" , nombreIcono ))'
0059    <-Source: line: 'fichIcono = qsatype.File(ustr( fichero.path , u"/" , nombreIcono ))'
0059   <--If: line: 'fichIcono = qsatype.File(ustr( fichero.path , u"/" , nombreIcono ))'
0059  <---Source: line: 'fichIcono = qsatype.File(ustr( fichero.path , u"/" , nombreIcono ))'
0059 <----Function: line: 'fichIcono = qsatype.File(ustr( fichero.path , u"/" , nombreIcono ))'
0059<-----Source: line: 'fichIcono = qsatype.File(ustr( fichero.path , u"/" , nombreIcono ))'
0060     DeclarationBlock: end-gen
0060     InstructionCall: begin-gen
0060      Member: begin-gen
0060       Identifier: begin-gen
0060        Identifier: expr: 'fichIcono'
0060       Identifier: end-gen
0060       FunctionCall: begin-gen
0060        Value: begin-gen
0060         Member: begin-gen
0060          Identifier: begin-gen
0060           Identifier: expr: 'File'
0060          Identifier: end-gen
0060          Identifier: begin-gen
0060           Identifier: expr: 'ReadOnly'
0060          Identifier: end-gen
0060          Member: expr: 'File.ReadOnly'
0060        <-Value: expr: 'File.ReadOnly'
0060         Member: end-gen
0060        Value: end-gen
0060        FunctionCall: expr: 'open(File.ReadOnly)'
0060       FunctionCall: end-gen
0060       Member: expr: 'fichIcono.open(File.ReadOnly)'
0060      Member: end-gen
0060      InstructionCall: line: 'fichIcono.open(File.ReadOnly)'
0060    <-Source: line: 'fichIcono.open(File.ReadOnly)'
0060   <--If: line: 'fichIcono.open(File.ReadOnly)'
0060  <---Source: line: 'fichIcono.open(File.ReadOnly)'
0060 <----Function: line: 'fichIcono.open(File.ReadOnly)'
0060<-----Source: line: 'fichIcono.open(File.ReadOnly)'
0061     InstructionCall: end-gen
0061     DeclarationBlock: begin-gen
0061      Variable: begin-gen
0061       Variable: expr: 'icono'
0061       Variable: expr: '='
0061       Value: begin-gen
0061        Member: begin-gen
0061         Identifier: begin-gen
0061          Identifier: expr: 'fichIcono'
0061         Identifier: end-gen
0061         FunctionCall: begin-gen
0061          FunctionCall: expr: 'read()'
0061         FunctionCall: end-gen
0061         Member: expr: 'fichIcono.read()'
0061       <-Value: expr: 'fichIcono.read()'
0061      <--Variable: expr: 'fichIcono.read()'
0061        Member: end-gen
0061       Value: end-gen
0061      Variable: end-gen
0061      DeclarationBlock: line: 'icono = fichIcono.read()'
0061    <-Source: line: 'icono = fichIcono.read()'
0061   <--If: line: 'icono = fichIcono.read()'
0061  <---Source: line: 'icono = fichIcono.read()'
0061 <----Function: line: 'icono = fichIcono.read()'
0061<-----Source: line: 'icono = fichIcono.read()'
0062     DeclarationBlock: end-gen
0062     DeclarationBlock: begin-gen
0062      Variable: begin-gen
0062       Variable: expr: 'versionSys'
0062       Variable: expr: '='
0062       Value: begin-gen
0062        Member: begin-gen
0062         Identifier: begin-gen
0062          Identifier: expr: 'sys'
0062         Identifier: end-gen
0062         FunctionCall: begin-gen
0062          FunctionCall: expr: 'version()'
0062         FunctionCall: end-gen
0062         FunctionCall: begin-gen
0062          Value: begin-gen
0062           Constant: begin-gen
0062            Constant: ctype: None -> None
0062           Constant: end-gen
0062          Value: end-gen
0062          FunctionCall: debug: 'Argument 0 not understood'
0062        <-Member: debug: 'Argument 0 not understood'
0062       <--Value: debug: 'Argument 0 not understood'
0062      <---Variable: debug: 'Argument 0 not understood'
0062     <----DeclarationBlock: debug: 'Argument 0 not understood'
0062    <-----Source: debug: 'Argument 0 not understood'
0062   <------If: debug: 'Argument 0 not understood'
0062  <-------Source: debug: 'Argument 0 not understood'
0062 <--------Function: debug: 'Argument 0 not understood'
0062<---------Source: debug: 'Argument 0 not understood'
0063          FunctionCall: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/><regexchar arg00="PERIOD"/><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/></regexbody></Constant></Value>'
0063        <-Member: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/><regexchar arg00="PERIOD"/><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/></regexbody></Constant></Value>'
0063       <--Value: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/><regexchar arg00="PERIOD"/><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/></regexbody></Constant></Value>'
0063      <---Variable: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/><regexchar arg00="PERIOD"/><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/></regexbody></Constant></Value>'
0063     <----DeclarationBlock: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/><regexchar arg00="PERIOD"/><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/></regexbody></Constant></Value>'
0063    <-----Source: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/><regexchar arg00="PERIOD"/><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/></regexbody></Constant></Value>'
0063   <------If: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/><regexchar arg00="PERIOD"/><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/></regexbody></Constant></Value>'
0063  <-------Source: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/><regexchar arg00="PERIOD"/><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/></regexbody></Constant></Value>'
0063 <--------Function: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/><regexchar arg00="PERIOD"/><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/></regexbody></Constant></Value>'
0063<---------Source: debug: b'<Value><Constant><regexbody><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/><regexchar arg00="PERIOD"/><regexchar arg00="LBRACKET"/><regexchar arg00="ICONST:\'0\'"/><regexchar arg00="MINUS"/><regexchar arg00="ICONST:\'9\'"/><regexchar arg00="RBRACKET"/><regexchar arg00="PLUS"/></regexbody></Constant></Value>'
0064          FunctionCall: expr: 'match(unknownarg)'
0064         FunctionCall: end-gen
0064         Member: expr: 'sys.version().match(unknownarg)'
0064       <-Value: expr: 'sys.version().match(unknownarg)'
0064      <--Variable: expr: 'sys.version().match(unknownarg)'
0064        Member: end-gen
0064       Value: end-gen
0064      Variable: end-gen
0064      DeclarationBlock: line: 'versionSys = sys.version().match(unknownarg)'
0064    <-Source: line: 'versionSys = sys.version().match(unknownarg)'
0064   <--If: line: 'versionSys = sys.version().match(unknownarg)'
0064  <---Source: line: 'versionSys = sys.version().match(unknownarg)'
0064 <----Function: line: 'versionSys = sys.version().match(unknownarg)'
0064<-----Source: line: 'versionSys = sys.version().match(unknownarg)'
0065     DeclarationBlock: end-gen
0065     If: begin-gen
0065      Expression: begin-gen
0065       FunctionCall: begin-gen
0065        Value: begin-gen
0065         Identifier: begin-gen
0065          Identifier: expr: 'versionSys'
0065        <-Value: expr: 'versionSys'
0065         Identifier: end-gen
0065        Value: end-gen
0065        Value: begin-gen
0065         Identifier: begin-gen
0065          Identifier: expr: 'versionMinimaFL'
0065        <-Value: expr: 'versionMinimaFL'
0065         Identifier: end-gen
0065        Value: end-gen
0065        FunctionCall: expr: 'compararVersiones(versionSys, versionMinimaFL)'
0065      <-Expression: expr: 'compararVersiones(versionSys, versionMinimaFL)'
0065       FunctionCall: end-gen
0065       Compare: begin-gen
0065        Compare: expr: '=='
0065      <-Expression: expr: '=='
0065       Compare: end-gen
0065       Constant: begin-gen
0065        Constant: ctype: 'Number' -> '2'
0065        Constant: expr: '2'
0065      <-Expression: expr: '2'
0065       Constant: end-gen
0065      Expression: end-gen
0065      If: line: 'if compararVersiones(versionSys, versionMinimaFL) == 2:'
0065    <-Source: line: 'if compararVersiones(versionSys, versionMinimaFL) == 2:'
0065   <--If: line: 'if compararVersiones(versionSys, versionMinimaFL) == 2:'
0065  <---Source: line: 'if compararVersiones(versionSys, versionMinimaFL) == 2:'
0065 <----Function: line: 'if compararVersiones(versionSys, versionMinimaFL) == 2:'
0065<-----Source: line: 'if compararVersiones(versionSys, versionMinimaFL) == 2:'
0066      If: begin: 'block-if'
0066    <-Source: begin: 'block-if'
0066   <--If: begin: 'block-if'
0066  <---Source: begin: 'block-if'
0066 <----Function: begin: 'block-if'
0066<-----Source: begin: 'block-if'
0066      Source: begin-gen
0066       DeclarationBlock: begin-gen
0066        Variable: begin-gen
0066         Variable: expr: 'contVersion'
0066         Variable: expr: '='
0066         Value: begin-gen
0066          Member: begin-gen
0066           Identifier: begin-gen
0066            Identifier: expr: 'MessageBox'
0066           Identifier: end-gen
0066           FunctionCall: begin-gen
0066            Expression: begin-gen
0066             Member: begin-gen
0066              Identifier: begin-gen
0066               Identifier: expr: 'util'
0066              Identifier: end-gen
0066              FunctionCall: begin-gen
0066               Value: begin-gen
0066                Constant: begin-gen
0066                 Constant: ctype: 'String' -> 'scripts'
0066                 Constant: expr: 'u"scripts"'
0066               <-Value: expr: 'u"scripts"'
0066                Constant: end-gen
0066               Value: end-gen
0066               Value: begin-gen
0066                Constant: begin-gen
0066                 Constant: ctype: 'String' -> 'Este módulo necesita la versión '
0066                 Constant: expr: 'u"Este módulo necesita la versión "'
0066               <-Value: expr: 'u"Este módulo necesita la versión "'
0066                Constant: end-gen
0066               Value: end-gen
0066               FunctionCall: expr: 'translate(u"scripts", u"Este módulo necesita la versión ")'
0066              FunctionCall: end-gen
0066              Member: expr: 'util.translate(u"scripts", u"Este módulo necesita la versión ")'
0066            <-Expression: expr: 'util.translate(u"scripts", u"Este módulo necesita la versión ")'
0066             Member: end-gen
0066             OpMath: begin-gen
0066              OpMath: expr: '+'
0066            <-Expression: expr: '+'
0066             OpMath: end-gen
0066             Identifier: begin-gen
0066              Identifier: expr: 'versionMinimaFL'
0066            <-Expression: expr: 'versionMinimaFL'
0066             Identifier: end-gen
0066             OpMath: begin-gen
0066              OpMath: expr: '+'
0066            <-Expression: expr: '+'
0066             OpMath: end-gen
0066             Member: begin-gen
0066              Identifier: begin-gen
0066               Identifier: expr: 'util'
0066              Identifier: end-gen
0066              FunctionCall: begin-gen
0066               Value: begin-gen
0066                Constant: begin-gen
0066                 Constant: ctype: 'String' -> 'scripts'
0066                 Constant: expr: 'u"scripts"'
0066               <-Value: expr: 'u"scripts"'
0066                Constant: end-gen
0066               Value: end-gen
0066               Value: begin-gen
0066                Constant: begin-gen
0066                 Constant: ctype: 'String' -> ' o superior de la aplicación base,\\nactualmente la versión instalada es la '
0066                 Constant: expr: 'u" o superior de la aplicación base,\\nactualmente la versión instalada es la "'
0066               <-Value: expr: 'u" o superior de la aplicación base,\\nactualmente la versión instalada es la "'
0066                Constant: end-gen
0066               Value: end-gen
0066               FunctionCall: expr: 'translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ")'
0066              FunctionCall: end-gen
0066              Member: expr: 'util.translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ")'
0066            <-Expression: expr: 'util.translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ")'
0066             Member: end-gen
0066             OpMath: begin-gen
0066              OpMath: expr: '+'
0066            <-Expression: expr: '+'
0066             OpMath: end-gen
0066             Member: begin-gen
0066              Identifier: begin-gen
0066               Identifier: expr: 'sys'
0066              Identifier: end-gen
0066              FunctionCall: begin-gen
0066               FunctionCall: expr: 'version()'
0066              FunctionCall: end-gen
0066              Member: expr: 'sys.version()'
0066            <-Expression: expr: 'sys.version()'
0066             Member: end-gen
0066             OpMath: begin-gen
0066              OpMath: expr: '+'
0066            <-Expression: expr: '+'
0066             OpMath: end-gen
0066             Member: begin-gen
0066              Identifier: begin-gen
0066               Identifier: expr: 'util'
0066              Identifier: end-gen
0066              FunctionCall: begin-gen
0066               Value: begin-gen
0066                Constant: begin-gen
0066                 Constant: ctype: 'String' -> 'scripts'
0066                 Constant: expr: 'u"scripts"'
0066               <-Value: expr: 'u"scripts"'
0066                Constant: end-gen
0066               Value: end-gen
0066               Value: begin-gen
0066                Constant: begin-gen
0066                 Constant: ctype: 'String' -> '.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?'
0066                 Constant: expr: 'u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"'
0066               <-Value: expr: 'u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"'
0066                Constant: end-gen
0066               Value: end-gen
0066               FunctionCall: expr: 'translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?")'
0066              FunctionCall: end-gen
0066              Member: expr: 'util.translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?")'
0066            <-Expression: expr: 'util.translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?")'
0066             Member: end-gen
0066            Expression: end-gen
0066            Value: begin-gen
0066             Member: begin-gen
0066              Identifier: begin-gen
0066               Identifier: expr: 'MessageBox'
0066              Identifier: end-gen
0066              Identifier: begin-gen
0066               Identifier: expr: 'Yes'
0066              Identifier: end-gen
0066              Member: expr: 'MessageBox.Yes'
0066            <-Value: expr: 'MessageBox.Yes'
0066             Member: end-gen
0066            Value: end-gen
0066            Value: begin-gen
0066             Member: begin-gen
0066              Identifier: begin-gen
0066               Identifier: expr: 'MessageBox'
0066              Identifier: end-gen
0066              Identifier: begin-gen
0066               Identifier: expr: 'No'
0066              Identifier: end-gen
0066              Member: expr: 'MessageBox.No'
0066            <-Value: expr: 'MessageBox.No'
0066             Member: end-gen
0066            Value: end-gen
0066            FunctionCall: expr: 'warning(util.translate(u"scripts", u"Este módulo necesita la versión ") + versionMinimaFL + util.translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ") + sys.version() + util.translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0066           FunctionCall: end-gen
0066           Member: expr: 'MessageBox.warning(util.translate(u"scripts", u"Este módulo necesita la versión ") + versionMinimaFL + util.translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ") + sys.version() + util.translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0066         <-Value: expr: 'MessageBox.warning(util.translate(u"scripts", u"Este módulo necesita la versión ") + versionMinimaFL + util.translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ") + sys.version() + util.translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0066        <--Variable: expr: 'MessageBox.warning(util.translate(u"scripts", u"Este módulo necesita la versión ") + versionMinimaFL + util.translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ") + sys.version() + util.translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0066          Member: end-gen
0066         Value: end-gen
0066        Variable: end-gen
0066        DeclarationBlock: line: 'contVersion = MessageBox.warning(util.translate(u"scripts", u"Este módulo necesita la versión ") + versionMinimaFL + util.translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ") + sys.version() + util.translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0066      <-Source: line: 'contVersion = MessageBox.warning(util.translate(u"scripts", u"Este módulo necesita la versión ") + versionMinimaFL + util.translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ") + sys.version() + util.translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0066     <--If: line: 'contVersion = MessageBox.warning(util.translate(u"scripts", u"Este módulo necesita la versión ") + versionMinimaFL + util.translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ") + sys.version() + util.translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0066    <---Source: line: 'contVersion = MessageBox.warning(util.translate(u"scripts", u"Este módulo necesita la versión ") + versionMinimaFL + util.translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ") + sys.version() + util.translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0066   <----If: line: 'contVersion = MessageBox.warning(util.translate(u"scripts", u"Este módulo necesita la versión ") + versionMinimaFL + util.translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ") + sys.version() + util.translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0066  <-----Source: line: 'contVersion = MessageBox.warning(util.translate(u"scripts", u"Este módulo necesita la versión ") + versionMinimaFL + util.translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ") + sys.version() + util.translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0066 <------Function: line: 'contVersion = MessageBox.warning(util.translate(u"scripts", u"Este módulo necesita la versión ") + versionMinimaFL + util.translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ") + sys.version() + util.translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0066<-------Source: line: 'contVersion = MessageBox.warning(util.translate(u"scripts", u"Este módulo necesita la versión ") + versionMinimaFL + util.translate(u"scripts", u" o superior de la aplicación base,\\nactualmente la versión instalada es la ") + sys.version() + util.translate(u"scripts", u".\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0067       DeclarationBlock: end-gen
0067       If: begin-gen
0067        Expression: begin-gen
0067         Identifier: begin-gen
0067          Identifier: expr: 'contVersion'
0067        <-Expression: expr: 'contVersion'
0067         Identifier: end-gen
0067         Compare: begin-gen
0067          Compare: expr: '=='
0067        <-Expression: expr: '=='
0067         Compare: end-gen
0067         Member: begin-gen
0067          Identifier: begin-gen
0067           Identifier: expr: 'MessageBox'
0067          Identifier: end-gen
0067          Identifier: begin-gen
0067           Identifier: expr: 'No'
0067          Identifier: end-gen
0067          Member: expr: 'MessageBox.No'
0067        <-Expression: expr: 'MessageBox.No'
0067         Member: end-gen
0067        Expression: end-gen
0067        If: line: 'if contVersion == MessageBox.No:'
0067      <-Source: line: 'if contVersion == MessageBox.No:'
0067     <--If: line: 'if contVersion == MessageBox.No:'
0067    <---Source: line: 'if contVersion == MessageBox.No:'
0067   <----If: line: 'if contVersion == MessageBox.No:'
0067  <-----Source: line: 'if contVersion == MessageBox.No:'
0067 <------Function: line: 'if contVersion == MessageBox.No:'
0067<-------Source: line: 'if contVersion == MessageBox.No:'
0068        If: begin: 'block-if'
0068      <-Source: begin: 'block-if'
0068     <--If: begin: 'block-if'
0068    <---Source: begin: 'block-if'
0068   <----If: begin: 'block-if'
0068  <-----Source: begin: 'block-if'
0068 <------Function: begin: 'block-if'
0068<-------Source: begin: 'block-if'
0068        Source: begin-gen
0068         InstructionFlow: begin-gen
0068          InstructionFlow: line: 'return '
0068        <-Source: line: 'return '
0068       <--If: line: 'return '
0068      <---Source: line: 'return '
0068     <----If: line: 'return '
0068    <-----Source: line: 'return '
0068   <------If: line: 'return '
0068  <-------Source: line: 'return '
0068 <--------Function: line: 'return '
0068<---------Source: line: 'return '
0069         InstructionFlow: end-gen
0069        Source: end-gen
0069        If: end: 'block-if'
0069      <-Source: end: 'block-if'
0069     <--If: end: 'block-if'
0069    <---Source: end: 'block-if'
0069   <----If: end: 'block-if'
0069  <-----Source: end: 'block-if'
0069 <------Function: end: 'block-if'
0069<-------Source: end: 'block-if'
0069       If: end-gen
0069      Source: end-gen
0069      If: end: 'block-if'
0069    <-Source: end: 'block-if'
0069   <--If: end: 'block-if'
0069  <---Source: end: 'block-if'
0069 <----Function: end: 'block-if'
0069<-----Source: end: 'block-if'
0069     If: end-gen
0069     If: begin-gen
0069      Expression: begin-gen
0069       FunctionCall: begin-gen
0069        Value: begin-gen
0069         Identifier: begin-gen
0069          Identifier: expr: 'dependencias'
0069        <-Value: expr: 'dependencias'
0069         Identifier: end-gen
0069        Value: end-gen
0069        FunctionCall: expr: 'evaluarDependencias(dependencias)'
0069      <-Expression: expr: 'evaluarDependencias(dependencias)'
0069       FunctionCall: end-gen
0069       Compare: begin-gen
0069        Compare: expr: '=='
0069      <-Expression: expr: '=='
0069       Compare: end-gen
0069       Identifier: begin-gen
0069        Identifier: expr: 'False'
0069      <-Expression: expr: 'False'
0069       Identifier: end-gen
0069      Expression: end-gen
0069      If: line: 'if evaluarDependencias(dependencias) == False:'
0069    <-Source: line: 'if evaluarDependencias(dependencias) == False:'
0069   <--If: line: 'if evaluarDependencias(dependencias) == False:'
0069  <---Source: line: 'if evaluarDependencias(dependencias) == False:'
0069 <----Function: line: 'if evaluarDependencias(dependencias) == False:'
0069<-----Source: line: 'if evaluarDependencias(dependencias) == False:'
0070      If: begin: 'block-if'
0070    <-Source: begin: 'block-if'
0070   <--If: begin: 'block-if'
0070  <---Source: begin: 'block-if'
0070 <----Function: begin: 'block-if'
0070<-----Source: begin: 'block-if'
0070      Source: begin-gen
0070       InstructionFlow: begin-gen
0070        InstructionFlow: line: 'return '
0070      <-Source: line: 'return '
0070     <--If: line: 'return '
0070    <---Source: line: 'return '
0070   <----If: line: 'return '
0070  <-----Source: line: 'return '
0070 <------Function: line: 'return '
0070<-------Source: line: 'return '
0071       InstructionFlow: end-gen
0071      Source: end-gen
0071      If: end: 'block-if'
0071    <-Source: end: 'block-if'
0071   <--If: end: 'block-if'
0071  <---Source: end: 'block-if'
0071 <----Function: end: 'block-if'
0071<-----Source: end: 'block-if'
0071     If: end-gen
0071     If: begin-gen
0071      Value: begin-gen
0071       OpUnary: begin-gen
0071        OpUnary: expr: 'not'
0071      <-Value: expr: 'not'
0071        FunctionCall: begin-gen
0071         Value: begin-gen
0071          Constant: begin-gen
0071           Constant: ctype: 'String' -> 'flareas'
0071           Constant: expr: 'u"flareas"'
0071         <-Value: expr: 'u"flareas"'
0071          Constant: end-gen
0071         Value: end-gen
0071         Value: begin-gen
0071          Constant: begin-gen
0071           Constant: ctype: 'String' -> 'idarea'
0071           Constant: expr: 'u"idarea"'
0071         <-Value: expr: 'u"idarea"'
0071          Constant: end-gen
0071         Value: end-gen
0071         Expression: begin-gen
0071          Expression: expr: 'ustr('
0071          Constant: begin-gen
0071           Constant: ctype: 'String' -> "idarea = '"
0071           Constant: expr: 'u"idarea = \'"'
0071         <-Expression: expr: 'u"idarea = \'"'
0071          Constant: end-gen
0071          Expression: expr: ','
0071          Identifier: begin-gen
0071           Identifier: expr: 'area'
0071         <-Expression: expr: 'area'
0071          Identifier: end-gen
0071          Expression: expr: ','
0071          Constant: begin-gen
0071           Constant: ctype: 'String' -> "'"
0071           Constant: expr: 'u"\'"'
0071         <-Expression: expr: 'u"\'"'
0071          Constant: end-gen
0071          Expression: expr: ')'
0071         Expression: end-gen
0071         FunctionCall: expr: 'valorPorClave(u"flareas", u"idarea", ustr( u"idarea = \'" , area , u"\'" ))'
0071       <-OpUnary: expr: 'valorPorClave(u"flareas", u"idarea", ustr( u"idarea = \'" , area , u"\'" ))'
0071      <--Value: expr: 'valorPorClave(u"flareas", u"idarea", ustr( u"idarea = \'" , area , u"\'" ))'
0071        FunctionCall: end-gen
0071       OpUnary: end-gen
0071      Value: end-gen
0071      If: line: 'if not valorPorClave(u"flareas", u"idarea", ustr( u"idarea = \'" , area , u"\'" )):'
0071    <-Source: line: 'if not valorPorClave(u"flareas", u"idarea", ustr( u"idarea = \'" , area , u"\'" )):'
0071   <--If: line: 'if not valorPorClave(u"flareas", u"idarea", ustr( u"idarea = \'" , area , u"\'" )):'
0071  <---Source: line: 'if not valorPorClave(u"flareas", u"idarea", ustr( u"idarea = \'" , area , u"\'" )):'
0071 <----Function: line: 'if not valorPorClave(u"flareas", u"idarea", ustr( u"idarea = \'" , area , u"\'" )):'
0071<-----Source: line: 'if not valorPorClave(u"flareas", u"idarea", ustr( u"idarea = \'" , area , u"\'" )):'
0072      If: begin: 'block-if'
0072    <-Source: begin: 'block-if'
0072   <--If: begin: 'block-if'
0072  <---Source: begin: 'block-if'
0072 <----Function: begin: 'block-if'
0072<-----Source: begin: 'block-if'
0072      Source: begin-gen
0072       DeclarationBlock: begin-gen
0072        Variable: begin-gen
0072         Variable: expr: 'crearArea'
0072         Variable: expr: '='
0072         Value: begin-gen
0072          Member: begin-gen
0072           Identifier: begin-gen
0072            Identifier: expr: 'MessageBox'
0072           Identifier: end-gen
0072           FunctionCall: begin-gen
0072            Expression: begin-gen
0072             Member: begin-gen
0072              Identifier: begin-gen
0072               Identifier: expr: 'util'
0072              Identifier: end-gen
0072              FunctionCall: begin-gen
0072               Value: begin-gen
0072                Constant: begin-gen
0072                 Constant: ctype: 'String' -> 'scripts'
0072                 Constant: expr: 'u"scripts"'
0072               <-Value: expr: 'u"scripts"'
0072                Constant: end-gen
0072               Value: end-gen
0072               Value: begin-gen
0072                Constant: begin-gen
0072                 Constant: ctype: 'String' -> 'El área con el identificador '
0072                 Constant: expr: 'u"El área con el identificador "'
0072               <-Value: expr: 'u"El área con el identificador "'
0072                Constant: end-gen
0072               Value: end-gen
0072               FunctionCall: expr: 'translate(u"scripts", u"El área con el identificador ")'
0072              FunctionCall: end-gen
0072              Member: expr: 'util.translate(u"scripts", u"El área con el identificador ")'
0072            <-Expression: expr: 'util.translate(u"scripts", u"El área con el identificador ")'
0072             Member: end-gen
0072             OpMath: begin-gen
0072              OpMath: expr: '+'
0072            <-Expression: expr: '+'
0072             OpMath: end-gen
0072             Identifier: begin-gen
0072              Identifier: expr: 'area'
0072            <-Expression: expr: 'area'
0072             Identifier: end-gen
0072             OpMath: begin-gen
0072              OpMath: expr: '+'
0072            <-Expression: expr: '+'
0072             OpMath: end-gen
0072             Member: begin-gen
0072              Identifier: begin-gen
0072               Identifier: expr: 'util'
0072              Identifier: end-gen
0072              FunctionCall: begin-gen
0072               Value: begin-gen
0072                Constant: begin-gen
0072                 Constant: ctype: 'String' -> 'scripts'
0072                 Constant: expr: 'u"scripts"'
0072               <-Value: expr: 'u"scripts"'
0072                Constant: end-gen
0072               Value: end-gen
0072               Value: begin-gen
0072                Constant: begin-gen
0072                 Constant: ctype: 'String' -> ' no existe. ¿Desea crearla?'
0072                 Constant: expr: 'u" no existe. ¿Desea crearla?"'
0072               <-Value: expr: 'u" no existe. ¿Desea crearla?"'
0072                Constant: end-gen
0072               Value: end-gen
0072               FunctionCall: expr: 'translate(u"scripts", u" no existe. ¿Desea crearla?")'
0072              FunctionCall: end-gen
0072              Member: expr: 'util.translate(u"scripts", u" no existe. ¿Desea crearla?")'
0072            <-Expression: expr: 'util.translate(u"scripts", u" no existe. ¿Desea crearla?")'
0072             Member: end-gen
0072            Expression: end-gen
0072            Value: begin-gen
0072             Member: begin-gen
0072              Identifier: begin-gen
0072               Identifier: expr: 'MessageBox'
0072              Identifier: end-gen
0072              Identifier: begin-gen
0072               Identifier: expr: 'Yes'
0072              Identifier: end-gen
0072              Member: expr: 'MessageBox.Yes'
0072            <-Value: expr: 'MessageBox.Yes'
0072             Member: end-gen
0072            Value: end-gen
0072            Value: begin-gen
0072             Member: begin-gen
0072              Identifier: begin-gen
0072               Identifier: expr: 'MessageBox'
0072              Identifier: end-gen
0072              Identifier: begin-gen
0072               Identifier: expr: 'No'
0072              Identifier: end-gen
0072              Member: expr: 'MessageBox.No'
0072            <-Value: expr: 'MessageBox.No'
0072             Member: end-gen
0072            Value: end-gen
0072            FunctionCall: expr: 'warning(util.translate(u"scripts", u"El área con el identificador ") + area + util.translate(u"scripts", u" no existe. ¿Desea crearla?"), MessageBox.Yes, MessageBox.No)'
0072           FunctionCall: end-gen
0072           Member: expr: 'MessageBox.warning(util.translate(u"scripts", u"El área con el identificador ") + area + util.translate(u"scripts", u" no existe. ¿Desea crearla?"), MessageBox.Yes, MessageBox.No)'
0072         <-Value: expr: 'MessageBox.warning(util.translate(u"scripts", u"El área con el identificador ") + area + util.translate(u"scripts", u" no existe. ¿Desea crearla?"), MessageBox.Yes, MessageBox.No)'
0072        <--Variable: expr: 'MessageBox.warning(util.translate(u"scripts", u"El área con el identificador ") + area + util.translate(u"scripts", u" no existe. ¿Desea crearla?"), MessageBox.Yes, MessageBox.No)'
0072          Member: end-gen
0072         Value: end-gen
0072        Variable: end-gen
0072        DeclarationBlock: line: 'crearArea = MessageBox.warning(util.translate(u"scripts", u"El área con el identificador ") + area + util.translate(u"scripts", u" no existe. ¿Desea crearla?"), MessageBox.Yes, MessageBox.No)'
0072      <-Source: line: 'crearArea = MessageBox.warning(util.translate(u"scripts", u"El área con el identificador ") + area + util.translate(u"scripts", u" no existe. ¿Desea crearla?"), MessageBox.Yes, MessageBox.No)'
0072     <--If: line: 'crearArea = MessageBox.warning(util.translate(u"scripts", u"El área con el identificador ") + area + util.translate(u"scripts", u" no existe. ¿Desea crearla?"), MessageBox.Yes, MessageBox.No)'
0072    <---Source: line: 'crearArea = MessageBox.warning(util.translate(u"scripts", u"El área con el identificador ") + area + util.translate(u"scripts", u" no existe. ¿Desea crearla?"), MessageBox.Yes, MessageBox.No)'
0072   <----If: line: 'crearArea = MessageBox.warning(util.translate(u"scripts", u"El área con el identificador ") + area + util.translate(u"scripts", u" no existe. ¿Desea crearla?"), MessageBox.Yes, MessageBox.No)'
0072  <-----Source: line: 'crearArea = MessageBox.warning(util.translate(u"scripts", u"El área con el identificador ") + area + util.translate(u"scripts", u" no existe. ¿Desea crearla?"), MessageBox.Yes, MessageBox.No)'
0072 <------Function: line: 'crearArea = MessageBox.warning(util.translate(u"scripts", u"El área con el identificador ") + area + util.translate(u"scripts", u" no existe. ¿Desea crearla?"), MessageBox.Yes, MessageBox.No)'
0072<-------Source: line: 'crearArea = MessageBox.warning(util.translate(u"scripts", u"El área con el identificador ") + area + util.translate(u"scripts", u" no existe. ¿Desea crearla?"), MessageBox.Yes, MessageBox.No)'
0073       DeclarationBlock: end-gen
0073       If: begin-gen
0073        Expression: begin-gen
0073         Identifier: begin-gen
0073          Identifier: expr: 'crearArea'
0073        <-Expression: expr: 'crearArea'
0073         Identifier: end-gen
0073         Compare: begin-gen
0073          Compare: expr: '=='
0073        <-Expression: expr: '=='
0073         Compare: end-gen
0073         Member: begin-gen
0073          Identifier: begin-gen
0073           Identifier: expr: 'MessageBox'
0073          Identifier: end-gen
0073          Identifier: begin-gen
0073           Identifier: expr: 'No'
0073          Identifier: end-gen
0073          Member: expr: 'MessageBox.No'
0073        <-Expression: expr: 'MessageBox.No'
0073         Member: end-gen
0073        Expression: end-gen
0073        If: line: 'if crearArea == MessageBox.No:'
0073      <-Source: line: 'if crearArea == MessageBox.No:'
0073     <--If: line: 'if crearArea == MessageBox.No:'
0073    <---Source: line: 'if crearArea == MessageBox.No:'
0073   <----If: line: 'if crearArea == MessageBox.No:'
0073  <-----Source: line: 'if crearArea == MessageBox.No:'
0073 <------Function: line: 'if crearArea == MessageBox.No:'
0073<-------Source: line: 'if crearArea == MessageBox.No:'
0074        If: begin: 'block-if'
0074      <-Source: begin: 'block-if'
0074     <--If: begin: 'block-if'
0074    <---Source: begin: 'block-if'
0074   <----If: begin: 'block-if'
0074  <-----Source: begin: 'block-if'
0074 <------Function: begin: 'block-if'
0074<-------Source: begin: 'block-if'
0074        Source: begin-gen
0074         InstructionFlow: begin-gen
0074          InstructionFlow: line: 'return '
0074        <-Source: line: 'return '
0074       <--If: line: 'return '
0074      <---Source: line: 'return '
0074     <----If: line: 'return '
0074    <-----Source: line: 'return '
0074   <------If: line: 'return '
0074  <-------Source: line: 'return '
0074 <--------Function: line: 'return '
0074<---------Source: line: 'return '
0075         InstructionFlow: end-gen
0075        Source: end-gen
0075        If: end: 'block-if'
0075      <-Source: end: 'block-if'
0075     <--If: end: 'block-if'
0075    <---Source: end: 'block-if'
0075   <----If: end: 'block-if'
0075  <-----Source: end: 'block-if'
0075 <------Function: end: 'block-if'
0075<-------Source: end: 'block-if'
0075       If: end-gen
0075       DeclarationBlock: begin-gen
0075        Variable: begin-gen
0075         Variable: expr: 'dialogo'
0075         Variable: expr: '='
0075         Value: begin-gen
0075          New: begin-gen
0075           Identifier: begin-gen
0075            Identifier: expr: 'Dialog'
0075          <-New: expr: 'qsatype.Dialog()'
0075         <--Value: expr: 'qsatype.Dialog()'
0075        <---Variable: expr: 'qsatype.Dialog()'
0075           Identifier: end-gen
0075          New: end-gen
0075         Value: end-gen
0075        Variable: end-gen
0075        DeclarationBlock: line: 'dialogo = qsatype.Dialog()'
0075      <-Source: line: 'dialogo = qsatype.Dialog()'
0075     <--If: line: 'dialogo = qsatype.Dialog()'
0075    <---Source: line: 'dialogo = qsatype.Dialog()'
0075   <----If: line: 'dialogo = qsatype.Dialog()'
0075  <-----Source: line: 'dialogo = qsatype.Dialog()'
0075 <------Function: line: 'dialogo = qsatype.Dialog()'
0075<-------Source: line: 'dialogo = qsatype.Dialog()'
0076       DeclarationBlock: end-gen
0076       InstructionUpdate: begin-gen
0076        Member: begin-gen
0076         Identifier: begin-gen
0076          Identifier: expr: 'dialogo'
0076         Identifier: end-gen
0076         Identifier: begin-gen
0076          Identifier: expr: 'width'
0076         Identifier: end-gen
0076         Member: expr: 'dialogo.width'
0076        Member: end-gen
0076        OpUpdate: begin-gen
0076         OpUpdate: expr: '='
0076        OpUpdate: end-gen
0076        Value: begin-gen
0076         Constant: begin-gen
0076          Constant: ctype: 'Number' -> '400'
0076          Constant: expr: '400'
0076        <-Value: expr: '400'
0076         Constant: end-gen
0076        Value: end-gen
0076        InstructionUpdate: line: 'dialogo.width = 400'
0076      <-Source: line: 'dialogo.width = 400'
0076     <--If: line: 'dialogo.width = 400'
0076    <---Source: line: 'dialogo.width = 400'
0076   <----If: line: 'dialogo.width = 400'
0076  <-----Source: line: 'dialogo.width = 400'
0076 <------Function: line: 'dialogo.width = 400'
0076<-------Source: line: 'dialogo.width = 400'
0077       InstructionUpdate: end-gen
0077       InstructionUpdate: begin-gen
0077        Member: begin-gen
0077         Identifier: begin-gen
0077          Identifier: expr: 'dialogo'
0077         Identifier: end-gen
0077         Identifier: begin-gen
0077          Identifier: expr: 'caption'
0077         Identifier: end-gen
0077         Member: expr: 'dialogo.caption'
0077        Member: end-gen
0077        OpUpdate: begin-gen
0077         OpUpdate: expr: '='
0077        OpUpdate: end-gen
0077        Expression: begin-gen
0077         Expression: expr: 'ustr('
0077         Member: begin-gen
0077          Identifier: begin-gen
0077           Identifier: expr: 'util'
0077          Identifier: end-gen
0077          FunctionCall: begin-gen
0077           Value: begin-gen
0077            Constant: begin-gen
0077             Constant: ctype: 'String' -> 'scripts'
0077             Constant: expr: 'u"scripts"'
0077           <-Value: expr: 'u"scripts"'
0077            Constant: end-gen
0077           Value: end-gen
0077           Value: begin-gen
0077            Constant: begin-gen
0077             Constant: ctype: 'String' -> 'Crear área '
0077             Constant: expr: 'u"Crear área "'
0077           <-Value: expr: 'u"Crear área "'
0077            Constant: end-gen
0077           Value: end-gen
0077           FunctionCall: expr: 'translate(u"scripts", u"Crear área ")'
0077          FunctionCall: end-gen
0077          Member: expr: 'util.translate(u"scripts", u"Crear área ")'
0077        <-Expression: expr: 'util.translate(u"scripts", u"Crear área ")'
0077         Member: end-gen
0077         Expression: expr: ','
0077         Identifier: begin-gen
0077          Identifier: expr: 'area'
0077        <-Expression: expr: 'area'
0077         Identifier: end-gen
0077         Expression: expr: ','
0077         Constant: begin-gen
0077          Constant: ctype: 'String' -> ':'
0077          Constant: expr: 'u":"'
0077        <-Expression: expr: 'u":"'
0077         Constant: end-gen
0077         Expression: expr: ')'
0077        Expression: end-gen
0077        InstructionUpdate: line: 'dialogo.caption = ustr( util.translate(u"scripts", u"Crear área ") , area , u":" )'
0077      <-Source: line: 'dialogo.caption = ustr( util.translate(u"scripts", u"Crear área ") , area , u":" )'
0077     <--If: line: 'dialogo.caption = ustr( util.translate(u"scripts", u"Crear área ") , area , u":" )'
0077    <---Source: line: 'dialogo.caption = ustr( util.translate(u"scripts", u"Crear área ") , area , u":" )'
0077   <----If: line: 'dialogo.caption = ustr( util.translate(u"scripts", u"Crear área ") , area , u":" )'
0077  <-----Source: line: 'dialogo.caption = ustr( util.translate(u"scripts", u"Crear área ") , area , u":" )'
0077 <------Function: line: 'dialogo.caption = ustr( util.translate(u"scripts", u"Crear área ") , area , u":" )'
0077<-------Source: line: 'dialogo.caption = ustr( util.translate(u"scripts", u"Crear área ") , area , u":" )'
0078       InstructionUpdate: end-gen
0078       InstructionUpdate: begin-gen
0078        Member: begin-gen
0078         Identifier: begin-gen
0078          Identifier: expr: 'dialogo'
0078         Identifier: end-gen
0078         Identifier: begin-gen
0078          Identifier: expr: 'okButtonText'
0078         Identifier: end-gen
0078         Member: expr: 'dialogo.okButtonText'
0078        Member: end-gen
0078        OpUpdate: begin-gen
0078         OpUpdate: expr: '='
0078        OpUpdate: end-gen
0078        Value: begin-gen
0078         Member: begin-gen
0078          Identifier: begin-gen
0078           Identifier: expr: 'util'
0078          Identifier: end-gen
0078          FunctionCall: begin-gen
0078           Value: begin-gen
0078            Constant: begin-gen
0078             Constant: ctype: 'String' -> 'scripts'
0078             Constant: expr: 'u"scripts"'
0078           <-Value: expr: 'u"scripts"'
0078            Constant: end-gen
0078           Value: end-gen
0078           Value: begin-gen
0078            Constant: begin-gen
0078             Constant: ctype: 'String' -> 'Aceptar'
0078             Constant: expr: 'u"Aceptar"'
0078           <-Value: expr: 'u"Aceptar"'
0078            Constant: end-gen
0078           Value: end-gen
0078           FunctionCall: expr: 'translate(u"scripts", u"Aceptar")'
0078          FunctionCall: end-gen
0078          Member: expr: 'util.translate(u"scripts", u"Aceptar")'
0078        <-Value: expr: 'util.translate(u"scripts", u"Aceptar")'
0078         Member: end-gen
0078        Value: end-gen
0078        InstructionUpdate: line: 'dialogo.okButtonText = util.translate(u"scripts", u"Aceptar")'
0078      <-Source: line: 'dialogo.okButtonText = util.translate(u"scripts", u"Aceptar")'
0078     <--If: line: 'dialogo.okButtonText = util.translate(u"scripts", u"Aceptar")'
0078    <---Source: line: 'dialogo.okButtonText = util.translate(u"scripts", u"Aceptar")'
0078   <----If: line: 'dialogo.okButtonText = util.translate(u"scripts", u"Aceptar")'
0078  <-----Source: line: 'dialogo.okButtonText = util.translate(u"scripts", u"Aceptar")'
0078 <------Function: line: 'dialogo.okButtonText = util.translate(u"scripts", u"Aceptar")'
0078<-------Source: line: 'dialogo.okButtonText = util.translate(u"scripts", u"Aceptar")'
0079       InstructionUpdate: end-gen
0079       InstructionUpdate: begin-gen
0079        Member: begin-gen
0079         Identifier: begin-gen
0079          Identifier: expr: 'dialogo'
0079         Identifier: end-gen
0079         Identifier: begin-gen
0079          Identifier: expr: 'cancelButtonText'
0079         Identifier: end-gen
0079         Member: expr: 'dialogo.cancelButtonText'
0079        Member: end-gen
0079        OpUpdate: begin-gen
0079         OpUpdate: expr: '='
0079        OpUpdate: end-gen
0079        Value: begin-gen
0079         Member: begin-gen
0079          Identifier: begin-gen
0079           Identifier: expr: 'util'
0079          Identifier: end-gen
0079          FunctionCall: begin-gen
0079           Value: begin-gen
0079            Constant: begin-gen
0079             Constant: ctype: 'String' -> 'scripts'
0079             Constant: expr: 'u"scripts"'
0079           <-Value: expr: 'u"scripts"'
0079            Constant: end-gen
0079           Value: end-gen
0079           Value: begin-gen
0079            Constant: begin-gen
0079             Constant: ctype: 'String' -> 'Cancelar'
0079             Constant: expr: 'u"Cancelar"'
0079           <-Value: expr: 'u"Cancelar"'
0079            Constant: end-gen
0079           Value: end-gen
0079           FunctionCall: expr: 'translate(u"scripts", u"Cancelar")'
0079          FunctionCall: end-gen
0079          Member: expr: 'util.translate(u"scripts", u"Cancelar")'
0079        <-Value: expr: 'util.translate(u"scripts", u"Cancelar")'
0079         Member: end-gen
0079        Value: end-gen
0079        InstructionUpdate: line: 'dialogo.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
0079      <-Source: line: 'dialogo.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
0079     <--If: line: 'dialogo.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
0079    <---Source: line: 'dialogo.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
0079   <----If: line: 'dialogo.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
0079  <-----Source: line: 'dialogo.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
0079 <------Function: line: 'dialogo.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
0079<-------Source: line: 'dialogo.cancelButtonText = util.translate(u"scripts", u"Cancelar")'
0080       InstructionUpdate: end-gen
0080       DeclarationBlock: begin-gen
0080        Variable: begin-gen
0080         Variable: expr: 'leDesArea'
0080         Variable: expr: '='
0080         Value: begin-gen
0080          New: begin-gen
0080           Identifier: begin-gen
0080            Identifier: expr: 'LineEdit'
0080          <-New: expr: 'qsatype.LineEdit()'
0080         <--Value: expr: 'qsatype.LineEdit()'
0080        <---Variable: expr: 'qsatype.LineEdit()'
0080           Identifier: end-gen
0080          New: end-gen
0080         Value: end-gen
0080        Variable: end-gen
0080        DeclarationBlock: line: 'leDesArea = qsatype.LineEdit()'
0080      <-Source: line: 'leDesArea = qsatype.LineEdit()'
0080     <--If: line: 'leDesArea = qsatype.LineEdit()'
0080    <---Source: line: 'leDesArea = qsatype.LineEdit()'
0080   <----If: line: 'leDesArea = qsatype.LineEdit()'
0080  <-----Source: line: 'leDesArea = qsatype.LineEdit()'
0080 <------Function: line: 'leDesArea = qsatype.LineEdit()'
0080<-------Source: line: 'leDesArea = qsatype.LineEdit()'
0081       DeclarationBlock: end-gen
0081       InstructionUpdate: begin-gen
0081        Member: begin-gen
0081         Identifier: begin-gen
0081          Identifier: expr: 'leDesArea'
0081         Identifier: end-gen
0081         Identifier: begin-gen
0081          Identifier: expr: 'text'
0081         Identifier: end-gen
0081         Member: expr: 'qsa(leDesArea).text'
0081        Member: end-gen
0081        OpUpdate: begin-gen
0081         OpUpdate: expr: '='
0081        OpUpdate: end-gen
0081        Value: begin-gen
0081         Identifier: begin-gen
0081          Identifier: expr: 'desArea'
0081        <-Value: expr: 'desArea'
0081         Identifier: end-gen
0081        Value: end-gen
0081        InstructionUpdate: line: 'qsa(leDesArea).text = desArea'
0081      <-Source: line: 'qsa(leDesArea).text = desArea'
0081     <--If: line: 'qsa(leDesArea).text = desArea'
0081    <---Source: line: 'qsa(leDesArea).text = desArea'
0081   <----If: line: 'qsa(leDesArea).text = desArea'
0081  <-----Source: line: 'qsa(leDesArea).text = desArea'
0081 <------Function: line: 'qsa(leDesArea).text = desArea'
0081<-------Source: line: 'qsa(leDesArea).text = desArea'
0082       InstructionUpdate: end-gen
0082       InstructionUpdate: begin-gen
0082        Member: begin-gen
0082         Identifier: begin-gen
0082          Identifier: expr: 'leDesArea'
0082         Identifier: end-gen
0082         Identifier: begin-gen
0082          Identifier: expr: 'label'
0082         Identifier: end-gen
0082         Member: expr: 'leDesArea.label'
0082        Member: end-gen
0082        OpUpdate: begin-gen
0082         OpUpdate: expr: '='
0082        OpUpdate: end-gen
0082        Value: begin-gen
0082         Member: begin-gen
0082          Identifier: begin-gen
0082           Identifier: expr: 'util'
0082          Identifier: end-gen
0082          FunctionCall: begin-gen
0082           Value: begin-gen
0082            Constant: begin-gen
0082             Constant: ctype: 'String' -> 'scripts'
0082             Constant: expr: 'u"scripts"'
0082           <-Value: expr: 'u"scripts"'
0082            Constant: end-gen
0082           Value: end-gen
0082           Value: begin-gen
0082            Constant: begin-gen
0082             Constant: ctype: 'String' -> 'Descripción: '
0082             Constant: expr: 'u"Descripción: "'
0082           <-Value: expr: 'u"Descripción: "'
0082            Constant: end-gen
0082           Value: end-gen
0082           FunctionCall: expr: 'translate(u"scripts", u"Descripción: ")'
0082          FunctionCall: end-gen
0082          Member: expr: 'util.translate(u"scripts", u"Descripción: ")'
0082        <-Value: expr: 'util.translate(u"scripts", u"Descripción: ")'
0082         Member: end-gen
0082        Value: end-gen
0082        InstructionUpdate: line: 'leDesArea.label = util.translate(u"scripts", u"Descripción: ")'
0082      <-Source: line: 'leDesArea.label = util.translate(u"scripts", u"Descripción: ")'
0082     <--If: line: 'leDesArea.label = util.translate(u"scripts", u"Descripción: ")'
0082    <---Source: line: 'leDesArea.label = util.translate(u"scripts", u"Descripción: ")'
0082   <----If: line: 'leDesArea.label = util.translate(u"scripts", u"Descripción: ")'
0082  <-----Source: line: 'leDesArea.label = util.translate(u"scripts", u"Descripción: ")'
0082 <------Function: line: 'leDesArea.label = util.translate(u"scripts", u"Descripción: ")'
0082<-------Source: line: 'leDesArea.label = util.translate(u"scripts", u"Descripción: ")'
0083       InstructionUpdate: end-gen
0083       InstructionCall: begin-gen
0083        Member: begin-gen
0083         Identifier: begin-gen
0083          Identifier: expr: 'dialogo'
0083         Identifier: end-gen
0083         FunctionCall: begin-gen
0083          Value: begin-gen
0083           Identifier: begin-gen
0083            Identifier: expr: 'leDesArea'
0083          <-Value: expr: 'leDesArea'
0083           Identifier: end-gen
0083          Value: end-gen
0083          FunctionCall: expr: 'add(leDesArea)'
0083         FunctionCall: end-gen
0083         Member: expr: 'dialogo.add(leDesArea)'
0083        Member: end-gen
0083        InstructionCall: line: 'dialogo.add(leDesArea)'
0083      <-Source: line: 'dialogo.add(leDesArea)'
0083     <--If: line: 'dialogo.add(leDesArea)'
0083    <---Source: line: 'dialogo.add(leDesArea)'
0083   <----If: line: 'dialogo.add(leDesArea)'
0083  <-----Source: line: 'dialogo.add(leDesArea)'
0083 <------Function: line: 'dialogo.add(leDesArea)'
0083<-------Source: line: 'dialogo.add(leDesArea)'
0084       InstructionCall: end-gen
0084       If: begin-gen
0084        Value: begin-gen
0084         Member: begin-gen
0084          Identifier: begin-gen
0084           Identifier: expr: 'dialogo'
0084          Identifier: end-gen
0084          FunctionCall: begin-gen
0084           FunctionCall: expr: 'exec_()'
0084          FunctionCall: end-gen
0084          Member: expr: 'dialogo.exec_()'
0084        <-Value: expr: 'dialogo.exec_()'
0084         Member: end-gen
0084        Value: end-gen
0084        If: line: 'if dialogo.exec_():'
0084      <-Source: line: 'if dialogo.exec_():'
0084     <--If: line: 'if dialogo.exec_():'
0084    <---Source: line: 'if dialogo.exec_():'
0084   <----If: line: 'if dialogo.exec_():'
0084  <-----Source: line: 'if dialogo.exec_():'
0084 <------Function: line: 'if dialogo.exec_():'
0084<-------Source: line: 'if dialogo.exec_():'
0085        If: begin: 'block-if'
0085      <-Source: begin: 'block-if'
0085     <--If: begin: 'block-if'
0085    <---Source: begin: 'block-if'
0085   <----If: begin: 'block-if'
0085  <-----Source: begin: 'block-if'
0085 <------Function: begin: 'block-if'
0085<-------Source: begin: 'block-if'
0085        Source: begin-gen
0085         DeclarationBlock: begin-gen
0085          Variable: begin-gen
0085           Variable: expr: 'curArea'
0085           Variable: expr: '='
0085           Value: begin-gen
0085            New: begin-gen
0085             FunctionCall: begin-gen
0085              Value: begin-gen
0085               Constant: begin-gen
0085                Constant: ctype: 'String' -> 'flareas'
0085                Constant: expr: 'u"flareas"'
0085              <-Value: expr: 'u"flareas"'
0085               Constant: end-gen
0085              Value: end-gen
0085              FunctionCall: expr: 'FLSqlCursor(u"flareas")'
0085            <-New: expr: 'qsatype.FLSqlCursor(u"flareas")'
0085           <--Value: expr: 'qsatype.FLSqlCursor(u"flareas")'
0085          <---Variable: expr: 'qsatype.FLSqlCursor(u"flareas")'
0085             FunctionCall: end-gen
0085            New: end-gen
0085           Value: end-gen
0085          Variable: end-gen
0085          DeclarationBlock: line: 'curArea = qsatype.FLSqlCursor(u"flareas")'
0085        <-Source: line: 'curArea = qsatype.FLSqlCursor(u"flareas")'
0085       <--If: line: 'curArea = qsatype.FLSqlCursor(u"flareas")'
0085      <---Source: line: 'curArea = qsatype.FLSqlCursor(u"flareas")'
0085     <----If: line: 'curArea = qsatype.FLSqlCursor(u"flareas")'
0085    <-----Source: line: 'curArea = qsatype.FLSqlCursor(u"flareas")'
0085   <------If: line: 'curArea = qsatype.FLSqlCursor(u"flareas")'
0085  <-------Source: line: 'curArea = qsatype.FLSqlCursor(u"flareas")'
0085 <--------Function: line: 'curArea = qsatype.FLSqlCursor(u"flareas")'
0085<---------Source: line: 'curArea = qsatype.FLSqlCursor(u"flareas")'
0086         DeclarationBlock: end-gen
0086         InstructionCall: begin-gen
0086          Member: begin-gen
0086           Identifier: begin-gen
0086            Identifier: expr: 'curArea'
0086           Identifier: end-gen
0086           FunctionCall: begin-gen
0086            Value: begin-gen
0086             Member: begin-gen
0086              Identifier: begin-gen
0086               Identifier: expr: 'curArea'
0086              Identifier: end-gen
0086              Identifier: begin-gen
0086               Identifier: expr: 'Insert'
0086              Identifier: end-gen
0086              Member: expr: 'curArea.Insert'
0086            <-Value: expr: 'curArea.Insert'
0086             Member: end-gen
0086            Value: end-gen
0086            FunctionCall: expr: 'setModeAccess(curArea.Insert)'
0086           FunctionCall: end-gen
0086           Member: expr: 'curArea.setModeAccess(curArea.Insert)'
0086          Member: end-gen
0086          InstructionCall: line: 'curArea.setModeAccess(curArea.Insert)'
0086        <-Source: line: 'curArea.setModeAccess(curArea.Insert)'
0086       <--If: line: 'curArea.setModeAccess(curArea.Insert)'
0086      <---Source: line: 'curArea.setModeAccess(curArea.Insert)'
0086     <----If: line: 'curArea.setModeAccess(curArea.Insert)'
0086    <-----Source: line: 'curArea.setModeAccess(curArea.Insert)'
0086   <------If: line: 'curArea.setModeAccess(curArea.Insert)'
0086  <-------Source: line: 'curArea.setModeAccess(curArea.Insert)'
0086 <--------Function: line: 'curArea.setModeAccess(curArea.Insert)'
0086<---------Source: line: 'curArea.setModeAccess(curArea.Insert)'
0087         InstructionCall: end-gen
0087         InstructionCall: begin-gen
0087          Member: begin-gen
0087           Identifier: begin-gen
0087            Identifier: expr: 'curArea'
0087           Identifier: end-gen
0087           FunctionCall: begin-gen
0087            FunctionCall: expr: 'refreshBuffer()'
0087           FunctionCall: end-gen
0087           Member: expr: 'curArea.refreshBuffer()'
0087          Member: end-gen
0087          InstructionCall: line: 'curArea.refreshBuffer()'
0087        <-Source: line: 'curArea.refreshBuffer()'
0087       <--If: line: 'curArea.refreshBuffer()'
0087      <---Source: line: 'curArea.refreshBuffer()'
0087     <----If: line: 'curArea.refreshBuffer()'
0087    <-----Source: line: 'curArea.refreshBuffer()'
0087   <------If: line: 'curArea.refreshBuffer()'
0087  <-------Source: line: 'curArea.refreshBuffer()'
0087 <--------Function: line: 'curArea.refreshBuffer()'
0087<---------Source: line: 'curArea.refreshBuffer()'
0088         InstructionCall: end-gen
0088         InstructionCall: begin-gen
0088          Member: begin-gen
0088           Identifier: begin-gen
0088            Identifier: expr: 'curArea'
0088           Identifier: end-gen
0088           FunctionCall: begin-gen
0088            Value: begin-gen
0088             Constant: begin-gen
0088              Constant: ctype: 'String' -> 'idarea'
0088              Constant: expr: 'u"idarea"'
0088            <-Value: expr: 'u"idarea"'
0088             Constant: end-gen
0088            Value: end-gen
0088            Value: begin-gen
0088             Identifier: begin-gen
0088              Identifier: expr: 'area'
0088            <-Value: expr: 'area'
0088             Identifier: end-gen
0088            Value: end-gen
0088            FunctionCall: expr: 'setValueBuffer(u"idarea", area)'
0088           FunctionCall: end-gen
0088           Member: expr: 'curArea.setValueBuffer(u"idarea", area)'
0088          Member: end-gen
0088          InstructionCall: line: 'curArea.setValueBuffer(u"idarea", area)'
0088        <-Source: line: 'curArea.setValueBuffer(u"idarea", area)'
0088       <--If: line: 'curArea.setValueBuffer(u"idarea", area)'
0088      <---Source: line: 'curArea.setValueBuffer(u"idarea", area)'
0088     <----If: line: 'curArea.setValueBuffer(u"idarea", area)'
0088    <-----Source: line: 'curArea.setValueBuffer(u"idarea", area)'
0088   <------If: line: 'curArea.setValueBuffer(u"idarea", area)'
0088  <-------Source: line: 'curArea.setValueBuffer(u"idarea", area)'
0088 <--------Function: line: 'curArea.setValueBuffer(u"idarea", area)'
0088<---------Source: line: 'curArea.setValueBuffer(u"idarea", area)'
0089         InstructionCall: end-gen
0089         InstructionCall: begin-gen
0089          Member: begin-gen
0089           Identifier: begin-gen
0089            Identifier: expr: 'curArea'
0089           Identifier: end-gen
0089           FunctionCall: begin-gen
0089            Value: begin-gen
0089             Constant: begin-gen
0089              Constant: ctype: 'String' -> 'descripcion'
0089              Constant: expr: 'u"descripcion"'
0089            <-Value: expr: 'u"descripcion"'
0089             Constant: end-gen
0089            Value: end-gen
0089            Value: begin-gen
0089             Member: begin-gen
0089              Identifier: begin-gen
0089               Identifier: expr: 'leDesArea'
0089              Identifier: end-gen
0089              Identifier: begin-gen
0089               Identifier: expr: 'text'
0089              Identifier: end-gen
0089              Member: expr: 'qsa(leDesArea).text'
0089            <-Value: expr: 'qsa(leDesArea).text'
0089             Member: end-gen
0089            Value: end-gen
0089            FunctionCall: expr: 'setValueBuffer(u"descripcion", qsa(leDesArea).text)'
0089           FunctionCall: end-gen
0089           Member: expr: 'curArea.setValueBuffer(u"descripcion", qsa(leDesArea).text)'
0089          Member: end-gen
0089          InstructionCall: line: 'curArea.setValueBuffer(u"descripcion", qsa(leDesArea).text)'
0089        <-Source: line: 'curArea.setValueBuffer(u"descripcion", qsa(leDesArea).text)'
0089       <--If: line: 'curArea.setValueBuffer(u"descripcion", qsa(leDesArea).text)'
0089      <---Source: line: 'curArea.setValueBuffer(u"descripcion", qsa(leDesArea).text)'
0089     <----If: line: 'curArea.setValueBuffer(u"descripcion", qsa(leDesArea).text)'
0089    <-----Source: line: 'curArea.setValueBuffer(u"descripcion", qsa(leDesArea).text)'
0089   <------If: line: 'curArea.setValueBuffer(u"descripcion", qsa(leDesArea).text)'
0089  <-------Source: line: 'curArea.setValueBuffer(u"descripcion", qsa(leDesArea).text)'
0089 <--------Function: line: 'curArea.setValueBuffer(u"descripcion", qsa(leDesArea).text)'
0089<---------Source: line: 'curArea.setValueBuffer(u"descripcion", qsa(leDesArea).text)'
0090         InstructionCall: end-gen
0090         InstructionCall: begin-gen
0090          Member: begin-gen
0090           Identifier: begin-gen
0090            Identifier: expr: 'curArea'
0090           Identifier: end-gen
0090           FunctionCall: begin-gen
0090            FunctionCall: expr: 'commitBuffer()'
0090           FunctionCall: end-gen
0090           Member: expr: 'curArea.commitBuffer()'
0090          Member: end-gen
0090          InstructionCall: line: 'curArea.commitBuffer()'
0090        <-Source: line: 'curArea.commitBuffer()'
0090       <--If: line: 'curArea.commitBuffer()'
0090      <---Source: line: 'curArea.commitBuffer()'
0090     <----If: line: 'curArea.commitBuffer()'
0090    <-----Source: line: 'curArea.commitBuffer()'
0090   <------If: line: 'curArea.commitBuffer()'
0090  <-------Source: line: 'curArea.commitBuffer()'
0090 <--------Function: line: 'curArea.commitBuffer()'
0090<---------Source: line: 'curArea.commitBuffer()'
0091         InstructionCall: end-gen
0091        Source: end-gen
0091        If: end: 'block-if'
0091      <-Source: end: 'block-if'
0091     <--If: end: 'block-if'
0091    <---Source: end: 'block-if'
0091   <----If: end: 'block-if'
0091  <-----Source: end: 'block-if'
0091 <------Function: end: 'block-if'
0091<-------Source: end: 'block-if'
0091        If: line: 'else:'
0091      <-Source: line: 'else:'
0091     <--If: line: 'else:'
0091    <---Source: line: 'else:'
0091   <----If: line: 'else:'
0091  <-----Source: line: 'else:'
0091 <------Function: line: 'else:'
0091<-------Source: line: 'else:'
0093        If: begin: 'block-else'
0093      <-Source: begin: 'block-else'
0093     <--If: begin: 'block-else'
0093    <---Source: begin: 'block-else'
0093   <----If: begin: 'block-else'
0093  <-----Source: begin: 'block-else'
0093 <------Function: begin: 'block-else'
0093<-------Source: begin: 'block-else'
0093        Source: begin-gen
0093         InstructionFlow: begin-gen
0093          InstructionFlow: line: 'return '
0093        <-Source: line: 'return '
0093       <--If: line: 'return '
0093      <---Source: line: 'return '
0093     <----If: line: 'return '
0093    <-----Source: line: 'return '
0093   <------If: line: 'return '
0093  <-------Source: line: 'return '
0093 <--------Function: line: 'return '
0093<---------Source: line: 'return '
0094         InstructionFlow: end-gen
0094        Source: end-gen
0094        If: end: 'block-else'
0094      <-Source: end: 'block-else'
0094     <--If: end: 'block-else'
0094    <---Source: end: 'block-else'
0094   <----If: end: 'block-else'
0094  <-----Source: end: 'block-else'
0094 <------Function: end: 'block-else'
0094<-------Source: end: 'block-else'
0095       If: end-gen
0095      Source: end-gen
0095      If: end: 'block-if'
0095    <-Source: end: 'block-if'
0095   <--If: end: 'block-if'
0095  <---Source: end: 'block-if'
0095 <----Function: end: 'block-if'
0095<-----Source: end: 'block-if'
0095     If: end-gen
0095     DeclarationBlock: begin-gen
0095      Variable: begin-gen
0095       Variable: expr: 'recargar'
0095       Variable: expr: '='
0095       Variable: expr: 'None'
0095      Variable: end-gen
0095      DeclarationBlock: line: 'recargar = None'
0095    <-Source: line: 'recargar = None'
0095   <--If: line: 'recargar = None'
0095  <---Source: line: 'recargar = None'
0095 <----Function: line: 'recargar = None'
0095<-----Source: line: 'recargar = None'
0097     DeclarationBlock: end-gen
0097     If: begin-gen
0097      Value: begin-gen
0097       FunctionCall: begin-gen
0097        Value: begin-gen
0097         Constant: begin-gen
0097          Constant: ctype: 'String' -> 'flmodules'
0097          Constant: expr: 'u"flmodules"'
0097        <-Value: expr: 'u"flmodules"'
0097         Constant: end-gen
0097        Value: end-gen
0097        Value: begin-gen
0097         Constant: begin-gen
0097          Constant: ctype: 'String' -> 'idmodulo'
0097          Constant: expr: 'u"idmodulo"'
0097        <-Value: expr: 'u"idmodulo"'
0097         Constant: end-gen
0097        Value: end-gen
0097        Expression: begin-gen
0097         Expression: expr: 'ustr('
0097         Constant: begin-gen
0097          Constant: ctype: 'String' -> "idmodulo = '"
0097          Constant: expr: 'u"idmodulo = \'"'
0097        <-Expression: expr: 'u"idmodulo = \'"'
0097         Constant: end-gen
0097         Expression: expr: ','
0097         Identifier: begin-gen
0097          Identifier: expr: 'modulo'
0097        <-Expression: expr: 'modulo'
0097         Identifier: end-gen
0097         Expression: expr: ','
0097         Constant: begin-gen
0097          Constant: ctype: 'String' -> "'"
0097          Constant: expr: 'u"\'"'
0097        <-Expression: expr: 'u"\'"'
0097         Constant: end-gen
0097         Expression: expr: ')'
0097        Expression: end-gen
0097        FunctionCall: expr: 'valorPorClave(u"flmodules", u"idmodulo", ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0097      <-Value: expr: 'valorPorClave(u"flmodules", u"idmodulo", ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0097       FunctionCall: end-gen
0097      Value: end-gen
0097      If: line: 'if valorPorClave(u"flmodules", u"idmodulo", ustr( u"idmodulo = \'" , modulo , u"\'" )):'
0097    <-Source: line: 'if valorPorClave(u"flmodules", u"idmodulo", ustr( u"idmodulo = \'" , modulo , u"\'" )):'
0097   <--If: line: 'if valorPorClave(u"flmodules", u"idmodulo", ustr( u"idmodulo = \'" , modulo , u"\'" )):'
0097  <---Source: line: 'if valorPorClave(u"flmodules", u"idmodulo", ustr( u"idmodulo = \'" , modulo , u"\'" )):'
0097 <----Function: line: 'if valorPorClave(u"flmodules", u"idmodulo", ustr( u"idmodulo = \'" , modulo , u"\'" )):'
0097<-----Source: line: 'if valorPorClave(u"flmodules", u"idmodulo", ustr( u"idmodulo = \'" , modulo , u"\'" )):'
0098      If: begin: 'block-if'
0098    <-Source: begin: 'block-if'
0098   <--If: begin: 'block-if'
0098  <---Source: begin: 'block-if'
0098 <----Function: begin: 'block-if'
0098<-----Source: begin: 'block-if'
0098      Source: begin-gen
0098       InstructionUpdate: begin-gen
0098        Identifier: begin-gen
0098         Identifier: expr: 'recargar'
0098        Identifier: end-gen
0098        OpUpdate: begin-gen
0098         OpUpdate: expr: '='
0098        OpUpdate: end-gen
0098        Value: begin-gen
0098         Member: begin-gen
0098          Identifier: begin-gen
0098           Identifier: expr: 'MessageBox'
0098          Identifier: end-gen
0098          FunctionCall: begin-gen
0098           Expression: begin-gen
0098            Member: begin-gen
0098             Identifier: begin-gen
0098              Identifier: expr: 'util'
0098             Identifier: end-gen
0098             FunctionCall: begin-gen
0098              Value: begin-gen
0098               Constant: begin-gen
0098                Constant: ctype: 'String' -> 'scripts'
0098                Constant: expr: 'u"scripts"'
0098              <-Value: expr: 'u"scripts"'
0098               Constant: end-gen
0098              Value: end-gen
0098              Value: begin-gen
0098               Constant: begin-gen
0098                Constant: ctype: 'String' -> 'El módulo '
0098                Constant: expr: 'u"El módulo "'
0098              <-Value: expr: 'u"El módulo "'
0098               Constant: end-gen
0098              Value: end-gen
0098              FunctionCall: expr: 'translate(u"scripts", u"El módulo ")'
0098             FunctionCall: end-gen
0098             Member: expr: 'util.translate(u"scripts", u"El módulo ")'
0098           <-Expression: expr: 'util.translate(u"scripts", u"El módulo ")'
0098            Member: end-gen
0098            OpMath: begin-gen
0098             OpMath: expr: '+'
0098           <-Expression: expr: '+'
0098            OpMath: end-gen
0098            Identifier: begin-gen
0098             Identifier: expr: 'modulo'
0098           <-Expression: expr: 'modulo'
0098            Identifier: end-gen
0098            OpMath: begin-gen
0098             OpMath: expr: '+'
0098           <-Expression: expr: '+'
0098            OpMath: end-gen
0098            Member: begin-gen
0098             Identifier: begin-gen
0098              Identifier: expr: 'util'
0098             Identifier: end-gen
0098             FunctionCall: begin-gen
0098              Value: begin-gen
0098               Constant: begin-gen
0098                Constant: ctype: 'String' -> 'scripts'
0098                Constant: expr: 'u"scripts"'
0098              <-Value: expr: 'u"scripts"'
0098               Constant: end-gen
0098              Value: end-gen
0098              Value: begin-gen
0098               Constant: begin-gen
0098                Constant: ctype: 'String' -> ' ya existe. ¿Desea recargarlo?'
0098                Constant: expr: 'u" ya existe. ¿Desea recargarlo?"'
0098              <-Value: expr: 'u" ya existe. ¿Desea recargarlo?"'
0098               Constant: end-gen
0098              Value: end-gen
0098              FunctionCall: expr: 'translate(u"scripts", u" ya existe. ¿Desea recargarlo?")'
0098             FunctionCall: end-gen
0098             Member: expr: 'util.translate(u"scripts", u" ya existe. ¿Desea recargarlo?")'
0098           <-Expression: expr: 'util.translate(u"scripts", u" ya existe. ¿Desea recargarlo?")'
0098            Member: end-gen
0098           Expression: end-gen
0098           Value: begin-gen
0098            Member: begin-gen
0098             Identifier: begin-gen
0098              Identifier: expr: 'MessageBox'
0098             Identifier: end-gen
0098             Identifier: begin-gen
0098              Identifier: expr: 'Yes'
0098             Identifier: end-gen
0098             Member: expr: 'MessageBox.Yes'
0098           <-Value: expr: 'MessageBox.Yes'
0098            Member: end-gen
0098           Value: end-gen
0098           Value: begin-gen
0098            Member: begin-gen
0098             Identifier: begin-gen
0098              Identifier: expr: 'MessageBox'
0098             Identifier: end-gen
0098             Identifier: begin-gen
0098              Identifier: expr: 'No'
0098             Identifier: end-gen
0098             Member: expr: 'MessageBox.No'
0098           <-Value: expr: 'MessageBox.No'
0098            Member: end-gen
0098           Value: end-gen
0098           FunctionCall: expr: 'warning(util.translate(u"scripts", u"El módulo ") + modulo + util.translate(u"scripts", u" ya existe. ¿Desea recargarlo?"), MessageBox.Yes, MessageBox.No)'
0098          FunctionCall: end-gen
0098          Member: expr: 'MessageBox.warning(util.translate(u"scripts", u"El módulo ") + modulo + util.translate(u"scripts", u" ya existe. ¿Desea recargarlo?"), MessageBox.Yes, MessageBox.No)'
0098        <-Value: expr: 'MessageBox.warning(util.translate(u"scripts", u"El módulo ") + modulo + util.translate(u"scripts", u" ya existe. ¿Desea recargarlo?"), MessageBox.Yes, MessageBox.No)'
0098         Member: end-gen
0098        Value: end-gen
0098        InstructionUpdate: line: 'recargar = MessageBox.warning(util.translate(u"scripts", u"El módulo ") + modulo + util.translate(u"scripts", u" ya existe. ¿Desea recargarlo?"), MessageBox.Yes, MessageBox.No)'
0098      <-Source: line: 'recargar = MessageBox.warning(util.translate(u"scripts", u"El módulo ") + modulo + util.translate(u"scripts", u" ya existe. ¿Desea recargarlo?"), MessageBox.Yes, MessageBox.No)'
0098     <--If: line: 'recargar = MessageBox.warning(util.translate(u"scripts", u"El módulo ") + modulo + util.translate(u"scripts", u" ya existe. ¿Desea recargarlo?"), MessageBox.Yes, MessageBox.No)'
0098    <---Source: line: 'recargar = MessageBox.warning(util.translate(u"scripts", u"El módulo ") + modulo + util.translate(u"scripts", u" ya existe. ¿Desea recargarlo?"), MessageBox.Yes, MessageBox.No)'
0098   <----If: line: 'recargar = MessageBox.warning(util.translate(u"scripts", u"El módulo ") + modulo + util.translate(u"scripts", u" ya existe. ¿Desea recargarlo?"), MessageBox.Yes, MessageBox.No)'
0098  <-----Source: line: 'recargar = MessageBox.warning(util.translate(u"scripts", u"El módulo ") + modulo + util.translate(u"scripts", u" ya existe. ¿Desea recargarlo?"), MessageBox.Yes, MessageBox.No)'
0098 <------Function: line: 'recargar = MessageBox.warning(util.translate(u"scripts", u"El módulo ") + modulo + util.translate(u"scripts", u" ya existe. ¿Desea recargarlo?"), MessageBox.Yes, MessageBox.No)'
0098<-------Source: line: 'recargar = MessageBox.warning(util.translate(u"scripts", u"El módulo ") + modulo + util.translate(u"scripts", u" ya existe. ¿Desea recargarlo?"), MessageBox.Yes, MessageBox.No)'
0099       InstructionUpdate: end-gen
0099       If: begin-gen
0099        Expression: begin-gen
0099         Identifier: begin-gen
0099          Identifier: expr: 'recargar'
0099        <-Expression: expr: 'recargar'
0099         Identifier: end-gen
0099         Compare: begin-gen
0099          Compare: expr: '=='
0099        <-Expression: expr: '=='
0099         Compare: end-gen
0099         Member: begin-gen
0099          Identifier: begin-gen
0099           Identifier: expr: 'MessageBox'
0099          Identifier: end-gen
0099          Identifier: begin-gen
0099           Identifier: expr: 'No'
0099          Identifier: end-gen
0099          Member: expr: 'MessageBox.No'
0099        <-Expression: expr: 'MessageBox.No'
0099         Member: end-gen
0099        Expression: end-gen
0099        If: line: 'if recargar == MessageBox.No:'
0099      <-Source: line: 'if recargar == MessageBox.No:'
0099     <--If: line: 'if recargar == MessageBox.No:'
0099    <---Source: line: 'if recargar == MessageBox.No:'
0099   <----If: line: 'if recargar == MessageBox.No:'
0099  <-----Source: line: 'if recargar == MessageBox.No:'
0099 <------Function: line: 'if recargar == MessageBox.No:'
0099<-------Source: line: 'if recargar == MessageBox.No:'
0100        If: begin: 'block-if'
0100      <-Source: begin: 'block-if'
0100     <--If: begin: 'block-if'
0100    <---Source: begin: 'block-if'
0100   <----If: begin: 'block-if'
0100  <-----Source: begin: 'block-if'
0100 <------Function: begin: 'block-if'
0100<-------Source: begin: 'block-if'
0100        Source: begin-gen
0100         InstructionFlow: begin-gen
0100          InstructionFlow: line: 'return '
0100        <-Source: line: 'return '
0100       <--If: line: 'return '
0100      <---Source: line: 'return '
0100     <----If: line: 'return '
0100    <-----Source: line: 'return '
0100   <------If: line: 'return '
0100  <-------Source: line: 'return '
0100 <--------Function: line: 'return '
0100<---------Source: line: 'return '
0101         InstructionFlow: end-gen
0101        Source: end-gen
0101        If: end: 'block-if'
0101      <-Source: end: 'block-if'
0101     <--If: end: 'block-if'
0101    <---Source: end: 'block-if'
0101   <----If: end: 'block-if'
0101  <-----Source: end: 'block-if'
0101 <------Function: end: 'block-if'
0101<-------Source: end: 'block-if'
0101       If: end-gen
0101      Source: end-gen
0101      If: end: 'block-if'
0101    <-Source: end: 'block-if'
0101   <--If: end: 'block-if'
0101  <---Source: end: 'block-if'
0101 <----Function: end: 'block-if'
0101<-----Source: end: 'block-if'
0101     If: end-gen
0101     DeclarationBlock: begin-gen
0101      Variable: begin-gen
0101       Variable: expr: 'curModulo'
0101       Variable: expr: '='
0101       Value: begin-gen
0101        New: begin-gen
0101         FunctionCall: begin-gen
0101          Value: begin-gen
0101           Constant: begin-gen
0101            Constant: ctype: 'String' -> 'flmodules'
0101            Constant: expr: 'u"flmodules"'
0101          <-Value: expr: 'u"flmodules"'
0101           Constant: end-gen
0101          Value: end-gen
0101          FunctionCall: expr: 'FLSqlCursor(u"flmodules")'
0101        <-New: expr: 'qsatype.FLSqlCursor(u"flmodules")'
0101       <--Value: expr: 'qsatype.FLSqlCursor(u"flmodules")'
0101      <---Variable: expr: 'qsatype.FLSqlCursor(u"flmodules")'
0101         FunctionCall: end-gen
0101        New: end-gen
0101       Value: end-gen
0101      Variable: end-gen
0101      DeclarationBlock: line: 'curModulo = qsatype.FLSqlCursor(u"flmodules")'
0101    <-Source: line: 'curModulo = qsatype.FLSqlCursor(u"flmodules")'
0101   <--If: line: 'curModulo = qsatype.FLSqlCursor(u"flmodules")'
0101  <---Source: line: 'curModulo = qsatype.FLSqlCursor(u"flmodules")'
0101 <----Function: line: 'curModulo = qsatype.FLSqlCursor(u"flmodules")'
0101<-----Source: line: 'curModulo = qsatype.FLSqlCursor(u"flmodules")'
0102     DeclarationBlock: end-gen
0102     If: begin-gen
0102      Expression: begin-gen
0102       Identifier: begin-gen
0102        Identifier: expr: 'recargar'
0102      <-Expression: expr: 'recargar'
0102       Identifier: end-gen
0102       Compare: begin-gen
0102        Compare: expr: '=='
0102      <-Expression: expr: '=='
0102       Compare: end-gen
0102       Member: begin-gen
0102        Identifier: begin-gen
0102         Identifier: expr: 'MessageBox'
0102        Identifier: end-gen
0102        Identifier: begin-gen
0102         Identifier: expr: 'Yes'
0102        Identifier: end-gen
0102        Member: expr: 'MessageBox.Yes'
0102      <-Expression: expr: 'MessageBox.Yes'
0102       Member: end-gen
0102      Expression: end-gen
0102      If: line: 'if recargar == MessageBox.Yes:'
0102    <-Source: line: 'if recargar == MessageBox.Yes:'
0102   <--If: line: 'if recargar == MessageBox.Yes:'
0102  <---Source: line: 'if recargar == MessageBox.Yes:'
0102 <----Function: line: 'if recargar == MessageBox.Yes:'
0102<-----Source: line: 'if recargar == MessageBox.Yes:'
0103      If: begin: 'block-if'
0103    <-Source: begin: 'block-if'
0103   <--If: begin: 'block-if'
0103  <---Source: begin: 'block-if'
0103 <----Function: begin: 'block-if'
0103<-----Source: begin: 'block-if'
0103      Source: begin-gen
0103       With: begin-gen
0103        Identifier: begin-gen
0103         Identifier: expr: 'curModulo'
0103        Identifier: end-gen
0103        With: line: 'w0d_obj = curModulo'
0103      <-Source: line: 'w0d_obj = curModulo'
0103     <--If: line: 'w0d_obj = curModulo'
0103    <---Source: line: 'w0d_obj = curModulo'
0103   <----If: line: 'w0d_obj = curModulo'
0103  <-----Source: line: 'w0d_obj = curModulo'
0103 <------Function: line: 'w0d_obj = curModulo'
0103<-------Source: line: 'w0d_obj = curModulo'
0104        Source: begin-gen
0104         InstructionCall: begin-gen
0104          FunctionCall: begin-gen
0104           Expression: begin-gen
0104            Expression: expr: 'ustr('
0104            Constant: begin-gen
0104             Constant: ctype: 'String' -> "idmodulo = '"
0104             Constant: expr: 'u"idmodulo = \'"'
0104           <-Expression: expr: 'u"idmodulo = \'"'
0104            Constant: end-gen
0104            Expression: expr: ','
0104            Identifier: begin-gen
0104             Identifier: expr: 'modulo'
0104           <-Expression: expr: 'modulo'
0104            Identifier: end-gen
0104            Expression: expr: ','
0104            Constant: begin-gen
0104             Constant: ctype: 'String' -> "'"
0104             Constant: expr: 'u"\'"'
0104           <-Expression: expr: 'u"\'"'
0104            Constant: end-gen
0104            Expression: expr: ')'
0104           Expression: end-gen
0104           FunctionCall: expr: 'select(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0104          FunctionCall: end-gen
0104          InstructionCall: line: 'select(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0104        <-Source: line: 'select(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0104       <--With: line: 'select(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0104      <---Source: line: 'select(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0104     <----If: line: 'select(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0104    <-----Source: line: 'select(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0104   <------If: line: 'select(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0104  <-------Source: line: 'select(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0104 <--------Function: line: 'select(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0104<---------Source: line: 'select(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0105         InstructionCall: end-gen
0105         InstructionCall: begin-gen
0105          FunctionCall: begin-gen
0105           FunctionCall: expr: 'first()'
0105          FunctionCall: end-gen
0105          InstructionCall: line: 'first()'
0105        <-Source: line: 'first()'
0105       <--With: line: 'first()'
0105      <---Source: line: 'first()'
0105     <----If: line: 'first()'
0105    <-----Source: line: 'first()'
0105   <------If: line: 'first()'
0105  <-------Source: line: 'first()'
0105 <--------Function: line: 'first()'
0105<---------Source: line: 'first()'
0106         InstructionCall: end-gen
0106         InstructionCall: begin-gen
0106          FunctionCall: begin-gen
0106           Value: begin-gen
0106            Member: begin-gen
0106             Identifier: begin-gen
0106              Identifier: expr: 'curModulo'
0106             Identifier: end-gen
0106             Identifier: begin-gen
0106              Identifier: expr: 'Edit'
0106             Identifier: end-gen
0106             Member: expr: 'curModulo.Edit'
0106           <-Value: expr: 'curModulo.Edit'
0106            Member: end-gen
0106           Value: end-gen
0106           FunctionCall: expr: 'setModeAccess(curModulo.Edit)'
0106          FunctionCall: end-gen
0106          InstructionCall: line: 'setModeAccess(curModulo.Edit)'
0106        <-Source: line: 'setModeAccess(curModulo.Edit)'
0106       <--With: line: 'setModeAccess(curModulo.Edit)'
0106      <---Source: line: 'setModeAccess(curModulo.Edit)'
0106     <----If: line: 'setModeAccess(curModulo.Edit)'
0106    <-----Source: line: 'setModeAccess(curModulo.Edit)'
0106   <------If: line: 'setModeAccess(curModulo.Edit)'
0106  <-------Source: line: 'setModeAccess(curModulo.Edit)'
0106 <--------Function: line: 'setModeAccess(curModulo.Edit)'
0106<---------Source: line: 'setModeAccess(curModulo.Edit)'
0107         InstructionCall: end-gen
0107        Source: end-gen
0107        With: line: 'del w0d_obj'
0107      <-Source: line: 'del w0d_obj'
0107     <--If: line: 'del w0d_obj'
0107    <---Source: line: 'del w0d_obj'
0107   <----If: line: 'del w0d_obj'
0107  <-----Source: line: 'del w0d_obj'
0107 <------Function: line: 'del w0d_obj'
0107<-------Source: line: 'del w0d_obj'
0108       With: end-gen
0108      Source: end-gen
0108      If: end: 'block-if'
0108    <-Source: end: 'block-if'
0108   <--If: end: 'block-if'
0108  <---Source: end: 'block-if'
0108 <----Function: end: 'block-if'
0108<-----Source: end: 'block-if'
0108      If: line: 'else:'
0108    <-Source: line: 'else:'
0108   <--If: line: 'else:'
0108  <---Source: line: 'else:'
0108 <----Function: line: 'else:'
0108<-----Source: line: 'else:'
0110      If: begin: 'block-else'
0110    <-Source: begin: 'block-else'
0110   <--If: begin: 'block-else'
0110  <---Source: begin: 'block-else'
0110 <----Function: begin: 'block-else'
0110<-----Source: begin: 'block-else'
0110      Source: begin-gen
0110       InstructionCall: begin-gen
0110        Member: begin-gen
0110         Identifier: begin-gen
0110          Identifier: expr: 'curModulo'
0110         Identifier: end-gen
0110         FunctionCall: begin-gen
0110          Value: begin-gen
0110           Member: begin-gen
0110            Identifier: begin-gen
0110             Identifier: expr: 'curModulo'
0110            Identifier: end-gen
0110            Identifier: begin-gen
0110             Identifier: expr: 'Insert'
0110            Identifier: end-gen
0110            Member: expr: 'curModulo.Insert'
0110          <-Value: expr: 'curModulo.Insert'
0110           Member: end-gen
0110          Value: end-gen
0110          FunctionCall: expr: 'setModeAccess(curModulo.Insert)'
0110         FunctionCall: end-gen
0110         Member: expr: 'curModulo.setModeAccess(curModulo.Insert)'
0110        Member: end-gen
0110        InstructionCall: line: 'curModulo.setModeAccess(curModulo.Insert)'
0110      <-Source: line: 'curModulo.setModeAccess(curModulo.Insert)'
0110     <--If: line: 'curModulo.setModeAccess(curModulo.Insert)'
0110    <---Source: line: 'curModulo.setModeAccess(curModulo.Insert)'
0110   <----If: line: 'curModulo.setModeAccess(curModulo.Insert)'
0110  <-----Source: line: 'curModulo.setModeAccess(curModulo.Insert)'
0110 <------Function: line: 'curModulo.setModeAccess(curModulo.Insert)'
0110<-------Source: line: 'curModulo.setModeAccess(curModulo.Insert)'
0111       InstructionCall: end-gen
0111      Source: end-gen
0111      If: end: 'block-else'
0111    <-Source: end: 'block-else'
0111   <--If: end: 'block-else'
0111  <---Source: end: 'block-else'
0111 <----Function: end: 'block-else'
0111<-----Source: end: 'block-else'
0112     If: end-gen
0112     With: begin-gen
0112      Identifier: begin-gen
0112       Identifier: expr: 'curModulo'
0112      Identifier: end-gen
0112      With: line: 'wb8_obj = curModulo'
0112    <-Source: line: 'wb8_obj = curModulo'
0112   <--If: line: 'wb8_obj = curModulo'
0112  <---Source: line: 'wb8_obj = curModulo'
0112 <----Function: line: 'wb8_obj = curModulo'
0112<-----Source: line: 'wb8_obj = curModulo'
0113      Source: begin-gen
0113       InstructionCall: begin-gen
0113        FunctionCall: begin-gen
0113         FunctionCall: expr: 'refreshBuffer()'
0113        FunctionCall: end-gen
0113        InstructionCall: line: 'refreshBuffer()'
0113      <-Source: line: 'refreshBuffer()'
0113     <--With: line: 'refreshBuffer()'
0113    <---Source: line: 'refreshBuffer()'
0113   <----If: line: 'refreshBuffer()'
0113  <-----Source: line: 'refreshBuffer()'
0113 <------Function: line: 'refreshBuffer()'
0113<-------Source: line: 'refreshBuffer()'
0114       InstructionCall: end-gen
0114       InstructionCall: begin-gen
0114        FunctionCall: begin-gen
0114         Value: begin-gen
0114          Constant: begin-gen
0114           Constant: ctype: 'String' -> 'idmodulo'
0114           Constant: expr: 'u"idmodulo"'
0114         <-Value: expr: 'u"idmodulo"'
0114          Constant: end-gen
0114         Value: end-gen
0114         Value: begin-gen
0114          Identifier: begin-gen
0114           Identifier: expr: 'modulo'
0114         <-Value: expr: 'modulo'
0114          Identifier: end-gen
0114         Value: end-gen
0114         FunctionCall: expr: 'setValueBuffer(u"idmodulo", modulo)'
0114        FunctionCall: end-gen
0114        InstructionCall: line: 'setValueBuffer(u"idmodulo", modulo)'
0114      <-Source: line: 'setValueBuffer(u"idmodulo", modulo)'
0114     <--With: line: 'setValueBuffer(u"idmodulo", modulo)'
0114    <---Source: line: 'setValueBuffer(u"idmodulo", modulo)'
0114   <----If: line: 'setValueBuffer(u"idmodulo", modulo)'
0114  <-----Source: line: 'setValueBuffer(u"idmodulo", modulo)'
0114 <------Function: line: 'setValueBuffer(u"idmodulo", modulo)'
0114<-------Source: line: 'setValueBuffer(u"idmodulo", modulo)'
0115       InstructionCall: end-gen
0115       InstructionCall: begin-gen
0115        FunctionCall: begin-gen
0115         Value: begin-gen
0115          Constant: begin-gen
0115           Constant: ctype: 'String' -> 'descripcion'
0115           Constant: expr: 'u"descripcion"'
0115         <-Value: expr: 'u"descripcion"'
0115          Constant: end-gen
0115         Value: end-gen
0115         Value: begin-gen
0115          Identifier: begin-gen
0115           Identifier: expr: 'descripcion'
0115         <-Value: expr: 'descripcion'
0115          Identifier: end-gen
0115         Value: end-gen
0115         FunctionCall: expr: 'setValueBuffer(u"descripcion", descripcion)'
0115        FunctionCall: end-gen
0115        InstructionCall: line: 'setValueBuffer(u"descripcion", descripcion)'
0115      <-Source: line: 'setValueBuffer(u"descripcion", descripcion)'
0115     <--With: line: 'setValueBuffer(u"descripcion", descripcion)'
0115    <---Source: line: 'setValueBuffer(u"descripcion", descripcion)'
0115   <----If: line: 'setValueBuffer(u"descripcion", descripcion)'
0115  <-----Source: line: 'setValueBuffer(u"descripcion", descripcion)'
0115 <------Function: line: 'setValueBuffer(u"descripcion", descripcion)'
0115<-------Source: line: 'setValueBuffer(u"descripcion", descripcion)'
0116       InstructionCall: end-gen
0116       InstructionCall: begin-gen
0116        FunctionCall: begin-gen
0116         Value: begin-gen
0116          Constant: begin-gen
0116           Constant: ctype: 'String' -> 'idarea'
0116           Constant: expr: 'u"idarea"'
0116         <-Value: expr: 'u"idarea"'
0116          Constant: end-gen
0116         Value: end-gen
0116         Value: begin-gen
0116          Identifier: begin-gen
0116           Identifier: expr: 'area'
0116         <-Value: expr: 'area'
0116          Identifier: end-gen
0116         Value: end-gen
0116         FunctionCall: expr: 'setValueBuffer(u"idarea", area)'
0116        FunctionCall: end-gen
0116        InstructionCall: line: 'setValueBuffer(u"idarea", area)'
0116      <-Source: line: 'setValueBuffer(u"idarea", area)'
0116     <--With: line: 'setValueBuffer(u"idarea", area)'
0116    <---Source: line: 'setValueBuffer(u"idarea", area)'
0116   <----If: line: 'setValueBuffer(u"idarea", area)'
0116  <-----Source: line: 'setValueBuffer(u"idarea", area)'
0116 <------Function: line: 'setValueBuffer(u"idarea", area)'
0116<-------Source: line: 'setValueBuffer(u"idarea", area)'
0117       InstructionCall: end-gen
0117       InstructionCall: begin-gen
0117        FunctionCall: begin-gen
0117         Value: begin-gen
0117          Constant: begin-gen
0117           Constant: ctype: 'String' -> 'version'
0117           Constant: expr: 'u"version"'
0117         <-Value: expr: 'u"version"'
0117          Constant: end-gen
0117         Value: end-gen
0117         Value: begin-gen
0117          Identifier: begin-gen
0117           Identifier: expr: 'version'
0117         <-Value: expr: 'version'
0117          Identifier: end-gen
0117         Value: end-gen
0117         FunctionCall: expr: 'setValueBuffer(u"version", version)'
0117        FunctionCall: end-gen
0117        InstructionCall: line: 'setValueBuffer(u"version", version)'
0117      <-Source: line: 'setValueBuffer(u"version", version)'
0117     <--With: line: 'setValueBuffer(u"version", version)'
0117    <---Source: line: 'setValueBuffer(u"version", version)'
0117   <----If: line: 'setValueBuffer(u"version", version)'
0117  <-----Source: line: 'setValueBuffer(u"version", version)'
0117 <------Function: line: 'setValueBuffer(u"version", version)'
0117<-------Source: line: 'setValueBuffer(u"version", version)'
0118       InstructionCall: end-gen
0118       InstructionCall: begin-gen
0118        FunctionCall: begin-gen
0118         Value: begin-gen
0118          Constant: begin-gen
0118           Constant: ctype: 'String' -> 'icono'
0118           Constant: expr: 'u"icono"'
0118         <-Value: expr: 'u"icono"'
0118          Constant: end-gen
0118         Value: end-gen
0118         Value: begin-gen
0118          Identifier: begin-gen
0118           Identifier: expr: 'icono'
0118         <-Value: expr: 'icono'
0118          Identifier: end-gen
0118         Value: end-gen
0118         FunctionCall: expr: 'setValueBuffer(u"icono", icono)'
0118        FunctionCall: end-gen
0118        InstructionCall: line: 'setValueBuffer(u"icono", icono)'
0118      <-Source: line: 'setValueBuffer(u"icono", icono)'
0118     <--With: line: 'setValueBuffer(u"icono", icono)'
0118    <---Source: line: 'setValueBuffer(u"icono", icono)'
0118   <----If: line: 'setValueBuffer(u"icono", icono)'
0118  <-----Source: line: 'setValueBuffer(u"icono", icono)'
0118 <------Function: line: 'setValueBuffer(u"icono", icono)'
0118<-------Source: line: 'setValueBuffer(u"icono", icono)'
0119       InstructionCall: end-gen
0119       InstructionCall: begin-gen
0119        FunctionCall: begin-gen
0119         FunctionCall: expr: 'commitBuffer()'
0119        FunctionCall: end-gen
0119        InstructionCall: line: 'commitBuffer()'
0119      <-Source: line: 'commitBuffer()'
0119     <--With: line: 'commitBuffer()'
0119    <---Source: line: 'commitBuffer()'
0119   <----If: line: 'commitBuffer()'
0119  <-----Source: line: 'commitBuffer()'
0119 <------Function: line: 'commitBuffer()'
0119<-------Source: line: 'commitBuffer()'
0120       InstructionCall: end-gen
0120      Source: end-gen
0120      With: line: 'del wb8_obj'
0120    <-Source: line: 'del wb8_obj'
0120   <--If: line: 'del wb8_obj'
0120  <---Source: line: 'del wb8_obj'
0120 <----Function: line: 'del wb8_obj'
0120<-----Source: line: 'del wb8_obj'
0121     With: end-gen
0121     DeclarationBlock: begin-gen
0121      Variable: begin-gen
0121       Variable: expr: 'curSeleccion'
0121       Variable: expr: '='
0121       Value: begin-gen
0121        New: begin-gen
0121         FunctionCall: begin-gen
0121          Value: begin-gen
0121           Constant: begin-gen
0121            Constant: ctype: 'String' -> 'flmodules'
0121            Constant: expr: 'u"flmodules"'
0121          <-Value: expr: 'u"flmodules"'
0121           Constant: end-gen
0121          Value: end-gen
0121          FunctionCall: expr: 'FLSqlCursor(u"flmodules")'
0121        <-New: expr: 'qsatype.FLSqlCursor(u"flmodules")'
0121       <--Value: expr: 'qsatype.FLSqlCursor(u"flmodules")'
0121      <---Variable: expr: 'qsatype.FLSqlCursor(u"flmodules")'
0121         FunctionCall: end-gen
0121        New: end-gen
0121       Value: end-gen
0121      Variable: end-gen
0121      DeclarationBlock: line: 'curSeleccion = qsatype.FLSqlCursor(u"flmodules")'
0121    <-Source: line: 'curSeleccion = qsatype.FLSqlCursor(u"flmodules")'
0121   <--If: line: 'curSeleccion = qsatype.FLSqlCursor(u"flmodules")'
0121  <---Source: line: 'curSeleccion = qsatype.FLSqlCursor(u"flmodules")'
0121 <----Function: line: 'curSeleccion = qsatype.FLSqlCursor(u"flmodules")'
0121<-----Source: line: 'curSeleccion = qsatype.FLSqlCursor(u"flmodules")'
0122     DeclarationBlock: end-gen
0122     InstructionCall: begin-gen
0122      Member: begin-gen
0122       Identifier: begin-gen
0122        Identifier: expr: 'curModulo'
0122       Identifier: end-gen
0122       FunctionCall: begin-gen
0122        Expression: begin-gen
0122         Expression: expr: 'ustr('
0122         Constant: begin-gen
0122          Constant: ctype: 'String' -> "idmodulo = '"
0122          Constant: expr: 'u"idmodulo = \'"'
0122        <-Expression: expr: 'u"idmodulo = \'"'
0122         Constant: end-gen
0122         Expression: expr: ','
0122         Identifier: begin-gen
0122          Identifier: expr: 'modulo'
0122        <-Expression: expr: 'modulo'
0122         Identifier: end-gen
0122         Expression: expr: ','
0122         Constant: begin-gen
0122          Constant: ctype: 'String' -> "'"
0122          Constant: expr: 'u"\'"'
0122        <-Expression: expr: 'u"\'"'
0122         Constant: end-gen
0122         Expression: expr: ')'
0122        Expression: end-gen
0122        FunctionCall: expr: 'setMainFilter(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0122       FunctionCall: end-gen
0122       Member: expr: 'curModulo.setMainFilter(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0122      Member: end-gen
0122      InstructionCall: line: 'curModulo.setMainFilter(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0122    <-Source: line: 'curModulo.setMainFilter(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0122   <--If: line: 'curModulo.setMainFilter(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0122  <---Source: line: 'curModulo.setMainFilter(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0122 <----Function: line: 'curModulo.setMainFilter(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0122<-----Source: line: 'curModulo.setMainFilter(ustr( u"idmodulo = \'" , modulo , u"\'" ))'
0123     InstructionCall: end-gen
0123     InstructionCall: begin-gen
0123      Member: begin-gen
0123       Identifier: begin-gen
0123        Identifier: expr: 'curModulo'
0123       Identifier: end-gen
0123       FunctionCall: begin-gen
0123        FunctionCall: expr: 'editRecord()'
0123       FunctionCall: end-gen
0123       Member: expr: 'curModulo.editRecord()'
0123      Member: end-gen
0123      InstructionCall: line: 'curModulo.editRecord()'
0123    <-Source: line: 'curModulo.editRecord()'
0123   <--If: line: 'curModulo.editRecord()'
0123  <---Source: line: 'curModulo.editRecord()'
0123 <----Function: line: 'curModulo.editRecord()'
0123<-----Source: line: 'curModulo.editRecord()'
0124     InstructionCall: end-gen
0124     InstructionCall: begin-gen
0124      Member: begin-gen
0124       Identifier: begin-gen
0124        Identifier: expr: 'formRecordflmodules'
0124       Identifier: end-gen
0124       FunctionCall: begin-gen
0124        Expression: begin-gen
0124         Expression: expr: 'ustr('
0124         Member: begin-gen
0124          Identifier: begin-gen
0124           Identifier: expr: 'fichero'
0124          Identifier: end-gen
0124          Identifier: begin-gen
0124           Identifier: expr: 'path'
0124          Identifier: end-gen
0124          Member: expr: 'fichero.path'
0124        <-Expression: expr: 'fichero.path'
0124         Member: end-gen
0124         Expression: expr: ','
0124         Constant: begin-gen
0124          Constant: ctype: 'String' -> '/'
0124          Constant: expr: 'u"/"'
0124        <-Expression: expr: 'u"/"'
0124         Constant: end-gen
0124         Expression: expr: ')'
0124        Expression: end-gen
0124        Value: begin-gen
0124         Identifier: begin-gen
0124          Identifier: expr: 'False'
0124        <-Value: expr: 'False'
0124         Identifier: end-gen
0124        Value: end-gen
0124        FunctionCall: expr: 'cargarDeDisco(ustr( fichero.path , u"/" ), False)'
0124       FunctionCall: end-gen
0124       Member: expr: 'formRecordflmodules.cargarDeDisco(ustr( fichero.path , u"/" ), False)'
0124      Member: end-gen
0124      InstructionCall: line: 'formRecordflmodules.cargarDeDisco(ustr( fichero.path , u"/" ), False)'
0124    <-Source: line: 'formRecordflmodules.cargarDeDisco(ustr( fichero.path , u"/" ), False)'
0124   <--If: line: 'formRecordflmodules.cargarDeDisco(ustr( fichero.path , u"/" ), False)'
0124  <---Source: line: 'formRecordflmodules.cargarDeDisco(ustr( fichero.path , u"/" ), False)'
0124 <----Function: line: 'formRecordflmodules.cargarDeDisco(ustr( fichero.path , u"/" ), False)'
0124<-----Source: line: 'formRecordflmodules.cargarDeDisco(ustr( fichero.path , u"/" ), False)'
0125     InstructionCall: end-gen
0125     InstructionCall: begin-gen
0125      Member: begin-gen
0125       Identifier: begin-gen
0125        Identifier: expr: 'formRecordflmodules'
0125       Identifier: end-gen
0125       FunctionCall: begin-gen
0125        FunctionCall: expr: 'accept()'
0125       FunctionCall: end-gen
0125       Member: expr: 'formRecordflmodules.accept()'
0125      Member: end-gen
0125      InstructionCall: line: 'formRecordflmodules.accept()'
0125    <-Source: line: 'formRecordflmodules.accept()'
0125   <--If: line: 'formRecordflmodules.accept()'
0125  <---Source: line: 'formRecordflmodules.accept()'
0125 <----Function: line: 'formRecordflmodules.accept()'
0125<-----Source: line: 'formRecordflmodules.accept()'
0126     InstructionCall: end-gen
0126     DeclarationBlock: begin-gen
0126      Variable: begin-gen
0126       Variable: expr: 'setting'
0126       Variable: expr: '='
0126       Expression: begin-gen
0126        Expression: expr: 'ustr('
0126      <-Variable: expr: 'ustr('
0126        Constant: begin-gen
0126         Constant: ctype: 'String' -> 'scripts/sys/modLastModule_'
0126         Constant: expr: 'u"scripts/sys/modLastModule_"'
0126       <-Expression: expr: 'u"scripts/sys/modLastModule_"'
0126      <--Variable: expr: 'u"scripts/sys/modLastModule_"'
0126        Constant: end-gen
0126        Expression: expr: ','
0126      <-Variable: expr: ','
0126        Member: begin-gen
0126         Identifier: begin-gen
0126          Identifier: expr: 'sys'
0126         Identifier: end-gen
0126         FunctionCall: begin-gen
0126          FunctionCall: expr: 'nameBD()'
0126         FunctionCall: end-gen
0126         Member: expr: 'sys.nameBD()'
0126       <-Expression: expr: 'sys.nameBD()'
0126      <--Variable: expr: 'sys.nameBD()'
0126        Member: end-gen
0126        Expression: expr: ')'
0126      <-Variable: expr: ')'
0126       Expression: end-gen
0126      Variable: end-gen
0126      DeclarationBlock: line: 'setting = ustr( u"scripts/sys/modLastModule_" , sys.nameBD() )'
0126    <-Source: line: 'setting = ustr( u"scripts/sys/modLastModule_" , sys.nameBD() )'
0126   <--If: line: 'setting = ustr( u"scripts/sys/modLastModule_" , sys.nameBD() )'
0126  <---Source: line: 'setting = ustr( u"scripts/sys/modLastModule_" , sys.nameBD() )'
0126 <----Function: line: 'setting = ustr( u"scripts/sys/modLastModule_" , sys.nameBD() )'
0126<-----Source: line: 'setting = ustr( u"scripts/sys/modLastModule_" , sys.nameBD() )'
0127     DeclarationBlock: end-gen
0127     InstructionCall: begin-gen
0127      Member: begin-gen
0127       Identifier: begin-gen
0127        Identifier: expr: 'util'
0127       Identifier: end-gen
0127       FunctionCall: begin-gen
0127        Value: begin-gen
0127         Identifier: begin-gen
0127          Identifier: expr: 'setting'
0127        <-Value: expr: 'setting'
0127         Identifier: end-gen
0127        Value: end-gen
0127        Value: begin-gen
0127         Identifier: begin-gen
0127          Identifier: expr: 'nombreFichero'
0127        <-Value: expr: 'nombreFichero'
0127         Identifier: end-gen
0127        Value: end-gen
0127        FunctionCall: expr: 'writeSettingEntry(setting, nombreFichero)'
0127       FunctionCall: end-gen
0127       Member: expr: 'util.writeSettingEntry(setting, nombreFichero)'
0127      Member: end-gen
0127      InstructionCall: line: 'util.writeSettingEntry(setting, nombreFichero)'
0127    <-Source: line: 'util.writeSettingEntry(setting, nombreFichero)'
0127   <--If: line: 'util.writeSettingEntry(setting, nombreFichero)'
0127  <---Source: line: 'util.writeSettingEntry(setting, nombreFichero)'
0127 <----Function: line: 'util.writeSettingEntry(setting, nombreFichero)'
0127<-----Source: line: 'util.writeSettingEntry(setting, nombreFichero)'
0128     InstructionCall: end-gen
0128    Source: end-gen
0128    If: end: 'block-if'
0128  <-Source: end: 'block-if'
0128 <--Function: end: 'block-if'
0128<---Source: end: 'block-if'
0128   If: end-gen
0128  Source: end-gen
0128  Function: end: 'block-def-main'
0128<-Source: end: 'block-def-main'
0129 Function: end-gen
0129 Function: begin-gen
0129  Variable: begin-gen
0129   Variable: expr: 'linea'
0129  Variable: end-gen
0129  Function: line: 'def dameValor(linea = None):'
0129<-Source: line: 'def dameValor(linea = None):'
0130  Function: begin: 'block-def-dameValor'
0130<-Source: begin: 'block-def-dameValor'
0130  Source: begin-gen
0130   InstructionFlow: begin-gen
0130    Value: begin-gen
0130     Identifier: begin-gen
0130      Identifier: expr: 'linea'
0130    <-Value: expr: 'linea'
0130     Identifier: end-gen
0130    Value: end-gen
0130    InstructionFlow: line: 'return linea'
0130  <-Source: line: 'return linea'
0130 <--Function: line: 'return linea'
0130<---Source: line: 'return linea'
0131   InstructionFlow: end-gen
0131  Source: end-gen
0131  Function: end: 'block-def-dameValor'
0131<-Source: end: 'block-def-dameValor'
0132 Function: end-gen
0132 Function: begin-gen
0132  Variable: begin-gen
0132   Variable: expr: 'tabla'
0132  Variable: end-gen
0132  Variable: begin-gen
0132   Variable: expr: 'campo'
0132  Variable: end-gen
0132  Variable: begin-gen
0132   Variable: expr: 'where'
0132  Variable: end-gen
0132  Function: line: 'def valorPorClave(tabla = None, campo = None, where = None):'
0132<-Source: line: 'def valorPorClave(tabla = None, campo = None, where = None):'
0133  Function: begin: 'block-def-valorPorClave'
0133<-Source: begin: 'block-def-valorPorClave'
0133  Source: begin-gen
0133   DeclarationBlock: begin-gen
0133    Variable: begin-gen
0133     Variable: expr: 'valor'
0133     Variable: expr: '='
0133     Variable: expr: 'None'
0133    Variable: end-gen
0133    DeclarationBlock: line: 'valor = None'
0133  <-Source: line: 'valor = None'
0133 <--Function: line: 'valor = None'
0133<---Source: line: 'valor = None'
0134   DeclarationBlock: end-gen
0134   DeclarationBlock: begin-gen
0134    Variable: begin-gen
0134     Variable: expr: 'query'
0134     Variable: expr: '='
0134     Value: begin-gen
0134      New: begin-gen
0134       FunctionCall: begin-gen
0134        FunctionCall: expr: 'FLSqlQuery()'
0134      <-New: expr: 'qsatype.FLSqlQuery()'
0134     <--Value: expr: 'qsatype.FLSqlQuery()'
0134    <---Variable: expr: 'qsatype.FLSqlQuery()'
0134       FunctionCall: end-gen
0134      New: end-gen
0134     Value: end-gen
0134    Variable: end-gen
0134    DeclarationBlock: line: 'query = qsatype.FLSqlQuery()'
0134  <-Source: line: 'query = qsatype.FLSqlQuery()'
0134 <--Function: line: 'query = qsatype.FLSqlQuery()'
0134<---Source: line: 'query = qsatype.FLSqlQuery()'
0135   DeclarationBlock: end-gen
0135   InstructionCall: begin-gen
0135    Member: begin-gen
0135     Identifier: begin-gen
0135      Identifier: expr: 'query'
0135     Identifier: end-gen
0135     FunctionCall: begin-gen
0135      Value: begin-gen
0135       Identifier: begin-gen
0135        Identifier: expr: 'tabla'
0135      <-Value: expr: 'tabla'
0135       Identifier: end-gen
0135      Value: end-gen
0135      FunctionCall: expr: 'setTablesList(tabla)'
0135     FunctionCall: end-gen
0135     Member: expr: 'query.setTablesList(tabla)'
0135    Member: end-gen
0135    InstructionCall: line: 'query.setTablesList(tabla)'
0135  <-Source: line: 'query.setTablesList(tabla)'
0135 <--Function: line: 'query.setTablesList(tabla)'
0135<---Source: line: 'query.setTablesList(tabla)'
0136   InstructionCall: end-gen
0136   InstructionCall: begin-gen
0136    Member: begin-gen
0136     Identifier: begin-gen
0136      Identifier: expr: 'query'
0136     Identifier: end-gen
0136     FunctionCall: begin-gen
0136      Value: begin-gen
0136       Identifier: begin-gen
0136        Identifier: expr: 'campo'
0136      <-Value: expr: 'campo'
0136       Identifier: end-gen
0136      Value: end-gen
0136      FunctionCall: expr: 'setSelect(campo)'
0136     FunctionCall: end-gen
0136     Member: expr: 'query.setSelect(campo)'
0136    Member: end-gen
0136    InstructionCall: line: 'query.setSelect(campo)'
0136  <-Source: line: 'query.setSelect(campo)'
0136 <--Function: line: 'query.setSelect(campo)'
0136<---Source: line: 'query.setSelect(campo)'
0137   InstructionCall: end-gen
0137   InstructionCall: begin-gen
0137    Member: begin-gen
0137     Identifier: begin-gen
0137      Identifier: expr: 'query'
0137     Identifier: end-gen
0137     FunctionCall: begin-gen
0137      Value: begin-gen
0137       Identifier: begin-gen
0137        Identifier: expr: 'tabla'
0137      <-Value: expr: 'tabla'
0137       Identifier: end-gen
0137      Value: end-gen
0137      FunctionCall: expr: 'setFrom(tabla)'
0137     FunctionCall: end-gen
0137     Member: expr: 'query.setFrom(tabla)'
0137    Member: end-gen
0137    InstructionCall: line: 'query.setFrom(tabla)'
0137  <-Source: line: 'query.setFrom(tabla)'
0137 <--Function: line: 'query.setFrom(tabla)'
0137<---Source: line: 'query.setFrom(tabla)'
0138   InstructionCall: end-gen
0138   InstructionCall: begin-gen
0138    Member: begin-gen
0138     Identifier: begin-gen
0138      Identifier: expr: 'query'
0138     Identifier: end-gen
0138     FunctionCall: begin-gen
0138      Expression: begin-gen
0138       Expression: expr: 'ustr('
0138       Identifier: begin-gen
0138        Identifier: expr: 'where'
0138      <-Expression: expr: 'where'
0138       Identifier: end-gen
0138       Expression: expr: ','
0138       Constant: begin-gen
0138        Constant: ctype: 'String' -> ';'
0138        Constant: expr: 'u";"'
0138      <-Expression: expr: 'u";"'
0138       Constant: end-gen
0138       Expression: expr: ')'
0138      Expression: end-gen
0138      FunctionCall: expr: 'setWhere(ustr( where , u";" ))'
0138     FunctionCall: end-gen
0138     Member: expr: 'query.setWhere(ustr( where , u";" ))'
0138    Member: end-gen
0138    InstructionCall: line: 'query.setWhere(ustr( where , u";" ))'
0138  <-Source: line: 'query.setWhere(ustr( where , u";" ))'
0138 <--Function: line: 'query.setWhere(ustr( where , u";" ))'
0138<---Source: line: 'query.setWhere(ustr( where , u";" ))'
0139   InstructionCall: end-gen
0139   InstructionCall: begin-gen
0139    Member: begin-gen
0139     Identifier: begin-gen
0139      Identifier: expr: 'query'
0139     Identifier: end-gen
0139     FunctionCall: begin-gen
0139      FunctionCall: expr: 'exec_()'
0139     FunctionCall: end-gen
0139     Member: expr: 'query.exec_()'
0139    Member: end-gen
0139    InstructionCall: line: 'query.exec_()'
0139  <-Source: line: 'query.exec_()'
0139 <--Function: line: 'query.exec_()'
0139<---Source: line: 'query.exec_()'
0140   InstructionCall: end-gen
0140   If: begin-gen
0140    Value: begin-gen
0140     Member: begin-gen
0140      Identifier: begin-gen
0140       Identifier: expr: 'query'
0140      Identifier: end-gen
0140      FunctionCall: begin-gen
0140       FunctionCall: expr: 'next()'
0140      FunctionCall: end-gen
0140      Member: expr: 'query.next()'
0140    <-Value: expr: 'query.next()'
0140     Member: end-gen
0140    Value: end-gen
0140    If: line: 'if query.next():'
0140  <-Source: line: 'if query.next():'
0140 <--Function: line: 'if query.next():'
0140<---Source: line: 'if query.next():'
0141    If: begin: 'block-if'
0141  <-Source: begin: 'block-if'
0141 <--Function: begin: 'block-if'
0141<---Source: begin: 'block-if'
0141    Source: begin-gen
0141     InstructionUpdate: begin-gen
0141      Identifier: begin-gen
0141       Identifier: expr: 'valor'
0141      Identifier: end-gen
0141      OpUpdate: begin-gen
0141       OpUpdate: expr: '='
0141      OpUpdate: end-gen
0141      Value: begin-gen
0141       Member: begin-gen
0141        Identifier: begin-gen
0141         Identifier: expr: 'query'
0141        Identifier: end-gen
0141        FunctionCall: begin-gen
0141         Value: begin-gen
0141          Constant: begin-gen
0141           Constant: ctype: 'Number' -> '0'
0141           Constant: expr: '0'
0141         <-Value: expr: '0'
0141          Constant: end-gen
0141         Value: end-gen
0141         FunctionCall: expr: 'value(0)'
0141        FunctionCall: end-gen
0141        Member: expr: 'query.value(0)'
0141      <-Value: expr: 'query.value(0)'
0141       Member: end-gen
0141      Value: end-gen
0141      InstructionUpdate: line: 'valor = query.value(0)'
0141    <-Source: line: 'valor = query.value(0)'
0141   <--If: line: 'valor = query.value(0)'
0141  <---Source: line: 'valor = query.value(0)'
0141 <----Function: line: 'valor = query.value(0)'
0141<-----Source: line: 'valor = query.value(0)'
0142     InstructionUpdate: end-gen
0142    Source: end-gen
0142    If: end: 'block-if'
0142  <-Source: end: 'block-if'
0142 <--Function: end: 'block-if'
0142<---Source: end: 'block-if'
0142   If: end-gen
0142   InstructionFlow: begin-gen
0142    Value: begin-gen
0142     Identifier: begin-gen
0142      Identifier: expr: 'valor'
0142    <-Value: expr: 'valor'
0142     Identifier: end-gen
0142    Value: end-gen
0142    InstructionFlow: line: 'return valor'
0142  <-Source: line: 'return valor'
0142 <--Function: line: 'return valor'
0142<---Source: line: 'return valor'
0143   InstructionFlow: end-gen
0143  Source: end-gen
0143  Function: end: 'block-def-valorPorClave'
0143<-Source: end: 'block-def-valorPorClave'
0144 Function: end-gen
0144 Function: begin-gen
0144  Variable: begin-gen
0144   Variable: expr: 'v1'
0144  Variable: end-gen
0144  Variable: begin-gen
0144   Variable: expr: 'v2'
0144  Variable: end-gen
0144  Function: line: 'def compararVersiones(v1 = None, v2 = None):'
0144<-Source: line: 'def compararVersiones(v1 = None, v2 = None):'
0145  Function: begin: 'block-def-compararVersiones'
0145<-Source: begin: 'block-def-compararVersiones'
0145  Source: begin-gen
0145   DeclarationBlock: begin-gen
0145    Variable: begin-gen
0145     Variable: expr: 'a1'
0145     Variable: expr: '='
0145     Variable: expr: 'None'
0145    Variable: end-gen
0145    DeclarationBlock: line: 'a1 = None'
0145  <-Source: line: 'a1 = None'
0145 <--Function: line: 'a1 = None'
0145<---Source: line: 'a1 = None'
0146    Variable: begin-gen
0146     Variable: expr: 'a2'
0146     Variable: expr: '='
0146     Variable: expr: 'None'
0146    Variable: end-gen
0146    DeclarationBlock: line: 'a2 = None'
0146  <-Source: line: 'a2 = None'
0146 <--Function: line: 'a2 = None'
0146<---Source: line: 'a2 = None'
0147   DeclarationBlock: end-gen
0147   If: begin-gen
0147    Expression: begin-gen
0147     Identifier: begin-gen
0147      Identifier: expr: 'v1'
0147    <-Expression: expr: 'v1'
0147     Identifier: end-gen
0147     Compare: begin-gen
0147      Compare: expr: 'and'
0147    <-Expression: expr: 'and'
0147     Compare: end-gen
0147     Identifier: begin-gen
0147      Identifier: expr: 'v2'
0147    <-Expression: expr: 'v2'
0147     Identifier: end-gen
0147    Expression: end-gen
0147    If: line: 'if v1 and v2:'
0147  <-Source: line: 'if v1 and v2:'
0147 <--Function: line: 'if v1 and v2:'
0147<---Source: line: 'if v1 and v2:'
0148    If: begin: 'block-if'
0148  <-Source: begin: 'block-if'
0148 <--Function: begin: 'block-if'
0148<---Source: begin: 'block-if'
0148    Source: begin-gen
0148     InstructionUpdate: begin-gen
0148      Identifier: begin-gen
0148       Identifier: expr: 'a1'
0148      Identifier: end-gen
0148      OpUpdate: begin-gen
0148       OpUpdate: expr: '='
0148      OpUpdate: end-gen
0148      Value: begin-gen
0148       Member: begin-gen
0148        Identifier: begin-gen
0148         Identifier: expr: 'v1'
0148        Identifier: end-gen
0148        FunctionCall: begin-gen
0148         Value: begin-gen
0148          Constant: begin-gen
0148           Constant: ctype: 'String' -> '.'
0148           Constant: expr: 'u"."'
0148         <-Value: expr: 'u"."'
0148          Constant: end-gen
0148         Value: end-gen
0148         FunctionCall: expr: 'split(u".")'
0148        FunctionCall: end-gen
0148        Member: expr: 'v1.split(u".")'
0148      <-Value: expr: 'v1.split(u".")'
0148       Member: end-gen
0148      Value: end-gen
0148      InstructionUpdate: line: 'a1 = v1.split(u".")'
0148    <-Source: line: 'a1 = v1.split(u".")'
0148   <--If: line: 'a1 = v1.split(u".")'
0148  <---Source: line: 'a1 = v1.split(u".")'
0148 <----Function: line: 'a1 = v1.split(u".")'
0148<-----Source: line: 'a1 = v1.split(u".")'
0149     InstructionUpdate: end-gen
0149     InstructionUpdate: begin-gen
0149      Identifier: begin-gen
0149       Identifier: expr: 'a2'
0149      Identifier: end-gen
0149      OpUpdate: begin-gen
0149       OpUpdate: expr: '='
0149      OpUpdate: end-gen
0149      Value: begin-gen
0149       Member: begin-gen
0149        Identifier: begin-gen
0149         Identifier: expr: 'v2'
0149        Identifier: end-gen
0149        FunctionCall: begin-gen
0149         Value: begin-gen
0149          Constant: begin-gen
0149           Constant: ctype: 'String' -> '.'
0149           Constant: expr: 'u"."'
0149         <-Value: expr: 'u"."'
0149          Constant: end-gen
0149         Value: end-gen
0149         FunctionCall: expr: 'split(u".")'
0149        FunctionCall: end-gen
0149        Member: expr: 'v2.split(u".")'
0149      <-Value: expr: 'v2.split(u".")'
0149       Member: end-gen
0149      Value: end-gen
0149      InstructionUpdate: line: 'a2 = v2.split(u".")'
0149    <-Source: line: 'a2 = v2.split(u".")'
0149   <--If: line: 'a2 = v2.split(u".")'
0149  <---Source: line: 'a2 = v2.split(u".")'
0149 <----Function: line: 'a2 = v2.split(u".")'
0149<-----Source: line: 'a2 = v2.split(u".")'
0150     InstructionUpdate: end-gen
0150     For: begin-gen
0150      Variable: begin-gen
0150       Variable: expr: 'i'
0150       Variable: expr: '='
0150       Value: begin-gen
0150        Constant: begin-gen
0150         Constant: ctype: 'Number' -> '0'
0150         Constant: expr: '0'
0150       <-Value: expr: '0'
0150      <--Variable: expr: '0'
0150        Constant: end-gen
0150       Value: end-gen
0150      Variable: end-gen
0150      For: line: 'i = 0'
0150    <-Source: line: 'i = 0'
0150   <--If: line: 'i = 0'
0150  <---Source: line: 'i = 0'
0150 <----Function: line: 'i = 0'
0150<-----Source: line: 'i = 0'
0151      InlineUpdate: begin-gen
0151       Identifier: begin-gen
0151        Identifier: expr: 'i'
0151       Identifier: end-gen
0151       InlineUpdate: expr: 'i'
0151       InlineUpdate: line+1: 'i += 1'
0151      InlineUpdate: end-gen
0151      Expression: begin-gen
0151       Identifier: begin-gen
0151        Identifier: expr: 'i'
0151      <-Expression: expr: 'i'
0151       Identifier: end-gen
0151       Compare: begin-gen
0151        Compare: expr: '<'
0151      <-Expression: expr: '<'
0151       Compare: end-gen
0151       Member: begin-gen
0151        Identifier: begin-gen
0151         Identifier: expr: 'a1'
0151        Identifier: end-gen
0151        Identifier: begin-gen
0151         Identifier: expr: 'length'
0151        Identifier: end-gen
0151        Member: expr: 'qsa(a1).length'
0151      <-Expression: expr: 'qsa(a1).length'
0151       Member: end-gen
0151      Expression: end-gen
0151      For: line: 'while i < qsa(a1).length:'
0151    <-Source: line: 'while i < qsa(a1).length:'
0151   <--If: line: 'while i < qsa(a1).length:'
0151  <---Source: line: 'while i < qsa(a1).length:'
0151 <----Function: line: 'while i < qsa(a1).length:'
0151<-----Source: line: 'while i < qsa(a1).length:'
0152      For: begin: 'block-for'
0152    <-Source: begin: 'block-for'
0152   <--If: begin: 'block-for'
0152  <---Source: begin: 'block-for'
0152 <----Function: begin: 'block-for'
0152<-----Source: begin: 'block-for'
0152      Source: begin-gen
0152       If: begin-gen
0152        Expression: begin-gen
0152         FunctionCall: begin-gen
0152          Value: begin-gen
0152           ArrayMember: begin-gen
0152            Identifier: begin-gen
0152             Identifier: expr: 'a1'
0152            Identifier: end-gen
0152            Value: begin-gen
0152             Identifier: begin-gen
0152              Identifier: expr: 'i'
0152            <-Value: expr: 'i'
0152             Identifier: end-gen
0152            Value: end-gen
0152            ArrayMember: expr: 'a1[i]'
0152          <-Value: expr: 'a1[i]'
0152           ArrayMember: end-gen
0152          Value: end-gen
0152          FunctionCall: expr: 'parseInt(a1[i])'
0152        <-Expression: expr: 'parseInt(a1[i])'
0152         FunctionCall: end-gen
0152         Compare: begin-gen
0152          Compare: expr: '>'
0152        <-Expression: expr: '>'
0152         Compare: end-gen
0152         FunctionCall: begin-gen
0152          Value: begin-gen
0152           ArrayMember: begin-gen
0152            Identifier: begin-gen
0152             Identifier: expr: 'a2'
0152            Identifier: end-gen
0152            Value: begin-gen
0152             Identifier: begin-gen
0152              Identifier: expr: 'i'
0152            <-Value: expr: 'i'
0152             Identifier: end-gen
0152            Value: end-gen
0152            ArrayMember: expr: 'a2[i]'
0152          <-Value: expr: 'a2[i]'
0152           ArrayMember: end-gen
0152          Value: end-gen
0152          FunctionCall: expr: 'parseInt(a2[i])'
0152        <-Expression: expr: 'parseInt(a2[i])'
0152         FunctionCall: end-gen
0152        Expression: end-gen
0152        If: line: 'if parseInt(a1[i]) > parseInt(a2[i]):'
0152      <-Source: line: 'if parseInt(a1[i]) > parseInt(a2[i]):'
0152     <--For: line: 'if parseInt(a1[i]) > parseInt(a2[i]):'
0152    <---Source: line: 'if parseInt(a1[i]) > parseInt(a2[i]):'
0152   <----If: line: 'if parseInt(a1[i]) > parseInt(a2[i]):'
0152  <-----Source: line: 'if parseInt(a1[i]) > parseInt(a2[i]):'
0152 <------Function: line: 'if parseInt(a1[i]) > parseInt(a2[i]):'
0152<-------Source: line: 'if parseInt(a1[i]) > parseInt(a2[i]):'
0153        If: begin: 'block-if'
0153      <-Source: begin: 'block-if'
0153     <--For: begin: 'block-if'
0153    <---Source: begin: 'block-if'
0153   <----If: begin: 'block-if'
0153  <-----Source: begin: 'block-if'
0153 <------Function: begin: 'block-if'
0153<-------Source: begin: 'block-if'
0153        Source: begin-gen
0153         InstructionFlow: begin-gen
0153          Value: begin-gen
0153           Constant: begin-gen
0153            Constant: ctype: 'Number' -> '1'
0153            Constant: expr: '1'
0153          <-Value: expr: '1'
0153           Constant: end-gen
0153          Value: end-gen
0153          InstructionFlow: line: 'return 1'
0153        <-Source: line: 'return 1'
0153       <--If: line: 'return 1'
0153      <---Source: line: 'return 1'
0153     <----For: line: 'return 1'
0153    <-----Source: line: 'return 1'
0153   <------If: line: 'return 1'
0153  <-------Source: line: 'return 1'
0153 <--------Function: line: 'return 1'
0153<---------Source: line: 'return 1'
0154         InstructionFlow: end-gen
0154        Source: end-gen
0154        If: end: 'block-if'
0154      <-Source: end: 'block-if'
0154     <--For: end: 'block-if'
0154    <---Source: end: 'block-if'
0154   <----If: end: 'block-if'
0154  <-----Source: end: 'block-if'
0154 <------Function: end: 'block-if'
0154<-------Source: end: 'block-if'
0154       If: end-gen
0154       If: begin-gen
0154        Expression: begin-gen
0154         FunctionCall: begin-gen
0154          Value: begin-gen
0154           ArrayMember: begin-gen
0154            Identifier: begin-gen
0154             Identifier: expr: 'a1'
0154            Identifier: end-gen
0154            Value: begin-gen
0154             Identifier: begin-gen
0154              Identifier: expr: 'i'
0154            <-Value: expr: 'i'
0154             Identifier: end-gen
0154            Value: end-gen
0154            ArrayMember: expr: 'a1[i]'
0154          <-Value: expr: 'a1[i]'
0154           ArrayMember: end-gen
0154          Value: end-gen
0154          FunctionCall: expr: 'parseInt(a1[i])'
0154        <-Expression: expr: 'parseInt(a1[i])'
0154         FunctionCall: end-gen
0154         Compare: begin-gen
0154          Compare: expr: '<'
0154        <-Expression: expr: '<'
0154         Compare: end-gen
0154         FunctionCall: begin-gen
0154          Value: begin-gen
0154           ArrayMember: begin-gen
0154            Identifier: begin-gen
0154             Identifier: expr: 'a2'
0154            Identifier: end-gen
0154            Value: begin-gen
0154             Identifier: begin-gen
0154              Identifier: expr: 'i'
0154            <-Value: expr: 'i'
0154             Identifier: end-gen
0154            Value: end-gen
0154            ArrayMember: expr: 'a2[i]'
0154          <-Value: expr: 'a2[i]'
0154           ArrayMember: end-gen
0154          Value: end-gen
0154          FunctionCall: expr: 'parseInt(a2[i])'
0154        <-Expression: expr: 'parseInt(a2[i])'
0154         FunctionCall: end-gen
0154        Expression: end-gen
0154        If: line: 'if parseInt(a1[i]) < parseInt(a2[i]):'
0154      <-Source: line: 'if parseInt(a1[i]) < parseInt(a2[i]):'
0154     <--For: line: 'if parseInt(a1[i]) < parseInt(a2[i]):'
0154    <---Source: line: 'if parseInt(a1[i]) < parseInt(a2[i]):'
0154   <----If: line: 'if parseInt(a1[i]) < parseInt(a2[i]):'
0154  <-----Source: line: 'if parseInt(a1[i]) < parseInt(a2[i]):'
0154 <------Function: line: 'if parseInt(a1[i]) < parseInt(a2[i]):'
0154<-------Source: line: 'if parseInt(a1[i]) < parseInt(a2[i]):'
0155        If: begin: 'block-if'
0155      <-Source: begin: 'block-if'
0155     <--For: begin: 'block-if'
0155    <---Source: begin: 'block-if'
0155   <----If: begin: 'block-if'
0155  <-----Source: begin: 'block-if'
0155 <------Function: begin: 'block-if'
0155<-------Source: begin: 'block-if'
0155        Source: begin-gen
0155         InstructionFlow: begin-gen
0155          Value: begin-gen
0155           Constant: begin-gen
0155            Constant: ctype: 'Number' -> '2'
0155            Constant: expr: '2'
0155          <-Value: expr: '2'
0155           Constant: end-gen
0155          Value: end-gen
0155          InstructionFlow: line: 'return 2'
0155        <-Source: line: 'return 2'
0155       <--If: line: 'return 2'
0155      <---Source: line: 'return 2'
0155     <----For: line: 'return 2'
0155    <-----Source: line: 'return 2'
0155   <------If: line: 'return 2'
0155  <-------Source: line: 'return 2'
0155 <--------Function: line: 'return 2'
0155<---------Source: line: 'return 2'
0156         InstructionFlow: end-gen
0156        Source: end-gen
0156        If: end: 'block-if'
0156      <-Source: end: 'block-if'
0156     <--For: end: 'block-if'
0156    <---Source: end: 'block-if'
0156   <----If: end: 'block-if'
0156  <-----Source: end: 'block-if'
0156 <------Function: end: 'block-if'
0156<-------Source: end: 'block-if'
0156       If: end-gen
0156      Source: end-gen
0156      For: line: 'i += 1'
0156    <-Source: line: 'i += 1'
0156   <--If: line: 'i += 1'
0156  <---Source: line: 'i += 1'
0156 <----Function: line: 'i += 1'
0156<-----Source: line: 'i += 1'
0157      For: end: 'block-for'
0157    <-Source: end: 'block-for'
0157   <--If: end: 'block-for'
0157  <---Source: end: 'block-for'
0157 <----Function: end: 'block-for'
0157<-----Source: end: 'block-for'
0157     For: end-gen
0157    Source: end-gen
0157    If: end: 'block-if'
0157  <-Source: end: 'block-if'
0157 <--Function: end: 'block-if'
0157<---Source: end: 'block-if'
0157   If: end-gen
0157   InstructionFlow: begin-gen
0157    Value: begin-gen
0157     Constant: begin-gen
0157      Constant: ctype: 'Number' -> '0'
0157      Constant: expr: '0'
0157    <-Value: expr: '0'
0157     Constant: end-gen
0157    Value: end-gen
0157    InstructionFlow: line: 'return 0'
0157  <-Source: line: 'return 0'
0157 <--Function: line: 'return 0'
0157<---Source: line: 'return 0'
0159   InstructionFlow: end-gen
0159  Source: end-gen
0159  Function: end: 'block-def-compararVersiones'
0159<-Source: end: 'block-def-compararVersiones'
0160 Function: end-gen
0160 Function: begin-gen
0160  Variable: begin-gen
0160   Variable: expr: 'dependencias'
0160  Variable: end-gen
0160  Function: line: 'def evaluarDependencias(dependencias = None):'
0160<-Source: line: 'def evaluarDependencias(dependencias = None):'
0161  Function: begin: 'block-def-evaluarDependencias'
0161<-Source: begin: 'block-def-evaluarDependencias'
0161  Source: begin-gen
0161   DeclarationBlock: begin-gen
0161    Variable: begin-gen
0161     Variable: expr: 'res'
0161     Variable: expr: '='
0161     Variable: expr: 'None'
0161    Variable: end-gen
0161    DeclarationBlock: line: 'res = None'
0161  <-Source: line: 'res = None'
0161 <--Function: line: 'res = None'
0161<---Source: line: 'res = None'
0162   DeclarationBlock: end-gen
0162   If: begin-gen
0162    Value: begin-gen
0162     OpUnary: begin-gen
0162      OpUnary: expr: 'not'
0162    <-Value: expr: 'not'
0162      Identifier: begin-gen
0162       Identifier: expr: 'dependencias'
0162     <-OpUnary: expr: 'dependencias'
0162    <--Value: expr: 'dependencias'
0162      Identifier: end-gen
0162     OpUnary: end-gen
0162    Value: end-gen
0162    If: line: 'if not dependencias:'
0162  <-Source: line: 'if not dependencias:'
0162 <--Function: line: 'if not dependencias:'
0162<---Source: line: 'if not dependencias:'
0163    If: begin: 'block-if'
0163  <-Source: begin: 'block-if'
0163 <--Function: begin: 'block-if'
0163<---Source: begin: 'block-if'
0163    Source: begin-gen
0163     InstructionFlow: begin-gen
0163      Value: begin-gen
0163       Identifier: begin-gen
0163        Identifier: expr: 'True'
0163      <-Value: expr: 'True'
0163       Identifier: end-gen
0163      Value: end-gen
0163      InstructionFlow: line: 'return True'
0163    <-Source: line: 'return True'
0163   <--If: line: 'return True'
0163  <---Source: line: 'return True'
0163 <----Function: line: 'return True'
0163<-----Source: line: 'return True'
0164     InstructionFlow: end-gen
0164    Source: end-gen
0164    If: end: 'block-if'
0164  <-Source: end: 'block-if'
0164 <--Function: end: 'block-if'
0164<---Source: end: 'block-if'
0164   If: end-gen
0164   For: begin-gen
0164    Variable: begin-gen
0164     Variable: expr: 'i'
0164     Variable: expr: '='
0164     Value: begin-gen
0164      Constant: begin-gen
0164       Constant: ctype: 'Number' -> '0'
0164       Constant: expr: '0'
0164     <-Value: expr: '0'
0164    <--Variable: expr: '0'
0164      Constant: end-gen
0164     Value: end-gen
0164    Variable: end-gen
0164    For: line: 'i = 0'
0164  <-Source: line: 'i = 0'
0164 <--Function: line: 'i = 0'
0164<---Source: line: 'i = 0'
0165    InlineUpdate: begin-gen
0165     Identifier: begin-gen
0165      Identifier: expr: 'i'
0165     Identifier: end-gen
0165     InlineUpdate: expr: 'i'
0165     InlineUpdate: line+1: 'i += 1'
0165    InlineUpdate: end-gen
0165    Expression: begin-gen
0165     Identifier: begin-gen
0165      Identifier: expr: 'i'
0165    <-Expression: expr: 'i'
0165     Identifier: end-gen
0165     Compare: begin-gen
0165      Compare: expr: '<'
0165    <-Expression: expr: '<'
0165     Compare: end-gen
0165     Member: begin-gen
0165      Identifier: begin-gen
0165       Identifier: expr: 'dependencias'
0165      Identifier: end-gen
0165      Identifier: begin-gen
0165       Identifier: expr: 'length'
0165      Identifier: end-gen
0165      Member: expr: 'qsa(dependencias).length'
0165    <-Expression: expr: 'qsa(dependencias).length'
0165     Member: end-gen
0165    Expression: end-gen
0165    For: line: 'while i < qsa(dependencias).length:'
0165  <-Source: line: 'while i < qsa(dependencias).length:'
0165 <--Function: line: 'while i < qsa(dependencias).length:'
0165<---Source: line: 'while i < qsa(dependencias).length:'
0166    For: begin: 'block-for'
0166  <-Source: begin: 'block-for'
0166 <--Function: begin: 'block-for'
0166<---Source: begin: 'block-for'
0166    Source: begin-gen
0166     If: begin-gen
0166      Value: begin-gen
0166       Member: begin-gen
0166        ArrayMember: begin-gen
0166         Identifier: begin-gen
0166          Identifier: expr: 'dependencias'
0166         Identifier: end-gen
0166         Value: begin-gen
0166          Identifier: begin-gen
0166           Identifier: expr: 'i'
0166         <-Value: expr: 'i'
0166          Identifier: end-gen
0166         Value: end-gen
0166         ArrayMember: expr: 'dependencias[i]'
0166        ArrayMember: end-gen
0166        FunctionCall: begin-gen
0166         FunctionCall: expr: 'isEmpty()'
0166        FunctionCall: end-gen
0166        Member: expr: 'dependencias[i].isEmpty()'
0166      <-Value: expr: 'dependencias[i].isEmpty()'
0166       Member: end-gen
0166      Value: end-gen
0166      If: line: 'if dependencias[i].isEmpty():'
0166    <-Source: line: 'if dependencias[i].isEmpty():'
0166   <--For: line: 'if dependencias[i].isEmpty():'
0166  <---Source: line: 'if dependencias[i].isEmpty():'
0166 <----Function: line: 'if dependencias[i].isEmpty():'
0166<-----Source: line: 'if dependencias[i].isEmpty():'
0167      If: begin: 'block-if'
0167    <-Source: begin: 'block-if'
0167   <--For: begin: 'block-if'
0167  <---Source: begin: 'block-if'
0167 <----Function: begin: 'block-if'
0167<-----Source: begin: 'block-if'
0167      Source: begin-gen
0167       InstructionFlow: begin-gen
0167        InstructionFlow: line: 'continue '
0167      <-Source: line: 'continue '
0167     <--If: line: 'continue '
0167    <---Source: line: 'continue '
0167   <----For: line: 'continue '
0167  <-----Source: line: 'continue '
0167 <------Function: line: 'continue '
0167<-------Source: line: 'continue '
0168       InstructionFlow: end-gen
0168      Source: end-gen
0168      If: end: 'block-if'
0168    <-Source: end: 'block-if'
0168   <--For: end: 'block-if'
0168  <---Source: end: 'block-if'
0168 <----Function: end: 'block-if'
0168<-----Source: end: 'block-if'
0168     If: end-gen
0168     If: begin-gen
0168      Expression: begin-gen
0168       Member: begin-gen
0168        Identifier: begin-gen
0168         Identifier: expr: 'sys'
0168        Identifier: end-gen
0168        FunctionCall: begin-gen
0168         Value: begin-gen
0168          ArrayMember: begin-gen
0168           Identifier: begin-gen
0168            Identifier: expr: 'dependencias'
0168           Identifier: end-gen
0168           Value: begin-gen
0168            Identifier: begin-gen
0168             Identifier: expr: 'i'
0168           <-Value: expr: 'i'
0168            Identifier: end-gen
0168           Value: end-gen
0168           ArrayMember: expr: 'dependencias[i]'
0168         <-Value: expr: 'dependencias[i]'
0168          ArrayMember: end-gen
0168         Value: end-gen
0168         FunctionCall: expr: 'isLoadedModule(dependencias[i])'
0168        FunctionCall: end-gen
0168        Member: expr: 'sys.isLoadedModule(dependencias[i])'
0168      <-Expression: expr: 'sys.isLoadedModule(dependencias[i])'
0168       Member: end-gen
0168       Compare: begin-gen
0168        Compare: expr: '=='
0168      <-Expression: expr: '=='
0168       Compare: end-gen
0168       Identifier: begin-gen
0168        Identifier: expr: 'False'
0168      <-Expression: expr: 'False'
0168       Identifier: end-gen
0168      Expression: end-gen
0168      If: line: 'if sys.isLoadedModule(dependencias[i]) == False:'
0168    <-Source: line: 'if sys.isLoadedModule(dependencias[i]) == False:'
0168   <--For: line: 'if sys.isLoadedModule(dependencias[i]) == False:'
0168  <---Source: line: 'if sys.isLoadedModule(dependencias[i]) == False:'
0168 <----Function: line: 'if sys.isLoadedModule(dependencias[i]) == False:'
0168<-----Source: line: 'if sys.isLoadedModule(dependencias[i]) == False:'
0169      If: begin: 'block-if'
0169    <-Source: begin: 'block-if'
0169   <--For: begin: 'block-if'
0169  <---Source: begin: 'block-if'
0169 <----Function: begin: 'block-if'
0169<-----Source: begin: 'block-if'
0169      Source: begin-gen
0169       InstructionUpdate: begin-gen
0169        Identifier: begin-gen
0169         Identifier: expr: 'res'
0169        Identifier: end-gen
0169        OpUpdate: begin-gen
0169         OpUpdate: expr: '='
0169        OpUpdate: end-gen
0169        Value: begin-gen
0169         Member: begin-gen
0169          Identifier: begin-gen
0169           Identifier: expr: 'MessageBox'
0169          Identifier: end-gen
0169          FunctionCall: begin-gen
0169           Expression: begin-gen
0169            Member: begin-gen
0169             Identifier: begin-gen
0169              Identifier: expr: 'util'
0169             Identifier: end-gen
0169             FunctionCall: begin-gen
0169              Value: begin-gen
0169               Constant: begin-gen
0169                Constant: ctype: 'String' -> 'scripts'
0169                Constant: expr: 'u"scripts"'
0169              <-Value: expr: 'u"scripts"'
0169               Constant: end-gen
0169              Value: end-gen
0169              Value: begin-gen
0169               Constant: begin-gen
0169                Constant: ctype: 'String' -> 'Este módulo depende del módulo '
0169                Constant: expr: 'u"Este módulo depende del módulo "'
0169              <-Value: expr: 'u"Este módulo depende del módulo "'
0169               Constant: end-gen
0169              Value: end-gen
0169              FunctionCall: expr: 'translate(u"scripts", u"Este módulo depende del módulo ")'
0169             FunctionCall: end-gen
0169             Member: expr: 'util.translate(u"scripts", u"Este módulo depende del módulo ")'
0169           <-Expression: expr: 'util.translate(u"scripts", u"Este módulo depende del módulo ")'
0169            Member: end-gen
0169            OpMath: begin-gen
0169             OpMath: expr: '+'
0169           <-Expression: expr: '+'
0169            OpMath: end-gen
0169            ArrayMember: begin-gen
0169             Identifier: begin-gen
0169              Identifier: expr: 'dependencias'
0169             Identifier: end-gen
0169             Value: begin-gen
0169              Identifier: begin-gen
0169               Identifier: expr: 'i'
0169             <-Value: expr: 'i'
0169              Identifier: end-gen
0169             Value: end-gen
0169             ArrayMember: expr: 'dependencias[i]'
0169           <-Expression: expr: 'dependencias[i]'
0169            ArrayMember: end-gen
0169            OpMath: begin-gen
0169             OpMath: expr: '+'
0169           <-Expression: expr: '+'
0169            OpMath: end-gen
0169            Member: begin-gen
0169             Identifier: begin-gen
0169              Identifier: expr: 'util'
0169             Identifier: end-gen
0169             FunctionCall: begin-gen
0169              Value: begin-gen
0169               Constant: begin-gen
0169                Constant: ctype: 'String' -> 'scripts'
0169                Constant: expr: 'u"scripts"'
0169              <-Value: expr: 'u"scripts"'
0169               Constant: end-gen
0169              Value: end-gen
0169              Value: begin-gen
0169               Constant: begin-gen
0169                Constant: ctype: 'String' -> ', que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?'
0169                Constant: expr: 'u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"'
0169              <-Value: expr: 'u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"'
0169               Constant: end-gen
0169              Value: end-gen
0169              FunctionCall: expr: 'translate(u"scripts", u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?")'
0169             FunctionCall: end-gen
0169             Member: expr: 'util.translate(u"scripts", u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?")'
0169           <-Expression: expr: 'util.translate(u"scripts", u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?")'
0169            Member: end-gen
0169           Expression: end-gen
0169           Value: begin-gen
0169            Member: begin-gen
0169             Identifier: begin-gen
0169              Identifier: expr: 'MessageBox'
0169             Identifier: end-gen
0169             Identifier: begin-gen
0169              Identifier: expr: 'Yes'
0169             Identifier: end-gen
0169             Member: expr: 'MessageBox.Yes'
0169           <-Value: expr: 'MessageBox.Yes'
0169            Member: end-gen
0169           Value: end-gen
0169           Value: begin-gen
0169            Member: begin-gen
0169             Identifier: begin-gen
0169              Identifier: expr: 'MessageBox'
0169             Identifier: end-gen
0169             Identifier: begin-gen
0169              Identifier: expr: 'No'
0169             Identifier: end-gen
0169             Member: expr: 'MessageBox.No'
0169           <-Value: expr: 'MessageBox.No'
0169            Member: end-gen
0169           Value: end-gen
0169           FunctionCall: expr: 'warning(util.translate(u"scripts", u"Este módulo depende del módulo ") + dependencias[i] + util.translate(u"scripts", u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0169          FunctionCall: end-gen
0169          Member: expr: 'MessageBox.warning(util.translate(u"scripts", u"Este módulo depende del módulo ") + dependencias[i] + util.translate(u"scripts", u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0169        <-Value: expr: 'MessageBox.warning(util.translate(u"scripts", u"Este módulo depende del módulo ") + dependencias[i] + util.translate(u"scripts", u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0169         Member: end-gen
0169        Value: end-gen
0169        InstructionUpdate: line: 'res = MessageBox.warning(util.translate(u"scripts", u"Este módulo depende del módulo ") + dependencias[i] + util.translate(u"scripts", u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0169      <-Source: line: 'res = MessageBox.warning(util.translate(u"scripts", u"Este módulo depende del módulo ") + dependencias[i] + util.translate(u"scripts", u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0169     <--If: line: 'res = MessageBox.warning(util.translate(u"scripts", u"Este módulo depende del módulo ") + dependencias[i] + util.translate(u"scripts", u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0169    <---Source: line: 'res = MessageBox.warning(util.translate(u"scripts", u"Este módulo depende del módulo ") + dependencias[i] + util.translate(u"scripts", u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0169   <----For: line: 'res = MessageBox.warning(util.translate(u"scripts", u"Este módulo depende del módulo ") + dependencias[i] + util.translate(u"scripts", u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0169  <-----Source: line: 'res = MessageBox.warning(util.translate(u"scripts", u"Este módulo depende del módulo ") + dependencias[i] + util.translate(u"scripts", u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0169 <------Function: line: 'res = MessageBox.warning(util.translate(u"scripts", u"Este módulo depende del módulo ") + dependencias[i] + util.translate(u"scripts", u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0169<-------Source: line: 'res = MessageBox.warning(util.translate(u"scripts", u"Este módulo depende del módulo ") + dependencias[i] + util.translate(u"scripts", u", que no está instalado.\\nFacturaLUX puede fallar por esta causa.\\n¿Desea continuar la carga?"), MessageBox.Yes, MessageBox.No)'
0170       InstructionUpdate: end-gen
0170       If: begin-gen
0170        Expression: begin-gen
0170         Identifier: begin-gen
0170          Identifier: expr: 'res'
0170        <-Expression: expr: 'res'
0170         Identifier: end-gen
0170         Compare: begin-gen
0170          Compare: expr: '=='
0170        <-Expression: expr: '=='
0170         Compare: end-gen
0170         Member: begin-gen
0170          Identifier: begin-gen
0170           Identifier: expr: 'MessageBox'
0170          Identifier: end-gen
0170          Identifier: begin-gen
0170           Identifier: expr: 'No'
0170          Identifier: end-gen
0170          Member: expr: 'MessageBox.No'
0170        <-Expression: expr: 'MessageBox.No'
0170         Member: end-gen
0170        Expression: end-gen
0170        If: line: 'if res == MessageBox.No:'
0170      <-Source: line: 'if res == MessageBox.No:'
0170     <--If: line: 'if res == MessageBox.No:'
0170    <---Source: line: 'if res == MessageBox.No:'
0170   <----For: line: 'if res == MessageBox.No:'
0170  <-----Source: line: 'if res == MessageBox.No:'
0170 <------Function: line: 'if res == MessageBox.No:'
0170<-------Source: line: 'if res == MessageBox.No:'
0171        If: begin: 'block-if'
0171      <-Source: begin: 'block-if'
0171     <--If: begin: 'block-if'
0171    <---Source: begin: 'block-if'
0171   <----For: begin: 'block-if'
0171  <-----Source: begin: 'block-if'
0171 <------Function: begin: 'block-if'
0171<-------Source: begin: 'block-if'
0171        Source: begin-gen
0171         InstructionFlow: begin-gen
0171          Value: begin-gen
0171           Identifier: begin-gen
0171            Identifier: expr: 'False'
0171          <-Value: expr: 'False'
0171           Identifier: end-gen
0171          Value: end-gen
0171          InstructionFlow: line: 'return False'
0171        <-Source: line: 'return False'
0171       <--If: line: 'return False'
0171      <---Source: line: 'return False'
0171     <----If: line: 'return False'
0171    <-----Source: line: 'return False'
0171   <------For: line: 'return False'
0171  <-------Source: line: 'return False'
0171 <--------Function: line: 'return False'
0171<---------Source: line: 'return False'
0172         InstructionFlow: end-gen
0172        Source: end-gen
0172        If: end: 'block-if'
0172      <-Source: end: 'block-if'
0172     <--If: end: 'block-if'
0172    <---Source: end: 'block-if'
0172   <----For: end: 'block-if'
0172  <-----Source: end: 'block-if'
0172 <------Function: end: 'block-if'
0172<-------Source: end: 'block-if'
0172       If: end-gen
0172      Source: end-gen
0172      If: end: 'block-if'
0172    <-Source: end: 'block-if'
0172   <--For: end: 'block-if'
0172  <---Source: end: 'block-if'
0172 <----Function: end: 'block-if'
0172<-----Source: end: 'block-if'
0172     If: end-gen
0172    Source: end-gen
0172    For: line: 'i += 1'
0172  <-Source: line: 'i += 1'
0172 <--Function: line: 'i += 1'
0172<---Source: line: 'i += 1'
0173    For: end: 'block-for'
0173  <-Source: end: 'block-for'
0173 <--Function: end: 'block-for'
0173<---Source: end: 'block-for'
0173   For: end-gen
0173   InstructionFlow: begin-gen
0173    Value: begin-gen
0173     Identifier: begin-gen
0173      Identifier: expr: 'True'
0173    <-Value: expr: 'True'
0173     Identifier: end-gen
0173    Value: end-gen
0173    InstructionFlow: line: 'return True'
0173  <-Source: line: 'return True'
0173 <--Function: line: 'return True'
0173<---Source: line: 'return True'
0175   InstructionFlow: end-gen
0175  Source: end-gen
0175  Function: end: 'block-def-evaluarDependencias'
0175<-Source: end: 'block-def-evaluarDependencias'
0176 Function: end-gen
0176 Function: begin-gen
0176  Variable: begin-gen
0176   Variable: expr: 'cadena'
0176  Variable: end-gen
0176  Variable: begin-gen
0176   Variable: expr: 'path'
0176  Variable: end-gen
0176  Variable: begin-gen
0176   Variable: expr: 'modulo'
0176  Variable: end-gen
0176  Function: line: 'def traducirCadena(cadena = None, path = None, modulo = None):'
0176<-Source: line: 'def traducirCadena(cadena = None, path = None, modulo = None):'
0177  Function: begin: 'block-def-traducirCadena'
0177<-Source: begin: 'block-def-traducirCadena'
0177  Source: begin-gen
0177   If: begin-gen
0177    Expression: begin-gen
0177     Member: begin-gen
0177      Identifier: begin-gen
0177       Identifier: expr: 'cadena'
0177      Identifier: end-gen
0177      FunctionCall: begin-gen
0177       Value: begin-gen
0177        Constant: begin-gen
0177         Constant: ctype: 'String' -> 'QT_TRANSLATE_NOOP'
0177         Constant: expr: 'u"QT_TRANSLATE_NOOP"'
0177       <-Value: expr: 'u"QT_TRANSLATE_NOOP"'
0177        Constant: end-gen
0177       Value: end-gen
0177       FunctionCall: expr: 'find(u"QT_TRANSLATE_NOOP")'
0177      FunctionCall: end-gen
0177      Member: expr: 'cadena.find(u"QT_TRANSLATE_NOOP")'
0177    <-Expression: expr: 'cadena.find(u"QT_TRANSLATE_NOOP")'
0177     Member: end-gen
0177     Compare: begin-gen
0177      Compare: expr: '=='
0177    <-Expression: expr: '=='
0177     Compare: end-gen
0177     OpUnary: begin-gen
0177      OpUnary: expr: '-'
0177    <-Expression: expr: '-'
0177      Constant: begin-gen
0177       Constant: ctype: 'Number' -> '1'
0177       Constant: expr: '1'
0177     <-OpUnary: expr: '1'
0177    <--Expression: expr: '1'
0177      Constant: end-gen
0177     OpUnary: end-gen
0177    Expression: end-gen
0177    If: line: 'if cadena.find(u"QT_TRANSLATE_NOOP") == - 1:'
0177  <-Source: line: 'if cadena.find(u"QT_TRANSLATE_NOOP") == - 1:'
0177 <--Function: line: 'if cadena.find(u"QT_TRANSLATE_NOOP") == - 1:'
0177<---Source: line: 'if cadena.find(u"QT_TRANSLATE_NOOP") == - 1:'
0178    If: begin: 'block-if'
0178  <-Source: begin: 'block-if'
0178 <--Function: begin: 'block-if'
0178<---Source: begin: 'block-if'
0178    Source: begin-gen
0178     InstructionFlow: begin-gen
0178      Value: begin-gen
0178       Identifier: begin-gen
0178        Identifier: expr: 'cadena'
0178      <-Value: expr: 'cadena'
0178       Identifier: end-gen
0178      Value: end-gen
0178      InstructionFlow: line: 'return cadena'
0178    <-Source: line: 'return cadena'
0178   <--If: line: 'return cadena'
0178  <---Source: line: 'return cadena'
0178 <----Function: line: 'return cadena'
0178<-----Source: line: 'return cadena'
0179     InstructionFlow: end-gen
0179    Source: end-gen
0179    If: end: 'block-if'
0179  <-Source: end: 'block-if'
0179 <--Function: end: 'block-if'
0179<---Source: end: 'block-if'
0179   If: end-gen
0179   InstructionUpdate: begin-gen
0179    Identifier: begin-gen
0179     Identifier: expr: 'cadena'
0179    Identifier: end-gen
0179    OpUpdate: begin-gen
0179     OpUpdate: expr: '='
0179    OpUpdate: end-gen
0179    Value: begin-gen
0179     Member: begin-gen
0179      Identifier: begin-gen
0179       Identifier: expr: 'cadena'
0179      Identifier: end-gen
0179      FunctionCall: begin-gen
0179       Value: begin-gen
0179        Constant: begin-gen
0179         Constant: ctype: 'Number' -> '41'
0179         Constant: expr: '41'
0179       <-Value: expr: '41'
0179        Constant: end-gen
0179       Value: end-gen
0179       Expression: begin-gen
0179        Member: begin-gen
0179         Identifier: begin-gen
0179          Identifier: expr: 'cadena'
0179         Identifier: end-gen
0179         Identifier: begin-gen
0179          Identifier: expr: 'length'
0179         Identifier: end-gen
0179         Member: expr: 'qsa(cadena).length'
0179       <-Expression: expr: 'qsa(cadena).length'
0179        Member: end-gen
0179        OpMath: begin-gen
0179         OpMath: expr: '-'
0179       <-Expression: expr: '-'
0179        OpMath: end-gen
0179        Constant: begin-gen
0179         Constant: ctype: 'Number' -> '43'
0179         Constant: expr: '43'
0179       <-Expression: expr: '43'
0179        Constant: end-gen
0179       Expression: end-gen
0179       FunctionCall: expr: 'mid(41, qsa(cadena).length - 43)'
0179      FunctionCall: end-gen
0179      Member: expr: 'cadena.mid(41, qsa(cadena).length - 43)'
0179    <-Value: expr: 'cadena.mid(41, qsa(cadena).length - 43)'
0179     Member: end-gen
0179    Value: end-gen
0179    InstructionUpdate: line: 'cadena = cadena.mid(41, qsa(cadena).length - 43)'
0179  <-Source: line: 'cadena = cadena.mid(41, qsa(cadena).length - 43)'
0179 <--Function: line: 'cadena = cadena.mid(41, qsa(cadena).length - 43)'
0179<---Source: line: 'cadena = cadena.mid(41, qsa(cadena).length - 43)'
0180   InstructionUpdate: end-gen
0180   DeclarationBlock: begin-gen
0180    Variable: begin-gen
0180     Variable: expr: 'nombreFichero'
0180     Variable: expr: '='
0180     Variable: expr: 'None'
0180    Variable: end-gen
0180    DeclarationBlock: line: 'nombreFichero = None'
0180  <-Source: line: 'nombreFichero = None'
0180 <--Function: line: 'nombreFichero = None'
0180<---Source: line: 'nombreFichero = None'
0181   DeclarationBlock: end-gen
0181   TryCatch: begin-gen
0181    TryCatch: line: 'try:'
0181  <-Source: line: 'try:'
0181 <--Function: line: 'try:'
0181<---Source: line: 'try:'
0182    TryCatch: begin: 'block-try'
0182  <-Source: begin: 'block-try'
0182 <--Function: begin: 'block-try'
0182<---Source: begin: 'block-try'
0182    Source: begin-gen
0182     InstructionUpdate: begin-gen
0182      Identifier: begin-gen
0182       Identifier: expr: 'nombreFichero'
0182      Identifier: end-gen
0182      OpUpdate: begin-gen
0182       OpUpdate: expr: '='
0182      OpUpdate: end-gen
0182      Expression: begin-gen
0182       Expression: expr: 'ustr('
0182       Identifier: begin-gen
0182        Identifier: expr: 'path'
0182      <-Expression: expr: 'path'
0182       Identifier: end-gen
0182       Expression: expr: ','
0182       Constant: begin-gen
0182        Constant: ctype: 'String' -> '/translations/'
0182        Constant: expr: 'u"/translations/"'
0182      <-Expression: expr: 'u"/translations/"'
0182       Constant: end-gen
0182       Expression: expr: ','
0182       Identifier: begin-gen
0182        Identifier: expr: 'modulo'
0182      <-Expression: expr: 'modulo'
0182       Identifier: end-gen
0182       Expression: expr: ','
0182       Constant: begin-gen
0182        Constant: ctype: 'String' -> '.'
0182        Constant: expr: 'u"."'
0182      <-Expression: expr: 'u"."'
0182       Constant: end-gen
0182       Expression: expr: ','
0182       Member: begin-gen
0182        Identifier: begin-gen
0182         Identifier: expr: 'util'
0182        Identifier: end-gen
0182        FunctionCall: begin-gen
0182         FunctionCall: expr: 'getIdioma()'
0182        FunctionCall: end-gen
0182        Member: expr: 'util.getIdioma()'
0182      <-Expression: expr: 'util.getIdioma()'
0182       Member: end-gen
0182       Expression: expr: ','
0182       Constant: begin-gen
0182        Constant: ctype: 'String' -> '.ts'
0182        Constant: expr: 'u".ts"'
0182      <-Expression: expr: 'u".ts"'
0182       Constant: end-gen
0182       Expression: expr: ')'
0182      Expression: end-gen
0182      InstructionUpdate: line: 'nombreFichero = ustr( path , u"/translations/" , modulo , u"." , util.getIdioma() , u".ts" )'
0182    <-Source: line: 'nombreFichero = ustr( path , u"/translations/" , modulo , u"." , util.getIdioma() , u".ts" )'
0182   <--TryCatch: line: 'nombreFichero = ustr( path , u"/translations/" , modulo , u"." , util.getIdioma() , u".ts" )'
0182  <---Source: line: 'nombreFichero = ustr( path , u"/translations/" , modulo , u"." , util.getIdioma() , u".ts" )'
0182 <----Function: line: 'nombreFichero = ustr( path , u"/translations/" , modulo , u"." , util.getIdioma() , u".ts" )'
0182<-----Source: line: 'nombreFichero = ustr( path , u"/translations/" , modulo , u"." , util.getIdioma() , u".ts" )'
0183     InstructionUpdate: end-gen
0183    Source: end-gen
0183    TryCatch: end: 'block-try'
0183  <-Source: end: 'block-try'
0183 <--Function: end: 'block-try'
0183<---Source: end: 'block-try'
0183    Identifier: begin-gen
0183     Identifier: expr: 'e'
0183    Identifier: end-gen
0183    TryCatch: line: 'except Exception as e:'
0183  <-Source: line: 'except Exception as e:'
0183 <--Function: line: 'except Exception as e:'
0183<---Source: line: 'except Exception as e:'
0184    TryCatch: begin: 'block-except'
0184  <-Source: begin: 'block-except'
0184 <--Function: begin: 'block-except'
0184<---Source: begin: 'block-except'
0184    TryCatch: line: 'e = traceback.format_exc()'
0184  <-Source: line: 'e = traceback.format_exc()'
0184 <--Function: line: 'e = traceback.format_exc()'
0184<---Source: line: 'e = traceback.format_exc()'
0185    Source: begin-gen
0185     InstructionFlow: begin-gen
0185      Value: begin-gen
0185       Identifier: begin-gen
0185        Identifier: expr: 'cadena'
0185      <-Value: expr: 'cadena'
0185       Identifier: end-gen
0185      Value: end-gen
0185      InstructionFlow: line: 'return cadena'
0185    <-Source: line: 'return cadena'
0185   <--TryCatch: line: 'return cadena'
0185  <---Source: line: 'return cadena'
0185 <----Function: line: 'return cadena'
0185<-----Source: line: 'return cadena'
0186     InstructionFlow: end-gen
0186    Source: end-gen
0186    TryCatch: end: 'block-except'
0186  <-Source: end: 'block-except'
0186 <--Function: end: 'block-except'
0186<---Source: end: 'block-except'
0187   TryCatch: end-gen
0187   If: begin-gen
0187    Value: begin-gen
0187     OpUnary: begin-gen
0187      OpUnary: expr: 'not'
0187    <-Value: expr: 'not'
0187      Member: begin-gen
0187       Identifier: begin-gen
0187        Identifier: expr: 'File'
0187       Identifier: end-gen
0187       FunctionCall: begin-gen
0187        Value: begin-gen
0187         Identifier: begin-gen
0187          Identifier: expr: 'nombreFichero'
0187        <-Value: expr: 'nombreFichero'
0187         Identifier: end-gen
0187        Value: end-gen
0187        FunctionCall: expr: 'exists(nombreFichero)'
0187       FunctionCall: end-gen
0187       Member: expr: 'File.exists(nombreFichero)'
0187     <-OpUnary: expr: 'File.exists(nombreFichero)'
0187    <--Value: expr: 'File.exists(nombreFichero)'
0187      Member: end-gen
0187     OpUnary: end-gen
0187    Value: end-gen
0187    If: line: 'if not File.exists(nombreFichero):'
0187  <-Source: line: 'if not File.exists(nombreFichero):'
0187 <--Function: line: 'if not File.exists(nombreFichero):'
0187<---Source: line: 'if not File.exists(nombreFichero):'
0188    If: begin: 'block-if'
0188  <-Source: begin: 'block-if'
0188 <--Function: begin: 'block-if'
0188<---Source: begin: 'block-if'
0188    Source: begin-gen
0188     InstructionFlow: begin-gen
0188      Value: begin-gen
0188       Identifier: begin-gen
0188        Identifier: expr: 'cadena'
0188      <-Value: expr: 'cadena'
0188       Identifier: end-gen
0188      Value: end-gen
0188      InstructionFlow: line: 'return cadena'
0188    <-Source: line: 'return cadena'
0188   <--If: line: 'return cadena'
0188  <---Source: line: 'return cadena'
0188 <----Function: line: 'return cadena'
0188<-----Source: line: 'return cadena'
0189     InstructionFlow: end-gen
0189    Source: end-gen
0189    If: end: 'block-if'
0189  <-Source: end: 'block-if'
0189 <--Function: end: 'block-if'
0189<---Source: end: 'block-if'
0189   If: end-gen
0189   DeclarationBlock: begin-gen
0189    Variable: begin-gen
0189     Variable: expr: 'fichero'
0189     Variable: expr: '='
0189     Value: begin-gen
0189      New: begin-gen
0189       FunctionCall: begin-gen
0189        Value: begin-gen
0189         Identifier: begin-gen
0189          Identifier: expr: 'nombreFichero'
0189        <-Value: expr: 'nombreFichero'
0189         Identifier: end-gen
0189        Value: end-gen
0189        FunctionCall: expr: 'File(nombreFichero)'
0189      <-New: expr: 'qsatype.File(nombreFichero)'
0189     <--Value: expr: 'qsatype.File(nombreFichero)'
0189    <---Variable: expr: 'qsatype.File(nombreFichero)'
0189       FunctionCall: end-gen
0189      New: end-gen
0189     Value: end-gen
0189    Variable: end-gen
0189    DeclarationBlock: line: 'fichero = qsatype.File(nombreFichero)'
0189  <-Source: line: 'fichero = qsatype.File(nombreFichero)'
0189 <--Function: line: 'fichero = qsatype.File(nombreFichero)'
0189<---Source: line: 'fichero = qsatype.File(nombreFichero)'
0190   DeclarationBlock: end-gen
0190   InstructionCall: begin-gen
0190    Member: begin-gen
0190     Identifier: begin-gen
0190      Identifier: expr: 'fichero'
0190     Identifier: end-gen
0190     FunctionCall: begin-gen
0190      Value: begin-gen
0190       Member: begin-gen
0190        Identifier: begin-gen
0190         Identifier: expr: 'File'
0190        Identifier: end-gen
0190        Identifier: begin-gen
0190         Identifier: expr: 'ReadOnly'
0190        Identifier: end-gen
0190        Member: expr: 'File.ReadOnly'
0190      <-Value: expr: 'File.ReadOnly'
0190       Member: end-gen
0190      Value: end-gen
0190      FunctionCall: expr: 'open(File.ReadOnly)'
0190     FunctionCall: end-gen
0190     Member: expr: 'fichero.open(File.ReadOnly)'
0190    Member: end-gen
0190    InstructionCall: line: 'fichero.open(File.ReadOnly)'
0190  <-Source: line: 'fichero.open(File.ReadOnly)'
0190 <--Function: line: 'fichero.open(File.ReadOnly)'
0190<---Source: line: 'fichero.open(File.ReadOnly)'
0191   InstructionCall: end-gen
0191   DeclarationBlock: begin-gen
0191    Variable: begin-gen
0191     Variable: expr: 'f'
0191     Variable: expr: '='
0191     Value: begin-gen
0191      Member: begin-gen
0191       Identifier: begin-gen
0191        Identifier: expr: 'fichero'
0191       Identifier: end-gen
0191       FunctionCall: begin-gen
0191        FunctionCall: expr: 'read()'
0191       FunctionCall: end-gen
0191       Member: expr: 'fichero.read()'
0191     <-Value: expr: 'fichero.read()'
0191    <--Variable: expr: 'fichero.read()'
0191      Member: end-gen
0191     Value: end-gen
0191    Variable: end-gen
0191    DeclarationBlock: line: 'f = fichero.read()'
0191  <-Source: line: 'f = fichero.read()'
0191 <--Function: line: 'f = fichero.read()'
0191<---Source: line: 'f = fichero.read()'
0192   DeclarationBlock: end-gen
0192   DeclarationBlock: begin-gen
0192    Variable: begin-gen
0192     Variable: expr: 'xmlTranslations'
0192     Variable: expr: '='
0192     Value: begin-gen
0192      New: begin-gen
0192       FunctionCall: begin-gen
0192        FunctionCall: expr: 'FLDomDocument()'
0192      <-New: expr: 'qsatype.FLDomDocument()'
0192     <--Value: expr: 'qsatype.FLDomDocument()'
0192    <---Variable: expr: 'qsatype.FLDomDocument()'
0192       FunctionCall: end-gen
0192      New: end-gen
0192     Value: end-gen
0192    Variable: end-gen
0192    DeclarationBlock: line: 'xmlTranslations = qsatype.FLDomDocument()'
0192  <-Source: line: 'xmlTranslations = qsatype.FLDomDocument()'
0192 <--Function: line: 'xmlTranslations = qsatype.FLDomDocument()'
0192<---Source: line: 'xmlTranslations = qsatype.FLDomDocument()'
0193   DeclarationBlock: end-gen
0193   If: begin-gen
0193    Value: begin-gen
0193     Member: begin-gen
0193      Identifier: begin-gen
0193       Identifier: expr: 'xmlTranslations'
0193      Identifier: end-gen
0193      FunctionCall: begin-gen
0193       Value: begin-gen
0193        Identifier: begin-gen
0193         Identifier: expr: 'f'
0193       <-Value: expr: 'f'
0193        Identifier: end-gen
0193       Value: end-gen
0193       FunctionCall: expr: 'setContent(f)'
0193      FunctionCall: end-gen
0193      Member: expr: 'xmlTranslations.setContent(f)'
0193    <-Value: expr: 'xmlTranslations.setContent(f)'
0193     Member: end-gen
0193    Value: end-gen
0193    If: line: 'if xmlTranslations.setContent(f):'
0193  <-Source: line: 'if xmlTranslations.setContent(f):'
0193 <--Function: line: 'if xmlTranslations.setContent(f):'
0193<---Source: line: 'if xmlTranslations.setContent(f):'
0194    If: begin: 'block-if'
0194  <-Source: begin: 'block-if'
0194 <--Function: begin: 'block-if'
0194<---Source: begin: 'block-if'
0194    Source: begin-gen
0194     DeclarationBlock: begin-gen
0194      Variable: begin-gen
0194       Variable: expr: 'nodeMess'
0194       Variable: expr: '='
0194       Value: begin-gen
0194        Member: begin-gen
0194         Identifier: begin-gen
0194          Identifier: expr: 'xmlTranslations'
0194         Identifier: end-gen
0194         FunctionCall: begin-gen
0194          Value: begin-gen
0194           Constant: begin-gen
0194            Constant: ctype: 'String' -> 'message'
0194            Constant: expr: 'u"message"'
0194          <-Value: expr: 'u"message"'
0194           Constant: end-gen
0194          Value: end-gen
0194          FunctionCall: expr: 'elementsByTagName(u"message")'
0194         FunctionCall: end-gen
0194         Member: expr: 'xmlTranslations.elementsByTagName(u"message")'
0194       <-Value: expr: 'xmlTranslations.elementsByTagName(u"message")'
0194      <--Variable: expr: 'xmlTranslations.elementsByTagName(u"message")'
0194        Member: end-gen
0194       Value: end-gen
0194      Variable: end-gen
0194      DeclarationBlock: line: 'nodeMess = xmlTranslations.elementsByTagName(u"message")'
0194    <-Source: line: 'nodeMess = xmlTranslations.elementsByTagName(u"message")'
0194   <--If: line: 'nodeMess = xmlTranslations.elementsByTagName(u"message")'
0194  <---Source: line: 'nodeMess = xmlTranslations.elementsByTagName(u"message")'
0194 <----Function: line: 'nodeMess = xmlTranslations.elementsByTagName(u"message")'
0194<-----Source: line: 'nodeMess = xmlTranslations.elementsByTagName(u"message")'
0195     DeclarationBlock: end-gen
0195     For: begin-gen
0195      Variable: begin-gen
0195       Variable: expr: 'i'
0195       Variable: expr: '='
0195       Value: begin-gen
0195        Constant: begin-gen
0195         Constant: ctype: 'Number' -> '0'
0195         Constant: expr: '0'
0195       <-Value: expr: '0'
0195      <--Variable: expr: '0'
0195        Constant: end-gen
0195       Value: end-gen
0195      Variable: end-gen
0195      For: line: 'i = 0'
0195    <-Source: line: 'i = 0'
0195   <--If: line: 'i = 0'
0195  <---Source: line: 'i = 0'
0195 <----Function: line: 'i = 0'
0195<-----Source: line: 'i = 0'
0196      InlineUpdate: begin-gen
0196       Identifier: begin-gen
0196        Identifier: expr: 'i'
0196       Identifier: end-gen
0196       InlineUpdate: expr: 'i'
0196       InlineUpdate: line+1: 'i += 1'
0196      InlineUpdate: end-gen
0196      Expression: begin-gen
0196       Identifier: begin-gen
0196        Identifier: expr: 'i'
0196      <-Expression: expr: 'i'
0196       Identifier: end-gen
0196       Compare: begin-gen
0196        Compare: expr: '<'
0196      <-Expression: expr: '<'
0196       Compare: end-gen
0196       Member: begin-gen
0196        Identifier: begin-gen
0196         Identifier: expr: 'nodeMess'
0196        Identifier: end-gen
0196        FunctionCall: begin-gen
0196         FunctionCall: expr: 'length()'
0196        FunctionCall: end-gen
0196        Member: expr: 'qsa(nodeMess).length()'
0196      <-Expression: expr: 'qsa(nodeMess).length()'
0196       Member: end-gen
0196      Expression: end-gen
0196      For: line: 'while i < qsa(nodeMess).length():'
0196    <-Source: line: 'while i < qsa(nodeMess).length():'
0196   <--If: line: 'while i < qsa(nodeMess).length():'
0196  <---Source: line: 'while i < qsa(nodeMess).length():'
0196 <----Function: line: 'while i < qsa(nodeMess).length():'
0196<-----Source: line: 'while i < qsa(nodeMess).length():'
0197      For: begin: 'block-for'
0197    <-Source: begin: 'block-for'
0197   <--If: begin: 'block-for'
0197  <---Source: begin: 'block-for'
0197 <----Function: begin: 'block-for'
0197<-----Source: begin: 'block-for'
0197      Source: begin-gen
0197       If: begin-gen
0197        Expression: begin-gen
0197         Member: begin-gen
0197          Identifier: begin-gen
0197           Identifier: expr: 'nodeMess'
0197          Identifier: end-gen
0197          FunctionCall: begin-gen
0197           Value: begin-gen
0197            Identifier: begin-gen
0197             Identifier: expr: 'i'
0197           <-Value: expr: 'i'
0197            Identifier: end-gen
0197           Value: end-gen
0197           FunctionCall: expr: 'item(i)'
0197          FunctionCall: end-gen
0197          FunctionCall: begin-gen
0197           Value: begin-gen
0197            Constant: begin-gen
0197             Constant: ctype: 'String' -> 'source'
0197             Constant: expr: 'u"source"'
0197           <-Value: expr: 'u"source"'
0197            Constant: end-gen
0197           Value: end-gen
0197           FunctionCall: expr: 'namedItem(u"source")'
0197          FunctionCall: end-gen
0197          FunctionCall: begin-gen
0197           FunctionCall: expr: 'toElement()'
0197          FunctionCall: end-gen
0197          FunctionCall: begin-gen
0197           FunctionCall: expr: 'text()'
0197          FunctionCall: end-gen
0197          Member: expr: 'qsa(nodeMess.item(i).namedItem(u"source").toElement()).text()'
0197        <-Expression: expr: 'qsa(nodeMess.item(i).namedItem(u"source").toElement()).text()'
0197         Member: end-gen
0197         Compare: begin-gen
0197          Compare: expr: '=='
0197        <-Expression: expr: '=='
0197         Compare: end-gen
0197         Identifier: begin-gen
0197          Identifier: expr: 'cadena'
0197        <-Expression: expr: 'cadena'
0197         Identifier: end-gen
0197        Expression: end-gen
0197        If: line: 'if qsa(nodeMess.item(i).namedItem(u"source").toElement()).text() == cadena:'
0197      <-Source: line: 'if qsa(nodeMess.item(i).namedItem(u"source").toElement()).text() == cadena:'
0197     <--For: line: 'if qsa(nodeMess.item(i).namedItem(u"source").toElement()).text() == cadena:'
0197    <---Source: line: 'if qsa(nodeMess.item(i).namedItem(u"source").toElement()).text() == cadena:'
0197   <----If: line: 'if qsa(nodeMess.item(i).namedItem(u"source").toElement()).text() == cadena:'
0197  <-----Source: line: 'if qsa(nodeMess.item(i).namedItem(u"source").toElement()).text() == cadena:'
0197 <------Function: line: 'if qsa(nodeMess.item(i).namedItem(u"source").toElement()).text() == cadena:'
0197<-------Source: line: 'if qsa(nodeMess.item(i).namedItem(u"source").toElement()).text() == cadena:'
0198        If: begin: 'block-if'
0198      <-Source: begin: 'block-if'
0198     <--For: begin: 'block-if'
0198    <---Source: begin: 'block-if'
0198   <----If: begin: 'block-if'
0198  <-----Source: begin: 'block-if'
0198 <------Function: begin: 'block-if'
0198<-------Source: begin: 'block-if'
0198        Source: begin-gen
0198         InstructionUpdate: begin-gen
0198          Identifier: begin-gen
0198           Identifier: expr: 'traduccion'
0198          Identifier: end-gen
0198          OpUpdate: begin-gen
0198           OpUpdate: expr: '='
0198          OpUpdate: end-gen
0198          Value: begin-gen
0198           Member: begin-gen
0198            Identifier: begin-gen
0198             Identifier: expr: 'nodeMess'
0198            Identifier: end-gen
0198            FunctionCall: begin-gen
0198             Value: begin-gen
0198              Identifier: begin-gen
0198               Identifier: expr: 'i'
0198             <-Value: expr: 'i'
0198              Identifier: end-gen
0198             Value: end-gen
0198             FunctionCall: expr: 'item(i)'
0198            FunctionCall: end-gen
0198            FunctionCall: begin-gen
0198             Value: begin-gen
0198              Constant: begin-gen
0198               Constant: ctype: 'String' -> 'translation'
0198               Constant: expr: 'u"translation"'
0198             <-Value: expr: 'u"translation"'
0198              Constant: end-gen
0198             Value: end-gen
0198             FunctionCall: expr: 'namedItem(u"translation")'
0198            FunctionCall: end-gen
0198            FunctionCall: begin-gen
0198             FunctionCall: expr: 'toElement()'
0198            FunctionCall: end-gen
0198            FunctionCall: begin-gen
0198             FunctionCall: expr: 'text()'
0198            FunctionCall: end-gen
0198            Member: expr: 'qsa(nodeMess.item(i).namedItem(u"translation").toElement()).text()'
0198          <-Value: expr: 'qsa(nodeMess.item(i).namedItem(u"translation").toElement()).text()'
0198           Member: end-gen
0198          Value: end-gen
0198          InstructionUpdate: line: 'traduccion = qsa(nodeMess.item(i).namedItem(u"translation").toElement()).text()'
0198        <-Source: line: 'traduccion = qsa(nodeMess.item(i).namedItem(u"translation").toElement()).text()'
0198       <--If: line: 'traduccion = qsa(nodeMess.item(i).namedItem(u"translation").toElement()).text()'
0198      <---Source: line: 'traduccion = qsa(nodeMess.item(i).namedItem(u"translation").toElement()).text()'
0198     <----For: line: 'traduccion = qsa(nodeMess.item(i).namedItem(u"translation").toElement()).text()'
0198    <-----Source: line: 'traduccion = qsa(nodeMess.item(i).namedItem(u"translation").toElement()).text()'
0198   <------If: line: 'traduccion = qsa(nodeMess.item(i).namedItem(u"translation").toElement()).text()'
0198  <-------Source: line: 'traduccion = qsa(nodeMess.item(i).namedItem(u"translation").toElement()).text()'
0198 <--------Function: line: 'traduccion = qsa(nodeMess.item(i).namedItem(u"translation").toElement()).text()'
0198<---------Source: line: 'traduccion = qsa(nodeMess.item(i).namedItem(u"translation").toElement()).text()'
0199         InstructionUpdate: end-gen
0199         If: begin-gen
0199          Value: begin-gen
0199           Identifier: begin-gen
0199            Identifier: expr: 'traduccion'
0199          <-Value: expr: 'traduccion'
0199           Identifier: end-gen
0199          Value: end-gen
0199          If: line: 'if traduccion:'
0199        <-Source: line: 'if traduccion:'
0199       <--If: line: 'if traduccion:'
0199      <---Source: line: 'if traduccion:'
0199     <----For: line: 'if traduccion:'
0199    <-----Source: line: 'if traduccion:'
0199   <------If: line: 'if traduccion:'
0199  <-------Source: line: 'if traduccion:'
0199 <--------Function: line: 'if traduccion:'
0199<---------Source: line: 'if traduccion:'
0200          If: begin: 'block-if'
0200        <-Source: begin: 'block-if'
0200       <--If: begin: 'block-if'
0200      <---Source: begin: 'block-if'
0200     <----For: begin: 'block-if'
0200    <-----Source: begin: 'block-if'
0200   <------If: begin: 'block-if'
0200  <-------Source: begin: 'block-if'
0200 <--------Function: begin: 'block-if'
0200<---------Source: begin: 'block-if'
0200          Source: begin-gen
0200           InstructionUpdate: begin-gen
0200            Identifier: begin-gen
0200             Identifier: expr: 'cadena'
0200            Identifier: end-gen
0200            OpUpdate: begin-gen
0200             OpUpdate: expr: '='
0200            OpUpdate: end-gen
0200            Value: begin-gen
0200             Identifier: begin-gen
0200              Identifier: expr: 'traduccion'
0200            <-Value: expr: 'traduccion'
0200             Identifier: end-gen
0200            Value: end-gen
0200            InstructionUpdate: line: 'cadena = traduccion'
0200          <-Source: line: 'cadena = traduccion'
0200         <--If: line: 'cadena = traduccion'
0200        <---Source: line: 'cadena = traduccion'
0200       <----If: line: 'cadena = traduccion'
0200      <-----Source: line: 'cadena = traduccion'
0200     <------For: line: 'cadena = traduccion'
0200    <-------Source: line: 'cadena = traduccion'
0200   <--------If: line: 'cadena = traduccion'
0200  <---------Source: line: 'cadena = traduccion'
0200 <----------Function: line: 'cadena = traduccion'
0200<-----------Source: line: 'cadena = traduccion'
0201           InstructionUpdate: end-gen
0201          Source: end-gen
0201          If: end: 'block-if'
0201        <-Source: end: 'block-if'
0201       <--If: end: 'block-if'
0201      <---Source: end: 'block-if'
0201     <----For: end: 'block-if'
0201    <-----Source: end: 'block-if'
0201   <------If: end: 'block-if'
0201  <-------Source: end: 'block-if'
0201 <--------Function: end: 'block-if'
0201<---------Source: end: 'block-if'
0201         If: end-gen
0201        Source: end-gen
0201        If: end: 'block-if'
0201      <-Source: end: 'block-if'
0201     <--For: end: 'block-if'
0201    <---Source: end: 'block-if'
0201   <----If: end: 'block-if'
0201  <-----Source: end: 'block-if'
0201 <------Function: end: 'block-if'
0201<-------Source: end: 'block-if'
0201       If: end-gen
0201      Source: end-gen
0201      For: line: 'i += 1'
0201    <-Source: line: 'i += 1'
0201   <--If: line: 'i += 1'
0201  <---Source: line: 'i += 1'
0201 <----Function: line: 'i += 1'
0201<-----Source: line: 'i += 1'
0202      For: end: 'block-for'
0202    <-Source: end: 'block-for'
0202   <--If: end: 'block-for'
0202  <---Source: end: 'block-for'
0202 <----Function: end: 'block-for'
0202<-----Source: end: 'block-for'
0202     For: end-gen
0202    Source: end-gen
0202    If: end: 'block-if'
0202  <-Source: end: 'block-if'
0202 <--Function: end: 'block-if'
0202<---Source: end: 'block-if'
0202   If: end-gen
0202   InstructionFlow: begin-gen
0202    Value: begin-gen
0202     Identifier: begin-gen
0202      Identifier: expr: 'cadena'
0202    <-Value: expr: 'cadena'
0202     Identifier: end-gen
0202    Value: end-gen
0202    InstructionFlow: line: 'return cadena'
0202  <-Source: line: 'return cadena'
0202 <--Function: line: 'return cadena'
0202<---Source: line: 'return cadena'
0204   InstructionFlow: end-gen
0204  Source: end-gen
0204  Function: end: 'block-def-traducirCadena'
0204<-Source: end: 'block-def-traducirCadena'
0205 Function: end-gen
0205Source: end-gen
